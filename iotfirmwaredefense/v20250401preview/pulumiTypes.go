// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20250401preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Firmware properties.
type FirmwareProperties struct {
	// User-specified description of the firmware.
	Description *string `pulumi:"description"`
	// File name for a firmware that user uploaded.
	FileName *string `pulumi:"fileName"`
	// File size of the uploaded firmware image.
	FileSize *float64 `pulumi:"fileSize"`
	// Firmware model.
	Model *string `pulumi:"model"`
	// The status of firmware scan.
	Status *string `pulumi:"status"`
	// A list of errors or other messages generated during firmware analysis
	StatusMessages []StatusMessage `pulumi:"statusMessages"`
	// Firmware vendor.
	Vendor *string `pulumi:"vendor"`
	// Firmware version.
	Version *string `pulumi:"version"`
}

// FirmwarePropertiesInput is an input type that accepts FirmwarePropertiesArgs and FirmwarePropertiesOutput values.
// You can construct a concrete instance of `FirmwarePropertiesInput` via:
//
//	FirmwarePropertiesArgs{...}
type FirmwarePropertiesInput interface {
	pulumi.Input

	ToFirmwarePropertiesOutput() FirmwarePropertiesOutput
	ToFirmwarePropertiesOutputWithContext(context.Context) FirmwarePropertiesOutput
}

// Firmware properties.
type FirmwarePropertiesArgs struct {
	// User-specified description of the firmware.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// File name for a firmware that user uploaded.
	FileName pulumi.StringPtrInput `pulumi:"fileName"`
	// File size of the uploaded firmware image.
	FileSize pulumi.Float64PtrInput `pulumi:"fileSize"`
	// Firmware model.
	Model pulumi.StringPtrInput `pulumi:"model"`
	// The status of firmware scan.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// A list of errors or other messages generated during firmware analysis
	StatusMessages StatusMessageArrayInput `pulumi:"statusMessages"`
	// Firmware vendor.
	Vendor pulumi.StringPtrInput `pulumi:"vendor"`
	// Firmware version.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (FirmwarePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirmwareProperties)(nil)).Elem()
}

func (i FirmwarePropertiesArgs) ToFirmwarePropertiesOutput() FirmwarePropertiesOutput {
	return i.ToFirmwarePropertiesOutputWithContext(context.Background())
}

func (i FirmwarePropertiesArgs) ToFirmwarePropertiesOutputWithContext(ctx context.Context) FirmwarePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirmwarePropertiesOutput)
}

func (i FirmwarePropertiesArgs) ToFirmwarePropertiesPtrOutput() FirmwarePropertiesPtrOutput {
	return i.ToFirmwarePropertiesPtrOutputWithContext(context.Background())
}

func (i FirmwarePropertiesArgs) ToFirmwarePropertiesPtrOutputWithContext(ctx context.Context) FirmwarePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirmwarePropertiesOutput).ToFirmwarePropertiesPtrOutputWithContext(ctx)
}

// FirmwarePropertiesPtrInput is an input type that accepts FirmwarePropertiesArgs, FirmwarePropertiesPtr and FirmwarePropertiesPtrOutput values.
// You can construct a concrete instance of `FirmwarePropertiesPtrInput` via:
//
//	        FirmwarePropertiesArgs{...}
//
//	or:
//
//	        nil
type FirmwarePropertiesPtrInput interface {
	pulumi.Input

	ToFirmwarePropertiesPtrOutput() FirmwarePropertiesPtrOutput
	ToFirmwarePropertiesPtrOutputWithContext(context.Context) FirmwarePropertiesPtrOutput
}

type firmwarePropertiesPtrType FirmwarePropertiesArgs

func FirmwarePropertiesPtr(v *FirmwarePropertiesArgs) FirmwarePropertiesPtrInput {
	return (*firmwarePropertiesPtrType)(v)
}

func (*firmwarePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FirmwareProperties)(nil)).Elem()
}

func (i *firmwarePropertiesPtrType) ToFirmwarePropertiesPtrOutput() FirmwarePropertiesPtrOutput {
	return i.ToFirmwarePropertiesPtrOutputWithContext(context.Background())
}

func (i *firmwarePropertiesPtrType) ToFirmwarePropertiesPtrOutputWithContext(ctx context.Context) FirmwarePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirmwarePropertiesPtrOutput)
}

// Firmware properties.
type FirmwarePropertiesOutput struct{ *pulumi.OutputState }

func (FirmwarePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirmwareProperties)(nil)).Elem()
}

func (o FirmwarePropertiesOutput) ToFirmwarePropertiesOutput() FirmwarePropertiesOutput {
	return o
}

func (o FirmwarePropertiesOutput) ToFirmwarePropertiesOutputWithContext(ctx context.Context) FirmwarePropertiesOutput {
	return o
}

func (o FirmwarePropertiesOutput) ToFirmwarePropertiesPtrOutput() FirmwarePropertiesPtrOutput {
	return o.ToFirmwarePropertiesPtrOutputWithContext(context.Background())
}

func (o FirmwarePropertiesOutput) ToFirmwarePropertiesPtrOutputWithContext(ctx context.Context) FirmwarePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FirmwareProperties) *FirmwareProperties {
		return &v
	}).(FirmwarePropertiesPtrOutput)
}

// User-specified description of the firmware.
func (o FirmwarePropertiesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirmwareProperties) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// File name for a firmware that user uploaded.
func (o FirmwarePropertiesOutput) FileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirmwareProperties) *string { return v.FileName }).(pulumi.StringPtrOutput)
}

// File size of the uploaded firmware image.
func (o FirmwarePropertiesOutput) FileSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v FirmwareProperties) *float64 { return v.FileSize }).(pulumi.Float64PtrOutput)
}

// Firmware model.
func (o FirmwarePropertiesOutput) Model() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirmwareProperties) *string { return v.Model }).(pulumi.StringPtrOutput)
}

// The status of firmware scan.
func (o FirmwarePropertiesOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirmwareProperties) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// A list of errors or other messages generated during firmware analysis
func (o FirmwarePropertiesOutput) StatusMessages() StatusMessageArrayOutput {
	return o.ApplyT(func(v FirmwareProperties) []StatusMessage { return v.StatusMessages }).(StatusMessageArrayOutput)
}

// Firmware vendor.
func (o FirmwarePropertiesOutput) Vendor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirmwareProperties) *string { return v.Vendor }).(pulumi.StringPtrOutput)
}

// Firmware version.
func (o FirmwarePropertiesOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirmwareProperties) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type FirmwarePropertiesPtrOutput struct{ *pulumi.OutputState }

func (FirmwarePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirmwareProperties)(nil)).Elem()
}

func (o FirmwarePropertiesPtrOutput) ToFirmwarePropertiesPtrOutput() FirmwarePropertiesPtrOutput {
	return o
}

func (o FirmwarePropertiesPtrOutput) ToFirmwarePropertiesPtrOutputWithContext(ctx context.Context) FirmwarePropertiesPtrOutput {
	return o
}

func (o FirmwarePropertiesPtrOutput) Elem() FirmwarePropertiesOutput {
	return o.ApplyT(func(v *FirmwareProperties) FirmwareProperties {
		if v != nil {
			return *v
		}
		var ret FirmwareProperties
		return ret
	}).(FirmwarePropertiesOutput)
}

// User-specified description of the firmware.
func (o FirmwarePropertiesPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirmwareProperties) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// File name for a firmware that user uploaded.
func (o FirmwarePropertiesPtrOutput) FileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirmwareProperties) *string {
		if v == nil {
			return nil
		}
		return v.FileName
	}).(pulumi.StringPtrOutput)
}

// File size of the uploaded firmware image.
func (o FirmwarePropertiesPtrOutput) FileSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *FirmwareProperties) *float64 {
		if v == nil {
			return nil
		}
		return v.FileSize
	}).(pulumi.Float64PtrOutput)
}

// Firmware model.
func (o FirmwarePropertiesPtrOutput) Model() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirmwareProperties) *string {
		if v == nil {
			return nil
		}
		return v.Model
	}).(pulumi.StringPtrOutput)
}

// The status of firmware scan.
func (o FirmwarePropertiesPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirmwareProperties) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// A list of errors or other messages generated during firmware analysis
func (o FirmwarePropertiesPtrOutput) StatusMessages() StatusMessageArrayOutput {
	return o.ApplyT(func(v *FirmwareProperties) []StatusMessage {
		if v == nil {
			return nil
		}
		return v.StatusMessages
	}).(StatusMessageArrayOutput)
}

// Firmware vendor.
func (o FirmwarePropertiesPtrOutput) Vendor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirmwareProperties) *string {
		if v == nil {
			return nil
		}
		return v.Vendor
	}).(pulumi.StringPtrOutput)
}

// Firmware version.
func (o FirmwarePropertiesPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirmwareProperties) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Firmware properties.
type FirmwarePropertiesResponse struct {
	// User-specified description of the firmware.
	Description *string `pulumi:"description"`
	// File name for a firmware that user uploaded.
	FileName *string `pulumi:"fileName"`
	// File size of the uploaded firmware image.
	FileSize *float64 `pulumi:"fileSize"`
	// Firmware model.
	Model *string `pulumi:"model"`
	// Provisioning state of the resource.
	ProvisioningState string `pulumi:"provisioningState"`
	// The status of firmware scan.
	Status *string `pulumi:"status"`
	// A list of errors or other messages generated during firmware analysis
	StatusMessages []StatusMessageResponse `pulumi:"statusMessages"`
	// Firmware vendor.
	Vendor *string `pulumi:"vendor"`
	// Firmware version.
	Version *string `pulumi:"version"`
}

// Firmware properties.
type FirmwarePropertiesResponseOutput struct{ *pulumi.OutputState }

func (FirmwarePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirmwarePropertiesResponse)(nil)).Elem()
}

func (o FirmwarePropertiesResponseOutput) ToFirmwarePropertiesResponseOutput() FirmwarePropertiesResponseOutput {
	return o
}

func (o FirmwarePropertiesResponseOutput) ToFirmwarePropertiesResponseOutputWithContext(ctx context.Context) FirmwarePropertiesResponseOutput {
	return o
}

// User-specified description of the firmware.
func (o FirmwarePropertiesResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirmwarePropertiesResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// File name for a firmware that user uploaded.
func (o FirmwarePropertiesResponseOutput) FileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirmwarePropertiesResponse) *string { return v.FileName }).(pulumi.StringPtrOutput)
}

// File size of the uploaded firmware image.
func (o FirmwarePropertiesResponseOutput) FileSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v FirmwarePropertiesResponse) *float64 { return v.FileSize }).(pulumi.Float64PtrOutput)
}

// Firmware model.
func (o FirmwarePropertiesResponseOutput) Model() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirmwarePropertiesResponse) *string { return v.Model }).(pulumi.StringPtrOutput)
}

// Provisioning state of the resource.
func (o FirmwarePropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v FirmwarePropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The status of firmware scan.
func (o FirmwarePropertiesResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirmwarePropertiesResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// A list of errors or other messages generated during firmware analysis
func (o FirmwarePropertiesResponseOutput) StatusMessages() StatusMessageResponseArrayOutput {
	return o.ApplyT(func(v FirmwarePropertiesResponse) []StatusMessageResponse { return v.StatusMessages }).(StatusMessageResponseArrayOutput)
}

// Firmware vendor.
func (o FirmwarePropertiesResponseOutput) Vendor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirmwarePropertiesResponse) *string { return v.Vendor }).(pulumi.StringPtrOutput)
}

// Firmware version.
func (o FirmwarePropertiesResponseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirmwarePropertiesResponse) *string { return v.Version }).(pulumi.StringPtrOutput)
}

// The resource model definition representing SKU
type Sku struct {
	// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
	Capacity *int `pulumi:"capacity"`
	// If the service has different generations of hardware, for the same SKU, then that can be captured here.
	Family *string `pulumi:"family"`
	// The name of the SKU. E.g. P3. It is typically a letter+number code
	Name string `pulumi:"name"`
	// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
	Size *string `pulumi:"size"`
	// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
	Tier *SkuTier `pulumi:"tier"`
}

// SkuInput is an input type that accepts SkuArgs and SkuOutput values.
// You can construct a concrete instance of `SkuInput` via:
//
//	SkuArgs{...}
type SkuInput interface {
	pulumi.Input

	ToSkuOutput() SkuOutput
	ToSkuOutputWithContext(context.Context) SkuOutput
}

// The resource model definition representing SKU
type SkuArgs struct {
	// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// If the service has different generations of hardware, for the same SKU, then that can be captured here.
	Family pulumi.StringPtrInput `pulumi:"family"`
	// The name of the SKU. E.g. P3. It is typically a letter+number code
	Name pulumi.StringInput `pulumi:"name"`
	// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
	Size pulumi.StringPtrInput `pulumi:"size"`
	// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
	Tier SkuTierPtrInput `pulumi:"tier"`
}

func (SkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (i SkuArgs) ToSkuOutput() SkuOutput {
	return i.ToSkuOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput)
}

func (i SkuArgs) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput).ToSkuPtrOutputWithContext(ctx)
}

// SkuPtrInput is an input type that accepts SkuArgs, SkuPtr and SkuPtrOutput values.
// You can construct a concrete instance of `SkuPtrInput` via:
//
//	        SkuArgs{...}
//
//	or:
//
//	        nil
type SkuPtrInput interface {
	pulumi.Input

	ToSkuPtrOutput() SkuPtrOutput
	ToSkuPtrOutputWithContext(context.Context) SkuPtrOutput
}

type skuPtrType SkuArgs

func SkuPtr(v *SkuArgs) SkuPtrInput {
	return (*skuPtrType)(v)
}

func (*skuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (i *skuPtrType) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i *skuPtrType) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuPtrOutput)
}

// The resource model definition representing SKU
type SkuOutput struct{ *pulumi.OutputState }

func (SkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (o SkuOutput) ToSkuOutput() SkuOutput {
	return o
}

func (o SkuOutput) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return o
}

func (o SkuOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o.ToSkuPtrOutputWithContext(context.Background())
}

func (o SkuOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Sku) *Sku {
		return &v
	}).(SkuPtrOutput)
}

// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
func (o SkuOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Sku) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// If the service has different generations of hardware, for the same SKU, then that can be captured here.
func (o SkuOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The name of the SKU. E.g. P3. It is typically a letter+number code
func (o SkuOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Sku) string { return v.Name }).(pulumi.StringOutput)
}

// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
func (o SkuOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
func (o SkuOutput) Tier() SkuTierPtrOutput {
	return o.ApplyT(func(v Sku) *SkuTier { return v.Tier }).(SkuTierPtrOutput)
}

type SkuPtrOutput struct{ *pulumi.OutputState }

func (SkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (o SkuPtrOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) Elem() SkuOutput {
	return o.ApplyT(func(v *Sku) Sku {
		if v != nil {
			return *v
		}
		var ret Sku
		return ret
	}).(SkuOutput)
}

// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
func (o SkuPtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Sku) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// If the service has different generations of hardware, for the same SKU, then that can be captured here.
func (o SkuPtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The name of the SKU. E.g. P3. It is typically a letter+number code
func (o SkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
func (o SkuPtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
func (o SkuPtrOutput) Tier() SkuTierPtrOutput {
	return o.ApplyT(func(v *Sku) *SkuTier {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(SkuTierPtrOutput)
}

// The resource model definition representing SKU
type SkuResponse struct {
	// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
	Capacity *int `pulumi:"capacity"`
	// If the service has different generations of hardware, for the same SKU, then that can be captured here.
	Family *string `pulumi:"family"`
	// The name of the SKU. E.g. P3. It is typically a letter+number code
	Name string `pulumi:"name"`
	// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
	Size *string `pulumi:"size"`
	// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
	Tier *string `pulumi:"tier"`
}

// The resource model definition representing SKU
type SkuResponseOutput struct{ *pulumi.OutputState }

func (SkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (o SkuResponseOutput) ToSkuResponseOutput() SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return o
}

// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
func (o SkuResponseOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SkuResponse) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// If the service has different generations of hardware, for the same SKU, then that can be captured here.
func (o SkuResponseOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The name of the SKU. E.g. P3. It is typically a letter+number code
func (o SkuResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SkuResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
func (o SkuResponseOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
func (o SkuResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type SkuResponsePtrOutput struct{ *pulumi.OutputState }

func (SkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) Elem() SkuResponseOutput {
	return o.ApplyT(func(v *SkuResponse) SkuResponse {
		if v != nil {
			return *v
		}
		var ret SkuResponse
		return ret
	}).(SkuResponseOutput)
}

// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
func (o SkuResponsePtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// If the service has different generations of hardware, for the same SKU, then that can be captured here.
func (o SkuResponsePtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The name of the SKU. E.g. P3. It is typically a letter+number code
func (o SkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
func (o SkuResponsePtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
func (o SkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// Error and status message
type StatusMessage struct {
	// The error code
	ErrorCode *float64 `pulumi:"errorCode"`
	// The error or status message
	Message *string `pulumi:"message"`
}

// StatusMessageInput is an input type that accepts StatusMessageArgs and StatusMessageOutput values.
// You can construct a concrete instance of `StatusMessageInput` via:
//
//	StatusMessageArgs{...}
type StatusMessageInput interface {
	pulumi.Input

	ToStatusMessageOutput() StatusMessageOutput
	ToStatusMessageOutputWithContext(context.Context) StatusMessageOutput
}

// Error and status message
type StatusMessageArgs struct {
	// The error code
	ErrorCode pulumi.Float64PtrInput `pulumi:"errorCode"`
	// The error or status message
	Message pulumi.StringPtrInput `pulumi:"message"`
}

func (StatusMessageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusMessage)(nil)).Elem()
}

func (i StatusMessageArgs) ToStatusMessageOutput() StatusMessageOutput {
	return i.ToStatusMessageOutputWithContext(context.Background())
}

func (i StatusMessageArgs) ToStatusMessageOutputWithContext(ctx context.Context) StatusMessageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusMessageOutput)
}

// StatusMessageArrayInput is an input type that accepts StatusMessageArray and StatusMessageArrayOutput values.
// You can construct a concrete instance of `StatusMessageArrayInput` via:
//
//	StatusMessageArray{ StatusMessageArgs{...} }
type StatusMessageArrayInput interface {
	pulumi.Input

	ToStatusMessageArrayOutput() StatusMessageArrayOutput
	ToStatusMessageArrayOutputWithContext(context.Context) StatusMessageArrayOutput
}

type StatusMessageArray []StatusMessageInput

func (StatusMessageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StatusMessage)(nil)).Elem()
}

func (i StatusMessageArray) ToStatusMessageArrayOutput() StatusMessageArrayOutput {
	return i.ToStatusMessageArrayOutputWithContext(context.Background())
}

func (i StatusMessageArray) ToStatusMessageArrayOutputWithContext(ctx context.Context) StatusMessageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusMessageArrayOutput)
}

// Error and status message
type StatusMessageOutput struct{ *pulumi.OutputState }

func (StatusMessageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusMessage)(nil)).Elem()
}

func (o StatusMessageOutput) ToStatusMessageOutput() StatusMessageOutput {
	return o
}

func (o StatusMessageOutput) ToStatusMessageOutputWithContext(ctx context.Context) StatusMessageOutput {
	return o
}

// The error code
func (o StatusMessageOutput) ErrorCode() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v StatusMessage) *float64 { return v.ErrorCode }).(pulumi.Float64PtrOutput)
}

// The error or status message
func (o StatusMessageOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatusMessage) *string { return v.Message }).(pulumi.StringPtrOutput)
}

type StatusMessageArrayOutput struct{ *pulumi.OutputState }

func (StatusMessageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StatusMessage)(nil)).Elem()
}

func (o StatusMessageArrayOutput) ToStatusMessageArrayOutput() StatusMessageArrayOutput {
	return o
}

func (o StatusMessageArrayOutput) ToStatusMessageArrayOutputWithContext(ctx context.Context) StatusMessageArrayOutput {
	return o
}

func (o StatusMessageArrayOutput) Index(i pulumi.IntInput) StatusMessageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StatusMessage {
		return vs[0].([]StatusMessage)[vs[1].(int)]
	}).(StatusMessageOutput)
}

// Error and status message
type StatusMessageResponse struct {
	// The error code
	ErrorCode *float64 `pulumi:"errorCode"`
	// The error or status message
	Message *string `pulumi:"message"`
}

// Error and status message
type StatusMessageResponseOutput struct{ *pulumi.OutputState }

func (StatusMessageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusMessageResponse)(nil)).Elem()
}

func (o StatusMessageResponseOutput) ToStatusMessageResponseOutput() StatusMessageResponseOutput {
	return o
}

func (o StatusMessageResponseOutput) ToStatusMessageResponseOutputWithContext(ctx context.Context) StatusMessageResponseOutput {
	return o
}

// The error code
func (o StatusMessageResponseOutput) ErrorCode() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v StatusMessageResponse) *float64 { return v.ErrorCode }).(pulumi.Float64PtrOutput)
}

// The error or status message
func (o StatusMessageResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatusMessageResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

type StatusMessageResponseArrayOutput struct{ *pulumi.OutputState }

func (StatusMessageResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StatusMessageResponse)(nil)).Elem()
}

func (o StatusMessageResponseArrayOutput) ToStatusMessageResponseArrayOutput() StatusMessageResponseArrayOutput {
	return o
}

func (o StatusMessageResponseArrayOutput) ToStatusMessageResponseArrayOutputWithContext(ctx context.Context) StatusMessageResponseArrayOutput {
	return o
}

func (o StatusMessageResponseArrayOutput) Index(i pulumi.IntInput) StatusMessageResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StatusMessageResponse {
		return vs[0].([]StatusMessageResponse)[vs[1].(int)]
	}).(StatusMessageResponseOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// Workspace properties.
type WorkspacePropertiesResponse struct {
	// Provisioning state of the resource.
	ProvisioningState string `pulumi:"provisioningState"`
}

// Workspace properties.
type WorkspacePropertiesResponseOutput struct{ *pulumi.OutputState }

func (WorkspacePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspacePropertiesResponse)(nil)).Elem()
}

func (o WorkspacePropertiesResponseOutput) ToWorkspacePropertiesResponseOutput() WorkspacePropertiesResponseOutput {
	return o
}

func (o WorkspacePropertiesResponseOutput) ToWorkspacePropertiesResponseOutputWithContext(ctx context.Context) WorkspacePropertiesResponseOutput {
	return o
}

// Provisioning state of the resource.
func (o WorkspacePropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v WorkspacePropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(FirmwarePropertiesOutput{})
	pulumi.RegisterOutputType(FirmwarePropertiesPtrOutput{})
	pulumi.RegisterOutputType(FirmwarePropertiesResponseOutput{})
	pulumi.RegisterOutputType(SkuOutput{})
	pulumi.RegisterOutputType(SkuPtrOutput{})
	pulumi.RegisterOutputType(SkuResponseOutput{})
	pulumi.RegisterOutputType(SkuResponsePtrOutput{})
	pulumi.RegisterOutputType(StatusMessageOutput{})
	pulumi.RegisterOutputType(StatusMessageArrayOutput{})
	pulumi.RegisterOutputType(StatusMessageResponseOutput{})
	pulumi.RegisterOutputType(StatusMessageResponseArrayOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(WorkspacePropertiesResponseOutput{})
}
