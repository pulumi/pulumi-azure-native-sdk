// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20240601preview

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// API source entity.
type ApiSource struct {
	pulumi.CustomResourceState

	// API source configuration for Azure API Management.
	AzureApiManagementSource AzureApiManagementSourceResponsePtrOutput `pulumi:"azureApiManagementSource"`
	// Indicates if the specification should be imported along with metadata.
	ImportSpecification pulumi.StringPtrOutput `pulumi:"importSpecification"`
	// The state of the API source link
	LinkState LinkStateResponseOutput `pulumi:"linkState"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The target environment resource ID.
	TargetEnvironmentId pulumi.StringPtrOutput `pulumi:"targetEnvironmentId"`
	// The target lifecycle stage.
	TargetLifecycleStage pulumi.StringPtrOutput `pulumi:"targetLifecycleStage"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewApiSource registers a new resource with the given unique name, arguments, and options.
func NewApiSource(ctx *pulumi.Context,
	name string, args *ApiSourceArgs, opts ...pulumi.ResourceOption) (*ApiSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.WorkspaceName == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceName'")
	}
	if args.ImportSpecification == nil {
		args.ImportSpecification = pulumi.StringPtr("ondemand")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:apicenter:ApiSource"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ApiSource
	err := ctx.RegisterResource("azure-native:apicenter/v20240601preview:ApiSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApiSource gets an existing ApiSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApiSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApiSourceState, opts ...pulumi.ResourceOption) (*ApiSource, error) {
	var resource ApiSource
	err := ctx.ReadResource("azure-native:apicenter/v20240601preview:ApiSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApiSource resources.
type apiSourceState struct {
}

type ApiSourceState struct {
}

func (ApiSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*apiSourceState)(nil)).Elem()
}

type apiSourceArgs struct {
	// The name of the API.
	ApiSourceName *string `pulumi:"apiSourceName"`
	// API source configuration for Azure API Management.
	AzureApiManagementSource *AzureApiManagementSource `pulumi:"azureApiManagementSource"`
	// Indicates if the specification should be imported along with metadata.
	ImportSpecification *string `pulumi:"importSpecification"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of Azure API Center service.
	ServiceName string `pulumi:"serviceName"`
	// The target environment resource ID.
	TargetEnvironmentId *string `pulumi:"targetEnvironmentId"`
	// The target lifecycle stage.
	TargetLifecycleStage *string `pulumi:"targetLifecycleStage"`
	// The name of the workspace.
	WorkspaceName string `pulumi:"workspaceName"`
}

// The set of arguments for constructing a ApiSource resource.
type ApiSourceArgs struct {
	// The name of the API.
	ApiSourceName pulumi.StringPtrInput
	// API source configuration for Azure API Management.
	AzureApiManagementSource AzureApiManagementSourcePtrInput
	// Indicates if the specification should be imported along with metadata.
	ImportSpecification pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The name of Azure API Center service.
	ServiceName pulumi.StringInput
	// The target environment resource ID.
	TargetEnvironmentId pulumi.StringPtrInput
	// The target lifecycle stage.
	TargetLifecycleStage pulumi.StringPtrInput
	// The name of the workspace.
	WorkspaceName pulumi.StringInput
}

func (ApiSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apiSourceArgs)(nil)).Elem()
}

type ApiSourceInput interface {
	pulumi.Input

	ToApiSourceOutput() ApiSourceOutput
	ToApiSourceOutputWithContext(ctx context.Context) ApiSourceOutput
}

func (*ApiSource) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiSource)(nil)).Elem()
}

func (i *ApiSource) ToApiSourceOutput() ApiSourceOutput {
	return i.ToApiSourceOutputWithContext(context.Background())
}

func (i *ApiSource) ToApiSourceOutputWithContext(ctx context.Context) ApiSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiSourceOutput)
}

type ApiSourceOutput struct{ *pulumi.OutputState }

func (ApiSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiSource)(nil)).Elem()
}

func (o ApiSourceOutput) ToApiSourceOutput() ApiSourceOutput {
	return o
}

func (o ApiSourceOutput) ToApiSourceOutputWithContext(ctx context.Context) ApiSourceOutput {
	return o
}

// API source configuration for Azure API Management.
func (o ApiSourceOutput) AzureApiManagementSource() AzureApiManagementSourceResponsePtrOutput {
	return o.ApplyT(func(v *ApiSource) AzureApiManagementSourceResponsePtrOutput { return v.AzureApiManagementSource }).(AzureApiManagementSourceResponsePtrOutput)
}

// Indicates if the specification should be imported along with metadata.
func (o ApiSourceOutput) ImportSpecification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiSource) pulumi.StringPtrOutput { return v.ImportSpecification }).(pulumi.StringPtrOutput)
}

// The state of the API source link
func (o ApiSourceOutput) LinkState() LinkStateResponseOutput {
	return o.ApplyT(func(v *ApiSource) LinkStateResponseOutput { return v.LinkState }).(LinkStateResponseOutput)
}

// The name of the resource
func (o ApiSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiSource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o ApiSourceOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *ApiSource) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The target environment resource ID.
func (o ApiSourceOutput) TargetEnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiSource) pulumi.StringPtrOutput { return v.TargetEnvironmentId }).(pulumi.StringPtrOutput)
}

// The target lifecycle stage.
func (o ApiSourceOutput) TargetLifecycleStage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiSource) pulumi.StringPtrOutput { return v.TargetLifecycleStage }).(pulumi.StringPtrOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o ApiSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiSource) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ApiSourceOutput{})
}
