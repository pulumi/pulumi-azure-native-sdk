// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbformysql

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a and external administrator to be created.
//
// Uses Azure REST API version 2017-12-01.
type SingleServerServerAdministrator struct {
	pulumi.CustomResourceState

	// The type of administrator.
	AdministratorType pulumi.StringOutput `pulumi:"administratorType"`
	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// The server administrator login account name.
	Login pulumi.StringOutput `pulumi:"login"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The server administrator Sid (Secure ID).
	Sid pulumi.StringOutput `pulumi:"sid"`
	// The server Active Directory Administrator tenant id.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSingleServerServerAdministrator registers a new resource with the given unique name, arguments, and options.
func NewSingleServerServerAdministrator(ctx *pulumi.Context,
	name string, args *SingleServerServerAdministratorArgs, opts ...pulumi.ResourceOption) (*SingleServerServerAdministrator, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdministratorType == nil {
		return nil, errors.New("invalid value for required argument 'AdministratorType'")
	}
	if args.Login == nil {
		return nil, errors.New("invalid value for required argument 'Login'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ServerName == nil {
		return nil, errors.New("invalid value for required argument 'ServerName'")
	}
	if args.Sid == nil {
		return nil, errors.New("invalid value for required argument 'Sid'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:dbformysql/v20171201:ServerAdministrator"),
		},
		{
			Type: pulumi.String("azure-native:dbformysql/v20171201:SingleServerServerAdministrator"),
		},
		{
			Type: pulumi.String("azure-native:dbformysql/v20171201preview:SingleServerServerAdministrator"),
		},
		{
			Type: pulumi.String("azure-native:dbformysql/v20180601privatepreview:ServerAdministrator"),
		},
		{
			Type: pulumi.String("azure-native:dbformysql/v20180601privatepreview:SingleServerServerAdministrator"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource SingleServerServerAdministrator
	err := ctx.RegisterResource("azure-native:dbformysql:SingleServerServerAdministrator", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSingleServerServerAdministrator gets an existing SingleServerServerAdministrator resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSingleServerServerAdministrator(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SingleServerServerAdministratorState, opts ...pulumi.ResourceOption) (*SingleServerServerAdministrator, error) {
	var resource SingleServerServerAdministrator
	err := ctx.ReadResource("azure-native:dbformysql:SingleServerServerAdministrator", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SingleServerServerAdministrator resources.
type singleServerServerAdministratorState struct {
}

type SingleServerServerAdministratorState struct {
}

func (SingleServerServerAdministratorState) ElementType() reflect.Type {
	return reflect.TypeOf((*singleServerServerAdministratorState)(nil)).Elem()
}

type singleServerServerAdministratorArgs struct {
	// The type of administrator.
	AdministratorType string `pulumi:"administratorType"`
	// The server administrator login account name.
	Login string `pulumi:"login"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the server.
	ServerName string `pulumi:"serverName"`
	// The server administrator Sid (Secure ID).
	Sid string `pulumi:"sid"`
	// The server Active Directory Administrator tenant id.
	TenantId string `pulumi:"tenantId"`
}

// The set of arguments for constructing a SingleServerServerAdministrator resource.
type SingleServerServerAdministratorArgs struct {
	// The type of administrator.
	AdministratorType pulumi.StringInput
	// The server administrator login account name.
	Login pulumi.StringInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The name of the server.
	ServerName pulumi.StringInput
	// The server administrator Sid (Secure ID).
	Sid pulumi.StringInput
	// The server Active Directory Administrator tenant id.
	TenantId pulumi.StringInput
}

func (SingleServerServerAdministratorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*singleServerServerAdministratorArgs)(nil)).Elem()
}

type SingleServerServerAdministratorInput interface {
	pulumi.Input

	ToSingleServerServerAdministratorOutput() SingleServerServerAdministratorOutput
	ToSingleServerServerAdministratorOutputWithContext(ctx context.Context) SingleServerServerAdministratorOutput
}

func (*SingleServerServerAdministrator) ElementType() reflect.Type {
	return reflect.TypeOf((**SingleServerServerAdministrator)(nil)).Elem()
}

func (i *SingleServerServerAdministrator) ToSingleServerServerAdministratorOutput() SingleServerServerAdministratorOutput {
	return i.ToSingleServerServerAdministratorOutputWithContext(context.Background())
}

func (i *SingleServerServerAdministrator) ToSingleServerServerAdministratorOutputWithContext(ctx context.Context) SingleServerServerAdministratorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleServerServerAdministratorOutput)
}

type SingleServerServerAdministratorOutput struct{ *pulumi.OutputState }

func (SingleServerServerAdministratorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SingleServerServerAdministrator)(nil)).Elem()
}

func (o SingleServerServerAdministratorOutput) ToSingleServerServerAdministratorOutput() SingleServerServerAdministratorOutput {
	return o
}

func (o SingleServerServerAdministratorOutput) ToSingleServerServerAdministratorOutputWithContext(ctx context.Context) SingleServerServerAdministratorOutput {
	return o
}

// The type of administrator.
func (o SingleServerServerAdministratorOutput) AdministratorType() pulumi.StringOutput {
	return o.ApplyT(func(v *SingleServerServerAdministrator) pulumi.StringOutput { return v.AdministratorType }).(pulumi.StringOutput)
}

// The Azure API version of the resource.
func (o SingleServerServerAdministratorOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *SingleServerServerAdministrator) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// The server administrator login account name.
func (o SingleServerServerAdministratorOutput) Login() pulumi.StringOutput {
	return o.ApplyT(func(v *SingleServerServerAdministrator) pulumi.StringOutput { return v.Login }).(pulumi.StringOutput)
}

// The name of the resource
func (o SingleServerServerAdministratorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SingleServerServerAdministrator) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The server administrator Sid (Secure ID).
func (o SingleServerServerAdministratorOutput) Sid() pulumi.StringOutput {
	return o.ApplyT(func(v *SingleServerServerAdministrator) pulumi.StringOutput { return v.Sid }).(pulumi.StringOutput)
}

// The server Active Directory Administrator tenant id.
func (o SingleServerServerAdministratorOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *SingleServerServerAdministrator) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o SingleServerServerAdministratorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SingleServerServerAdministrator) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(SingleServerServerAdministratorOutput{})
}
