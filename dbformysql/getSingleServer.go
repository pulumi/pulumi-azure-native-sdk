// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbformysql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets information about a server.
//
// Uses Azure REST API version 2017-12-01.
func LookupSingleServer(ctx *pulumi.Context, args *LookupSingleServerArgs, opts ...pulumi.InvokeOption) (*LookupSingleServerResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupSingleServerResult
	err := ctx.Invoke("azure-native:dbformysql:getSingleServer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupSingleServerArgs struct {
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the server.
	ServerName string `pulumi:"serverName"`
}

// Represents a server.
type LookupSingleServerResult struct {
	// The administrator's login name of a server. Can only be specified when the server is being created (and is required for creation).
	AdministratorLogin *string `pulumi:"administratorLogin"`
	// The Azure API version of the resource.
	AzureApiVersion string `pulumi:"azureApiVersion"`
	// Status showing whether the server data encryption is enabled with customer-managed keys.
	ByokEnforcement string `pulumi:"byokEnforcement"`
	// Earliest restore point creation time (ISO8601 format)
	EarliestRestoreDate *string `pulumi:"earliestRestoreDate"`
	// The fully qualified domain name of a server.
	FullyQualifiedDomainName *string `pulumi:"fullyQualifiedDomainName"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// The Azure Active Directory identity of the server.
	Identity *ResourceIdentityResponse `pulumi:"identity"`
	// Status showing whether the server enabled infrastructure encryption.
	InfrastructureEncryption *string `pulumi:"infrastructureEncryption"`
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// The master server id of a replica server.
	MasterServerId *string `pulumi:"masterServerId"`
	// Enforce a minimal Tls version for the server.
	MinimalTlsVersion *string `pulumi:"minimalTlsVersion"`
	// The name of the resource
	Name string `pulumi:"name"`
	// List of private endpoint connections on a server
	PrivateEndpointConnections []ServerPrivateEndpointConnectionResponse `pulumi:"privateEndpointConnections"`
	// Whether or not public network access is allowed for this server. Value is optional but if passed in, must be 'Enabled' or 'Disabled'
	PublicNetworkAccess *string `pulumi:"publicNetworkAccess"`
	// The maximum number of replicas that a master server can have.
	ReplicaCapacity *int `pulumi:"replicaCapacity"`
	// The replication role of the server.
	ReplicationRole *string `pulumi:"replicationRole"`
	// The SKU (pricing tier) of the server.
	Sku *SkuResponse `pulumi:"sku"`
	// Enable ssl enforcement or not when connect to server.
	SslEnforcement *string `pulumi:"sslEnforcement"`
	// Storage profile of a server.
	StorageProfile *StorageProfileResponse `pulumi:"storageProfile"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
	// A state of a server that is visible to user.
	UserVisibleState *string `pulumi:"userVisibleState"`
	// Server version.
	Version *string `pulumi:"version"`
}

func LookupSingleServerOutput(ctx *pulumi.Context, args LookupSingleServerOutputArgs, opts ...pulumi.InvokeOption) LookupSingleServerResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSingleServerResultOutput, error) {
			args := v.(LookupSingleServerArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: utilities.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure-native:dbformysql:getSingleServer", args, LookupSingleServerResultOutput{}, options).(LookupSingleServerResultOutput), nil
		}).(LookupSingleServerResultOutput)
}

type LookupSingleServerOutputArgs struct {
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The name of the server.
	ServerName pulumi.StringInput `pulumi:"serverName"`
}

func (LookupSingleServerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSingleServerArgs)(nil)).Elem()
}

// Represents a server.
type LookupSingleServerResultOutput struct{ *pulumi.OutputState }

func (LookupSingleServerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSingleServerResult)(nil)).Elem()
}

func (o LookupSingleServerResultOutput) ToLookupSingleServerResultOutput() LookupSingleServerResultOutput {
	return o
}

func (o LookupSingleServerResultOutput) ToLookupSingleServerResultOutputWithContext(ctx context.Context) LookupSingleServerResultOutput {
	return o
}

// The administrator's login name of a server. Can only be specified when the server is being created (and is required for creation).
func (o LookupSingleServerResultOutput) AdministratorLogin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSingleServerResult) *string { return v.AdministratorLogin }).(pulumi.StringPtrOutput)
}

// The Azure API version of the resource.
func (o LookupSingleServerResultOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSingleServerResult) string { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// Status showing whether the server data encryption is enabled with customer-managed keys.
func (o LookupSingleServerResultOutput) ByokEnforcement() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSingleServerResult) string { return v.ByokEnforcement }).(pulumi.StringOutput)
}

// Earliest restore point creation time (ISO8601 format)
func (o LookupSingleServerResultOutput) EarliestRestoreDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSingleServerResult) *string { return v.EarliestRestoreDate }).(pulumi.StringPtrOutput)
}

// The fully qualified domain name of a server.
func (o LookupSingleServerResultOutput) FullyQualifiedDomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSingleServerResult) *string { return v.FullyQualifiedDomainName }).(pulumi.StringPtrOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupSingleServerResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSingleServerResult) string { return v.Id }).(pulumi.StringOutput)
}

// The Azure Active Directory identity of the server.
func (o LookupSingleServerResultOutput) Identity() ResourceIdentityResponsePtrOutput {
	return o.ApplyT(func(v LookupSingleServerResult) *ResourceIdentityResponse { return v.Identity }).(ResourceIdentityResponsePtrOutput)
}

// Status showing whether the server enabled infrastructure encryption.
func (o LookupSingleServerResultOutput) InfrastructureEncryption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSingleServerResult) *string { return v.InfrastructureEncryption }).(pulumi.StringPtrOutput)
}

// The geo-location where the resource lives
func (o LookupSingleServerResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSingleServerResult) string { return v.Location }).(pulumi.StringOutput)
}

// The master server id of a replica server.
func (o LookupSingleServerResultOutput) MasterServerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSingleServerResult) *string { return v.MasterServerId }).(pulumi.StringPtrOutput)
}

// Enforce a minimal Tls version for the server.
func (o LookupSingleServerResultOutput) MinimalTlsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSingleServerResult) *string { return v.MinimalTlsVersion }).(pulumi.StringPtrOutput)
}

// The name of the resource
func (o LookupSingleServerResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSingleServerResult) string { return v.Name }).(pulumi.StringOutput)
}

// List of private endpoint connections on a server
func (o LookupSingleServerResultOutput) PrivateEndpointConnections() ServerPrivateEndpointConnectionResponseArrayOutput {
	return o.ApplyT(func(v LookupSingleServerResult) []ServerPrivateEndpointConnectionResponse {
		return v.PrivateEndpointConnections
	}).(ServerPrivateEndpointConnectionResponseArrayOutput)
}

// Whether or not public network access is allowed for this server. Value is optional but if passed in, must be 'Enabled' or 'Disabled'
func (o LookupSingleServerResultOutput) PublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSingleServerResult) *string { return v.PublicNetworkAccess }).(pulumi.StringPtrOutput)
}

// The maximum number of replicas that a master server can have.
func (o LookupSingleServerResultOutput) ReplicaCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupSingleServerResult) *int { return v.ReplicaCapacity }).(pulumi.IntPtrOutput)
}

// The replication role of the server.
func (o LookupSingleServerResultOutput) ReplicationRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSingleServerResult) *string { return v.ReplicationRole }).(pulumi.StringPtrOutput)
}

// The SKU (pricing tier) of the server.
func (o LookupSingleServerResultOutput) Sku() SkuResponsePtrOutput {
	return o.ApplyT(func(v LookupSingleServerResult) *SkuResponse { return v.Sku }).(SkuResponsePtrOutput)
}

// Enable ssl enforcement or not when connect to server.
func (o LookupSingleServerResultOutput) SslEnforcement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSingleServerResult) *string { return v.SslEnforcement }).(pulumi.StringPtrOutput)
}

// Storage profile of a server.
func (o LookupSingleServerResultOutput) StorageProfile() StorageProfileResponsePtrOutput {
	return o.ApplyT(func(v LookupSingleServerResult) *StorageProfileResponse { return v.StorageProfile }).(StorageProfileResponsePtrOutput)
}

// Resource tags.
func (o LookupSingleServerResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupSingleServerResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupSingleServerResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSingleServerResult) string { return v.Type }).(pulumi.StringOutput)
}

// A state of a server that is visible to user.
func (o LookupSingleServerResultOutput) UserVisibleState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSingleServerResult) *string { return v.UserVisibleState }).(pulumi.StringPtrOutput)
}

// Server version.
func (o LookupSingleServerResultOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSingleServerResult) *string { return v.Version }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSingleServerResultOutput{})
}
