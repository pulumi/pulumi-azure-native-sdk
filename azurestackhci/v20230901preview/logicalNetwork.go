// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230901preview

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The logical network resource definition.
type LogicalNetwork struct {
	pulumi.CustomResourceState

	// DhcpOptions contains an array of DNS servers available to VMs deployed in the logical network. Standard DHCP option for a subnet overrides logical network DHCP options.
	DhcpOptions LogicalNetworkPropertiesResponseDhcpOptionsPtrOutput `pulumi:"dhcpOptions"`
	// The extendedLocation of the resource.
	ExtendedLocation ExtendedLocationResponsePtrOutput `pulumi:"extendedLocation"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Provisioning state of the logical network.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The observed state of logical networks
	Status LogicalNetworkStatusResponseOutput `pulumi:"status"`
	// Subnet - list of subnets under the logical network
	Subnets SubnetResponseArrayOutput `pulumi:"subnets"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
	// name of the network switch to be used for VMs
	VmSwitchName pulumi.StringPtrOutput `pulumi:"vmSwitchName"`
}

// NewLogicalNetwork registers a new resource with the given unique name, arguments, and options.
func NewLogicalNetwork(ctx *pulumi.Context,
	name string, args *LogicalNetworkArgs, opts ...pulumi.ResourceOption) (*LogicalNetwork, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:azurestackhci:LogicalNetwork"),
		},
		{
			Type: pulumi.String("azure-native:azurestackhci/v20240101:LogicalNetwork"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource LogicalNetwork
	err := ctx.RegisterResource("azure-native:azurestackhci/v20230901preview:LogicalNetwork", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogicalNetwork gets an existing LogicalNetwork resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogicalNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogicalNetworkState, opts ...pulumi.ResourceOption) (*LogicalNetwork, error) {
	var resource LogicalNetwork
	err := ctx.ReadResource("azure-native:azurestackhci/v20230901preview:LogicalNetwork", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogicalNetwork resources.
type logicalNetworkState struct {
}

type LogicalNetworkState struct {
}

func (LogicalNetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*logicalNetworkState)(nil)).Elem()
}

type logicalNetworkArgs struct {
	// DhcpOptions contains an array of DNS servers available to VMs deployed in the logical network. Standard DHCP option for a subnet overrides logical network DHCP options.
	DhcpOptions *LogicalNetworkPropertiesDhcpOptions `pulumi:"dhcpOptions"`
	// The extendedLocation of the resource.
	ExtendedLocation *ExtendedLocation `pulumi:"extendedLocation"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// Name of the logical network
	LogicalNetworkName *string `pulumi:"logicalNetworkName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Subnet - list of subnets under the logical network
	Subnets []Subnet `pulumi:"subnets"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// name of the network switch to be used for VMs
	VmSwitchName *string `pulumi:"vmSwitchName"`
}

// The set of arguments for constructing a LogicalNetwork resource.
type LogicalNetworkArgs struct {
	// DhcpOptions contains an array of DNS servers available to VMs deployed in the logical network. Standard DHCP option for a subnet overrides logical network DHCP options.
	DhcpOptions LogicalNetworkPropertiesDhcpOptionsPtrInput
	// The extendedLocation of the resource.
	ExtendedLocation ExtendedLocationPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// Name of the logical network
	LogicalNetworkName pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Subnet - list of subnets under the logical network
	Subnets SubnetArrayInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// name of the network switch to be used for VMs
	VmSwitchName pulumi.StringPtrInput
}

func (LogicalNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logicalNetworkArgs)(nil)).Elem()
}

type LogicalNetworkInput interface {
	pulumi.Input

	ToLogicalNetworkOutput() LogicalNetworkOutput
	ToLogicalNetworkOutputWithContext(ctx context.Context) LogicalNetworkOutput
}

func (*LogicalNetwork) ElementType() reflect.Type {
	return reflect.TypeOf((**LogicalNetwork)(nil)).Elem()
}

func (i *LogicalNetwork) ToLogicalNetworkOutput() LogicalNetworkOutput {
	return i.ToLogicalNetworkOutputWithContext(context.Background())
}

func (i *LogicalNetwork) ToLogicalNetworkOutputWithContext(ctx context.Context) LogicalNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogicalNetworkOutput)
}

type LogicalNetworkOutput struct{ *pulumi.OutputState }

func (LogicalNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogicalNetwork)(nil)).Elem()
}

func (o LogicalNetworkOutput) ToLogicalNetworkOutput() LogicalNetworkOutput {
	return o
}

func (o LogicalNetworkOutput) ToLogicalNetworkOutputWithContext(ctx context.Context) LogicalNetworkOutput {
	return o
}

// DhcpOptions contains an array of DNS servers available to VMs deployed in the logical network. Standard DHCP option for a subnet overrides logical network DHCP options.
func (o LogicalNetworkOutput) DhcpOptions() LogicalNetworkPropertiesResponseDhcpOptionsPtrOutput {
	return o.ApplyT(func(v *LogicalNetwork) LogicalNetworkPropertiesResponseDhcpOptionsPtrOutput { return v.DhcpOptions }).(LogicalNetworkPropertiesResponseDhcpOptionsPtrOutput)
}

// The extendedLocation of the resource.
func (o LogicalNetworkOutput) ExtendedLocation() ExtendedLocationResponsePtrOutput {
	return o.ApplyT(func(v *LogicalNetwork) ExtendedLocationResponsePtrOutput { return v.ExtendedLocation }).(ExtendedLocationResponsePtrOutput)
}

// The geo-location where the resource lives
func (o LogicalNetworkOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *LogicalNetwork) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o LogicalNetworkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LogicalNetwork) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Provisioning state of the logical network.
func (o LogicalNetworkOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *LogicalNetwork) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The observed state of logical networks
func (o LogicalNetworkOutput) Status() LogicalNetworkStatusResponseOutput {
	return o.ApplyT(func(v *LogicalNetwork) LogicalNetworkStatusResponseOutput { return v.Status }).(LogicalNetworkStatusResponseOutput)
}

// Subnet - list of subnets under the logical network
func (o LogicalNetworkOutput) Subnets() SubnetResponseArrayOutput {
	return o.ApplyT(func(v *LogicalNetwork) SubnetResponseArrayOutput { return v.Subnets }).(SubnetResponseArrayOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LogicalNetworkOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *LogicalNetwork) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o LogicalNetworkOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LogicalNetwork) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LogicalNetworkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *LogicalNetwork) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// name of the network switch to be used for VMs
func (o LogicalNetworkOutput) VmSwitchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogicalNetwork) pulumi.StringPtrOutput { return v.VmSwitchName }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LogicalNetworkOutput{})
}
