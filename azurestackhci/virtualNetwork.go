// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package azurestackhci

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The virtual network resource definition.
// Azure REST API version: 2022-12-15-preview.
type VirtualNetwork struct {
	pulumi.CustomResourceState

	// DhcpOptions contains an array of DNS servers available to VMs deployed in the virtual network. Standard DHCP option for a subnet overrides VNET DHCP options.
	DhcpOptions VirtualNetworkPropertiesResponseDhcpOptionsPtrOutput `pulumi:"dhcpOptions"`
	// The extendedLocation of the resource.
	ExtendedLocation ExtendedLocationResponsePtrOutput `pulumi:"extendedLocation"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Type of the network
	NetworkType pulumi.StringPtrOutput `pulumi:"networkType"`
	// Provisioning state of the virtual network.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The observed state of virtual networks
	Status VirtualNetworkStatusResponseOutput `pulumi:"status"`
	// Subnet - list of subnets under the virtual network
	Subnets VirtualNetworkPropertiesResponseSubnetsArrayOutput `pulumi:"subnets"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
	// name of the network switch to be used for VMs
	VmSwitchName pulumi.StringPtrOutput `pulumi:"vmSwitchName"`
}

// NewVirtualNetwork registers a new resource with the given unique name, arguments, and options.
func NewVirtualNetwork(ctx *pulumi.Context,
	name string, args *VirtualNetworkArgs, opts ...pulumi.ResourceOption) (*VirtualNetwork, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:azurestackhci/v20210701preview:VirtualNetwork"),
		},
		{
			Type: pulumi.String("azure-native:azurestackhci/v20210901preview:VirtualNetwork"),
		},
		{
			Type: pulumi.String("azure-native:azurestackhci/v20221215preview:VirtualNetwork"),
		},
		{
			Type: pulumi.String("azure-native:azurestackhci/v20230701preview:VirtualNetwork"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource VirtualNetwork
	err := ctx.RegisterResource("azure-native:azurestackhci:VirtualNetwork", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualNetwork gets an existing VirtualNetwork resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualNetworkState, opts ...pulumi.ResourceOption) (*VirtualNetwork, error) {
	var resource VirtualNetwork
	err := ctx.ReadResource("azure-native:azurestackhci:VirtualNetwork", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualNetwork resources.
type virtualNetworkState struct {
}

type VirtualNetworkState struct {
}

func (VirtualNetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualNetworkState)(nil)).Elem()
}

type virtualNetworkArgs struct {
	// DhcpOptions contains an array of DNS servers available to VMs deployed in the virtual network. Standard DHCP option for a subnet overrides VNET DHCP options.
	DhcpOptions *VirtualNetworkPropertiesDhcpOptions `pulumi:"dhcpOptions"`
	// The extendedLocation of the resource.
	ExtendedLocation *ExtendedLocation `pulumi:"extendedLocation"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// Type of the network
	NetworkType *string `pulumi:"networkType"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Subnet - list of subnets under the virtual network
	Subnets []VirtualNetworkPropertiesSubnets `pulumi:"subnets"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Name of the virtual network
	VirtualNetworkName *string `pulumi:"virtualNetworkName"`
	// name of the network switch to be used for VMs
	VmSwitchName *string `pulumi:"vmSwitchName"`
}

// The set of arguments for constructing a VirtualNetwork resource.
type VirtualNetworkArgs struct {
	// DhcpOptions contains an array of DNS servers available to VMs deployed in the virtual network. Standard DHCP option for a subnet overrides VNET DHCP options.
	DhcpOptions VirtualNetworkPropertiesDhcpOptionsPtrInput
	// The extendedLocation of the resource.
	ExtendedLocation ExtendedLocationPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// Type of the network
	NetworkType pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Subnet - list of subnets under the virtual network
	Subnets VirtualNetworkPropertiesSubnetsArrayInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// Name of the virtual network
	VirtualNetworkName pulumi.StringPtrInput
	// name of the network switch to be used for VMs
	VmSwitchName pulumi.StringPtrInput
}

func (VirtualNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualNetworkArgs)(nil)).Elem()
}

type VirtualNetworkInput interface {
	pulumi.Input

	ToVirtualNetworkOutput() VirtualNetworkOutput
	ToVirtualNetworkOutputWithContext(ctx context.Context) VirtualNetworkOutput
}

func (*VirtualNetwork) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNetwork)(nil)).Elem()
}

func (i *VirtualNetwork) ToVirtualNetworkOutput() VirtualNetworkOutput {
	return i.ToVirtualNetworkOutputWithContext(context.Background())
}

func (i *VirtualNetwork) ToVirtualNetworkOutputWithContext(ctx context.Context) VirtualNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkOutput)
}

func (i *VirtualNetwork) ToOutput(ctx context.Context) pulumix.Output[*VirtualNetwork] {
	return pulumix.Output[*VirtualNetwork]{
		OutputState: i.ToVirtualNetworkOutputWithContext(ctx).OutputState,
	}
}

type VirtualNetworkOutput struct{ *pulumi.OutputState }

func (VirtualNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNetwork)(nil)).Elem()
}

func (o VirtualNetworkOutput) ToVirtualNetworkOutput() VirtualNetworkOutput {
	return o
}

func (o VirtualNetworkOutput) ToVirtualNetworkOutputWithContext(ctx context.Context) VirtualNetworkOutput {
	return o
}

func (o VirtualNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[*VirtualNetwork] {
	return pulumix.Output[*VirtualNetwork]{
		OutputState: o.OutputState,
	}
}

// DhcpOptions contains an array of DNS servers available to VMs deployed in the virtual network. Standard DHCP option for a subnet overrides VNET DHCP options.
func (o VirtualNetworkOutput) DhcpOptions() VirtualNetworkPropertiesResponseDhcpOptionsPtrOutput {
	return o.ApplyT(func(v *VirtualNetwork) VirtualNetworkPropertiesResponseDhcpOptionsPtrOutput { return v.DhcpOptions }).(VirtualNetworkPropertiesResponseDhcpOptionsPtrOutput)
}

// The extendedLocation of the resource.
func (o VirtualNetworkOutput) ExtendedLocation() ExtendedLocationResponsePtrOutput {
	return o.ApplyT(func(v *VirtualNetwork) ExtendedLocationResponsePtrOutput { return v.ExtendedLocation }).(ExtendedLocationResponsePtrOutput)
}

// The geo-location where the resource lives
func (o VirtualNetworkOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualNetwork) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o VirtualNetworkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualNetwork) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Type of the network
func (o VirtualNetworkOutput) NetworkType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualNetwork) pulumi.StringPtrOutput { return v.NetworkType }).(pulumi.StringPtrOutput)
}

// Provisioning state of the virtual network.
func (o VirtualNetworkOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualNetwork) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The observed state of virtual networks
func (o VirtualNetworkOutput) Status() VirtualNetworkStatusResponseOutput {
	return o.ApplyT(func(v *VirtualNetwork) VirtualNetworkStatusResponseOutput { return v.Status }).(VirtualNetworkStatusResponseOutput)
}

// Subnet - list of subnets under the virtual network
func (o VirtualNetworkOutput) Subnets() VirtualNetworkPropertiesResponseSubnetsArrayOutput {
	return o.ApplyT(func(v *VirtualNetwork) VirtualNetworkPropertiesResponseSubnetsArrayOutput { return v.Subnets }).(VirtualNetworkPropertiesResponseSubnetsArrayOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o VirtualNetworkOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *VirtualNetwork) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o VirtualNetworkOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualNetwork) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o VirtualNetworkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualNetwork) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// name of the network switch to be used for VMs
func (o VirtualNetworkOutput) VmSwitchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualNetwork) pulumi.StringPtrOutput { return v.VmSwitchName }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(VirtualNetworkOutput{})
}
