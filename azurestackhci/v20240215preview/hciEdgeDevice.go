// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20240215preview

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Arc-enabled edge device with HCI OS.
type HciEdgeDevice struct {
	pulumi.CustomResourceState

	// Edge device kind.
	// Expected value is 'HCI'.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// properties for Arc-enabled edge device with HCI OS.
	Properties HciEdgeDevicePropertiesResponseOutput `pulumi:"properties"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewHciEdgeDevice registers a new resource with the given unique name, arguments, and options.
func NewHciEdgeDevice(ctx *pulumi.Context,
	name string, args *HciEdgeDeviceArgs, opts ...pulumi.ResourceOption) (*HciEdgeDevice, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Kind == nil {
		return nil, errors.New("invalid value for required argument 'Kind'")
	}
	if args.ResourceUri == nil {
		return nil, errors.New("invalid value for required argument 'ResourceUri'")
	}
	args.Kind = pulumi.String("HCI")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:azurestackhci:HciEdgeDevice"),
		},
		{
			Type: pulumi.String("azure-native:azurestackhci/v20230801preview:HciEdgeDevice"),
		},
		{
			Type: pulumi.String("azure-native:azurestackhci/v20231101preview:HciEdgeDevice"),
		},
		{
			Type: pulumi.String("azure-native:azurestackhci/v20240101:HciEdgeDevice"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource HciEdgeDevice
	err := ctx.RegisterResource("azure-native:azurestackhci/v20240215preview:HciEdgeDevice", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHciEdgeDevice gets an existing HciEdgeDevice resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHciEdgeDevice(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HciEdgeDeviceState, opts ...pulumi.ResourceOption) (*HciEdgeDevice, error) {
	var resource HciEdgeDevice
	err := ctx.ReadResource("azure-native:azurestackhci/v20240215preview:HciEdgeDevice", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HciEdgeDevice resources.
type hciEdgeDeviceState struct {
}

type HciEdgeDeviceState struct {
}

func (HciEdgeDeviceState) ElementType() reflect.Type {
	return reflect.TypeOf((*hciEdgeDeviceState)(nil)).Elem()
}

type hciEdgeDeviceArgs struct {
	// Name of Device
	EdgeDeviceName *string `pulumi:"edgeDeviceName"`
	// Edge device kind.
	// Expected value is 'HCI'.
	Kind string `pulumi:"kind"`
	// properties for Arc-enabled edge device with HCI OS.
	Properties *HciEdgeDeviceProperties `pulumi:"properties"`
	// The fully qualified Azure Resource manager identifier of the resource.
	ResourceUri string `pulumi:"resourceUri"`
}

// The set of arguments for constructing a HciEdgeDevice resource.
type HciEdgeDeviceArgs struct {
	// Name of Device
	EdgeDeviceName pulumi.StringPtrInput
	// Edge device kind.
	// Expected value is 'HCI'.
	Kind pulumi.StringInput
	// properties for Arc-enabled edge device with HCI OS.
	Properties HciEdgeDevicePropertiesPtrInput
	// The fully qualified Azure Resource manager identifier of the resource.
	ResourceUri pulumi.StringInput
}

func (HciEdgeDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hciEdgeDeviceArgs)(nil)).Elem()
}

type HciEdgeDeviceInput interface {
	pulumi.Input

	ToHciEdgeDeviceOutput() HciEdgeDeviceOutput
	ToHciEdgeDeviceOutputWithContext(ctx context.Context) HciEdgeDeviceOutput
}

func (*HciEdgeDevice) ElementType() reflect.Type {
	return reflect.TypeOf((**HciEdgeDevice)(nil)).Elem()
}

func (i *HciEdgeDevice) ToHciEdgeDeviceOutput() HciEdgeDeviceOutput {
	return i.ToHciEdgeDeviceOutputWithContext(context.Background())
}

func (i *HciEdgeDevice) ToHciEdgeDeviceOutputWithContext(ctx context.Context) HciEdgeDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HciEdgeDeviceOutput)
}

type HciEdgeDeviceOutput struct{ *pulumi.OutputState }

func (HciEdgeDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HciEdgeDevice)(nil)).Elem()
}

func (o HciEdgeDeviceOutput) ToHciEdgeDeviceOutput() HciEdgeDeviceOutput {
	return o
}

func (o HciEdgeDeviceOutput) ToHciEdgeDeviceOutputWithContext(ctx context.Context) HciEdgeDeviceOutput {
	return o
}

// Edge device kind.
// Expected value is 'HCI'.
func (o HciEdgeDeviceOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *HciEdgeDevice) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// The name of the resource
func (o HciEdgeDeviceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *HciEdgeDevice) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// properties for Arc-enabled edge device with HCI OS.
func (o HciEdgeDeviceOutput) Properties() HciEdgeDevicePropertiesResponseOutput {
	return o.ApplyT(func(v *HciEdgeDevice) HciEdgeDevicePropertiesResponseOutput { return v.Properties }).(HciEdgeDevicePropertiesResponseOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o HciEdgeDeviceOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *HciEdgeDevice) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o HciEdgeDeviceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *HciEdgeDevice) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(HciEdgeDeviceOutput{})
}
