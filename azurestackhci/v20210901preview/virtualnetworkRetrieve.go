// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20210901preview

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The virtual network resource definition.
type VirtualnetworkRetrieve struct {
	pulumi.CustomResourceState

	// The extendedLocation of the resource.
	ExtendedLocation ExtendedLocationResponsePtrOutput `pulumi:"extendedLocation"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Type of the network
	NetworkType       pulumi.StringPtrOutput `pulumi:"networkType"`
	ProvisioningState pulumi.StringOutput    `pulumi:"provisioningState"`
	// name of the object to be used in moc
	ResourceName pulumi.StringPtrOutput `pulumi:"resourceName"`
	// VirtualNetworkStatus defines the observed state of virtual networks
	Status VirtualNetworkStatusResponseOutput `pulumi:"status"`
	// Subnet - list of subnets under the virtual network
	Subnets VirtualnetworksPropertiesResponseSubnetsArrayOutput `pulumi:"subnets"`
	// Metadata pertaining to creation and last modification of the resource.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewVirtualnetworkRetrieve registers a new resource with the given unique name, arguments, and options.
func NewVirtualnetworkRetrieve(ctx *pulumi.Context,
	name string, args *VirtualnetworkRetrieveArgs, opts ...pulumi.ResourceOption) (*VirtualnetworkRetrieve, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:azurestackhci/v20210901preview:virtualnetworkRetrieve"),
		},
		{
			Type: pulumi.String("azure-native:azurestackhci:VirtualnetworkRetrieve"),
		},
		{
			Type: pulumi.String("azure-native:azurestackhci:virtualnetworkRetrieve"),
		},
		{
			Type: pulumi.String("azure-native:azurestackhci/v20210701preview:VirtualnetworkRetrieve"),
		},
		{
			Type: pulumi.String("azure-native:azurestackhci/v20210701preview:virtualnetworkRetrieve"),
		},
		{
			Type: pulumi.String("azure-native:azurestackhci/v20221215preview:VirtualnetworkRetrieve"),
		},
		{
			Type: pulumi.String("azure-native:azurestackhci/v20221215preview:virtualnetworkRetrieve"),
		},
	})
	opts = append(opts, aliases)
	var resource VirtualnetworkRetrieve
	err := ctx.RegisterResource("azure-native:azurestackhci/v20210901preview:VirtualnetworkRetrieve", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualnetworkRetrieve gets an existing VirtualnetworkRetrieve resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualnetworkRetrieve(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualnetworkRetrieveState, opts ...pulumi.ResourceOption) (*VirtualnetworkRetrieve, error) {
	var resource VirtualnetworkRetrieve
	err := ctx.ReadResource("azure-native:azurestackhci/v20210901preview:VirtualnetworkRetrieve", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualnetworkRetrieve resources.
type virtualnetworkRetrieveState struct {
}

type VirtualnetworkRetrieveState struct {
}

func (VirtualnetworkRetrieveState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualnetworkRetrieveState)(nil)).Elem()
}

type virtualnetworkRetrieveArgs struct {
	// The extendedLocation of the resource.
	ExtendedLocation *ExtendedLocation `pulumi:"extendedLocation"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// Type of the network
	NetworkType *string `pulumi:"networkType"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// name of the object to be used in moc
	ResourceName *string `pulumi:"resourceName"`
	// Subnet - list of subnets under the virtual network
	Subnets []VirtualnetworksPropertiesSubnets `pulumi:"subnets"`
	// Resource tags.
	Tags                map[string]string `pulumi:"tags"`
	VirtualnetworksName *string           `pulumi:"virtualnetworksName"`
}

// The set of arguments for constructing a VirtualnetworkRetrieve resource.
type VirtualnetworkRetrieveArgs struct {
	// The extendedLocation of the resource.
	ExtendedLocation ExtendedLocationPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// Type of the network
	NetworkType pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// name of the object to be used in moc
	ResourceName pulumi.StringPtrInput
	// Subnet - list of subnets under the virtual network
	Subnets VirtualnetworksPropertiesSubnetsArrayInput
	// Resource tags.
	Tags                pulumi.StringMapInput
	VirtualnetworksName pulumi.StringPtrInput
}

func (VirtualnetworkRetrieveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualnetworkRetrieveArgs)(nil)).Elem()
}

type VirtualnetworkRetrieveInput interface {
	pulumi.Input

	ToVirtualnetworkRetrieveOutput() VirtualnetworkRetrieveOutput
	ToVirtualnetworkRetrieveOutputWithContext(ctx context.Context) VirtualnetworkRetrieveOutput
}

func (*VirtualnetworkRetrieve) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualnetworkRetrieve)(nil)).Elem()
}

func (i *VirtualnetworkRetrieve) ToVirtualnetworkRetrieveOutput() VirtualnetworkRetrieveOutput {
	return i.ToVirtualnetworkRetrieveOutputWithContext(context.Background())
}

func (i *VirtualnetworkRetrieve) ToVirtualnetworkRetrieveOutputWithContext(ctx context.Context) VirtualnetworkRetrieveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualnetworkRetrieveOutput)
}

type VirtualnetworkRetrieveOutput struct{ *pulumi.OutputState }

func (VirtualnetworkRetrieveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualnetworkRetrieve)(nil)).Elem()
}

func (o VirtualnetworkRetrieveOutput) ToVirtualnetworkRetrieveOutput() VirtualnetworkRetrieveOutput {
	return o
}

func (o VirtualnetworkRetrieveOutput) ToVirtualnetworkRetrieveOutputWithContext(ctx context.Context) VirtualnetworkRetrieveOutput {
	return o
}

// The extendedLocation of the resource.
func (o VirtualnetworkRetrieveOutput) ExtendedLocation() ExtendedLocationResponsePtrOutput {
	return o.ApplyT(func(v *VirtualnetworkRetrieve) ExtendedLocationResponsePtrOutput { return v.ExtendedLocation }).(ExtendedLocationResponsePtrOutput)
}

// The geo-location where the resource lives
func (o VirtualnetworkRetrieveOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualnetworkRetrieve) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o VirtualnetworkRetrieveOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualnetworkRetrieve) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Type of the network
func (o VirtualnetworkRetrieveOutput) NetworkType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualnetworkRetrieve) pulumi.StringPtrOutput { return v.NetworkType }).(pulumi.StringPtrOutput)
}

func (o VirtualnetworkRetrieveOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualnetworkRetrieve) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// name of the object to be used in moc
func (o VirtualnetworkRetrieveOutput) ResourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualnetworkRetrieve) pulumi.StringPtrOutput { return v.ResourceName }).(pulumi.StringPtrOutput)
}

// VirtualNetworkStatus defines the observed state of virtual networks
func (o VirtualnetworkRetrieveOutput) Status() VirtualNetworkStatusResponseOutput {
	return o.ApplyT(func(v *VirtualnetworkRetrieve) VirtualNetworkStatusResponseOutput { return v.Status }).(VirtualNetworkStatusResponseOutput)
}

// Subnet - list of subnets under the virtual network
func (o VirtualnetworkRetrieveOutput) Subnets() VirtualnetworksPropertiesResponseSubnetsArrayOutput {
	return o.ApplyT(func(v *VirtualnetworkRetrieve) VirtualnetworksPropertiesResponseSubnetsArrayOutput { return v.Subnets }).(VirtualnetworksPropertiesResponseSubnetsArrayOutput)
}

// Metadata pertaining to creation and last modification of the resource.
func (o VirtualnetworkRetrieveOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *VirtualnetworkRetrieve) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o VirtualnetworkRetrieveOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualnetworkRetrieve) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o VirtualnetworkRetrieveOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualnetworkRetrieve) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(VirtualnetworkRetrieveOutput{})
}
