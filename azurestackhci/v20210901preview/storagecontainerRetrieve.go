// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20210901preview

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The storage container resource definition.
type StoragecontainerRetrieve struct {
	pulumi.CustomResourceState

	// Amount of space available on the disk in MB
	AvailableSizeMB pulumi.Float64Output `pulumi:"availableSizeMB"`
	// Total size of the disk in MB
	ContainerSizeMB  pulumi.Float64Output                               `pulumi:"containerSizeMB"`
	ExtendedLocation StoragecontainersResponseExtendedLocationPtrOutput `pulumi:"extendedLocation"`
	// The resource location
	Location pulumi.StringOutput `pulumi:"location"`
	// Resource Name
	Name pulumi.StringOutput `pulumi:"name"`
	// Path of the storage container on the disk
	Path              pulumi.StringPtrOutput `pulumi:"path"`
	ProvisioningState pulumi.StringPtrOutput `pulumi:"provisioningState"`
	// name of the object to be used in moc
	ResourceName pulumi.StringPtrOutput `pulumi:"resourceName"`
	// storageContainerStatus defines the observed state of storagecontainers
	Status StorageContainerStatusResponseOutput `pulumi:"status"`
	// Metadata pertaining to creation and last modification of the resource.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Resource Type
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewStoragecontainerRetrieve registers a new resource with the given unique name, arguments, and options.
func NewStoragecontainerRetrieve(ctx *pulumi.Context,
	name string, args *StoragecontainerRetrieveArgs, opts ...pulumi.ResourceOption) (*StoragecontainerRetrieve, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:azurestackhci/v20210901preview:storagecontainerRetrieve"),
		},
		{
			Type: pulumi.String("azure-native:azurestackhci:StoragecontainerRetrieve"),
		},
		{
			Type: pulumi.String("azure-native:azurestackhci:storagecontainerRetrieve"),
		},
		{
			Type: pulumi.String("azure-native:azurestackhci/v20221215preview:StoragecontainerRetrieve"),
		},
		{
			Type: pulumi.String("azure-native:azurestackhci/v20221215preview:storagecontainerRetrieve"),
		},
		{
			Type: pulumi.String("azure-native:azurestackhci/v20230701preview:StoragecontainerRetrieve"),
		},
		{
			Type: pulumi.String("azure-native:azurestackhci/v20230701preview:storagecontainerRetrieve"),
		},
		{
			Type: pulumi.String("azure-native:azurestackhci/v20230901preview:StoragecontainerRetrieve"),
		},
		{
			Type: pulumi.String("azure-native:azurestackhci/v20230901preview:storagecontainerRetrieve"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource StoragecontainerRetrieve
	err := ctx.RegisterResource("azure-native:azurestackhci/v20210901preview:StoragecontainerRetrieve", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStoragecontainerRetrieve gets an existing StoragecontainerRetrieve resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStoragecontainerRetrieve(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StoragecontainerRetrieveState, opts ...pulumi.ResourceOption) (*StoragecontainerRetrieve, error) {
	var resource StoragecontainerRetrieve
	err := ctx.ReadResource("azure-native:azurestackhci/v20210901preview:StoragecontainerRetrieve", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StoragecontainerRetrieve resources.
type storagecontainerRetrieveState struct {
}

type StoragecontainerRetrieveState struct {
}

func (StoragecontainerRetrieveState) ElementType() reflect.Type {
	return reflect.TypeOf((*storagecontainerRetrieveState)(nil)).Elem()
}

type storagecontainerRetrieveArgs struct {
	ExtendedLocation *StoragecontainersExtendedLocation `pulumi:"extendedLocation"`
	// The resource location
	Location *string `pulumi:"location"`
	// Path of the storage container on the disk
	Path              *string `pulumi:"path"`
	ProvisioningState *string `pulumi:"provisioningState"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// name of the object to be used in moc
	ResourceName          *string `pulumi:"resourceName"`
	StoragecontainersName *string `pulumi:"storagecontainersName"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a StoragecontainerRetrieve resource.
type StoragecontainerRetrieveArgs struct {
	ExtendedLocation StoragecontainersExtendedLocationPtrInput
	// The resource location
	Location pulumi.StringPtrInput
	// Path of the storage container on the disk
	Path              pulumi.StringPtrInput
	ProvisioningState pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// name of the object to be used in moc
	ResourceName          pulumi.StringPtrInput
	StoragecontainersName pulumi.StringPtrInput
	// Resource tags
	Tags pulumi.StringMapInput
}

func (StoragecontainerRetrieveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*storagecontainerRetrieveArgs)(nil)).Elem()
}

type StoragecontainerRetrieveInput interface {
	pulumi.Input

	ToStoragecontainerRetrieveOutput() StoragecontainerRetrieveOutput
	ToStoragecontainerRetrieveOutputWithContext(ctx context.Context) StoragecontainerRetrieveOutput
}

func (*StoragecontainerRetrieve) ElementType() reflect.Type {
	return reflect.TypeOf((**StoragecontainerRetrieve)(nil)).Elem()
}

func (i *StoragecontainerRetrieve) ToStoragecontainerRetrieveOutput() StoragecontainerRetrieveOutput {
	return i.ToStoragecontainerRetrieveOutputWithContext(context.Background())
}

func (i *StoragecontainerRetrieve) ToStoragecontainerRetrieveOutputWithContext(ctx context.Context) StoragecontainerRetrieveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StoragecontainerRetrieveOutput)
}

type StoragecontainerRetrieveOutput struct{ *pulumi.OutputState }

func (StoragecontainerRetrieveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StoragecontainerRetrieve)(nil)).Elem()
}

func (o StoragecontainerRetrieveOutput) ToStoragecontainerRetrieveOutput() StoragecontainerRetrieveOutput {
	return o
}

func (o StoragecontainerRetrieveOutput) ToStoragecontainerRetrieveOutputWithContext(ctx context.Context) StoragecontainerRetrieveOutput {
	return o
}

// Amount of space available on the disk in MB
func (o StoragecontainerRetrieveOutput) AvailableSizeMB() pulumi.Float64Output {
	return o.ApplyT(func(v *StoragecontainerRetrieve) pulumi.Float64Output { return v.AvailableSizeMB }).(pulumi.Float64Output)
}

// Total size of the disk in MB
func (o StoragecontainerRetrieveOutput) ContainerSizeMB() pulumi.Float64Output {
	return o.ApplyT(func(v *StoragecontainerRetrieve) pulumi.Float64Output { return v.ContainerSizeMB }).(pulumi.Float64Output)
}

func (o StoragecontainerRetrieveOutput) ExtendedLocation() StoragecontainersResponseExtendedLocationPtrOutput {
	return o.ApplyT(func(v *StoragecontainerRetrieve) StoragecontainersResponseExtendedLocationPtrOutput {
		return v.ExtendedLocation
	}).(StoragecontainersResponseExtendedLocationPtrOutput)
}

// The resource location
func (o StoragecontainerRetrieveOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *StoragecontainerRetrieve) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Resource Name
func (o StoragecontainerRetrieveOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *StoragecontainerRetrieve) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Path of the storage container on the disk
func (o StoragecontainerRetrieveOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StoragecontainerRetrieve) pulumi.StringPtrOutput { return v.Path }).(pulumi.StringPtrOutput)
}

func (o StoragecontainerRetrieveOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StoragecontainerRetrieve) pulumi.StringPtrOutput { return v.ProvisioningState }).(pulumi.StringPtrOutput)
}

// name of the object to be used in moc
func (o StoragecontainerRetrieveOutput) ResourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StoragecontainerRetrieve) pulumi.StringPtrOutput { return v.ResourceName }).(pulumi.StringPtrOutput)
}

// storageContainerStatus defines the observed state of storagecontainers
func (o StoragecontainerRetrieveOutput) Status() StorageContainerStatusResponseOutput {
	return o.ApplyT(func(v *StoragecontainerRetrieve) StorageContainerStatusResponseOutput { return v.Status }).(StorageContainerStatusResponseOutput)
}

// Metadata pertaining to creation and last modification of the resource.
func (o StoragecontainerRetrieveOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *StoragecontainerRetrieve) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags
func (o StoragecontainerRetrieveOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *StoragecontainerRetrieve) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource Type
func (o StoragecontainerRetrieveOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *StoragecontainerRetrieve) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(StoragecontainerRetrieveOutput{})
}
