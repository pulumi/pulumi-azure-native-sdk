// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20210901preview

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The virtual hard disk resource definition.
type VirtualharddiskRetrieve struct {
	pulumi.CustomResourceState

	BlockSizeBytes pulumi.IntPtrOutput `pulumi:"blockSizeBytes"`
	// Storage ContainerID of the storage container to be used for VHD
	ContainerId pulumi.StringPtrOutput `pulumi:"containerId"`
	// The format of the actual VHD file [vhd, vhdx]
	DiskFileFormat pulumi.StringPtrOutput `pulumi:"diskFileFormat"`
	// diskSizeBytes - size of the disk in GB
	DiskSizeBytes pulumi.Float64PtrOutput `pulumi:"diskSizeBytes"`
	// Boolean for enabling dynamic sizing on the virtual hard disk
	Dynamic pulumi.BoolPtrOutput `pulumi:"dynamic"`
	// The extendedLocation of the resource.
	ExtendedLocation ExtendedLocationResponsePtrOutput `pulumi:"extendedLocation"`
	// The hypervisor generation of the Virtual Machine [V1, V2]
	HyperVGeneration pulumi.StringPtrOutput `pulumi:"hyperVGeneration"`
	// The geo-location where the resource lives
	Location           pulumi.StringOutput `pulumi:"location"`
	LogicalSectorBytes pulumi.IntPtrOutput `pulumi:"logicalSectorBytes"`
	// The name of the resource
	Name                pulumi.StringOutput `pulumi:"name"`
	PhysicalSectorBytes pulumi.IntPtrOutput `pulumi:"physicalSectorBytes"`
	ProvisioningState   pulumi.StringOutput `pulumi:"provisioningState"`
	// name of the object to be used in moc
	ResourceName pulumi.StringPtrOutput `pulumi:"resourceName"`
	// VirtualHardDiskStatus defines the observed state of virtualharddisks
	Status VirtualHardDiskStatusResponseOutput `pulumi:"status"`
	// Metadata pertaining to creation and last modification of the resource.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewVirtualharddiskRetrieve registers a new resource with the given unique name, arguments, and options.
func NewVirtualharddiskRetrieve(ctx *pulumi.Context,
	name string, args *VirtualharddiskRetrieveArgs, opts ...pulumi.ResourceOption) (*VirtualharddiskRetrieve, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:azurestackhci/v20210901preview:virtualharddiskRetrieve"),
		},
		{
			Type: pulumi.String("azure-native:azurestackhci:VirtualharddiskRetrieve"),
		},
		{
			Type: pulumi.String("azure-native:azurestackhci:virtualharddiskRetrieve"),
		},
		{
			Type: pulumi.String("azure-native:azurestackhci/v20210701preview:VirtualharddiskRetrieve"),
		},
		{
			Type: pulumi.String("azure-native:azurestackhci/v20210701preview:virtualharddiskRetrieve"),
		},
		{
			Type: pulumi.String("azure-native:azurestackhci/v20221215preview:VirtualharddiskRetrieve"),
		},
		{
			Type: pulumi.String("azure-native:azurestackhci/v20221215preview:virtualharddiskRetrieve"),
		},
		{
			Type: pulumi.String("azure-native:azurestackhci/v20230701preview:VirtualharddiskRetrieve"),
		},
		{
			Type: pulumi.String("azure-native:azurestackhci/v20230701preview:virtualharddiskRetrieve"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource VirtualharddiskRetrieve
	err := ctx.RegisterResource("azure-native:azurestackhci/v20210901preview:VirtualharddiskRetrieve", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualharddiskRetrieve gets an existing VirtualharddiskRetrieve resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualharddiskRetrieve(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualharddiskRetrieveState, opts ...pulumi.ResourceOption) (*VirtualharddiskRetrieve, error) {
	var resource VirtualharddiskRetrieve
	err := ctx.ReadResource("azure-native:azurestackhci/v20210901preview:VirtualharddiskRetrieve", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualharddiskRetrieve resources.
type virtualharddiskRetrieveState struct {
}

type VirtualharddiskRetrieveState struct {
}

func (VirtualharddiskRetrieveState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualharddiskRetrieveState)(nil)).Elem()
}

type virtualharddiskRetrieveArgs struct {
	BlockSizeBytes *int `pulumi:"blockSizeBytes"`
	// Storage ContainerID of the storage container to be used for VHD
	ContainerId *string `pulumi:"containerId"`
	// The format of the actual VHD file [vhd, vhdx]
	DiskFileFormat *string `pulumi:"diskFileFormat"`
	// diskSizeBytes - size of the disk in GB
	DiskSizeBytes *float64 `pulumi:"diskSizeBytes"`
	// Boolean for enabling dynamic sizing on the virtual hard disk
	Dynamic *bool `pulumi:"dynamic"`
	// The extendedLocation of the resource.
	ExtendedLocation *ExtendedLocation `pulumi:"extendedLocation"`
	// The hypervisor generation of the Virtual Machine [V1, V2]
	HyperVGeneration *string `pulumi:"hyperVGeneration"`
	// The geo-location where the resource lives
	Location            *string `pulumi:"location"`
	LogicalSectorBytes  *int    `pulumi:"logicalSectorBytes"`
	PhysicalSectorBytes *int    `pulumi:"physicalSectorBytes"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// name of the object to be used in moc
	ResourceName *string `pulumi:"resourceName"`
	// Resource tags.
	Tags                 map[string]string `pulumi:"tags"`
	VirtualharddisksName *string           `pulumi:"virtualharddisksName"`
}

// The set of arguments for constructing a VirtualharddiskRetrieve resource.
type VirtualharddiskRetrieveArgs struct {
	BlockSizeBytes pulumi.IntPtrInput
	// Storage ContainerID of the storage container to be used for VHD
	ContainerId pulumi.StringPtrInput
	// The format of the actual VHD file [vhd, vhdx]
	DiskFileFormat pulumi.StringPtrInput
	// diskSizeBytes - size of the disk in GB
	DiskSizeBytes pulumi.Float64PtrInput
	// Boolean for enabling dynamic sizing on the virtual hard disk
	Dynamic pulumi.BoolPtrInput
	// The extendedLocation of the resource.
	ExtendedLocation ExtendedLocationPtrInput
	// The hypervisor generation of the Virtual Machine [V1, V2]
	HyperVGeneration pulumi.StringPtrInput
	// The geo-location where the resource lives
	Location            pulumi.StringPtrInput
	LogicalSectorBytes  pulumi.IntPtrInput
	PhysicalSectorBytes pulumi.IntPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// name of the object to be used in moc
	ResourceName pulumi.StringPtrInput
	// Resource tags.
	Tags                 pulumi.StringMapInput
	VirtualharddisksName pulumi.StringPtrInput
}

func (VirtualharddiskRetrieveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualharddiskRetrieveArgs)(nil)).Elem()
}

type VirtualharddiskRetrieveInput interface {
	pulumi.Input

	ToVirtualharddiskRetrieveOutput() VirtualharddiskRetrieveOutput
	ToVirtualharddiskRetrieveOutputWithContext(ctx context.Context) VirtualharddiskRetrieveOutput
}

func (*VirtualharddiskRetrieve) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualharddiskRetrieve)(nil)).Elem()
}

func (i *VirtualharddiskRetrieve) ToVirtualharddiskRetrieveOutput() VirtualharddiskRetrieveOutput {
	return i.ToVirtualharddiskRetrieveOutputWithContext(context.Background())
}

func (i *VirtualharddiskRetrieve) ToVirtualharddiskRetrieveOutputWithContext(ctx context.Context) VirtualharddiskRetrieveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualharddiskRetrieveOutput)
}

func (i *VirtualharddiskRetrieve) ToOutput(ctx context.Context) pulumix.Output[*VirtualharddiskRetrieve] {
	return pulumix.Output[*VirtualharddiskRetrieve]{
		OutputState: i.ToVirtualharddiskRetrieveOutputWithContext(ctx).OutputState,
	}
}

type VirtualharddiskRetrieveOutput struct{ *pulumi.OutputState }

func (VirtualharddiskRetrieveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualharddiskRetrieve)(nil)).Elem()
}

func (o VirtualharddiskRetrieveOutput) ToVirtualharddiskRetrieveOutput() VirtualharddiskRetrieveOutput {
	return o
}

func (o VirtualharddiskRetrieveOutput) ToVirtualharddiskRetrieveOutputWithContext(ctx context.Context) VirtualharddiskRetrieveOutput {
	return o
}

func (o VirtualharddiskRetrieveOutput) ToOutput(ctx context.Context) pulumix.Output[*VirtualharddiskRetrieve] {
	return pulumix.Output[*VirtualharddiskRetrieve]{
		OutputState: o.OutputState,
	}
}

func (o VirtualharddiskRetrieveOutput) BlockSizeBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualharddiskRetrieve) pulumi.IntPtrOutput { return v.BlockSizeBytes }).(pulumi.IntPtrOutput)
}

// Storage ContainerID of the storage container to be used for VHD
func (o VirtualharddiskRetrieveOutput) ContainerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualharddiskRetrieve) pulumi.StringPtrOutput { return v.ContainerId }).(pulumi.StringPtrOutput)
}

// The format of the actual VHD file [vhd, vhdx]
func (o VirtualharddiskRetrieveOutput) DiskFileFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualharddiskRetrieve) pulumi.StringPtrOutput { return v.DiskFileFormat }).(pulumi.StringPtrOutput)
}

// diskSizeBytes - size of the disk in GB
func (o VirtualharddiskRetrieveOutput) DiskSizeBytes() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *VirtualharddiskRetrieve) pulumi.Float64PtrOutput { return v.DiskSizeBytes }).(pulumi.Float64PtrOutput)
}

// Boolean for enabling dynamic sizing on the virtual hard disk
func (o VirtualharddiskRetrieveOutput) Dynamic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualharddiskRetrieve) pulumi.BoolPtrOutput { return v.Dynamic }).(pulumi.BoolPtrOutput)
}

// The extendedLocation of the resource.
func (o VirtualharddiskRetrieveOutput) ExtendedLocation() ExtendedLocationResponsePtrOutput {
	return o.ApplyT(func(v *VirtualharddiskRetrieve) ExtendedLocationResponsePtrOutput { return v.ExtendedLocation }).(ExtendedLocationResponsePtrOutput)
}

// The hypervisor generation of the Virtual Machine [V1, V2]
func (o VirtualharddiskRetrieveOutput) HyperVGeneration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualharddiskRetrieve) pulumi.StringPtrOutput { return v.HyperVGeneration }).(pulumi.StringPtrOutput)
}

// The geo-location where the resource lives
func (o VirtualharddiskRetrieveOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualharddiskRetrieve) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o VirtualharddiskRetrieveOutput) LogicalSectorBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualharddiskRetrieve) pulumi.IntPtrOutput { return v.LogicalSectorBytes }).(pulumi.IntPtrOutput)
}

// The name of the resource
func (o VirtualharddiskRetrieveOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualharddiskRetrieve) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o VirtualharddiskRetrieveOutput) PhysicalSectorBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualharddiskRetrieve) pulumi.IntPtrOutput { return v.PhysicalSectorBytes }).(pulumi.IntPtrOutput)
}

func (o VirtualharddiskRetrieveOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualharddiskRetrieve) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// name of the object to be used in moc
func (o VirtualharddiskRetrieveOutput) ResourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualharddiskRetrieve) pulumi.StringPtrOutput { return v.ResourceName }).(pulumi.StringPtrOutput)
}

// VirtualHardDiskStatus defines the observed state of virtualharddisks
func (o VirtualharddiskRetrieveOutput) Status() VirtualHardDiskStatusResponseOutput {
	return o.ApplyT(func(v *VirtualharddiskRetrieve) VirtualHardDiskStatusResponseOutput { return v.Status }).(VirtualHardDiskStatusResponseOutput)
}

// Metadata pertaining to creation and last modification of the resource.
func (o VirtualharddiskRetrieveOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *VirtualharddiskRetrieve) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o VirtualharddiskRetrieveOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualharddiskRetrieve) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o VirtualharddiskRetrieveOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualharddiskRetrieve) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(VirtualharddiskRetrieveOutput{})
}
