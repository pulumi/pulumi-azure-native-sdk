// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20231213preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Azure DevOps organization profile
type AzureDevOpsOrganizationProfile struct {
	// Discriminator property for OrganizationProfile.
	// Expected value is 'AzureDevOps'.
	Kind string `pulumi:"kind"`
	// The list of Azure DevOps organizations the pool should be present in.
	Organizations []Organization `pulumi:"organizations"`
	// The type of permission which determines which accounts are admins on the Azure DevOps pool.
	PermissionProfile *AzureDevOpsPermissionProfile `pulumi:"permissionProfile"`
}

// Azure DevOps organization profile
type AzureDevOpsOrganizationProfileResponse struct {
	// Discriminator property for OrganizationProfile.
	// Expected value is 'AzureDevOps'.
	Kind string `pulumi:"kind"`
	// The list of Azure DevOps organizations the pool should be present in.
	Organizations []OrganizationResponse `pulumi:"organizations"`
	// The type of permission which determines which accounts are admins on the Azure DevOps pool.
	PermissionProfile *AzureDevOpsPermissionProfileResponse `pulumi:"permissionProfile"`
}

// Defines the type of Azure DevOps pool permission.
type AzureDevOpsPermissionProfile struct {
	// Group email addresses
	Groups []string `pulumi:"groups"`
	// Determines who has admin permissions to the Azure DevOps pool.
	Kind string `pulumi:"kind"`
	// User email addresses
	Users []string `pulumi:"users"`
}

// Defines the type of Azure DevOps pool permission.
type AzureDevOpsPermissionProfileResponse struct {
	// Group email addresses
	Groups []string `pulumi:"groups"`
	// Determines who has admin permissions to the Azure DevOps pool.
	Kind string `pulumi:"kind"`
	// User email addresses
	Users []string `pulumi:"users"`
}

// The Azure SKU of the machines in the pool.
type DevOpsAzureSku struct {
	// The Azure SKU name of the machines in the pool.
	Name string `pulumi:"name"`
}

// DevOpsAzureSkuInput is an input type that accepts DevOpsAzureSkuArgs and DevOpsAzureSkuOutput values.
// You can construct a concrete instance of `DevOpsAzureSkuInput` via:
//
//	DevOpsAzureSkuArgs{...}
type DevOpsAzureSkuInput interface {
	pulumi.Input

	ToDevOpsAzureSkuOutput() DevOpsAzureSkuOutput
	ToDevOpsAzureSkuOutputWithContext(context.Context) DevOpsAzureSkuOutput
}

// The Azure SKU of the machines in the pool.
type DevOpsAzureSkuArgs struct {
	// The Azure SKU name of the machines in the pool.
	Name pulumi.StringInput `pulumi:"name"`
}

func (DevOpsAzureSkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DevOpsAzureSku)(nil)).Elem()
}

func (i DevOpsAzureSkuArgs) ToDevOpsAzureSkuOutput() DevOpsAzureSkuOutput {
	return i.ToDevOpsAzureSkuOutputWithContext(context.Background())
}

func (i DevOpsAzureSkuArgs) ToDevOpsAzureSkuOutputWithContext(ctx context.Context) DevOpsAzureSkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevOpsAzureSkuOutput)
}

// The Azure SKU of the machines in the pool.
type DevOpsAzureSkuOutput struct{ *pulumi.OutputState }

func (DevOpsAzureSkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DevOpsAzureSku)(nil)).Elem()
}

func (o DevOpsAzureSkuOutput) ToDevOpsAzureSkuOutput() DevOpsAzureSkuOutput {
	return o
}

func (o DevOpsAzureSkuOutput) ToDevOpsAzureSkuOutputWithContext(ctx context.Context) DevOpsAzureSkuOutput {
	return o
}

// The Azure SKU name of the machines in the pool.
func (o DevOpsAzureSkuOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DevOpsAzureSku) string { return v.Name }).(pulumi.StringOutput)
}

// The Azure SKU of the machines in the pool.
type DevOpsAzureSkuResponse struct {
	// The Azure SKU name of the machines in the pool.
	Name string `pulumi:"name"`
}

// The Azure SKU of the machines in the pool.
type DevOpsAzureSkuResponseOutput struct{ *pulumi.OutputState }

func (DevOpsAzureSkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DevOpsAzureSkuResponse)(nil)).Elem()
}

func (o DevOpsAzureSkuResponseOutput) ToDevOpsAzureSkuResponseOutput() DevOpsAzureSkuResponseOutput {
	return o
}

func (o DevOpsAzureSkuResponseOutput) ToDevOpsAzureSkuResponseOutputWithContext(ctx context.Context) DevOpsAzureSkuResponseOutput {
	return o
}

// The Azure SKU name of the machines in the pool.
func (o DevOpsAzureSkuResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DevOpsAzureSkuResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Defines a GitHub organization
type GitHubOrganization struct {
	// Optional list of repositories in which the pool should be created.
	Repositories []string `pulumi:"repositories"`
	// The GitHub organization URL in which the pool should be created.
	Url string `pulumi:"url"`
}

// GitHub organization profile
type GitHubOrganizationProfile struct {
	// Discriminator property for OrganizationProfile.
	// Expected value is 'GitHub'.
	Kind string `pulumi:"kind"`
	// The list of GitHub organizations/repositories the pool should be present in.
	Organizations []GitHubOrganization `pulumi:"organizations"`
}

// GitHub organization profile
type GitHubOrganizationProfileResponse struct {
	// Discriminator property for OrganizationProfile.
	// Expected value is 'GitHub'.
	Kind string `pulumi:"kind"`
	// The list of GitHub organizations/repositories the pool should be present in.
	Organizations []GitHubOrganizationResponse `pulumi:"organizations"`
}

// Defines a GitHub organization
type GitHubOrganizationResponse struct {
	// Optional list of repositories in which the pool should be created.
	Repositories []string `pulumi:"repositories"`
	// The GitHub organization URL in which the pool should be created.
	Url string `pulumi:"url"`
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentity struct {
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities []string `pulumi:"userAssignedIdentities"`
}

// ManagedServiceIdentityInput is an input type that accepts ManagedServiceIdentityArgs and ManagedServiceIdentityOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityInput` via:
//
//	ManagedServiceIdentityArgs{...}
type ManagedServiceIdentityInput interface {
	pulumi.Input

	ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput
	ToManagedServiceIdentityOutputWithContext(context.Context) ManagedServiceIdentityOutput
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityArgs struct {
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type pulumi.StringInput `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities pulumi.StringArrayInput `pulumi:"userAssignedIdentities"`
}

func (ManagedServiceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return i.ToManagedServiceIdentityOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput)
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return i.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput).ToManagedServiceIdentityPtrOutputWithContext(ctx)
}

// ManagedServiceIdentityPtrInput is an input type that accepts ManagedServiceIdentityArgs, ManagedServiceIdentityPtr and ManagedServiceIdentityPtrOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityPtrInput` via:
//
//	        ManagedServiceIdentityArgs{...}
//
//	or:
//
//	        nil
type ManagedServiceIdentityPtrInput interface {
	pulumi.Input

	ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput
	ToManagedServiceIdentityPtrOutputWithContext(context.Context) ManagedServiceIdentityPtrOutput
}

type managedServiceIdentityPtrType ManagedServiceIdentityArgs

func ManagedServiceIdentityPtr(v *ManagedServiceIdentityArgs) ManagedServiceIdentityPtrInput {
	return (*managedServiceIdentityPtrType)(v)
}

func (*managedServiceIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentity)(nil)).Elem()
}

func (i *managedServiceIdentityPtrType) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return i.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i *managedServiceIdentityPtrType) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityPtrOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return o.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedServiceIdentity) *ManagedServiceIdentity {
		return &v
	}).(ManagedServiceIdentityPtrOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) []string { return v.UserAssignedIdentities }).(pulumi.StringArrayOutput)
}

type ManagedServiceIdentityPtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityPtrOutput) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return o
}

func (o ManagedServiceIdentityPtrOutput) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return o
}

func (o ManagedServiceIdentityPtrOutput) Elem() ManagedServiceIdentityOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) ManagedServiceIdentity {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentity
		return ret
	}).(ManagedServiceIdentityOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityPtrOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) []string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.StringArrayOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityResponse struct {
	// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
	TenantId string `pulumi:"tenantId"`
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities map[string]UserAssignedIdentityResponse `pulumi:"userAssignedIdentities"`
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityResponseOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutput() ManagedServiceIdentityResponseOutput {
	return o
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutputWithContext(ctx context.Context) ManagedServiceIdentityResponseOutput {
	return o
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityResponseOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

type ManagedServiceIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponsePtrOutput) ToManagedServiceIdentityResponsePtrOutput() ManagedServiceIdentityResponsePtrOutput {
	return o
}

func (o ManagedServiceIdentityResponsePtrOutput) ToManagedServiceIdentityResponsePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityResponsePtrOutput {
	return o
}

func (o ManagedServiceIdentityResponsePtrOutput) Elem() ManagedServiceIdentityResponseOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) ManagedServiceIdentityResponse {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentityResponse
		return ret
	}).(ManagedServiceIdentityResponseOutput)
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityResponsePtrOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

// The network profile of the machines in the pool.
type NetworkProfile struct {
	// The subnet id on which to put all machines created in the pool.
	SubnetId string `pulumi:"subnetId"`
}

// NetworkProfileInput is an input type that accepts NetworkProfileArgs and NetworkProfileOutput values.
// You can construct a concrete instance of `NetworkProfileInput` via:
//
//	NetworkProfileArgs{...}
type NetworkProfileInput interface {
	pulumi.Input

	ToNetworkProfileOutput() NetworkProfileOutput
	ToNetworkProfileOutputWithContext(context.Context) NetworkProfileOutput
}

// The network profile of the machines in the pool.
type NetworkProfileArgs struct {
	// The subnet id on which to put all machines created in the pool.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (NetworkProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkProfile)(nil)).Elem()
}

func (i NetworkProfileArgs) ToNetworkProfileOutput() NetworkProfileOutput {
	return i.ToNetworkProfileOutputWithContext(context.Background())
}

func (i NetworkProfileArgs) ToNetworkProfileOutputWithContext(ctx context.Context) NetworkProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkProfileOutput)
}

func (i NetworkProfileArgs) ToNetworkProfilePtrOutput() NetworkProfilePtrOutput {
	return i.ToNetworkProfilePtrOutputWithContext(context.Background())
}

func (i NetworkProfileArgs) ToNetworkProfilePtrOutputWithContext(ctx context.Context) NetworkProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkProfileOutput).ToNetworkProfilePtrOutputWithContext(ctx)
}

// NetworkProfilePtrInput is an input type that accepts NetworkProfileArgs, NetworkProfilePtr and NetworkProfilePtrOutput values.
// You can construct a concrete instance of `NetworkProfilePtrInput` via:
//
//	        NetworkProfileArgs{...}
//
//	or:
//
//	        nil
type NetworkProfilePtrInput interface {
	pulumi.Input

	ToNetworkProfilePtrOutput() NetworkProfilePtrOutput
	ToNetworkProfilePtrOutputWithContext(context.Context) NetworkProfilePtrOutput
}

type networkProfilePtrType NetworkProfileArgs

func NetworkProfilePtr(v *NetworkProfileArgs) NetworkProfilePtrInput {
	return (*networkProfilePtrType)(v)
}

func (*networkProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkProfile)(nil)).Elem()
}

func (i *networkProfilePtrType) ToNetworkProfilePtrOutput() NetworkProfilePtrOutput {
	return i.ToNetworkProfilePtrOutputWithContext(context.Background())
}

func (i *networkProfilePtrType) ToNetworkProfilePtrOutputWithContext(ctx context.Context) NetworkProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkProfilePtrOutput)
}

// The network profile of the machines in the pool.
type NetworkProfileOutput struct{ *pulumi.OutputState }

func (NetworkProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkProfile)(nil)).Elem()
}

func (o NetworkProfileOutput) ToNetworkProfileOutput() NetworkProfileOutput {
	return o
}

func (o NetworkProfileOutput) ToNetworkProfileOutputWithContext(ctx context.Context) NetworkProfileOutput {
	return o
}

func (o NetworkProfileOutput) ToNetworkProfilePtrOutput() NetworkProfilePtrOutput {
	return o.ToNetworkProfilePtrOutputWithContext(context.Background())
}

func (o NetworkProfileOutput) ToNetworkProfilePtrOutputWithContext(ctx context.Context) NetworkProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkProfile) *NetworkProfile {
		return &v
	}).(NetworkProfilePtrOutput)
}

// The subnet id on which to put all machines created in the pool.
func (o NetworkProfileOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkProfile) string { return v.SubnetId }).(pulumi.StringOutput)
}

type NetworkProfilePtrOutput struct{ *pulumi.OutputState }

func (NetworkProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkProfile)(nil)).Elem()
}

func (o NetworkProfilePtrOutput) ToNetworkProfilePtrOutput() NetworkProfilePtrOutput {
	return o
}

func (o NetworkProfilePtrOutput) ToNetworkProfilePtrOutputWithContext(ctx context.Context) NetworkProfilePtrOutput {
	return o
}

func (o NetworkProfilePtrOutput) Elem() NetworkProfileOutput {
	return o.ApplyT(func(v *NetworkProfile) NetworkProfile {
		if v != nil {
			return *v
		}
		var ret NetworkProfile
		return ret
	}).(NetworkProfileOutput)
}

// The subnet id on which to put all machines created in the pool.
func (o NetworkProfilePtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkProfile) *string {
		if v == nil {
			return nil
		}
		return &v.SubnetId
	}).(pulumi.StringPtrOutput)
}

// The network profile of the machines in the pool.
type NetworkProfileResponse struct {
	// The subnet id on which to put all machines created in the pool.
	SubnetId string `pulumi:"subnetId"`
}

// The network profile of the machines in the pool.
type NetworkProfileResponseOutput struct{ *pulumi.OutputState }

func (NetworkProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkProfileResponse)(nil)).Elem()
}

func (o NetworkProfileResponseOutput) ToNetworkProfileResponseOutput() NetworkProfileResponseOutput {
	return o
}

func (o NetworkProfileResponseOutput) ToNetworkProfileResponseOutputWithContext(ctx context.Context) NetworkProfileResponseOutput {
	return o
}

// The subnet id on which to put all machines created in the pool.
func (o NetworkProfileResponseOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkProfileResponse) string { return v.SubnetId }).(pulumi.StringOutput)
}

type NetworkProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (NetworkProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkProfileResponse)(nil)).Elem()
}

func (o NetworkProfileResponsePtrOutput) ToNetworkProfileResponsePtrOutput() NetworkProfileResponsePtrOutput {
	return o
}

func (o NetworkProfileResponsePtrOutput) ToNetworkProfileResponsePtrOutputWithContext(ctx context.Context) NetworkProfileResponsePtrOutput {
	return o
}

func (o NetworkProfileResponsePtrOutput) Elem() NetworkProfileResponseOutput {
	return o.ApplyT(func(v *NetworkProfileResponse) NetworkProfileResponse {
		if v != nil {
			return *v
		}
		var ret NetworkProfileResponse
		return ret
	}).(NetworkProfileResponseOutput)
}

// The subnet id on which to put all machines created in the pool.
func (o NetworkProfileResponsePtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SubnetId
	}).(pulumi.StringPtrOutput)
}

// Defines an Azure DevOps organization.
type Organization struct {
	// How many machines can be created at maximum in this organization out of the maximumConcurrency of the pool.
	Parallelism *int `pulumi:"parallelism"`
	// Optional list of projects in which the pool should be created.
	Projects []string `pulumi:"projects"`
	// The Azure DevOps organization URL in which the pool should be created.
	Url string `pulumi:"url"`
}

// Defines an Azure DevOps organization.
type OrganizationResponse struct {
	// How many machines can be created at maximum in this organization out of the maximumConcurrency of the pool.
	Parallelism *int `pulumi:"parallelism"`
	// Optional list of projects in which the pool should be created.
	Projects []string `pulumi:"projects"`
	// The Azure DevOps organization URL in which the pool should be created.
	Url string `pulumi:"url"`
}

// The OS profile of the machines in the pool.
type OsProfile struct {
	// Determines how the service should be run. By default, this will be set to Service.
	LogonType *string `pulumi:"logonType"`
	// The secret management settings of the machines in the pool.
	SecretsManagementSettings *SecretsManagementSettings `pulumi:"secretsManagementSettings"`
}

// OsProfileInput is an input type that accepts OsProfileArgs and OsProfileOutput values.
// You can construct a concrete instance of `OsProfileInput` via:
//
//	OsProfileArgs{...}
type OsProfileInput interface {
	pulumi.Input

	ToOsProfileOutput() OsProfileOutput
	ToOsProfileOutputWithContext(context.Context) OsProfileOutput
}

// The OS profile of the machines in the pool.
type OsProfileArgs struct {
	// Determines how the service should be run. By default, this will be set to Service.
	LogonType pulumi.StringPtrInput `pulumi:"logonType"`
	// The secret management settings of the machines in the pool.
	SecretsManagementSettings SecretsManagementSettingsPtrInput `pulumi:"secretsManagementSettings"`
}

func (OsProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OsProfile)(nil)).Elem()
}

func (i OsProfileArgs) ToOsProfileOutput() OsProfileOutput {
	return i.ToOsProfileOutputWithContext(context.Background())
}

func (i OsProfileArgs) ToOsProfileOutputWithContext(ctx context.Context) OsProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OsProfileOutput)
}

func (i OsProfileArgs) ToOsProfilePtrOutput() OsProfilePtrOutput {
	return i.ToOsProfilePtrOutputWithContext(context.Background())
}

func (i OsProfileArgs) ToOsProfilePtrOutputWithContext(ctx context.Context) OsProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OsProfileOutput).ToOsProfilePtrOutputWithContext(ctx)
}

// OsProfilePtrInput is an input type that accepts OsProfileArgs, OsProfilePtr and OsProfilePtrOutput values.
// You can construct a concrete instance of `OsProfilePtrInput` via:
//
//	        OsProfileArgs{...}
//
//	or:
//
//	        nil
type OsProfilePtrInput interface {
	pulumi.Input

	ToOsProfilePtrOutput() OsProfilePtrOutput
	ToOsProfilePtrOutputWithContext(context.Context) OsProfilePtrOutput
}

type osProfilePtrType OsProfileArgs

func OsProfilePtr(v *OsProfileArgs) OsProfilePtrInput {
	return (*osProfilePtrType)(v)
}

func (*osProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OsProfile)(nil)).Elem()
}

func (i *osProfilePtrType) ToOsProfilePtrOutput() OsProfilePtrOutput {
	return i.ToOsProfilePtrOutputWithContext(context.Background())
}

func (i *osProfilePtrType) ToOsProfilePtrOutputWithContext(ctx context.Context) OsProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OsProfilePtrOutput)
}

// The OS profile of the machines in the pool.
type OsProfileOutput struct{ *pulumi.OutputState }

func (OsProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OsProfile)(nil)).Elem()
}

func (o OsProfileOutput) ToOsProfileOutput() OsProfileOutput {
	return o
}

func (o OsProfileOutput) ToOsProfileOutputWithContext(ctx context.Context) OsProfileOutput {
	return o
}

func (o OsProfileOutput) ToOsProfilePtrOutput() OsProfilePtrOutput {
	return o.ToOsProfilePtrOutputWithContext(context.Background())
}

func (o OsProfileOutput) ToOsProfilePtrOutputWithContext(ctx context.Context) OsProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OsProfile) *OsProfile {
		return &v
	}).(OsProfilePtrOutput)
}

// Determines how the service should be run. By default, this will be set to Service.
func (o OsProfileOutput) LogonType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OsProfile) *string { return v.LogonType }).(pulumi.StringPtrOutput)
}

// The secret management settings of the machines in the pool.
func (o OsProfileOutput) SecretsManagementSettings() SecretsManagementSettingsPtrOutput {
	return o.ApplyT(func(v OsProfile) *SecretsManagementSettings { return v.SecretsManagementSettings }).(SecretsManagementSettingsPtrOutput)
}

type OsProfilePtrOutput struct{ *pulumi.OutputState }

func (OsProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OsProfile)(nil)).Elem()
}

func (o OsProfilePtrOutput) ToOsProfilePtrOutput() OsProfilePtrOutput {
	return o
}

func (o OsProfilePtrOutput) ToOsProfilePtrOutputWithContext(ctx context.Context) OsProfilePtrOutput {
	return o
}

func (o OsProfilePtrOutput) Elem() OsProfileOutput {
	return o.ApplyT(func(v *OsProfile) OsProfile {
		if v != nil {
			return *v
		}
		var ret OsProfile
		return ret
	}).(OsProfileOutput)
}

// Determines how the service should be run. By default, this will be set to Service.
func (o OsProfilePtrOutput) LogonType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OsProfile) *string {
		if v == nil {
			return nil
		}
		return v.LogonType
	}).(pulumi.StringPtrOutput)
}

// The secret management settings of the machines in the pool.
func (o OsProfilePtrOutput) SecretsManagementSettings() SecretsManagementSettingsPtrOutput {
	return o.ApplyT(func(v *OsProfile) *SecretsManagementSettings {
		if v == nil {
			return nil
		}
		return v.SecretsManagementSettings
	}).(SecretsManagementSettingsPtrOutput)
}

// The OS profile of the machines in the pool.
type OsProfileResponse struct {
	// Determines how the service should be run. By default, this will be set to Service.
	LogonType *string `pulumi:"logonType"`
	// The secret management settings of the machines in the pool.
	SecretsManagementSettings *SecretsManagementSettingsResponse `pulumi:"secretsManagementSettings"`
}

// The OS profile of the machines in the pool.
type OsProfileResponseOutput struct{ *pulumi.OutputState }

func (OsProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OsProfileResponse)(nil)).Elem()
}

func (o OsProfileResponseOutput) ToOsProfileResponseOutput() OsProfileResponseOutput {
	return o
}

func (o OsProfileResponseOutput) ToOsProfileResponseOutputWithContext(ctx context.Context) OsProfileResponseOutput {
	return o
}

// Determines how the service should be run. By default, this will be set to Service.
func (o OsProfileResponseOutput) LogonType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OsProfileResponse) *string { return v.LogonType }).(pulumi.StringPtrOutput)
}

// The secret management settings of the machines in the pool.
func (o OsProfileResponseOutput) SecretsManagementSettings() SecretsManagementSettingsResponsePtrOutput {
	return o.ApplyT(func(v OsProfileResponse) *SecretsManagementSettingsResponse { return v.SecretsManagementSettings }).(SecretsManagementSettingsResponsePtrOutput)
}

type OsProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (OsProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OsProfileResponse)(nil)).Elem()
}

func (o OsProfileResponsePtrOutput) ToOsProfileResponsePtrOutput() OsProfileResponsePtrOutput {
	return o
}

func (o OsProfileResponsePtrOutput) ToOsProfileResponsePtrOutputWithContext(ctx context.Context) OsProfileResponsePtrOutput {
	return o
}

func (o OsProfileResponsePtrOutput) Elem() OsProfileResponseOutput {
	return o.ApplyT(func(v *OsProfileResponse) OsProfileResponse {
		if v != nil {
			return *v
		}
		var ret OsProfileResponse
		return ret
	}).(OsProfileResponseOutput)
}

// Determines how the service should be run. By default, this will be set to Service.
func (o OsProfileResponsePtrOutput) LogonType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OsProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.LogonType
	}).(pulumi.StringPtrOutput)
}

// The secret management settings of the machines in the pool.
func (o OsProfileResponsePtrOutput) SecretsManagementSettings() SecretsManagementSettingsResponsePtrOutput {
	return o.ApplyT(func(v *OsProfileResponse) *SecretsManagementSettingsResponse {
		if v == nil {
			return nil
		}
		return v.SecretsManagementSettings
	}).(SecretsManagementSettingsResponsePtrOutput)
}

// The VM image of the machines in the pool.
type PoolImage struct {
	// List of aliases to reference the image by.
	Aliases []string `pulumi:"aliases"`
	// The percentage of the buffer to be allocated to this image.
	Buffer *string `pulumi:"buffer"`
	// The resource id of the image.
	ResourceId string `pulumi:"resourceId"`
}

// Defaults sets the appropriate defaults for PoolImage
func (val *PoolImage) Defaults() *PoolImage {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Buffer == nil {
		buffer_ := "*"
		tmp.Buffer = &buffer_
	}
	return &tmp
}

// PoolImageInput is an input type that accepts PoolImageArgs and PoolImageOutput values.
// You can construct a concrete instance of `PoolImageInput` via:
//
//	PoolImageArgs{...}
type PoolImageInput interface {
	pulumi.Input

	ToPoolImageOutput() PoolImageOutput
	ToPoolImageOutputWithContext(context.Context) PoolImageOutput
}

// The VM image of the machines in the pool.
type PoolImageArgs struct {
	// List of aliases to reference the image by.
	Aliases pulumi.StringArrayInput `pulumi:"aliases"`
	// The percentage of the buffer to be allocated to this image.
	Buffer pulumi.StringPtrInput `pulumi:"buffer"`
	// The resource id of the image.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
}

// Defaults sets the appropriate defaults for PoolImageArgs
func (val *PoolImageArgs) Defaults() *PoolImageArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Buffer == nil {
		tmp.Buffer = pulumi.StringPtr("*")
	}
	return &tmp
}
func (PoolImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PoolImage)(nil)).Elem()
}

func (i PoolImageArgs) ToPoolImageOutput() PoolImageOutput {
	return i.ToPoolImageOutputWithContext(context.Background())
}

func (i PoolImageArgs) ToPoolImageOutputWithContext(ctx context.Context) PoolImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolImageOutput)
}

// PoolImageArrayInput is an input type that accepts PoolImageArray and PoolImageArrayOutput values.
// You can construct a concrete instance of `PoolImageArrayInput` via:
//
//	PoolImageArray{ PoolImageArgs{...} }
type PoolImageArrayInput interface {
	pulumi.Input

	ToPoolImageArrayOutput() PoolImageArrayOutput
	ToPoolImageArrayOutputWithContext(context.Context) PoolImageArrayOutput
}

type PoolImageArray []PoolImageInput

func (PoolImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PoolImage)(nil)).Elem()
}

func (i PoolImageArray) ToPoolImageArrayOutput() PoolImageArrayOutput {
	return i.ToPoolImageArrayOutputWithContext(context.Background())
}

func (i PoolImageArray) ToPoolImageArrayOutputWithContext(ctx context.Context) PoolImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolImageArrayOutput)
}

// The VM image of the machines in the pool.
type PoolImageOutput struct{ *pulumi.OutputState }

func (PoolImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PoolImage)(nil)).Elem()
}

func (o PoolImageOutput) ToPoolImageOutput() PoolImageOutput {
	return o
}

func (o PoolImageOutput) ToPoolImageOutputWithContext(ctx context.Context) PoolImageOutput {
	return o
}

// List of aliases to reference the image by.
func (o PoolImageOutput) Aliases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PoolImage) []string { return v.Aliases }).(pulumi.StringArrayOutput)
}

// The percentage of the buffer to be allocated to this image.
func (o PoolImageOutput) Buffer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PoolImage) *string { return v.Buffer }).(pulumi.StringPtrOutput)
}

// The resource id of the image.
func (o PoolImageOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v PoolImage) string { return v.ResourceId }).(pulumi.StringOutput)
}

type PoolImageArrayOutput struct{ *pulumi.OutputState }

func (PoolImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PoolImage)(nil)).Elem()
}

func (o PoolImageArrayOutput) ToPoolImageArrayOutput() PoolImageArrayOutput {
	return o
}

func (o PoolImageArrayOutput) ToPoolImageArrayOutputWithContext(ctx context.Context) PoolImageArrayOutput {
	return o
}

func (o PoolImageArrayOutput) Index(i pulumi.IntInput) PoolImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PoolImage {
		return vs[0].([]PoolImage)[vs[1].(int)]
	}).(PoolImageOutput)
}

// The VM image of the machines in the pool.
type PoolImageResponse struct {
	// List of aliases to reference the image by.
	Aliases []string `pulumi:"aliases"`
	// The percentage of the buffer to be allocated to this image.
	Buffer *string `pulumi:"buffer"`
	// The resource id of the image.
	ResourceId string `pulumi:"resourceId"`
}

// Defaults sets the appropriate defaults for PoolImageResponse
func (val *PoolImageResponse) Defaults() *PoolImageResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Buffer == nil {
		buffer_ := "*"
		tmp.Buffer = &buffer_
	}
	return &tmp
}

// The VM image of the machines in the pool.
type PoolImageResponseOutput struct{ *pulumi.OutputState }

func (PoolImageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PoolImageResponse)(nil)).Elem()
}

func (o PoolImageResponseOutput) ToPoolImageResponseOutput() PoolImageResponseOutput {
	return o
}

func (o PoolImageResponseOutput) ToPoolImageResponseOutputWithContext(ctx context.Context) PoolImageResponseOutput {
	return o
}

// List of aliases to reference the image by.
func (o PoolImageResponseOutput) Aliases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PoolImageResponse) []string { return v.Aliases }).(pulumi.StringArrayOutput)
}

// The percentage of the buffer to be allocated to this image.
func (o PoolImageResponseOutput) Buffer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PoolImageResponse) *string { return v.Buffer }).(pulumi.StringPtrOutput)
}

// The resource id of the image.
func (o PoolImageResponseOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v PoolImageResponse) string { return v.ResourceId }).(pulumi.StringOutput)
}

type PoolImageResponseArrayOutput struct{ *pulumi.OutputState }

func (PoolImageResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PoolImageResponse)(nil)).Elem()
}

func (o PoolImageResponseArrayOutput) ToPoolImageResponseArrayOutput() PoolImageResponseArrayOutput {
	return o
}

func (o PoolImageResponseArrayOutput) ToPoolImageResponseArrayOutputWithContext(ctx context.Context) PoolImageResponseArrayOutput {
	return o
}

func (o PoolImageResponseArrayOutput) Index(i pulumi.IntInput) PoolImageResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PoolImageResponse {
		return vs[0].([]PoolImageResponse)[vs[1].(int)]
	}).(PoolImageResponseOutput)
}

// The secret management settings of the machines in the pool.
type SecretsManagementSettings struct {
	// Where to store certificates on the machine.
	CertificateStoreLocation *string `pulumi:"certificateStoreLocation"`
	// Defines if the key of the certificates should be exportable.
	KeyExportable bool `pulumi:"keyExportable"`
	// The list of certificates to install on all machines in the pool.
	ObservedCertificates []string `pulumi:"observedCertificates"`
}

// SecretsManagementSettingsInput is an input type that accepts SecretsManagementSettingsArgs and SecretsManagementSettingsOutput values.
// You can construct a concrete instance of `SecretsManagementSettingsInput` via:
//
//	SecretsManagementSettingsArgs{...}
type SecretsManagementSettingsInput interface {
	pulumi.Input

	ToSecretsManagementSettingsOutput() SecretsManagementSettingsOutput
	ToSecretsManagementSettingsOutputWithContext(context.Context) SecretsManagementSettingsOutput
}

// The secret management settings of the machines in the pool.
type SecretsManagementSettingsArgs struct {
	// Where to store certificates on the machine.
	CertificateStoreLocation pulumi.StringPtrInput `pulumi:"certificateStoreLocation"`
	// Defines if the key of the certificates should be exportable.
	KeyExportable pulumi.BoolInput `pulumi:"keyExportable"`
	// The list of certificates to install on all machines in the pool.
	ObservedCertificates pulumi.StringArrayInput `pulumi:"observedCertificates"`
}

func (SecretsManagementSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsManagementSettings)(nil)).Elem()
}

func (i SecretsManagementSettingsArgs) ToSecretsManagementSettingsOutput() SecretsManagementSettingsOutput {
	return i.ToSecretsManagementSettingsOutputWithContext(context.Background())
}

func (i SecretsManagementSettingsArgs) ToSecretsManagementSettingsOutputWithContext(ctx context.Context) SecretsManagementSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsManagementSettingsOutput)
}

func (i SecretsManagementSettingsArgs) ToSecretsManagementSettingsPtrOutput() SecretsManagementSettingsPtrOutput {
	return i.ToSecretsManagementSettingsPtrOutputWithContext(context.Background())
}

func (i SecretsManagementSettingsArgs) ToSecretsManagementSettingsPtrOutputWithContext(ctx context.Context) SecretsManagementSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsManagementSettingsOutput).ToSecretsManagementSettingsPtrOutputWithContext(ctx)
}

// SecretsManagementSettingsPtrInput is an input type that accepts SecretsManagementSettingsArgs, SecretsManagementSettingsPtr and SecretsManagementSettingsPtrOutput values.
// You can construct a concrete instance of `SecretsManagementSettingsPtrInput` via:
//
//	        SecretsManagementSettingsArgs{...}
//
//	or:
//
//	        nil
type SecretsManagementSettingsPtrInput interface {
	pulumi.Input

	ToSecretsManagementSettingsPtrOutput() SecretsManagementSettingsPtrOutput
	ToSecretsManagementSettingsPtrOutputWithContext(context.Context) SecretsManagementSettingsPtrOutput
}

type secretsManagementSettingsPtrType SecretsManagementSettingsArgs

func SecretsManagementSettingsPtr(v *SecretsManagementSettingsArgs) SecretsManagementSettingsPtrInput {
	return (*secretsManagementSettingsPtrType)(v)
}

func (*secretsManagementSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretsManagementSettings)(nil)).Elem()
}

func (i *secretsManagementSettingsPtrType) ToSecretsManagementSettingsPtrOutput() SecretsManagementSettingsPtrOutput {
	return i.ToSecretsManagementSettingsPtrOutputWithContext(context.Background())
}

func (i *secretsManagementSettingsPtrType) ToSecretsManagementSettingsPtrOutputWithContext(ctx context.Context) SecretsManagementSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsManagementSettingsPtrOutput)
}

// The secret management settings of the machines in the pool.
type SecretsManagementSettingsOutput struct{ *pulumi.OutputState }

func (SecretsManagementSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsManagementSettings)(nil)).Elem()
}

func (o SecretsManagementSettingsOutput) ToSecretsManagementSettingsOutput() SecretsManagementSettingsOutput {
	return o
}

func (o SecretsManagementSettingsOutput) ToSecretsManagementSettingsOutputWithContext(ctx context.Context) SecretsManagementSettingsOutput {
	return o
}

func (o SecretsManagementSettingsOutput) ToSecretsManagementSettingsPtrOutput() SecretsManagementSettingsPtrOutput {
	return o.ToSecretsManagementSettingsPtrOutputWithContext(context.Background())
}

func (o SecretsManagementSettingsOutput) ToSecretsManagementSettingsPtrOutputWithContext(ctx context.Context) SecretsManagementSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretsManagementSettings) *SecretsManagementSettings {
		return &v
	}).(SecretsManagementSettingsPtrOutput)
}

// Where to store certificates on the machine.
func (o SecretsManagementSettingsOutput) CertificateStoreLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsManagementSettings) *string { return v.CertificateStoreLocation }).(pulumi.StringPtrOutput)
}

// Defines if the key of the certificates should be exportable.
func (o SecretsManagementSettingsOutput) KeyExportable() pulumi.BoolOutput {
	return o.ApplyT(func(v SecretsManagementSettings) bool { return v.KeyExportable }).(pulumi.BoolOutput)
}

// The list of certificates to install on all machines in the pool.
func (o SecretsManagementSettingsOutput) ObservedCertificates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretsManagementSettings) []string { return v.ObservedCertificates }).(pulumi.StringArrayOutput)
}

type SecretsManagementSettingsPtrOutput struct{ *pulumi.OutputState }

func (SecretsManagementSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretsManagementSettings)(nil)).Elem()
}

func (o SecretsManagementSettingsPtrOutput) ToSecretsManagementSettingsPtrOutput() SecretsManagementSettingsPtrOutput {
	return o
}

func (o SecretsManagementSettingsPtrOutput) ToSecretsManagementSettingsPtrOutputWithContext(ctx context.Context) SecretsManagementSettingsPtrOutput {
	return o
}

func (o SecretsManagementSettingsPtrOutput) Elem() SecretsManagementSettingsOutput {
	return o.ApplyT(func(v *SecretsManagementSettings) SecretsManagementSettings {
		if v != nil {
			return *v
		}
		var ret SecretsManagementSettings
		return ret
	}).(SecretsManagementSettingsOutput)
}

// Where to store certificates on the machine.
func (o SecretsManagementSettingsPtrOutput) CertificateStoreLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretsManagementSettings) *string {
		if v == nil {
			return nil
		}
		return v.CertificateStoreLocation
	}).(pulumi.StringPtrOutput)
}

// Defines if the key of the certificates should be exportable.
func (o SecretsManagementSettingsPtrOutput) KeyExportable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretsManagementSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.KeyExportable
	}).(pulumi.BoolPtrOutput)
}

// The list of certificates to install on all machines in the pool.
func (o SecretsManagementSettingsPtrOutput) ObservedCertificates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecretsManagementSettings) []string {
		if v == nil {
			return nil
		}
		return v.ObservedCertificates
	}).(pulumi.StringArrayOutput)
}

// The secret management settings of the machines in the pool.
type SecretsManagementSettingsResponse struct {
	// Where to store certificates on the machine.
	CertificateStoreLocation *string `pulumi:"certificateStoreLocation"`
	// Defines if the key of the certificates should be exportable.
	KeyExportable bool `pulumi:"keyExportable"`
	// The list of certificates to install on all machines in the pool.
	ObservedCertificates []string `pulumi:"observedCertificates"`
}

// The secret management settings of the machines in the pool.
type SecretsManagementSettingsResponseOutput struct{ *pulumi.OutputState }

func (SecretsManagementSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsManagementSettingsResponse)(nil)).Elem()
}

func (o SecretsManagementSettingsResponseOutput) ToSecretsManagementSettingsResponseOutput() SecretsManagementSettingsResponseOutput {
	return o
}

func (o SecretsManagementSettingsResponseOutput) ToSecretsManagementSettingsResponseOutputWithContext(ctx context.Context) SecretsManagementSettingsResponseOutput {
	return o
}

// Where to store certificates on the machine.
func (o SecretsManagementSettingsResponseOutput) CertificateStoreLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretsManagementSettingsResponse) *string { return v.CertificateStoreLocation }).(pulumi.StringPtrOutput)
}

// Defines if the key of the certificates should be exportable.
func (o SecretsManagementSettingsResponseOutput) KeyExportable() pulumi.BoolOutput {
	return o.ApplyT(func(v SecretsManagementSettingsResponse) bool { return v.KeyExportable }).(pulumi.BoolOutput)
}

// The list of certificates to install on all machines in the pool.
func (o SecretsManagementSettingsResponseOutput) ObservedCertificates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecretsManagementSettingsResponse) []string { return v.ObservedCertificates }).(pulumi.StringArrayOutput)
}

type SecretsManagementSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (SecretsManagementSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretsManagementSettingsResponse)(nil)).Elem()
}

func (o SecretsManagementSettingsResponsePtrOutput) ToSecretsManagementSettingsResponsePtrOutput() SecretsManagementSettingsResponsePtrOutput {
	return o
}

func (o SecretsManagementSettingsResponsePtrOutput) ToSecretsManagementSettingsResponsePtrOutputWithContext(ctx context.Context) SecretsManagementSettingsResponsePtrOutput {
	return o
}

func (o SecretsManagementSettingsResponsePtrOutput) Elem() SecretsManagementSettingsResponseOutput {
	return o.ApplyT(func(v *SecretsManagementSettingsResponse) SecretsManagementSettingsResponse {
		if v != nil {
			return *v
		}
		var ret SecretsManagementSettingsResponse
		return ret
	}).(SecretsManagementSettingsResponseOutput)
}

// Where to store certificates on the machine.
func (o SecretsManagementSettingsResponsePtrOutput) CertificateStoreLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretsManagementSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.CertificateStoreLocation
	}).(pulumi.StringPtrOutput)
}

// Defines if the key of the certificates should be exportable.
func (o SecretsManagementSettingsResponsePtrOutput) KeyExportable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecretsManagementSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.KeyExportable
	}).(pulumi.BoolPtrOutput)
}

// The list of certificates to install on all machines in the pool.
func (o SecretsManagementSettingsResponsePtrOutput) ObservedCertificates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecretsManagementSettingsResponse) []string {
		if v == nil {
			return nil
		}
		return v.ObservedCertificates
	}).(pulumi.StringArrayOutput)
}

// Stateful profile meaning that the machines will be returned to the pool after running a job.
type Stateful struct {
	// Discriminator property for AgentProfile.
	// Expected value is 'Stateful'.
	Kind string `pulumi:"kind"`
	// How long should stateful machines be kept around. The maximum is one week.
	MaxAgentLifetime string `pulumi:"maxAgentLifetime"`
	// Defines pool buffer.
	ResourcePredictions interface{} `pulumi:"resourcePredictions"`
}

// Stateful profile meaning that the machines will be returned to the pool after running a job.
type StatefulResponse struct {
	// Discriminator property for AgentProfile.
	// Expected value is 'Stateful'.
	Kind string `pulumi:"kind"`
	// How long should stateful machines be kept around. The maximum is one week.
	MaxAgentLifetime string `pulumi:"maxAgentLifetime"`
	// Defines pool buffer.
	ResourcePredictions interface{} `pulumi:"resourcePredictions"`
}

// Stateless profile meaning that the machines will be cleaned up after running a job.
type StatelessAgentProfile struct {
	// Discriminator property for AgentProfile.
	// Expected value is 'Stateless'.
	Kind string `pulumi:"kind"`
	// Defines pool buffer.
	ResourcePredictions interface{} `pulumi:"resourcePredictions"`
}

// Stateless profile meaning that the machines will be cleaned up after running a job.
type StatelessAgentProfileResponse struct {
	// Discriminator property for AgentProfile.
	// Expected value is 'Stateless'.
	Kind string `pulumi:"kind"`
	// Defines pool buffer.
	ResourcePredictions interface{} `pulumi:"resourcePredictions"`
}

// The storage profile of the VMSS.
type StorageProfile struct {
	// The Azure SKU name of the machines in the pool.
	OsDiskStorageAccountType *string `pulumi:"osDiskStorageAccountType"`
}

// StorageProfileInput is an input type that accepts StorageProfileArgs and StorageProfileOutput values.
// You can construct a concrete instance of `StorageProfileInput` via:
//
//	StorageProfileArgs{...}
type StorageProfileInput interface {
	pulumi.Input

	ToStorageProfileOutput() StorageProfileOutput
	ToStorageProfileOutputWithContext(context.Context) StorageProfileOutput
}

// The storage profile of the VMSS.
type StorageProfileArgs struct {
	// The Azure SKU name of the machines in the pool.
	OsDiskStorageAccountType pulumi.StringPtrInput `pulumi:"osDiskStorageAccountType"`
}

func (StorageProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageProfile)(nil)).Elem()
}

func (i StorageProfileArgs) ToStorageProfileOutput() StorageProfileOutput {
	return i.ToStorageProfileOutputWithContext(context.Background())
}

func (i StorageProfileArgs) ToStorageProfileOutputWithContext(ctx context.Context) StorageProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageProfileOutput)
}

func (i StorageProfileArgs) ToStorageProfilePtrOutput() StorageProfilePtrOutput {
	return i.ToStorageProfilePtrOutputWithContext(context.Background())
}

func (i StorageProfileArgs) ToStorageProfilePtrOutputWithContext(ctx context.Context) StorageProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageProfileOutput).ToStorageProfilePtrOutputWithContext(ctx)
}

// StorageProfilePtrInput is an input type that accepts StorageProfileArgs, StorageProfilePtr and StorageProfilePtrOutput values.
// You can construct a concrete instance of `StorageProfilePtrInput` via:
//
//	        StorageProfileArgs{...}
//
//	or:
//
//	        nil
type StorageProfilePtrInput interface {
	pulumi.Input

	ToStorageProfilePtrOutput() StorageProfilePtrOutput
	ToStorageProfilePtrOutputWithContext(context.Context) StorageProfilePtrOutput
}

type storageProfilePtrType StorageProfileArgs

func StorageProfilePtr(v *StorageProfileArgs) StorageProfilePtrInput {
	return (*storageProfilePtrType)(v)
}

func (*storageProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageProfile)(nil)).Elem()
}

func (i *storageProfilePtrType) ToStorageProfilePtrOutput() StorageProfilePtrOutput {
	return i.ToStorageProfilePtrOutputWithContext(context.Background())
}

func (i *storageProfilePtrType) ToStorageProfilePtrOutputWithContext(ctx context.Context) StorageProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageProfilePtrOutput)
}

// The storage profile of the VMSS.
type StorageProfileOutput struct{ *pulumi.OutputState }

func (StorageProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageProfile)(nil)).Elem()
}

func (o StorageProfileOutput) ToStorageProfileOutput() StorageProfileOutput {
	return o
}

func (o StorageProfileOutput) ToStorageProfileOutputWithContext(ctx context.Context) StorageProfileOutput {
	return o
}

func (o StorageProfileOutput) ToStorageProfilePtrOutput() StorageProfilePtrOutput {
	return o.ToStorageProfilePtrOutputWithContext(context.Background())
}

func (o StorageProfileOutput) ToStorageProfilePtrOutputWithContext(ctx context.Context) StorageProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StorageProfile) *StorageProfile {
		return &v
	}).(StorageProfilePtrOutput)
}

// The Azure SKU name of the machines in the pool.
func (o StorageProfileOutput) OsDiskStorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageProfile) *string { return v.OsDiskStorageAccountType }).(pulumi.StringPtrOutput)
}

type StorageProfilePtrOutput struct{ *pulumi.OutputState }

func (StorageProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageProfile)(nil)).Elem()
}

func (o StorageProfilePtrOutput) ToStorageProfilePtrOutput() StorageProfilePtrOutput {
	return o
}

func (o StorageProfilePtrOutput) ToStorageProfilePtrOutputWithContext(ctx context.Context) StorageProfilePtrOutput {
	return o
}

func (o StorageProfilePtrOutput) Elem() StorageProfileOutput {
	return o.ApplyT(func(v *StorageProfile) StorageProfile {
		if v != nil {
			return *v
		}
		var ret StorageProfile
		return ret
	}).(StorageProfileOutput)
}

// The Azure SKU name of the machines in the pool.
func (o StorageProfilePtrOutput) OsDiskStorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageProfile) *string {
		if v == nil {
			return nil
		}
		return v.OsDiskStorageAccountType
	}).(pulumi.StringPtrOutput)
}

// The storage profile of the VMSS.
type StorageProfileResponse struct {
	// The Azure SKU name of the machines in the pool.
	OsDiskStorageAccountType *string `pulumi:"osDiskStorageAccountType"`
}

// The storage profile of the VMSS.
type StorageProfileResponseOutput struct{ *pulumi.OutputState }

func (StorageProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageProfileResponse)(nil)).Elem()
}

func (o StorageProfileResponseOutput) ToStorageProfileResponseOutput() StorageProfileResponseOutput {
	return o
}

func (o StorageProfileResponseOutput) ToStorageProfileResponseOutputWithContext(ctx context.Context) StorageProfileResponseOutput {
	return o
}

// The Azure SKU name of the machines in the pool.
func (o StorageProfileResponseOutput) OsDiskStorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageProfileResponse) *string { return v.OsDiskStorageAccountType }).(pulumi.StringPtrOutput)
}

type StorageProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (StorageProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageProfileResponse)(nil)).Elem()
}

func (o StorageProfileResponsePtrOutput) ToStorageProfileResponsePtrOutput() StorageProfileResponsePtrOutput {
	return o
}

func (o StorageProfileResponsePtrOutput) ToStorageProfileResponsePtrOutputWithContext(ctx context.Context) StorageProfileResponsePtrOutput {
	return o
}

func (o StorageProfileResponsePtrOutput) Elem() StorageProfileResponseOutput {
	return o.ApplyT(func(v *StorageProfileResponse) StorageProfileResponse {
		if v != nil {
			return *v
		}
		var ret StorageProfileResponse
		return ret
	}).(StorageProfileResponseOutput)
}

// The Azure SKU name of the machines in the pool.
func (o StorageProfileResponsePtrOutput) OsDiskStorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.OsDiskStorageAccountType
	}).(pulumi.StringPtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// User assigned identity properties
type UserAssignedIdentityResponse struct {
	// The client ID of the assigned identity.
	ClientId string `pulumi:"clientId"`
	// The principal ID of the assigned identity.
	PrincipalId string `pulumi:"principalId"`
}

// User assigned identity properties
type UserAssignedIdentityResponseOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutput() UserAssignedIdentityResponseOutput {
	return o
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutputWithContext(ctx context.Context) UserAssignedIdentityResponseOutput {
	return o
}

// The client ID of the assigned identity.
func (o UserAssignedIdentityResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// The principal ID of the assigned identity.
func (o UserAssignedIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

type UserAssignedIdentityResponseMapOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutput() UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutputWithContext(ctx context.Context) UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) MapIndex(k pulumi.StringInput) UserAssignedIdentityResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserAssignedIdentityResponse {
		return vs[0].(map[string]UserAssignedIdentityResponse)[vs[1].(string)]
	}).(UserAssignedIdentityResponseOutput)
}

// The agents will run on Virtual Machine Scale Sets.
type VmssFabricProfile struct {
	// The VM images of the machines in the pool.
	Images []PoolImage `pulumi:"images"`
	// Discriminator property for FabricProfile.
	// Expected value is 'Vmss'.
	Kind string `pulumi:"kind"`
	// The network profile of the machines in the pool.
	NetworkProfile *NetworkProfile `pulumi:"networkProfile"`
	// The OS profile of the machines in the pool.
	OsProfile *OsProfile `pulumi:"osProfile"`
	// The Azure SKU of the machines in the pool.
	Sku DevOpsAzureSku `pulumi:"sku"`
	// The storage profile of the machines in the pool.
	StorageProfile *StorageProfile `pulumi:"storageProfile"`
}

// VmssFabricProfileInput is an input type that accepts VmssFabricProfileArgs and VmssFabricProfileOutput values.
// You can construct a concrete instance of `VmssFabricProfileInput` via:
//
//	VmssFabricProfileArgs{...}
type VmssFabricProfileInput interface {
	pulumi.Input

	ToVmssFabricProfileOutput() VmssFabricProfileOutput
	ToVmssFabricProfileOutputWithContext(context.Context) VmssFabricProfileOutput
}

// The agents will run on Virtual Machine Scale Sets.
type VmssFabricProfileArgs struct {
	// The VM images of the machines in the pool.
	Images PoolImageArrayInput `pulumi:"images"`
	// Discriminator property for FabricProfile.
	// Expected value is 'Vmss'.
	Kind pulumi.StringInput `pulumi:"kind"`
	// The network profile of the machines in the pool.
	NetworkProfile NetworkProfilePtrInput `pulumi:"networkProfile"`
	// The OS profile of the machines in the pool.
	OsProfile OsProfilePtrInput `pulumi:"osProfile"`
	// The Azure SKU of the machines in the pool.
	Sku DevOpsAzureSkuInput `pulumi:"sku"`
	// The storage profile of the machines in the pool.
	StorageProfile StorageProfilePtrInput `pulumi:"storageProfile"`
}

func (VmssFabricProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VmssFabricProfile)(nil)).Elem()
}

func (i VmssFabricProfileArgs) ToVmssFabricProfileOutput() VmssFabricProfileOutput {
	return i.ToVmssFabricProfileOutputWithContext(context.Background())
}

func (i VmssFabricProfileArgs) ToVmssFabricProfileOutputWithContext(ctx context.Context) VmssFabricProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmssFabricProfileOutput)
}

// The agents will run on Virtual Machine Scale Sets.
type VmssFabricProfileOutput struct{ *pulumi.OutputState }

func (VmssFabricProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmssFabricProfile)(nil)).Elem()
}

func (o VmssFabricProfileOutput) ToVmssFabricProfileOutput() VmssFabricProfileOutput {
	return o
}

func (o VmssFabricProfileOutput) ToVmssFabricProfileOutputWithContext(ctx context.Context) VmssFabricProfileOutput {
	return o
}

// The VM images of the machines in the pool.
func (o VmssFabricProfileOutput) Images() PoolImageArrayOutput {
	return o.ApplyT(func(v VmssFabricProfile) []PoolImage { return v.Images }).(PoolImageArrayOutput)
}

// Discriminator property for FabricProfile.
// Expected value is 'Vmss'.
func (o VmssFabricProfileOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v VmssFabricProfile) string { return v.Kind }).(pulumi.StringOutput)
}

// The network profile of the machines in the pool.
func (o VmssFabricProfileOutput) NetworkProfile() NetworkProfilePtrOutput {
	return o.ApplyT(func(v VmssFabricProfile) *NetworkProfile { return v.NetworkProfile }).(NetworkProfilePtrOutput)
}

// The OS profile of the machines in the pool.
func (o VmssFabricProfileOutput) OsProfile() OsProfilePtrOutput {
	return o.ApplyT(func(v VmssFabricProfile) *OsProfile { return v.OsProfile }).(OsProfilePtrOutput)
}

// The Azure SKU of the machines in the pool.
func (o VmssFabricProfileOutput) Sku() DevOpsAzureSkuOutput {
	return o.ApplyT(func(v VmssFabricProfile) DevOpsAzureSku { return v.Sku }).(DevOpsAzureSkuOutput)
}

// The storage profile of the machines in the pool.
func (o VmssFabricProfileOutput) StorageProfile() StorageProfilePtrOutput {
	return o.ApplyT(func(v VmssFabricProfile) *StorageProfile { return v.StorageProfile }).(StorageProfilePtrOutput)
}

// The agents will run on Virtual Machine Scale Sets.
type VmssFabricProfileResponse struct {
	// The VM images of the machines in the pool.
	Images []PoolImageResponse `pulumi:"images"`
	// Discriminator property for FabricProfile.
	// Expected value is 'Vmss'.
	Kind string `pulumi:"kind"`
	// The network profile of the machines in the pool.
	NetworkProfile *NetworkProfileResponse `pulumi:"networkProfile"`
	// The OS profile of the machines in the pool.
	OsProfile *OsProfileResponse `pulumi:"osProfile"`
	// The Azure SKU of the machines in the pool.
	Sku DevOpsAzureSkuResponse `pulumi:"sku"`
	// The storage profile of the machines in the pool.
	StorageProfile *StorageProfileResponse `pulumi:"storageProfile"`
}

// The agents will run on Virtual Machine Scale Sets.
type VmssFabricProfileResponseOutput struct{ *pulumi.OutputState }

func (VmssFabricProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmssFabricProfileResponse)(nil)).Elem()
}

func (o VmssFabricProfileResponseOutput) ToVmssFabricProfileResponseOutput() VmssFabricProfileResponseOutput {
	return o
}

func (o VmssFabricProfileResponseOutput) ToVmssFabricProfileResponseOutputWithContext(ctx context.Context) VmssFabricProfileResponseOutput {
	return o
}

// The VM images of the machines in the pool.
func (o VmssFabricProfileResponseOutput) Images() PoolImageResponseArrayOutput {
	return o.ApplyT(func(v VmssFabricProfileResponse) []PoolImageResponse { return v.Images }).(PoolImageResponseArrayOutput)
}

// Discriminator property for FabricProfile.
// Expected value is 'Vmss'.
func (o VmssFabricProfileResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v VmssFabricProfileResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// The network profile of the machines in the pool.
func (o VmssFabricProfileResponseOutput) NetworkProfile() NetworkProfileResponsePtrOutput {
	return o.ApplyT(func(v VmssFabricProfileResponse) *NetworkProfileResponse { return v.NetworkProfile }).(NetworkProfileResponsePtrOutput)
}

// The OS profile of the machines in the pool.
func (o VmssFabricProfileResponseOutput) OsProfile() OsProfileResponsePtrOutput {
	return o.ApplyT(func(v VmssFabricProfileResponse) *OsProfileResponse { return v.OsProfile }).(OsProfileResponsePtrOutput)
}

// The Azure SKU of the machines in the pool.
func (o VmssFabricProfileResponseOutput) Sku() DevOpsAzureSkuResponseOutput {
	return o.ApplyT(func(v VmssFabricProfileResponse) DevOpsAzureSkuResponse { return v.Sku }).(DevOpsAzureSkuResponseOutput)
}

// The storage profile of the machines in the pool.
func (o VmssFabricProfileResponseOutput) StorageProfile() StorageProfileResponsePtrOutput {
	return o.ApplyT(func(v VmssFabricProfileResponse) *StorageProfileResponse { return v.StorageProfile }).(StorageProfileResponsePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(DevOpsAzureSkuOutput{})
	pulumi.RegisterOutputType(DevOpsAzureSkuResponseOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityPtrOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponseOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(NetworkProfileOutput{})
	pulumi.RegisterOutputType(NetworkProfilePtrOutput{})
	pulumi.RegisterOutputType(NetworkProfileResponseOutput{})
	pulumi.RegisterOutputType(NetworkProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(OsProfileOutput{})
	pulumi.RegisterOutputType(OsProfilePtrOutput{})
	pulumi.RegisterOutputType(OsProfileResponseOutput{})
	pulumi.RegisterOutputType(OsProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(PoolImageOutput{})
	pulumi.RegisterOutputType(PoolImageArrayOutput{})
	pulumi.RegisterOutputType(PoolImageResponseOutput{})
	pulumi.RegisterOutputType(PoolImageResponseArrayOutput{})
	pulumi.RegisterOutputType(SecretsManagementSettingsOutput{})
	pulumi.RegisterOutputType(SecretsManagementSettingsPtrOutput{})
	pulumi.RegisterOutputType(SecretsManagementSettingsResponseOutput{})
	pulumi.RegisterOutputType(SecretsManagementSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(StorageProfileOutput{})
	pulumi.RegisterOutputType(StorageProfilePtrOutput{})
	pulumi.RegisterOutputType(StorageProfileResponseOutput{})
	pulumi.RegisterOutputType(StorageProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseMapOutput{})
	pulumi.RegisterOutputType(VmssFabricProfileOutput{})
	pulumi.RegisterOutputType(VmssFabricProfileResponseOutput{})
}
