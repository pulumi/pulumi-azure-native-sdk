// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datafactory

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Change data capture resource type.
// Azure REST API version: 2018-06-01.
type ChangeDataCapture struct {
	pulumi.CustomResourceState

	// A boolean to determine if the vnet configuration needs to be overwritten.
	AllowVNetOverride pulumi.BoolPtrOutput `pulumi:"allowVNetOverride"`
	// The description of the change data capture.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Etag identifies change in the resource.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The folder that this CDC is in. If not specified, CDC will appear at the root level.
	Folder ChangeDataCaptureResponseFolderPtrOutput `pulumi:"folder"`
	// The resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// CDC policy
	Policy MapperPolicyResponseOutput `pulumi:"policy"`
	// List of sources connections that can be used as sources in the CDC.
	SourceConnectionsInfo MapperSourceConnectionsInfoResponseArrayOutput `pulumi:"sourceConnectionsInfo"`
	// Status of the CDC as to if it is running or stopped.
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// List of target connections that can be used as sources in the CDC.
	TargetConnectionsInfo MapperTargetConnectionsInfoResponseArrayOutput `pulumi:"targetConnectionsInfo"`
	// The resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewChangeDataCapture registers a new resource with the given unique name, arguments, and options.
func NewChangeDataCapture(ctx *pulumi.Context,
	name string, args *ChangeDataCaptureArgs, opts ...pulumi.ResourceOption) (*ChangeDataCapture, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FactoryName == nil {
		return nil, errors.New("invalid value for required argument 'FactoryName'")
	}
	if args.Policy == nil {
		return nil, errors.New("invalid value for required argument 'Policy'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SourceConnectionsInfo == nil {
		return nil, errors.New("invalid value for required argument 'SourceConnectionsInfo'")
	}
	if args.TargetConnectionsInfo == nil {
		return nil, errors.New("invalid value for required argument 'TargetConnectionsInfo'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:datafactory/v20180601:ChangeDataCapture"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ChangeDataCapture
	err := ctx.RegisterResource("azure-native:datafactory:ChangeDataCapture", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChangeDataCapture gets an existing ChangeDataCapture resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChangeDataCapture(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ChangeDataCaptureState, opts ...pulumi.ResourceOption) (*ChangeDataCapture, error) {
	var resource ChangeDataCapture
	err := ctx.ReadResource("azure-native:datafactory:ChangeDataCapture", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ChangeDataCapture resources.
type changeDataCaptureState struct {
}

type ChangeDataCaptureState struct {
}

func (ChangeDataCaptureState) ElementType() reflect.Type {
	return reflect.TypeOf((*changeDataCaptureState)(nil)).Elem()
}

type changeDataCaptureArgs struct {
	// A boolean to determine if the vnet configuration needs to be overwritten.
	AllowVNetOverride *bool `pulumi:"allowVNetOverride"`
	// The change data capture name.
	ChangeDataCaptureName *string `pulumi:"changeDataCaptureName"`
	// The description of the change data capture.
	Description *string `pulumi:"description"`
	// The factory name.
	FactoryName string `pulumi:"factoryName"`
	// The folder that this CDC is in. If not specified, CDC will appear at the root level.
	Folder *ChangeDataCaptureFolder `pulumi:"folder"`
	// CDC policy
	Policy MapperPolicy `pulumi:"policy"`
	// The resource group name.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// List of sources connections that can be used as sources in the CDC.
	SourceConnectionsInfo []MapperSourceConnectionsInfo `pulumi:"sourceConnectionsInfo"`
	// Status of the CDC as to if it is running or stopped.
	Status *string `pulumi:"status"`
	// List of target connections that can be used as sources in the CDC.
	TargetConnectionsInfo []MapperTargetConnectionsInfo `pulumi:"targetConnectionsInfo"`
}

// The set of arguments for constructing a ChangeDataCapture resource.
type ChangeDataCaptureArgs struct {
	// A boolean to determine if the vnet configuration needs to be overwritten.
	AllowVNetOverride pulumi.BoolPtrInput
	// The change data capture name.
	ChangeDataCaptureName pulumi.StringPtrInput
	// The description of the change data capture.
	Description pulumi.StringPtrInput
	// The factory name.
	FactoryName pulumi.StringInput
	// The folder that this CDC is in. If not specified, CDC will appear at the root level.
	Folder ChangeDataCaptureFolderPtrInput
	// CDC policy
	Policy MapperPolicyInput
	// The resource group name.
	ResourceGroupName pulumi.StringInput
	// List of sources connections that can be used as sources in the CDC.
	SourceConnectionsInfo MapperSourceConnectionsInfoArrayInput
	// Status of the CDC as to if it is running or stopped.
	Status pulumi.StringPtrInput
	// List of target connections that can be used as sources in the CDC.
	TargetConnectionsInfo MapperTargetConnectionsInfoArrayInput
}

func (ChangeDataCaptureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*changeDataCaptureArgs)(nil)).Elem()
}

type ChangeDataCaptureInput interface {
	pulumi.Input

	ToChangeDataCaptureOutput() ChangeDataCaptureOutput
	ToChangeDataCaptureOutputWithContext(ctx context.Context) ChangeDataCaptureOutput
}

func (*ChangeDataCapture) ElementType() reflect.Type {
	return reflect.TypeOf((**ChangeDataCapture)(nil)).Elem()
}

func (i *ChangeDataCapture) ToChangeDataCaptureOutput() ChangeDataCaptureOutput {
	return i.ToChangeDataCaptureOutputWithContext(context.Background())
}

func (i *ChangeDataCapture) ToChangeDataCaptureOutputWithContext(ctx context.Context) ChangeDataCaptureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChangeDataCaptureOutput)
}

type ChangeDataCaptureOutput struct{ *pulumi.OutputState }

func (ChangeDataCaptureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChangeDataCapture)(nil)).Elem()
}

func (o ChangeDataCaptureOutput) ToChangeDataCaptureOutput() ChangeDataCaptureOutput {
	return o
}

func (o ChangeDataCaptureOutput) ToChangeDataCaptureOutputWithContext(ctx context.Context) ChangeDataCaptureOutput {
	return o
}

// A boolean to determine if the vnet configuration needs to be overwritten.
func (o ChangeDataCaptureOutput) AllowVNetOverride() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ChangeDataCapture) pulumi.BoolPtrOutput { return v.AllowVNetOverride }).(pulumi.BoolPtrOutput)
}

// The description of the change data capture.
func (o ChangeDataCaptureOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChangeDataCapture) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Etag identifies change in the resource.
func (o ChangeDataCaptureOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *ChangeDataCapture) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The folder that this CDC is in. If not specified, CDC will appear at the root level.
func (o ChangeDataCaptureOutput) Folder() ChangeDataCaptureResponseFolderPtrOutput {
	return o.ApplyT(func(v *ChangeDataCapture) ChangeDataCaptureResponseFolderPtrOutput { return v.Folder }).(ChangeDataCaptureResponseFolderPtrOutput)
}

// The resource name.
func (o ChangeDataCaptureOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ChangeDataCapture) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// CDC policy
func (o ChangeDataCaptureOutput) Policy() MapperPolicyResponseOutput {
	return o.ApplyT(func(v *ChangeDataCapture) MapperPolicyResponseOutput { return v.Policy }).(MapperPolicyResponseOutput)
}

// List of sources connections that can be used as sources in the CDC.
func (o ChangeDataCaptureOutput) SourceConnectionsInfo() MapperSourceConnectionsInfoResponseArrayOutput {
	return o.ApplyT(func(v *ChangeDataCapture) MapperSourceConnectionsInfoResponseArrayOutput {
		return v.SourceConnectionsInfo
	}).(MapperSourceConnectionsInfoResponseArrayOutput)
}

// Status of the CDC as to if it is running or stopped.
func (o ChangeDataCaptureOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChangeDataCapture) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

// List of target connections that can be used as sources in the CDC.
func (o ChangeDataCaptureOutput) TargetConnectionsInfo() MapperTargetConnectionsInfoResponseArrayOutput {
	return o.ApplyT(func(v *ChangeDataCapture) MapperTargetConnectionsInfoResponseArrayOutput {
		return v.TargetConnectionsInfo
	}).(MapperTargetConnectionsInfoResponseArrayOutput)
}

// The resource type.
func (o ChangeDataCaptureOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ChangeDataCapture) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ChangeDataCaptureOutput{})
}
