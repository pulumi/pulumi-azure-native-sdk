// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datafactory

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// HDInsight Pig activity type.
type HDInsightPigActivity struct {
	// User specified arguments to HDInsightActivity. Type: array (or Expression with resultType array).
	Arguments interface{} `pulumi:"arguments"`
	// Allows user to specify defines for Pig job request.
	Defines map[string]interface{} `pulumi:"defines"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Debug info option.
	GetDebugInfo *string `pulumi:"getDebugInfo"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Script linked service reference.
	ScriptLinkedService *LinkedServiceReference `pulumi:"scriptLinkedService"`
	// Script path. Type: string (or Expression with resultType string).
	ScriptPath interface{} `pulumi:"scriptPath"`
	// Storage linked service references.
	StorageLinkedServices []LinkedServiceReference `pulumi:"storageLinkedServices"`
	// Type of activity.
	// Expected value is 'HDInsightPig'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// HDInsight Pig activity type.
type HDInsightPigActivityResponse struct {
	// User specified arguments to HDInsightActivity. Type: array (or Expression with resultType array).
	Arguments interface{} `pulumi:"arguments"`
	// Allows user to specify defines for Pig job request.
	Defines map[string]interface{} `pulumi:"defines"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Debug info option.
	GetDebugInfo *string `pulumi:"getDebugInfo"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Script linked service reference.
	ScriptLinkedService *LinkedServiceReferenceResponse `pulumi:"scriptLinkedService"`
	// Script path. Type: string (or Expression with resultType string).
	ScriptPath interface{} `pulumi:"scriptPath"`
	// Storage linked service references.
	StorageLinkedServices []LinkedServiceReferenceResponse `pulumi:"storageLinkedServices"`
	// Type of activity.
	// Expected value is 'HDInsightPig'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// HDInsight Spark activity.
type HDInsightSparkActivity struct {
	// The user-specified arguments to HDInsightSparkActivity.
	Arguments []interface{} `pulumi:"arguments"`
	// The application's Java/Spark main class.
	ClassName *string `pulumi:"className"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// The relative path to the root folder of the code/package to be executed. Type: string (or Expression with resultType string).
	EntryFilePath interface{} `pulumi:"entryFilePath"`
	// Debug info option.
	GetDebugInfo *string `pulumi:"getDebugInfo"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// The user to impersonate that will execute the job. Type: string (or Expression with resultType string).
	ProxyUser interface{} `pulumi:"proxyUser"`
	// The root path in 'sparkJobLinkedService' for all the job’s files. Type: string (or Expression with resultType string).
	RootPath interface{} `pulumi:"rootPath"`
	// Spark configuration property.
	SparkConfig map[string]interface{} `pulumi:"sparkConfig"`
	// The storage linked service for uploading the entry file and dependencies, and for receiving logs.
	SparkJobLinkedService *LinkedServiceReference `pulumi:"sparkJobLinkedService"`
	// Type of activity.
	// Expected value is 'HDInsightSpark'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// HDInsight Spark activity.
type HDInsightSparkActivityResponse struct {
	// The user-specified arguments to HDInsightSparkActivity.
	Arguments []interface{} `pulumi:"arguments"`
	// The application's Java/Spark main class.
	ClassName *string `pulumi:"className"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// The relative path to the root folder of the code/package to be executed. Type: string (or Expression with resultType string).
	EntryFilePath interface{} `pulumi:"entryFilePath"`
	// Debug info option.
	GetDebugInfo *string `pulumi:"getDebugInfo"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// The user to impersonate that will execute the job. Type: string (or Expression with resultType string).
	ProxyUser interface{} `pulumi:"proxyUser"`
	// The root path in 'sparkJobLinkedService' for all the job’s files. Type: string (or Expression with resultType string).
	RootPath interface{} `pulumi:"rootPath"`
	// Spark configuration property.
	SparkConfig map[string]interface{} `pulumi:"sparkConfig"`
	// The storage linked service for uploading the entry file and dependencies, and for receiving logs.
	SparkJobLinkedService *LinkedServiceReferenceResponse `pulumi:"sparkJobLinkedService"`
	// Type of activity.
	// Expected value is 'HDInsightSpark'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// HDInsight streaming activity type.
type HDInsightStreamingActivity struct {
	// User specified arguments to HDInsightActivity.
	Arguments []interface{} `pulumi:"arguments"`
	// Combiner executable name. Type: string (or Expression with resultType string).
	Combiner interface{} `pulumi:"combiner"`
	// Command line environment values.
	CommandEnvironment []interface{} `pulumi:"commandEnvironment"`
	// Allows user to specify defines for streaming job request.
	Defines map[string]interface{} `pulumi:"defines"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Linked service reference where the files are located.
	FileLinkedService *LinkedServiceReference `pulumi:"fileLinkedService"`
	// Paths to streaming job files. Can be directories.
	FilePaths []interface{} `pulumi:"filePaths"`
	// Debug info option.
	GetDebugInfo *string `pulumi:"getDebugInfo"`
	// Input blob path. Type: string (or Expression with resultType string).
	Input interface{} `pulumi:"input"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Mapper executable name. Type: string (or Expression with resultType string).
	Mapper interface{} `pulumi:"mapper"`
	// Activity name.
	Name string `pulumi:"name"`
	// Output blob path. Type: string (or Expression with resultType string).
	Output interface{} `pulumi:"output"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Reducer executable name. Type: string (or Expression with resultType string).
	Reducer interface{} `pulumi:"reducer"`
	// Storage linked service references.
	StorageLinkedServices []LinkedServiceReference `pulumi:"storageLinkedServices"`
	// Type of activity.
	// Expected value is 'HDInsightStreaming'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// HDInsight streaming activity type.
type HDInsightStreamingActivityResponse struct {
	// User specified arguments to HDInsightActivity.
	Arguments []interface{} `pulumi:"arguments"`
	// Combiner executable name. Type: string (or Expression with resultType string).
	Combiner interface{} `pulumi:"combiner"`
	// Command line environment values.
	CommandEnvironment []interface{} `pulumi:"commandEnvironment"`
	// Allows user to specify defines for streaming job request.
	Defines map[string]interface{} `pulumi:"defines"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Linked service reference where the files are located.
	FileLinkedService *LinkedServiceReferenceResponse `pulumi:"fileLinkedService"`
	// Paths to streaming job files. Can be directories.
	FilePaths []interface{} `pulumi:"filePaths"`
	// Debug info option.
	GetDebugInfo *string `pulumi:"getDebugInfo"`
	// Input blob path. Type: string (or Expression with resultType string).
	Input interface{} `pulumi:"input"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Mapper executable name. Type: string (or Expression with resultType string).
	Mapper interface{} `pulumi:"mapper"`
	// Activity name.
	Name string `pulumi:"name"`
	// Output blob path. Type: string (or Expression with resultType string).
	Output interface{} `pulumi:"output"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Reducer executable name. Type: string (or Expression with resultType string).
	Reducer interface{} `pulumi:"reducer"`
	// Storage linked service references.
	StorageLinkedServices []LinkedServiceReferenceResponse `pulumi:"storageLinkedServices"`
	// Type of activity.
	// Expected value is 'HDInsightStreaming'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Hadoop Distributed File System (HDFS) linked service.
type HdfsLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication used to connect to the HDFS. Possible values are: Anonymous and Windows. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for Windows authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Hdfs'.
	Type string `pulumi:"type"`
	// The URL of the HDFS service endpoint, e.g. http://myhostname:50070/webhdfs/v1 . Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// User name for Windows authentication. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// Hadoop Distributed File System (HDFS) linked service.
type HdfsLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication used to connect to the HDFS. Possible values are: Anonymous and Windows. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for Windows authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Hdfs'.
	Type string `pulumi:"type"`
	// The URL of the HDFS service endpoint, e.g. http://myhostname:50070/webhdfs/v1 . Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// User name for Windows authentication. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// The location of HDFS.
type HdfsLocation struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'HdfsLocation'.
	Type string `pulumi:"type"`
}

// The location of HDFS.
type HdfsLocationResponse struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'HdfsLocation'.
	Type string `pulumi:"type"`
}

// HDFS read settings.
type HdfsReadSettings struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies Distcp-related settings.
	DistcpSettings *DistcpSettings `pulumi:"distcpSettings"`
	// Indicates whether to enable partition discovery.
	EnablePartitionDiscovery *bool `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'HdfsReadSettings'.
	Type string `pulumi:"type"`
	// HDFS wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// HDFS wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// HDFS read settings.
type HdfsReadSettingsResponse struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies Distcp-related settings.
	DistcpSettings *DistcpSettingsResponse `pulumi:"distcpSettings"`
	// Indicates whether to enable partition discovery.
	EnablePartitionDiscovery *bool `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'HdfsReadSettings'.
	Type string `pulumi:"type"`
	// HDFS wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// HDFS wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// A copy activity HDFS source.
type HdfsSource struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies Distcp-related settings.
	DistcpSettings *DistcpSettings `pulumi:"distcpSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'HdfsSource'.
	Type string `pulumi:"type"`
}

// A copy activity HDFS source.
type HdfsSourceResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies Distcp-related settings.
	DistcpSettings *DistcpSettingsResponse `pulumi:"distcpSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'HdfsSource'.
	Type string `pulumi:"type"`
}

// Hive Server linked service.
type HiveLinkedService struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication method used to access the Hive server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// IP address or host name of the Hive server, separated by ';' for multiple hosts (only when serviceDiscoveryMode is enable).
	Host interface{} `pulumi:"host"`
	// The partial URL corresponding to the Hive server.
	HttpPath interface{} `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the Username field
	Password interface{} `pulumi:"password"`
	// The TCP port that the Hive server uses to listen for client connections.
	Port interface{} `pulumi:"port"`
	// The type of Hive server.
	ServerType *string `pulumi:"serverType"`
	// true to indicate using the ZooKeeper service, false not.
	ServiceDiscoveryMode interface{} `pulumi:"serviceDiscoveryMode"`
	// The transport protocol to use in the Thrift layer.
	ThriftTransportProtocol *string `pulumi:"thriftTransportProtocol"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'Hive'.
	Type string `pulumi:"type"`
	// Specifies whether the driver uses native HiveQL queries,or converts them into an equivalent form in HiveQL.
	UseNativeQuery interface{} `pulumi:"useNativeQuery"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
	// The user name that you use to access Hive Server.
	Username interface{} `pulumi:"username"`
	// The namespace on ZooKeeper under which Hive Server 2 nodes are added.
	ZooKeeperNameSpace interface{} `pulumi:"zooKeeperNameSpace"`
}

// Hive Server linked service.
type HiveLinkedServiceResponse struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication method used to access the Hive server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// IP address or host name of the Hive server, separated by ';' for multiple hosts (only when serviceDiscoveryMode is enable).
	Host interface{} `pulumi:"host"`
	// The partial URL corresponding to the Hive server.
	HttpPath interface{} `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the Username field
	Password interface{} `pulumi:"password"`
	// The TCP port that the Hive server uses to listen for client connections.
	Port interface{} `pulumi:"port"`
	// The type of Hive server.
	ServerType *string `pulumi:"serverType"`
	// true to indicate using the ZooKeeper service, false not.
	ServiceDiscoveryMode interface{} `pulumi:"serviceDiscoveryMode"`
	// The transport protocol to use in the Thrift layer.
	ThriftTransportProtocol *string `pulumi:"thriftTransportProtocol"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'Hive'.
	Type string `pulumi:"type"`
	// Specifies whether the driver uses native HiveQL queries,or converts them into an equivalent form in HiveQL.
	UseNativeQuery interface{} `pulumi:"useNativeQuery"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
	// The user name that you use to access Hive Server.
	Username interface{} `pulumi:"username"`
	// The namespace on ZooKeeper under which Hive Server 2 nodes are added.
	ZooKeeperNameSpace interface{} `pulumi:"zooKeeperNameSpace"`
}

// Hive Server dataset.
type HiveObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Hive. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'HiveObject'.
	Type string `pulumi:"type"`
}

// Hive Server dataset.
type HiveObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Hive. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'HiveObject'.
	Type string `pulumi:"type"`
}

// A copy activity Hive Server source.
type HiveSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'HiveSource'.
	Type string `pulumi:"type"`
}

// A copy activity Hive Server source.
type HiveSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'HiveSource'.
	Type string `pulumi:"type"`
}

// A file in an HTTP web server.
type HttpDataset struct {
	// The headers for the HTTP Request. e.g. request-header-name-1:request-header-value-1
	// ...
	// request-header-name-n:request-header-value-n Type: string (or Expression with resultType string).
	AdditionalHeaders interface{} `pulumi:"additionalHeaders"`
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used on files.
	Compression *DatasetCompression `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// The format of files.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The relative URL based on the URL in the HttpLinkedService refers to an HTTP file Type: string (or Expression with resultType string).
	RelativeUrl interface{} `pulumi:"relativeUrl"`
	// The body for the HTTP request. Type: string (or Expression with resultType string).
	RequestBody interface{} `pulumi:"requestBody"`
	// The HTTP method for the HTTP request. Type: string (or Expression with resultType string).
	RequestMethod interface{} `pulumi:"requestMethod"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'HttpFile'.
	Type string `pulumi:"type"`
}

// A file in an HTTP web server.
type HttpDatasetResponse struct {
	// The headers for the HTTP Request. e.g. request-header-name-1:request-header-value-1
	// ...
	// request-header-name-n:request-header-value-n Type: string (or Expression with resultType string).
	AdditionalHeaders interface{} `pulumi:"additionalHeaders"`
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used on files.
	Compression *DatasetCompressionResponse `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// The format of files.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The relative URL based on the URL in the HttpLinkedService refers to an HTTP file Type: string (or Expression with resultType string).
	RelativeUrl interface{} `pulumi:"relativeUrl"`
	// The body for the HTTP request. Type: string (or Expression with resultType string).
	RequestBody interface{} `pulumi:"requestBody"`
	// The HTTP method for the HTTP request. Type: string (or Expression with resultType string).
	RequestMethod interface{} `pulumi:"requestMethod"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'HttpFile'.
	Type string `pulumi:"type"`
}

// Linked service for an HTTP source.
type HttpLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The additional HTTP headers in the request to RESTful API used for authorization. Type: object (or Expression with resultType object).
	AuthHeaders interface{} `pulumi:"authHeaders"`
	// The authentication type to be used to connect to the HTTP server.
	AuthenticationType *string `pulumi:"authenticationType"`
	// Thumbprint of certificate for ClientCertificate authentication. Only valid for on-premises copy. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
	CertThumbprint interface{} `pulumi:"certThumbprint"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Base64 encoded certificate data for ClientCertificate authentication. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
	EmbeddedCertData interface{} `pulumi:"embeddedCertData"`
	// If true, validate the HTTPS server SSL certificate. Default value is true. Type: boolean (or Expression with resultType boolean).
	EnableServerCertificateValidation interface{} `pulumi:"enableServerCertificateValidation"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for Basic, Digest, Windows, or ClientCertificate with EmbeddedCertData authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'HttpServer'.
	Type string `pulumi:"type"`
	// The base URL of the HTTP endpoint, e.g. https://www.microsoft.com. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// User name for Basic, Digest, or Windows authentication. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// Linked service for an HTTP source.
type HttpLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The additional HTTP headers in the request to RESTful API used for authorization. Type: object (or Expression with resultType object).
	AuthHeaders interface{} `pulumi:"authHeaders"`
	// The authentication type to be used to connect to the HTTP server.
	AuthenticationType *string `pulumi:"authenticationType"`
	// Thumbprint of certificate for ClientCertificate authentication. Only valid for on-premises copy. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
	CertThumbprint interface{} `pulumi:"certThumbprint"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Base64 encoded certificate data for ClientCertificate authentication. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
	EmbeddedCertData interface{} `pulumi:"embeddedCertData"`
	// If true, validate the HTTPS server SSL certificate. Default value is true. Type: boolean (or Expression with resultType boolean).
	EnableServerCertificateValidation interface{} `pulumi:"enableServerCertificateValidation"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for Basic, Digest, Windows, or ClientCertificate with EmbeddedCertData authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'HttpServer'.
	Type string `pulumi:"type"`
	// The base URL of the HTTP endpoint, e.g. https://www.microsoft.com. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// User name for Basic, Digest, or Windows authentication. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// Sftp read settings.
type HttpReadSettings struct {
	// The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string).
	AdditionalHeaders interface{} `pulumi:"additionalHeaders"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery.
	EnablePartitionDiscovery *bool `pulumi:"enablePartitionDiscovery"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string).
	RequestBody interface{} `pulumi:"requestBody"`
	// The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string).
	RequestMethod interface{} `pulumi:"requestMethod"`
	// Specifies the timeout for a HTTP client to get HTTP response from HTTP server.
	RequestTimeout interface{} `pulumi:"requestTimeout"`
	// The read setting type.
	// Expected value is 'HttpReadSettings'.
	Type string `pulumi:"type"`
}

// Sftp read settings.
type HttpReadSettingsResponse struct {
	// The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string).
	AdditionalHeaders interface{} `pulumi:"additionalHeaders"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery.
	EnablePartitionDiscovery *bool `pulumi:"enablePartitionDiscovery"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string).
	RequestBody interface{} `pulumi:"requestBody"`
	// The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string).
	RequestMethod interface{} `pulumi:"requestMethod"`
	// Specifies the timeout for a HTTP client to get HTTP response from HTTP server.
	RequestTimeout interface{} `pulumi:"requestTimeout"`
	// The read setting type.
	// Expected value is 'HttpReadSettings'.
	Type string `pulumi:"type"`
}

// The location of http server.
type HttpServerLocation struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Specify the relativeUrl of http server. Type: string (or Expression with resultType string)
	RelativeUrl interface{} `pulumi:"relativeUrl"`
	// Type of dataset storage location.
	// Expected value is 'HttpServerLocation'.
	Type string `pulumi:"type"`
}

// The location of http server.
type HttpServerLocationResponse struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Specify the relativeUrl of http server. Type: string (or Expression with resultType string)
	RelativeUrl interface{} `pulumi:"relativeUrl"`
	// Type of dataset storage location.
	// Expected value is 'HttpServerLocation'.
	Type string `pulumi:"type"`
}

// A copy activity source for an HTTP file.
type HttpSource struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies the timeout for a HTTP client to get HTTP response from HTTP server. The default value is equivalent to System.Net.HttpWebRequest.Timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'HttpSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for an HTTP file.
type HttpSourceResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies the timeout for a HTTP client to get HTTP response from HTTP server. The default value is equivalent to System.Net.HttpWebRequest.Timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'HttpSource'.
	Type string `pulumi:"type"`
}

// Hubspot Service linked service.
type HubspotLinkedService struct {
	// The access token obtained when initially authenticating your OAuth integration.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client ID associated with your Hubspot application.
	ClientId interface{} `pulumi:"clientId"`
	// The client secret associated with your Hubspot application.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The refresh token obtained when initially authenticating your OAuth integration.
	RefreshToken interface{} `pulumi:"refreshToken"`
	// Type of linked service.
	// Expected value is 'Hubspot'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Hubspot Service linked service.
type HubspotLinkedServiceResponse struct {
	// The access token obtained when initially authenticating your OAuth integration.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client ID associated with your Hubspot application.
	ClientId interface{} `pulumi:"clientId"`
	// The client secret associated with your Hubspot application.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The refresh token obtained when initially authenticating your OAuth integration.
	RefreshToken interface{} `pulumi:"refreshToken"`
	// Type of linked service.
	// Expected value is 'Hubspot'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Hubspot Service dataset.
type HubspotObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'HubspotObject'.
	Type string `pulumi:"type"`
}

// Hubspot Service dataset.
type HubspotObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'HubspotObject'.
	Type string `pulumi:"type"`
}

// A copy activity Hubspot Service source.
type HubspotSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'HubspotSource'.
	Type string `pulumi:"type"`
}

// A copy activity Hubspot Service source.
type HubspotSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'HubspotSource'.
	Type string `pulumi:"type"`
}

// This activity evaluates a boolean expression and executes either the activities under the ifTrueActivities property or the ifFalseActivities property depending on the result of the expression.
type IfConditionActivity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// An expression that would evaluate to Boolean. This is used to determine the block of activities (ifTrueActivities or ifFalseActivities) that will be executed.
	Expression Expression `pulumi:"expression"`
	// List of activities to execute if expression is evaluated to false. This is an optional property and if not provided, the activity will exit without any action.
	IfFalseActivities []interface{} `pulumi:"ifFalseActivities"`
	// List of activities to execute if expression is evaluated to true. This is an optional property and if not provided, the activity will exit without any action.
	IfTrueActivities []interface{} `pulumi:"ifTrueActivities"`
	// Activity name.
	Name string `pulumi:"name"`
	// Type of activity.
	// Expected value is 'IfCondition'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// This activity evaluates a boolean expression and executes either the activities under the ifTrueActivities property or the ifFalseActivities property depending on the result of the expression.
type IfConditionActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// An expression that would evaluate to Boolean. This is used to determine the block of activities (ifTrueActivities or ifFalseActivities) that will be executed.
	Expression ExpressionResponse `pulumi:"expression"`
	// List of activities to execute if expression is evaluated to false. This is an optional property and if not provided, the activity will exit without any action.
	IfFalseActivities []interface{} `pulumi:"ifFalseActivities"`
	// List of activities to execute if expression is evaluated to true. This is an optional property and if not provided, the activity will exit without any action.
	IfTrueActivities []interface{} `pulumi:"ifTrueActivities"`
	// Activity name.
	Name string `pulumi:"name"`
	// Type of activity.
	// Expected value is 'IfCondition'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Impala server linked service.
type ImpalaLinkedService struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to use.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The IP address or host name of the Impala server. (i.e. 192.168.222.160)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name when using UsernameAndPassword.
	Password interface{} `pulumi:"password"`
	// The TCP port that the Impala server uses to listen for client connections. The default value is 21050.
	Port interface{} `pulumi:"port"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'Impala'.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
	// The user name used to access the Impala server. The default value is anonymous when using SASLUsername.
	Username interface{} `pulumi:"username"`
}

// Impala server linked service.
type ImpalaLinkedServiceResponse struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to use.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The IP address or host name of the Impala server. (i.e. 192.168.222.160)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name when using UsernameAndPassword.
	Password interface{} `pulumi:"password"`
	// The TCP port that the Impala server uses to listen for client connections. The default value is 21050.
	Port interface{} `pulumi:"port"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'Impala'.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
	// The user name used to access the Impala server. The default value is anonymous when using SASLUsername.
	Username interface{} `pulumi:"username"`
}

// Impala server dataset.
type ImpalaObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Impala. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'ImpalaObject'.
	Type string `pulumi:"type"`
}

// Impala server dataset.
type ImpalaObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Impala. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'ImpalaObject'.
	Type string `pulumi:"type"`
}

// A copy activity Impala server source.
type ImpalaSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ImpalaSource'.
	Type string `pulumi:"type"`
}

// A copy activity Impala server source.
type ImpalaSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ImpalaSource'.
	Type string `pulumi:"type"`
}

// Informix linked service.
type InformixLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication used to connect to the Informix as ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The access credential portion of the connection string specified in driver-specific property-value format.
	Credential interface{} `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Informix'.
	Type string `pulumi:"type"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// Informix linked service.
type InformixLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication used to connect to the Informix as ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The access credential portion of the connection string specified in driver-specific property-value format.
	Credential interface{} `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Informix'.
	Type string `pulumi:"type"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// A copy activity Informix sink.
type InformixSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to execute before starting the copy. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'InformixSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Informix sink.
type InformixSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to execute before starting the copy. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'InformixSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity source for Informix.
type InformixSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'InformixSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for Informix.
type InformixSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'InformixSource'.
	Type string `pulumi:"type"`
}

// The Informix table dataset.
type InformixTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The Informix table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'InformixTable'.
	Type string `pulumi:"type"`
}

// The Informix table dataset.
type InformixTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The Informix table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'InformixTable'.
	Type string `pulumi:"type"`
}

// The compute resource properties for managed integration runtime.
type IntegrationRuntimeComputeProperties struct {
	// CopyComputeScale properties for managed integration runtime.
	CopyComputeScaleProperties *CopyComputeScaleProperties `pulumi:"copyComputeScaleProperties"`
	// Data flow properties for managed integration runtime.
	DataFlowProperties *IntegrationRuntimeDataFlowProperties `pulumi:"dataFlowProperties"`
	// The location for managed integration runtime. The supported regions could be found on https://docs.microsoft.com/en-us/azure/data-factory/data-factory-data-movement-activities
	Location *string `pulumi:"location"`
	// Maximum parallel executions count per node for managed integration runtime.
	MaxParallelExecutionsPerNode *int `pulumi:"maxParallelExecutionsPerNode"`
	// The node size requirement to managed integration runtime.
	NodeSize *string `pulumi:"nodeSize"`
	// The required number of nodes for managed integration runtime.
	NumberOfNodes *int `pulumi:"numberOfNodes"`
	// PipelineExternalComputeScale properties for managed integration runtime.
	PipelineExternalComputeScaleProperties *PipelineExternalComputeScaleProperties `pulumi:"pipelineExternalComputeScaleProperties"`
	// VNet properties for managed integration runtime.
	VNetProperties *IntegrationRuntimeVNetProperties `pulumi:"vNetProperties"`
}

// The compute resource properties for managed integration runtime.
type IntegrationRuntimeComputePropertiesResponse struct {
	// CopyComputeScale properties for managed integration runtime.
	CopyComputeScaleProperties *CopyComputeScalePropertiesResponse `pulumi:"copyComputeScaleProperties"`
	// Data flow properties for managed integration runtime.
	DataFlowProperties *IntegrationRuntimeDataFlowPropertiesResponse `pulumi:"dataFlowProperties"`
	// The location for managed integration runtime. The supported regions could be found on https://docs.microsoft.com/en-us/azure/data-factory/data-factory-data-movement-activities
	Location *string `pulumi:"location"`
	// Maximum parallel executions count per node for managed integration runtime.
	MaxParallelExecutionsPerNode *int `pulumi:"maxParallelExecutionsPerNode"`
	// The node size requirement to managed integration runtime.
	NodeSize *string `pulumi:"nodeSize"`
	// The required number of nodes for managed integration runtime.
	NumberOfNodes *int `pulumi:"numberOfNodes"`
	// PipelineExternalComputeScale properties for managed integration runtime.
	PipelineExternalComputeScaleProperties *PipelineExternalComputeScalePropertiesResponse `pulumi:"pipelineExternalComputeScaleProperties"`
	// VNet properties for managed integration runtime.
	VNetProperties *IntegrationRuntimeVNetPropertiesResponse `pulumi:"vNetProperties"`
}

// Custom setup script properties for a managed dedicated integration runtime.
type IntegrationRuntimeCustomSetupScriptProperties struct {
	// The URI of the Azure blob container that contains the custom setup script.
	BlobContainerUri *string `pulumi:"blobContainerUri"`
	// The SAS token of the Azure blob container.
	SasToken *SecureString `pulumi:"sasToken"`
}

// Custom setup script properties for a managed dedicated integration runtime.
type IntegrationRuntimeCustomSetupScriptPropertiesResponse struct {
	// The URI of the Azure blob container that contains the custom setup script.
	BlobContainerUri *string `pulumi:"blobContainerUri"`
	// The SAS token of the Azure blob container.
	SasToken *SecureStringResponse `pulumi:"sasToken"`
}

// The definition and properties of virtual network to which Azure-SSIS integration runtime will join.
type IntegrationRuntimeCustomerVirtualNetwork struct {
	// The ID of subnet to which Azure-SSIS integration runtime will join.
	SubnetId *string `pulumi:"subnetId"`
}

// The definition and properties of virtual network to which Azure-SSIS integration runtime will join.
type IntegrationRuntimeCustomerVirtualNetworkResponse struct {
	// The ID of subnet to which Azure-SSIS integration runtime will join.
	SubnetId *string `pulumi:"subnetId"`
}

// Data flow properties for managed integration runtime.
type IntegrationRuntimeDataFlowProperties struct {
	// Cluster will not be recycled and it will be used in next data flow activity run until TTL (time to live) is reached if this is set as false. Default is true.
	Cleanup *bool `pulumi:"cleanup"`
	// Compute type of the cluster which will execute data flow job.
	ComputeType *string `pulumi:"computeType"`
	// Core count of the cluster which will execute data flow job. Supported values are: 8, 16, 32, 48, 80, 144 and 272.
	CoreCount *int `pulumi:"coreCount"`
	// Time to live (in minutes) setting of the cluster which will execute data flow job.
	TimeToLive *int `pulumi:"timeToLive"`
}

// Data flow properties for managed integration runtime.
type IntegrationRuntimeDataFlowPropertiesResponse struct {
	// Cluster will not be recycled and it will be used in next data flow activity run until TTL (time to live) is reached if this is set as false. Default is true.
	Cleanup *bool `pulumi:"cleanup"`
	// Compute type of the cluster which will execute data flow job.
	ComputeType *string `pulumi:"computeType"`
	// Core count of the cluster which will execute data flow job. Supported values are: 8, 16, 32, 48, 80, 144 and 272.
	CoreCount *int `pulumi:"coreCount"`
	// Time to live (in minutes) setting of the cluster which will execute data flow job.
	TimeToLive *int `pulumi:"timeToLive"`
}

// Data proxy properties for a managed dedicated integration runtime.
type IntegrationRuntimeDataProxyProperties struct {
	// The self-hosted integration runtime reference.
	ConnectVia *EntityReference `pulumi:"connectVia"`
	// The path to contain the staged data in the Blob storage.
	Path *string `pulumi:"path"`
	// The staging linked service reference.
	StagingLinkedService *EntityReference `pulumi:"stagingLinkedService"`
}

// Data proxy properties for a managed dedicated integration runtime.
type IntegrationRuntimeDataProxyPropertiesResponse struct {
	// The self-hosted integration runtime reference.
	ConnectVia *EntityReferenceResponse `pulumi:"connectVia"`
	// The path to contain the staged data in the Blob storage.
	Path *string `pulumi:"path"`
	// The staging linked service reference.
	StagingLinkedService *EntityReferenceResponse `pulumi:"stagingLinkedService"`
}

// Integration runtime reference type.
type IntegrationRuntimeReference struct {
	// Arguments for integration runtime.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Reference integration runtime name.
	ReferenceName string `pulumi:"referenceName"`
	// Type of integration runtime.
	Type string `pulumi:"type"`
}

// Integration runtime reference type.
type IntegrationRuntimeReferenceResponse struct {
	// Arguments for integration runtime.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Reference integration runtime name.
	ReferenceName string `pulumi:"referenceName"`
	// Type of integration runtime.
	Type string `pulumi:"type"`
}

// Catalog information for managed dedicated integration runtime.
type IntegrationRuntimeSsisCatalogInfo struct {
	// The password of the administrator user account of the catalog database.
	CatalogAdminPassword *SecureString `pulumi:"catalogAdminPassword"`
	// The administrator user name of catalog database.
	CatalogAdminUserName *string `pulumi:"catalogAdminUserName"`
	// The pricing tier for the catalog database. The valid values could be found in https://azure.microsoft.com/en-us/pricing/details/sql-database/
	CatalogPricingTier *string `pulumi:"catalogPricingTier"`
	// The catalog database server URL.
	CatalogServerEndpoint *string `pulumi:"catalogServerEndpoint"`
	// The dual standby pair name of Azure-SSIS Integration Runtimes to support SSISDB failover.
	DualStandbyPairName *string `pulumi:"dualStandbyPairName"`
}

// Catalog information for managed dedicated integration runtime.
type IntegrationRuntimeSsisCatalogInfoResponse struct {
	// The password of the administrator user account of the catalog database.
	CatalogAdminPassword *SecureStringResponse `pulumi:"catalogAdminPassword"`
	// The administrator user name of catalog database.
	CatalogAdminUserName *string `pulumi:"catalogAdminUserName"`
	// The pricing tier for the catalog database. The valid values could be found in https://azure.microsoft.com/en-us/pricing/details/sql-database/
	CatalogPricingTier *string `pulumi:"catalogPricingTier"`
	// The catalog database server URL.
	CatalogServerEndpoint *string `pulumi:"catalogServerEndpoint"`
	// The dual standby pair name of Azure-SSIS Integration Runtimes to support SSISDB failover.
	DualStandbyPairName *string `pulumi:"dualStandbyPairName"`
}

// SSIS properties for managed integration runtime.
type IntegrationRuntimeSsisProperties struct {
	// Catalog information for managed dedicated integration runtime.
	CatalogInfo *IntegrationRuntimeSsisCatalogInfo `pulumi:"catalogInfo"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Custom setup script properties for a managed dedicated integration runtime.
	CustomSetupScriptProperties *IntegrationRuntimeCustomSetupScriptProperties `pulumi:"customSetupScriptProperties"`
	// Data proxy properties for a managed dedicated integration runtime.
	DataProxyProperties *IntegrationRuntimeDataProxyProperties `pulumi:"dataProxyProperties"`
	// The edition for the SSIS Integration Runtime
	Edition *string `pulumi:"edition"`
	// Custom setup without script properties for a SSIS integration runtime.
	ExpressCustomSetupProperties []interface{} `pulumi:"expressCustomSetupProperties"`
	// License type for bringing your own license scenario.
	LicenseType *string `pulumi:"licenseType"`
	// Package stores for the SSIS Integration Runtime.
	PackageStores []PackageStore `pulumi:"packageStores"`
}

// SSIS properties for managed integration runtime.
type IntegrationRuntimeSsisPropertiesResponse struct {
	// Catalog information for managed dedicated integration runtime.
	CatalogInfo *IntegrationRuntimeSsisCatalogInfoResponse `pulumi:"catalogInfo"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Custom setup script properties for a managed dedicated integration runtime.
	CustomSetupScriptProperties *IntegrationRuntimeCustomSetupScriptPropertiesResponse `pulumi:"customSetupScriptProperties"`
	// Data proxy properties for a managed dedicated integration runtime.
	DataProxyProperties *IntegrationRuntimeDataProxyPropertiesResponse `pulumi:"dataProxyProperties"`
	// The edition for the SSIS Integration Runtime
	Edition *string `pulumi:"edition"`
	// Custom setup without script properties for a SSIS integration runtime.
	ExpressCustomSetupProperties []interface{} `pulumi:"expressCustomSetupProperties"`
	// License type for bringing your own license scenario.
	LicenseType *string `pulumi:"licenseType"`
	// Package stores for the SSIS Integration Runtime.
	PackageStores []PackageStoreResponse `pulumi:"packageStores"`
}

// VNet properties for managed integration runtime.
type IntegrationRuntimeVNetProperties struct {
	// Resource IDs of the public IP addresses that this integration runtime will use.
	PublicIPs []string `pulumi:"publicIPs"`
	// The name of the subnet this integration runtime will join.
	Subnet *string `pulumi:"subnet"`
	// The ID of subnet, to which this Azure-SSIS integration runtime will be joined.
	SubnetId *string `pulumi:"subnetId"`
	// The ID of the VNet that this integration runtime will join.
	VNetId *string `pulumi:"vNetId"`
}

// VNet properties for managed integration runtime.
type IntegrationRuntimeVNetPropertiesResponse struct {
	// Resource IDs of the public IP addresses that this integration runtime will use.
	PublicIPs []string `pulumi:"publicIPs"`
	// The name of the subnet this integration runtime will join.
	Subnet *string `pulumi:"subnet"`
	// The ID of subnet, to which this Azure-SSIS integration runtime will be joined.
	SubnetId *string `pulumi:"subnetId"`
	// The ID of the VNet that this integration runtime will join.
	VNetId *string `pulumi:"vNetId"`
}

// Jira Service linked service.
type JiraLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The IP address or host name of the Jira service. (e.g. jira.example.com)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the username field.
	Password interface{} `pulumi:"password"`
	// The TCP port that the Jira server uses to listen for client connections. The default value is 443 if connecting through HTTPS, or 8080 if connecting through HTTP.
	Port interface{} `pulumi:"port"`
	// Type of linked service.
	// Expected value is 'Jira'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
	// The user name that you use to access Jira Service.
	Username interface{} `pulumi:"username"`
}

// Jira Service linked service.
type JiraLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The IP address or host name of the Jira service. (e.g. jira.example.com)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the username field.
	Password interface{} `pulumi:"password"`
	// The TCP port that the Jira server uses to listen for client connections. The default value is 443 if connecting through HTTPS, or 8080 if connecting through HTTP.
	Port interface{} `pulumi:"port"`
	// Type of linked service.
	// Expected value is 'Jira'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
	// The user name that you use to access Jira Service.
	Username interface{} `pulumi:"username"`
}

// Jira Service dataset.
type JiraObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'JiraObject'.
	Type string `pulumi:"type"`
}

// Jira Service dataset.
type JiraObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'JiraObject'.
	Type string `pulumi:"type"`
}

// A copy activity Jira Service source.
type JiraSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'JiraSource'.
	Type string `pulumi:"type"`
}

// A copy activity Jira Service source.
type JiraSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'JiraSource'.
	Type string `pulumi:"type"`
}

// Json dataset.
type JsonDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the json dataset.
	Compression *DatasetCompression `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The code page name of the preferred encoding. If not specified, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
	EncodingName interface{} `pulumi:"encodingName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The location of the json data storage.
	Location interface{} `pulumi:"location"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Json'.
	Type string `pulumi:"type"`
}

// Json dataset.
type JsonDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the json dataset.
	Compression *DatasetCompressionResponse `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The code page name of the preferred encoding. If not specified, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
	EncodingName interface{} `pulumi:"encodingName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The location of the json data storage.
	Location interface{} `pulumi:"location"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Json'.
	Type string `pulumi:"type"`
}

// The data stored in JSON format.
type JsonFormat struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer interface{} `pulumi:"deserializer"`
	// The code page name of the preferred encoding. If not provided, the default value is 'utf-8', unless the byte order mark (BOM) denotes another Unicode encoding. The full list of supported values can be found in the 'Name' column of the table of encodings in the following reference: https://go.microsoft.com/fwlink/?linkid=861078. Type: string (or Expression with resultType string).
	EncodingName interface{} `pulumi:"encodingName"`
	// File pattern of JSON. To be more specific, the way of separating a collection of JSON objects. The default value is 'setOfObjects'. It is case-sensitive.
	FilePattern interface{} `pulumi:"filePattern"`
	// The JSONPath of the JSON array element to be flattened. Example: "$.ArrayPath". Type: string (or Expression with resultType string).
	JsonNodeReference interface{} `pulumi:"jsonNodeReference"`
	// The JSONPath definition for each column mapping with a customized column name to extract data from JSON file. For fields under root object, start with "$"; for fields inside the array chosen by jsonNodeReference property, start from the array element. Example: {"Column1": "$.Column1Path", "Column2": "Column2PathInArray"}. Type: object (or Expression with resultType object).
	JsonPathDefinition interface{} `pulumi:"jsonPathDefinition"`
	// The character used to separate nesting levels. Default value is '.' (dot). Type: string (or Expression with resultType string).
	NestingSeparator interface{} `pulumi:"nestingSeparator"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer interface{} `pulumi:"serializer"`
	// Type of dataset storage format.
	// Expected value is 'JsonFormat'.
	Type string `pulumi:"type"`
}

// The data stored in JSON format.
type JsonFormatResponse struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer interface{} `pulumi:"deserializer"`
	// The code page name of the preferred encoding. If not provided, the default value is 'utf-8', unless the byte order mark (BOM) denotes another Unicode encoding. The full list of supported values can be found in the 'Name' column of the table of encodings in the following reference: https://go.microsoft.com/fwlink/?linkid=861078. Type: string (or Expression with resultType string).
	EncodingName interface{} `pulumi:"encodingName"`
	// File pattern of JSON. To be more specific, the way of separating a collection of JSON objects. The default value is 'setOfObjects'. It is case-sensitive.
	FilePattern interface{} `pulumi:"filePattern"`
	// The JSONPath of the JSON array element to be flattened. Example: "$.ArrayPath". Type: string (or Expression with resultType string).
	JsonNodeReference interface{} `pulumi:"jsonNodeReference"`
	// The JSONPath definition for each column mapping with a customized column name to extract data from JSON file. For fields under root object, start with "$"; for fields inside the array chosen by jsonNodeReference property, start from the array element. Example: {"Column1": "$.Column1Path", "Column2": "Column2PathInArray"}. Type: object (or Expression with resultType object).
	JsonPathDefinition interface{} `pulumi:"jsonPathDefinition"`
	// The character used to separate nesting levels. Default value is '.' (dot). Type: string (or Expression with resultType string).
	NestingSeparator interface{} `pulumi:"nestingSeparator"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer interface{} `pulumi:"serializer"`
	// Type of dataset storage format.
	// Expected value is 'JsonFormat'.
	Type string `pulumi:"type"`
}

// Json read settings.
type JsonReadSettings struct {
	// Compression settings.
	CompressionProperties interface{} `pulumi:"compressionProperties"`
	// The read setting type.
	// Expected value is 'JsonReadSettings'.
	Type string `pulumi:"type"`
}

// Json read settings.
type JsonReadSettingsResponse struct {
	// Compression settings.
	CompressionProperties interface{} `pulumi:"compressionProperties"`
	// The read setting type.
	// Expected value is 'JsonReadSettings'.
	Type string `pulumi:"type"`
}

// A copy activity Json sink.
type JsonSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Json format settings.
	FormatSettings *JsonWriteSettings `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Json store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy sink type.
	// Expected value is 'JsonSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Json sink.
type JsonSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Json format settings.
	FormatSettings *JsonWriteSettingsResponse `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Json store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy sink type.
	// Expected value is 'JsonSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Json source.
type JsonSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Json format settings.
	FormatSettings *JsonReadSettings `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Json store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'JsonSource'.
	Type string `pulumi:"type"`
}

// A copy activity Json source.
type JsonSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Json format settings.
	FormatSettings *JsonReadSettingsResponse `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Json store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'JsonSource'.
	Type string `pulumi:"type"`
}

// Json write settings.
type JsonWriteSettings struct {
	// File pattern of JSON. This setting controls the way a collection of JSON objects will be treated. The default value is 'setOfObjects'. It is case-sensitive.
	FilePattern interface{} `pulumi:"filePattern"`
	// The write setting type.
	// Expected value is 'JsonWriteSettings'.
	Type string `pulumi:"type"`
}

// Json write settings.
type JsonWriteSettingsResponse struct {
	// File pattern of JSON. This setting controls the way a collection of JSON objects will be treated. The default value is 'setOfObjects'. It is case-sensitive.
	FilePattern interface{} `pulumi:"filePattern"`
	// The write setting type.
	// Expected value is 'JsonWriteSettings'.
	Type string `pulumi:"type"`
}

// The key authorization type integration runtime.
type LinkedIntegrationRuntimeKeyAuthorization struct {
	// The authorization type for integration runtime sharing.
	// Expected value is 'Key'.
	AuthorizationType string `pulumi:"authorizationType"`
	// The key used for authorization.
	Key SecureString `pulumi:"key"`
}

// The key authorization type integration runtime.
type LinkedIntegrationRuntimeKeyAuthorizationResponse struct {
	// The authorization type for integration runtime sharing.
	// Expected value is 'Key'.
	AuthorizationType string `pulumi:"authorizationType"`
	// The key used for authorization.
	Key SecureStringResponse `pulumi:"key"`
}

// The role based access control (RBAC) authorization type integration runtime.
type LinkedIntegrationRuntimeRbacAuthorization struct {
	// The authorization type for integration runtime sharing.
	// Expected value is 'RBAC'.
	AuthorizationType string `pulumi:"authorizationType"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// The resource identifier of the integration runtime to be shared.
	ResourceId string `pulumi:"resourceId"`
}

// The role based access control (RBAC) authorization type integration runtime.
type LinkedIntegrationRuntimeRbacAuthorizationResponse struct {
	// The authorization type for integration runtime sharing.
	// Expected value is 'RBAC'.
	AuthorizationType string `pulumi:"authorizationType"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// The resource identifier of the integration runtime to be shared.
	ResourceId string `pulumi:"resourceId"`
}

// The linked integration runtime information.
type LinkedIntegrationRuntimeResponse struct {
	// The creating time of the linked integration runtime.
	CreateTime string `pulumi:"createTime"`
	// The location of the data factory for which the linked integration runtime belong to.
	DataFactoryLocation string `pulumi:"dataFactoryLocation"`
	// The name of the data factory for which the linked integration runtime belong to.
	DataFactoryName string `pulumi:"dataFactoryName"`
	// The name of the linked integration runtime.
	Name string `pulumi:"name"`
	// The subscription ID for which the linked integration runtime belong to.
	SubscriptionId string `pulumi:"subscriptionId"`
}

// Linked service reference type.
type LinkedServiceReference struct {
	// Arguments for LinkedService.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Reference LinkedService name.
	ReferenceName string `pulumi:"referenceName"`
	// Linked service reference type.
	Type string `pulumi:"type"`
}

// Linked service reference type.
type LinkedServiceReferenceResponse struct {
	// Arguments for LinkedService.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Reference LinkedService name.
	ReferenceName string `pulumi:"referenceName"`
	// Linked service reference type.
	Type string `pulumi:"type"`
}

// Log location settings.
type LogLocationSettings struct {
	// Log storage linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The path to storage for storing detailed logs of activity execution. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
}

// Log location settings.
type LogLocationSettingsResponse struct {
	// Log storage linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The path to storage for storing detailed logs of activity execution. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
}

// Log settings.
type LogSettings struct {
	// Specifies settings for copy activity log.
	CopyActivityLogSettings *CopyActivityLogSettings `pulumi:"copyActivityLogSettings"`
	// Specifies whether to enable copy activity log. Type: boolean (or Expression with resultType boolean).
	EnableCopyActivityLog interface{} `pulumi:"enableCopyActivityLog"`
	// Log location settings customer needs to provide when enabling log.
	LogLocationSettings LogLocationSettings `pulumi:"logLocationSettings"`
}

// Log settings.
type LogSettingsResponse struct {
	// Specifies settings for copy activity log.
	CopyActivityLogSettings *CopyActivityLogSettingsResponse `pulumi:"copyActivityLogSettings"`
	// Specifies whether to enable copy activity log. Type: boolean (or Expression with resultType boolean).
	EnableCopyActivityLog interface{} `pulumi:"enableCopyActivityLog"`
	// Log location settings customer needs to provide when enabling log.
	LogLocationSettings LogLocationSettingsResponse `pulumi:"logLocationSettings"`
}

// (Deprecated. Please use LogSettings) Log storage settings.
type LogStorageSettings struct {
	// Specifies whether to enable reliable logging. Type: boolean (or Expression with resultType boolean).
	EnableReliableLogging interface{} `pulumi:"enableReliableLogging"`
	// Log storage linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Gets or sets the log level, support: Info, Warning. Type: string (or Expression with resultType string).
	LogLevel interface{} `pulumi:"logLevel"`
	// The path to storage for storing detailed logs of activity execution. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
}

// (Deprecated. Please use LogSettings) Log storage settings.
type LogStorageSettingsResponse struct {
	// Specifies whether to enable reliable logging. Type: boolean (or Expression with resultType boolean).
	EnableReliableLogging interface{} `pulumi:"enableReliableLogging"`
	// Log storage linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Gets or sets the log level, support: Info, Warning. Type: string (or Expression with resultType string).
	LogLevel interface{} `pulumi:"logLevel"`
	// The path to storage for storing detailed logs of activity execution. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
}

// Lookup activity.
type LookupActivity struct {
	// Lookup activity dataset reference.
	Dataset DatasetReference `pulumi:"dataset"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Whether to return first row or all rows. Default value is true. Type: boolean (or Expression with resultType boolean).
	FirstRowOnly interface{} `pulumi:"firstRowOnly"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Dataset-specific source properties, same as copy activity source.
	Source interface{} `pulumi:"source"`
	// Type of activity.
	// Expected value is 'Lookup'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// Lookup activity.
type LookupActivityResponse struct {
	// Lookup activity dataset reference.
	Dataset DatasetReferenceResponse `pulumi:"dataset"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Whether to return first row or all rows. Default value is true. Type: boolean (or Expression with resultType boolean).
	FirstRowOnly interface{} `pulumi:"firstRowOnly"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Dataset-specific source properties, same as copy activity source.
	Source interface{} `pulumi:"source"`
	// Type of activity.
	// Expected value is 'Lookup'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Magento server linked service.
type MagentoLinkedService struct {
	// The access token from Magento.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The URL of the Magento instance. (i.e. 192.168.222.110/magento3)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Magento'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Magento server linked service.
type MagentoLinkedServiceResponse struct {
	// The access token from Magento.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The URL of the Magento instance. (i.e. 192.168.222.110/magento3)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Magento'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Magento server dataset.
type MagentoObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'MagentoObject'.
	Type string `pulumi:"type"`
}

// Magento server dataset.
type MagentoObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'MagentoObject'.
	Type string `pulumi:"type"`
}

// A copy activity Magento server source.
type MagentoSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MagentoSource'.
	Type string `pulumi:"type"`
}

// A copy activity Magento server source.
type MagentoSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MagentoSource'.
	Type string `pulumi:"type"`
}

// Managed identity credential.
type ManagedIdentityCredential struct {
	// List of tags that can be used for describing the Credential.
	Annotations []interface{} `pulumi:"annotations"`
	// Credential description.
	Description *string `pulumi:"description"`
	// The resource id of user assigned managed identity
	ResourceId *string `pulumi:"resourceId"`
	// Type of credential.
	// Expected value is 'ManagedIdentity'.
	Type string `pulumi:"type"`
}

// ManagedIdentityCredentialInput is an input type that accepts ManagedIdentityCredentialArgs and ManagedIdentityCredentialOutput values.
// You can construct a concrete instance of `ManagedIdentityCredentialInput` via:
//
//	ManagedIdentityCredentialArgs{...}
type ManagedIdentityCredentialInput interface {
	pulumi.Input

	ToManagedIdentityCredentialOutput() ManagedIdentityCredentialOutput
	ToManagedIdentityCredentialOutputWithContext(context.Context) ManagedIdentityCredentialOutput
}

// Managed identity credential.
type ManagedIdentityCredentialArgs struct {
	// List of tags that can be used for describing the Credential.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Credential description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The resource id of user assigned managed identity
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
	// Type of credential.
	// Expected value is 'ManagedIdentity'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ManagedIdentityCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentityCredential)(nil)).Elem()
}

func (i ManagedIdentityCredentialArgs) ToManagedIdentityCredentialOutput() ManagedIdentityCredentialOutput {
	return i.ToManagedIdentityCredentialOutputWithContext(context.Background())
}

func (i ManagedIdentityCredentialArgs) ToManagedIdentityCredentialOutputWithContext(ctx context.Context) ManagedIdentityCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentityCredentialOutput)
}

// Managed identity credential.
type ManagedIdentityCredentialOutput struct{ *pulumi.OutputState }

func (ManagedIdentityCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentityCredential)(nil)).Elem()
}

func (o ManagedIdentityCredentialOutput) ToManagedIdentityCredentialOutput() ManagedIdentityCredentialOutput {
	return o
}

func (o ManagedIdentityCredentialOutput) ToManagedIdentityCredentialOutputWithContext(ctx context.Context) ManagedIdentityCredentialOutput {
	return o
}

// List of tags that can be used for describing the Credential.
func (o ManagedIdentityCredentialOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ManagedIdentityCredential) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Credential description.
func (o ManagedIdentityCredentialOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentityCredential) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The resource id of user assigned managed identity
func (o ManagedIdentityCredentialOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentityCredential) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// Type of credential.
// Expected value is 'ManagedIdentity'.
func (o ManagedIdentityCredentialOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentityCredential) string { return v.Type }).(pulumi.StringOutput)
}

// Managed identity credential.
type ManagedIdentityCredentialResponse struct {
	// List of tags that can be used for describing the Credential.
	Annotations []interface{} `pulumi:"annotations"`
	// Credential description.
	Description *string `pulumi:"description"`
	// The resource id of user assigned managed identity
	ResourceId *string `pulumi:"resourceId"`
	// Type of credential.
	// Expected value is 'ManagedIdentity'.
	Type string `pulumi:"type"`
}

// Managed identity credential.
type ManagedIdentityCredentialResponseOutput struct{ *pulumi.OutputState }

func (ManagedIdentityCredentialResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentityCredentialResponse)(nil)).Elem()
}

func (o ManagedIdentityCredentialResponseOutput) ToManagedIdentityCredentialResponseOutput() ManagedIdentityCredentialResponseOutput {
	return o
}

func (o ManagedIdentityCredentialResponseOutput) ToManagedIdentityCredentialResponseOutputWithContext(ctx context.Context) ManagedIdentityCredentialResponseOutput {
	return o
}

// List of tags that can be used for describing the Credential.
func (o ManagedIdentityCredentialResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ManagedIdentityCredentialResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Credential description.
func (o ManagedIdentityCredentialResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentityCredentialResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The resource id of user assigned managed identity
func (o ManagedIdentityCredentialResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentityCredentialResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// Type of credential.
// Expected value is 'ManagedIdentity'.
func (o ManagedIdentityCredentialResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentityCredentialResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Managed integration runtime, including managed elastic and managed dedicated integration runtimes.
type ManagedIntegrationRuntime struct {
	// The compute resource for managed integration runtime.
	ComputeProperties *IntegrationRuntimeComputeProperties `pulumi:"computeProperties"`
	// The name of virtual network to which Azure-SSIS integration runtime will join
	CustomerVirtualNetwork *IntegrationRuntimeCustomerVirtualNetwork `pulumi:"customerVirtualNetwork"`
	// Integration runtime description.
	Description *string `pulumi:"description"`
	// Managed Virtual Network reference.
	ManagedVirtualNetwork *ManagedVirtualNetworkReference `pulumi:"managedVirtualNetwork"`
	// SSIS properties for managed integration runtime.
	SsisProperties *IntegrationRuntimeSsisProperties `pulumi:"ssisProperties"`
	// The type of integration runtime.
	// Expected value is 'Managed'.
	Type string `pulumi:"type"`
}

// Error definition for managed integration runtime.
type ManagedIntegrationRuntimeErrorResponse struct {
	// Error code.
	Code string `pulumi:"code"`
	// Error message.
	Message string `pulumi:"message"`
	// Managed integration runtime error parameters.
	Parameters []string `pulumi:"parameters"`
	// The time when the error occurred.
	Time string `pulumi:"time"`
}

// Properties of integration runtime node.
type ManagedIntegrationRuntimeNodeResponse struct {
	// The errors that occurred on this integration runtime node.
	Errors []ManagedIntegrationRuntimeErrorResponse `pulumi:"errors"`
	// The managed integration runtime node id.
	NodeId string `pulumi:"nodeId"`
	// The managed integration runtime node status.
	Status string `pulumi:"status"`
}

// Properties of managed integration runtime operation result.
type ManagedIntegrationRuntimeOperationResultResponse struct {
	// The activity id for the operation request.
	ActivityId string `pulumi:"activityId"`
	// The error code.
	ErrorCode string `pulumi:"errorCode"`
	// Managed integration runtime error parameters.
	Parameters []string `pulumi:"parameters"`
	// The operation result.
	Result string `pulumi:"result"`
	// The start time of the operation.
	StartTime string `pulumi:"startTime"`
	// The operation type. Could be start or stop.
	Type string `pulumi:"type"`
}

// Managed integration runtime, including managed elastic and managed dedicated integration runtimes.
type ManagedIntegrationRuntimeResponse struct {
	// The compute resource for managed integration runtime.
	ComputeProperties *IntegrationRuntimeComputePropertiesResponse `pulumi:"computeProperties"`
	// The name of virtual network to which Azure-SSIS integration runtime will join
	CustomerVirtualNetwork *IntegrationRuntimeCustomerVirtualNetworkResponse `pulumi:"customerVirtualNetwork"`
	// Integration runtime description.
	Description *string `pulumi:"description"`
	// Managed Virtual Network reference.
	ManagedVirtualNetwork *ManagedVirtualNetworkReferenceResponse `pulumi:"managedVirtualNetwork"`
	// SSIS properties for managed integration runtime.
	SsisProperties *IntegrationRuntimeSsisPropertiesResponse `pulumi:"ssisProperties"`
	// Integration runtime state, only valid for managed dedicated integration runtime.
	State string `pulumi:"state"`
	// The type of integration runtime.
	// Expected value is 'Managed'.
	Type string `pulumi:"type"`
}

// Managed integration runtime status.
type ManagedIntegrationRuntimeStatusResponse struct {
	// The time at which the integration runtime was created, in ISO8601 format.
	CreateTime string `pulumi:"createTime"`
	// The data factory name which the integration runtime belong to.
	DataFactoryName string `pulumi:"dataFactoryName"`
	// The last operation result that occurred on this integration runtime.
	LastOperation ManagedIntegrationRuntimeOperationResultResponse `pulumi:"lastOperation"`
	// The list of nodes for managed integration runtime.
	Nodes []ManagedIntegrationRuntimeNodeResponse `pulumi:"nodes"`
	// The errors that occurred on this integration runtime.
	OtherErrors []ManagedIntegrationRuntimeErrorResponse `pulumi:"otherErrors"`
	// The state of integration runtime.
	State string `pulumi:"state"`
	// The type of integration runtime.
	// Expected value is 'Managed'.
	Type string `pulumi:"type"`
}

// Properties of a managed private endpoint
type ManagedPrivateEndpointType struct {
	// Fully qualified domain names
	Fqdns []string `pulumi:"fqdns"`
	// The groupId to which the managed private endpoint is created
	GroupId *string `pulumi:"groupId"`
	// The ARM resource ID of the resource to which the managed private endpoint is created
	PrivateLinkResourceId *string `pulumi:"privateLinkResourceId"`
}

// ManagedPrivateEndpointTypeInput is an input type that accepts ManagedPrivateEndpointTypeArgs and ManagedPrivateEndpointTypeOutput values.
// You can construct a concrete instance of `ManagedPrivateEndpointTypeInput` via:
//
//	ManagedPrivateEndpointTypeArgs{...}
type ManagedPrivateEndpointTypeInput interface {
	pulumi.Input

	ToManagedPrivateEndpointTypeOutput() ManagedPrivateEndpointTypeOutput
	ToManagedPrivateEndpointTypeOutputWithContext(context.Context) ManagedPrivateEndpointTypeOutput
}

// Properties of a managed private endpoint
type ManagedPrivateEndpointTypeArgs struct {
	// Fully qualified domain names
	Fqdns pulumi.StringArrayInput `pulumi:"fqdns"`
	// The groupId to which the managed private endpoint is created
	GroupId pulumi.StringPtrInput `pulumi:"groupId"`
	// The ARM resource ID of the resource to which the managed private endpoint is created
	PrivateLinkResourceId pulumi.StringPtrInput `pulumi:"privateLinkResourceId"`
}

func (ManagedPrivateEndpointTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedPrivateEndpointType)(nil)).Elem()
}

func (i ManagedPrivateEndpointTypeArgs) ToManagedPrivateEndpointTypeOutput() ManagedPrivateEndpointTypeOutput {
	return i.ToManagedPrivateEndpointTypeOutputWithContext(context.Background())
}

func (i ManagedPrivateEndpointTypeArgs) ToManagedPrivateEndpointTypeOutputWithContext(ctx context.Context) ManagedPrivateEndpointTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedPrivateEndpointTypeOutput)
}

// Properties of a managed private endpoint
type ManagedPrivateEndpointTypeOutput struct{ *pulumi.OutputState }

func (ManagedPrivateEndpointTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedPrivateEndpointType)(nil)).Elem()
}

func (o ManagedPrivateEndpointTypeOutput) ToManagedPrivateEndpointTypeOutput() ManagedPrivateEndpointTypeOutput {
	return o
}

func (o ManagedPrivateEndpointTypeOutput) ToManagedPrivateEndpointTypeOutputWithContext(ctx context.Context) ManagedPrivateEndpointTypeOutput {
	return o
}

// Fully qualified domain names
func (o ManagedPrivateEndpointTypeOutput) Fqdns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointType) []string { return v.Fqdns }).(pulumi.StringArrayOutput)
}

// The groupId to which the managed private endpoint is created
func (o ManagedPrivateEndpointTypeOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointType) *string { return v.GroupId }).(pulumi.StringPtrOutput)
}

// The ARM resource ID of the resource to which the managed private endpoint is created
func (o ManagedPrivateEndpointTypeOutput) PrivateLinkResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointType) *string { return v.PrivateLinkResourceId }).(pulumi.StringPtrOutput)
}

// Properties of a managed private endpoint
type ManagedPrivateEndpointResponse struct {
	// The managed private endpoint connection state
	ConnectionState *ConnectionStatePropertiesResponse `pulumi:"connectionState"`
	// Fully qualified domain names
	Fqdns []string `pulumi:"fqdns"`
	// The groupId to which the managed private endpoint is created
	GroupId *string `pulumi:"groupId"`
	// Denotes whether the managed private endpoint is reserved
	IsReserved bool `pulumi:"isReserved"`
	// The ARM resource ID of the resource to which the managed private endpoint is created
	PrivateLinkResourceId *string `pulumi:"privateLinkResourceId"`
	// The managed private endpoint provisioning state
	ProvisioningState string `pulumi:"provisioningState"`
}

// Properties of a managed private endpoint
type ManagedPrivateEndpointResponseOutput struct{ *pulumi.OutputState }

func (ManagedPrivateEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedPrivateEndpointResponse)(nil)).Elem()
}

func (o ManagedPrivateEndpointResponseOutput) ToManagedPrivateEndpointResponseOutput() ManagedPrivateEndpointResponseOutput {
	return o
}

func (o ManagedPrivateEndpointResponseOutput) ToManagedPrivateEndpointResponseOutputWithContext(ctx context.Context) ManagedPrivateEndpointResponseOutput {
	return o
}

// The managed private endpoint connection state
func (o ManagedPrivateEndpointResponseOutput) ConnectionState() ConnectionStatePropertiesResponsePtrOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointResponse) *ConnectionStatePropertiesResponse { return v.ConnectionState }).(ConnectionStatePropertiesResponsePtrOutput)
}

// Fully qualified domain names
func (o ManagedPrivateEndpointResponseOutput) Fqdns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointResponse) []string { return v.Fqdns }).(pulumi.StringArrayOutput)
}

// The groupId to which the managed private endpoint is created
func (o ManagedPrivateEndpointResponseOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointResponse) *string { return v.GroupId }).(pulumi.StringPtrOutput)
}

// Denotes whether the managed private endpoint is reserved
func (o ManagedPrivateEndpointResponseOutput) IsReserved() pulumi.BoolOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointResponse) bool { return v.IsReserved }).(pulumi.BoolOutput)
}

// The ARM resource ID of the resource to which the managed private endpoint is created
func (o ManagedPrivateEndpointResponseOutput) PrivateLinkResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointResponse) *string { return v.PrivateLinkResourceId }).(pulumi.StringPtrOutput)
}

// The managed private endpoint provisioning state
func (o ManagedPrivateEndpointResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Managed Virtual Network reference type.
type ManagedVirtualNetworkReference struct {
	// Reference ManagedVirtualNetwork name.
	ReferenceName string `pulumi:"referenceName"`
	// Managed Virtual Network reference type.
	Type string `pulumi:"type"`
}

// Managed Virtual Network reference type.
type ManagedVirtualNetworkReferenceResponse struct {
	// Reference ManagedVirtualNetwork name.
	ReferenceName string `pulumi:"referenceName"`
	// Managed Virtual Network reference type.
	Type string `pulumi:"type"`
}

// Mapping data flow.
type MappingDataFlow struct {
	// List of tags that can be used for describing the data flow.
	Annotations []interface{} `pulumi:"annotations"`
	// The description of the data flow.
	Description *string `pulumi:"description"`
	// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
	Folder *DataFlowFolder `pulumi:"folder"`
	// DataFlow script.
	Script *string `pulumi:"script"`
	// Data flow script lines.
	ScriptLines []string `pulumi:"scriptLines"`
	// List of sinks in data flow.
	Sinks []DataFlowSink `pulumi:"sinks"`
	// List of sources in data flow.
	Sources []DataFlowSource `pulumi:"sources"`
	// List of transformations in data flow.
	Transformations []Transformation `pulumi:"transformations"`
	// Type of data flow.
	// Expected value is 'MappingDataFlow'.
	Type string `pulumi:"type"`
}

// Mapping data flow.
type MappingDataFlowResponse struct {
	// List of tags that can be used for describing the data flow.
	Annotations []interface{} `pulumi:"annotations"`
	// The description of the data flow.
	Description *string `pulumi:"description"`
	// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
	Folder *DataFlowResponseFolder `pulumi:"folder"`
	// DataFlow script.
	Script *string `pulumi:"script"`
	// Data flow script lines.
	ScriptLines []string `pulumi:"scriptLines"`
	// List of sinks in data flow.
	Sinks []DataFlowSinkResponse `pulumi:"sinks"`
	// List of sources in data flow.
	Sources []DataFlowSourceResponse `pulumi:"sources"`
	// List of transformations in data flow.
	Transformations []TransformationResponse `pulumi:"transformations"`
	// Type of data flow.
	// Expected value is 'MappingDataFlow'.
	Type string `pulumi:"type"`
}

// MariaDB server linked service.
type MariaDBLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReference `pulumi:"pwd"`
	// Type of linked service.
	// Expected value is 'MariaDB'.
	Type string `pulumi:"type"`
}

// MariaDB server linked service.
type MariaDBLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReferenceResponse `pulumi:"pwd"`
	// Type of linked service.
	// Expected value is 'MariaDB'.
	Type string `pulumi:"type"`
}

// A copy activity MariaDB server source.
type MariaDBSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MariaDBSource'.
	Type string `pulumi:"type"`
}

// A copy activity MariaDB server source.
type MariaDBSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MariaDBSource'.
	Type string `pulumi:"type"`
}

// MariaDB server dataset.
type MariaDBTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'MariaDBTable'.
	Type string `pulumi:"type"`
}

// MariaDB server dataset.
type MariaDBTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'MariaDBTable'.
	Type string `pulumi:"type"`
}

// Marketo server linked service.
type MarketoLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client Id of your Marketo service.
	ClientId interface{} `pulumi:"clientId"`
	// The client secret of your Marketo service.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Marketo server. (i.e. 123-ABC-321.mktorest.com)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Marketo'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Marketo server linked service.
type MarketoLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client Id of your Marketo service.
	ClientId interface{} `pulumi:"clientId"`
	// The client secret of your Marketo service.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Marketo server. (i.e. 123-ABC-321.mktorest.com)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Marketo'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Marketo server dataset.
type MarketoObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'MarketoObject'.
	Type string `pulumi:"type"`
}

// Marketo server dataset.
type MarketoObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'MarketoObject'.
	Type string `pulumi:"type"`
}

// A copy activity Marketo server source.
type MarketoSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MarketoSource'.
	Type string `pulumi:"type"`
}

// A copy activity Marketo server source.
type MarketoSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MarketoSource'.
	Type string `pulumi:"type"`
}

// Specify the name and value of custom metadata item.
type MetadataItem struct {
	// Metadata item key name. Type: string (or Expression with resultType string).
	Name interface{} `pulumi:"name"`
	// Metadata item value. Type: string (or Expression with resultType string).
	Value interface{} `pulumi:"value"`
}

// Specify the name and value of custom metadata item.
type MetadataItemResponse struct {
	// Metadata item key name. Type: string (or Expression with resultType string).
	Name interface{} `pulumi:"name"`
	// Metadata item value. Type: string (or Expression with resultType string).
	Value interface{} `pulumi:"value"`
}

// Microsoft Access linked service.
type MicrosoftAccessLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication used to connect to the Microsoft Access as ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The access credential portion of the connection string specified in driver-specific property-value format.
	Credential interface{} `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'MicrosoftAccess'.
	Type string `pulumi:"type"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// Microsoft Access linked service.
type MicrosoftAccessLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication used to connect to the Microsoft Access as ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The access credential portion of the connection string specified in driver-specific property-value format.
	Credential interface{} `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'MicrosoftAccess'.
	Type string `pulumi:"type"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// A copy activity Microsoft Access sink.
type MicrosoftAccessSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to execute before starting the copy. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'MicrosoftAccessSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Microsoft Access sink.
type MicrosoftAccessSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to execute before starting the copy. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'MicrosoftAccessSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity source for Microsoft Access.
type MicrosoftAccessSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MicrosoftAccessSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for Microsoft Access.
type MicrosoftAccessSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MicrosoftAccessSource'.
	Type string `pulumi:"type"`
}

// The Microsoft Access table dataset.
type MicrosoftAccessTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The Microsoft Access table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'MicrosoftAccessTable'.
	Type string `pulumi:"type"`
}

// The Microsoft Access table dataset.
type MicrosoftAccessTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The Microsoft Access table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'MicrosoftAccessTable'.
	Type string `pulumi:"type"`
}

// The MongoDB Atlas database dataset.
type MongoDbAtlasCollectionDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The collection name of the MongoDB Atlas database. Type: string (or Expression with resultType string).
	Collection interface{} `pulumi:"collection"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'MongoDbAtlasCollection'.
	Type string `pulumi:"type"`
}

// The MongoDB Atlas database dataset.
type MongoDbAtlasCollectionDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The collection name of the MongoDB Atlas database. Type: string (or Expression with resultType string).
	Collection interface{} `pulumi:"collection"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'MongoDbAtlasCollection'.
	Type string `pulumi:"type"`
}

// Linked service for MongoDB Atlas data source.
type MongoDbAtlasLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The MongoDB Atlas connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The name of the MongoDB Atlas database that you want to access. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'MongoDbAtlas'.
	Type string `pulumi:"type"`
}

// Linked service for MongoDB Atlas data source.
type MongoDbAtlasLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The MongoDB Atlas connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The name of the MongoDB Atlas database that you want to access. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'MongoDbAtlas'.
	Type string `pulumi:"type"`
}

// A copy activity MongoDB Atlas sink.
type MongoDbAtlasSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'MongoDbAtlasSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Specifies whether the document with same key to be overwritten (upsert) rather than throw exception (insert). The default value is "insert". Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// A copy activity MongoDB Atlas sink.
type MongoDbAtlasSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'MongoDbAtlasSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Specifies whether the document with same key to be overwritten (upsert) rather than throw exception (insert). The default value is "insert". Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// A copy activity source for a MongoDB Atlas database.
type MongoDbAtlasSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// Specifies the number of documents to return in each batch of the response from MongoDB Atlas instance. In most cases, modifying the batch size will not affect the user or the application. This property's main purpose is to avoid hit the limitation of response size. Type: integer (or Expression with resultType integer).
	BatchSize interface{} `pulumi:"batchSize"`
	// Cursor methods for Mongodb query
	CursorMethods *MongoDbCursorMethodsProperties `pulumi:"cursorMethods"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies selection filter using query operators. To return all documents in a collection, omit this parameter or pass an empty document ({}). Type: string (or Expression with resultType string).
	Filter interface{} `pulumi:"filter"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MongoDbAtlasSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for a MongoDB Atlas database.
type MongoDbAtlasSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// Specifies the number of documents to return in each batch of the response from MongoDB Atlas instance. In most cases, modifying the batch size will not affect the user or the application. This property's main purpose is to avoid hit the limitation of response size. Type: integer (or Expression with resultType integer).
	BatchSize interface{} `pulumi:"batchSize"`
	// Cursor methods for Mongodb query
	CursorMethods *MongoDbCursorMethodsPropertiesResponse `pulumi:"cursorMethods"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies selection filter using query operators. To return all documents in a collection, omit this parameter or pass an empty document ({}). Type: string (or Expression with resultType string).
	Filter interface{} `pulumi:"filter"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MongoDbAtlasSource'.
	Type string `pulumi:"type"`
}

// The MongoDB database dataset.
type MongoDbCollectionDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The table name of the MongoDB database. Type: string (or Expression with resultType string).
	CollectionName interface{} `pulumi:"collectionName"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'MongoDbCollection'.
	Type string `pulumi:"type"`
}

// The MongoDB database dataset.
type MongoDbCollectionDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The table name of the MongoDB database. Type: string (or Expression with resultType string).
	CollectionName interface{} `pulumi:"collectionName"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'MongoDbCollection'.
	Type string `pulumi:"type"`
}

// Cursor methods for Mongodb query
type MongoDbCursorMethodsProperties struct {
	// Specifies the maximum number of documents the server returns. limit() is analogous to the LIMIT statement in a SQL database. Type: integer (or Expression with resultType integer).
	Limit interface{} `pulumi:"limit"`
	// Specifies the fields to return in the documents that match the query filter. To return all fields in the matching documents, omit this parameter. Type: string (or Expression with resultType string).
	Project interface{} `pulumi:"project"`
	// Specifies the how many documents skipped and where MongoDB begins returning results. This approach may be useful in implementing paginated results. Type: integer (or Expression with resultType integer).
	Skip interface{} `pulumi:"skip"`
	// Specifies the order in which the query returns matching documents. Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
	Sort interface{} `pulumi:"sort"`
}

// Cursor methods for Mongodb query
type MongoDbCursorMethodsPropertiesResponse struct {
	// Specifies the maximum number of documents the server returns. limit() is analogous to the LIMIT statement in a SQL database. Type: integer (or Expression with resultType integer).
	Limit interface{} `pulumi:"limit"`
	// Specifies the fields to return in the documents that match the query filter. To return all fields in the matching documents, omit this parameter. Type: string (or Expression with resultType string).
	Project interface{} `pulumi:"project"`
	// Specifies the how many documents skipped and where MongoDB begins returning results. This approach may be useful in implementing paginated results. Type: integer (or Expression with resultType integer).
	Skip interface{} `pulumi:"skip"`
	// Specifies the order in which the query returns matching documents. Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
	Sort interface{} `pulumi:"sort"`
}

// Linked service for MongoDb data source.
type MongoDbLinkedService struct {
	// Specifies whether to allow self-signed certificates from the server. The default value is false. Type: boolean (or Expression with resultType boolean).
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Database to verify the username and password. Type: string (or Expression with resultType string).
	AuthSource interface{} `pulumi:"authSource"`
	// The authentication type to be used to connect to the MongoDB database.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The name of the MongoDB database that you want to access. Type: string (or Expression with resultType string).
	DatabaseName interface{} `pulumi:"databaseName"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false. Type: boolean (or Expression with resultType boolean).
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// The TCP port number that the MongoDB server uses to listen for client connections. The default value is 27017. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// The IP address or server name of the MongoDB server. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	// Expected value is 'MongoDb'.
	Type string `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// Linked service for MongoDb data source.
type MongoDbLinkedServiceResponse struct {
	// Specifies whether to allow self-signed certificates from the server. The default value is false. Type: boolean (or Expression with resultType boolean).
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Database to verify the username and password. Type: string (or Expression with resultType string).
	AuthSource interface{} `pulumi:"authSource"`
	// The authentication type to be used to connect to the MongoDB database.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The name of the MongoDB database that you want to access. Type: string (or Expression with resultType string).
	DatabaseName interface{} `pulumi:"databaseName"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false. Type: boolean (or Expression with resultType boolean).
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// The TCP port number that the MongoDB server uses to listen for client connections. The default value is 27017. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// The IP address or server name of the MongoDB server. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	// Expected value is 'MongoDb'.
	Type string `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// A copy activity source for a MongoDB database.
type MongoDbSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Should be a SQL-92 query expression. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MongoDbSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for a MongoDB database.
type MongoDbSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Should be a SQL-92 query expression. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MongoDbSource'.
	Type string `pulumi:"type"`
}

// The MongoDB database dataset.
type MongoDbV2CollectionDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The collection name of the MongoDB database. Type: string (or Expression with resultType string).
	Collection interface{} `pulumi:"collection"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'MongoDbV2Collection'.
	Type string `pulumi:"type"`
}

// The MongoDB database dataset.
type MongoDbV2CollectionDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The collection name of the MongoDB database. Type: string (or Expression with resultType string).
	Collection interface{} `pulumi:"collection"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'MongoDbV2Collection'.
	Type string `pulumi:"type"`
}

// Linked service for MongoDB data source.
type MongoDbV2LinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The MongoDB connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The name of the MongoDB database that you want to access. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'MongoDbV2'.
	Type string `pulumi:"type"`
}

// Linked service for MongoDB data source.
type MongoDbV2LinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The MongoDB connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The name of the MongoDB database that you want to access. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'MongoDbV2'.
	Type string `pulumi:"type"`
}

// A copy activity MongoDB sink.
type MongoDbV2Sink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'MongoDbV2Sink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Specifies whether the document with same key to be overwritten (upsert) rather than throw exception (insert). The default value is "insert". Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// A copy activity MongoDB sink.
type MongoDbV2SinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'MongoDbV2Sink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Specifies whether the document with same key to be overwritten (upsert) rather than throw exception (insert). The default value is "insert". Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// A copy activity source for a MongoDB database.
type MongoDbV2Source struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// Specifies the number of documents to return in each batch of the response from MongoDB instance. In most cases, modifying the batch size will not affect the user or the application. This property's main purpose is to avoid hit the limitation of response size. Type: integer (or Expression with resultType integer).
	BatchSize interface{} `pulumi:"batchSize"`
	// Cursor methods for Mongodb query
	CursorMethods *MongoDbCursorMethodsProperties `pulumi:"cursorMethods"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies selection filter using query operators. To return all documents in a collection, omit this parameter or pass an empty document ({}). Type: string (or Expression with resultType string).
	Filter interface{} `pulumi:"filter"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MongoDbV2Source'.
	Type string `pulumi:"type"`
}

// A copy activity source for a MongoDB database.
type MongoDbV2SourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// Specifies the number of documents to return in each batch of the response from MongoDB instance. In most cases, modifying the batch size will not affect the user or the application. This property's main purpose is to avoid hit the limitation of response size. Type: integer (or Expression with resultType integer).
	BatchSize interface{} `pulumi:"batchSize"`
	// Cursor methods for Mongodb query
	CursorMethods *MongoDbCursorMethodsPropertiesResponse `pulumi:"cursorMethods"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies selection filter using query operators. To return all documents in a collection, omit this parameter or pass an empty document ({}). Type: string (or Expression with resultType string).
	Filter interface{} `pulumi:"filter"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MongoDbV2Source'.
	Type string `pulumi:"type"`
}

// Base class for all triggers that support one to many model for trigger to pipeline.
type MultiplePipelineTrigger struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// Pipelines that need to be started.
	Pipelines []TriggerPipelineReference `pulumi:"pipelines"`
	// Trigger type.
	// Expected value is 'MultiplePipelineTrigger'.
	Type string `pulumi:"type"`
}

// Base class for all triggers that support one to many model for trigger to pipeline.
type MultiplePipelineTriggerResponse struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// Pipelines that need to be started.
	Pipelines []TriggerPipelineReferenceResponse `pulumi:"pipelines"`
	// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState string `pulumi:"runtimeState"`
	// Trigger type.
	// Expected value is 'MultiplePipelineTrigger'.
	Type string `pulumi:"type"`
}

// Linked service for MySQL data source.
type MySqlLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'MySql'.
	Type string `pulumi:"type"`
}

// Linked service for MySQL data source.
type MySqlLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReferenceResponse `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'MySql'.
	Type string `pulumi:"type"`
}

// A copy activity source for MySQL databases.
type MySqlSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MySqlSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for MySQL databases.
type MySqlSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MySqlSource'.
	Type string `pulumi:"type"`
}

// The MySQL table dataset.
type MySqlTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The MySQL table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'MySqlTable'.
	Type string `pulumi:"type"`
}

// The MySQL table dataset.
type MySqlTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The MySQL table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'MySqlTable'.
	Type string `pulumi:"type"`
}

// Netezza linked service.
type NetezzaLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReference `pulumi:"pwd"`
	// Type of linked service.
	// Expected value is 'Netezza'.
	Type string `pulumi:"type"`
}

// Netezza linked service.
type NetezzaLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReferenceResponse `pulumi:"pwd"`
	// Type of linked service.
	// Expected value is 'Netezza'.
	Type string `pulumi:"type"`
}

// The settings that will be leveraged for Netezza source partitioning.
type NetezzaPartitionSettings struct {
	// The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionColumnName interface{} `pulumi:"partitionColumnName"`
	// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionLowerBound interface{} `pulumi:"partitionLowerBound"`
	// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionUpperBound interface{} `pulumi:"partitionUpperBound"`
}

// The settings that will be leveraged for Netezza source partitioning.
type NetezzaPartitionSettingsResponse struct {
	// The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionColumnName interface{} `pulumi:"partitionColumnName"`
	// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionLowerBound interface{} `pulumi:"partitionLowerBound"`
	// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionUpperBound interface{} `pulumi:"partitionUpperBound"`
}

// A copy activity Netezza source.
type NetezzaSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for Netezza read in parallel. Possible values include: "None", "DataSlice", "DynamicRange".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for Netezza source partitioning.
	PartitionSettings *NetezzaPartitionSettings `pulumi:"partitionSettings"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'NetezzaSource'.
	Type string `pulumi:"type"`
}

// A copy activity Netezza source.
type NetezzaSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for Netezza read in parallel. Possible values include: "None", "DataSlice", "DynamicRange".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for Netezza source partitioning.
	PartitionSettings *NetezzaPartitionSettingsResponse `pulumi:"partitionSettings"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'NetezzaSource'.
	Type string `pulumi:"type"`
}

// Netezza dataset.
type NetezzaTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Netezza. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'NetezzaTable'.
	Type string `pulumi:"type"`
}

// Netezza dataset.
type NetezzaTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Netezza. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'NetezzaTable'.
	Type string `pulumi:"type"`
}

// Notebook parameter.
type NotebookParameter struct {
	// Notebook parameter type.
	Type *string `pulumi:"type"`
	// Notebook parameter value. Type: string (or Expression with resultType string).
	Value interface{} `pulumi:"value"`
}

// Notebook parameter.
type NotebookParameterResponse struct {
	// Notebook parameter type.
	Type *string `pulumi:"type"`
	// Notebook parameter value. Type: string (or Expression with resultType string).
	Value interface{} `pulumi:"value"`
}

// Open Data Protocol (OData) linked service.
type ODataLinkedService struct {
	// Specify the resource you are requesting authorization to use Directory. Type: string (or Expression with resultType string).
	AadResourceId interface{} `pulumi:"aadResourceId"`
	// Specify the credential type (key or cert) is used for service principal.
	AadServicePrincipalCredentialType *string `pulumi:"aadServicePrincipalCredentialType"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The additional HTTP headers in the request to RESTful API used for authorization. Type: object (or Expression with resultType object).
	AuthHeaders interface{} `pulumi:"authHeaders"`
	// Type of authentication used to connect to the OData service.
	AuthenticationType *string `pulumi:"authenticationType"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password of the OData service.
	Password interface{} `pulumi:"password"`
	// Specify the base64 encoded certificate of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
	ServicePrincipalEmbeddedCert interface{} `pulumi:"servicePrincipalEmbeddedCert"`
	// Specify the password of your certificate if your certificate has a password and you are using AadServicePrincipal authentication. Type: string (or Expression with resultType string).
	ServicePrincipalEmbeddedCertPassword interface{} `pulumi:"servicePrincipalEmbeddedCertPassword"`
	// Specify the application id of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// Specify the secret of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Specify the tenant information (domain name or tenant ID) under which your application resides. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'OData'.
	Type string `pulumi:"type"`
	// The URL of the OData service endpoint. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// User name of the OData service. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// Open Data Protocol (OData) linked service.
type ODataLinkedServiceResponse struct {
	// Specify the resource you are requesting authorization to use Directory. Type: string (or Expression with resultType string).
	AadResourceId interface{} `pulumi:"aadResourceId"`
	// Specify the credential type (key or cert) is used for service principal.
	AadServicePrincipalCredentialType *string `pulumi:"aadServicePrincipalCredentialType"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The additional HTTP headers in the request to RESTful API used for authorization. Type: object (or Expression with resultType object).
	AuthHeaders interface{} `pulumi:"authHeaders"`
	// Type of authentication used to connect to the OData service.
	AuthenticationType *string `pulumi:"authenticationType"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password of the OData service.
	Password interface{} `pulumi:"password"`
	// Specify the base64 encoded certificate of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
	ServicePrincipalEmbeddedCert interface{} `pulumi:"servicePrincipalEmbeddedCert"`
	// Specify the password of your certificate if your certificate has a password and you are using AadServicePrincipal authentication. Type: string (or Expression with resultType string).
	ServicePrincipalEmbeddedCertPassword interface{} `pulumi:"servicePrincipalEmbeddedCertPassword"`
	// Specify the application id of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// Specify the secret of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Specify the tenant information (domain name or tenant ID) under which your application resides. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'OData'.
	Type string `pulumi:"type"`
	// The URL of the OData service endpoint. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// User name of the OData service. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// The Open Data Protocol (OData) resource dataset.
type ODataResourceDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The OData resource path. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'ODataResource'.
	Type string `pulumi:"type"`
}

// The Open Data Protocol (OData) resource dataset.
type ODataResourceDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The OData resource path. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'ODataResource'.
	Type string `pulumi:"type"`
}

// A copy activity source for OData source.
type ODataSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// OData query. For example, "$top=1". Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ODataSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for OData source.
type ODataSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// OData query. For example, "$top=1". Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ODataSource'.
	Type string `pulumi:"type"`
}

// Open Database Connectivity (ODBC) linked service.
type OdbcLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication used to connect to the ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The access credential portion of the connection string specified in driver-specific property-value format.
	Credential interface{} `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Odbc'.
	Type string `pulumi:"type"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// Open Database Connectivity (ODBC) linked service.
type OdbcLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication used to connect to the ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The access credential portion of the connection string specified in driver-specific property-value format.
	Credential interface{} `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Odbc'.
	Type string `pulumi:"type"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// A copy activity ODBC sink.
type OdbcSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to execute before starting the copy. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'OdbcSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity ODBC sink.
type OdbcSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to execute before starting the copy. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'OdbcSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity source for ODBC databases.
type OdbcSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'OdbcSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for ODBC databases.
type OdbcSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'OdbcSource'.
	Type string `pulumi:"type"`
}

// The ODBC table dataset.
type OdbcTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The ODBC table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'OdbcTable'.
	Type string `pulumi:"type"`
}

// The ODBC table dataset.
type OdbcTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The ODBC table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'OdbcTable'.
	Type string `pulumi:"type"`
}

// The Office365 account.
type Office365Dataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// A predicate expression that can be used to filter the specific rows to extract from Office 365. Type: string (or Expression with resultType string).
	Predicate interface{} `pulumi:"predicate"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Name of the dataset to extract from Office 365. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'Office365Table'.
	Type string `pulumi:"type"`
}

// The Office365 account.
type Office365DatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// A predicate expression that can be used to filter the specific rows to extract from Office 365. Type: string (or Expression with resultType string).
	Predicate interface{} `pulumi:"predicate"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Name of the dataset to extract from Office 365. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'Office365Table'.
	Type string `pulumi:"type"`
}

// Office365 linked service.
type Office365LinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Azure tenant ID to which the Office 365 account belongs. Type: string (or Expression with resultType string).
	Office365TenantId interface{} `pulumi:"office365TenantId"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Specify the application's client ID. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// Specify the application's key.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Specify the tenant information under which your Azure AD web application resides. Type: string (or Expression with resultType string).
	ServicePrincipalTenantId interface{} `pulumi:"servicePrincipalTenantId"`
	// Type of linked service.
	// Expected value is 'Office365'.
	Type string `pulumi:"type"`
}

// Office365 linked service.
type Office365LinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Azure tenant ID to which the Office 365 account belongs. Type: string (or Expression with resultType string).
	Office365TenantId interface{} `pulumi:"office365TenantId"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Specify the application's client ID. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// Specify the application's key.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Specify the tenant information under which your Azure AD web application resides. Type: string (or Expression with resultType string).
	ServicePrincipalTenantId interface{} `pulumi:"servicePrincipalTenantId"`
	// Type of linked service.
	// Expected value is 'Office365'.
	Type string `pulumi:"type"`
}

// A copy activity source for an Office 365 service.
type Office365Source struct {
	// The groups containing all the users. Type: array of strings (or Expression with resultType array of strings).
	AllowedGroups interface{} `pulumi:"allowedGroups"`
	// The Column to apply the <paramref name="StartTime"/> and <paramref name="EndTime"/>. Type: string (or Expression with resultType string).
	DateFilterColumn interface{} `pulumi:"dateFilterColumn"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// End time of the requested range for this dataset. Type: string (or Expression with resultType string).
	EndTime interface{} `pulumi:"endTime"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The columns to be read out from the Office 365 table. Type: array of objects (or Expression with resultType array of objects). Example: [ { "name": "Id" }, { "name": "CreatedDateTime" } ]
	OutputColumns interface{} `pulumi:"outputColumns"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Start time of the requested range for this dataset. Type: string (or Expression with resultType string).
	StartTime interface{} `pulumi:"startTime"`
	// Copy source type.
	// Expected value is 'Office365Source'.
	Type string `pulumi:"type"`
	// The user scope uri. Type: string (or Expression with resultType string).
	UserScopeFilterUri interface{} `pulumi:"userScopeFilterUri"`
}

// A copy activity source for an Office 365 service.
type Office365SourceResponse struct {
	// The groups containing all the users. Type: array of strings (or Expression with resultType array of strings).
	AllowedGroups interface{} `pulumi:"allowedGroups"`
	// The Column to apply the <paramref name="StartTime"/> and <paramref name="EndTime"/>. Type: string (or Expression with resultType string).
	DateFilterColumn interface{} `pulumi:"dateFilterColumn"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// End time of the requested range for this dataset. Type: string (or Expression with resultType string).
	EndTime interface{} `pulumi:"endTime"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The columns to be read out from the Office 365 table. Type: array of objects (or Expression with resultType array of objects). Example: [ { "name": "Id" }, { "name": "CreatedDateTime" } ]
	OutputColumns interface{} `pulumi:"outputColumns"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Start time of the requested range for this dataset. Type: string (or Expression with resultType string).
	StartTime interface{} `pulumi:"startTime"`
	// Copy source type.
	// Expected value is 'Office365Source'.
	Type string `pulumi:"type"`
	// The user scope uri. Type: string (or Expression with resultType string).
	UserScopeFilterUri interface{} `pulumi:"userScopeFilterUri"`
}

// Linked service for Oracle Cloud Storage.
type OracleCloudStorageLinkedService struct {
	// The access key identifier of the Oracle Cloud Storage Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
	AccessKeyId interface{} `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The secret access key of the Oracle Cloud Storage Identity and Access Management (IAM) user.
	SecretAccessKey interface{} `pulumi:"secretAccessKey"`
	// This value specifies the endpoint to access with the Oracle Cloud Storage Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
	ServiceUrl interface{} `pulumi:"serviceUrl"`
	// Type of linked service.
	// Expected value is 'OracleCloudStorage'.
	Type string `pulumi:"type"`
}

// Linked service for Oracle Cloud Storage.
type OracleCloudStorageLinkedServiceResponse struct {
	// The access key identifier of the Oracle Cloud Storage Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
	AccessKeyId interface{} `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The secret access key of the Oracle Cloud Storage Identity and Access Management (IAM) user.
	SecretAccessKey interface{} `pulumi:"secretAccessKey"`
	// This value specifies the endpoint to access with the Oracle Cloud Storage Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
	ServiceUrl interface{} `pulumi:"serviceUrl"`
	// Type of linked service.
	// Expected value is 'OracleCloudStorage'.
	Type string `pulumi:"type"`
}

// The location of Oracle Cloud Storage dataset.
type OracleCloudStorageLocation struct {
	// Specify the bucketName of Oracle Cloud Storage. Type: string (or Expression with resultType string)
	BucketName interface{} `pulumi:"bucketName"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'OracleCloudStorageLocation'.
	Type string `pulumi:"type"`
	// Specify the version of Oracle Cloud Storage. Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
}

// The location of Oracle Cloud Storage dataset.
type OracleCloudStorageLocationResponse struct {
	// Specify the bucketName of Oracle Cloud Storage. Type: string (or Expression with resultType string)
	BucketName interface{} `pulumi:"bucketName"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'OracleCloudStorageLocation'.
	Type string `pulumi:"type"`
	// Specify the version of Oracle Cloud Storage. Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
}

// Oracle Cloud Storage read settings.
type OracleCloudStorageReadSettings struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery.
	EnablePartitionDiscovery *bool `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// The prefix filter for the Oracle Cloud Storage object name. Type: string (or Expression with resultType string).
	Prefix interface{} `pulumi:"prefix"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'OracleCloudStorageReadSettings'.
	Type string `pulumi:"type"`
	// Oracle Cloud Storage wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Oracle Cloud Storage wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// Oracle Cloud Storage read settings.
type OracleCloudStorageReadSettingsResponse struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery.
	EnablePartitionDiscovery *bool `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// The prefix filter for the Oracle Cloud Storage object name. Type: string (or Expression with resultType string).
	Prefix interface{} `pulumi:"prefix"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'OracleCloudStorageReadSettings'.
	Type string `pulumi:"type"`
	// Oracle Cloud Storage wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Oracle Cloud Storage wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// Oracle database.
type OracleLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Oracle'.
	Type string `pulumi:"type"`
}

// Oracle database.
type OracleLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReferenceResponse `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Oracle'.
	Type string `pulumi:"type"`
}

// The settings that will be leveraged for Oracle source partitioning.
type OraclePartitionSettings struct {
	// The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionColumnName interface{} `pulumi:"partitionColumnName"`
	// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionLowerBound interface{} `pulumi:"partitionLowerBound"`
	// Names of the physical partitions of Oracle table.
	PartitionNames []interface{} `pulumi:"partitionNames"`
	// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionUpperBound interface{} `pulumi:"partitionUpperBound"`
}

// The settings that will be leveraged for Oracle source partitioning.
type OraclePartitionSettingsResponse struct {
	// The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionColumnName interface{} `pulumi:"partitionColumnName"`
	// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionLowerBound interface{} `pulumi:"partitionLowerBound"`
	// Names of the physical partitions of Oracle table.
	PartitionNames []interface{} `pulumi:"partitionNames"`
	// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionUpperBound interface{} `pulumi:"partitionUpperBound"`
}

// Oracle Service Cloud linked service.
type OracleServiceCloudLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The URL of the Oracle Service Cloud instance.
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the username key.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'OracleServiceCloud'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
	// The user name that you use to access Oracle Service Cloud server.
	Username interface{} `pulumi:"username"`
}

// Oracle Service Cloud linked service.
type OracleServiceCloudLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The URL of the Oracle Service Cloud instance.
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the username key.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'OracleServiceCloud'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
	// The user name that you use to access Oracle Service Cloud server.
	Username interface{} `pulumi:"username"`
}

// Oracle Service Cloud dataset.
type OracleServiceCloudObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'OracleServiceCloudObject'.
	Type string `pulumi:"type"`
}

// Oracle Service Cloud dataset.
type OracleServiceCloudObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'OracleServiceCloudObject'.
	Type string `pulumi:"type"`
}

// A copy activity Oracle Service Cloud source.
type OracleServiceCloudSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'OracleServiceCloudSource'.
	Type string `pulumi:"type"`
}

// A copy activity Oracle Service Cloud source.
type OracleServiceCloudSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'OracleServiceCloudSource'.
	Type string `pulumi:"type"`
}

// A copy activity Oracle sink.
type OracleSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'OracleSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Oracle sink.
type OracleSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'OracleSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Oracle source.
type OracleSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Oracle reader query. Type: string (or Expression with resultType string).
	OracleReaderQuery interface{} `pulumi:"oracleReaderQuery"`
	// The partition mechanism that will be used for Oracle read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for Oracle source partitioning.
	PartitionSettings *OraclePartitionSettings `pulumi:"partitionSettings"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'OracleSource'.
	Type string `pulumi:"type"`
}

// A copy activity Oracle source.
type OracleSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Oracle reader query. Type: string (or Expression with resultType string).
	OracleReaderQuery interface{} `pulumi:"oracleReaderQuery"`
	// The partition mechanism that will be used for Oracle read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for Oracle source partitioning.
	PartitionSettings *OraclePartitionSettingsResponse `pulumi:"partitionSettings"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'OracleSource'.
	Type string `pulumi:"type"`
}

// The on-premises Oracle database dataset.
type OracleTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the on-premises Oracle database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'OracleTable'.
	Type string `pulumi:"type"`
}

// The on-premises Oracle database dataset.
type OracleTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the on-premises Oracle database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'OracleTable'.
	Type string `pulumi:"type"`
}

// ORC dataset.
type OrcDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The location of the ORC data storage.
	Location interface{} `pulumi:"location"`
	// The data orcCompressionCodec. Type: string (or Expression with resultType string).
	OrcCompressionCodec interface{} `pulumi:"orcCompressionCodec"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Orc'.
	Type string `pulumi:"type"`
}

// ORC dataset.
type OrcDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The location of the ORC data storage.
	Location interface{} `pulumi:"location"`
	// The data orcCompressionCodec. Type: string (or Expression with resultType string).
	OrcCompressionCodec interface{} `pulumi:"orcCompressionCodec"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Orc'.
	Type string `pulumi:"type"`
}

// The data stored in Optimized Row Columnar (ORC) format.
type OrcFormat struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer interface{} `pulumi:"deserializer"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer interface{} `pulumi:"serializer"`
	// Type of dataset storage format.
	// Expected value is 'OrcFormat'.
	Type string `pulumi:"type"`
}

// The data stored in Optimized Row Columnar (ORC) format.
type OrcFormatResponse struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer interface{} `pulumi:"deserializer"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer interface{} `pulumi:"serializer"`
	// Type of dataset storage format.
	// Expected value is 'OrcFormat'.
	Type string `pulumi:"type"`
}

// A copy activity ORC sink.
type OrcSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// ORC format settings.
	FormatSettings *OrcWriteSettings `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// ORC store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy sink type.
	// Expected value is 'OrcSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity ORC sink.
type OrcSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// ORC format settings.
	FormatSettings *OrcWriteSettingsResponse `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// ORC store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy sink type.
	// Expected value is 'OrcSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity ORC source.
type OrcSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// ORC store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'OrcSource'.
	Type string `pulumi:"type"`
}

// A copy activity ORC source.
type OrcSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// ORC store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'OrcSource'.
	Type string `pulumi:"type"`
}

// Orc write settings.
type OrcWriteSettings struct {
	// Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
	FileNamePrefix interface{} `pulumi:"fileNamePrefix"`
	// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
	MaxRowsPerFile interface{} `pulumi:"maxRowsPerFile"`
	// The write setting type.
	// Expected value is 'OrcWriteSettings'.
	Type string `pulumi:"type"`
}

// Orc write settings.
type OrcWriteSettingsResponse struct {
	// Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
	FileNamePrefix interface{} `pulumi:"fileNamePrefix"`
	// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
	MaxRowsPerFile interface{} `pulumi:"maxRowsPerFile"`
	// The write setting type.
	// Expected value is 'OrcWriteSettings'.
	Type string `pulumi:"type"`
}

// Package store for the SSIS integration runtime.
type PackageStore struct {
	// The name of the package store
	Name string `pulumi:"name"`
	// The package store linked service reference.
	PackageStoreLinkedService EntityReference `pulumi:"packageStoreLinkedService"`
}

// Package store for the SSIS integration runtime.
type PackageStoreResponse struct {
	// The name of the package store
	Name string `pulumi:"name"`
	// The package store linked service reference.
	PackageStoreLinkedService EntityReferenceResponse `pulumi:"packageStoreLinkedService"`
}

// Definition of a single parameter for an entity.
type ParameterSpecification struct {
	// Default value of parameter.
	DefaultValue interface{} `pulumi:"defaultValue"`
	// Parameter type.
	Type string `pulumi:"type"`
}

// ParameterSpecificationInput is an input type that accepts ParameterSpecificationArgs and ParameterSpecificationOutput values.
// You can construct a concrete instance of `ParameterSpecificationInput` via:
//
//	ParameterSpecificationArgs{...}
type ParameterSpecificationInput interface {
	pulumi.Input

	ToParameterSpecificationOutput() ParameterSpecificationOutput
	ToParameterSpecificationOutputWithContext(context.Context) ParameterSpecificationOutput
}

// Definition of a single parameter for an entity.
type ParameterSpecificationArgs struct {
	// Default value of parameter.
	DefaultValue pulumi.Input `pulumi:"defaultValue"`
	// Parameter type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ParameterSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterSpecification)(nil)).Elem()
}

func (i ParameterSpecificationArgs) ToParameterSpecificationOutput() ParameterSpecificationOutput {
	return i.ToParameterSpecificationOutputWithContext(context.Background())
}

func (i ParameterSpecificationArgs) ToParameterSpecificationOutputWithContext(ctx context.Context) ParameterSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterSpecificationOutput)
}

// ParameterSpecificationMapInput is an input type that accepts ParameterSpecificationMap and ParameterSpecificationMapOutput values.
// You can construct a concrete instance of `ParameterSpecificationMapInput` via:
//
//	ParameterSpecificationMap{ "key": ParameterSpecificationArgs{...} }
type ParameterSpecificationMapInput interface {
	pulumi.Input

	ToParameterSpecificationMapOutput() ParameterSpecificationMapOutput
	ToParameterSpecificationMapOutputWithContext(context.Context) ParameterSpecificationMapOutput
}

type ParameterSpecificationMap map[string]ParameterSpecificationInput

func (ParameterSpecificationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterSpecification)(nil)).Elem()
}

func (i ParameterSpecificationMap) ToParameterSpecificationMapOutput() ParameterSpecificationMapOutput {
	return i.ToParameterSpecificationMapOutputWithContext(context.Background())
}

func (i ParameterSpecificationMap) ToParameterSpecificationMapOutputWithContext(ctx context.Context) ParameterSpecificationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterSpecificationMapOutput)
}

// Definition of a single parameter for an entity.
type ParameterSpecificationOutput struct{ *pulumi.OutputState }

func (ParameterSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterSpecification)(nil)).Elem()
}

func (o ParameterSpecificationOutput) ToParameterSpecificationOutput() ParameterSpecificationOutput {
	return o
}

func (o ParameterSpecificationOutput) ToParameterSpecificationOutputWithContext(ctx context.Context) ParameterSpecificationOutput {
	return o
}

// Default value of parameter.
func (o ParameterSpecificationOutput) DefaultValue() pulumi.AnyOutput {
	return o.ApplyT(func(v ParameterSpecification) interface{} { return v.DefaultValue }).(pulumi.AnyOutput)
}

// Parameter type.
func (o ParameterSpecificationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterSpecification) string { return v.Type }).(pulumi.StringOutput)
}

type ParameterSpecificationMapOutput struct{ *pulumi.OutputState }

func (ParameterSpecificationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterSpecification)(nil)).Elem()
}

func (o ParameterSpecificationMapOutput) ToParameterSpecificationMapOutput() ParameterSpecificationMapOutput {
	return o
}

func (o ParameterSpecificationMapOutput) ToParameterSpecificationMapOutputWithContext(ctx context.Context) ParameterSpecificationMapOutput {
	return o
}

func (o ParameterSpecificationMapOutput) MapIndex(k pulumi.StringInput) ParameterSpecificationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ParameterSpecification {
		return vs[0].(map[string]ParameterSpecification)[vs[1].(string)]
	}).(ParameterSpecificationOutput)
}

// Definition of a single parameter for an entity.
type ParameterSpecificationResponse struct {
	// Default value of parameter.
	DefaultValue interface{} `pulumi:"defaultValue"`
	// Parameter type.
	Type string `pulumi:"type"`
}

// Definition of a single parameter for an entity.
type ParameterSpecificationResponseOutput struct{ *pulumi.OutputState }

func (ParameterSpecificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterSpecificationResponse)(nil)).Elem()
}

func (o ParameterSpecificationResponseOutput) ToParameterSpecificationResponseOutput() ParameterSpecificationResponseOutput {
	return o
}

func (o ParameterSpecificationResponseOutput) ToParameterSpecificationResponseOutputWithContext(ctx context.Context) ParameterSpecificationResponseOutput {
	return o
}

// Default value of parameter.
func (o ParameterSpecificationResponseOutput) DefaultValue() pulumi.AnyOutput {
	return o.ApplyT(func(v ParameterSpecificationResponse) interface{} { return v.DefaultValue }).(pulumi.AnyOutput)
}

// Parameter type.
func (o ParameterSpecificationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterSpecificationResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ParameterSpecificationResponseMapOutput struct{ *pulumi.OutputState }

func (ParameterSpecificationResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterSpecificationResponse)(nil)).Elem()
}

func (o ParameterSpecificationResponseMapOutput) ToParameterSpecificationResponseMapOutput() ParameterSpecificationResponseMapOutput {
	return o
}

func (o ParameterSpecificationResponseMapOutput) ToParameterSpecificationResponseMapOutputWithContext(ctx context.Context) ParameterSpecificationResponseMapOutput {
	return o
}

func (o ParameterSpecificationResponseMapOutput) MapIndex(k pulumi.StringInput) ParameterSpecificationResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ParameterSpecificationResponse {
		return vs[0].(map[string]ParameterSpecificationResponse)[vs[1].(string)]
	}).(ParameterSpecificationResponseOutput)
}

// Parquet dataset.
type ParquetDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compressionCodec. Type: string (or Expression with resultType string).
	CompressionCodec interface{} `pulumi:"compressionCodec"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The location of the parquet storage.
	Location interface{} `pulumi:"location"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Parquet'.
	Type string `pulumi:"type"`
}

// Parquet dataset.
type ParquetDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compressionCodec. Type: string (or Expression with resultType string).
	CompressionCodec interface{} `pulumi:"compressionCodec"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The location of the parquet storage.
	Location interface{} `pulumi:"location"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Parquet'.
	Type string `pulumi:"type"`
}

// The data stored in Parquet format.
type ParquetFormat struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer interface{} `pulumi:"deserializer"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer interface{} `pulumi:"serializer"`
	// Type of dataset storage format.
	// Expected value is 'ParquetFormat'.
	Type string `pulumi:"type"`
}

// The data stored in Parquet format.
type ParquetFormatResponse struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer interface{} `pulumi:"deserializer"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer interface{} `pulumi:"serializer"`
	// Type of dataset storage format.
	// Expected value is 'ParquetFormat'.
	Type string `pulumi:"type"`
}

// A copy activity Parquet sink.
type ParquetSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Parquet format settings.
	FormatSettings *ParquetWriteSettings `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Parquet store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy sink type.
	// Expected value is 'ParquetSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Parquet sink.
type ParquetSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Parquet format settings.
	FormatSettings *ParquetWriteSettingsResponse `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Parquet store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy sink type.
	// Expected value is 'ParquetSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Parquet source.
type ParquetSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Parquet store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'ParquetSource'.
	Type string `pulumi:"type"`
}

// A copy activity Parquet source.
type ParquetSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Parquet store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'ParquetSource'.
	Type string `pulumi:"type"`
}

// Parquet write settings.
type ParquetWriteSettings struct {
	// Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
	FileNamePrefix interface{} `pulumi:"fileNamePrefix"`
	// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
	MaxRowsPerFile interface{} `pulumi:"maxRowsPerFile"`
	// The write setting type.
	// Expected value is 'ParquetWriteSettings'.
	Type string `pulumi:"type"`
}

// Parquet write settings.
type ParquetWriteSettingsResponse struct {
	// Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
	FileNamePrefix interface{} `pulumi:"fileNamePrefix"`
	// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
	MaxRowsPerFile interface{} `pulumi:"maxRowsPerFile"`
	// The write setting type.
	// Expected value is 'ParquetWriteSettings'.
	Type string `pulumi:"type"`
}

// Paypal Service linked service.
type PaypalLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client ID associated with your PayPal application.
	ClientId interface{} `pulumi:"clientId"`
	// The client secret associated with your PayPal application.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The URL of the PayPal instance. (i.e. api.sandbox.paypal.com)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Paypal'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Paypal Service linked service.
type PaypalLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client ID associated with your PayPal application.
	ClientId interface{} `pulumi:"clientId"`
	// The client secret associated with your PayPal application.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The URL of the PayPal instance. (i.e. api.sandbox.paypal.com)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Paypal'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Paypal Service dataset.
type PaypalObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'PaypalObject'.
	Type string `pulumi:"type"`
}

// Paypal Service dataset.
type PaypalObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'PaypalObject'.
	Type string `pulumi:"type"`
}

// A copy activity Paypal Service source.
type PaypalSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'PaypalSource'.
	Type string `pulumi:"type"`
}

// A copy activity Paypal Service source.
type PaypalSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'PaypalSource'.
	Type string `pulumi:"type"`
}

// Phoenix server linked service.
type PhoenixLinkedService struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication mechanism used to connect to the Phoenix server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The IP address or host name of the Phoenix server. (i.e. 192.168.222.160)
	Host interface{} `pulumi:"host"`
	// The partial URL corresponding to the Phoenix server. (i.e. /gateway/sandbox/phoenix/version). The default value is hbasephoenix if using WindowsAzureHDInsightService.
	HttpPath interface{} `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password interface{} `pulumi:"password"`
	// The TCP port that the Phoenix server uses to listen for client connections. The default value is 8765.
	Port interface{} `pulumi:"port"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'Phoenix'.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
	// The user name used to connect to the Phoenix server.
	Username interface{} `pulumi:"username"`
}

// Phoenix server linked service.
type PhoenixLinkedServiceResponse struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication mechanism used to connect to the Phoenix server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The IP address or host name of the Phoenix server. (i.e. 192.168.222.160)
	Host interface{} `pulumi:"host"`
	// The partial URL corresponding to the Phoenix server. (i.e. /gateway/sandbox/phoenix/version). The default value is hbasephoenix if using WindowsAzureHDInsightService.
	HttpPath interface{} `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password interface{} `pulumi:"password"`
	// The TCP port that the Phoenix server uses to listen for client connections. The default value is 8765.
	Port interface{} `pulumi:"port"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'Phoenix'.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
	// The user name used to connect to the Phoenix server.
	Username interface{} `pulumi:"username"`
}

// Phoenix server dataset.
type PhoenixObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Phoenix. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'PhoenixObject'.
	Type string `pulumi:"type"`
}

// Phoenix server dataset.
type PhoenixObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Phoenix. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'PhoenixObject'.
	Type string `pulumi:"type"`
}

// A copy activity Phoenix server source.
type PhoenixSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'PhoenixSource'.
	Type string `pulumi:"type"`
}

// A copy activity Phoenix server source.
type PhoenixSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'PhoenixSource'.
	Type string `pulumi:"type"`
}

// Pipeline ElapsedTime Metric Policy.
type PipelineElapsedTimeMetricPolicy struct {
	// TimeSpan value, after which an Azure Monitoring Metric is fired.
	Duration interface{} `pulumi:"duration"`
}

// PipelineElapsedTimeMetricPolicyInput is an input type that accepts PipelineElapsedTimeMetricPolicyArgs and PipelineElapsedTimeMetricPolicyOutput values.
// You can construct a concrete instance of `PipelineElapsedTimeMetricPolicyInput` via:
//
//	PipelineElapsedTimeMetricPolicyArgs{...}
type PipelineElapsedTimeMetricPolicyInput interface {
	pulumi.Input

	ToPipelineElapsedTimeMetricPolicyOutput() PipelineElapsedTimeMetricPolicyOutput
	ToPipelineElapsedTimeMetricPolicyOutputWithContext(context.Context) PipelineElapsedTimeMetricPolicyOutput
}

// Pipeline ElapsedTime Metric Policy.
type PipelineElapsedTimeMetricPolicyArgs struct {
	// TimeSpan value, after which an Azure Monitoring Metric is fired.
	Duration pulumi.Input `pulumi:"duration"`
}

func (PipelineElapsedTimeMetricPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineElapsedTimeMetricPolicy)(nil)).Elem()
}

func (i PipelineElapsedTimeMetricPolicyArgs) ToPipelineElapsedTimeMetricPolicyOutput() PipelineElapsedTimeMetricPolicyOutput {
	return i.ToPipelineElapsedTimeMetricPolicyOutputWithContext(context.Background())
}

func (i PipelineElapsedTimeMetricPolicyArgs) ToPipelineElapsedTimeMetricPolicyOutputWithContext(ctx context.Context) PipelineElapsedTimeMetricPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineElapsedTimeMetricPolicyOutput)
}

func (i PipelineElapsedTimeMetricPolicyArgs) ToPipelineElapsedTimeMetricPolicyPtrOutput() PipelineElapsedTimeMetricPolicyPtrOutput {
	return i.ToPipelineElapsedTimeMetricPolicyPtrOutputWithContext(context.Background())
}

func (i PipelineElapsedTimeMetricPolicyArgs) ToPipelineElapsedTimeMetricPolicyPtrOutputWithContext(ctx context.Context) PipelineElapsedTimeMetricPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineElapsedTimeMetricPolicyOutput).ToPipelineElapsedTimeMetricPolicyPtrOutputWithContext(ctx)
}

// PipelineElapsedTimeMetricPolicyPtrInput is an input type that accepts PipelineElapsedTimeMetricPolicyArgs, PipelineElapsedTimeMetricPolicyPtr and PipelineElapsedTimeMetricPolicyPtrOutput values.
// You can construct a concrete instance of `PipelineElapsedTimeMetricPolicyPtrInput` via:
//
//	        PipelineElapsedTimeMetricPolicyArgs{...}
//
//	or:
//
//	        nil
type PipelineElapsedTimeMetricPolicyPtrInput interface {
	pulumi.Input

	ToPipelineElapsedTimeMetricPolicyPtrOutput() PipelineElapsedTimeMetricPolicyPtrOutput
	ToPipelineElapsedTimeMetricPolicyPtrOutputWithContext(context.Context) PipelineElapsedTimeMetricPolicyPtrOutput
}

type pipelineElapsedTimeMetricPolicyPtrType PipelineElapsedTimeMetricPolicyArgs

func PipelineElapsedTimeMetricPolicyPtr(v *PipelineElapsedTimeMetricPolicyArgs) PipelineElapsedTimeMetricPolicyPtrInput {
	return (*pipelineElapsedTimeMetricPolicyPtrType)(v)
}

func (*pipelineElapsedTimeMetricPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineElapsedTimeMetricPolicy)(nil)).Elem()
}

func (i *pipelineElapsedTimeMetricPolicyPtrType) ToPipelineElapsedTimeMetricPolicyPtrOutput() PipelineElapsedTimeMetricPolicyPtrOutput {
	return i.ToPipelineElapsedTimeMetricPolicyPtrOutputWithContext(context.Background())
}

func (i *pipelineElapsedTimeMetricPolicyPtrType) ToPipelineElapsedTimeMetricPolicyPtrOutputWithContext(ctx context.Context) PipelineElapsedTimeMetricPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineElapsedTimeMetricPolicyPtrOutput)
}

// Pipeline ElapsedTime Metric Policy.
type PipelineElapsedTimeMetricPolicyOutput struct{ *pulumi.OutputState }

func (PipelineElapsedTimeMetricPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineElapsedTimeMetricPolicy)(nil)).Elem()
}

func (o PipelineElapsedTimeMetricPolicyOutput) ToPipelineElapsedTimeMetricPolicyOutput() PipelineElapsedTimeMetricPolicyOutput {
	return o
}

func (o PipelineElapsedTimeMetricPolicyOutput) ToPipelineElapsedTimeMetricPolicyOutputWithContext(ctx context.Context) PipelineElapsedTimeMetricPolicyOutput {
	return o
}

func (o PipelineElapsedTimeMetricPolicyOutput) ToPipelineElapsedTimeMetricPolicyPtrOutput() PipelineElapsedTimeMetricPolicyPtrOutput {
	return o.ToPipelineElapsedTimeMetricPolicyPtrOutputWithContext(context.Background())
}

func (o PipelineElapsedTimeMetricPolicyOutput) ToPipelineElapsedTimeMetricPolicyPtrOutputWithContext(ctx context.Context) PipelineElapsedTimeMetricPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipelineElapsedTimeMetricPolicy) *PipelineElapsedTimeMetricPolicy {
		return &v
	}).(PipelineElapsedTimeMetricPolicyPtrOutput)
}

// TimeSpan value, after which an Azure Monitoring Metric is fired.
func (o PipelineElapsedTimeMetricPolicyOutput) Duration() pulumi.AnyOutput {
	return o.ApplyT(func(v PipelineElapsedTimeMetricPolicy) interface{} { return v.Duration }).(pulumi.AnyOutput)
}

type PipelineElapsedTimeMetricPolicyPtrOutput struct{ *pulumi.OutputState }

func (PipelineElapsedTimeMetricPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineElapsedTimeMetricPolicy)(nil)).Elem()
}

func (o PipelineElapsedTimeMetricPolicyPtrOutput) ToPipelineElapsedTimeMetricPolicyPtrOutput() PipelineElapsedTimeMetricPolicyPtrOutput {
	return o
}

func (o PipelineElapsedTimeMetricPolicyPtrOutput) ToPipelineElapsedTimeMetricPolicyPtrOutputWithContext(ctx context.Context) PipelineElapsedTimeMetricPolicyPtrOutput {
	return o
}

func (o PipelineElapsedTimeMetricPolicyPtrOutput) Elem() PipelineElapsedTimeMetricPolicyOutput {
	return o.ApplyT(func(v *PipelineElapsedTimeMetricPolicy) PipelineElapsedTimeMetricPolicy {
		if v != nil {
			return *v
		}
		var ret PipelineElapsedTimeMetricPolicy
		return ret
	}).(PipelineElapsedTimeMetricPolicyOutput)
}

// TimeSpan value, after which an Azure Monitoring Metric is fired.
func (o PipelineElapsedTimeMetricPolicyPtrOutput) Duration() pulumi.AnyOutput {
	return o.ApplyT(func(v *PipelineElapsedTimeMetricPolicy) interface{} {
		if v == nil {
			return nil
		}
		return v.Duration
	}).(pulumi.AnyOutput)
}

// Pipeline ElapsedTime Metric Policy.
type PipelineElapsedTimeMetricPolicyResponse struct {
	// TimeSpan value, after which an Azure Monitoring Metric is fired.
	Duration interface{} `pulumi:"duration"`
}

// Pipeline ElapsedTime Metric Policy.
type PipelineElapsedTimeMetricPolicyResponseOutput struct{ *pulumi.OutputState }

func (PipelineElapsedTimeMetricPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineElapsedTimeMetricPolicyResponse)(nil)).Elem()
}

func (o PipelineElapsedTimeMetricPolicyResponseOutput) ToPipelineElapsedTimeMetricPolicyResponseOutput() PipelineElapsedTimeMetricPolicyResponseOutput {
	return o
}

func (o PipelineElapsedTimeMetricPolicyResponseOutput) ToPipelineElapsedTimeMetricPolicyResponseOutputWithContext(ctx context.Context) PipelineElapsedTimeMetricPolicyResponseOutput {
	return o
}

// TimeSpan value, after which an Azure Monitoring Metric is fired.
func (o PipelineElapsedTimeMetricPolicyResponseOutput) Duration() pulumi.AnyOutput {
	return o.ApplyT(func(v PipelineElapsedTimeMetricPolicyResponse) interface{} { return v.Duration }).(pulumi.AnyOutput)
}

type PipelineElapsedTimeMetricPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (PipelineElapsedTimeMetricPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineElapsedTimeMetricPolicyResponse)(nil)).Elem()
}

func (o PipelineElapsedTimeMetricPolicyResponsePtrOutput) ToPipelineElapsedTimeMetricPolicyResponsePtrOutput() PipelineElapsedTimeMetricPolicyResponsePtrOutput {
	return o
}

func (o PipelineElapsedTimeMetricPolicyResponsePtrOutput) ToPipelineElapsedTimeMetricPolicyResponsePtrOutputWithContext(ctx context.Context) PipelineElapsedTimeMetricPolicyResponsePtrOutput {
	return o
}

func (o PipelineElapsedTimeMetricPolicyResponsePtrOutput) Elem() PipelineElapsedTimeMetricPolicyResponseOutput {
	return o.ApplyT(func(v *PipelineElapsedTimeMetricPolicyResponse) PipelineElapsedTimeMetricPolicyResponse {
		if v != nil {
			return *v
		}
		var ret PipelineElapsedTimeMetricPolicyResponse
		return ret
	}).(PipelineElapsedTimeMetricPolicyResponseOutput)
}

// TimeSpan value, after which an Azure Monitoring Metric is fired.
func (o PipelineElapsedTimeMetricPolicyResponsePtrOutput) Duration() pulumi.AnyOutput {
	return o.ApplyT(func(v *PipelineElapsedTimeMetricPolicyResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Duration
	}).(pulumi.AnyOutput)
}

// PipelineExternalComputeScale properties for managed integration runtime.
type PipelineExternalComputeScaleProperties struct {
	// Time to live (in minutes) setting of integration runtime which will execute pipeline and external activity.
	TimeToLive *int `pulumi:"timeToLive"`
}

// PipelineExternalComputeScale properties for managed integration runtime.
type PipelineExternalComputeScalePropertiesResponse struct {
	// Time to live (in minutes) setting of integration runtime which will execute pipeline and external activity.
	TimeToLive *int `pulumi:"timeToLive"`
}

// The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
type PipelineFolder struct {
	// The name of the folder that this Pipeline is in.
	Name *string `pulumi:"name"`
}

// PipelineFolderInput is an input type that accepts PipelineFolderArgs and PipelineFolderOutput values.
// You can construct a concrete instance of `PipelineFolderInput` via:
//
//	PipelineFolderArgs{...}
type PipelineFolderInput interface {
	pulumi.Input

	ToPipelineFolderOutput() PipelineFolderOutput
	ToPipelineFolderOutputWithContext(context.Context) PipelineFolderOutput
}

// The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
type PipelineFolderArgs struct {
	// The name of the folder that this Pipeline is in.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (PipelineFolderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineFolder)(nil)).Elem()
}

func (i PipelineFolderArgs) ToPipelineFolderOutput() PipelineFolderOutput {
	return i.ToPipelineFolderOutputWithContext(context.Background())
}

func (i PipelineFolderArgs) ToPipelineFolderOutputWithContext(ctx context.Context) PipelineFolderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineFolderOutput)
}

func (i PipelineFolderArgs) ToPipelineFolderPtrOutput() PipelineFolderPtrOutput {
	return i.ToPipelineFolderPtrOutputWithContext(context.Background())
}

func (i PipelineFolderArgs) ToPipelineFolderPtrOutputWithContext(ctx context.Context) PipelineFolderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineFolderOutput).ToPipelineFolderPtrOutputWithContext(ctx)
}

// PipelineFolderPtrInput is an input type that accepts PipelineFolderArgs, PipelineFolderPtr and PipelineFolderPtrOutput values.
// You can construct a concrete instance of `PipelineFolderPtrInput` via:
//
//	        PipelineFolderArgs{...}
//
//	or:
//
//	        nil
type PipelineFolderPtrInput interface {
	pulumi.Input

	ToPipelineFolderPtrOutput() PipelineFolderPtrOutput
	ToPipelineFolderPtrOutputWithContext(context.Context) PipelineFolderPtrOutput
}

type pipelineFolderPtrType PipelineFolderArgs

func PipelineFolderPtr(v *PipelineFolderArgs) PipelineFolderPtrInput {
	return (*pipelineFolderPtrType)(v)
}

func (*pipelineFolderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineFolder)(nil)).Elem()
}

func (i *pipelineFolderPtrType) ToPipelineFolderPtrOutput() PipelineFolderPtrOutput {
	return i.ToPipelineFolderPtrOutputWithContext(context.Background())
}

func (i *pipelineFolderPtrType) ToPipelineFolderPtrOutputWithContext(ctx context.Context) PipelineFolderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineFolderPtrOutput)
}

// The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
type PipelineFolderOutput struct{ *pulumi.OutputState }

func (PipelineFolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineFolder)(nil)).Elem()
}

func (o PipelineFolderOutput) ToPipelineFolderOutput() PipelineFolderOutput {
	return o
}

func (o PipelineFolderOutput) ToPipelineFolderOutputWithContext(ctx context.Context) PipelineFolderOutput {
	return o
}

func (o PipelineFolderOutput) ToPipelineFolderPtrOutput() PipelineFolderPtrOutput {
	return o.ToPipelineFolderPtrOutputWithContext(context.Background())
}

func (o PipelineFolderOutput) ToPipelineFolderPtrOutputWithContext(ctx context.Context) PipelineFolderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipelineFolder) *PipelineFolder {
		return &v
	}).(PipelineFolderPtrOutput)
}

// The name of the folder that this Pipeline is in.
func (o PipelineFolderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineFolder) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type PipelineFolderPtrOutput struct{ *pulumi.OutputState }

func (PipelineFolderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineFolder)(nil)).Elem()
}

func (o PipelineFolderPtrOutput) ToPipelineFolderPtrOutput() PipelineFolderPtrOutput {
	return o
}

func (o PipelineFolderPtrOutput) ToPipelineFolderPtrOutputWithContext(ctx context.Context) PipelineFolderPtrOutput {
	return o
}

func (o PipelineFolderPtrOutput) Elem() PipelineFolderOutput {
	return o.ApplyT(func(v *PipelineFolder) PipelineFolder {
		if v != nil {
			return *v
		}
		var ret PipelineFolder
		return ret
	}).(PipelineFolderOutput)
}

// The name of the folder that this Pipeline is in.
func (o PipelineFolderPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineFolder) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Pipeline Policy.
type PipelinePolicy struct {
	// Pipeline ElapsedTime Metric Policy.
	ElapsedTimeMetric *PipelineElapsedTimeMetricPolicy `pulumi:"elapsedTimeMetric"`
}

// PipelinePolicyInput is an input type that accepts PipelinePolicyArgs and PipelinePolicyOutput values.
// You can construct a concrete instance of `PipelinePolicyInput` via:
//
//	PipelinePolicyArgs{...}
type PipelinePolicyInput interface {
	pulumi.Input

	ToPipelinePolicyOutput() PipelinePolicyOutput
	ToPipelinePolicyOutputWithContext(context.Context) PipelinePolicyOutput
}

// Pipeline Policy.
type PipelinePolicyArgs struct {
	// Pipeline ElapsedTime Metric Policy.
	ElapsedTimeMetric PipelineElapsedTimeMetricPolicyPtrInput `pulumi:"elapsedTimeMetric"`
}

func (PipelinePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelinePolicy)(nil)).Elem()
}

func (i PipelinePolicyArgs) ToPipelinePolicyOutput() PipelinePolicyOutput {
	return i.ToPipelinePolicyOutputWithContext(context.Background())
}

func (i PipelinePolicyArgs) ToPipelinePolicyOutputWithContext(ctx context.Context) PipelinePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelinePolicyOutput)
}

func (i PipelinePolicyArgs) ToPipelinePolicyPtrOutput() PipelinePolicyPtrOutput {
	return i.ToPipelinePolicyPtrOutputWithContext(context.Background())
}

func (i PipelinePolicyArgs) ToPipelinePolicyPtrOutputWithContext(ctx context.Context) PipelinePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelinePolicyOutput).ToPipelinePolicyPtrOutputWithContext(ctx)
}

// PipelinePolicyPtrInput is an input type that accepts PipelinePolicyArgs, PipelinePolicyPtr and PipelinePolicyPtrOutput values.
// You can construct a concrete instance of `PipelinePolicyPtrInput` via:
//
//	        PipelinePolicyArgs{...}
//
//	or:
//
//	        nil
type PipelinePolicyPtrInput interface {
	pulumi.Input

	ToPipelinePolicyPtrOutput() PipelinePolicyPtrOutput
	ToPipelinePolicyPtrOutputWithContext(context.Context) PipelinePolicyPtrOutput
}

type pipelinePolicyPtrType PipelinePolicyArgs

func PipelinePolicyPtr(v *PipelinePolicyArgs) PipelinePolicyPtrInput {
	return (*pipelinePolicyPtrType)(v)
}

func (*pipelinePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelinePolicy)(nil)).Elem()
}

func (i *pipelinePolicyPtrType) ToPipelinePolicyPtrOutput() PipelinePolicyPtrOutput {
	return i.ToPipelinePolicyPtrOutputWithContext(context.Background())
}

func (i *pipelinePolicyPtrType) ToPipelinePolicyPtrOutputWithContext(ctx context.Context) PipelinePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelinePolicyPtrOutput)
}

// Pipeline Policy.
type PipelinePolicyOutput struct{ *pulumi.OutputState }

func (PipelinePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelinePolicy)(nil)).Elem()
}

func (o PipelinePolicyOutput) ToPipelinePolicyOutput() PipelinePolicyOutput {
	return o
}

func (o PipelinePolicyOutput) ToPipelinePolicyOutputWithContext(ctx context.Context) PipelinePolicyOutput {
	return o
}

func (o PipelinePolicyOutput) ToPipelinePolicyPtrOutput() PipelinePolicyPtrOutput {
	return o.ToPipelinePolicyPtrOutputWithContext(context.Background())
}

func (o PipelinePolicyOutput) ToPipelinePolicyPtrOutputWithContext(ctx context.Context) PipelinePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipelinePolicy) *PipelinePolicy {
		return &v
	}).(PipelinePolicyPtrOutput)
}

// Pipeline ElapsedTime Metric Policy.
func (o PipelinePolicyOutput) ElapsedTimeMetric() PipelineElapsedTimeMetricPolicyPtrOutput {
	return o.ApplyT(func(v PipelinePolicy) *PipelineElapsedTimeMetricPolicy { return v.ElapsedTimeMetric }).(PipelineElapsedTimeMetricPolicyPtrOutput)
}

type PipelinePolicyPtrOutput struct{ *pulumi.OutputState }

func (PipelinePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelinePolicy)(nil)).Elem()
}

func (o PipelinePolicyPtrOutput) ToPipelinePolicyPtrOutput() PipelinePolicyPtrOutput {
	return o
}

func (o PipelinePolicyPtrOutput) ToPipelinePolicyPtrOutputWithContext(ctx context.Context) PipelinePolicyPtrOutput {
	return o
}

func (o PipelinePolicyPtrOutput) Elem() PipelinePolicyOutput {
	return o.ApplyT(func(v *PipelinePolicy) PipelinePolicy {
		if v != nil {
			return *v
		}
		var ret PipelinePolicy
		return ret
	}).(PipelinePolicyOutput)
}

// Pipeline ElapsedTime Metric Policy.
func (o PipelinePolicyPtrOutput) ElapsedTimeMetric() PipelineElapsedTimeMetricPolicyPtrOutput {
	return o.ApplyT(func(v *PipelinePolicy) *PipelineElapsedTimeMetricPolicy {
		if v == nil {
			return nil
		}
		return v.ElapsedTimeMetric
	}).(PipelineElapsedTimeMetricPolicyPtrOutput)
}

// Pipeline Policy.
type PipelinePolicyResponse struct {
	// Pipeline ElapsedTime Metric Policy.
	ElapsedTimeMetric *PipelineElapsedTimeMetricPolicyResponse `pulumi:"elapsedTimeMetric"`
}

// Pipeline Policy.
type PipelinePolicyResponseOutput struct{ *pulumi.OutputState }

func (PipelinePolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelinePolicyResponse)(nil)).Elem()
}

func (o PipelinePolicyResponseOutput) ToPipelinePolicyResponseOutput() PipelinePolicyResponseOutput {
	return o
}

func (o PipelinePolicyResponseOutput) ToPipelinePolicyResponseOutputWithContext(ctx context.Context) PipelinePolicyResponseOutput {
	return o
}

// Pipeline ElapsedTime Metric Policy.
func (o PipelinePolicyResponseOutput) ElapsedTimeMetric() PipelineElapsedTimeMetricPolicyResponsePtrOutput {
	return o.ApplyT(func(v PipelinePolicyResponse) *PipelineElapsedTimeMetricPolicyResponse { return v.ElapsedTimeMetric }).(PipelineElapsedTimeMetricPolicyResponsePtrOutput)
}

type PipelinePolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (PipelinePolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelinePolicyResponse)(nil)).Elem()
}

func (o PipelinePolicyResponsePtrOutput) ToPipelinePolicyResponsePtrOutput() PipelinePolicyResponsePtrOutput {
	return o
}

func (o PipelinePolicyResponsePtrOutput) ToPipelinePolicyResponsePtrOutputWithContext(ctx context.Context) PipelinePolicyResponsePtrOutput {
	return o
}

func (o PipelinePolicyResponsePtrOutput) Elem() PipelinePolicyResponseOutput {
	return o.ApplyT(func(v *PipelinePolicyResponse) PipelinePolicyResponse {
		if v != nil {
			return *v
		}
		var ret PipelinePolicyResponse
		return ret
	}).(PipelinePolicyResponseOutput)
}

// Pipeline ElapsedTime Metric Policy.
func (o PipelinePolicyResponsePtrOutput) ElapsedTimeMetric() PipelineElapsedTimeMetricPolicyResponsePtrOutput {
	return o.ApplyT(func(v *PipelinePolicyResponse) *PipelineElapsedTimeMetricPolicyResponse {
		if v == nil {
			return nil
		}
		return v.ElapsedTimeMetric
	}).(PipelineElapsedTimeMetricPolicyResponsePtrOutput)
}

// Pipeline reference type.
type PipelineReference struct {
	// Reference name.
	Name *string `pulumi:"name"`
	// Reference pipeline name.
	ReferenceName string `pulumi:"referenceName"`
	// Pipeline reference type.
	Type string `pulumi:"type"`
}

// Pipeline reference type.
type PipelineReferenceResponse struct {
	// Reference name.
	Name *string `pulumi:"name"`
	// Reference pipeline name.
	ReferenceName string `pulumi:"referenceName"`
	// Pipeline reference type.
	Type string `pulumi:"type"`
}

// The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
type PipelineResponseFolder struct {
	// The name of the folder that this Pipeline is in.
	Name *string `pulumi:"name"`
}

// The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
type PipelineResponseFolderOutput struct{ *pulumi.OutputState }

func (PipelineResponseFolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineResponseFolder)(nil)).Elem()
}

func (o PipelineResponseFolderOutput) ToPipelineResponseFolderOutput() PipelineResponseFolderOutput {
	return o
}

func (o PipelineResponseFolderOutput) ToPipelineResponseFolderOutputWithContext(ctx context.Context) PipelineResponseFolderOutput {
	return o
}

// The name of the folder that this Pipeline is in.
func (o PipelineResponseFolderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineResponseFolder) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type PipelineResponseFolderPtrOutput struct{ *pulumi.OutputState }

func (PipelineResponseFolderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineResponseFolder)(nil)).Elem()
}

func (o PipelineResponseFolderPtrOutput) ToPipelineResponseFolderPtrOutput() PipelineResponseFolderPtrOutput {
	return o
}

func (o PipelineResponseFolderPtrOutput) ToPipelineResponseFolderPtrOutputWithContext(ctx context.Context) PipelineResponseFolderPtrOutput {
	return o
}

func (o PipelineResponseFolderPtrOutput) Elem() PipelineResponseFolderOutput {
	return o.ApplyT(func(v *PipelineResponseFolder) PipelineResponseFolder {
		if v != nil {
			return *v
		}
		var ret PipelineResponseFolder
		return ret
	}).(PipelineResponseFolderOutput)
}

// The name of the folder that this Pipeline is in.
func (o PipelineResponseFolderPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineResponseFolder) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// PolyBase settings.
type PolybaseSettings struct {
	// Determines the number of rows to attempt to retrieve before the PolyBase recalculates the percentage of rejected rows. Type: integer (or Expression with resultType integer), minimum: 0.
	RejectSampleValue interface{} `pulumi:"rejectSampleValue"`
	// Reject type.
	RejectType *string `pulumi:"rejectType"`
	// Specifies the value or the percentage of rows that can be rejected before the query fails. Type: number (or Expression with resultType number), minimum: 0.
	RejectValue interface{} `pulumi:"rejectValue"`
	// Specifies how to handle missing values in delimited text files when PolyBase retrieves data from the text file. Type: boolean (or Expression with resultType boolean).
	UseTypeDefault interface{} `pulumi:"useTypeDefault"`
}

// PolyBase settings.
type PolybaseSettingsResponse struct {
	// Determines the number of rows to attempt to retrieve before the PolyBase recalculates the percentage of rejected rows. Type: integer (or Expression with resultType integer), minimum: 0.
	RejectSampleValue interface{} `pulumi:"rejectSampleValue"`
	// Reject type.
	RejectType *string `pulumi:"rejectType"`
	// Specifies the value or the percentage of rows that can be rejected before the query fails. Type: number (or Expression with resultType number), minimum: 0.
	RejectValue interface{} `pulumi:"rejectValue"`
	// Specifies how to handle missing values in delimited text files when PolyBase retrieves data from the text file. Type: boolean (or Expression with resultType boolean).
	UseTypeDefault interface{} `pulumi:"useTypeDefault"`
}

// Linked service for PostgreSQL data source.
type PostgreSqlLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'PostgreSql'.
	Type string `pulumi:"type"`
}

// Linked service for PostgreSQL data source.
type PostgreSqlLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReferenceResponse `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'PostgreSql'.
	Type string `pulumi:"type"`
}

// A copy activity source for PostgreSQL databases.
type PostgreSqlSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'PostgreSqlSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for PostgreSQL databases.
type PostgreSqlSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'PostgreSqlSource'.
	Type string `pulumi:"type"`
}

// The PostgreSQL table dataset.
type PostgreSqlTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The PostgreSQL table name. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'PostgreSqlTable'.
	Type string `pulumi:"type"`
}

// The PostgreSQL table dataset.
type PostgreSqlTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The PostgreSQL table name. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'PostgreSqlTable'.
	Type string `pulumi:"type"`
}

// Power query sink.
type PowerQuerySink struct {
	// Dataset reference.
	Dataset *DatasetReference `pulumi:"dataset"`
	// Transformation description.
	Description *string `pulumi:"description"`
	// Flowlet Reference
	Flowlet *DataFlowReference `pulumi:"flowlet"`
	// Linked service reference.
	LinkedService *LinkedServiceReference `pulumi:"linkedService"`
	// Transformation name.
	Name string `pulumi:"name"`
	// Rejected data linked service reference.
	RejectedDataLinkedService *LinkedServiceReference `pulumi:"rejectedDataLinkedService"`
	// Schema linked service reference.
	SchemaLinkedService *LinkedServiceReference `pulumi:"schemaLinkedService"`
	// sink script.
	Script *string `pulumi:"script"`
}

// Map Power Query mashup query to sink dataset(s).
type PowerQuerySinkMapping struct {
	// List of sinks mapped to Power Query mashup query.
	DataflowSinks []PowerQuerySink `pulumi:"dataflowSinks"`
	// Name of the query in Power Query mashup document.
	QueryName *string `pulumi:"queryName"`
}

// Map Power Query mashup query to sink dataset(s).
type PowerQuerySinkMappingResponse struct {
	// List of sinks mapped to Power Query mashup query.
	DataflowSinks []PowerQuerySinkResponse `pulumi:"dataflowSinks"`
	// Name of the query in Power Query mashup document.
	QueryName *string `pulumi:"queryName"`
}

// Power query sink.
type PowerQuerySinkResponse struct {
	// Dataset reference.
	Dataset *DatasetReferenceResponse `pulumi:"dataset"`
	// Transformation description.
	Description *string `pulumi:"description"`
	// Flowlet Reference
	Flowlet *DataFlowReferenceResponse `pulumi:"flowlet"`
	// Linked service reference.
	LinkedService *LinkedServiceReferenceResponse `pulumi:"linkedService"`
	// Transformation name.
	Name string `pulumi:"name"`
	// Rejected data linked service reference.
	RejectedDataLinkedService *LinkedServiceReferenceResponse `pulumi:"rejectedDataLinkedService"`
	// Schema linked service reference.
	SchemaLinkedService *LinkedServiceReferenceResponse `pulumi:"schemaLinkedService"`
	// sink script.
	Script *string `pulumi:"script"`
}

// Power query source.
type PowerQuerySource struct {
	// Dataset reference.
	Dataset *DatasetReference `pulumi:"dataset"`
	// Transformation description.
	Description *string `pulumi:"description"`
	// Flowlet Reference
	Flowlet *DataFlowReference `pulumi:"flowlet"`
	// Linked service reference.
	LinkedService *LinkedServiceReference `pulumi:"linkedService"`
	// Transformation name.
	Name string `pulumi:"name"`
	// Schema linked service reference.
	SchemaLinkedService *LinkedServiceReference `pulumi:"schemaLinkedService"`
	// source script.
	Script *string `pulumi:"script"`
}

// Power query source.
type PowerQuerySourceResponse struct {
	// Dataset reference.
	Dataset *DatasetReferenceResponse `pulumi:"dataset"`
	// Transformation description.
	Description *string `pulumi:"description"`
	// Flowlet Reference
	Flowlet *DataFlowReferenceResponse `pulumi:"flowlet"`
	// Linked service reference.
	LinkedService *LinkedServiceReferenceResponse `pulumi:"linkedService"`
	// Transformation name.
	Name string `pulumi:"name"`
	// Schema linked service reference.
	SchemaLinkedService *LinkedServiceReferenceResponse `pulumi:"schemaLinkedService"`
	// source script.
	Script *string `pulumi:"script"`
}

// Presto server linked service.
type PrestoLinkedService struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication mechanism used to connect to the Presto server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The catalog context for all request against the server.
	Catalog interface{} `pulumi:"catalog"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The IP address or host name of the Presto server. (i.e. 192.168.222.160)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password interface{} `pulumi:"password"`
	// The TCP port that the Presto server uses to listen for client connections. The default value is 8080.
	Port interface{} `pulumi:"port"`
	// The version of the Presto server. (i.e. 0.148-t)
	ServerVersion interface{} `pulumi:"serverVersion"`
	// The local time zone used by the connection. Valid values for this option are specified in the IANA Time Zone Database. The default value is the system time zone.
	TimeZoneID interface{} `pulumi:"timeZoneID"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'Presto'.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
	// The user name used to connect to the Presto server.
	Username interface{} `pulumi:"username"`
}

// Presto server linked service.
type PrestoLinkedServiceResponse struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication mechanism used to connect to the Presto server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The catalog context for all request against the server.
	Catalog interface{} `pulumi:"catalog"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The IP address or host name of the Presto server. (i.e. 192.168.222.160)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password interface{} `pulumi:"password"`
	// The TCP port that the Presto server uses to listen for client connections. The default value is 8080.
	Port interface{} `pulumi:"port"`
	// The version of the Presto server. (i.e. 0.148-t)
	ServerVersion interface{} `pulumi:"serverVersion"`
	// The local time zone used by the connection. Valid values for this option are specified in the IANA Time Zone Database. The default value is the system time zone.
	TimeZoneID interface{} `pulumi:"timeZoneID"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'Presto'.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
	// The user name used to connect to the Presto server.
	Username interface{} `pulumi:"username"`
}

// Presto server dataset.
type PrestoObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Presto. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'PrestoObject'.
	Type string `pulumi:"type"`
}

// Presto server dataset.
type PrestoObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Presto. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'PrestoObject'.
	Type string `pulumi:"type"`
}

// A copy activity Presto server source.
type PrestoSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'PrestoSource'.
	Type string `pulumi:"type"`
}

// A copy activity Presto server source.
type PrestoSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'PrestoSource'.
	Type string `pulumi:"type"`
}

// Private endpoint which a connection belongs to.
type PrivateEndpoint struct {
	// The resource Id for private endpoint
	Id *string `pulumi:"id"`
}

// PrivateEndpointInput is an input type that accepts PrivateEndpointArgs and PrivateEndpointOutput values.
// You can construct a concrete instance of `PrivateEndpointInput` via:
//
//	PrivateEndpointArgs{...}
type PrivateEndpointInput interface {
	pulumi.Input

	ToPrivateEndpointOutput() PrivateEndpointOutput
	ToPrivateEndpointOutputWithContext(context.Context) PrivateEndpointOutput
}

// Private endpoint which a connection belongs to.
type PrivateEndpointArgs struct {
	// The resource Id for private endpoint
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (PrivateEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpoint)(nil)).Elem()
}

func (i PrivateEndpointArgs) ToPrivateEndpointOutput() PrivateEndpointOutput {
	return i.ToPrivateEndpointOutputWithContext(context.Background())
}

func (i PrivateEndpointArgs) ToPrivateEndpointOutputWithContext(ctx context.Context) PrivateEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointOutput)
}

func (i PrivateEndpointArgs) ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput {
	return i.ToPrivateEndpointPtrOutputWithContext(context.Background())
}

func (i PrivateEndpointArgs) ToPrivateEndpointPtrOutputWithContext(ctx context.Context) PrivateEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointOutput).ToPrivateEndpointPtrOutputWithContext(ctx)
}

// PrivateEndpointPtrInput is an input type that accepts PrivateEndpointArgs, PrivateEndpointPtr and PrivateEndpointPtrOutput values.
// You can construct a concrete instance of `PrivateEndpointPtrInput` via:
//
//	        PrivateEndpointArgs{...}
//
//	or:
//
//	        nil
type PrivateEndpointPtrInput interface {
	pulumi.Input

	ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput
	ToPrivateEndpointPtrOutputWithContext(context.Context) PrivateEndpointPtrOutput
}

type privateEndpointPtrType PrivateEndpointArgs

func PrivateEndpointPtr(v *PrivateEndpointArgs) PrivateEndpointPtrInput {
	return (*privateEndpointPtrType)(v)
}

func (*privateEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpoint)(nil)).Elem()
}

func (i *privateEndpointPtrType) ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput {
	return i.ToPrivateEndpointPtrOutputWithContext(context.Background())
}

func (i *privateEndpointPtrType) ToPrivateEndpointPtrOutputWithContext(ctx context.Context) PrivateEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointPtrOutput)
}

// Private endpoint which a connection belongs to.
type PrivateEndpointOutput struct{ *pulumi.OutputState }

func (PrivateEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpoint)(nil)).Elem()
}

func (o PrivateEndpointOutput) ToPrivateEndpointOutput() PrivateEndpointOutput {
	return o
}

func (o PrivateEndpointOutput) ToPrivateEndpointOutputWithContext(ctx context.Context) PrivateEndpointOutput {
	return o
}

func (o PrivateEndpointOutput) ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput {
	return o.ToPrivateEndpointPtrOutputWithContext(context.Background())
}

func (o PrivateEndpointOutput) ToPrivateEndpointPtrOutputWithContext(ctx context.Context) PrivateEndpointPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateEndpoint) *PrivateEndpoint {
		return &v
	}).(PrivateEndpointPtrOutput)
}

// The resource Id for private endpoint
func (o PrivateEndpointOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpoint) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type PrivateEndpointPtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpoint)(nil)).Elem()
}

func (o PrivateEndpointPtrOutput) ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput {
	return o
}

func (o PrivateEndpointPtrOutput) ToPrivateEndpointPtrOutputWithContext(ctx context.Context) PrivateEndpointPtrOutput {
	return o
}

func (o PrivateEndpointPtrOutput) Elem() PrivateEndpointOutput {
	return o.ApplyT(func(v *PrivateEndpoint) PrivateEndpoint {
		if v != nil {
			return *v
		}
		var ret PrivateEndpoint
		return ret
	}).(PrivateEndpointOutput)
}

// The resource Id for private endpoint
func (o PrivateEndpointPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// A request to approve or reject a private endpoint connection
type PrivateLinkConnectionApprovalRequest struct {
	// The resource of private endpoint.
	PrivateEndpoint *PrivateEndpoint `pulumi:"privateEndpoint"`
	// The state of a private link connection
	PrivateLinkServiceConnectionState *PrivateLinkConnectionState `pulumi:"privateLinkServiceConnectionState"`
}

// PrivateLinkConnectionApprovalRequestInput is an input type that accepts PrivateLinkConnectionApprovalRequestArgs and PrivateLinkConnectionApprovalRequestOutput values.
// You can construct a concrete instance of `PrivateLinkConnectionApprovalRequestInput` via:
//
//	PrivateLinkConnectionApprovalRequestArgs{...}
type PrivateLinkConnectionApprovalRequestInput interface {
	pulumi.Input

	ToPrivateLinkConnectionApprovalRequestOutput() PrivateLinkConnectionApprovalRequestOutput
	ToPrivateLinkConnectionApprovalRequestOutputWithContext(context.Context) PrivateLinkConnectionApprovalRequestOutput
}

// A request to approve or reject a private endpoint connection
type PrivateLinkConnectionApprovalRequestArgs struct {
	// The resource of private endpoint.
	PrivateEndpoint PrivateEndpointPtrInput `pulumi:"privateEndpoint"`
	// The state of a private link connection
	PrivateLinkServiceConnectionState PrivateLinkConnectionStatePtrInput `pulumi:"privateLinkServiceConnectionState"`
}

func (PrivateLinkConnectionApprovalRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkConnectionApprovalRequest)(nil)).Elem()
}

func (i PrivateLinkConnectionApprovalRequestArgs) ToPrivateLinkConnectionApprovalRequestOutput() PrivateLinkConnectionApprovalRequestOutput {
	return i.ToPrivateLinkConnectionApprovalRequestOutputWithContext(context.Background())
}

func (i PrivateLinkConnectionApprovalRequestArgs) ToPrivateLinkConnectionApprovalRequestOutputWithContext(ctx context.Context) PrivateLinkConnectionApprovalRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkConnectionApprovalRequestOutput)
}

func (i PrivateLinkConnectionApprovalRequestArgs) ToPrivateLinkConnectionApprovalRequestPtrOutput() PrivateLinkConnectionApprovalRequestPtrOutput {
	return i.ToPrivateLinkConnectionApprovalRequestPtrOutputWithContext(context.Background())
}

func (i PrivateLinkConnectionApprovalRequestArgs) ToPrivateLinkConnectionApprovalRequestPtrOutputWithContext(ctx context.Context) PrivateLinkConnectionApprovalRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkConnectionApprovalRequestOutput).ToPrivateLinkConnectionApprovalRequestPtrOutputWithContext(ctx)
}

// PrivateLinkConnectionApprovalRequestPtrInput is an input type that accepts PrivateLinkConnectionApprovalRequestArgs, PrivateLinkConnectionApprovalRequestPtr and PrivateLinkConnectionApprovalRequestPtrOutput values.
// You can construct a concrete instance of `PrivateLinkConnectionApprovalRequestPtrInput` via:
//
//	        PrivateLinkConnectionApprovalRequestArgs{...}
//
//	or:
//
//	        nil
type PrivateLinkConnectionApprovalRequestPtrInput interface {
	pulumi.Input

	ToPrivateLinkConnectionApprovalRequestPtrOutput() PrivateLinkConnectionApprovalRequestPtrOutput
	ToPrivateLinkConnectionApprovalRequestPtrOutputWithContext(context.Context) PrivateLinkConnectionApprovalRequestPtrOutput
}

type privateLinkConnectionApprovalRequestPtrType PrivateLinkConnectionApprovalRequestArgs

func PrivateLinkConnectionApprovalRequestPtr(v *PrivateLinkConnectionApprovalRequestArgs) PrivateLinkConnectionApprovalRequestPtrInput {
	return (*privateLinkConnectionApprovalRequestPtrType)(v)
}

func (*privateLinkConnectionApprovalRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkConnectionApprovalRequest)(nil)).Elem()
}

func (i *privateLinkConnectionApprovalRequestPtrType) ToPrivateLinkConnectionApprovalRequestPtrOutput() PrivateLinkConnectionApprovalRequestPtrOutput {
	return i.ToPrivateLinkConnectionApprovalRequestPtrOutputWithContext(context.Background())
}

func (i *privateLinkConnectionApprovalRequestPtrType) ToPrivateLinkConnectionApprovalRequestPtrOutputWithContext(ctx context.Context) PrivateLinkConnectionApprovalRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkConnectionApprovalRequestPtrOutput)
}

// A request to approve or reject a private endpoint connection
type PrivateLinkConnectionApprovalRequestOutput struct{ *pulumi.OutputState }

func (PrivateLinkConnectionApprovalRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkConnectionApprovalRequest)(nil)).Elem()
}

func (o PrivateLinkConnectionApprovalRequestOutput) ToPrivateLinkConnectionApprovalRequestOutput() PrivateLinkConnectionApprovalRequestOutput {
	return o
}

func (o PrivateLinkConnectionApprovalRequestOutput) ToPrivateLinkConnectionApprovalRequestOutputWithContext(ctx context.Context) PrivateLinkConnectionApprovalRequestOutput {
	return o
}

func (o PrivateLinkConnectionApprovalRequestOutput) ToPrivateLinkConnectionApprovalRequestPtrOutput() PrivateLinkConnectionApprovalRequestPtrOutput {
	return o.ToPrivateLinkConnectionApprovalRequestPtrOutputWithContext(context.Background())
}

func (o PrivateLinkConnectionApprovalRequestOutput) ToPrivateLinkConnectionApprovalRequestPtrOutputWithContext(ctx context.Context) PrivateLinkConnectionApprovalRequestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateLinkConnectionApprovalRequest) *PrivateLinkConnectionApprovalRequest {
		return &v
	}).(PrivateLinkConnectionApprovalRequestPtrOutput)
}

// The resource of private endpoint.
func (o PrivateLinkConnectionApprovalRequestOutput) PrivateEndpoint() PrivateEndpointPtrOutput {
	return o.ApplyT(func(v PrivateLinkConnectionApprovalRequest) *PrivateEndpoint { return v.PrivateEndpoint }).(PrivateEndpointPtrOutput)
}

// The state of a private link connection
func (o PrivateLinkConnectionApprovalRequestOutput) PrivateLinkServiceConnectionState() PrivateLinkConnectionStatePtrOutput {
	return o.ApplyT(func(v PrivateLinkConnectionApprovalRequest) *PrivateLinkConnectionState {
		return v.PrivateLinkServiceConnectionState
	}).(PrivateLinkConnectionStatePtrOutput)
}

type PrivateLinkConnectionApprovalRequestPtrOutput struct{ *pulumi.OutputState }

func (PrivateLinkConnectionApprovalRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkConnectionApprovalRequest)(nil)).Elem()
}

func (o PrivateLinkConnectionApprovalRequestPtrOutput) ToPrivateLinkConnectionApprovalRequestPtrOutput() PrivateLinkConnectionApprovalRequestPtrOutput {
	return o
}

func (o PrivateLinkConnectionApprovalRequestPtrOutput) ToPrivateLinkConnectionApprovalRequestPtrOutputWithContext(ctx context.Context) PrivateLinkConnectionApprovalRequestPtrOutput {
	return o
}

func (o PrivateLinkConnectionApprovalRequestPtrOutput) Elem() PrivateLinkConnectionApprovalRequestOutput {
	return o.ApplyT(func(v *PrivateLinkConnectionApprovalRequest) PrivateLinkConnectionApprovalRequest {
		if v != nil {
			return *v
		}
		var ret PrivateLinkConnectionApprovalRequest
		return ret
	}).(PrivateLinkConnectionApprovalRequestOutput)
}

// The resource of private endpoint.
func (o PrivateLinkConnectionApprovalRequestPtrOutput) PrivateEndpoint() PrivateEndpointPtrOutput {
	return o.ApplyT(func(v *PrivateLinkConnectionApprovalRequest) *PrivateEndpoint {
		if v == nil {
			return nil
		}
		return v.PrivateEndpoint
	}).(PrivateEndpointPtrOutput)
}

// The state of a private link connection
func (o PrivateLinkConnectionApprovalRequestPtrOutput) PrivateLinkServiceConnectionState() PrivateLinkConnectionStatePtrOutput {
	return o.ApplyT(func(v *PrivateLinkConnectionApprovalRequest) *PrivateLinkConnectionState {
		if v == nil {
			return nil
		}
		return v.PrivateLinkServiceConnectionState
	}).(PrivateLinkConnectionStatePtrOutput)
}

// The state of a private link connection
type PrivateLinkConnectionState struct {
	// ActionsRequired for a private link connection
	ActionsRequired *string `pulumi:"actionsRequired"`
	// Description of a private link connection
	Description *string `pulumi:"description"`
	// Status of a private link connection
	Status *string `pulumi:"status"`
}

// PrivateLinkConnectionStateInput is an input type that accepts PrivateLinkConnectionStateArgs and PrivateLinkConnectionStateOutput values.
// You can construct a concrete instance of `PrivateLinkConnectionStateInput` via:
//
//	PrivateLinkConnectionStateArgs{...}
type PrivateLinkConnectionStateInput interface {
	pulumi.Input

	ToPrivateLinkConnectionStateOutput() PrivateLinkConnectionStateOutput
	ToPrivateLinkConnectionStateOutputWithContext(context.Context) PrivateLinkConnectionStateOutput
}

// The state of a private link connection
type PrivateLinkConnectionStateArgs struct {
	// ActionsRequired for a private link connection
	ActionsRequired pulumi.StringPtrInput `pulumi:"actionsRequired"`
	// Description of a private link connection
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Status of a private link connection
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (PrivateLinkConnectionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkConnectionState)(nil)).Elem()
}

func (i PrivateLinkConnectionStateArgs) ToPrivateLinkConnectionStateOutput() PrivateLinkConnectionStateOutput {
	return i.ToPrivateLinkConnectionStateOutputWithContext(context.Background())
}

func (i PrivateLinkConnectionStateArgs) ToPrivateLinkConnectionStateOutputWithContext(ctx context.Context) PrivateLinkConnectionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkConnectionStateOutput)
}

func (i PrivateLinkConnectionStateArgs) ToPrivateLinkConnectionStatePtrOutput() PrivateLinkConnectionStatePtrOutput {
	return i.ToPrivateLinkConnectionStatePtrOutputWithContext(context.Background())
}

func (i PrivateLinkConnectionStateArgs) ToPrivateLinkConnectionStatePtrOutputWithContext(ctx context.Context) PrivateLinkConnectionStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkConnectionStateOutput).ToPrivateLinkConnectionStatePtrOutputWithContext(ctx)
}

// PrivateLinkConnectionStatePtrInput is an input type that accepts PrivateLinkConnectionStateArgs, PrivateLinkConnectionStatePtr and PrivateLinkConnectionStatePtrOutput values.
// You can construct a concrete instance of `PrivateLinkConnectionStatePtrInput` via:
//
//	        PrivateLinkConnectionStateArgs{...}
//
//	or:
//
//	        nil
type PrivateLinkConnectionStatePtrInput interface {
	pulumi.Input

	ToPrivateLinkConnectionStatePtrOutput() PrivateLinkConnectionStatePtrOutput
	ToPrivateLinkConnectionStatePtrOutputWithContext(context.Context) PrivateLinkConnectionStatePtrOutput
}

type privateLinkConnectionStatePtrType PrivateLinkConnectionStateArgs

func PrivateLinkConnectionStatePtr(v *PrivateLinkConnectionStateArgs) PrivateLinkConnectionStatePtrInput {
	return (*privateLinkConnectionStatePtrType)(v)
}

func (*privateLinkConnectionStatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkConnectionState)(nil)).Elem()
}

func (i *privateLinkConnectionStatePtrType) ToPrivateLinkConnectionStatePtrOutput() PrivateLinkConnectionStatePtrOutput {
	return i.ToPrivateLinkConnectionStatePtrOutputWithContext(context.Background())
}

func (i *privateLinkConnectionStatePtrType) ToPrivateLinkConnectionStatePtrOutputWithContext(ctx context.Context) PrivateLinkConnectionStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkConnectionStatePtrOutput)
}

// The state of a private link connection
type PrivateLinkConnectionStateOutput struct{ *pulumi.OutputState }

func (PrivateLinkConnectionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkConnectionState)(nil)).Elem()
}

func (o PrivateLinkConnectionStateOutput) ToPrivateLinkConnectionStateOutput() PrivateLinkConnectionStateOutput {
	return o
}

func (o PrivateLinkConnectionStateOutput) ToPrivateLinkConnectionStateOutputWithContext(ctx context.Context) PrivateLinkConnectionStateOutput {
	return o
}

func (o PrivateLinkConnectionStateOutput) ToPrivateLinkConnectionStatePtrOutput() PrivateLinkConnectionStatePtrOutput {
	return o.ToPrivateLinkConnectionStatePtrOutputWithContext(context.Background())
}

func (o PrivateLinkConnectionStateOutput) ToPrivateLinkConnectionStatePtrOutputWithContext(ctx context.Context) PrivateLinkConnectionStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateLinkConnectionState) *PrivateLinkConnectionState {
		return &v
	}).(PrivateLinkConnectionStatePtrOutput)
}

// ActionsRequired for a private link connection
func (o PrivateLinkConnectionStateOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkConnectionState) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// Description of a private link connection
func (o PrivateLinkConnectionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkConnectionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Status of a private link connection
func (o PrivateLinkConnectionStateOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkConnectionState) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type PrivateLinkConnectionStatePtrOutput struct{ *pulumi.OutputState }

func (PrivateLinkConnectionStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkConnectionState)(nil)).Elem()
}

func (o PrivateLinkConnectionStatePtrOutput) ToPrivateLinkConnectionStatePtrOutput() PrivateLinkConnectionStatePtrOutput {
	return o
}

func (o PrivateLinkConnectionStatePtrOutput) ToPrivateLinkConnectionStatePtrOutputWithContext(ctx context.Context) PrivateLinkConnectionStatePtrOutput {
	return o
}

func (o PrivateLinkConnectionStatePtrOutput) Elem() PrivateLinkConnectionStateOutput {
	return o.ApplyT(func(v *PrivateLinkConnectionState) PrivateLinkConnectionState {
		if v != nil {
			return *v
		}
		var ret PrivateLinkConnectionState
		return ret
	}).(PrivateLinkConnectionStateOutput)
}

// ActionsRequired for a private link connection
func (o PrivateLinkConnectionStatePtrOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkConnectionState) *string {
		if v == nil {
			return nil
		}
		return v.ActionsRequired
	}).(pulumi.StringPtrOutput)
}

// Description of a private link connection
func (o PrivateLinkConnectionStatePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkConnectionState) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Status of a private link connection
func (o PrivateLinkConnectionStatePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkConnectionState) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// The state of a private link connection
type PrivateLinkConnectionStateResponse struct {
	// ActionsRequired for a private link connection
	ActionsRequired *string `pulumi:"actionsRequired"`
	// Description of a private link connection
	Description *string `pulumi:"description"`
	// Status of a private link connection
	Status *string `pulumi:"status"`
}

// The state of a private link connection
type PrivateLinkConnectionStateResponseOutput struct{ *pulumi.OutputState }

func (PrivateLinkConnectionStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkConnectionStateResponse)(nil)).Elem()
}

func (o PrivateLinkConnectionStateResponseOutput) ToPrivateLinkConnectionStateResponseOutput() PrivateLinkConnectionStateResponseOutput {
	return o
}

func (o PrivateLinkConnectionStateResponseOutput) ToPrivateLinkConnectionStateResponseOutputWithContext(ctx context.Context) PrivateLinkConnectionStateResponseOutput {
	return o
}

// ActionsRequired for a private link connection
func (o PrivateLinkConnectionStateResponseOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkConnectionStateResponse) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// Description of a private link connection
func (o PrivateLinkConnectionStateResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkConnectionStateResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Status of a private link connection
func (o PrivateLinkConnectionStateResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkConnectionStateResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type PrivateLinkConnectionStateResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateLinkConnectionStateResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkConnectionStateResponse)(nil)).Elem()
}

func (o PrivateLinkConnectionStateResponsePtrOutput) ToPrivateLinkConnectionStateResponsePtrOutput() PrivateLinkConnectionStateResponsePtrOutput {
	return o
}

func (o PrivateLinkConnectionStateResponsePtrOutput) ToPrivateLinkConnectionStateResponsePtrOutputWithContext(ctx context.Context) PrivateLinkConnectionStateResponsePtrOutput {
	return o
}

func (o PrivateLinkConnectionStateResponsePtrOutput) Elem() PrivateLinkConnectionStateResponseOutput {
	return o.ApplyT(func(v *PrivateLinkConnectionStateResponse) PrivateLinkConnectionStateResponse {
		if v != nil {
			return *v
		}
		var ret PrivateLinkConnectionStateResponse
		return ret
	}).(PrivateLinkConnectionStateResponseOutput)
}

// ActionsRequired for a private link connection
func (o PrivateLinkConnectionStateResponsePtrOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.ActionsRequired
	}).(pulumi.StringPtrOutput)
}

// Description of a private link connection
func (o PrivateLinkConnectionStateResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Status of a private link connection
func (o PrivateLinkConnectionStateResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Purview configuration.
type PurviewConfiguration struct {
	// Purview resource id.
	PurviewResourceId *string `pulumi:"purviewResourceId"`
}

// PurviewConfigurationInput is an input type that accepts PurviewConfigurationArgs and PurviewConfigurationOutput values.
// You can construct a concrete instance of `PurviewConfigurationInput` via:
//
//	PurviewConfigurationArgs{...}
type PurviewConfigurationInput interface {
	pulumi.Input

	ToPurviewConfigurationOutput() PurviewConfigurationOutput
	ToPurviewConfigurationOutputWithContext(context.Context) PurviewConfigurationOutput
}

// Purview configuration.
type PurviewConfigurationArgs struct {
	// Purview resource id.
	PurviewResourceId pulumi.StringPtrInput `pulumi:"purviewResourceId"`
}

func (PurviewConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PurviewConfiguration)(nil)).Elem()
}

func (i PurviewConfigurationArgs) ToPurviewConfigurationOutput() PurviewConfigurationOutput {
	return i.ToPurviewConfigurationOutputWithContext(context.Background())
}

func (i PurviewConfigurationArgs) ToPurviewConfigurationOutputWithContext(ctx context.Context) PurviewConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PurviewConfigurationOutput)
}

func (i PurviewConfigurationArgs) ToPurviewConfigurationPtrOutput() PurviewConfigurationPtrOutput {
	return i.ToPurviewConfigurationPtrOutputWithContext(context.Background())
}

func (i PurviewConfigurationArgs) ToPurviewConfigurationPtrOutputWithContext(ctx context.Context) PurviewConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PurviewConfigurationOutput).ToPurviewConfigurationPtrOutputWithContext(ctx)
}

// PurviewConfigurationPtrInput is an input type that accepts PurviewConfigurationArgs, PurviewConfigurationPtr and PurviewConfigurationPtrOutput values.
// You can construct a concrete instance of `PurviewConfigurationPtrInput` via:
//
//	        PurviewConfigurationArgs{...}
//
//	or:
//
//	        nil
type PurviewConfigurationPtrInput interface {
	pulumi.Input

	ToPurviewConfigurationPtrOutput() PurviewConfigurationPtrOutput
	ToPurviewConfigurationPtrOutputWithContext(context.Context) PurviewConfigurationPtrOutput
}

type purviewConfigurationPtrType PurviewConfigurationArgs

func PurviewConfigurationPtr(v *PurviewConfigurationArgs) PurviewConfigurationPtrInput {
	return (*purviewConfigurationPtrType)(v)
}

func (*purviewConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PurviewConfiguration)(nil)).Elem()
}

func (i *purviewConfigurationPtrType) ToPurviewConfigurationPtrOutput() PurviewConfigurationPtrOutput {
	return i.ToPurviewConfigurationPtrOutputWithContext(context.Background())
}

func (i *purviewConfigurationPtrType) ToPurviewConfigurationPtrOutputWithContext(ctx context.Context) PurviewConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PurviewConfigurationPtrOutput)
}

// Purview configuration.
type PurviewConfigurationOutput struct{ *pulumi.OutputState }

func (PurviewConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PurviewConfiguration)(nil)).Elem()
}

func (o PurviewConfigurationOutput) ToPurviewConfigurationOutput() PurviewConfigurationOutput {
	return o
}

func (o PurviewConfigurationOutput) ToPurviewConfigurationOutputWithContext(ctx context.Context) PurviewConfigurationOutput {
	return o
}

func (o PurviewConfigurationOutput) ToPurviewConfigurationPtrOutput() PurviewConfigurationPtrOutput {
	return o.ToPurviewConfigurationPtrOutputWithContext(context.Background())
}

func (o PurviewConfigurationOutput) ToPurviewConfigurationPtrOutputWithContext(ctx context.Context) PurviewConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PurviewConfiguration) *PurviewConfiguration {
		return &v
	}).(PurviewConfigurationPtrOutput)
}

// Purview resource id.
func (o PurviewConfigurationOutput) PurviewResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PurviewConfiguration) *string { return v.PurviewResourceId }).(pulumi.StringPtrOutput)
}

type PurviewConfigurationPtrOutput struct{ *pulumi.OutputState }

func (PurviewConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PurviewConfiguration)(nil)).Elem()
}

func (o PurviewConfigurationPtrOutput) ToPurviewConfigurationPtrOutput() PurviewConfigurationPtrOutput {
	return o
}

func (o PurviewConfigurationPtrOutput) ToPurviewConfigurationPtrOutputWithContext(ctx context.Context) PurviewConfigurationPtrOutput {
	return o
}

func (o PurviewConfigurationPtrOutput) Elem() PurviewConfigurationOutput {
	return o.ApplyT(func(v *PurviewConfiguration) PurviewConfiguration {
		if v != nil {
			return *v
		}
		var ret PurviewConfiguration
		return ret
	}).(PurviewConfigurationOutput)
}

// Purview resource id.
func (o PurviewConfigurationPtrOutput) PurviewResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PurviewConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.PurviewResourceId
	}).(pulumi.StringPtrOutput)
}

// Purview configuration.
type PurviewConfigurationResponse struct {
	// Purview resource id.
	PurviewResourceId *string `pulumi:"purviewResourceId"`
}

// Purview configuration.
type PurviewConfigurationResponseOutput struct{ *pulumi.OutputState }

func (PurviewConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PurviewConfigurationResponse)(nil)).Elem()
}

func (o PurviewConfigurationResponseOutput) ToPurviewConfigurationResponseOutput() PurviewConfigurationResponseOutput {
	return o
}

func (o PurviewConfigurationResponseOutput) ToPurviewConfigurationResponseOutputWithContext(ctx context.Context) PurviewConfigurationResponseOutput {
	return o
}

// Purview resource id.
func (o PurviewConfigurationResponseOutput) PurviewResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PurviewConfigurationResponse) *string { return v.PurviewResourceId }).(pulumi.StringPtrOutput)
}

type PurviewConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (PurviewConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PurviewConfigurationResponse)(nil)).Elem()
}

func (o PurviewConfigurationResponsePtrOutput) ToPurviewConfigurationResponsePtrOutput() PurviewConfigurationResponsePtrOutput {
	return o
}

func (o PurviewConfigurationResponsePtrOutput) ToPurviewConfigurationResponsePtrOutputWithContext(ctx context.Context) PurviewConfigurationResponsePtrOutput {
	return o
}

func (o PurviewConfigurationResponsePtrOutput) Elem() PurviewConfigurationResponseOutput {
	return o.ApplyT(func(v *PurviewConfigurationResponse) PurviewConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret PurviewConfigurationResponse
		return ret
	}).(PurviewConfigurationResponseOutput)
}

// Purview resource id.
func (o PurviewConfigurationResponsePtrOutput) PurviewResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PurviewConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.PurviewResourceId
	}).(pulumi.StringPtrOutput)
}

// QuickBooks server linked service.
type QuickBooksLinkedService struct {
	// The access token for OAuth 1.0 authentication.
	AccessToken interface{} `pulumi:"accessToken"`
	// The access token secret for OAuth 1.0 authentication.
	AccessTokenSecret interface{} `pulumi:"accessTokenSecret"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The company ID of the QuickBooks company to authorize.
	CompanyId interface{} `pulumi:"companyId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Properties used to connect to QuickBooks. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// The consumer key for OAuth 1.0 authentication.
	ConsumerKey interface{} `pulumi:"consumerKey"`
	// The consumer secret for OAuth 1.0 authentication.
	ConsumerSecret interface{} `pulumi:"consumerSecret"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the QuickBooks server. (i.e. quickbooks.api.intuit.com)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'QuickBooks'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
}

// QuickBooks server linked service.
type QuickBooksLinkedServiceResponse struct {
	// The access token for OAuth 1.0 authentication.
	AccessToken interface{} `pulumi:"accessToken"`
	// The access token secret for OAuth 1.0 authentication.
	AccessTokenSecret interface{} `pulumi:"accessTokenSecret"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The company ID of the QuickBooks company to authorize.
	CompanyId interface{} `pulumi:"companyId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Properties used to connect to QuickBooks. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// The consumer key for OAuth 1.0 authentication.
	ConsumerKey interface{} `pulumi:"consumerKey"`
	// The consumer secret for OAuth 1.0 authentication.
	ConsumerSecret interface{} `pulumi:"consumerSecret"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the QuickBooks server. (i.e. quickbooks.api.intuit.com)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'QuickBooks'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
}

// QuickBooks server dataset.
type QuickBooksObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'QuickBooksObject'.
	Type string `pulumi:"type"`
}

// QuickBooks server dataset.
type QuickBooksObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'QuickBooksObject'.
	Type string `pulumi:"type"`
}

// A copy activity QuickBooks server source.
type QuickBooksSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'QuickBooksSource'.
	Type string `pulumi:"type"`
}

// A copy activity QuickBooks server source.
type QuickBooksSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'QuickBooksSource'.
	Type string `pulumi:"type"`
}

// Linked service for Quickbase.
type QuickbaseLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Quickbase'.
	Type string `pulumi:"type"`
	// The url to connect Quickbase source. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// The user token for the Quickbase source.
	UserToken interface{} `pulumi:"userToken"`
}

// Linked service for Quickbase.
type QuickbaseLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Quickbase'.
	Type string `pulumi:"type"`
	// The url to connect Quickbase source. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// The user token for the Quickbase source.
	UserToken interface{} `pulumi:"userToken"`
}

// The recurrence schedule.
type RecurrenceSchedule struct {
	// The hours.
	Hours []int `pulumi:"hours"`
	// The minutes.
	Minutes []int `pulumi:"minutes"`
	// The month days.
	MonthDays []int `pulumi:"monthDays"`
	// The monthly occurrences.
	MonthlyOccurrences []RecurrenceScheduleOccurrence `pulumi:"monthlyOccurrences"`
	// The days of the week.
	WeekDays []DaysOfWeek `pulumi:"weekDays"`
}

// The recurrence schedule occurrence.
type RecurrenceScheduleOccurrence struct {
	// The day of the week.
	Day *DayOfWeek `pulumi:"day"`
	// The occurrence.
	Occurrence *int `pulumi:"occurrence"`
}

// The recurrence schedule occurrence.
type RecurrenceScheduleOccurrenceResponse struct {
	// The day of the week.
	Day *string `pulumi:"day"`
	// The occurrence.
	Occurrence *int `pulumi:"occurrence"`
}

// The recurrence schedule.
type RecurrenceScheduleResponse struct {
	// The hours.
	Hours []int `pulumi:"hours"`
	// The minutes.
	Minutes []int `pulumi:"minutes"`
	// The month days.
	MonthDays []int `pulumi:"monthDays"`
	// The monthly occurrences.
	MonthlyOccurrences []RecurrenceScheduleOccurrenceResponse `pulumi:"monthlyOccurrences"`
	// The days of the week.
	WeekDays []string `pulumi:"weekDays"`
}

// Redirect incompatible row settings
type RedirectIncompatibleRowSettings struct {
	// Name of the Azure Storage, Storage SAS, or Azure Data Lake Store linked service used for redirecting incompatible row. Must be specified if redirectIncompatibleRowSettings is specified. Type: string (or Expression with resultType string).
	LinkedServiceName interface{} `pulumi:"linkedServiceName"`
	// The path for storing the redirect incompatible row data. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
}

// Redirect incompatible row settings
type RedirectIncompatibleRowSettingsResponse struct {
	// Name of the Azure Storage, Storage SAS, or Azure Data Lake Store linked service used for redirecting incompatible row. Must be specified if redirectIncompatibleRowSettings is specified. Type: string (or Expression with resultType string).
	LinkedServiceName interface{} `pulumi:"linkedServiceName"`
	// The path for storing the redirect incompatible row data. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
}

// The Amazon S3 settings needed for the interim Amazon S3 when copying from Amazon Redshift with unload. With this, data from Amazon Redshift source will be unloaded into S3 first and then copied into the targeted sink from the interim S3.
type RedshiftUnloadSettings struct {
	// The bucket of the interim Amazon S3 which will be used to store the unloaded data from Amazon Redshift source. The bucket must be in the same region as the Amazon Redshift source. Type: string (or Expression with resultType string).
	BucketName interface{} `pulumi:"bucketName"`
	// The name of the Amazon S3 linked service which will be used for the unload operation when copying from the Amazon Redshift source.
	S3LinkedServiceName LinkedServiceReference `pulumi:"s3LinkedServiceName"`
}

// The Amazon S3 settings needed for the interim Amazon S3 when copying from Amazon Redshift with unload. With this, data from Amazon Redshift source will be unloaded into S3 first and then copied into the targeted sink from the interim S3.
type RedshiftUnloadSettingsResponse struct {
	// The bucket of the interim Amazon S3 which will be used to store the unloaded data from Amazon Redshift source. The bucket must be in the same region as the Amazon Redshift source. Type: string (or Expression with resultType string).
	BucketName interface{} `pulumi:"bucketName"`
	// The name of the Amazon S3 linked service which will be used for the unload operation when copying from the Amazon Redshift source.
	S3LinkedServiceName LinkedServiceReferenceResponse `pulumi:"s3LinkedServiceName"`
}

// A copy activity source for various relational databases.
type RelationalSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'RelationalSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for various relational databases.
type RelationalSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'RelationalSource'.
	Type string `pulumi:"type"`
}

// The relational table dataset.
type RelationalTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The relational table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'RelationalTable'.
	Type string `pulumi:"type"`
}

// The relational table dataset.
type RelationalTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The relational table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'RelationalTable'.
	Type string `pulumi:"type"`
}

// A remote private endpoint connection
type RemotePrivateEndpointConnectionResponse struct {
	// PrivateEndpoint of a remote private endpoint connection
	PrivateEndpoint *ArmIdWrapperResponse `pulumi:"privateEndpoint"`
	// The state of a private link connection
	PrivateLinkServiceConnectionState *PrivateLinkConnectionStateResponse `pulumi:"privateLinkServiceConnectionState"`
	ProvisioningState                 string                              `pulumi:"provisioningState"`
}

// A remote private endpoint connection
type RemotePrivateEndpointConnectionResponseOutput struct{ *pulumi.OutputState }

func (RemotePrivateEndpointConnectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemotePrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o RemotePrivateEndpointConnectionResponseOutput) ToRemotePrivateEndpointConnectionResponseOutput() RemotePrivateEndpointConnectionResponseOutput {
	return o
}

func (o RemotePrivateEndpointConnectionResponseOutput) ToRemotePrivateEndpointConnectionResponseOutputWithContext(ctx context.Context) RemotePrivateEndpointConnectionResponseOutput {
	return o
}

// PrivateEndpoint of a remote private endpoint connection
func (o RemotePrivateEndpointConnectionResponseOutput) PrivateEndpoint() ArmIdWrapperResponsePtrOutput {
	return o.ApplyT(func(v RemotePrivateEndpointConnectionResponse) *ArmIdWrapperResponse { return v.PrivateEndpoint }).(ArmIdWrapperResponsePtrOutput)
}

// The state of a private link connection
func (o RemotePrivateEndpointConnectionResponseOutput) PrivateLinkServiceConnectionState() PrivateLinkConnectionStateResponsePtrOutput {
	return o.ApplyT(func(v RemotePrivateEndpointConnectionResponse) *PrivateLinkConnectionStateResponse {
		return v.PrivateLinkServiceConnectionState
	}).(PrivateLinkConnectionStateResponsePtrOutput)
}

func (o RemotePrivateEndpointConnectionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v RemotePrivateEndpointConnectionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Trigger that schedules pipeline reruns for all fixed time interval windows from a requested start time to requested end time.
type RerunTumblingWindowTrigger struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// The parent trigger reference.
	ParentTrigger interface{} `pulumi:"parentTrigger"`
	// The end time for the time period for which restatement is initiated. Only UTC time is currently supported.
	RequestedEndTime string `pulumi:"requestedEndTime"`
	// The start time for the time period for which restatement is initiated. Only UTC time is currently supported.
	RequestedStartTime string `pulumi:"requestedStartTime"`
	// The max number of parallel time windows (ready for execution) for which a rerun is triggered.
	RerunConcurrency int `pulumi:"rerunConcurrency"`
	// Trigger type.
	// Expected value is 'RerunTumblingWindowTrigger'.
	Type string `pulumi:"type"`
}

// Trigger that schedules pipeline reruns for all fixed time interval windows from a requested start time to requested end time.
type RerunTumblingWindowTriggerResponse struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// The parent trigger reference.
	ParentTrigger interface{} `pulumi:"parentTrigger"`
	// The end time for the time period for which restatement is initiated. Only UTC time is currently supported.
	RequestedEndTime string `pulumi:"requestedEndTime"`
	// The start time for the time period for which restatement is initiated. Only UTC time is currently supported.
	RequestedStartTime string `pulumi:"requestedStartTime"`
	// The max number of parallel time windows (ready for execution) for which a rerun is triggered.
	RerunConcurrency int `pulumi:"rerunConcurrency"`
	// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState string `pulumi:"runtimeState"`
	// Trigger type.
	// Expected value is 'RerunTumblingWindowTrigger'.
	Type string `pulumi:"type"`
}

// Responsys linked service.
type ResponsysLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client ID associated with the Responsys application. Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The client secret associated with the Responsys application. Type: string (or Expression with resultType string).
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Responsys server.
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Responsys'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Responsys linked service.
type ResponsysLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client ID associated with the Responsys application. Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The client secret associated with the Responsys application. Type: string (or Expression with resultType string).
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Responsys server.
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Responsys'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Responsys dataset.
type ResponsysObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'ResponsysObject'.
	Type string `pulumi:"type"`
}

// Responsys dataset.
type ResponsysObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'ResponsysObject'.
	Type string `pulumi:"type"`
}

// A copy activity Responsys source.
type ResponsysSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ResponsysSource'.
	Type string `pulumi:"type"`
}

// A copy activity Responsys source.
type ResponsysSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ResponsysSource'.
	Type string `pulumi:"type"`
}

// A Rest service dataset.
type RestResourceDataset struct {
	// The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string).
	AdditionalHeaders interface{} `pulumi:"additionalHeaders"`
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The pagination rules to compose next page requests. Type: string (or Expression with resultType string).
	PaginationRules interface{} `pulumi:"paginationRules"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The relative URL to the resource that the RESTful API provides. Type: string (or Expression with resultType string).
	RelativeUrl interface{} `pulumi:"relativeUrl"`
	// The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string).
	RequestBody interface{} `pulumi:"requestBody"`
	// The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string).
	RequestMethod interface{} `pulumi:"requestMethod"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'RestResource'.
	Type string `pulumi:"type"`
}

// A Rest service dataset.
type RestResourceDatasetResponse struct {
	// The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string).
	AdditionalHeaders interface{} `pulumi:"additionalHeaders"`
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The pagination rules to compose next page requests. Type: string (or Expression with resultType string).
	PaginationRules interface{} `pulumi:"paginationRules"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The relative URL to the resource that the RESTful API provides. Type: string (or Expression with resultType string).
	RelativeUrl interface{} `pulumi:"relativeUrl"`
	// The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string).
	RequestBody interface{} `pulumi:"requestBody"`
	// The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string).
	RequestMethod interface{} `pulumi:"requestMethod"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'RestResource'.
	Type string `pulumi:"type"`
}

// Rest Service linked service.
type RestServiceLinkedService struct {
	// The resource you are requesting authorization to use.
	AadResourceId interface{} `pulumi:"aadResourceId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The additional HTTP headers in the request to RESTful API used for authorization. Type: object (or Expression with resultType object).
	AuthHeaders interface{} `pulumi:"authHeaders"`
	// Type of authentication used to connect to the REST service.
	AuthenticationType string `pulumi:"authenticationType"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The client ID associated with your application. Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The client secret associated with your application.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Whether to validate server side SSL certificate when connecting to the endpoint.The default value is true. Type: boolean (or Expression with resultType boolean).
	EnableServerCertificateValidation interface{} `pulumi:"enableServerCertificateValidation"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password used in Basic authentication type.
	Password interface{} `pulumi:"password"`
	// The target service or resource to which the access will be requested. Type: string (or Expression with resultType string).
	Resource interface{} `pulumi:"resource"`
	// The scope of the access required. It describes what kind of access will be requested. Type: string (or Expression with resultType string).
	Scope interface{} `pulumi:"scope"`
	// The application's client ID used in AadServicePrincipal authentication type.
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The application's key used in AadServicePrincipal authentication type.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The tenant information (domain name or tenant ID) used in AadServicePrincipal authentication type under which your application resides.
	Tenant interface{} `pulumi:"tenant"`
	// The token endpoint of the authorization server to acquire access token. Type: string (or Expression with resultType string).
	TokenEndpoint interface{} `pulumi:"tokenEndpoint"`
	// Type of linked service.
	// Expected value is 'RestService'.
	Type string `pulumi:"type"`
	// The base URL of the REST service.
	Url interface{} `pulumi:"url"`
	// The user name used in Basic authentication type.
	UserName interface{} `pulumi:"userName"`
}

// Rest Service linked service.
type RestServiceLinkedServiceResponse struct {
	// The resource you are requesting authorization to use.
	AadResourceId interface{} `pulumi:"aadResourceId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The additional HTTP headers in the request to RESTful API used for authorization. Type: object (or Expression with resultType object).
	AuthHeaders interface{} `pulumi:"authHeaders"`
	// Type of authentication used to connect to the REST service.
	AuthenticationType string `pulumi:"authenticationType"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The client ID associated with your application. Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The client secret associated with your application.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Whether to validate server side SSL certificate when connecting to the endpoint.The default value is true. Type: boolean (or Expression with resultType boolean).
	EnableServerCertificateValidation interface{} `pulumi:"enableServerCertificateValidation"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password used in Basic authentication type.
	Password interface{} `pulumi:"password"`
	// The target service or resource to which the access will be requested. Type: string (or Expression with resultType string).
	Resource interface{} `pulumi:"resource"`
	// The scope of the access required. It describes what kind of access will be requested. Type: string (or Expression with resultType string).
	Scope interface{} `pulumi:"scope"`
	// The application's client ID used in AadServicePrincipal authentication type.
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The application's key used in AadServicePrincipal authentication type.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The tenant information (domain name or tenant ID) used in AadServicePrincipal authentication type under which your application resides.
	Tenant interface{} `pulumi:"tenant"`
	// The token endpoint of the authorization server to acquire access token. Type: string (or Expression with resultType string).
	TokenEndpoint interface{} `pulumi:"tokenEndpoint"`
	// Type of linked service.
	// Expected value is 'RestService'.
	Type string `pulumi:"type"`
	// The base URL of the REST service.
	Url interface{} `pulumi:"url"`
	// The user name used in Basic authentication type.
	UserName interface{} `pulumi:"userName"`
}

// A copy activity Rest service Sink.
type RestSink struct {
	// The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string).
	AdditionalHeaders interface{} `pulumi:"additionalHeaders"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Http Compression Type to Send data in compressed format with Optimal Compression Level, Default is None. And The Only Supported option is Gzip.
	HttpCompressionType interface{} `pulumi:"httpCompressionType"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:01:40. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The time to await before sending next request, in milliseconds
	RequestInterval interface{} `pulumi:"requestInterval"`
	// The HTTP method used to call the RESTful API. The default is POST. Type: string (or Expression with resultType string).
	RequestMethod interface{} `pulumi:"requestMethod"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'RestSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Rest service Sink.
type RestSinkResponse struct {
	// The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string).
	AdditionalHeaders interface{} `pulumi:"additionalHeaders"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Http Compression Type to Send data in compressed format with Optimal Compression Level, Default is None. And The Only Supported option is Gzip.
	HttpCompressionType interface{} `pulumi:"httpCompressionType"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:01:40. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The time to await before sending next request, in milliseconds
	RequestInterval interface{} `pulumi:"requestInterval"`
	// The HTTP method used to call the RESTful API. The default is POST. Type: string (or Expression with resultType string).
	RequestMethod interface{} `pulumi:"requestMethod"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'RestSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Rest service source.
type RestSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string).
	AdditionalHeaders interface{} `pulumi:"additionalHeaders"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:01:40. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The pagination rules to compose next page requests. Type: string (or Expression with resultType string).
	PaginationRules interface{} `pulumi:"paginationRules"`
	// The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string).
	RequestBody interface{} `pulumi:"requestBody"`
	// The time to await before sending next page request.
	RequestInterval interface{} `pulumi:"requestInterval"`
	// The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string).
	RequestMethod interface{} `pulumi:"requestMethod"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'RestSource'.
	Type string `pulumi:"type"`
}

// A copy activity Rest service source.
type RestSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string).
	AdditionalHeaders interface{} `pulumi:"additionalHeaders"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:01:40. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The pagination rules to compose next page requests. Type: string (or Expression with resultType string).
	PaginationRules interface{} `pulumi:"paginationRules"`
	// The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string).
	RequestBody interface{} `pulumi:"requestBody"`
	// The time to await before sending next page request.
	RequestInterval interface{} `pulumi:"requestInterval"`
	// The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string).
	RequestMethod interface{} `pulumi:"requestMethod"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'RestSource'.
	Type string `pulumi:"type"`
}

// Execution policy for an activity.
type RetryPolicy struct {
	// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
	Count interface{} `pulumi:"count"`
	// Interval between retries in seconds. Default is 30.
	IntervalInSeconds *int `pulumi:"intervalInSeconds"`
}

// Execution policy for an activity.
type RetryPolicyResponse struct {
	// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
	Count interface{} `pulumi:"count"`
	// Interval between retries in seconds. Default is 30.
	IntervalInSeconds *int `pulumi:"intervalInSeconds"`
}

// SSIS access credential.
type SSISAccessCredential struct {
	// Domain for windows authentication.
	Domain interface{} `pulumi:"domain"`
	// Password for windows authentication.
	Password interface{} `pulumi:"password"`
	// UseName for windows authentication.
	UserName interface{} `pulumi:"userName"`
}

// SSIS access credential.
type SSISAccessCredentialResponse struct {
	// Domain for windows authentication.
	Domain interface{} `pulumi:"domain"`
	// Password for windows authentication.
	Password interface{} `pulumi:"password"`
	// UseName for windows authentication.
	UserName interface{} `pulumi:"userName"`
}

// SSIS embedded child package.
type SSISChildPackage struct {
	// Content for embedded child package. Type: string (or Expression with resultType string).
	PackageContent interface{} `pulumi:"packageContent"`
	// Last modified date for embedded child package.
	PackageLastModifiedDate *string `pulumi:"packageLastModifiedDate"`
	// Name for embedded child package.
	PackageName *string `pulumi:"packageName"`
	// Path for embedded child package. Type: string (or Expression with resultType string).
	PackagePath interface{} `pulumi:"packagePath"`
}

// SSIS embedded child package.
type SSISChildPackageResponse struct {
	// Content for embedded child package. Type: string (or Expression with resultType string).
	PackageContent interface{} `pulumi:"packageContent"`
	// Last modified date for embedded child package.
	PackageLastModifiedDate *string `pulumi:"packageLastModifiedDate"`
	// Name for embedded child package.
	PackageName *string `pulumi:"packageName"`
	// Path for embedded child package. Type: string (or Expression with resultType string).
	PackagePath interface{} `pulumi:"packagePath"`
}

// SSIS package execution credential.
type SSISExecutionCredential struct {
	// Domain for windows authentication.
	Domain interface{} `pulumi:"domain"`
	// Password for windows authentication.
	Password SecureString `pulumi:"password"`
	// UseName for windows authentication.
	UserName interface{} `pulumi:"userName"`
}

// SSIS package execution credential.
type SSISExecutionCredentialResponse struct {
	// Domain for windows authentication.
	Domain interface{} `pulumi:"domain"`
	// Password for windows authentication.
	Password SecureStringResponse `pulumi:"password"`
	// UseName for windows authentication.
	UserName interface{} `pulumi:"userName"`
}

// SSIS execution parameter.
type SSISExecutionParameter struct {
	// SSIS package execution parameter value. Type: string (or Expression with resultType string).
	Value interface{} `pulumi:"value"`
}

// SSIS execution parameter.
type SSISExecutionParameterResponse struct {
	// SSIS package execution parameter value. Type: string (or Expression with resultType string).
	Value interface{} `pulumi:"value"`
}

// SSIS package execution log location
type SSISLogLocation struct {
	// The package execution log access credential.
	AccessCredential *SSISAccessCredential `pulumi:"accessCredential"`
	// The SSIS package execution log path. Type: string (or Expression with resultType string).
	LogPath interface{} `pulumi:"logPath"`
	// Specifies the interval to refresh log. The default interval is 5 minutes. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	LogRefreshInterval interface{} `pulumi:"logRefreshInterval"`
	// The type of SSIS log location.
	Type string `pulumi:"type"`
}

// SSIS package execution log location
type SSISLogLocationResponse struct {
	// The package execution log access credential.
	AccessCredential *SSISAccessCredentialResponse `pulumi:"accessCredential"`
	// The SSIS package execution log path. Type: string (or Expression with resultType string).
	LogPath interface{} `pulumi:"logPath"`
	// Specifies the interval to refresh log. The default interval is 5 minutes. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	LogRefreshInterval interface{} `pulumi:"logRefreshInterval"`
	// The type of SSIS log location.
	Type string `pulumi:"type"`
}

// SSIS package location.
type SSISPackageLocation struct {
	// The package access credential.
	AccessCredential *SSISAccessCredential `pulumi:"accessCredential"`
	// The embedded child package list.
	ChildPackages []SSISChildPackage `pulumi:"childPackages"`
	// The configuration file access credential.
	ConfigurationAccessCredential *SSISAccessCredential `pulumi:"configurationAccessCredential"`
	// The configuration file of the package execution. Type: string (or Expression with resultType string).
	ConfigurationPath interface{} `pulumi:"configurationPath"`
	// The embedded package content. Type: string (or Expression with resultType string).
	PackageContent interface{} `pulumi:"packageContent"`
	// The embedded package last modified date.
	PackageLastModifiedDate *string `pulumi:"packageLastModifiedDate"`
	// The package name.
	PackageName *string `pulumi:"packageName"`
	// Password of the package.
	PackagePassword interface{} `pulumi:"packagePassword"`
	// The SSIS package path. Type: string (or Expression with resultType string).
	PackagePath interface{} `pulumi:"packagePath"`
	// The type of SSIS package location.
	Type *string `pulumi:"type"`
}

// SSIS package location.
type SSISPackageLocationResponse struct {
	// The package access credential.
	AccessCredential *SSISAccessCredentialResponse `pulumi:"accessCredential"`
	// The embedded child package list.
	ChildPackages []SSISChildPackageResponse `pulumi:"childPackages"`
	// The configuration file access credential.
	ConfigurationAccessCredential *SSISAccessCredentialResponse `pulumi:"configurationAccessCredential"`
	// The configuration file of the package execution. Type: string (or Expression with resultType string).
	ConfigurationPath interface{} `pulumi:"configurationPath"`
	// The embedded package content. Type: string (or Expression with resultType string).
	PackageContent interface{} `pulumi:"packageContent"`
	// The embedded package last modified date.
	PackageLastModifiedDate *string `pulumi:"packageLastModifiedDate"`
	// The package name.
	PackageName *string `pulumi:"packageName"`
	// Password of the package.
	PackagePassword interface{} `pulumi:"packagePassword"`
	// The SSIS package path. Type: string (or Expression with resultType string).
	PackagePath interface{} `pulumi:"packagePath"`
	// The type of SSIS package location.
	Type *string `pulumi:"type"`
}

// SSIS property override.
type SSISPropertyOverride struct {
	// Whether SSIS package property override value is sensitive data. Value will be encrypted in SSISDB if it is true
	IsSensitive *bool `pulumi:"isSensitive"`
	// SSIS package property override value. Type: string (or Expression with resultType string).
	Value interface{} `pulumi:"value"`
}

// SSIS property override.
type SSISPropertyOverrideResponse struct {
	// Whether SSIS package property override value is sensitive data. Value will be encrypted in SSISDB if it is true
	IsSensitive *bool `pulumi:"isSensitive"`
	// SSIS package property override value. Type: string (or Expression with resultType string).
	Value interface{} `pulumi:"value"`
}

// Linked service for Salesforce.
type SalesforceLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The Salesforce API version used in ADF. Type: string (or Expression with resultType string).
	ApiVersion interface{} `pulumi:"apiVersion"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The URL of Salesforce instance. Default is 'https://login.salesforce.com'. To copy data from sandbox, specify 'https://test.salesforce.com'. To copy data from custom domain, specify, for example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
	EnvironmentUrl interface{} `pulumi:"environmentUrl"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password for Basic authentication of the Salesforce instance.
	Password interface{} `pulumi:"password"`
	// The security token is optional to remotely access Salesforce instance.
	SecurityToken interface{} `pulumi:"securityToken"`
	// Type of linked service.
	// Expected value is 'Salesforce'.
	Type string `pulumi:"type"`
	// The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// Linked service for Salesforce.
type SalesforceLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The Salesforce API version used in ADF. Type: string (or Expression with resultType string).
	ApiVersion interface{} `pulumi:"apiVersion"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The URL of Salesforce instance. Default is 'https://login.salesforce.com'. To copy data from sandbox, specify 'https://test.salesforce.com'. To copy data from custom domain, specify, for example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
	EnvironmentUrl interface{} `pulumi:"environmentUrl"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password for Basic authentication of the Salesforce instance.
	Password interface{} `pulumi:"password"`
	// The security token is optional to remotely access Salesforce instance.
	SecurityToken interface{} `pulumi:"securityToken"`
	// Type of linked service.
	// Expected value is 'Salesforce'.
	Type string `pulumi:"type"`
	// The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// Salesforce Marketing Cloud linked service.
type SalesforceMarketingCloudLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client ID associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The client secret associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string).
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Properties used to connect to Salesforce Marketing Cloud. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'SalesforceMarketingCloud'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Salesforce Marketing Cloud linked service.
type SalesforceMarketingCloudLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client ID associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The client secret associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string).
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Properties used to connect to Salesforce Marketing Cloud. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'SalesforceMarketingCloud'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Salesforce Marketing Cloud dataset.
type SalesforceMarketingCloudObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'SalesforceMarketingCloudObject'.
	Type string `pulumi:"type"`
}

// Salesforce Marketing Cloud dataset.
type SalesforceMarketingCloudObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'SalesforceMarketingCloudObject'.
	Type string `pulumi:"type"`
}

// A copy activity Salesforce Marketing Cloud source.
type SalesforceMarketingCloudSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SalesforceMarketingCloudSource'.
	Type string `pulumi:"type"`
}

// A copy activity Salesforce Marketing Cloud source.
type SalesforceMarketingCloudSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SalesforceMarketingCloudSource'.
	Type string `pulumi:"type"`
}

// The Salesforce object dataset.
type SalesforceObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The Salesforce object API name. Type: string (or Expression with resultType string).
	ObjectApiName interface{} `pulumi:"objectApiName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SalesforceObject'.
	Type string `pulumi:"type"`
}

// The Salesforce object dataset.
type SalesforceObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The Salesforce object API name. Type: string (or Expression with resultType string).
	ObjectApiName interface{} `pulumi:"objectApiName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SalesforceObject'.
	Type string `pulumi:"type"`
}

// Linked service for Salesforce Service Cloud.
type SalesforceServiceCloudLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The Salesforce API version used in ADF. Type: string (or Expression with resultType string).
	ApiVersion interface{} `pulumi:"apiVersion"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The URL of Salesforce Service Cloud instance. Default is 'https://login.salesforce.com'. To copy data from sandbox, specify 'https://test.salesforce.com'. To copy data from custom domain, specify, for example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
	EnvironmentUrl interface{} `pulumi:"environmentUrl"`
	// Extended properties appended to the connection string. Type: string (or Expression with resultType string).
	ExtendedProperties interface{} `pulumi:"extendedProperties"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password for Basic authentication of the Salesforce instance.
	Password interface{} `pulumi:"password"`
	// The security token is optional to remotely access Salesforce instance.
	SecurityToken interface{} `pulumi:"securityToken"`
	// Type of linked service.
	// Expected value is 'SalesforceServiceCloud'.
	Type string `pulumi:"type"`
	// The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// Linked service for Salesforce Service Cloud.
type SalesforceServiceCloudLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The Salesforce API version used in ADF. Type: string (or Expression with resultType string).
	ApiVersion interface{} `pulumi:"apiVersion"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The URL of Salesforce Service Cloud instance. Default is 'https://login.salesforce.com'. To copy data from sandbox, specify 'https://test.salesforce.com'. To copy data from custom domain, specify, for example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
	EnvironmentUrl interface{} `pulumi:"environmentUrl"`
	// Extended properties appended to the connection string. Type: string (or Expression with resultType string).
	ExtendedProperties interface{} `pulumi:"extendedProperties"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password for Basic authentication of the Salesforce instance.
	Password interface{} `pulumi:"password"`
	// The security token is optional to remotely access Salesforce instance.
	SecurityToken interface{} `pulumi:"securityToken"`
	// Type of linked service.
	// Expected value is 'SalesforceServiceCloud'.
	Type string `pulumi:"type"`
	// The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// The Salesforce Service Cloud object dataset.
type SalesforceServiceCloudObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The Salesforce Service Cloud object API name. Type: string (or Expression with resultType string).
	ObjectApiName interface{} `pulumi:"objectApiName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SalesforceServiceCloudObject'.
	Type string `pulumi:"type"`
}

// The Salesforce Service Cloud object dataset.
type SalesforceServiceCloudObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The Salesforce Service Cloud object API name. Type: string (or Expression with resultType string).
	ObjectApiName interface{} `pulumi:"objectApiName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SalesforceServiceCloudObject'.
	Type string `pulumi:"type"`
}

// A copy activity Salesforce Service Cloud sink.
type SalesforceServiceCloudSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The name of the external ID field for upsert operation. Default value is 'Id' column. Type: string (or Expression with resultType string).
	ExternalIdFieldName interface{} `pulumi:"externalIdFieldName"`
	// The flag indicating whether or not to ignore null values from input dataset (except key fields) during write operation. Default value is false. If set it to true, it means ADF will leave the data in the destination object unchanged when doing upsert/update operation and insert defined default value when doing insert operation, versus ADF will update the data in the destination object to NULL when doing upsert/update operation and insert NULL value when doing insert operation. Type: boolean (or Expression with resultType boolean).
	IgnoreNullValues interface{} `pulumi:"ignoreNullValues"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'SalesforceServiceCloudSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation. Default is Insert.
	WriteBehavior *string `pulumi:"writeBehavior"`
}

// A copy activity Salesforce Service Cloud sink.
type SalesforceServiceCloudSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The name of the external ID field for upsert operation. Default value is 'Id' column. Type: string (or Expression with resultType string).
	ExternalIdFieldName interface{} `pulumi:"externalIdFieldName"`
	// The flag indicating whether or not to ignore null values from input dataset (except key fields) during write operation. Default value is false. If set it to true, it means ADF will leave the data in the destination object unchanged when doing upsert/update operation and insert defined default value when doing insert operation, versus ADF will update the data in the destination object to NULL when doing upsert/update operation and insert NULL value when doing insert operation. Type: boolean (or Expression with resultType boolean).
	IgnoreNullValues interface{} `pulumi:"ignoreNullValues"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'SalesforceServiceCloudSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation. Default is Insert.
	WriteBehavior *string `pulumi:"writeBehavior"`
}

// A copy activity Salesforce Service Cloud source.
type SalesforceServiceCloudSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// The read behavior for the operation. Default is Query.
	ReadBehavior *string `pulumi:"readBehavior"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SalesforceServiceCloudSource'.
	Type string `pulumi:"type"`
}

// A copy activity Salesforce Service Cloud source.
type SalesforceServiceCloudSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// The read behavior for the operation. Default is Query.
	ReadBehavior *string `pulumi:"readBehavior"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SalesforceServiceCloudSource'.
	Type string `pulumi:"type"`
}

// A copy activity Salesforce sink.
type SalesforceSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The name of the external ID field for upsert operation. Default value is 'Id' column. Type: string (or Expression with resultType string).
	ExternalIdFieldName interface{} `pulumi:"externalIdFieldName"`
	// The flag indicating whether or not to ignore null values from input dataset (except key fields) during write operation. Default value is false. If set it to true, it means ADF will leave the data in the destination object unchanged when doing upsert/update operation and insert defined default value when doing insert operation, versus ADF will update the data in the destination object to NULL when doing upsert/update operation and insert NULL value when doing insert operation. Type: boolean (or Expression with resultType boolean).
	IgnoreNullValues interface{} `pulumi:"ignoreNullValues"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'SalesforceSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation. Default is Insert.
	WriteBehavior *string `pulumi:"writeBehavior"`
}

// A copy activity Salesforce sink.
type SalesforceSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The name of the external ID field for upsert operation. Default value is 'Id' column. Type: string (or Expression with resultType string).
	ExternalIdFieldName interface{} `pulumi:"externalIdFieldName"`
	// The flag indicating whether or not to ignore null values from input dataset (except key fields) during write operation. Default value is false. If set it to true, it means ADF will leave the data in the destination object unchanged when doing upsert/update operation and insert defined default value when doing insert operation, versus ADF will update the data in the destination object to NULL when doing upsert/update operation and insert NULL value when doing insert operation. Type: boolean (or Expression with resultType boolean).
	IgnoreNullValues interface{} `pulumi:"ignoreNullValues"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'SalesforceSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation. Default is Insert.
	WriteBehavior *string `pulumi:"writeBehavior"`
}

// A copy activity Salesforce source.
type SalesforceSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// The read behavior for the operation. Default is Query.
	ReadBehavior *string `pulumi:"readBehavior"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SalesforceSource'.
	Type string `pulumi:"type"`
}

// A copy activity Salesforce source.
type SalesforceSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// The read behavior for the operation. Default is Query.
	ReadBehavior *string `pulumi:"readBehavior"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SalesforceSource'.
	Type string `pulumi:"type"`
}

// SAP Business Warehouse Linked Service.
type SapBWLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Client ID of the client on the BW system. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to access the SAP BW server.
	Password interface{} `pulumi:"password"`
	// Host name of the SAP BW instance. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// System number of the BW system. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
	SystemNumber interface{} `pulumi:"systemNumber"`
	// Type of linked service.
	// Expected value is 'SapBW'.
	Type string `pulumi:"type"`
	// Username to access the SAP BW server. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// SAP Business Warehouse Linked Service.
type SapBWLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Client ID of the client on the BW system. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to access the SAP BW server.
	Password interface{} `pulumi:"password"`
	// Host name of the SAP BW instance. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// System number of the BW system. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
	SystemNumber interface{} `pulumi:"systemNumber"`
	// Type of linked service.
	// Expected value is 'SapBW'.
	Type string `pulumi:"type"`
	// Username to access the SAP BW server. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// The SAP BW cube dataset.
type SapBwCubeDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SapBwCube'.
	Type string `pulumi:"type"`
}

// The SAP BW cube dataset.
type SapBwCubeDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SapBwCube'.
	Type string `pulumi:"type"`
}

// A copy activity source for SapBW server via MDX.
type SapBwSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// MDX query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SapBwSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for SapBW server via MDX.
type SapBwSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// MDX query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SapBwSource'.
	Type string `pulumi:"type"`
}

// Linked service for SAP Cloud for Customer.
type SapCloudForCustomerLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'SapCloudForCustomer'.
	Type string `pulumi:"type"`
	// The URL of SAP Cloud for Customer OData API. For example, '[https://[tenantname].crm.ondemand.com/sap/c4c/odata/v1]'. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// The username for Basic authentication. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// Linked service for SAP Cloud for Customer.
type SapCloudForCustomerLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'SapCloudForCustomer'.
	Type string `pulumi:"type"`
	// The URL of SAP Cloud for Customer OData API. For example, '[https://[tenantname].crm.ondemand.com/sap/c4c/odata/v1]'. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// The username for Basic authentication. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// The path of the SAP Cloud for Customer OData entity.
type SapCloudForCustomerResourceDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The path of the SAP Cloud for Customer OData entity. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SapCloudForCustomerResource'.
	Type string `pulumi:"type"`
}

// The path of the SAP Cloud for Customer OData entity.
type SapCloudForCustomerResourceDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The path of the SAP Cloud for Customer OData entity. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SapCloudForCustomerResource'.
	Type string `pulumi:"type"`
}

// A copy activity SAP Cloud for Customer sink.
type SapCloudForCustomerSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'SapCloudForCustomerSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation. Default is 'Insert'.
	WriteBehavior *string `pulumi:"writeBehavior"`
}

// A copy activity SAP Cloud for Customer sink.
type SapCloudForCustomerSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'SapCloudForCustomerSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation. Default is 'Insert'.
	WriteBehavior *string `pulumi:"writeBehavior"`
}

// A copy activity source for SAP Cloud for Customer source.
type SapCloudForCustomerSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SAP Cloud for Customer OData query. For example, "$top=1". Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SapCloudForCustomerSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for SAP Cloud for Customer source.
type SapCloudForCustomerSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SAP Cloud for Customer OData query. For example, "$top=1". Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SapCloudForCustomerSource'.
	Type string `pulumi:"type"`
}

// Linked service for SAP ERP Central Component(SAP ECC).
type SapEccLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string (or Expression with resultType string).
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'SapEcc'.
	Type string `pulumi:"type"`
	// The URL of SAP ECC OData API. For example, '[https://hostname:port/sap/opu/odata/sap/servicename/]'. Type: string (or Expression with resultType string).
	Url string `pulumi:"url"`
	// The username for Basic authentication. Type: string (or Expression with resultType string).
	Username *string `pulumi:"username"`
}

// Linked service for SAP ERP Central Component(SAP ECC).
type SapEccLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string (or Expression with resultType string).
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'SapEcc'.
	Type string `pulumi:"type"`
	// The URL of SAP ECC OData API. For example, '[https://hostname:port/sap/opu/odata/sap/servicename/]'. Type: string (or Expression with resultType string).
	Url string `pulumi:"url"`
	// The username for Basic authentication. Type: string (or Expression with resultType string).
	Username *string `pulumi:"username"`
}

// The path of the SAP ECC OData entity.
type SapEccResourceDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The path of the SAP ECC OData entity. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SapEccResource'.
	Type string `pulumi:"type"`
}

// The path of the SAP ECC OData entity.
type SapEccResourceDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The path of the SAP ECC OData entity. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SapEccResource'.
	Type string `pulumi:"type"`
}

// A copy activity source for SAP ECC source.
type SapEccSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SAP ECC OData query. For example, "$top=1". Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SapEccSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for SAP ECC source.
type SapEccSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SAP ECC OData query. For example, "$top=1". Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SapEccSource'.
	Type string `pulumi:"type"`
}

// SAP HANA Linked Service.
type SapHanaLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to be used to connect to the SAP HANA server.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// SAP HANA ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to access the SAP HANA server.
	Password interface{} `pulumi:"password"`
	// Host name of the SAP HANA server. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	// Expected value is 'SapHana'.
	Type string `pulumi:"type"`
	// Username to access the SAP HANA server. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// SAP HANA Linked Service.
type SapHanaLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to be used to connect to the SAP HANA server.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// SAP HANA ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to access the SAP HANA server.
	Password interface{} `pulumi:"password"`
	// Host name of the SAP HANA server. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	// Expected value is 'SapHana'.
	Type string `pulumi:"type"`
	// Username to access the SAP HANA server. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// The settings that will be leveraged for SAP HANA source partitioning.
type SapHanaPartitionSettings struct {
	// The name of the column that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionColumnName interface{} `pulumi:"partitionColumnName"`
}

// The settings that will be leveraged for SAP HANA source partitioning.
type SapHanaPartitionSettingsResponse struct {
	// The name of the column that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionColumnName interface{} `pulumi:"partitionColumnName"`
}

// A copy activity source for SAP HANA source.
type SapHanaSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The packet size of data read from SAP HANA. Type: integer(or Expression with resultType integer).
	PacketSize interface{} `pulumi:"packetSize"`
	// The partition mechanism that will be used for SAP HANA read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "SapHanaDynamicRange".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for SAP HANA source partitioning.
	PartitionSettings *SapHanaPartitionSettings `pulumi:"partitionSettings"`
	// SAP HANA Sql query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SapHanaSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for SAP HANA source.
type SapHanaSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The packet size of data read from SAP HANA. Type: integer(or Expression with resultType integer).
	PacketSize interface{} `pulumi:"packetSize"`
	// The partition mechanism that will be used for SAP HANA read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "SapHanaDynamicRange".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for SAP HANA source partitioning.
	PartitionSettings *SapHanaPartitionSettingsResponse `pulumi:"partitionSettings"`
	// SAP HANA Sql query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SapHanaSource'.
	Type string `pulumi:"type"`
}

// SAP HANA Table properties.
type SapHanaTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of SAP HANA. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'SapHanaTable'.
	Type string `pulumi:"type"`
}

// SAP HANA Table properties.
type SapHanaTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of SAP HANA. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'SapHanaTable'.
	Type string `pulumi:"type"`
}

// SAP ODP Linked Service.
type SapOdpLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Client ID of the client on the SAP system where the table is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Language of the SAP system where the table is located. The default value is EN. Type: string (or Expression with resultType string).
	Language interface{} `pulumi:"language"`
	// The Logon Group for the SAP System. Type: string (or Expression with resultType string).
	LogonGroup interface{} `pulumi:"logonGroup"`
	// The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
	MessageServer interface{} `pulumi:"messageServer"`
	// The service name or port number of the Message Server. Type: string (or Expression with resultType string).
	MessageServerService interface{} `pulumi:"messageServerService"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to access the SAP server where the table is located.
	Password interface{} `pulumi:"password"`
	// Host name of the SAP instance where the table is located. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// External security product's library to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncLibraryPath interface{} `pulumi:"sncLibraryPath"`
	// SNC activation indicator to access the SAP server where the table is located. Must be either 0 (off) or 1 (on). Type: string (or Expression with resultType string).
	SncMode interface{} `pulumi:"sncMode"`
	// Initiator's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncMyName interface{} `pulumi:"sncMyName"`
	// Communication partner's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncPartnerName interface{} `pulumi:"sncPartnerName"`
	// SNC Quality of Protection. Allowed value include: 1, 2, 3, 8, 9. Type: string (or Expression with resultType string).
	SncQop interface{} `pulumi:"sncQop"`
	// The subscriber name. Type: string (or Expression with resultType string).
	SubscriberName interface{} `pulumi:"subscriberName"`
	// SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
	SystemId interface{} `pulumi:"systemId"`
	// System number of the SAP system where the table is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
	SystemNumber interface{} `pulumi:"systemNumber"`
	// Type of linked service.
	// Expected value is 'SapOdp'.
	Type string `pulumi:"type"`
	// Username to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
	// SNC X509 certificate file path. Type: string (or Expression with resultType string).
	X509CertificatePath interface{} `pulumi:"x509CertificatePath"`
}

// SAP ODP Linked Service.
type SapOdpLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Client ID of the client on the SAP system where the table is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Language of the SAP system where the table is located. The default value is EN. Type: string (or Expression with resultType string).
	Language interface{} `pulumi:"language"`
	// The Logon Group for the SAP System. Type: string (or Expression with resultType string).
	LogonGroup interface{} `pulumi:"logonGroup"`
	// The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
	MessageServer interface{} `pulumi:"messageServer"`
	// The service name or port number of the Message Server. Type: string (or Expression with resultType string).
	MessageServerService interface{} `pulumi:"messageServerService"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to access the SAP server where the table is located.
	Password interface{} `pulumi:"password"`
	// Host name of the SAP instance where the table is located. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// External security product's library to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncLibraryPath interface{} `pulumi:"sncLibraryPath"`
	// SNC activation indicator to access the SAP server where the table is located. Must be either 0 (off) or 1 (on). Type: string (or Expression with resultType string).
	SncMode interface{} `pulumi:"sncMode"`
	// Initiator's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncMyName interface{} `pulumi:"sncMyName"`
	// Communication partner's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncPartnerName interface{} `pulumi:"sncPartnerName"`
	// SNC Quality of Protection. Allowed value include: 1, 2, 3, 8, 9. Type: string (or Expression with resultType string).
	SncQop interface{} `pulumi:"sncQop"`
	// The subscriber name. Type: string (or Expression with resultType string).
	SubscriberName interface{} `pulumi:"subscriberName"`
	// SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
	SystemId interface{} `pulumi:"systemId"`
	// System number of the SAP system where the table is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
	SystemNumber interface{} `pulumi:"systemNumber"`
	// Type of linked service.
	// Expected value is 'SapOdp'.
	Type string `pulumi:"type"`
	// Username to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
	// SNC X509 certificate file path. Type: string (or Expression with resultType string).
	X509CertificatePath interface{} `pulumi:"x509CertificatePath"`
}

// SAP ODP Resource properties.
type SapOdpResourceDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The context of the SAP ODP Object. Type: string (or Expression with resultType string).
	Context interface{} `pulumi:"context"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The name of the SAP ODP Object. Type: string (or Expression with resultType string).
	ObjectName interface{} `pulumi:"objectName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SapOdpResource'.
	Type string `pulumi:"type"`
}

// SAP ODP Resource properties.
type SapOdpResourceDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The context of the SAP ODP Object. Type: string (or Expression with resultType string).
	Context interface{} `pulumi:"context"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The name of the SAP ODP Object. Type: string (or Expression with resultType string).
	ObjectName interface{} `pulumi:"objectName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SapOdpResource'.
	Type string `pulumi:"type"`
}

// A copy activity source for SAP ODP source.
type SapOdpSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The extraction mode. Allowed value include: Full, Delta and Recovery. The default value is Full. Type: string (or Expression with resultType string).
	ExtractionMode interface{} `pulumi:"extractionMode"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specifies the columns to be selected from source data. Type: array of objects(projection) (or Expression with resultType array of objects).
	Projection interface{} `pulumi:"projection"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Specifies the selection conditions from source data. Type: array of objects(selection) (or Expression with resultType array of objects).
	Selection interface{} `pulumi:"selection"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// The subscriber process to manage the delta process. Type: string (or Expression with resultType string).
	SubscriberProcess interface{} `pulumi:"subscriberProcess"`
	// Copy source type.
	// Expected value is 'SapOdpSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for SAP ODP source.
type SapOdpSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The extraction mode. Allowed value include: Full, Delta and Recovery. The default value is Full. Type: string (or Expression with resultType string).
	ExtractionMode interface{} `pulumi:"extractionMode"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specifies the columns to be selected from source data. Type: array of objects(projection) (or Expression with resultType array of objects).
	Projection interface{} `pulumi:"projection"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Specifies the selection conditions from source data. Type: array of objects(selection) (or Expression with resultType array of objects).
	Selection interface{} `pulumi:"selection"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// The subscriber process to manage the delta process. Type: string (or Expression with resultType string).
	SubscriberProcess interface{} `pulumi:"subscriberProcess"`
	// Copy source type.
	// Expected value is 'SapOdpSource'.
	Type string `pulumi:"type"`
}

// SAP Business Warehouse Open Hub Destination Linked Service.
type SapOpenHubLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Client ID of the client on the BW system where the open hub destination is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Language of the BW system where the open hub destination is located. The default value is EN. Type: string (or Expression with resultType string).
	Language interface{} `pulumi:"language"`
	// The Logon Group for the SAP System. Type: string (or Expression with resultType string).
	LogonGroup interface{} `pulumi:"logonGroup"`
	// The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
	MessageServer interface{} `pulumi:"messageServer"`
	// The service name or port number of the Message Server. Type: string (or Expression with resultType string).
	MessageServerService interface{} `pulumi:"messageServerService"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to access the SAP BW server where the open hub destination is located.
	Password interface{} `pulumi:"password"`
	// Host name of the SAP BW instance where the open hub destination is located. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
	SystemId interface{} `pulumi:"systemId"`
	// System number of the BW system where the open hub destination is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
	SystemNumber interface{} `pulumi:"systemNumber"`
	// Type of linked service.
	// Expected value is 'SapOpenHub'.
	Type string `pulumi:"type"`
	// Username to access the SAP BW server where the open hub destination is located. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// SAP Business Warehouse Open Hub Destination Linked Service.
type SapOpenHubLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Client ID of the client on the BW system where the open hub destination is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Language of the BW system where the open hub destination is located. The default value is EN. Type: string (or Expression with resultType string).
	Language interface{} `pulumi:"language"`
	// The Logon Group for the SAP System. Type: string (or Expression with resultType string).
	LogonGroup interface{} `pulumi:"logonGroup"`
	// The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
	MessageServer interface{} `pulumi:"messageServer"`
	// The service name or port number of the Message Server. Type: string (or Expression with resultType string).
	MessageServerService interface{} `pulumi:"messageServerService"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to access the SAP BW server where the open hub destination is located.
	Password interface{} `pulumi:"password"`
	// Host name of the SAP BW instance where the open hub destination is located. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
	SystemId interface{} `pulumi:"systemId"`
	// System number of the BW system where the open hub destination is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
	SystemNumber interface{} `pulumi:"systemNumber"`
	// Type of linked service.
	// Expected value is 'SapOpenHub'.
	Type string `pulumi:"type"`
	// Username to access the SAP BW server where the open hub destination is located. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// A copy activity source for SAP Business Warehouse Open Hub Destination source.
type SapOpenHubSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// The ID of request for delta loading. Once it is set, only data with requestId larger than the value of this property will be retrieved. The default value is 0. Type: integer (or Expression with resultType integer ).
	BaseRequestId interface{} `pulumi:"baseRequestId"`
	// Specifies the custom RFC function module that will be used to read data from SAP Table. Type: string (or Expression with resultType string).
	CustomRfcReadTableFunctionModule interface{} `pulumi:"customRfcReadTableFunctionModule"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Whether to exclude the records of the last request. The default value is true. Type: boolean (or Expression with resultType boolean).
	ExcludeLastRequest interface{} `pulumi:"excludeLastRequest"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// The single character that will be used as delimiter passed to SAP RFC as well as splitting the output data retrieved. Type: string (or Expression with resultType string).
	SapDataColumnDelimiter interface{} `pulumi:"sapDataColumnDelimiter"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SapOpenHubSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for SAP Business Warehouse Open Hub Destination source.
type SapOpenHubSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// The ID of request for delta loading. Once it is set, only data with requestId larger than the value of this property will be retrieved. The default value is 0. Type: integer (or Expression with resultType integer ).
	BaseRequestId interface{} `pulumi:"baseRequestId"`
	// Specifies the custom RFC function module that will be used to read data from SAP Table. Type: string (or Expression with resultType string).
	CustomRfcReadTableFunctionModule interface{} `pulumi:"customRfcReadTableFunctionModule"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Whether to exclude the records of the last request. The default value is true. Type: boolean (or Expression with resultType boolean).
	ExcludeLastRequest interface{} `pulumi:"excludeLastRequest"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// The single character that will be used as delimiter passed to SAP RFC as well as splitting the output data retrieved. Type: string (or Expression with resultType string).
	SapDataColumnDelimiter interface{} `pulumi:"sapDataColumnDelimiter"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SapOpenHubSource'.
	Type string `pulumi:"type"`
}

// Sap Business Warehouse Open Hub Destination Table properties.
type SapOpenHubTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The ID of request for delta loading. Once it is set, only data with requestId larger than the value of this property will be retrieved. The default value is 0. Type: integer (or Expression with resultType integer ).
	BaseRequestId interface{} `pulumi:"baseRequestId"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Whether to exclude the records of the last request. The default value is true. Type: boolean (or Expression with resultType boolean).
	ExcludeLastRequest interface{} `pulumi:"excludeLastRequest"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The name of the Open Hub Destination with destination type as Database Table. Type: string (or Expression with resultType string).
	OpenHubDestinationName interface{} `pulumi:"openHubDestinationName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SapOpenHubTable'.
	Type string `pulumi:"type"`
}

// Sap Business Warehouse Open Hub Destination Table properties.
type SapOpenHubTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The ID of request for delta loading. Once it is set, only data with requestId larger than the value of this property will be retrieved. The default value is 0. Type: integer (or Expression with resultType integer ).
	BaseRequestId interface{} `pulumi:"baseRequestId"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Whether to exclude the records of the last request. The default value is true. Type: boolean (or Expression with resultType boolean).
	ExcludeLastRequest interface{} `pulumi:"excludeLastRequest"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The name of the Open Hub Destination with destination type as Database Table. Type: string (or Expression with resultType string).
	OpenHubDestinationName interface{} `pulumi:"openHubDestinationName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SapOpenHubTable'.
	Type string `pulumi:"type"`
}

// SAP Table Linked Service.
type SapTableLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Client ID of the client on the SAP system where the table is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Language of the SAP system where the table is located. The default value is EN. Type: string (or Expression with resultType string).
	Language interface{} `pulumi:"language"`
	// The Logon Group for the SAP System. Type: string (or Expression with resultType string).
	LogonGroup interface{} `pulumi:"logonGroup"`
	// The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
	MessageServer interface{} `pulumi:"messageServer"`
	// The service name or port number of the Message Server. Type: string (or Expression with resultType string).
	MessageServerService interface{} `pulumi:"messageServerService"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to access the SAP server where the table is located.
	Password interface{} `pulumi:"password"`
	// Host name of the SAP instance where the table is located. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// External security product's library to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncLibraryPath interface{} `pulumi:"sncLibraryPath"`
	// SNC activation indicator to access the SAP server where the table is located. Must be either 0 (off) or 1 (on). Type: string (or Expression with resultType string).
	SncMode interface{} `pulumi:"sncMode"`
	// Initiator's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncMyName interface{} `pulumi:"sncMyName"`
	// Communication partner's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncPartnerName interface{} `pulumi:"sncPartnerName"`
	// SNC Quality of Protection. Allowed value include: 1, 2, 3, 8, 9. Type: string (or Expression with resultType string).
	SncQop interface{} `pulumi:"sncQop"`
	// SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
	SystemId interface{} `pulumi:"systemId"`
	// System number of the SAP system where the table is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
	SystemNumber interface{} `pulumi:"systemNumber"`
	// Type of linked service.
	// Expected value is 'SapTable'.
	Type string `pulumi:"type"`
	// Username to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// SAP Table Linked Service.
type SapTableLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Client ID of the client on the SAP system where the table is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Language of the SAP system where the table is located. The default value is EN. Type: string (or Expression with resultType string).
	Language interface{} `pulumi:"language"`
	// The Logon Group for the SAP System. Type: string (or Expression with resultType string).
	LogonGroup interface{} `pulumi:"logonGroup"`
	// The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
	MessageServer interface{} `pulumi:"messageServer"`
	// The service name or port number of the Message Server. Type: string (or Expression with resultType string).
	MessageServerService interface{} `pulumi:"messageServerService"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to access the SAP server where the table is located.
	Password interface{} `pulumi:"password"`
	// Host name of the SAP instance where the table is located. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// External security product's library to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncLibraryPath interface{} `pulumi:"sncLibraryPath"`
	// SNC activation indicator to access the SAP server where the table is located. Must be either 0 (off) or 1 (on). Type: string (or Expression with resultType string).
	SncMode interface{} `pulumi:"sncMode"`
	// Initiator's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncMyName interface{} `pulumi:"sncMyName"`
	// Communication partner's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncPartnerName interface{} `pulumi:"sncPartnerName"`
	// SNC Quality of Protection. Allowed value include: 1, 2, 3, 8, 9. Type: string (or Expression with resultType string).
	SncQop interface{} `pulumi:"sncQop"`
	// SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
	SystemId interface{} `pulumi:"systemId"`
	// System number of the SAP system where the table is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
	SystemNumber interface{} `pulumi:"systemNumber"`
	// Type of linked service.
	// Expected value is 'SapTable'.
	Type string `pulumi:"type"`
	// Username to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// The settings that will be leveraged for SAP table source partitioning.
type SapTablePartitionSettings struct {
	// The maximum value of partitions the table will be split into. Type: integer (or Expression with resultType string).
	MaxPartitionsNumber interface{} `pulumi:"maxPartitionsNumber"`
	// The name of the column that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionColumnName interface{} `pulumi:"partitionColumnName"`
	// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionLowerBound interface{} `pulumi:"partitionLowerBound"`
	// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionUpperBound interface{} `pulumi:"partitionUpperBound"`
}

// The settings that will be leveraged for SAP table source partitioning.
type SapTablePartitionSettingsResponse struct {
	// The maximum value of partitions the table will be split into. Type: integer (or Expression with resultType string).
	MaxPartitionsNumber interface{} `pulumi:"maxPartitionsNumber"`
	// The name of the column that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionColumnName interface{} `pulumi:"partitionColumnName"`
	// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionLowerBound interface{} `pulumi:"partitionLowerBound"`
	// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionUpperBound interface{} `pulumi:"partitionUpperBound"`
}

// SAP Table Resource properties.
type SapTableResourceDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The name of the SAP Table. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'SapTableResource'.
	Type string `pulumi:"type"`
}

// SAP Table Resource properties.
type SapTableResourceDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The name of the SAP Table. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'SapTableResource'.
	Type string `pulumi:"type"`
}

// A copy activity source for SAP Table source.
type SapTableSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// Specifies the maximum number of rows that will be retrieved at a time when retrieving data from SAP Table. Type: integer (or Expression with resultType integer).
	BatchSize interface{} `pulumi:"batchSize"`
	// Specifies the custom RFC function module that will be used to read data from SAP Table. Type: string (or Expression with resultType string).
	CustomRfcReadTableFunctionModule interface{} `pulumi:"customRfcReadTableFunctionModule"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for SAP table read in parallel. Possible values include: "None", "PartitionOnInt", "PartitionOnCalendarYear", "PartitionOnCalendarMonth", "PartitionOnCalendarDate", "PartitionOnTime".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for SAP table source partitioning.
	PartitionSettings *SapTablePartitionSettings `pulumi:"partitionSettings"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// The fields of the SAP table that will be retrieved. For example, column0, column1. Type: string (or Expression with resultType string).
	RfcTableFields interface{} `pulumi:"rfcTableFields"`
	// The options for the filtering of the SAP Table. For example, COLUMN0 EQ SOME VALUE. Type: string (or Expression with resultType string).
	RfcTableOptions interface{} `pulumi:"rfcTableOptions"`
	// The number of rows to be retrieved. Type: integer(or Expression with resultType integer).
	RowCount interface{} `pulumi:"rowCount"`
	// The number of rows that will be skipped. Type: integer (or Expression with resultType integer).
	RowSkips interface{} `pulumi:"rowSkips"`
	// The single character that will be used as delimiter passed to SAP RFC as well as splitting the output data retrieved. Type: string (or Expression with resultType string).
	SapDataColumnDelimiter interface{} `pulumi:"sapDataColumnDelimiter"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SapTableSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for SAP Table source.
type SapTableSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// Specifies the maximum number of rows that will be retrieved at a time when retrieving data from SAP Table. Type: integer (or Expression with resultType integer).
	BatchSize interface{} `pulumi:"batchSize"`
	// Specifies the custom RFC function module that will be used to read data from SAP Table. Type: string (or Expression with resultType string).
	CustomRfcReadTableFunctionModule interface{} `pulumi:"customRfcReadTableFunctionModule"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for SAP table read in parallel. Possible values include: "None", "PartitionOnInt", "PartitionOnCalendarYear", "PartitionOnCalendarMonth", "PartitionOnCalendarDate", "PartitionOnTime".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for SAP table source partitioning.
	PartitionSettings *SapTablePartitionSettingsResponse `pulumi:"partitionSettings"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// The fields of the SAP table that will be retrieved. For example, column0, column1. Type: string (or Expression with resultType string).
	RfcTableFields interface{} `pulumi:"rfcTableFields"`
	// The options for the filtering of the SAP Table. For example, COLUMN0 EQ SOME VALUE. Type: string (or Expression with resultType string).
	RfcTableOptions interface{} `pulumi:"rfcTableOptions"`
	// The number of rows to be retrieved. Type: integer(or Expression with resultType integer).
	RowCount interface{} `pulumi:"rowCount"`
	// The number of rows that will be skipped. Type: integer (or Expression with resultType integer).
	RowSkips interface{} `pulumi:"rowSkips"`
	// The single character that will be used as delimiter passed to SAP RFC as well as splitting the output data retrieved. Type: string (or Expression with resultType string).
	SapDataColumnDelimiter interface{} `pulumi:"sapDataColumnDelimiter"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SapTableSource'.
	Type string `pulumi:"type"`
}

// Trigger that creates pipeline runs periodically, on schedule.
type ScheduleTrigger struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// Pipelines that need to be started.
	Pipelines []TriggerPipelineReference `pulumi:"pipelines"`
	// Recurrence schedule configuration.
	Recurrence ScheduleTriggerRecurrence `pulumi:"recurrence"`
	// Trigger type.
	// Expected value is 'ScheduleTrigger'.
	Type string `pulumi:"type"`
}

// The workflow trigger recurrence.
type ScheduleTriggerRecurrence struct {
	// The end time.
	EndTime *string `pulumi:"endTime"`
	// The frequency.
	Frequency *string `pulumi:"frequency"`
	// The interval.
	Interval *int `pulumi:"interval"`
	// The recurrence schedule.
	Schedule *RecurrenceSchedule `pulumi:"schedule"`
	// The start time.
	StartTime *string `pulumi:"startTime"`
	// The time zone.
	TimeZone *string `pulumi:"timeZone"`
}

// The workflow trigger recurrence.
type ScheduleTriggerRecurrenceResponse struct {
	// The end time.
	EndTime *string `pulumi:"endTime"`
	// The frequency.
	Frequency *string `pulumi:"frequency"`
	// The interval.
	Interval *int `pulumi:"interval"`
	// The recurrence schedule.
	Schedule *RecurrenceScheduleResponse `pulumi:"schedule"`
	// The start time.
	StartTime *string `pulumi:"startTime"`
	// The time zone.
	TimeZone *string `pulumi:"timeZone"`
}

// Trigger that creates pipeline runs periodically, on schedule.
type ScheduleTriggerResponse struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// Pipelines that need to be started.
	Pipelines []TriggerPipelineReferenceResponse `pulumi:"pipelines"`
	// Recurrence schedule configuration.
	Recurrence ScheduleTriggerRecurrenceResponse `pulumi:"recurrence"`
	// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState string `pulumi:"runtimeState"`
	// Trigger type.
	// Expected value is 'ScheduleTrigger'.
	Type string `pulumi:"type"`
}

// Custom script action to run on HDI ondemand cluster once it's up.
type ScriptAction struct {
	// The user provided name of the script action.
	Name string `pulumi:"name"`
	// The parameters for the script action.
	Parameters *string `pulumi:"parameters"`
	// The node types on which the script action should be executed.
	Roles interface{} `pulumi:"roles"`
	// The URI for the script action.
	Uri string `pulumi:"uri"`
}

// Custom script action to run on HDI ondemand cluster once it's up.
type ScriptActionResponse struct {
	// The user provided name of the script action.
	Name string `pulumi:"name"`
	// The parameters for the script action.
	Parameters *string `pulumi:"parameters"`
	// The node types on which the script action should be executed.
	Roles interface{} `pulumi:"roles"`
	// The URI for the script action.
	Uri string `pulumi:"uri"`
}

// Script activity type.
type ScriptActivity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Log settings of script activity.
	LogSettings *ScriptActivityTypePropertiesLogSettings `pulumi:"logSettings"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// ScriptBlock execution timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	ScriptBlockExecutionTimeout interface{} `pulumi:"scriptBlockExecutionTimeout"`
	// Array of script blocks. Type: array.
	Scripts []ScriptActivityScriptBlock `pulumi:"scripts"`
	// Type of activity.
	// Expected value is 'Script'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// Parameters of a script block.
type ScriptActivityParameter struct {
	// The direction of the parameter.
	Direction *string `pulumi:"direction"`
	// The name of the parameter. Type: string (or Expression with resultType string).
	Name interface{} `pulumi:"name"`
	// The size of the output direction parameter.
	Size *int `pulumi:"size"`
	// The type of the parameter.
	Type *string `pulumi:"type"`
	// The value of the parameter.
	Value interface{} `pulumi:"value"`
}

// Parameters of a script block.
type ScriptActivityParameterResponse struct {
	// The direction of the parameter.
	Direction *string `pulumi:"direction"`
	// The name of the parameter. Type: string (or Expression with resultType string).
	Name interface{} `pulumi:"name"`
	// The size of the output direction parameter.
	Size *int `pulumi:"size"`
	// The type of the parameter.
	Type *string `pulumi:"type"`
	// The value of the parameter.
	Value interface{} `pulumi:"value"`
}

// Script activity type.
type ScriptActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Log settings of script activity.
	LogSettings *ScriptActivityTypePropertiesResponseLogSettings `pulumi:"logSettings"`
	// Activity name.
	Name string `pulumi:"name"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// ScriptBlock execution timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	ScriptBlockExecutionTimeout interface{} `pulumi:"scriptBlockExecutionTimeout"`
	// Array of script blocks. Type: array.
	Scripts []ScriptActivityScriptBlockResponse `pulumi:"scripts"`
	// Type of activity.
	// Expected value is 'Script'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Script block of scripts.
type ScriptActivityScriptBlock struct {
	// Array of script parameters. Type: array.
	Parameters []ScriptActivityParameter `pulumi:"parameters"`
	// The query text. Type: string (or Expression with resultType string).
	Text interface{} `pulumi:"text"`
	// The type of the query. Type: string.
	Type string `pulumi:"type"`
}

// Script block of scripts.
type ScriptActivityScriptBlockResponse struct {
	// Array of script parameters. Type: array.
	Parameters []ScriptActivityParameterResponse `pulumi:"parameters"`
	// The query text. Type: string (or Expression with resultType string).
	Text interface{} `pulumi:"text"`
	// The type of the query. Type: string.
	Type string `pulumi:"type"`
}

// Log settings of script activity.
type ScriptActivityTypePropertiesLogSettings struct {
	// The destination of logs. Type: string.
	LogDestination string `pulumi:"logDestination"`
	// Log location settings customer needs to provide when enabling log.
	LogLocationSettings *LogLocationSettings `pulumi:"logLocationSettings"`
}

// Log settings of script activity.
type ScriptActivityTypePropertiesResponseLogSettings struct {
	// The destination of logs. Type: string.
	LogDestination string `pulumi:"logDestination"`
	// Log location settings customer needs to provide when enabling log.
	LogLocationSettings *LogLocationSettingsResponse `pulumi:"logLocationSettings"`
}

// Azure Data Factory secure string definition. The string value will be masked with asterisks '*' during Get or List API calls.
type SecureString struct {
	// Type of the secret.
	// Expected value is 'SecureString'.
	Type string `pulumi:"type"`
	// Value of secure string.
	Value string `pulumi:"value"`
}

// Azure Data Factory secure string definition. The string value will be masked with asterisks '*' during Get or List API calls.
type SecureStringResponse struct {
	// Type of the secret.
	// Expected value is 'SecureString'.
	Type string `pulumi:"type"`
	// Value of secure string.
	Value string `pulumi:"value"`
}

// Self referenced tumbling window trigger dependency.
type SelfDependencyTumblingWindowTriggerReference struct {
	// Timespan applied to the start time of a tumbling window when evaluating dependency.
	Offset string `pulumi:"offset"`
	// The size of the window when evaluating the dependency. If undefined the frequency of the tumbling window will be used.
	Size *string `pulumi:"size"`
	// The type of dependency reference.
	// Expected value is 'SelfDependencyTumblingWindowTriggerReference'.
	Type string `pulumi:"type"`
}

// Self referenced tumbling window trigger dependency.
type SelfDependencyTumblingWindowTriggerReferenceResponse struct {
	// Timespan applied to the start time of a tumbling window when evaluating dependency.
	Offset string `pulumi:"offset"`
	// The size of the window when evaluating the dependency. If undefined the frequency of the tumbling window will be used.
	Size *string `pulumi:"size"`
	// The type of dependency reference.
	// Expected value is 'SelfDependencyTumblingWindowTriggerReference'.
	Type string `pulumi:"type"`
}

// Self-hosted integration runtime.
type SelfHostedIntegrationRuntime struct {
	// Integration runtime description.
	Description *string `pulumi:"description"`
	// The base definition of a linked integration runtime.
	LinkedInfo interface{} `pulumi:"linkedInfo"`
	// The type of integration runtime.
	// Expected value is 'SelfHosted'.
	Type string `pulumi:"type"`
}

// Properties of Self-hosted integration runtime node.
type SelfHostedIntegrationRuntimeNodeResponse struct {
	// The integration runtime capabilities dictionary
	Capabilities map[string]string `pulumi:"capabilities"`
	// Maximum concurrent jobs on the integration runtime node.
	ConcurrentJobsLimit int `pulumi:"concurrentJobsLimit"`
	// The time at which the integration runtime will expire in ISO8601 format.
	ExpiryTime string `pulumi:"expiryTime"`
	// URI for the host machine of the integration runtime.
	HostServiceUri string `pulumi:"hostServiceUri"`
	// Indicates whether this node is the active dispatcher for integration runtime requests.
	IsActiveDispatcher bool `pulumi:"isActiveDispatcher"`
	// The most recent time at which the integration runtime was connected in ISO8601 format.
	LastConnectTime string `pulumi:"lastConnectTime"`
	// The last time for the integration runtime node update end.
	LastEndUpdateTime string `pulumi:"lastEndUpdateTime"`
	// The time the node last started up.
	LastStartTime string `pulumi:"lastStartTime"`
	// The last time for the integration runtime node update start.
	LastStartUpdateTime string `pulumi:"lastStartUpdateTime"`
	// The integration runtime node last stop time.
	LastStopTime string `pulumi:"lastStopTime"`
	// The result of the last integration runtime node update.
	LastUpdateResult string `pulumi:"lastUpdateResult"`
	// Machine name of the integration runtime node.
	MachineName string `pulumi:"machineName"`
	// The maximum concurrent jobs in this integration runtime.
	MaxConcurrentJobs int `pulumi:"maxConcurrentJobs"`
	// Name of the integration runtime node.
	NodeName string `pulumi:"nodeName"`
	// The time at which the integration runtime node was registered in ISO8601 format.
	RegisterTime string `pulumi:"registerTime"`
	// Status of the integration runtime node.
	Status string `pulumi:"status"`
	// Version of the integration runtime node.
	Version string `pulumi:"version"`
	// Status of the integration runtime node version.
	VersionStatus string `pulumi:"versionStatus"`
}

// Self-hosted integration runtime.
type SelfHostedIntegrationRuntimeResponse struct {
	// Integration runtime description.
	Description *string `pulumi:"description"`
	// The base definition of a linked integration runtime.
	LinkedInfo interface{} `pulumi:"linkedInfo"`
	// The type of integration runtime.
	// Expected value is 'SelfHosted'.
	Type string `pulumi:"type"`
}

// Self-hosted integration runtime status.
type SelfHostedIntegrationRuntimeStatusResponse struct {
	// Whether Self-hosted integration runtime auto update has been turned on.
	AutoUpdate string `pulumi:"autoUpdate"`
	// The estimated time when the self-hosted integration runtime will be updated.
	AutoUpdateETA string `pulumi:"autoUpdateETA"`
	// Object with additional information about integration runtime capabilities.
	Capabilities map[string]string `pulumi:"capabilities"`
	// The time at which the integration runtime was created, in ISO8601 format.
	CreateTime string `pulumi:"createTime"`
	// The data factory name which the integration runtime belong to.
	DataFactoryName string `pulumi:"dataFactoryName"`
	// It is used to set the encryption mode for node-node communication channel (when more than 2 self-hosted integration runtime nodes exist).
	InternalChannelEncryption string `pulumi:"internalChannelEncryption"`
	// The latest version on download center.
	LatestVersion string `pulumi:"latestVersion"`
	// The list of linked integration runtimes that are created to share with this integration runtime.
	Links []LinkedIntegrationRuntimeResponse `pulumi:"links"`
	// The local time zone offset in hours.
	LocalTimeZoneOffset string `pulumi:"localTimeZoneOffset"`
	// The list of nodes for this integration runtime.
	Nodes []SelfHostedIntegrationRuntimeNodeResponse `pulumi:"nodes"`
	// The version that the integration runtime is going to update to.
	PushedVersion string `pulumi:"pushedVersion"`
	// The date at which the integration runtime will be scheduled to update, in ISO8601 format.
	ScheduledUpdateDate string `pulumi:"scheduledUpdateDate"`
	// The URLs for the services used in integration runtime backend service.
	ServiceUrls []string `pulumi:"serviceUrls"`
	// The state of integration runtime.
	State string `pulumi:"state"`
	// The task queue id of the integration runtime.
	TaskQueueId string `pulumi:"taskQueueId"`
	// The type of integration runtime.
	// Expected value is 'SelfHosted'.
	Type string `pulumi:"type"`
	// The time in the date scheduled by service to update the integration runtime, e.g., PT03H is 3 hours
	UpdateDelayOffset string `pulumi:"updateDelayOffset"`
	// Version of the integration runtime.
	Version string `pulumi:"version"`
	// Status of the integration runtime version.
	VersionStatus string `pulumi:"versionStatus"`
}

// ServiceNow server linked service.
type ServiceNowLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to use.
	AuthenticationType string `pulumi:"authenticationType"`
	// The client id for OAuth2 authentication.
	ClientId interface{} `pulumi:"clientId"`
	// The client secret for OAuth2 authentication.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the ServiceNow server. (i.e. <instance>.service-now.com)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name for Basic and OAuth2 authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'ServiceNow'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
	// The user name used to connect to the ServiceNow server for Basic and OAuth2 authentication.
	Username interface{} `pulumi:"username"`
}

// ServiceNow server linked service.
type ServiceNowLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to use.
	AuthenticationType string `pulumi:"authenticationType"`
	// The client id for OAuth2 authentication.
	ClientId interface{} `pulumi:"clientId"`
	// The client secret for OAuth2 authentication.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the ServiceNow server. (i.e. <instance>.service-now.com)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name for Basic and OAuth2 authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'ServiceNow'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
	// The user name used to connect to the ServiceNow server for Basic and OAuth2 authentication.
	Username interface{} `pulumi:"username"`
}

// ServiceNow server dataset.
type ServiceNowObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'ServiceNowObject'.
	Type string `pulumi:"type"`
}

// ServiceNow server dataset.
type ServiceNowObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'ServiceNowObject'.
	Type string `pulumi:"type"`
}

// A copy activity ServiceNow server source.
type ServiceNowSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ServiceNowSource'.
	Type string `pulumi:"type"`
}

// A copy activity ServiceNow server source.
type ServiceNowSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ServiceNowSource'.
	Type string `pulumi:"type"`
}

// Set value for a Variable.
type SetVariableActivity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Activity name.
	Name string `pulumi:"name"`
	// Type of activity.
	// Expected value is 'SetVariable'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
	// Value to be set. Could be a static value or Expression
	Value interface{} `pulumi:"value"`
	// Name of the variable whose value needs to be set.
	VariableName *string `pulumi:"variableName"`
}

// Set value for a Variable.
type SetVariableActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Activity name.
	Name string `pulumi:"name"`
	// Type of activity.
	// Expected value is 'SetVariable'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
	// Value to be set. Could be a static value or Expression
	Value interface{} `pulumi:"value"`
	// Name of the variable whose value needs to be set.
	VariableName *string `pulumi:"variableName"`
}

// The location of SFTP dataset.
type SftpLocation struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'SftpLocation'.
	Type string `pulumi:"type"`
}

// The location of SFTP dataset.
type SftpLocationResponse struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'SftpLocation'.
	Type string `pulumi:"type"`
}

// Sftp read settings.
type SftpReadSettings struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable parallel reading within each file. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableChunking interface{} `pulumi:"disableChunking"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery.
	EnablePartitionDiscovery *bool `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'SftpReadSettings'.
	Type string `pulumi:"type"`
	// Sftp wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Sftp wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// Sftp read settings.
type SftpReadSettingsResponse struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable parallel reading within each file. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableChunking interface{} `pulumi:"disableChunking"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery.
	EnablePartitionDiscovery *bool `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'SftpReadSettings'.
	Type string `pulumi:"type"`
	// Sftp wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Sftp wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// A linked service for an SSH File Transfer Protocol (SFTP) server.
type SftpServerLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to be used to connect to the FTP server.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The SFTP server host name. Type: string (or Expression with resultType string).
	Host interface{} `pulumi:"host"`
	// The host key finger-print of the SFTP server. When SkipHostKeyValidation is false, HostKeyFingerprint should be specified. Type: string (or Expression with resultType string).
	HostKeyFingerprint interface{} `pulumi:"hostKeyFingerprint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password to decrypt the SSH private key if the SSH private key is encrypted.
	PassPhrase interface{} `pulumi:"passPhrase"`
	// Password to logon the SFTP server for Basic authentication.
	Password interface{} `pulumi:"password"`
	// The TCP port number that the SFTP server uses to listen for client connections. Default value is 22. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// Base64 encoded SSH private key content for SshPublicKey authentication. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format.
	PrivateKeyContent interface{} `pulumi:"privateKeyContent"`
	// The SSH private key file path for SshPublicKey authentication. Only valid for on-premises copy. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format. Type: string (or Expression with resultType string).
	PrivateKeyPath interface{} `pulumi:"privateKeyPath"`
	// If true, skip the SSH host key validation. Default value is false. Type: boolean (or Expression with resultType boolean).
	SkipHostKeyValidation interface{} `pulumi:"skipHostKeyValidation"`
	// Type of linked service.
	// Expected value is 'Sftp'.
	Type string `pulumi:"type"`
	// The username used to log on to the SFTP server. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// A linked service for an SSH File Transfer Protocol (SFTP) server.
type SftpServerLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to be used to connect to the FTP server.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The SFTP server host name. Type: string (or Expression with resultType string).
	Host interface{} `pulumi:"host"`
	// The host key finger-print of the SFTP server. When SkipHostKeyValidation is false, HostKeyFingerprint should be specified. Type: string (or Expression with resultType string).
	HostKeyFingerprint interface{} `pulumi:"hostKeyFingerprint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password to decrypt the SSH private key if the SSH private key is encrypted.
	PassPhrase interface{} `pulumi:"passPhrase"`
	// Password to logon the SFTP server for Basic authentication.
	Password interface{} `pulumi:"password"`
	// The TCP port number that the SFTP server uses to listen for client connections. Default value is 22. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// Base64 encoded SSH private key content for SshPublicKey authentication. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format.
	PrivateKeyContent interface{} `pulumi:"privateKeyContent"`
	// The SSH private key file path for SshPublicKey authentication. Only valid for on-premises copy. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format. Type: string (or Expression with resultType string).
	PrivateKeyPath interface{} `pulumi:"privateKeyPath"`
	// If true, skip the SSH host key validation. Default value is false. Type: boolean (or Expression with resultType boolean).
	SkipHostKeyValidation interface{} `pulumi:"skipHostKeyValidation"`
	// Type of linked service.
	// Expected value is 'Sftp'.
	Type string `pulumi:"type"`
	// The username used to log on to the SFTP server. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// Sftp write settings.
type SftpWriteSettings struct {
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specifies the timeout for writing each chunk to SFTP server. Default value: 01:00:00 (one hour). Type: string (or Expression with resultType string).
	OperationTimeout interface{} `pulumi:"operationTimeout"`
	// The write setting type.
	// Expected value is 'SftpWriteSettings'.
	Type string `pulumi:"type"`
	// Upload to temporary file(s) and rename. Disable this option if your SFTP server doesn't support rename operation. Type: boolean (or Expression with resultType boolean).
	UseTempFileRename interface{} `pulumi:"useTempFileRename"`
}

// Sftp write settings.
type SftpWriteSettingsResponse struct {
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specifies the timeout for writing each chunk to SFTP server. Default value: 01:00:00 (one hour). Type: string (or Expression with resultType string).
	OperationTimeout interface{} `pulumi:"operationTimeout"`
	// The write setting type.
	// Expected value is 'SftpWriteSettings'.
	Type string `pulumi:"type"`
	// Upload to temporary file(s) and rename. Disable this option if your SFTP server doesn't support rename operation. Type: boolean (or Expression with resultType boolean).
	UseTempFileRename interface{} `pulumi:"useTempFileRename"`
}

// SharePoint Online List linked service.
type SharePointOnlineListLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The application (client) ID of your application registered in Azure Active Directory. Make sure to grant SharePoint site permission to this application. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The client secret of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The URL of the SharePoint Online site. For example, https://contoso.sharepoint.com/sites/siteName. Type: string (or Expression with resultType string).
	SiteUrl interface{} `pulumi:"siteUrl"`
	// The tenant ID under which your application resides. You can find it from Azure portal Active Directory overview page. Type: string (or Expression with resultType string).
	TenantId interface{} `pulumi:"tenantId"`
	// Type of linked service.
	// Expected value is 'SharePointOnlineList'.
	Type string `pulumi:"type"`
}

// SharePoint Online List linked service.
type SharePointOnlineListLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The application (client) ID of your application registered in Azure Active Directory. Make sure to grant SharePoint site permission to this application. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The client secret of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The URL of the SharePoint Online site. For example, https://contoso.sharepoint.com/sites/siteName. Type: string (or Expression with resultType string).
	SiteUrl interface{} `pulumi:"siteUrl"`
	// The tenant ID under which your application resides. You can find it from Azure portal Active Directory overview page. Type: string (or Expression with resultType string).
	TenantId interface{} `pulumi:"tenantId"`
	// Type of linked service.
	// Expected value is 'SharePointOnlineList'.
	Type string `pulumi:"type"`
}

// The sharepoint online list resource dataset.
type SharePointOnlineListResourceDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The name of the SharePoint Online list. Type: string (or Expression with resultType string).
	ListName interface{} `pulumi:"listName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SharePointOnlineListResource'.
	Type string `pulumi:"type"`
}

// The sharepoint online list resource dataset.
type SharePointOnlineListResourceDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The name of the SharePoint Online list. Type: string (or Expression with resultType string).
	ListName interface{} `pulumi:"listName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SharePointOnlineListResource'.
	Type string `pulumi:"type"`
}

// A copy activity source for sharePoint online list source.
type SharePointOnlineListSource struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The wait time to get a response from SharePoint Online. Default value is 5 minutes (00:05:00). Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The OData query to filter the data in SharePoint Online list. For example, "$top=1". Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SharePointOnlineListSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for sharePoint online list source.
type SharePointOnlineListSourceResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The wait time to get a response from SharePoint Online. Default value is 5 minutes (00:05:00). Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The OData query to filter the data in SharePoint Online list. For example, "$top=1". Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SharePointOnlineListSource'.
	Type string `pulumi:"type"`
}

// Shopify Service linked service.
type ShopifyLinkedService struct {
	// The API access token that can be used to access Shopify’s data. The token won't expire if it is offline mode.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Shopify server. (i.e. mystore.myshopify.com)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Shopify'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Shopify Service linked service.
type ShopifyLinkedServiceResponse struct {
	// The API access token that can be used to access Shopify’s data. The token won't expire if it is offline mode.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// The endpoint of the Shopify server. (i.e. mystore.myshopify.com)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Shopify'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Shopify Service dataset.
type ShopifyObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'ShopifyObject'.
	Type string `pulumi:"type"`
}

// Shopify Service dataset.
type ShopifyObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'ShopifyObject'.
	Type string `pulumi:"type"`
}

// A copy activity Shopify Service source.
type ShopifySource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ShopifySource'.
	Type string `pulumi:"type"`
}

// A copy activity Shopify Service source.
type ShopifySourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ShopifySource'.
	Type string `pulumi:"type"`
}

// Skip error file.
type SkipErrorFile struct {
	// Skip if source/sink file changed by other concurrent write. Default is false. Type: boolean (or Expression with resultType boolean).
	DataInconsistency interface{} `pulumi:"dataInconsistency"`
	// Skip if file is deleted by other client during copy. Default is true. Type: boolean (or Expression with resultType boolean).
	FileMissing interface{} `pulumi:"fileMissing"`
}

// Skip error file.
type SkipErrorFileResponse struct {
	// Skip if source/sink file changed by other concurrent write. Default is false. Type: boolean (or Expression with resultType boolean).
	DataInconsistency interface{} `pulumi:"dataInconsistency"`
	// Skip if file is deleted by other client during copy. Default is true. Type: boolean (or Expression with resultType boolean).
	FileMissing interface{} `pulumi:"fileMissing"`
}

// Linked service for Smartsheet.
type SmartsheetLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The api token for the Smartsheet source.
	ApiToken interface{} `pulumi:"apiToken"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Smartsheet'.
	Type string `pulumi:"type"`
}

// Linked service for Smartsheet.
type SmartsheetLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The api token for the Smartsheet source.
	ApiToken interface{} `pulumi:"apiToken"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Smartsheet'.
	Type string `pulumi:"type"`
}

// The snowflake dataset.
type SnowflakeDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Snowflake database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'SnowflakeTable'.
	Type string `pulumi:"type"`
}

// The snowflake dataset.
type SnowflakeDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Snowflake database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'SnowflakeTable'.
	Type string `pulumi:"type"`
}

// Snowflake export command settings.
type SnowflakeExportCopyCommand struct {
	// Additional copy options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalCopyOptions": { "DATE_FORMAT": "MM/DD/YYYY", "TIME_FORMAT": "'HH24:MI:SS.FF'" }
	AdditionalCopyOptions map[string]interface{} `pulumi:"additionalCopyOptions"`
	// Additional format options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalFormatOptions": { "OVERWRITE": "TRUE", "MAX_FILE_SIZE": "'FALSE'" }
	AdditionalFormatOptions map[string]interface{} `pulumi:"additionalFormatOptions"`
	// The export setting type.
	// Expected value is 'SnowflakeExportCopyCommand'.
	Type string `pulumi:"type"`
}

// Snowflake export command settings.
type SnowflakeExportCopyCommandResponse struct {
	// Additional copy options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalCopyOptions": { "DATE_FORMAT": "MM/DD/YYYY", "TIME_FORMAT": "'HH24:MI:SS.FF'" }
	AdditionalCopyOptions map[string]interface{} `pulumi:"additionalCopyOptions"`
	// Additional format options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalFormatOptions": { "OVERWRITE": "TRUE", "MAX_FILE_SIZE": "'FALSE'" }
	AdditionalFormatOptions map[string]interface{} `pulumi:"additionalFormatOptions"`
	// The export setting type.
	// Expected value is 'SnowflakeExportCopyCommand'.
	Type string `pulumi:"type"`
}

// Snowflake import command settings.
type SnowflakeImportCopyCommand struct {
	// Additional copy options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalCopyOptions": { "DATE_FORMAT": "MM/DD/YYYY", "TIME_FORMAT": "'HH24:MI:SS.FF'" }
	AdditionalCopyOptions map[string]interface{} `pulumi:"additionalCopyOptions"`
	// Additional format options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalFormatOptions": { "FORCE": "TRUE", "LOAD_UNCERTAIN_FILES": "'FALSE'" }
	AdditionalFormatOptions map[string]interface{} `pulumi:"additionalFormatOptions"`
	// The import setting type.
	// Expected value is 'SnowflakeImportCopyCommand'.
	Type string `pulumi:"type"`
}

// Snowflake import command settings.
type SnowflakeImportCopyCommandResponse struct {
	// Additional copy options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalCopyOptions": { "DATE_FORMAT": "MM/DD/YYYY", "TIME_FORMAT": "'HH24:MI:SS.FF'" }
	AdditionalCopyOptions map[string]interface{} `pulumi:"additionalCopyOptions"`
	// Additional format options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalFormatOptions": { "FORCE": "TRUE", "LOAD_UNCERTAIN_FILES": "'FALSE'" }
	AdditionalFormatOptions map[string]interface{} `pulumi:"additionalFormatOptions"`
	// The import setting type.
	// Expected value is 'SnowflakeImportCopyCommand'.
	Type string `pulumi:"type"`
}

// Snowflake linked service.
type SnowflakeLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string of snowflake. Type: string, SecureString.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Snowflake'.
	Type string `pulumi:"type"`
}

// Snowflake linked service.
type SnowflakeLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string of snowflake. Type: string, SecureString.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReferenceResponse `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Snowflake'.
	Type string `pulumi:"type"`
}

// A copy activity snowflake sink.
type SnowflakeSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Snowflake import settings.
	ImportSettings *SnowflakeImportCopyCommand `pulumi:"importSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'SnowflakeSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity snowflake sink.
type SnowflakeSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Snowflake import settings.
	ImportSettings *SnowflakeImportCopyCommandResponse `pulumi:"importSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'SnowflakeSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity snowflake source.
type SnowflakeSource struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Snowflake export settings.
	ExportSettings SnowflakeExportCopyCommand `pulumi:"exportSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Snowflake Sql query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SnowflakeSource'.
	Type string `pulumi:"type"`
}

// A copy activity snowflake source.
type SnowflakeSourceResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Snowflake export settings.
	ExportSettings SnowflakeExportCopyCommandResponse `pulumi:"exportSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Snowflake Sql query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SnowflakeSource'.
	Type string `pulumi:"type"`
}

// Spark configuration reference.
type SparkConfigurationParametrizationReference struct {
	// Reference spark configuration name. Type: string (or Expression with resultType string).
	ReferenceName interface{} `pulumi:"referenceName"`
	// Spark configuration reference type.
	Type string `pulumi:"type"`
}

// Spark configuration reference.
type SparkConfigurationParametrizationReferenceResponse struct {
	// Reference spark configuration name. Type: string (or Expression with resultType string).
	ReferenceName interface{} `pulumi:"referenceName"`
	// Spark configuration reference type.
	Type string `pulumi:"type"`
}

// Spark Server linked service.
type SparkLinkedService struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication method used to access the Spark server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// IP address or host name of the Spark server
	Host interface{} `pulumi:"host"`
	// The partial URL corresponding to the Spark server.
	HttpPath interface{} `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the Username field
	Password interface{} `pulumi:"password"`
	// The TCP port that the Spark server uses to listen for client connections.
	Port interface{} `pulumi:"port"`
	// The type of Spark server.
	ServerType *string `pulumi:"serverType"`
	// The transport protocol to use in the Thrift layer.
	ThriftTransportProtocol *string `pulumi:"thriftTransportProtocol"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'Spark'.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
	// The user name that you use to access Spark Server.
	Username interface{} `pulumi:"username"`
}

// Spark Server linked service.
type SparkLinkedServiceResponse struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication method used to access the Spark server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
	EncryptedCredential interface{} `pulumi:"encryptedCredential"`
	// IP address or host name of the Spark server
	Host interface{} `pulumi:"host"`
	// The partial URL corresponding to the Spark server.
	HttpPath interface{} `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the Username field
	Password interface{} `pulumi:"password"`
	// The TCP port that the Spark server uses to listen for client connections.
	Port interface{} `pulumi:"port"`
	// The type of Spark server.
	ServerType *string `pulumi:"serverType"`
	// The transport protocol to use in the Thrift layer.
	ThriftTransportProtocol *string `pulumi:"thriftTransportProtocol"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'Spark'.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
	// The user name that you use to access Spark Server.
	Username interface{} `pulumi:"username"`
}

// Spark Server dataset.
type SparkObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Spark. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'SparkObject'.
	Type string `pulumi:"type"`
}

// Spark Server dataset.
type SparkObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Spark. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'SparkObject'.
	Type string `pulumi:"type"`
}

// A copy activity Spark Server source.
type SparkSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SparkSource'.
	Type string `pulumi:"type"`
}

// A copy activity Spark Server source.
type SparkSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SparkSource'.
	Type string `pulumi:"type"`
}

// Sql always encrypted properties.
type SqlAlwaysEncryptedProperties struct {
	// Sql always encrypted AKV authentication type. Type: string (or Expression with resultType string).
	AlwaysEncryptedAkvAuthType string `pulumi:"alwaysEncryptedAkvAuthType"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// The client ID of the application in Azure Active Directory used for Azure Key Vault authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure Key Vault.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
}

// Sql always encrypted properties.
type SqlAlwaysEncryptedPropertiesResponse struct {
	// Sql always encrypted AKV authentication type. Type: string (or Expression with resultType string).
	AlwaysEncryptedAkvAuthType string `pulumi:"alwaysEncryptedAkvAuthType"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// The client ID of the application in Azure Active Directory used for Azure Key Vault authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure Key Vault.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
}

func init() {
	pulumi.RegisterOutputType(ManagedIdentityCredentialOutput{})
	pulumi.RegisterOutputType(ManagedIdentityCredentialResponseOutput{})
	pulumi.RegisterOutputType(ManagedPrivateEndpointTypeOutput{})
	pulumi.RegisterOutputType(ManagedPrivateEndpointResponseOutput{})
	pulumi.RegisterOutputType(ParameterSpecificationOutput{})
	pulumi.RegisterOutputType(ParameterSpecificationMapOutput{})
	pulumi.RegisterOutputType(ParameterSpecificationResponseOutput{})
	pulumi.RegisterOutputType(ParameterSpecificationResponseMapOutput{})
	pulumi.RegisterOutputType(PipelineElapsedTimeMetricPolicyOutput{})
	pulumi.RegisterOutputType(PipelineElapsedTimeMetricPolicyPtrOutput{})
	pulumi.RegisterOutputType(PipelineElapsedTimeMetricPolicyResponseOutput{})
	pulumi.RegisterOutputType(PipelineElapsedTimeMetricPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(PipelineFolderOutput{})
	pulumi.RegisterOutputType(PipelineFolderPtrOutput{})
	pulumi.RegisterOutputType(PipelinePolicyOutput{})
	pulumi.RegisterOutputType(PipelinePolicyPtrOutput{})
	pulumi.RegisterOutputType(PipelinePolicyResponseOutput{})
	pulumi.RegisterOutputType(PipelinePolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(PipelineResponseFolderOutput{})
	pulumi.RegisterOutputType(PipelineResponseFolderPtrOutput{})
	pulumi.RegisterOutputType(PrivateEndpointOutput{})
	pulumi.RegisterOutputType(PrivateEndpointPtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkConnectionApprovalRequestOutput{})
	pulumi.RegisterOutputType(PrivateLinkConnectionApprovalRequestPtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkConnectionStateOutput{})
	pulumi.RegisterOutputType(PrivateLinkConnectionStatePtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkConnectionStateResponseOutput{})
	pulumi.RegisterOutputType(PrivateLinkConnectionStateResponsePtrOutput{})
	pulumi.RegisterOutputType(PurviewConfigurationOutput{})
	pulumi.RegisterOutputType(PurviewConfigurationPtrOutput{})
	pulumi.RegisterOutputType(PurviewConfigurationResponseOutput{})
	pulumi.RegisterOutputType(PurviewConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(RemotePrivateEndpointConnectionResponseOutput{})
}
