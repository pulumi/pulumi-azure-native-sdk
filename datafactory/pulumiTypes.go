// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datafactory

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Activity dependency information.
type ActivityDependency struct {
	// Activity name.
	Activity string `pulumi:"activity"`
	// Match-Condition for the dependency.
	DependencyConditions []string `pulumi:"dependencyConditions"`
}

// Activity dependency information.
type ActivityDependencyResponse struct {
	// Activity name.
	Activity string `pulumi:"activity"`
	// Match-Condition for the dependency.
	DependencyConditions []string `pulumi:"dependencyConditions"`
}

// Execution policy for an activity.
type ActivityPolicy struct {
	// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
	Retry interface{} `pulumi:"retry"`
	// Interval between each retry attempt (in seconds). The default is 30 sec.
	RetryIntervalInSeconds *int `pulumi:"retryIntervalInSeconds"`
	// When set to true, Input from activity is considered as secure and will not be logged to monitoring.
	SecureInput *bool `pulumi:"secureInput"`
	// When set to true, Output from activity is considered as secure and will not be logged to monitoring.
	SecureOutput *bool `pulumi:"secureOutput"`
	// Specifies the timeout for the activity to run. The default timeout is 7 days. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Timeout interface{} `pulumi:"timeout"`
}

// Execution policy for an activity.
type ActivityPolicyResponse struct {
	// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
	Retry interface{} `pulumi:"retry"`
	// Interval between each retry attempt (in seconds). The default is 30 sec.
	RetryIntervalInSeconds *int `pulumi:"retryIntervalInSeconds"`
	// When set to true, Input from activity is considered as secure and will not be logged to monitoring.
	SecureInput *bool `pulumi:"secureInput"`
	// When set to true, Output from activity is considered as secure and will not be logged to monitoring.
	SecureOutput *bool `pulumi:"secureOutput"`
	// Specifies the timeout for the activity to run. The default timeout is 7 days. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Timeout interface{} `pulumi:"timeout"`
}

// Amazon Marketplace Web Service linked service.
type AmazonMWSLinkedService struct {
	// The access key id used to access data.
	AccessKeyId interface{} `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The endpoint of the Amazon MWS server, (i.e. mws.amazonservices.com)
	Endpoint interface{} `pulumi:"endpoint"`
	// The Amazon Marketplace ID you want to retrieve data from. To retrieve data from multiple Marketplace IDs, separate them with a comma (,). (i.e. A2EUQ1WTGCTBG2)
	MarketplaceID interface{} `pulumi:"marketplaceID"`
	// The Amazon MWS authentication token.
	MwsAuthToken interface{} `pulumi:"mwsAuthToken"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The secret key used to access data.
	SecretKey interface{} `pulumi:"secretKey"`
	// The Amazon seller ID.
	SellerID interface{} `pulumi:"sellerID"`
	// Type of linked service.
	// Expected value is 'AmazonMWS'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Amazon Marketplace Web Service linked service.
type AmazonMWSLinkedServiceResponse struct {
	// The access key id used to access data.
	AccessKeyId interface{} `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The endpoint of the Amazon MWS server, (i.e. mws.amazonservices.com)
	Endpoint interface{} `pulumi:"endpoint"`
	// The Amazon Marketplace ID you want to retrieve data from. To retrieve data from multiple Marketplace IDs, separate them with a comma (,). (i.e. A2EUQ1WTGCTBG2)
	MarketplaceID interface{} `pulumi:"marketplaceID"`
	// The Amazon MWS authentication token.
	MwsAuthToken interface{} `pulumi:"mwsAuthToken"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The secret key used to access data.
	SecretKey interface{} `pulumi:"secretKey"`
	// The Amazon seller ID.
	SellerID interface{} `pulumi:"sellerID"`
	// Type of linked service.
	// Expected value is 'AmazonMWS'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Amazon Marketplace Web Service dataset.
type AmazonMWSObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AmazonMWSObject'.
	Type string `pulumi:"type"`
}

// Amazon Marketplace Web Service dataset.
type AmazonMWSObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AmazonMWSObject'.
	Type string `pulumi:"type"`
}

// A copy activity Amazon Marketplace Web Service source.
type AmazonMWSSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AmazonMWSSource'.
	Type string `pulumi:"type"`
}

// A copy activity Amazon Marketplace Web Service source.
type AmazonMWSSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AmazonMWSSource'.
	Type string `pulumi:"type"`
}

// AmazonRdsForOracle database.
type AmazonRdsForOracleLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'AmazonRdsForOracle'.
	Type string `pulumi:"type"`
}

// AmazonRdsForOracle database.
type AmazonRdsForOracleLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'AmazonRdsForOracle'.
	Type string `pulumi:"type"`
}

// The settings that will be leveraged for AmazonRdsForOracle source partitioning.
type AmazonRdsForOraclePartitionSettings struct {
	// The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionColumnName interface{} `pulumi:"partitionColumnName"`
	// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionLowerBound interface{} `pulumi:"partitionLowerBound"`
	// Names of the physical partitions of AmazonRdsForOracle table.
	PartitionNames []interface{} `pulumi:"partitionNames"`
	// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionUpperBound interface{} `pulumi:"partitionUpperBound"`
}

// The settings that will be leveraged for AmazonRdsForOracle source partitioning.
type AmazonRdsForOraclePartitionSettingsResponse struct {
	// The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionColumnName interface{} `pulumi:"partitionColumnName"`
	// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionLowerBound interface{} `pulumi:"partitionLowerBound"`
	// Names of the physical partitions of AmazonRdsForOracle table.
	PartitionNames []interface{} `pulumi:"partitionNames"`
	// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionUpperBound interface{} `pulumi:"partitionUpperBound"`
}

// A copy activity AmazonRdsForOracle source.
type AmazonRdsForOracleSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// AmazonRdsForOracle reader query. Type: string (or Expression with resultType string).
	OracleReaderQuery interface{} `pulumi:"oracleReaderQuery"`
	// The partition mechanism that will be used for AmazonRdsForOracle read in parallel. Type: string (or Expression with resultType string).
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for AmazonRdsForOracle source partitioning.
	PartitionSettings *AmazonRdsForOraclePartitionSettings `pulumi:"partitionSettings"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AmazonRdsForOracleSource'.
	Type string `pulumi:"type"`
}

// A copy activity AmazonRdsForOracle source.
type AmazonRdsForOracleSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// AmazonRdsForOracle reader query. Type: string (or Expression with resultType string).
	OracleReaderQuery interface{} `pulumi:"oracleReaderQuery"`
	// The partition mechanism that will be used for AmazonRdsForOracle read in parallel. Type: string (or Expression with resultType string).
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for AmazonRdsForOracle source partitioning.
	PartitionSettings *AmazonRdsForOraclePartitionSettingsResponse `pulumi:"partitionSettings"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AmazonRdsForOracleSource'.
	Type string `pulumi:"type"`
}

// The AmazonRdsForOracle database dataset.
type AmazonRdsForOracleTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the AmazonRdsForOracle database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'AmazonRdsForOracleTable'.
	Type string `pulumi:"type"`
}

// The AmazonRdsForOracle database dataset.
type AmazonRdsForOracleTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the AmazonRdsForOracle database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'AmazonRdsForOracleTable'.
	Type string `pulumi:"type"`
}

// Amazon RDS for SQL Server linked service.
type AmazonRdsForSqlServerLinkedService struct {
	// Sql always encrypted properties.
	AlwaysEncryptedSettings *SqlAlwaysEncryptedProperties `pulumi:"alwaysEncryptedSettings"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The on-premises Windows authentication password.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'AmazonRdsForSqlServer'.
	Type string `pulumi:"type"`
	// The on-premises Windows authentication user name. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// Amazon RDS for SQL Server linked service.
type AmazonRdsForSqlServerLinkedServiceResponse struct {
	// Sql always encrypted properties.
	AlwaysEncryptedSettings *SqlAlwaysEncryptedPropertiesResponse `pulumi:"alwaysEncryptedSettings"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The on-premises Windows authentication password.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'AmazonRdsForSqlServer'.
	Type string `pulumi:"type"`
	// The on-premises Windows authentication user name. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// A copy activity Amazon RDS for SQL Server source.
type AmazonRdsForSqlServerSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string).
	IsolationLevel interface{} `pulumi:"isolationLevel"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for Sql source partitioning.
	PartitionSettings *SqlPartitionSettings `pulumi:"partitionSettings"`
	// Which additional types to produce.
	ProduceAdditionalTypes interface{} `pulumi:"produceAdditionalTypes"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// SQL reader query. Type: string (or Expression with resultType string).
	SqlReaderQuery interface{} `pulumi:"sqlReaderQuery"`
	// Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
	SqlReaderStoredProcedureName interface{} `pulumi:"sqlReaderStoredProcedureName"`
	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
	StoredProcedureParameters interface{} `pulumi:"storedProcedureParameters"`
	// Copy source type.
	// Expected value is 'AmazonRdsForSqlServerSource'.
	Type string `pulumi:"type"`
}

// A copy activity Amazon RDS for SQL Server source.
type AmazonRdsForSqlServerSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string).
	IsolationLevel interface{} `pulumi:"isolationLevel"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for Sql source partitioning.
	PartitionSettings *SqlPartitionSettingsResponse `pulumi:"partitionSettings"`
	// Which additional types to produce.
	ProduceAdditionalTypes interface{} `pulumi:"produceAdditionalTypes"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// SQL reader query. Type: string (or Expression with resultType string).
	SqlReaderQuery interface{} `pulumi:"sqlReaderQuery"`
	// Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
	SqlReaderStoredProcedureName interface{} `pulumi:"sqlReaderStoredProcedureName"`
	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
	StoredProcedureParameters interface{} `pulumi:"storedProcedureParameters"`
	// Copy source type.
	// Expected value is 'AmazonRdsForSqlServerSource'.
	Type string `pulumi:"type"`
}

// The Amazon RDS for SQL Server dataset.
type AmazonRdsForSqlServerTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the SQL Server dataset. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'AmazonRdsForSqlServerTable'.
	Type string `pulumi:"type"`
}

// The Amazon RDS for SQL Server dataset.
type AmazonRdsForSqlServerTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the SQL Server dataset. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'AmazonRdsForSqlServerTable'.
	Type string `pulumi:"type"`
}

// Linked service for Amazon Redshift.
type AmazonRedshiftLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The database name of the Amazon Redshift source. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password of the Amazon Redshift source.
	Password interface{} `pulumi:"password"`
	// The TCP port number that the Amazon Redshift server uses to listen for client connections. The default value is 5439. Type: integer (or Expression with resultType integer).
	Port interface{} `pulumi:"port"`
	// The name of the Amazon Redshift server. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	// Expected value is 'AmazonRedshift'.
	Type string `pulumi:"type"`
	// The username of the Amazon Redshift source. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// Linked service for Amazon Redshift.
type AmazonRedshiftLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The database name of the Amazon Redshift source. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password of the Amazon Redshift source.
	Password interface{} `pulumi:"password"`
	// The TCP port number that the Amazon Redshift server uses to listen for client connections. The default value is 5439. Type: integer (or Expression with resultType integer).
	Port interface{} `pulumi:"port"`
	// The name of the Amazon Redshift server. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	// Expected value is 'AmazonRedshift'.
	Type string `pulumi:"type"`
	// The username of the Amazon Redshift source. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// A copy activity source for Amazon Redshift Source.
type AmazonRedshiftSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// The Amazon S3 settings needed for the interim Amazon S3 when copying from Amazon Redshift with unload. With this, data from Amazon Redshift source will be unloaded into S3 first and then copied into the targeted sink from the interim S3.
	RedshiftUnloadSettings *RedshiftUnloadSettings `pulumi:"redshiftUnloadSettings"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AmazonRedshiftSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for Amazon Redshift Source.
type AmazonRedshiftSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// The Amazon S3 settings needed for the interim Amazon S3 when copying from Amazon Redshift with unload. With this, data from Amazon Redshift source will be unloaded into S3 first and then copied into the targeted sink from the interim S3.
	RedshiftUnloadSettings *RedshiftUnloadSettingsResponse `pulumi:"redshiftUnloadSettings"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AmazonRedshiftSource'.
	Type string `pulumi:"type"`
}

// The Amazon Redshift table dataset.
type AmazonRedshiftTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The Amazon Redshift table name. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AmazonRedshiftTable'.
	Type string `pulumi:"type"`
}

// The Amazon Redshift table dataset.
type AmazonRedshiftTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The Amazon Redshift table name. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AmazonRedshiftTable'.
	Type string `pulumi:"type"`
}

// Linked service for Amazon S3 Compatible.
type AmazonS3CompatibleLinkedService struct {
	// The access key identifier of the Amazon S3 Compatible Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
	AccessKeyId interface{} `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// If true, use S3 path-style access instead of virtual hosted-style access. Default value is false. Type: boolean (or Expression with resultType boolean).
	ForcePathStyle interface{} `pulumi:"forcePathStyle"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The secret access key of the Amazon S3 Compatible Identity and Access Management (IAM) user.
	SecretAccessKey interface{} `pulumi:"secretAccessKey"`
	// This value specifies the endpoint to access with the Amazon S3 Compatible Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
	ServiceUrl interface{} `pulumi:"serviceUrl"`
	// Type of linked service.
	// Expected value is 'AmazonS3Compatible'.
	Type string `pulumi:"type"`
}

// Linked service for Amazon S3 Compatible.
type AmazonS3CompatibleLinkedServiceResponse struct {
	// The access key identifier of the Amazon S3 Compatible Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
	AccessKeyId interface{} `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// If true, use S3 path-style access instead of virtual hosted-style access. Default value is false. Type: boolean (or Expression with resultType boolean).
	ForcePathStyle interface{} `pulumi:"forcePathStyle"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The secret access key of the Amazon S3 Compatible Identity and Access Management (IAM) user.
	SecretAccessKey interface{} `pulumi:"secretAccessKey"`
	// This value specifies the endpoint to access with the Amazon S3 Compatible Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
	ServiceUrl interface{} `pulumi:"serviceUrl"`
	// Type of linked service.
	// Expected value is 'AmazonS3Compatible'.
	Type string `pulumi:"type"`
}

// The location of Amazon S3 Compatible dataset.
type AmazonS3CompatibleLocation struct {
	// Specify the bucketName of Amazon S3 Compatible. Type: string (or Expression with resultType string)
	BucketName interface{} `pulumi:"bucketName"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'AmazonS3CompatibleLocation'.
	Type string `pulumi:"type"`
	// Specify the version of Amazon S3 Compatible. Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
}

// The location of Amazon S3 Compatible dataset.
type AmazonS3CompatibleLocationResponse struct {
	// Specify the bucketName of Amazon S3 Compatible. Type: string (or Expression with resultType string)
	BucketName interface{} `pulumi:"bucketName"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'AmazonS3CompatibleLocation'.
	Type string `pulumi:"type"`
	// Specify the version of Amazon S3 Compatible. Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
}

// Amazon S3 Compatible read settings.
type AmazonS3CompatibleReadSettings struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery interface{} `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// The prefix filter for the S3 Compatible object name. Type: string (or Expression with resultType string).
	Prefix interface{} `pulumi:"prefix"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'AmazonS3CompatibleReadSettings'.
	Type string `pulumi:"type"`
	// Amazon S3 Compatible wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Amazon S3 Compatible wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// Amazon S3 Compatible read settings.
type AmazonS3CompatibleReadSettingsResponse struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery interface{} `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// The prefix filter for the S3 Compatible object name. Type: string (or Expression with resultType string).
	Prefix interface{} `pulumi:"prefix"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'AmazonS3CompatibleReadSettings'.
	Type string `pulumi:"type"`
	// Amazon S3 Compatible wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Amazon S3 Compatible wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// A single Amazon Simple Storage Service (S3) object or a set of S3 objects.
type AmazonS3Dataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The name of the Amazon S3 bucket. Type: string (or Expression with resultType string).
	BucketName interface{} `pulumi:"bucketName"`
	// The data compression method used for the Amazon S3 object.
	Compression *DatasetCompression `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// The format of files.
	Format interface{} `pulumi:"format"`
	// The key of the Amazon S3 object. Type: string (or Expression with resultType string).
	Key interface{} `pulumi:"key"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The end of S3 object's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of S3 object's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The prefix filter for the S3 object name. Type: string (or Expression with resultType string).
	Prefix interface{} `pulumi:"prefix"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'AmazonS3Object'.
	Type string `pulumi:"type"`
	// The version for the S3 object. Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
}

// A single Amazon Simple Storage Service (S3) object or a set of S3 objects.
type AmazonS3DatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The name of the Amazon S3 bucket. Type: string (or Expression with resultType string).
	BucketName interface{} `pulumi:"bucketName"`
	// The data compression method used for the Amazon S3 object.
	Compression *DatasetCompressionResponse `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// The format of files.
	Format interface{} `pulumi:"format"`
	// The key of the Amazon S3 object. Type: string (or Expression with resultType string).
	Key interface{} `pulumi:"key"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The end of S3 object's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of S3 object's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The prefix filter for the S3 object name. Type: string (or Expression with resultType string).
	Prefix interface{} `pulumi:"prefix"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'AmazonS3Object'.
	Type string `pulumi:"type"`
	// The version for the S3 object. Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
}

// Linked service for Amazon S3.
type AmazonS3LinkedService struct {
	// The access key identifier of the Amazon S3 Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
	AccessKeyId interface{} `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type of S3. Allowed value: AccessKey (default) or TemporarySecurityCredentials. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The secret access key of the Amazon S3 Identity and Access Management (IAM) user.
	SecretAccessKey interface{} `pulumi:"secretAccessKey"`
	// This value specifies the endpoint to access with the S3 Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
	ServiceUrl interface{} `pulumi:"serviceUrl"`
	// The session token for the S3 temporary security credential.
	SessionToken interface{} `pulumi:"sessionToken"`
	// Type of linked service.
	// Expected value is 'AmazonS3'.
	Type string `pulumi:"type"`
}

// Linked service for Amazon S3.
type AmazonS3LinkedServiceResponse struct {
	// The access key identifier of the Amazon S3 Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
	AccessKeyId interface{} `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type of S3. Allowed value: AccessKey (default) or TemporarySecurityCredentials. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The secret access key of the Amazon S3 Identity and Access Management (IAM) user.
	SecretAccessKey interface{} `pulumi:"secretAccessKey"`
	// This value specifies the endpoint to access with the S3 Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
	ServiceUrl interface{} `pulumi:"serviceUrl"`
	// The session token for the S3 temporary security credential.
	SessionToken interface{} `pulumi:"sessionToken"`
	// Type of linked service.
	// Expected value is 'AmazonS3'.
	Type string `pulumi:"type"`
}

// The location of amazon S3 dataset.
type AmazonS3Location struct {
	// Specify the bucketName of amazon S3. Type: string (or Expression with resultType string)
	BucketName interface{} `pulumi:"bucketName"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'AmazonS3Location'.
	Type string `pulumi:"type"`
	// Specify the version of amazon S3. Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
}

// The location of amazon S3 dataset.
type AmazonS3LocationResponse struct {
	// Specify the bucketName of amazon S3. Type: string (or Expression with resultType string)
	BucketName interface{} `pulumi:"bucketName"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'AmazonS3Location'.
	Type string `pulumi:"type"`
	// Specify the version of amazon S3. Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
}

// Amazon S3 read settings.
type AmazonS3ReadSettings struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery interface{} `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// The prefix filter for the S3 object name. Type: string (or Expression with resultType string).
	Prefix interface{} `pulumi:"prefix"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'AmazonS3ReadSettings'.
	Type string `pulumi:"type"`
	// AmazonS3 wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// AmazonS3 wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// Amazon S3 read settings.
type AmazonS3ReadSettingsResponse struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery interface{} `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// The prefix filter for the S3 object name. Type: string (or Expression with resultType string).
	Prefix interface{} `pulumi:"prefix"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'AmazonS3ReadSettings'.
	Type string `pulumi:"type"`
	// AmazonS3 wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// AmazonS3 wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// Linked service for AppFigures.
type AppFiguresLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client key for the AppFigures source.
	ClientKey interface{} `pulumi:"clientKey"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password of the AppFigures source.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'AppFigures'.
	Type string `pulumi:"type"`
	// The username of the Appfigures source. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// Linked service for AppFigures.
type AppFiguresLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client key for the AppFigures source.
	ClientKey interface{} `pulumi:"clientKey"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password of the AppFigures source.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'AppFigures'.
	Type string `pulumi:"type"`
	// The username of the Appfigures source. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// Append value for a Variable of type Array.
type AppendVariableActivity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'AppendVariable'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
	// Value to be appended. Type: could be a static value matching type of the variable item or Expression with resultType matching type of the variable item
	Value interface{} `pulumi:"value"`
	// Name of the variable whose value needs to be appended to.
	VariableName *string `pulumi:"variableName"`
}

// Append value for a Variable of type Array.
type AppendVariableActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'AppendVariable'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
	// Value to be appended. Type: could be a static value matching type of the variable item or Expression with resultType matching type of the variable item
	Value interface{} `pulumi:"value"`
	// Name of the variable whose value needs to be appended to.
	VariableName *string `pulumi:"variableName"`
}

// A wrapper for an ARM resource id
type ArmIdWrapperResponse struct {
	Id string `pulumi:"id"`
}

// A wrapper for an ARM resource id
type ArmIdWrapperResponseOutput struct{ *pulumi.OutputState }

func (ArmIdWrapperResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmIdWrapperResponse)(nil)).Elem()
}

func (o ArmIdWrapperResponseOutput) ToArmIdWrapperResponseOutput() ArmIdWrapperResponseOutput {
	return o
}

func (o ArmIdWrapperResponseOutput) ToArmIdWrapperResponseOutputWithContext(ctx context.Context) ArmIdWrapperResponseOutput {
	return o
}

func (o ArmIdWrapperResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ArmIdWrapperResponse) string { return v.Id }).(pulumi.StringOutput)
}

type ArmIdWrapperResponsePtrOutput struct{ *pulumi.OutputState }

func (ArmIdWrapperResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmIdWrapperResponse)(nil)).Elem()
}

func (o ArmIdWrapperResponsePtrOutput) ToArmIdWrapperResponsePtrOutput() ArmIdWrapperResponsePtrOutput {
	return o
}

func (o ArmIdWrapperResponsePtrOutput) ToArmIdWrapperResponsePtrOutputWithContext(ctx context.Context) ArmIdWrapperResponsePtrOutput {
	return o
}

func (o ArmIdWrapperResponsePtrOutput) Elem() ArmIdWrapperResponseOutput {
	return o.ApplyT(func(v *ArmIdWrapperResponse) ArmIdWrapperResponse {
		if v != nil {
			return *v
		}
		var ret ArmIdWrapperResponse
		return ret
	}).(ArmIdWrapperResponseOutput)
}

func (o ArmIdWrapperResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmIdWrapperResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Linked service for Asana.
type AsanaLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The api token for the Asana source.
	ApiToken interface{} `pulumi:"apiToken"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Asana'.
	Type string `pulumi:"type"`
}

// Linked service for Asana.
type AsanaLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The api token for the Asana source.
	ApiToken interface{} `pulumi:"apiToken"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Asana'.
	Type string `pulumi:"type"`
}

// Avro dataset.
type AvroDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data avroCompressionCodec. Type: string (or Expression with resultType string).
	AvroCompressionCodec interface{} `pulumi:"avroCompressionCodec"`
	AvroCompressionLevel *int        `pulumi:"avroCompressionLevel"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The location of the avro storage.
	Location interface{} `pulumi:"location"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Avro'.
	Type string `pulumi:"type"`
}

// Avro dataset.
type AvroDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data avroCompressionCodec. Type: string (or Expression with resultType string).
	AvroCompressionCodec interface{} `pulumi:"avroCompressionCodec"`
	AvroCompressionLevel *int        `pulumi:"avroCompressionLevel"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The location of the avro storage.
	Location interface{} `pulumi:"location"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Avro'.
	Type string `pulumi:"type"`
}

// The data stored in Avro format.
type AvroFormat struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer interface{} `pulumi:"deserializer"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer interface{} `pulumi:"serializer"`
	// Type of dataset storage format.
	// Expected value is 'AvroFormat'.
	Type string `pulumi:"type"`
}

// The data stored in Avro format.
type AvroFormatResponse struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer interface{} `pulumi:"deserializer"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer interface{} `pulumi:"serializer"`
	// Type of dataset storage format.
	// Expected value is 'AvroFormat'.
	Type string `pulumi:"type"`
}

// A copy activity Avro sink.
type AvroSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Avro format settings.
	FormatSettings *AvroWriteSettings `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Avro store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy sink type.
	// Expected value is 'AvroSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Avro sink.
type AvroSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Avro format settings.
	FormatSettings *AvroWriteSettingsResponse `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Avro store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy sink type.
	// Expected value is 'AvroSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Avro source.
type AvroSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Avro store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'AvroSource'.
	Type string `pulumi:"type"`
}

// A copy activity Avro source.
type AvroSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Avro store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'AvroSource'.
	Type string `pulumi:"type"`
}

// Avro write settings.
type AvroWriteSettings struct {
	// Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
	FileNamePrefix interface{} `pulumi:"fileNamePrefix"`
	// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
	MaxRowsPerFile interface{} `pulumi:"maxRowsPerFile"`
	// Top level record name in write result, which is required in AVRO spec.
	RecordName *string `pulumi:"recordName"`
	// Record namespace in the write result.
	RecordNamespace *string `pulumi:"recordNamespace"`
	// The write setting type.
	// Expected value is 'AvroWriteSettings'.
	Type string `pulumi:"type"`
}

// Avro write settings.
type AvroWriteSettingsResponse struct {
	// Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
	FileNamePrefix interface{} `pulumi:"fileNamePrefix"`
	// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
	MaxRowsPerFile interface{} `pulumi:"maxRowsPerFile"`
	// Top level record name in write result, which is required in AVRO spec.
	RecordName *string `pulumi:"recordName"`
	// Record namespace in the write result.
	RecordNamespace *string `pulumi:"recordNamespace"`
	// The write setting type.
	// Expected value is 'AvroWriteSettings'.
	Type string `pulumi:"type"`
}

// The express custom setup of installing Azure PowerShell.
type AzPowerShellSetup struct {
	// The type of custom setup.
	// Expected value is 'AzPowerShellSetup'.
	Type string `pulumi:"type"`
	// The required version of Azure PowerShell to install.
	Version string `pulumi:"version"`
}

// The express custom setup of installing Azure PowerShell.
type AzPowerShellSetupResponse struct {
	// The type of custom setup.
	// Expected value is 'AzPowerShellSetup'.
	Type string `pulumi:"type"`
	// The required version of Azure PowerShell to install.
	Version string `pulumi:"version"`
}

// Azure Batch linked service.
type AzureBatchLinkedService struct {
	// The Azure Batch account access key.
	AccessKey interface{} `pulumi:"accessKey"`
	// The Azure Batch account name. Type: string (or Expression with resultType string).
	AccountName interface{} `pulumi:"accountName"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The Azure Batch URI. Type: string (or Expression with resultType string).
	BatchUri interface{} `pulumi:"batchUri"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The Azure Storage linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure Batch pool name. Type: string (or Expression with resultType string).
	PoolName interface{} `pulumi:"poolName"`
	// Type of linked service.
	// Expected value is 'AzureBatch'.
	Type string `pulumi:"type"`
}

// Azure Batch linked service.
type AzureBatchLinkedServiceResponse struct {
	// The Azure Batch account access key.
	AccessKey interface{} `pulumi:"accessKey"`
	// The Azure Batch account name. Type: string (or Expression with resultType string).
	AccountName interface{} `pulumi:"accountName"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The Azure Batch URI. Type: string (or Expression with resultType string).
	BatchUri interface{} `pulumi:"batchUri"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The Azure Storage linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure Batch pool name. Type: string (or Expression with resultType string).
	PoolName interface{} `pulumi:"poolName"`
	// Type of linked service.
	// Expected value is 'AzureBatch'.
	Type string `pulumi:"type"`
}

// The Azure Blob storage.
type AzureBlobDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the blob storage.
	Compression *DatasetCompression `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The name of the Azure Blob. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// The path of the Azure Blob storage. Type: string (or Expression with resultType string).
	FolderPath interface{} `pulumi:"folderPath"`
	// The format of the Azure Blob storage.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The end of Azure Blob's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of Azure Blob's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The root of blob path. Type: string (or Expression with resultType string).
	TableRootLocation interface{} `pulumi:"tableRootLocation"`
	// Type of dataset.
	// Expected value is 'AzureBlob'.
	Type string `pulumi:"type"`
}

// The Azure Blob storage.
type AzureBlobDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the blob storage.
	Compression *DatasetCompressionResponse `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The name of the Azure Blob. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// The path of the Azure Blob storage. Type: string (or Expression with resultType string).
	FolderPath interface{} `pulumi:"folderPath"`
	// The format of the Azure Blob storage.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The end of Azure Blob's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of Azure Blob's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The root of blob path. Type: string (or Expression with resultType string).
	TableRootLocation interface{} `pulumi:"tableRootLocation"`
	// Type of dataset.
	// Expected value is 'AzureBlob'.
	Type string `pulumi:"type"`
}

// The Azure Data Lake Storage Gen2 storage.
type AzureBlobFSDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the blob storage.
	Compression *DatasetCompression `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The name of the Azure Data Lake Storage Gen2. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// The path of the Azure Data Lake Storage Gen2 storage. Type: string (or Expression with resultType string).
	FolderPath interface{} `pulumi:"folderPath"`
	// The format of the Azure Data Lake Storage Gen2 storage.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'AzureBlobFSFile'.
	Type string `pulumi:"type"`
}

// The Azure Data Lake Storage Gen2 storage.
type AzureBlobFSDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the blob storage.
	Compression *DatasetCompressionResponse `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The name of the Azure Data Lake Storage Gen2. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// The path of the Azure Data Lake Storage Gen2 storage. Type: string (or Expression with resultType string).
	FolderPath interface{} `pulumi:"folderPath"`
	// The format of the Azure Data Lake Storage Gen2 storage.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'AzureBlobFSFile'.
	Type string `pulumi:"type"`
}

// Azure Data Lake Storage Gen2 linked service.
type AzureBlobFSLinkedService struct {
	// Account key for the Azure Data Lake Storage Gen2 service. Type: string (or Expression with resultType string).
	AccountKey interface{} `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken interface{} `pulumi:"sasToken"`
	// SAS URI of the Azure Data Lake Storage Gen2 service. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri interface{} `pulumi:"sasUri"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential interface{} `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType interface{} `pulumi:"servicePrincipalCredentialType"`
	// The ID of the application used to authenticate against the Azure Data Lake Storage Gen2 account. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against the Azure Data Lake Storage Gen2 account.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureBlobFS'.
	Type string `pulumi:"type"`
	// Endpoint for the Azure Data Lake Storage Gen2 service. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
}

// Azure Data Lake Storage Gen2 linked service.
type AzureBlobFSLinkedServiceResponse struct {
	// Account key for the Azure Data Lake Storage Gen2 service. Type: string (or Expression with resultType string).
	AccountKey interface{} `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken interface{} `pulumi:"sasToken"`
	// SAS URI of the Azure Data Lake Storage Gen2 service. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri interface{} `pulumi:"sasUri"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential interface{} `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType interface{} `pulumi:"servicePrincipalCredentialType"`
	// The ID of the application used to authenticate against the Azure Data Lake Storage Gen2 account. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against the Azure Data Lake Storage Gen2 account.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureBlobFS'.
	Type string `pulumi:"type"`
	// Endpoint for the Azure Data Lake Storage Gen2 service. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
}

// The location of azure blobFS dataset.
type AzureBlobFSLocation struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the fileSystem of azure blobFS. Type: string (or Expression with resultType string).
	FileSystem interface{} `pulumi:"fileSystem"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'AzureBlobFSLocation'.
	Type string `pulumi:"type"`
}

// The location of azure blobFS dataset.
type AzureBlobFSLocationResponse struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the fileSystem of azure blobFS. Type: string (or Expression with resultType string).
	FileSystem interface{} `pulumi:"fileSystem"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'AzureBlobFSLocation'.
	Type string `pulumi:"type"`
}

// Azure blobFS read settings.
type AzureBlobFSReadSettings struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery interface{} `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'AzureBlobFSReadSettings'.
	Type string `pulumi:"type"`
	// Azure blobFS wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Azure blobFS wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// Azure blobFS read settings.
type AzureBlobFSReadSettingsResponse struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery interface{} `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'AzureBlobFSReadSettings'.
	Type string `pulumi:"type"`
	// Azure blobFS wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Azure blobFS wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// A copy activity Azure Data Lake Storage Gen2 sink.
type AzureBlobFSSink struct {
	// The type of copy behavior for copy sink. Type: string (or Expression with resultType string).
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
	Metadata []MetadataItem `pulumi:"metadata"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureBlobFSSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Azure Data Lake Storage Gen2 sink.
type AzureBlobFSSinkResponse struct {
	// The type of copy behavior for copy sink. Type: string (or Expression with resultType string).
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
	Metadata []MetadataItemResponse `pulumi:"metadata"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureBlobFSSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Azure BlobFS source.
type AzureBlobFSSource struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// Number of header lines to skip from each blob. Type: integer (or Expression with resultType integer).
	SkipHeaderLineCount interface{} `pulumi:"skipHeaderLineCount"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Treat empty as null. Type: boolean (or Expression with resultType boolean).
	TreatEmptyAsNull interface{} `pulumi:"treatEmptyAsNull"`
	// Copy source type.
	// Expected value is 'AzureBlobFSSource'.
	Type string `pulumi:"type"`
}

// A copy activity Azure BlobFS source.
type AzureBlobFSSourceResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// Number of header lines to skip from each blob. Type: integer (or Expression with resultType integer).
	SkipHeaderLineCount interface{} `pulumi:"skipHeaderLineCount"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Treat empty as null. Type: boolean (or Expression with resultType boolean).
	TreatEmptyAsNull interface{} `pulumi:"treatEmptyAsNull"`
	// Copy source type.
	// Expected value is 'AzureBlobFSSource'.
	Type string `pulumi:"type"`
}

// Azure blobFS write settings.
type AzureBlobFSWriteSettings struct {
	// Indicates the block size(MB) when writing data to blob. Type: integer (or Expression with resultType integer).
	BlockSizeInMB interface{} `pulumi:"blockSizeInMB"`
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The write setting type.
	// Expected value is 'AzureBlobFSWriteSettings'.
	Type string `pulumi:"type"`
}

// Azure blobFS write settings.
type AzureBlobFSWriteSettingsResponse struct {
	// Indicates the block size(MB) when writing data to blob. Type: integer (or Expression with resultType integer).
	BlockSizeInMB interface{} `pulumi:"blockSizeInMB"`
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The write setting type.
	// Expected value is 'AzureBlobFSWriteSettings'.
	Type string `pulumi:"type"`
}

// The azure blob storage linked service.
type AzureBlobStorageLinkedService struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey *AzureKeyVaultSecretReference `pulumi:"accountKey"`
	// Specify the kind of your storage account. Allowed values are: Storage (general purpose v1), StorageV2 (general purpose v2), BlobStorage, or BlockBlobStorage. Type: string (or Expression with resultType string).
	AccountKind interface{} `pulumi:"accountKind"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The type used for authentication. Type: string.
	AuthenticationType *string `pulumi:"authenticationType"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri, serviceEndpoint property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Container uri of the Azure Blob Storage resource only support for anonymous access. Type: string (or Expression with resultType string).
	ContainerUri interface{} `pulumi:"containerUri"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken *AzureKeyVaultSecretReference `pulumi:"sasToken"`
	// SAS URI of the Azure Blob Storage resource. It is mutually exclusive with connectionString, serviceEndpoint property. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri interface{} `pulumi:"sasUri"`
	// Blob service endpoint of the Azure Blob Storage resource. It is mutually exclusive with connectionString, sasUri property.
	ServiceEndpoint interface{} `pulumi:"serviceEndpoint"`
	// The ID of the service principal used to authenticate against Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Data Warehouse.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureBlobStorage'.
	Type string `pulumi:"type"`
}

// The azure blob storage linked service.
type AzureBlobStorageLinkedServiceResponse struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey *AzureKeyVaultSecretReferenceResponse `pulumi:"accountKey"`
	// Specify the kind of your storage account. Allowed values are: Storage (general purpose v1), StorageV2 (general purpose v2), BlobStorage, or BlockBlobStorage. Type: string (or Expression with resultType string).
	AccountKind interface{} `pulumi:"accountKind"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The type used for authentication. Type: string.
	AuthenticationType *string `pulumi:"authenticationType"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri, serviceEndpoint property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Container uri of the Azure Blob Storage resource only support for anonymous access. Type: string (or Expression with resultType string).
	ContainerUri interface{} `pulumi:"containerUri"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken *AzureKeyVaultSecretReferenceResponse `pulumi:"sasToken"`
	// SAS URI of the Azure Blob Storage resource. It is mutually exclusive with connectionString, serviceEndpoint property. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri interface{} `pulumi:"sasUri"`
	// Blob service endpoint of the Azure Blob Storage resource. It is mutually exclusive with connectionString, sasUri property.
	ServiceEndpoint interface{} `pulumi:"serviceEndpoint"`
	// The ID of the service principal used to authenticate against Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Data Warehouse.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureBlobStorage'.
	Type string `pulumi:"type"`
}

// The location of azure blob dataset.
type AzureBlobStorageLocation struct {
	// Specify the container of azure blob. Type: string (or Expression with resultType string).
	Container interface{} `pulumi:"container"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'AzureBlobStorageLocation'.
	Type string `pulumi:"type"`
}

// The location of azure blob dataset.
type AzureBlobStorageLocationResponse struct {
	// Specify the container of azure blob. Type: string (or Expression with resultType string).
	Container interface{} `pulumi:"container"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'AzureBlobStorageLocation'.
	Type string `pulumi:"type"`
}

// Azure blob read settings.
type AzureBlobStorageReadSettings struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery interface{} `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// The prefix filter for the Azure Blob name. Type: string (or Expression with resultType string).
	Prefix interface{} `pulumi:"prefix"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'AzureBlobStorageReadSettings'.
	Type string `pulumi:"type"`
	// Azure blob wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Azure blob wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// Azure blob read settings.
type AzureBlobStorageReadSettingsResponse struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery interface{} `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// The prefix filter for the Azure Blob name. Type: string (or Expression with resultType string).
	Prefix interface{} `pulumi:"prefix"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'AzureBlobStorageReadSettings'.
	Type string `pulumi:"type"`
	// Azure blob wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Azure blob wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// Azure blob write settings.
type AzureBlobStorageWriteSettings struct {
	// Indicates the block size(MB) when writing data to blob. Type: integer (or Expression with resultType integer).
	BlockSizeInMB interface{} `pulumi:"blockSizeInMB"`
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The write setting type.
	// Expected value is 'AzureBlobStorageWriteSettings'.
	Type string `pulumi:"type"`
}

// Azure blob write settings.
type AzureBlobStorageWriteSettingsResponse struct {
	// Indicates the block size(MB) when writing data to blob. Type: integer (or Expression with resultType integer).
	BlockSizeInMB interface{} `pulumi:"blockSizeInMB"`
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The write setting type.
	// Expected value is 'AzureBlobStorageWriteSettings'.
	Type string `pulumi:"type"`
}

// Azure Data Explorer command activity.
type AzureDataExplorerCommandActivity struct {
	// A control command, according to the Azure Data Explorer command syntax. Type: string (or Expression with resultType string).
	Command interface{} `pulumi:"command"`
	// Control command timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9]))..)
	CommandTimeout interface{} `pulumi:"commandTimeout"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'AzureDataExplorerCommand'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// Azure Data Explorer command activity.
type AzureDataExplorerCommandActivityResponse struct {
	// A control command, according to the Azure Data Explorer command syntax. Type: string (or Expression with resultType string).
	Command interface{} `pulumi:"command"`
	// Control command timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9]))..)
	CommandTimeout interface{} `pulumi:"commandTimeout"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'AzureDataExplorerCommand'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Azure Data Explorer (Kusto) linked service.
type AzureDataExplorerLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Database name for connection. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The endpoint of Azure Data Explorer (the engine's endpoint). URL will be in the format https://<clusterName>.<regionName>.kusto.windows.net. Type: string (or Expression with resultType string)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The ID of the service principal used to authenticate against Azure Data Explorer. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Kusto.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureDataExplorer'.
	Type string `pulumi:"type"`
}

// Azure Data Explorer (Kusto) linked service.
type AzureDataExplorerLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Database name for connection. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The endpoint of Azure Data Explorer (the engine's endpoint). URL will be in the format https://<clusterName>.<regionName>.kusto.windows.net. Type: string (or Expression with resultType string)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The ID of the service principal used to authenticate against Azure Data Explorer. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Kusto.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureDataExplorer'.
	Type string `pulumi:"type"`
}

// A copy activity Azure Data Explorer sink.
type AzureDataExplorerSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// If set to true, any aggregation will be skipped. Default is false. Type: boolean.
	FlushImmediately interface{} `pulumi:"flushImmediately"`
	// An explicit column mapping description provided in a json format. Type: string.
	IngestionMappingAsJson interface{} `pulumi:"ingestionMappingAsJson"`
	// A name of a pre-created csv mapping that was defined on the target Kusto table. Type: string.
	IngestionMappingName interface{} `pulumi:"ingestionMappingName"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureDataExplorerSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Azure Data Explorer sink.
type AzureDataExplorerSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// If set to true, any aggregation will be skipped. Default is false. Type: boolean.
	FlushImmediately interface{} `pulumi:"flushImmediately"`
	// An explicit column mapping description provided in a json format. Type: string.
	IngestionMappingAsJson interface{} `pulumi:"ingestionMappingAsJson"`
	// A name of a pre-created csv mapping that was defined on the target Kusto table. Type: string.
	IngestionMappingName interface{} `pulumi:"ingestionMappingName"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureDataExplorerSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Azure Data Explorer (Kusto) source.
type AzureDataExplorerSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The name of the Boolean option that controls whether truncation is applied to result-sets that go beyond a certain row-count limit.
	NoTruncation interface{} `pulumi:"noTruncation"`
	// Database query. Should be a Kusto Query Language (KQL) query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9]))..
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzureDataExplorerSource'.
	Type string `pulumi:"type"`
}

// A copy activity Azure Data Explorer (Kusto) source.
type AzureDataExplorerSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The name of the Boolean option that controls whether truncation is applied to result-sets that go beyond a certain row-count limit.
	NoTruncation interface{} `pulumi:"noTruncation"`
	// Database query. Should be a Kusto Query Language (KQL) query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9]))..
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzureDataExplorerSource'.
	Type string `pulumi:"type"`
}

// The Azure Data Explorer (Kusto) dataset.
type AzureDataExplorerTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure Data Explorer database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'AzureDataExplorerTable'.
	Type string `pulumi:"type"`
}

// The Azure Data Explorer (Kusto) dataset.
type AzureDataExplorerTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure Data Explorer database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'AzureDataExplorerTable'.
	Type string `pulumi:"type"`
}

// Azure Data Lake Analytics linked service.
type AzureDataLakeAnalyticsLinkedService struct {
	// The Azure Data Lake Analytics account name. Type: string (or Expression with resultType string).
	AccountName interface{} `pulumi:"accountName"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Azure Data Lake Analytics URI Type: string (or Expression with resultType string).
	DataLakeAnalyticsUri interface{} `pulumi:"dataLakeAnalyticsUri"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Data Lake Analytics account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string).
	ResourceGroupName interface{} `pulumi:"resourceGroupName"`
	// The ID of the application used to authenticate against the Azure Data Lake Analytics account. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against the Azure Data Lake Analytics account.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Data Lake Analytics account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string).
	SubscriptionId interface{} `pulumi:"subscriptionId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureDataLakeAnalytics'.
	Type string `pulumi:"type"`
}

// Azure Data Lake Analytics linked service.
type AzureDataLakeAnalyticsLinkedServiceResponse struct {
	// The Azure Data Lake Analytics account name. Type: string (or Expression with resultType string).
	AccountName interface{} `pulumi:"accountName"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Azure Data Lake Analytics URI Type: string (or Expression with resultType string).
	DataLakeAnalyticsUri interface{} `pulumi:"dataLakeAnalyticsUri"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Data Lake Analytics account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string).
	ResourceGroupName interface{} `pulumi:"resourceGroupName"`
	// The ID of the application used to authenticate against the Azure Data Lake Analytics account. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against the Azure Data Lake Analytics account.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Data Lake Analytics account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string).
	SubscriptionId interface{} `pulumi:"subscriptionId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureDataLakeAnalytics'.
	Type string `pulumi:"type"`
}

// Azure Data Lake Store dataset.
type AzureDataLakeStoreDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the item(s) in the Azure Data Lake Store.
	Compression *DatasetCompression `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The name of the file in the Azure Data Lake Store. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Path to the folder in the Azure Data Lake Store. Type: string (or Expression with resultType string).
	FolderPath interface{} `pulumi:"folderPath"`
	// The format of the Data Lake Store.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'AzureDataLakeStoreFile'.
	Type string `pulumi:"type"`
}

// Azure Data Lake Store dataset.
type AzureDataLakeStoreDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the item(s) in the Azure Data Lake Store.
	Compression *DatasetCompressionResponse `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The name of the file in the Azure Data Lake Store. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Path to the folder in the Azure Data Lake Store. Type: string (or Expression with resultType string).
	FolderPath interface{} `pulumi:"folderPath"`
	// The format of the Data Lake Store.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'AzureDataLakeStoreFile'.
	Type string `pulumi:"type"`
}

// Azure Data Lake Store linked service.
type AzureDataLakeStoreLinkedService struct {
	// Data Lake Store account name. Type: string (or Expression with resultType string).
	AccountName interface{} `pulumi:"accountName"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Data Lake Store service URI. Type: string (or Expression with resultType string).
	DataLakeStoreUri interface{} `pulumi:"dataLakeStoreUri"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Data Lake Store account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string).
	ResourceGroupName interface{} `pulumi:"resourceGroupName"`
	// The ID of the application used to authenticate against the Azure Data Lake Store account. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against the Azure Data Lake Store account.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Data Lake Store account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string).
	SubscriptionId interface{} `pulumi:"subscriptionId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureDataLakeStore'.
	Type string `pulumi:"type"`
}

// Azure Data Lake Store linked service.
type AzureDataLakeStoreLinkedServiceResponse struct {
	// Data Lake Store account name. Type: string (or Expression with resultType string).
	AccountName interface{} `pulumi:"accountName"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Data Lake Store service URI. Type: string (or Expression with resultType string).
	DataLakeStoreUri interface{} `pulumi:"dataLakeStoreUri"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Data Lake Store account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string).
	ResourceGroupName interface{} `pulumi:"resourceGroupName"`
	// The ID of the application used to authenticate against the Azure Data Lake Store account. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against the Azure Data Lake Store account.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Data Lake Store account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string).
	SubscriptionId interface{} `pulumi:"subscriptionId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureDataLakeStore'.
	Type string `pulumi:"type"`
}

// The location of azure data lake store dataset.
type AzureDataLakeStoreLocation struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'AzureDataLakeStoreLocation'.
	Type string `pulumi:"type"`
}

// The location of azure data lake store dataset.
type AzureDataLakeStoreLocationResponse struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'AzureDataLakeStoreLocation'.
	Type string `pulumi:"type"`
}

// Azure data lake store read settings.
type AzureDataLakeStoreReadSettings struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery interface{} `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// Lists files after the value (exclusive) based on file/folder names’ lexicographical order. Applies under the folderPath in data set, and filter files/sub-folders under the folderPath. Type: string (or Expression with resultType string).
	ListAfter interface{} `pulumi:"listAfter"`
	// Lists files before the value (inclusive) based on file/folder names’ lexicographical order. Applies under the folderPath in data set, and filter files/sub-folders under the folderPath. Type: string (or Expression with resultType string).
	ListBefore interface{} `pulumi:"listBefore"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'AzureDataLakeStoreReadSettings'.
	Type string `pulumi:"type"`
	// ADLS wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// ADLS wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// Azure data lake store read settings.
type AzureDataLakeStoreReadSettingsResponse struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery interface{} `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// Lists files after the value (exclusive) based on file/folder names’ lexicographical order. Applies under the folderPath in data set, and filter files/sub-folders under the folderPath. Type: string (or Expression with resultType string).
	ListAfter interface{} `pulumi:"listAfter"`
	// Lists files before the value (inclusive) based on file/folder names’ lexicographical order. Applies under the folderPath in data set, and filter files/sub-folders under the folderPath. Type: string (or Expression with resultType string).
	ListBefore interface{} `pulumi:"listBefore"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'AzureDataLakeStoreReadSettings'.
	Type string `pulumi:"type"`
	// ADLS wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// ADLS wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// A copy activity Azure Data Lake Store sink.
type AzureDataLakeStoreSink struct {
	// The type of copy behavior for copy sink. Type: string (or Expression with resultType string).
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Single File Parallel.
	EnableAdlsSingleFileParallel interface{} `pulumi:"enableAdlsSingleFileParallel"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureDataLakeStoreSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Azure Data Lake Store sink.
type AzureDataLakeStoreSinkResponse struct {
	// The type of copy behavior for copy sink. Type: string (or Expression with resultType string).
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Single File Parallel.
	EnableAdlsSingleFileParallel interface{} `pulumi:"enableAdlsSingleFileParallel"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureDataLakeStoreSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Azure Data Lake source.
type AzureDataLakeStoreSource struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzureDataLakeStoreSource'.
	Type string `pulumi:"type"`
}

// A copy activity Azure Data Lake source.
type AzureDataLakeStoreSourceResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzureDataLakeStoreSource'.
	Type string `pulumi:"type"`
}

// Azure data lake store write settings.
type AzureDataLakeStoreWriteSettings struct {
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies the expiry time of the written files. The time is applied to the UTC time zone in the format of "2018-12-01T05:00:00Z". Default value is NULL. Type: string (or Expression with resultType string).
	ExpiryDateTime interface{} `pulumi:"expiryDateTime"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The write setting type.
	// Expected value is 'AzureDataLakeStoreWriteSettings'.
	Type string `pulumi:"type"`
}

// Azure data lake store write settings.
type AzureDataLakeStoreWriteSettingsResponse struct {
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies the expiry time of the written files. The time is applied to the UTC time zone in the format of "2018-12-01T05:00:00Z". Default value is NULL. Type: string (or Expression with resultType string).
	ExpiryDateTime interface{} `pulumi:"expiryDateTime"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The write setting type.
	// Expected value is 'AzureDataLakeStoreWriteSettings'.
	Type string `pulumi:"type"`
}

// Azure Databricks Delta Lake dataset.
type AzureDatabricksDeltaLakeDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The database name of delta table. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The name of delta table. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'AzureDatabricksDeltaLakeDataset'.
	Type string `pulumi:"type"`
}

// Azure Databricks Delta Lake dataset.
type AzureDatabricksDeltaLakeDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The database name of delta table. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The name of delta table. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'AzureDatabricksDeltaLakeDataset'.
	Type string `pulumi:"type"`
}

// Azure Databricks Delta Lake export command settings.
type AzureDatabricksDeltaLakeExportCommand struct {
	// Specify the date format for the csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
	DateFormat interface{} `pulumi:"dateFormat"`
	// Specify the timestamp format for the csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
	TimestampFormat interface{} `pulumi:"timestampFormat"`
	// The export setting type.
	// Expected value is 'AzureDatabricksDeltaLakeExportCommand'.
	Type string `pulumi:"type"`
}

// Azure Databricks Delta Lake export command settings.
type AzureDatabricksDeltaLakeExportCommandResponse struct {
	// Specify the date format for the csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
	DateFormat interface{} `pulumi:"dateFormat"`
	// Specify the timestamp format for the csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
	TimestampFormat interface{} `pulumi:"timestampFormat"`
	// The export setting type.
	// Expected value is 'AzureDatabricksDeltaLakeExportCommand'.
	Type string `pulumi:"type"`
}

// Azure Databricks Delta Lake import command settings.
type AzureDatabricksDeltaLakeImportCommand struct {
	// Specify the date format for csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
	DateFormat interface{} `pulumi:"dateFormat"`
	// Specify the timestamp format for csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
	TimestampFormat interface{} `pulumi:"timestampFormat"`
	// The import setting type.
	// Expected value is 'AzureDatabricksDeltaLakeImportCommand'.
	Type string `pulumi:"type"`
}

// Azure Databricks Delta Lake import command settings.
type AzureDatabricksDeltaLakeImportCommandResponse struct {
	// Specify the date format for csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
	DateFormat interface{} `pulumi:"dateFormat"`
	// Specify the timestamp format for csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
	TimestampFormat interface{} `pulumi:"timestampFormat"`
	// The import setting type.
	// Expected value is 'AzureDatabricksDeltaLakeImportCommand'.
	Type string `pulumi:"type"`
}

// Azure Databricks Delta Lake linked service.
type AzureDatabricksDeltaLakeLinkedService struct {
	// Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/latest/authentication.html. Type: string, SecureString or AzureKeyVaultSecretReference.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The id of an existing interactive cluster that will be used for all runs of this job. Type: string (or Expression with resultType string).
	ClusterId interface{} `pulumi:"clusterId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// <REGION>.azuredatabricks.net, domain name of your Databricks deployment. Type: string (or Expression with resultType string).
	Domain interface{} `pulumi:"domain"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'AzureDatabricksDeltaLake'.
	Type string `pulumi:"type"`
	// Workspace resource id for databricks REST API. Type: string (or Expression with resultType string).
	WorkspaceResourceId interface{} `pulumi:"workspaceResourceId"`
}

// Azure Databricks Delta Lake linked service.
type AzureDatabricksDeltaLakeLinkedServiceResponse struct {
	// Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/latest/authentication.html. Type: string, SecureString or AzureKeyVaultSecretReference.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The id of an existing interactive cluster that will be used for all runs of this job. Type: string (or Expression with resultType string).
	ClusterId interface{} `pulumi:"clusterId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// <REGION>.azuredatabricks.net, domain name of your Databricks deployment. Type: string (or Expression with resultType string).
	Domain interface{} `pulumi:"domain"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'AzureDatabricksDeltaLake'.
	Type string `pulumi:"type"`
	// Workspace resource id for databricks REST API. Type: string (or Expression with resultType string).
	WorkspaceResourceId interface{} `pulumi:"workspaceResourceId"`
}

// A copy activity Azure Databricks Delta Lake sink.
type AzureDatabricksDeltaLakeSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Azure Databricks Delta Lake import settings.
	ImportSettings *AzureDatabricksDeltaLakeImportCommand `pulumi:"importSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureDatabricksDeltaLakeSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Azure Databricks Delta Lake sink.
type AzureDatabricksDeltaLakeSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Azure Databricks Delta Lake import settings.
	ImportSettings *AzureDatabricksDeltaLakeImportCommandResponse `pulumi:"importSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureDatabricksDeltaLakeSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Azure Databricks Delta Lake source.
type AzureDatabricksDeltaLakeSource struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Azure Databricks Delta Lake export settings.
	ExportSettings *AzureDatabricksDeltaLakeExportCommand `pulumi:"exportSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Azure Databricks Delta Lake Sql query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzureDatabricksDeltaLakeSource'.
	Type string `pulumi:"type"`
}

// A copy activity Azure Databricks Delta Lake source.
type AzureDatabricksDeltaLakeSourceResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Azure Databricks Delta Lake export settings.
	ExportSettings *AzureDatabricksDeltaLakeExportCommandResponse `pulumi:"exportSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Azure Databricks Delta Lake Sql query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzureDatabricksDeltaLakeSource'.
	Type string `pulumi:"type"`
}

// Azure Databricks linked service.
type AzureDatabricksLinkedService struct {
	// Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/latest/authentication.html. Type: string (or Expression with resultType string).
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Required to specify MSI, if using Workspace resource id for databricks REST API. Type: string (or Expression with resultType string).
	Authentication interface{} `pulumi:"authentication"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// <REGION>.azuredatabricks.net, domain name of your Databricks deployment. Type: string (or Expression with resultType string).
	Domain interface{} `pulumi:"domain"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The id of an existing interactive cluster that will be used for all runs of this activity. Type: string (or Expression with resultType string).
	ExistingClusterId interface{} `pulumi:"existingClusterId"`
	// The id of an existing instance pool that will be used for all runs of this activity. Type: string (or Expression with resultType string).
	InstancePoolId interface{} `pulumi:"instancePoolId"`
	// Additional tags for cluster resources. This property is ignored in instance pool configurations.
	NewClusterCustomTags map[string]interface{} `pulumi:"newClusterCustomTags"`
	// The driver node type for the new job cluster. This property is ignored in instance pool configurations. Type: string (or Expression with resultType string).
	NewClusterDriverNodeType interface{} `pulumi:"newClusterDriverNodeType"`
	// Enable the elastic disk on the new cluster. This property is now ignored, and takes the default elastic disk behavior in Databricks (elastic disks are always enabled). Type: boolean (or Expression with resultType boolean).
	NewClusterEnableElasticDisk interface{} `pulumi:"newClusterEnableElasticDisk"`
	// User-defined initialization scripts for the new cluster. Type: array of strings (or Expression with resultType array of strings).
	NewClusterInitScripts interface{} `pulumi:"newClusterInitScripts"`
	// Specify a location to deliver Spark driver, worker, and event logs. Type: string (or Expression with resultType string).
	NewClusterLogDestination interface{} `pulumi:"newClusterLogDestination"`
	// The node type of the new job cluster. This property is required if newClusterVersion is specified and instancePoolId is not specified. If instancePoolId is specified, this property is ignored. Type: string (or Expression with resultType string).
	NewClusterNodeType interface{} `pulumi:"newClusterNodeType"`
	// If not using an existing interactive cluster, this specifies the number of worker nodes to use for the new job cluster or instance pool. For new job clusters, this a string-formatted Int32, like '1' means numOfWorker is 1 or '1:10' means auto-scale from 1 (min) to 10 (max). For instance pools, this is a string-formatted Int32, and can only specify a fixed number of worker nodes, such as '2'. Required if newClusterVersion is specified. Type: string (or Expression with resultType string).
	NewClusterNumOfWorker interface{} `pulumi:"newClusterNumOfWorker"`
	// A set of optional, user-specified Spark configuration key-value pairs.
	NewClusterSparkConf map[string]interface{} `pulumi:"newClusterSparkConf"`
	// A set of optional, user-specified Spark environment variables key-value pairs.
	NewClusterSparkEnvVars map[string]interface{} `pulumi:"newClusterSparkEnvVars"`
	// If not using an existing interactive cluster, this specifies the Spark version of a new job cluster or instance pool nodes created for each run of this activity. Required if instancePoolId is specified. Type: string (or Expression with resultType string).
	NewClusterVersion interface{} `pulumi:"newClusterVersion"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The policy id for limiting the ability to configure clusters based on a user defined set of rules. Type: string (or Expression with resultType string).
	PolicyId interface{} `pulumi:"policyId"`
	// Type of linked service.
	// Expected value is 'AzureDatabricks'.
	Type string `pulumi:"type"`
	// Workspace resource id for databricks REST API. Type: string (or Expression with resultType string).
	WorkspaceResourceId interface{} `pulumi:"workspaceResourceId"`
}

// Azure Databricks linked service.
type AzureDatabricksLinkedServiceResponse struct {
	// Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/latest/authentication.html. Type: string (or Expression with resultType string).
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Required to specify MSI, if using Workspace resource id for databricks REST API. Type: string (or Expression with resultType string).
	Authentication interface{} `pulumi:"authentication"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// <REGION>.azuredatabricks.net, domain name of your Databricks deployment. Type: string (or Expression with resultType string).
	Domain interface{} `pulumi:"domain"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The id of an existing interactive cluster that will be used for all runs of this activity. Type: string (or Expression with resultType string).
	ExistingClusterId interface{} `pulumi:"existingClusterId"`
	// The id of an existing instance pool that will be used for all runs of this activity. Type: string (or Expression with resultType string).
	InstancePoolId interface{} `pulumi:"instancePoolId"`
	// Additional tags for cluster resources. This property is ignored in instance pool configurations.
	NewClusterCustomTags map[string]interface{} `pulumi:"newClusterCustomTags"`
	// The driver node type for the new job cluster. This property is ignored in instance pool configurations. Type: string (or Expression with resultType string).
	NewClusterDriverNodeType interface{} `pulumi:"newClusterDriverNodeType"`
	// Enable the elastic disk on the new cluster. This property is now ignored, and takes the default elastic disk behavior in Databricks (elastic disks are always enabled). Type: boolean (or Expression with resultType boolean).
	NewClusterEnableElasticDisk interface{} `pulumi:"newClusterEnableElasticDisk"`
	// User-defined initialization scripts for the new cluster. Type: array of strings (or Expression with resultType array of strings).
	NewClusterInitScripts interface{} `pulumi:"newClusterInitScripts"`
	// Specify a location to deliver Spark driver, worker, and event logs. Type: string (or Expression with resultType string).
	NewClusterLogDestination interface{} `pulumi:"newClusterLogDestination"`
	// The node type of the new job cluster. This property is required if newClusterVersion is specified and instancePoolId is not specified. If instancePoolId is specified, this property is ignored. Type: string (or Expression with resultType string).
	NewClusterNodeType interface{} `pulumi:"newClusterNodeType"`
	// If not using an existing interactive cluster, this specifies the number of worker nodes to use for the new job cluster or instance pool. For new job clusters, this a string-formatted Int32, like '1' means numOfWorker is 1 or '1:10' means auto-scale from 1 (min) to 10 (max). For instance pools, this is a string-formatted Int32, and can only specify a fixed number of worker nodes, such as '2'. Required if newClusterVersion is specified. Type: string (or Expression with resultType string).
	NewClusterNumOfWorker interface{} `pulumi:"newClusterNumOfWorker"`
	// A set of optional, user-specified Spark configuration key-value pairs.
	NewClusterSparkConf map[string]interface{} `pulumi:"newClusterSparkConf"`
	// A set of optional, user-specified Spark environment variables key-value pairs.
	NewClusterSparkEnvVars map[string]interface{} `pulumi:"newClusterSparkEnvVars"`
	// If not using an existing interactive cluster, this specifies the Spark version of a new job cluster or instance pool nodes created for each run of this activity. Required if instancePoolId is specified. Type: string (or Expression with resultType string).
	NewClusterVersion interface{} `pulumi:"newClusterVersion"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The policy id for limiting the ability to configure clusters based on a user defined set of rules. Type: string (or Expression with resultType string).
	PolicyId interface{} `pulumi:"policyId"`
	// Type of linked service.
	// Expected value is 'AzureDatabricks'.
	Type string `pulumi:"type"`
	// Workspace resource id for databricks REST API. Type: string (or Expression with resultType string).
	WorkspaceResourceId interface{} `pulumi:"workspaceResourceId"`
}

// Azure File Storage linked service.
type AzureFileStorageLinkedService struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey *AzureKeyVaultSecretReference `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The azure file share name. It is required when auth with accountKey/sasToken. Type: string (or Expression with resultType string).
	FileShare interface{} `pulumi:"fileShare"`
	// Host name of the server. Type: string (or Expression with resultType string).
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to logon the server.
	Password interface{} `pulumi:"password"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken *AzureKeyVaultSecretReference `pulumi:"sasToken"`
	// SAS URI of the Azure File resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri interface{} `pulumi:"sasUri"`
	// The azure file share snapshot version. Type: string (or Expression with resultType string).
	Snapshot interface{} `pulumi:"snapshot"`
	// Type of linked service.
	// Expected value is 'AzureFileStorage'.
	Type string `pulumi:"type"`
	// User ID to logon the server. Type: string (or Expression with resultType string).
	UserId interface{} `pulumi:"userId"`
}

// Azure File Storage linked service.
type AzureFileStorageLinkedServiceResponse struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey *AzureKeyVaultSecretReferenceResponse `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The azure file share name. It is required when auth with accountKey/sasToken. Type: string (or Expression with resultType string).
	FileShare interface{} `pulumi:"fileShare"`
	// Host name of the server. Type: string (or Expression with resultType string).
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to logon the server.
	Password interface{} `pulumi:"password"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken *AzureKeyVaultSecretReferenceResponse `pulumi:"sasToken"`
	// SAS URI of the Azure File resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri interface{} `pulumi:"sasUri"`
	// The azure file share snapshot version. Type: string (or Expression with resultType string).
	Snapshot interface{} `pulumi:"snapshot"`
	// Type of linked service.
	// Expected value is 'AzureFileStorage'.
	Type string `pulumi:"type"`
	// User ID to logon the server. Type: string (or Expression with resultType string).
	UserId interface{} `pulumi:"userId"`
}

// The location of file server dataset.
type AzureFileStorageLocation struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'AzureFileStorageLocation'.
	Type string `pulumi:"type"`
}

// The location of file server dataset.
type AzureFileStorageLocationResponse struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'AzureFileStorageLocation'.
	Type string `pulumi:"type"`
}

// Azure File Storage read settings.
type AzureFileStorageReadSettings struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery interface{} `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// The prefix filter for the Azure File name starting from root path. Type: string (or Expression with resultType string).
	Prefix interface{} `pulumi:"prefix"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'AzureFileStorageReadSettings'.
	Type string `pulumi:"type"`
	// Azure File Storage wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Azure File Storage wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// Azure File Storage read settings.
type AzureFileStorageReadSettingsResponse struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery interface{} `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// The prefix filter for the Azure File name starting from root path. Type: string (or Expression with resultType string).
	Prefix interface{} `pulumi:"prefix"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'AzureFileStorageReadSettings'.
	Type string `pulumi:"type"`
	// Azure File Storage wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Azure File Storage wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// Azure File Storage write settings.
type AzureFileStorageWriteSettings struct {
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The write setting type.
	// Expected value is 'AzureFileStorageWriteSettings'.
	Type string `pulumi:"type"`
}

// Azure File Storage write settings.
type AzureFileStorageWriteSettingsResponse struct {
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The write setting type.
	// Expected value is 'AzureFileStorageWriteSettings'.
	Type string `pulumi:"type"`
}

// Azure Function activity.
type AzureFunctionActivity struct {
	// Represents the payload that will be sent to the endpoint. Required for POST/PUT method, not allowed for GET method Type: string (or Expression with resultType string).
	Body interface{} `pulumi:"body"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Name of the Function that the Azure Function Activity will call. Type: string (or Expression with resultType string)
	FunctionName interface{} `pulumi:"functionName"`
	// Represents the headers that will be sent to the request. For example, to set the language and type on a request: "headers" : { "Accept-Language": "en-us", "Content-Type": "application/json" }. Type: dictionary (or Expression with resultType dictionary).
	Headers interface{} `pulumi:"headers"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Rest API method for target endpoint.
	Method string `pulumi:"method"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'AzureFunctionActivity'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// Azure Function activity.
type AzureFunctionActivityResponse struct {
	// Represents the payload that will be sent to the endpoint. Required for POST/PUT method, not allowed for GET method Type: string (or Expression with resultType string).
	Body interface{} `pulumi:"body"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Name of the Function that the Azure Function Activity will call. Type: string (or Expression with resultType string)
	FunctionName interface{} `pulumi:"functionName"`
	// Represents the headers that will be sent to the request. For example, to set the language and type on a request: "headers" : { "Accept-Language": "en-us", "Content-Type": "application/json" }. Type: dictionary (or Expression with resultType dictionary).
	Headers interface{} `pulumi:"headers"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Rest API method for target endpoint.
	Method string `pulumi:"method"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'AzureFunctionActivity'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Azure Function linked service.
type AzureFunctionLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication (Required to specify MSI) used to connect to AzureFunction. Type: string (or Expression with resultType string).
	Authentication interface{} `pulumi:"authentication"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The endpoint of the Azure Function App. URL will be in the format https://<accountName>.azurewebsites.net. Type: string (or Expression with resultType string).
	FunctionAppUrl interface{} `pulumi:"functionAppUrl"`
	// Function or Host key for Azure Function App.
	FunctionKey interface{} `pulumi:"functionKey"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Allowed token audiences for azure function. Type: string (or Expression with resultType string).
	ResourceId interface{} `pulumi:"resourceId"`
	// Type of linked service.
	// Expected value is 'AzureFunction'.
	Type string `pulumi:"type"`
}

// Azure Function linked service.
type AzureFunctionLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication (Required to specify MSI) used to connect to AzureFunction. Type: string (or Expression with resultType string).
	Authentication interface{} `pulumi:"authentication"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The endpoint of the Azure Function App. URL will be in the format https://<accountName>.azurewebsites.net. Type: string (or Expression with resultType string).
	FunctionAppUrl interface{} `pulumi:"functionAppUrl"`
	// Function or Host key for Azure Function App.
	FunctionKey interface{} `pulumi:"functionKey"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Allowed token audiences for azure function. Type: string (or Expression with resultType string).
	ResourceId interface{} `pulumi:"resourceId"`
	// Type of linked service.
	// Expected value is 'AzureFunction'.
	Type string `pulumi:"type"`
}

// Azure Key Vault linked service.
type AzureKeyVaultLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The base URL of the Azure Key Vault. e.g. https://myakv.vault.azure.net Type: string (or Expression with resultType string).
	BaseUrl interface{} `pulumi:"baseUrl"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'AzureKeyVault'.
	Type string `pulumi:"type"`
}

// Azure Key Vault linked service.
type AzureKeyVaultLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The base URL of the Azure Key Vault. e.g. https://myakv.vault.azure.net Type: string (or Expression with resultType string).
	BaseUrl interface{} `pulumi:"baseUrl"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'AzureKeyVault'.
	Type string `pulumi:"type"`
}

// Azure Key Vault secret reference.
type AzureKeyVaultSecretReference struct {
	// The name of the secret in Azure Key Vault. Type: string (or Expression with resultType string).
	SecretName interface{} `pulumi:"secretName"`
	// The version of the secret in Azure Key Vault. The default value is the latest version of the secret. Type: string (or Expression with resultType string).
	SecretVersion interface{} `pulumi:"secretVersion"`
	// The Azure Key Vault linked service reference.
	Store LinkedServiceReference `pulumi:"store"`
	// Type of the secret.
	// Expected value is 'AzureKeyVaultSecret'.
	Type string `pulumi:"type"`
}

// Azure Key Vault secret reference.
type AzureKeyVaultSecretReferenceResponse struct {
	// The name of the secret in Azure Key Vault. Type: string (or Expression with resultType string).
	SecretName interface{} `pulumi:"secretName"`
	// The version of the secret in Azure Key Vault. The default value is the latest version of the secret. Type: string (or Expression with resultType string).
	SecretVersion interface{} `pulumi:"secretVersion"`
	// The Azure Key Vault linked service reference.
	Store LinkedServiceReferenceResponse `pulumi:"store"`
	// Type of the secret.
	// Expected value is 'AzureKeyVaultSecret'.
	Type string `pulumi:"type"`
}

// Azure ML Batch Execution activity.
type AzureMLBatchExecutionActivity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Key,Value pairs to be passed to the Azure ML Batch Execution Service endpoint. Keys must match the names of web service parameters defined in the published Azure ML web service. Values will be passed in the GlobalParameters property of the Azure ML batch execution request.
	GlobalParameters map[string]interface{} `pulumi:"globalParameters"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'AzureMLBatchExecution'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
	// Key,Value pairs, mapping the names of Azure ML endpoint's Web Service Inputs to AzureMLWebServiceFile objects specifying the input Blob locations.. This information will be passed in the WebServiceInputs property of the Azure ML batch execution request.
	WebServiceInputs map[string]AzureMLWebServiceFile `pulumi:"webServiceInputs"`
	// Key,Value pairs, mapping the names of Azure ML endpoint's Web Service Outputs to AzureMLWebServiceFile objects specifying the output Blob locations. This information will be passed in the WebServiceOutputs property of the Azure ML batch execution request.
	WebServiceOutputs map[string]AzureMLWebServiceFile `pulumi:"webServiceOutputs"`
}

// Azure ML Batch Execution activity.
type AzureMLBatchExecutionActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Key,Value pairs to be passed to the Azure ML Batch Execution Service endpoint. Keys must match the names of web service parameters defined in the published Azure ML web service. Values will be passed in the GlobalParameters property of the Azure ML batch execution request.
	GlobalParameters map[string]interface{} `pulumi:"globalParameters"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'AzureMLBatchExecution'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
	// Key,Value pairs, mapping the names of Azure ML endpoint's Web Service Inputs to AzureMLWebServiceFile objects specifying the input Blob locations.. This information will be passed in the WebServiceInputs property of the Azure ML batch execution request.
	WebServiceInputs map[string]AzureMLWebServiceFileResponse `pulumi:"webServiceInputs"`
	// Key,Value pairs, mapping the names of Azure ML endpoint's Web Service Outputs to AzureMLWebServiceFile objects specifying the output Blob locations. This information will be passed in the WebServiceOutputs property of the Azure ML batch execution request.
	WebServiceOutputs map[string]AzureMLWebServiceFileResponse `pulumi:"webServiceOutputs"`
}

// Azure ML Execute Pipeline activity.
type AzureMLExecutePipelineActivity struct {
	// Whether to continue execution of other steps in the PipelineRun if a step fails. This information will be passed in the continueOnStepFailure property of the published pipeline execution request. Type: boolean (or Expression with resultType boolean).
	ContinueOnStepFailure interface{} `pulumi:"continueOnStepFailure"`
	// Dictionary used for changing data path assignments without retraining. Values will be passed in the dataPathAssignments property of the published pipeline execution request. Type: object (or Expression with resultType object).
	DataPathAssignments interface{} `pulumi:"dataPathAssignments"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Run history experiment name of the pipeline run. This information will be passed in the ExperimentName property of the published pipeline execution request. Type: string (or Expression with resultType string).
	ExperimentName interface{} `pulumi:"experimentName"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// The parent Azure ML Service pipeline run id. This information will be passed in the ParentRunId property of the published pipeline execution request. Type: string (or Expression with resultType string).
	MlParentRunId interface{} `pulumi:"mlParentRunId"`
	// ID of the published Azure ML pipeline endpoint. Type: string (or Expression with resultType string).
	MlPipelineEndpointId interface{} `pulumi:"mlPipelineEndpointId"`
	// ID of the published Azure ML pipeline. Type: string (or Expression with resultType string).
	MlPipelineId interface{} `pulumi:"mlPipelineId"`
	// Key,Value pairs to be passed to the published Azure ML pipeline endpoint. Keys must match the names of pipeline parameters defined in the published pipeline. Values will be passed in the ParameterAssignments property of the published pipeline execution request. Type: object with key value pairs (or Expression with resultType object).
	MlPipelineParameters interface{} `pulumi:"mlPipelineParameters"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'AzureMLExecutePipeline'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
	// Version of the published Azure ML pipeline endpoint. Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
}

// Azure ML Execute Pipeline activity.
type AzureMLExecutePipelineActivityResponse struct {
	// Whether to continue execution of other steps in the PipelineRun if a step fails. This information will be passed in the continueOnStepFailure property of the published pipeline execution request. Type: boolean (or Expression with resultType boolean).
	ContinueOnStepFailure interface{} `pulumi:"continueOnStepFailure"`
	// Dictionary used for changing data path assignments without retraining. Values will be passed in the dataPathAssignments property of the published pipeline execution request. Type: object (or Expression with resultType object).
	DataPathAssignments interface{} `pulumi:"dataPathAssignments"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Run history experiment name of the pipeline run. This information will be passed in the ExperimentName property of the published pipeline execution request. Type: string (or Expression with resultType string).
	ExperimentName interface{} `pulumi:"experimentName"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The parent Azure ML Service pipeline run id. This information will be passed in the ParentRunId property of the published pipeline execution request. Type: string (or Expression with resultType string).
	MlParentRunId interface{} `pulumi:"mlParentRunId"`
	// ID of the published Azure ML pipeline endpoint. Type: string (or Expression with resultType string).
	MlPipelineEndpointId interface{} `pulumi:"mlPipelineEndpointId"`
	// ID of the published Azure ML pipeline. Type: string (or Expression with resultType string).
	MlPipelineId interface{} `pulumi:"mlPipelineId"`
	// Key,Value pairs to be passed to the published Azure ML pipeline endpoint. Keys must match the names of pipeline parameters defined in the published pipeline. Values will be passed in the ParameterAssignments property of the published pipeline execution request. Type: object with key value pairs (or Expression with resultType object).
	MlPipelineParameters interface{} `pulumi:"mlPipelineParameters"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'AzureMLExecutePipeline'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
	// Version of the published Azure ML pipeline endpoint. Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
}

// Azure ML Studio Web Service linked service.
type AzureMLLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The API key for accessing the Azure ML model endpoint.
	ApiKey interface{} `pulumi:"apiKey"`
	// Type of authentication (Required to specify MSI) used to connect to AzureML. Type: string (or Expression with resultType string).
	Authentication interface{} `pulumi:"authentication"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The Batch Execution REST URL for an Azure ML Studio Web Service endpoint. Type: string (or Expression with resultType string).
	MlEndpoint interface{} `pulumi:"mlEndpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The ID of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML Studio web service. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML Studio web service.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureML'.
	Type string `pulumi:"type"`
	// The Update Resource REST URL for an Azure ML Studio Web Service endpoint. Type: string (or Expression with resultType string).
	UpdateResourceEndpoint interface{} `pulumi:"updateResourceEndpoint"`
}

// Azure ML Studio Web Service linked service.
type AzureMLLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The API key for accessing the Azure ML model endpoint.
	ApiKey interface{} `pulumi:"apiKey"`
	// Type of authentication (Required to specify MSI) used to connect to AzureML. Type: string (or Expression with resultType string).
	Authentication interface{} `pulumi:"authentication"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The Batch Execution REST URL for an Azure ML Studio Web Service endpoint. Type: string (or Expression with resultType string).
	MlEndpoint interface{} `pulumi:"mlEndpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The ID of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML Studio web service. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML Studio web service.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureML'.
	Type string `pulumi:"type"`
	// The Update Resource REST URL for an Azure ML Studio Web Service endpoint. Type: string (or Expression with resultType string).
	UpdateResourceEndpoint interface{} `pulumi:"updateResourceEndpoint"`
}

// Azure ML Service linked service.
type AzureMLServiceLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication (Required to specify MSI) used to connect to AzureML. Type: string (or Expression with resultType string).
	Authentication interface{} `pulumi:"authentication"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Azure ML Service workspace name. Type: string (or Expression with resultType string).
	MlWorkspaceName interface{} `pulumi:"mlWorkspaceName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Azure ML Service workspace resource group name. Type: string (or Expression with resultType string).
	ResourceGroupName interface{} `pulumi:"resourceGroupName"`
	// The ID of the service principal used to authenticate against the endpoint of a published Azure ML Service pipeline. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against the endpoint of a published Azure ML Service pipeline.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Azure ML Service workspace subscription ID. Type: string (or Expression with resultType string).
	SubscriptionId interface{} `pulumi:"subscriptionId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureMLService'.
	Type string `pulumi:"type"`
}

// Azure ML Service linked service.
type AzureMLServiceLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication (Required to specify MSI) used to connect to AzureML. Type: string (or Expression with resultType string).
	Authentication interface{} `pulumi:"authentication"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Azure ML Service workspace name. Type: string (or Expression with resultType string).
	MlWorkspaceName interface{} `pulumi:"mlWorkspaceName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Azure ML Service workspace resource group name. Type: string (or Expression with resultType string).
	ResourceGroupName interface{} `pulumi:"resourceGroupName"`
	// The ID of the service principal used to authenticate against the endpoint of a published Azure ML Service pipeline. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against the endpoint of a published Azure ML Service pipeline.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Azure ML Service workspace subscription ID. Type: string (or Expression with resultType string).
	SubscriptionId interface{} `pulumi:"subscriptionId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureMLService'.
	Type string `pulumi:"type"`
}

// Azure ML Update Resource management activity.
type AzureMLUpdateResourceActivity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// The relative file path in trainedModelLinkedService to represent the .ilearner file that will be uploaded by the update operation.  Type: string (or Expression with resultType string).
	TrainedModelFilePath interface{} `pulumi:"trainedModelFilePath"`
	// Name of Azure Storage linked service holding the .ilearner file that will be uploaded by the update operation.
	TrainedModelLinkedServiceName LinkedServiceReference `pulumi:"trainedModelLinkedServiceName"`
	// Name of the Trained Model module in the Web Service experiment to be updated. Type: string (or Expression with resultType string).
	TrainedModelName interface{} `pulumi:"trainedModelName"`
	// Type of activity.
	// Expected value is 'AzureMLUpdateResource'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// Azure ML Update Resource management activity.
type AzureMLUpdateResourceActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// The relative file path in trainedModelLinkedService to represent the .ilearner file that will be uploaded by the update operation.  Type: string (or Expression with resultType string).
	TrainedModelFilePath interface{} `pulumi:"trainedModelFilePath"`
	// Name of Azure Storage linked service holding the .ilearner file that will be uploaded by the update operation.
	TrainedModelLinkedServiceName LinkedServiceReferenceResponse `pulumi:"trainedModelLinkedServiceName"`
	// Name of the Trained Model module in the Web Service experiment to be updated. Type: string (or Expression with resultType string).
	TrainedModelName interface{} `pulumi:"trainedModelName"`
	// Type of activity.
	// Expected value is 'AzureMLUpdateResource'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Azure ML WebService Input/Output file
type AzureMLWebServiceFile struct {
	// The relative file path, including container name, in the Azure Blob Storage specified by the LinkedService. Type: string (or Expression with resultType string).
	FilePath interface{} `pulumi:"filePath"`
	// Reference to an Azure Storage LinkedService, where Azure ML WebService Input/Output file located.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
}

// Azure ML WebService Input/Output file
type AzureMLWebServiceFileResponse struct {
	// The relative file path, including container name, in the Azure Blob Storage specified by the LinkedService. Type: string (or Expression with resultType string).
	FilePath interface{} `pulumi:"filePath"`
	// Reference to an Azure Storage LinkedService, where Azure ML WebService Input/Output file located.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
}

// Azure Database for MariaDB linked service.
type AzureMariaDBLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReference `pulumi:"pwd"`
	// Type of linked service.
	// Expected value is 'AzureMariaDB'.
	Type string `pulumi:"type"`
}

// Azure Database for MariaDB linked service.
type AzureMariaDBLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReferenceResponse `pulumi:"pwd"`
	// Type of linked service.
	// Expected value is 'AzureMariaDB'.
	Type string `pulumi:"type"`
}

// A copy activity Azure MariaDB source.
type AzureMariaDBSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzureMariaDBSource'.
	Type string `pulumi:"type"`
}

// A copy activity Azure MariaDB source.
type AzureMariaDBSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzureMariaDBSource'.
	Type string `pulumi:"type"`
}

// Azure Database for MariaDB dataset.
type AzureMariaDBTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzureMariaDBTable'.
	Type string `pulumi:"type"`
}

// Azure Database for MariaDB dataset.
type AzureMariaDBTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzureMariaDBTable'.
	Type string `pulumi:"type"`
}

// Azure MySQL database linked service.
type AzureMySqlLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'AzureMySql'.
	Type string `pulumi:"type"`
}

// Azure MySQL database linked service.
type AzureMySqlLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReferenceResponse `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'AzureMySql'.
	Type string `pulumi:"type"`
}

// A copy activity Azure MySql sink.
type AzureMySqlSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to execute before starting the copy. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureMySqlSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Azure MySql sink.
type AzureMySqlSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to execute before starting the copy. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureMySqlSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Azure MySQL source.
type AzureMySqlSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzureMySqlSource'.
	Type string `pulumi:"type"`
}

// A copy activity Azure MySQL source.
type AzureMySqlSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzureMySqlSource'.
	Type string `pulumi:"type"`
}

// The Azure MySQL database dataset.
type AzureMySqlTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The name of Azure MySQL database table. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// The Azure MySQL database table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzureMySqlTable'.
	Type string `pulumi:"type"`
}

// The Azure MySQL database dataset.
type AzureMySqlTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The name of Azure MySQL database table. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// The Azure MySQL database table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzureMySqlTable'.
	Type string `pulumi:"type"`
}

// Azure PostgreSQL linked service.
type AzurePostgreSqlLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'AzurePostgreSql'.
	Type string `pulumi:"type"`
}

// Azure PostgreSQL linked service.
type AzurePostgreSqlLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReferenceResponse `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'AzurePostgreSql'.
	Type string `pulumi:"type"`
}

// A copy activity Azure PostgreSQL sink.
type AzurePostgreSqlSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to execute before starting the copy. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzurePostgreSqlSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Azure PostgreSQL sink.
type AzurePostgreSqlSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to execute before starting the copy. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzurePostgreSqlSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Azure PostgreSQL source.
type AzurePostgreSqlSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzurePostgreSqlSource'.
	Type string `pulumi:"type"`
}

// A copy activity Azure PostgreSQL source.
type AzurePostgreSqlSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzurePostgreSqlSource'.
	Type string `pulumi:"type"`
}

// Azure PostgreSQL dataset.
type AzurePostgreSqlTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure PostgreSQL database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// The table name of the Azure PostgreSQL database which includes both schema and table. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzurePostgreSqlTable'.
	Type string `pulumi:"type"`
}

// Azure PostgreSQL dataset.
type AzurePostgreSqlTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure PostgreSQL database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// The table name of the Azure PostgreSQL database which includes both schema and table. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzurePostgreSqlTable'.
	Type string `pulumi:"type"`
}

// A copy activity Azure Queue sink.
type AzureQueueSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureQueueSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Azure Queue sink.
type AzureQueueSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureQueueSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// The Azure Search Index.
type AzureSearchIndexDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// The name of the Azure Search Index. Type: string (or Expression with resultType string).
	IndexName interface{} `pulumi:"indexName"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'AzureSearchIndex'.
	Type string `pulumi:"type"`
}

// The Azure Search Index.
type AzureSearchIndexDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// The name of the Azure Search Index. Type: string (or Expression with resultType string).
	IndexName interface{} `pulumi:"indexName"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'AzureSearchIndex'.
	Type string `pulumi:"type"`
}

// A copy activity Azure Search Index sink.
type AzureSearchIndexSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureSearchIndexSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Specify the write behavior when upserting documents into Azure Search Index.
	WriteBehavior *string `pulumi:"writeBehavior"`
}

// A copy activity Azure Search Index sink.
type AzureSearchIndexSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureSearchIndexSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Specify the write behavior when upserting documents into Azure Search Index.
	WriteBehavior *string `pulumi:"writeBehavior"`
}

// Linked service for Windows Azure Search Service.
type AzureSearchLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Admin Key for Azure Search service
	Key interface{} `pulumi:"key"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'AzureSearch'.
	Type string `pulumi:"type"`
	// URL for Azure Search service. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
}

// Linked service for Windows Azure Search Service.
type AzureSearchLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Admin Key for Azure Search service
	Key interface{} `pulumi:"key"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'AzureSearch'.
	Type string `pulumi:"type"`
	// URL for Azure Search service. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
}

// Azure SQL Data Warehouse linked service.
type AzureSqlDWLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference `pulumi:"password"`
	// The ID of the service principal used to authenticate against Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Data Warehouse.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureSqlDW'.
	Type string `pulumi:"type"`
}

// Azure SQL Data Warehouse linked service.
type AzureSqlDWLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReferenceResponse `pulumi:"password"`
	// The ID of the service principal used to authenticate against Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Data Warehouse.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureSqlDW'.
	Type string `pulumi:"type"`
}

// The Azure SQL Data Warehouse dataset.
type AzureSqlDWTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzureSqlDWTable'.
	Type string `pulumi:"type"`
}

// The Azure SQL Data Warehouse dataset.
type AzureSqlDWTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzureSqlDWTable'.
	Type string `pulumi:"type"`
}

// Microsoft Azure SQL Database linked service.
type AzureSqlDatabaseLinkedService struct {
	// Sql always encrypted properties.
	AlwaysEncryptedSettings *SqlAlwaysEncryptedProperties `pulumi:"alwaysEncryptedSettings"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference `pulumi:"password"`
	// The ID of the service principal used to authenticate against Azure SQL Database. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Database.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureSqlDatabase'.
	Type string `pulumi:"type"`
}

// Microsoft Azure SQL Database linked service.
type AzureSqlDatabaseLinkedServiceResponse struct {
	// Sql always encrypted properties.
	AlwaysEncryptedSettings *SqlAlwaysEncryptedPropertiesResponse `pulumi:"alwaysEncryptedSettings"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReferenceResponse `pulumi:"password"`
	// The ID of the service principal used to authenticate against Azure SQL Database. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Database.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureSqlDatabase'.
	Type string `pulumi:"type"`
}

// Azure SQL Managed Instance linked service.
type AzureSqlMILinkedService struct {
	// Sql always encrypted properties.
	AlwaysEncryptedSettings *SqlAlwaysEncryptedProperties `pulumi:"alwaysEncryptedSettings"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference `pulumi:"password"`
	// The ID of the service principal used to authenticate against Azure SQL Managed Instance. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Managed Instance.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureSqlMI'.
	Type string `pulumi:"type"`
}

// Azure SQL Managed Instance linked service.
type AzureSqlMILinkedServiceResponse struct {
	// Sql always encrypted properties.
	AlwaysEncryptedSettings *SqlAlwaysEncryptedPropertiesResponse `pulumi:"alwaysEncryptedSettings"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReferenceResponse `pulumi:"password"`
	// The ID of the service principal used to authenticate against Azure SQL Managed Instance. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Managed Instance.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureSqlMI'.
	Type string `pulumi:"type"`
}

// The Azure SQL Managed Instance dataset.
type AzureSqlMITableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure SQL Managed Instance dataset. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzureSqlMITable'.
	Type string `pulumi:"type"`
}

// The Azure SQL Managed Instance dataset.
type AzureSqlMITableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure SQL Managed Instance dataset. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzureSqlMITable'.
	Type string `pulumi:"type"`
}

// A copy activity Azure SQL sink.
type AzureSqlSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// SQL writer stored procedure name. Type: string (or Expression with resultType string).
	SqlWriterStoredProcedureName interface{} `pulumi:"sqlWriterStoredProcedureName"`
	// SQL writer table type. Type: string (or Expression with resultType string).
	SqlWriterTableType interface{} `pulumi:"sqlWriterTableType"`
	// Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean).
	SqlWriterUseTableLock interface{} `pulumi:"sqlWriterUseTableLock"`
	// SQL stored procedure parameters.
	StoredProcedureParameters interface{} `pulumi:"storedProcedureParameters"`
	// The stored procedure parameter name of the table type. Type: string (or Expression with resultType string).
	StoredProcedureTableTypeParameterName interface{} `pulumi:"storedProcedureTableTypeParameterName"`
	// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
	TableOption interface{} `pulumi:"tableOption"`
	// Copy sink type.
	// Expected value is 'AzureSqlSink'.
	Type string `pulumi:"type"`
	// SQL upsert settings.
	UpsertSettings *SqlUpsertSettings `pulumi:"upsertSettings"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Write behavior when copying data into Azure SQL. Type: SqlWriteBehaviorEnum (or Expression with resultType SqlWriteBehaviorEnum)
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// A copy activity Azure SQL sink.
type AzureSqlSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// SQL writer stored procedure name. Type: string (or Expression with resultType string).
	SqlWriterStoredProcedureName interface{} `pulumi:"sqlWriterStoredProcedureName"`
	// SQL writer table type. Type: string (or Expression with resultType string).
	SqlWriterTableType interface{} `pulumi:"sqlWriterTableType"`
	// Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean).
	SqlWriterUseTableLock interface{} `pulumi:"sqlWriterUseTableLock"`
	// SQL stored procedure parameters.
	StoredProcedureParameters interface{} `pulumi:"storedProcedureParameters"`
	// The stored procedure parameter name of the table type. Type: string (or Expression with resultType string).
	StoredProcedureTableTypeParameterName interface{} `pulumi:"storedProcedureTableTypeParameterName"`
	// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
	TableOption interface{} `pulumi:"tableOption"`
	// Copy sink type.
	// Expected value is 'AzureSqlSink'.
	Type string `pulumi:"type"`
	// SQL upsert settings.
	UpsertSettings *SqlUpsertSettingsResponse `pulumi:"upsertSettings"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Write behavior when copying data into Azure SQL. Type: SqlWriteBehaviorEnum (or Expression with resultType SqlWriteBehaviorEnum)
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// A copy activity Azure SQL source.
type AzureSqlSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string).
	IsolationLevel interface{} `pulumi:"isolationLevel"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange". Type: string (or Expression with resultType string).
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for Sql source partitioning.
	PartitionSettings *SqlPartitionSettings `pulumi:"partitionSettings"`
	// Which additional types to produce.
	ProduceAdditionalTypes interface{} `pulumi:"produceAdditionalTypes"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// SQL reader query. Type: string (or Expression with resultType string).
	SqlReaderQuery interface{} `pulumi:"sqlReaderQuery"`
	// Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
	SqlReaderStoredProcedureName interface{} `pulumi:"sqlReaderStoredProcedureName"`
	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
	StoredProcedureParameters interface{} `pulumi:"storedProcedureParameters"`
	// Copy source type.
	// Expected value is 'AzureSqlSource'.
	Type string `pulumi:"type"`
}

// A copy activity Azure SQL source.
type AzureSqlSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string).
	IsolationLevel interface{} `pulumi:"isolationLevel"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange". Type: string (or Expression with resultType string).
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for Sql source partitioning.
	PartitionSettings *SqlPartitionSettingsResponse `pulumi:"partitionSettings"`
	// Which additional types to produce.
	ProduceAdditionalTypes interface{} `pulumi:"produceAdditionalTypes"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// SQL reader query. Type: string (or Expression with resultType string).
	SqlReaderQuery interface{} `pulumi:"sqlReaderQuery"`
	// Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
	SqlReaderStoredProcedureName interface{} `pulumi:"sqlReaderStoredProcedureName"`
	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
	StoredProcedureParameters interface{} `pulumi:"storedProcedureParameters"`
	// Copy source type.
	// Expected value is 'AzureSqlSource'.
	Type string `pulumi:"type"`
}

// The Azure SQL Server database dataset.
type AzureSqlTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure SQL database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzureSqlTable'.
	Type string `pulumi:"type"`
}

// The Azure SQL Server database dataset.
type AzureSqlTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure SQL database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzureSqlTable'.
	Type string `pulumi:"type"`
}

// The storage account linked service.
type AzureStorageLinkedService struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey *AzureKeyVaultSecretReference `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken *AzureKeyVaultSecretReference `pulumi:"sasToken"`
	// SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri interface{} `pulumi:"sasUri"`
	// Type of linked service.
	// Expected value is 'AzureStorage'.
	Type string `pulumi:"type"`
}

// The storage account linked service.
type AzureStorageLinkedServiceResponse struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey *AzureKeyVaultSecretReferenceResponse `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken *AzureKeyVaultSecretReferenceResponse `pulumi:"sasToken"`
	// SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri interface{} `pulumi:"sasUri"`
	// Type of linked service.
	// Expected value is 'AzureStorage'.
	Type string `pulumi:"type"`
}

// Azure Synapse Analytics (Artifacts) linked service.
type AzureSynapseArtifactsLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Required to specify MSI, if using system assigned managed identity as authentication method. Type: string (or Expression with resultType string).
	Authentication interface{} `pulumi:"authentication"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// https://<workspacename>.dev.azuresynapse.net, Azure Synapse Analytics workspace URL. Type: string (or Expression with resultType string).
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'AzureSynapseArtifacts'.
	Type string `pulumi:"type"`
	// The resource ID of the Synapse workspace. The format should be: /subscriptions/{subscriptionID}/resourceGroups/{resourceGroup}/providers/Microsoft.Synapse/workspaces/{workspaceName}. Type: string (or Expression with resultType string).
	WorkspaceResourceId interface{} `pulumi:"workspaceResourceId"`
}

// Azure Synapse Analytics (Artifacts) linked service.
type AzureSynapseArtifactsLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Required to specify MSI, if using system assigned managed identity as authentication method. Type: string (or Expression with resultType string).
	Authentication interface{} `pulumi:"authentication"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// https://<workspacename>.dev.azuresynapse.net, Azure Synapse Analytics workspace URL. Type: string (or Expression with resultType string).
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'AzureSynapseArtifacts'.
	Type string `pulumi:"type"`
	// The resource ID of the Synapse workspace. The format should be: /subscriptions/{subscriptionID}/resourceGroups/{resourceGroup}/providers/Microsoft.Synapse/workspaces/{workspaceName}. Type: string (or Expression with resultType string).
	WorkspaceResourceId interface{} `pulumi:"workspaceResourceId"`
}

// The Azure Table storage dataset.
type AzureTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure Table storage. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzureTable'.
	Type string `pulumi:"type"`
}

// The Azure Table storage dataset.
type AzureTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure Table storage. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzureTable'.
	Type string `pulumi:"type"`
}

// A copy activity Azure Table sink.
type AzureTableSink struct {
	// Azure Table default partition key value. Type: string (or Expression with resultType string).
	AzureTableDefaultPartitionKeyValue interface{} `pulumi:"azureTableDefaultPartitionKeyValue"`
	// Azure Table insert type. Type: string (or Expression with resultType string).
	AzureTableInsertType interface{} `pulumi:"azureTableInsertType"`
	// Azure Table partition key name. Type: string (or Expression with resultType string).
	AzureTablePartitionKeyName interface{} `pulumi:"azureTablePartitionKeyName"`
	// Azure Table row key name. Type: string (or Expression with resultType string).
	AzureTableRowKeyName interface{} `pulumi:"azureTableRowKeyName"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureTableSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Azure Table sink.
type AzureTableSinkResponse struct {
	// Azure Table default partition key value. Type: string (or Expression with resultType string).
	AzureTableDefaultPartitionKeyValue interface{} `pulumi:"azureTableDefaultPartitionKeyValue"`
	// Azure Table insert type. Type: string (or Expression with resultType string).
	AzureTableInsertType interface{} `pulumi:"azureTableInsertType"`
	// Azure Table partition key name. Type: string (or Expression with resultType string).
	AzureTablePartitionKeyName interface{} `pulumi:"azureTablePartitionKeyName"`
	// Azure Table row key name. Type: string (or Expression with resultType string).
	AzureTableRowKeyName interface{} `pulumi:"azureTableRowKeyName"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureTableSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Azure Table source.
type AzureTableSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// Azure Table source ignore table not found. Type: boolean (or Expression with resultType boolean).
	AzureTableSourceIgnoreTableNotFound interface{} `pulumi:"azureTableSourceIgnoreTableNotFound"`
	// Azure Table source query. Type: string (or Expression with resultType string).
	AzureTableSourceQuery interface{} `pulumi:"azureTableSourceQuery"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzureTableSource'.
	Type string `pulumi:"type"`
}

// A copy activity Azure Table source.
type AzureTableSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// Azure Table source ignore table not found. Type: boolean (or Expression with resultType boolean).
	AzureTableSourceIgnoreTableNotFound interface{} `pulumi:"azureTableSourceIgnoreTableNotFound"`
	// Azure Table source query. Type: string (or Expression with resultType string).
	AzureTableSourceQuery interface{} `pulumi:"azureTableSourceQuery"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzureTableSource'.
	Type string `pulumi:"type"`
}

// The azure table storage linked service.
type AzureTableStorageLinkedService struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey *AzureKeyVaultSecretReference `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken *AzureKeyVaultSecretReference `pulumi:"sasToken"`
	// SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri interface{} `pulumi:"sasUri"`
	// Type of linked service.
	// Expected value is 'AzureTableStorage'.
	Type string `pulumi:"type"`
}

// The azure table storage linked service.
type AzureTableStorageLinkedServiceResponse struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey *AzureKeyVaultSecretReferenceResponse `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken *AzureKeyVaultSecretReferenceResponse `pulumi:"sasToken"`
	// SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri interface{} `pulumi:"sasUri"`
	// Type of linked service.
	// Expected value is 'AzureTableStorage'.
	Type string `pulumi:"type"`
}

// Big data pool reference type.
type BigDataPoolParametrizationReference struct {
	// Reference big data pool name. Type: string (or Expression with resultType string).
	ReferenceName interface{} `pulumi:"referenceName"`
	// Big data pool reference type.
	Type string `pulumi:"type"`
}

// Big data pool reference type.
type BigDataPoolParametrizationReferenceResponse struct {
	// Reference big data pool name. Type: string (or Expression with resultType string).
	ReferenceName interface{} `pulumi:"referenceName"`
	// Big data pool reference type.
	Type string `pulumi:"type"`
}

// Binary dataset.
type BinaryDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the binary dataset.
	Compression *DatasetCompression `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The location of the Binary storage.
	Location interface{} `pulumi:"location"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Binary'.
	Type string `pulumi:"type"`
}

// Binary dataset.
type BinaryDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the binary dataset.
	Compression *DatasetCompressionResponse `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The location of the Binary storage.
	Location interface{} `pulumi:"location"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Binary'.
	Type string `pulumi:"type"`
}

// Binary read settings.
type BinaryReadSettings struct {
	// Compression settings.
	CompressionProperties interface{} `pulumi:"compressionProperties"`
	// The read setting type.
	// Expected value is 'BinaryReadSettings'.
	Type string `pulumi:"type"`
}

// Binary read settings.
type BinaryReadSettingsResponse struct {
	// Compression settings.
	CompressionProperties interface{} `pulumi:"compressionProperties"`
	// The read setting type.
	// Expected value is 'BinaryReadSettings'.
	Type string `pulumi:"type"`
}

// A copy activity Binary sink.
type BinarySink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Binary store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy sink type.
	// Expected value is 'BinarySink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Binary sink.
type BinarySinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Binary store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy sink type.
	// Expected value is 'BinarySink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Binary source.
type BinarySource struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Binary format settings.
	FormatSettings *BinaryReadSettings `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Binary store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'BinarySource'.
	Type string `pulumi:"type"`
}

// A copy activity Binary source.
type BinarySourceResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Binary format settings.
	FormatSettings *BinaryReadSettingsResponse `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Binary store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'BinarySource'.
	Type string `pulumi:"type"`
}

// Trigger that runs every time a Blob event occurs.
type BlobEventsTrigger struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// The blob path must begin with the pattern provided for trigger to fire. For example, '/records/blobs/december/' will only fire the trigger for blobs in the december folder under the records container. At least one of these must be provided: blobPathBeginsWith, blobPathEndsWith.
	BlobPathBeginsWith *string `pulumi:"blobPathBeginsWith"`
	// The blob path must end with the pattern provided for trigger to fire. For example, 'december/boxes.csv' will only fire the trigger for blobs named boxes in a december folder. At least one of these must be provided: blobPathBeginsWith, blobPathEndsWith.
	BlobPathEndsWith *string `pulumi:"blobPathEndsWith"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// The type of events that cause this trigger to fire.
	Events []string `pulumi:"events"`
	// If set to true, blobs with zero bytes will be ignored.
	IgnoreEmptyBlobs *bool `pulumi:"ignoreEmptyBlobs"`
	// Pipelines that need to be started.
	Pipelines []TriggerPipelineReference `pulumi:"pipelines"`
	// The ARM resource ID of the Storage Account.
	Scope string `pulumi:"scope"`
	// Trigger type.
	// Expected value is 'BlobEventsTrigger'.
	Type string `pulumi:"type"`
}

// Trigger that runs every time a Blob event occurs.
type BlobEventsTriggerResponse struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// The blob path must begin with the pattern provided for trigger to fire. For example, '/records/blobs/december/' will only fire the trigger for blobs in the december folder under the records container. At least one of these must be provided: blobPathBeginsWith, blobPathEndsWith.
	BlobPathBeginsWith *string `pulumi:"blobPathBeginsWith"`
	// The blob path must end with the pattern provided for trigger to fire. For example, 'december/boxes.csv' will only fire the trigger for blobs named boxes in a december folder. At least one of these must be provided: blobPathBeginsWith, blobPathEndsWith.
	BlobPathEndsWith *string `pulumi:"blobPathEndsWith"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// The type of events that cause this trigger to fire.
	Events []string `pulumi:"events"`
	// If set to true, blobs with zero bytes will be ignored.
	IgnoreEmptyBlobs *bool `pulumi:"ignoreEmptyBlobs"`
	// Pipelines that need to be started.
	Pipelines []TriggerPipelineReferenceResponse `pulumi:"pipelines"`
	// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState string `pulumi:"runtimeState"`
	// The ARM resource ID of the Storage Account.
	Scope string `pulumi:"scope"`
	// Trigger type.
	// Expected value is 'BlobEventsTrigger'.
	Type string `pulumi:"type"`
}

// A copy activity Azure Blob sink.
type BlobSink struct {
	// Blob writer add header. Type: boolean (or Expression with resultType boolean).
	BlobWriterAddHeader interface{} `pulumi:"blobWriterAddHeader"`
	// Blob writer date time format. Type: string (or Expression with resultType string).
	BlobWriterDateTimeFormat interface{} `pulumi:"blobWriterDateTimeFormat"`
	// Blob writer overwrite files. Type: boolean (or Expression with resultType boolean).
	BlobWriterOverwriteFiles interface{} `pulumi:"blobWriterOverwriteFiles"`
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
	Metadata []MetadataItem `pulumi:"metadata"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'BlobSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Azure Blob sink.
type BlobSinkResponse struct {
	// Blob writer add header. Type: boolean (or Expression with resultType boolean).
	BlobWriterAddHeader interface{} `pulumi:"blobWriterAddHeader"`
	// Blob writer date time format. Type: string (or Expression with resultType string).
	BlobWriterDateTimeFormat interface{} `pulumi:"blobWriterDateTimeFormat"`
	// Blob writer overwrite files. Type: boolean (or Expression with resultType boolean).
	BlobWriterOverwriteFiles interface{} `pulumi:"blobWriterOverwriteFiles"`
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
	Metadata []MetadataItemResponse `pulumi:"metadata"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'BlobSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Azure Blob source.
type BlobSource struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// Number of header lines to skip from each blob. Type: integer (or Expression with resultType integer).
	SkipHeaderLineCount interface{} `pulumi:"skipHeaderLineCount"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Treat empty as null. Type: boolean (or Expression with resultType boolean).
	TreatEmptyAsNull interface{} `pulumi:"treatEmptyAsNull"`
	// Copy source type.
	// Expected value is 'BlobSource'.
	Type string `pulumi:"type"`
}

// A copy activity Azure Blob source.
type BlobSourceResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// Number of header lines to skip from each blob. Type: integer (or Expression with resultType integer).
	SkipHeaderLineCount interface{} `pulumi:"skipHeaderLineCount"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Treat empty as null. Type: boolean (or Expression with resultType boolean).
	TreatEmptyAsNull interface{} `pulumi:"treatEmptyAsNull"`
	// Copy source type.
	// Expected value is 'BlobSource'.
	Type string `pulumi:"type"`
}

// Trigger that runs every time the selected Blob container changes.
type BlobTrigger struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// The path of the container/folder that will trigger the pipeline.
	FolderPath string `pulumi:"folderPath"`
	// The Azure Storage linked service reference.
	LinkedService LinkedServiceReference `pulumi:"linkedService"`
	// The max number of parallel files to handle when it is triggered.
	MaxConcurrency int `pulumi:"maxConcurrency"`
	// Pipelines that need to be started.
	Pipelines []TriggerPipelineReference `pulumi:"pipelines"`
	// Trigger type.
	// Expected value is 'BlobTrigger'.
	Type string `pulumi:"type"`
}

// Trigger that runs every time the selected Blob container changes.
type BlobTriggerResponse struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// The path of the container/folder that will trigger the pipeline.
	FolderPath string `pulumi:"folderPath"`
	// The Azure Storage linked service reference.
	LinkedService LinkedServiceReferenceResponse `pulumi:"linkedService"`
	// The max number of parallel files to handle when it is triggered.
	MaxConcurrency int `pulumi:"maxConcurrency"`
	// Pipelines that need to be started.
	Pipelines []TriggerPipelineReferenceResponse `pulumi:"pipelines"`
	// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState string `pulumi:"runtimeState"`
	// Trigger type.
	// Expected value is 'BlobTrigger'.
	Type string `pulumi:"type"`
}

// Managed Identity used for CMK.
type CMKIdentityDefinition struct {
	// The resource id of the user assigned identity to authenticate to customer's key vault.
	UserAssignedIdentity *string `pulumi:"userAssignedIdentity"`
}

// CMKIdentityDefinitionInput is an input type that accepts CMKIdentityDefinitionArgs and CMKIdentityDefinitionOutput values.
// You can construct a concrete instance of `CMKIdentityDefinitionInput` via:
//
//	CMKIdentityDefinitionArgs{...}
type CMKIdentityDefinitionInput interface {
	pulumi.Input

	ToCMKIdentityDefinitionOutput() CMKIdentityDefinitionOutput
	ToCMKIdentityDefinitionOutputWithContext(context.Context) CMKIdentityDefinitionOutput
}

// Managed Identity used for CMK.
type CMKIdentityDefinitionArgs struct {
	// The resource id of the user assigned identity to authenticate to customer's key vault.
	UserAssignedIdentity pulumi.StringPtrInput `pulumi:"userAssignedIdentity"`
}

func (CMKIdentityDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CMKIdentityDefinition)(nil)).Elem()
}

func (i CMKIdentityDefinitionArgs) ToCMKIdentityDefinitionOutput() CMKIdentityDefinitionOutput {
	return i.ToCMKIdentityDefinitionOutputWithContext(context.Background())
}

func (i CMKIdentityDefinitionArgs) ToCMKIdentityDefinitionOutputWithContext(ctx context.Context) CMKIdentityDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CMKIdentityDefinitionOutput)
}

func (i CMKIdentityDefinitionArgs) ToCMKIdentityDefinitionPtrOutput() CMKIdentityDefinitionPtrOutput {
	return i.ToCMKIdentityDefinitionPtrOutputWithContext(context.Background())
}

func (i CMKIdentityDefinitionArgs) ToCMKIdentityDefinitionPtrOutputWithContext(ctx context.Context) CMKIdentityDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CMKIdentityDefinitionOutput).ToCMKIdentityDefinitionPtrOutputWithContext(ctx)
}

// CMKIdentityDefinitionPtrInput is an input type that accepts CMKIdentityDefinitionArgs, CMKIdentityDefinitionPtr and CMKIdentityDefinitionPtrOutput values.
// You can construct a concrete instance of `CMKIdentityDefinitionPtrInput` via:
//
//	        CMKIdentityDefinitionArgs{...}
//
//	or:
//
//	        nil
type CMKIdentityDefinitionPtrInput interface {
	pulumi.Input

	ToCMKIdentityDefinitionPtrOutput() CMKIdentityDefinitionPtrOutput
	ToCMKIdentityDefinitionPtrOutputWithContext(context.Context) CMKIdentityDefinitionPtrOutput
}

type cmkidentityDefinitionPtrType CMKIdentityDefinitionArgs

func CMKIdentityDefinitionPtr(v *CMKIdentityDefinitionArgs) CMKIdentityDefinitionPtrInput {
	return (*cmkidentityDefinitionPtrType)(v)
}

func (*cmkidentityDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CMKIdentityDefinition)(nil)).Elem()
}

func (i *cmkidentityDefinitionPtrType) ToCMKIdentityDefinitionPtrOutput() CMKIdentityDefinitionPtrOutput {
	return i.ToCMKIdentityDefinitionPtrOutputWithContext(context.Background())
}

func (i *cmkidentityDefinitionPtrType) ToCMKIdentityDefinitionPtrOutputWithContext(ctx context.Context) CMKIdentityDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CMKIdentityDefinitionPtrOutput)
}

// Managed Identity used for CMK.
type CMKIdentityDefinitionOutput struct{ *pulumi.OutputState }

func (CMKIdentityDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CMKIdentityDefinition)(nil)).Elem()
}

func (o CMKIdentityDefinitionOutput) ToCMKIdentityDefinitionOutput() CMKIdentityDefinitionOutput {
	return o
}

func (o CMKIdentityDefinitionOutput) ToCMKIdentityDefinitionOutputWithContext(ctx context.Context) CMKIdentityDefinitionOutput {
	return o
}

func (o CMKIdentityDefinitionOutput) ToCMKIdentityDefinitionPtrOutput() CMKIdentityDefinitionPtrOutput {
	return o.ToCMKIdentityDefinitionPtrOutputWithContext(context.Background())
}

func (o CMKIdentityDefinitionOutput) ToCMKIdentityDefinitionPtrOutputWithContext(ctx context.Context) CMKIdentityDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CMKIdentityDefinition) *CMKIdentityDefinition {
		return &v
	}).(CMKIdentityDefinitionPtrOutput)
}

// The resource id of the user assigned identity to authenticate to customer's key vault.
func (o CMKIdentityDefinitionOutput) UserAssignedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CMKIdentityDefinition) *string { return v.UserAssignedIdentity }).(pulumi.StringPtrOutput)
}

type CMKIdentityDefinitionPtrOutput struct{ *pulumi.OutputState }

func (CMKIdentityDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CMKIdentityDefinition)(nil)).Elem()
}

func (o CMKIdentityDefinitionPtrOutput) ToCMKIdentityDefinitionPtrOutput() CMKIdentityDefinitionPtrOutput {
	return o
}

func (o CMKIdentityDefinitionPtrOutput) ToCMKIdentityDefinitionPtrOutputWithContext(ctx context.Context) CMKIdentityDefinitionPtrOutput {
	return o
}

func (o CMKIdentityDefinitionPtrOutput) Elem() CMKIdentityDefinitionOutput {
	return o.ApplyT(func(v *CMKIdentityDefinition) CMKIdentityDefinition {
		if v != nil {
			return *v
		}
		var ret CMKIdentityDefinition
		return ret
	}).(CMKIdentityDefinitionOutput)
}

// The resource id of the user assigned identity to authenticate to customer's key vault.
func (o CMKIdentityDefinitionPtrOutput) UserAssignedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CMKIdentityDefinition) *string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentity
	}).(pulumi.StringPtrOutput)
}

// Managed Identity used for CMK.
type CMKIdentityDefinitionResponse struct {
	// The resource id of the user assigned identity to authenticate to customer's key vault.
	UserAssignedIdentity *string `pulumi:"userAssignedIdentity"`
}

// Managed Identity used for CMK.
type CMKIdentityDefinitionResponseOutput struct{ *pulumi.OutputState }

func (CMKIdentityDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CMKIdentityDefinitionResponse)(nil)).Elem()
}

func (o CMKIdentityDefinitionResponseOutput) ToCMKIdentityDefinitionResponseOutput() CMKIdentityDefinitionResponseOutput {
	return o
}

func (o CMKIdentityDefinitionResponseOutput) ToCMKIdentityDefinitionResponseOutputWithContext(ctx context.Context) CMKIdentityDefinitionResponseOutput {
	return o
}

// The resource id of the user assigned identity to authenticate to customer's key vault.
func (o CMKIdentityDefinitionResponseOutput) UserAssignedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CMKIdentityDefinitionResponse) *string { return v.UserAssignedIdentity }).(pulumi.StringPtrOutput)
}

type CMKIdentityDefinitionResponsePtrOutput struct{ *pulumi.OutputState }

func (CMKIdentityDefinitionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CMKIdentityDefinitionResponse)(nil)).Elem()
}

func (o CMKIdentityDefinitionResponsePtrOutput) ToCMKIdentityDefinitionResponsePtrOutput() CMKIdentityDefinitionResponsePtrOutput {
	return o
}

func (o CMKIdentityDefinitionResponsePtrOutput) ToCMKIdentityDefinitionResponsePtrOutputWithContext(ctx context.Context) CMKIdentityDefinitionResponsePtrOutput {
	return o
}

func (o CMKIdentityDefinitionResponsePtrOutput) Elem() CMKIdentityDefinitionResponseOutput {
	return o.ApplyT(func(v *CMKIdentityDefinitionResponse) CMKIdentityDefinitionResponse {
		if v != nil {
			return *v
		}
		var ret CMKIdentityDefinitionResponse
		return ret
	}).(CMKIdentityDefinitionResponseOutput)
}

// The resource id of the user assigned identity to authenticate to customer's key vault.
func (o CMKIdentityDefinitionResponsePtrOutput) UserAssignedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CMKIdentityDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentity
	}).(pulumi.StringPtrOutput)
}

// Linked service for Cassandra data source.
type CassandraLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// AuthenticationType to be used for connection. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Host name for connection. Type: string (or Expression with resultType string).
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// The port for the connection. Type: integer (or Expression with resultType integer).
	Port interface{} `pulumi:"port"`
	// Type of linked service.
	// Expected value is 'Cassandra'.
	Type string `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// Linked service for Cassandra data source.
type CassandraLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// AuthenticationType to be used for connection. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Host name for connection. Type: string (or Expression with resultType string).
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// The port for the connection. Type: integer (or Expression with resultType integer).
	Port interface{} `pulumi:"port"`
	// Type of linked service.
	// Expected value is 'Cassandra'.
	Type string `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// A copy activity source for a Cassandra database.
type CassandraSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// The consistency level specifies how many Cassandra servers must respond to a read request before returning data to the client application. Cassandra checks the specified number of Cassandra servers for data to satisfy the read request. Must be one of cassandraSourceReadConsistencyLevels. The default value is 'ONE'. It is case-insensitive.
	ConsistencyLevel *string `pulumi:"consistencyLevel"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Should be a SQL-92 query expression or Cassandra Query Language (CQL) command. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'CassandraSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for a Cassandra database.
type CassandraSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// The consistency level specifies how many Cassandra servers must respond to a read request before returning data to the client application. Cassandra checks the specified number of Cassandra servers for data to satisfy the read request. Must be one of cassandraSourceReadConsistencyLevels. The default value is 'ONE'. It is case-insensitive.
	ConsistencyLevel *string `pulumi:"consistencyLevel"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Should be a SQL-92 query expression or Cassandra Query Language (CQL) command. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'CassandraSource'.
	Type string `pulumi:"type"`
}

// The Cassandra database dataset.
type CassandraTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// The keyspace of the Cassandra database. Type: string (or Expression with resultType string).
	Keyspace interface{} `pulumi:"keyspace"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Cassandra database. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'CassandraTable'.
	Type string `pulumi:"type"`
}

// The Cassandra database dataset.
type CassandraTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// The keyspace of the Cassandra database. Type: string (or Expression with resultType string).
	Keyspace interface{} `pulumi:"keyspace"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Cassandra database. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'CassandraTable'.
	Type string `pulumi:"type"`
}

// Trigger that allows the referenced pipeline to depend on other pipeline runs based on runDimension Name/Value pairs. Upstream pipelines should declare the same runDimension Name and their runs should have the values for those runDimensions. The referenced pipeline run would be triggered if the values for the runDimension match for all upstream pipeline runs.
type ChainingTrigger struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Upstream Pipelines.
	DependsOn []PipelineReference `pulumi:"dependsOn"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// Pipeline for which runs are created when all upstream pipelines complete successfully.
	Pipeline TriggerPipelineReference `pulumi:"pipeline"`
	// Run Dimension property that needs to be emitted by upstream pipelines.
	RunDimension string `pulumi:"runDimension"`
	// Trigger type.
	// Expected value is 'ChainingTrigger'.
	Type string `pulumi:"type"`
}

// Trigger that allows the referenced pipeline to depend on other pipeline runs based on runDimension Name/Value pairs. Upstream pipelines should declare the same runDimension Name and their runs should have the values for those runDimensions. The referenced pipeline run would be triggered if the values for the runDimension match for all upstream pipeline runs.
type ChainingTriggerResponse struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Upstream Pipelines.
	DependsOn []PipelineReferenceResponse `pulumi:"dependsOn"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// Pipeline for which runs are created when all upstream pipelines complete successfully.
	Pipeline TriggerPipelineReferenceResponse `pulumi:"pipeline"`
	// Run Dimension property that needs to be emitted by upstream pipelines.
	RunDimension string `pulumi:"runDimension"`
	// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState string `pulumi:"runtimeState"`
	// Trigger type.
	// Expected value is 'ChainingTrigger'.
	Type string `pulumi:"type"`
}

// The folder that this CDC is in. If not specified, CDC will appear at the root level.
type ChangeDataCaptureFolder struct {
	// The name of the folder that this CDC is in.
	Name *string `pulumi:"name"`
}

// ChangeDataCaptureFolderInput is an input type that accepts ChangeDataCaptureFolderArgs and ChangeDataCaptureFolderOutput values.
// You can construct a concrete instance of `ChangeDataCaptureFolderInput` via:
//
//	ChangeDataCaptureFolderArgs{...}
type ChangeDataCaptureFolderInput interface {
	pulumi.Input

	ToChangeDataCaptureFolderOutput() ChangeDataCaptureFolderOutput
	ToChangeDataCaptureFolderOutputWithContext(context.Context) ChangeDataCaptureFolderOutput
}

// The folder that this CDC is in. If not specified, CDC will appear at the root level.
type ChangeDataCaptureFolderArgs struct {
	// The name of the folder that this CDC is in.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ChangeDataCaptureFolderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChangeDataCaptureFolder)(nil)).Elem()
}

func (i ChangeDataCaptureFolderArgs) ToChangeDataCaptureFolderOutput() ChangeDataCaptureFolderOutput {
	return i.ToChangeDataCaptureFolderOutputWithContext(context.Background())
}

func (i ChangeDataCaptureFolderArgs) ToChangeDataCaptureFolderOutputWithContext(ctx context.Context) ChangeDataCaptureFolderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChangeDataCaptureFolderOutput)
}

func (i ChangeDataCaptureFolderArgs) ToChangeDataCaptureFolderPtrOutput() ChangeDataCaptureFolderPtrOutput {
	return i.ToChangeDataCaptureFolderPtrOutputWithContext(context.Background())
}

func (i ChangeDataCaptureFolderArgs) ToChangeDataCaptureFolderPtrOutputWithContext(ctx context.Context) ChangeDataCaptureFolderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChangeDataCaptureFolderOutput).ToChangeDataCaptureFolderPtrOutputWithContext(ctx)
}

// ChangeDataCaptureFolderPtrInput is an input type that accepts ChangeDataCaptureFolderArgs, ChangeDataCaptureFolderPtr and ChangeDataCaptureFolderPtrOutput values.
// You can construct a concrete instance of `ChangeDataCaptureFolderPtrInput` via:
//
//	        ChangeDataCaptureFolderArgs{...}
//
//	or:
//
//	        nil
type ChangeDataCaptureFolderPtrInput interface {
	pulumi.Input

	ToChangeDataCaptureFolderPtrOutput() ChangeDataCaptureFolderPtrOutput
	ToChangeDataCaptureFolderPtrOutputWithContext(context.Context) ChangeDataCaptureFolderPtrOutput
}

type changeDataCaptureFolderPtrType ChangeDataCaptureFolderArgs

func ChangeDataCaptureFolderPtr(v *ChangeDataCaptureFolderArgs) ChangeDataCaptureFolderPtrInput {
	return (*changeDataCaptureFolderPtrType)(v)
}

func (*changeDataCaptureFolderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ChangeDataCaptureFolder)(nil)).Elem()
}

func (i *changeDataCaptureFolderPtrType) ToChangeDataCaptureFolderPtrOutput() ChangeDataCaptureFolderPtrOutput {
	return i.ToChangeDataCaptureFolderPtrOutputWithContext(context.Background())
}

func (i *changeDataCaptureFolderPtrType) ToChangeDataCaptureFolderPtrOutputWithContext(ctx context.Context) ChangeDataCaptureFolderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChangeDataCaptureFolderPtrOutput)
}

// The folder that this CDC is in. If not specified, CDC will appear at the root level.
type ChangeDataCaptureFolderOutput struct{ *pulumi.OutputState }

func (ChangeDataCaptureFolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChangeDataCaptureFolder)(nil)).Elem()
}

func (o ChangeDataCaptureFolderOutput) ToChangeDataCaptureFolderOutput() ChangeDataCaptureFolderOutput {
	return o
}

func (o ChangeDataCaptureFolderOutput) ToChangeDataCaptureFolderOutputWithContext(ctx context.Context) ChangeDataCaptureFolderOutput {
	return o
}

func (o ChangeDataCaptureFolderOutput) ToChangeDataCaptureFolderPtrOutput() ChangeDataCaptureFolderPtrOutput {
	return o.ToChangeDataCaptureFolderPtrOutputWithContext(context.Background())
}

func (o ChangeDataCaptureFolderOutput) ToChangeDataCaptureFolderPtrOutputWithContext(ctx context.Context) ChangeDataCaptureFolderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ChangeDataCaptureFolder) *ChangeDataCaptureFolder {
		return &v
	}).(ChangeDataCaptureFolderPtrOutput)
}

// The name of the folder that this CDC is in.
func (o ChangeDataCaptureFolderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChangeDataCaptureFolder) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ChangeDataCaptureFolderPtrOutput struct{ *pulumi.OutputState }

func (ChangeDataCaptureFolderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChangeDataCaptureFolder)(nil)).Elem()
}

func (o ChangeDataCaptureFolderPtrOutput) ToChangeDataCaptureFolderPtrOutput() ChangeDataCaptureFolderPtrOutput {
	return o
}

func (o ChangeDataCaptureFolderPtrOutput) ToChangeDataCaptureFolderPtrOutputWithContext(ctx context.Context) ChangeDataCaptureFolderPtrOutput {
	return o
}

func (o ChangeDataCaptureFolderPtrOutput) Elem() ChangeDataCaptureFolderOutput {
	return o.ApplyT(func(v *ChangeDataCaptureFolder) ChangeDataCaptureFolder {
		if v != nil {
			return *v
		}
		var ret ChangeDataCaptureFolder
		return ret
	}).(ChangeDataCaptureFolderOutput)
}

// The name of the folder that this CDC is in.
func (o ChangeDataCaptureFolderPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChangeDataCaptureFolder) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The folder that this CDC is in. If not specified, CDC will appear at the root level.
type ChangeDataCaptureResponseFolder struct {
	// The name of the folder that this CDC is in.
	Name *string `pulumi:"name"`
}

// The folder that this CDC is in. If not specified, CDC will appear at the root level.
type ChangeDataCaptureResponseFolderOutput struct{ *pulumi.OutputState }

func (ChangeDataCaptureResponseFolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChangeDataCaptureResponseFolder)(nil)).Elem()
}

func (o ChangeDataCaptureResponseFolderOutput) ToChangeDataCaptureResponseFolderOutput() ChangeDataCaptureResponseFolderOutput {
	return o
}

func (o ChangeDataCaptureResponseFolderOutput) ToChangeDataCaptureResponseFolderOutputWithContext(ctx context.Context) ChangeDataCaptureResponseFolderOutput {
	return o
}

// The name of the folder that this CDC is in.
func (o ChangeDataCaptureResponseFolderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChangeDataCaptureResponseFolder) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ChangeDataCaptureResponseFolderPtrOutput struct{ *pulumi.OutputState }

func (ChangeDataCaptureResponseFolderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChangeDataCaptureResponseFolder)(nil)).Elem()
}

func (o ChangeDataCaptureResponseFolderPtrOutput) ToChangeDataCaptureResponseFolderPtrOutput() ChangeDataCaptureResponseFolderPtrOutput {
	return o
}

func (o ChangeDataCaptureResponseFolderPtrOutput) ToChangeDataCaptureResponseFolderPtrOutputWithContext(ctx context.Context) ChangeDataCaptureResponseFolderPtrOutput {
	return o
}

func (o ChangeDataCaptureResponseFolderPtrOutput) Elem() ChangeDataCaptureResponseFolderOutput {
	return o.ApplyT(func(v *ChangeDataCaptureResponseFolder) ChangeDataCaptureResponseFolder {
		if v != nil {
			return *v
		}
		var ret ChangeDataCaptureResponseFolder
		return ret
	}).(ChangeDataCaptureResponseFolderOutput)
}

// The name of the folder that this CDC is in.
func (o ChangeDataCaptureResponseFolderPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChangeDataCaptureResponseFolder) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The custom setup of running cmdkey commands.
type CmdkeySetup struct {
	// The password of data source access.
	Password interface{} `pulumi:"password"`
	// The server name of data source access. Type: string.
	TargetName interface{} `pulumi:"targetName"`
	// The type of custom setup.
	// Expected value is 'CmdkeySetup'.
	Type string `pulumi:"type"`
	// The user name of data source access. Type: string.
	UserName interface{} `pulumi:"userName"`
}

// The custom setup of running cmdkey commands.
type CmdkeySetupResponse struct {
	// The password of data source access.
	Password interface{} `pulumi:"password"`
	// The server name of data source access. Type: string.
	TargetName interface{} `pulumi:"targetName"`
	// The type of custom setup.
	// Expected value is 'CmdkeySetup'.
	Type string `pulumi:"type"`
	// The user name of data source access. Type: string.
	UserName interface{} `pulumi:"userName"`
}

// The Common Data Service for Apps entity dataset.
type CommonDataServiceForAppsEntityDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The logical name of the entity. Type: string (or Expression with resultType string).
	EntityName interface{} `pulumi:"entityName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'CommonDataServiceForAppsEntity'.
	Type string `pulumi:"type"`
}

// The Common Data Service for Apps entity dataset.
type CommonDataServiceForAppsEntityDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The logical name of the entity. Type: string (or Expression with resultType string).
	EntityName interface{} `pulumi:"entityName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'CommonDataServiceForAppsEntity'.
	Type string `pulumi:"type"`
}

// Common Data Service for Apps linked service.
type CommonDataServiceForAppsLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to connect to Common Data Service for Apps server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario. 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The deployment type of the Common Data Service for Apps instance. 'Online' for Common Data Service for Apps Online and 'OnPremisesWithIfd' for Common Data Service for Apps on-premises with Ifd. Type: string (or Expression with resultType string).
	DeploymentType interface{} `pulumi:"deploymentType"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The host name of the on-premises Common Data Service for Apps server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
	HostName interface{} `pulumi:"hostName"`
	// The organization name of the Common Data Service for Apps instance. The property is required for on-prem and required for online when there are more than one Common Data Service for Apps instances associated with the user. Type: string (or Expression with resultType string).
	OrganizationName interface{} `pulumi:"organizationName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to access the Common Data Service for Apps instance.
	Password interface{} `pulumi:"password"`
	// The port of on-premises Common Data Service for Apps server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential interface{} `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType interface{} `pulumi:"servicePrincipalCredentialType"`
	// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The URL to the Microsoft Common Data Service for Apps server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
	ServiceUri interface{} `pulumi:"serviceUri"`
	// Type of linked service.
	// Expected value is 'CommonDataServiceForApps'.
	Type string `pulumi:"type"`
	// User name to access the Common Data Service for Apps instance. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// Common Data Service for Apps linked service.
type CommonDataServiceForAppsLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to connect to Common Data Service for Apps server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario. 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The deployment type of the Common Data Service for Apps instance. 'Online' for Common Data Service for Apps Online and 'OnPremisesWithIfd' for Common Data Service for Apps on-premises with Ifd. Type: string (or Expression with resultType string).
	DeploymentType interface{} `pulumi:"deploymentType"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The host name of the on-premises Common Data Service for Apps server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
	HostName interface{} `pulumi:"hostName"`
	// The organization name of the Common Data Service for Apps instance. The property is required for on-prem and required for online when there are more than one Common Data Service for Apps instances associated with the user. Type: string (or Expression with resultType string).
	OrganizationName interface{} `pulumi:"organizationName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to access the Common Data Service for Apps instance.
	Password interface{} `pulumi:"password"`
	// The port of on-premises Common Data Service for Apps server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential interface{} `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType interface{} `pulumi:"servicePrincipalCredentialType"`
	// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The URL to the Microsoft Common Data Service for Apps server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
	ServiceUri interface{} `pulumi:"serviceUri"`
	// Type of linked service.
	// Expected value is 'CommonDataServiceForApps'.
	Type string `pulumi:"type"`
	// User name to access the Common Data Service for Apps instance. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// A copy activity Common Data Service for Apps sink.
type CommonDataServiceForAppsSink struct {
	// The logical name of the alternate key which will be used when upserting records. Type: string (or Expression with resultType string).
	AlternateKeyName interface{} `pulumi:"alternateKeyName"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The flag indicating whether to ignore null values from input dataset (except key fields) during write operation. Default is false. Type: boolean (or Expression with resultType boolean).
	IgnoreNullValues interface{} `pulumi:"ignoreNullValues"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'CommonDataServiceForAppsSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation.
	WriteBehavior string `pulumi:"writeBehavior"`
}

// A copy activity Common Data Service for Apps sink.
type CommonDataServiceForAppsSinkResponse struct {
	// The logical name of the alternate key which will be used when upserting records. Type: string (or Expression with resultType string).
	AlternateKeyName interface{} `pulumi:"alternateKeyName"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The flag indicating whether to ignore null values from input dataset (except key fields) during write operation. Default is false. Type: boolean (or Expression with resultType boolean).
	IgnoreNullValues interface{} `pulumi:"ignoreNullValues"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'CommonDataServiceForAppsSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation.
	WriteBehavior string `pulumi:"writeBehavior"`
}

// A copy activity Common Data Service for Apps source.
type CommonDataServiceForAppsSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// FetchXML is a proprietary query language that is used in Microsoft Common Data Service for Apps (online & on-premises). Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'CommonDataServiceForAppsSource'.
	Type string `pulumi:"type"`
}

// A copy activity Common Data Service for Apps source.
type CommonDataServiceForAppsSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// FetchXML is a proprietary query language that is used in Microsoft Common Data Service for Apps (online & on-premises). Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'CommonDataServiceForAppsSource'.
	Type string `pulumi:"type"`
}

// The custom setup of installing 3rd party components.
type ComponentSetup struct {
	// The name of the 3rd party component.
	ComponentName string `pulumi:"componentName"`
	// The license key to activate the component.
	LicenseKey interface{} `pulumi:"licenseKey"`
	// The type of custom setup.
	// Expected value is 'ComponentSetup'.
	Type string `pulumi:"type"`
}

// The custom setup of installing 3rd party components.
type ComponentSetupResponse struct {
	// The name of the 3rd party component.
	ComponentName string `pulumi:"componentName"`
	// The license key to activate the component.
	LicenseKey interface{} `pulumi:"licenseKey"`
	// The type of custom setup.
	// Expected value is 'ComponentSetup'.
	Type string `pulumi:"type"`
}

// Concur Service linked service.
type ConcurLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Application client_id supplied by Concur App Management.
	ClientId interface{} `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Properties used to connect to Concur. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the username field.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Concur'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
	// The user name that you use to access Concur Service.
	Username interface{} `pulumi:"username"`
}

// Concur Service linked service.
type ConcurLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Application client_id supplied by Concur App Management.
	ClientId interface{} `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Properties used to connect to Concur. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the username field.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Concur'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
	// The user name that you use to access Concur Service.
	Username interface{} `pulumi:"username"`
}

// Concur Service dataset.
type ConcurObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'ConcurObject'.
	Type string `pulumi:"type"`
}

// Concur Service dataset.
type ConcurObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'ConcurObject'.
	Type string `pulumi:"type"`
}

// A copy activity Concur Service source.
type ConcurSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ConcurSource'.
	Type string `pulumi:"type"`
}

// A copy activity Concur Service source.
type ConcurSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ConcurSource'.
	Type string `pulumi:"type"`
}

// The connection state of a managed private endpoint
type ConnectionStatePropertiesResponse struct {
	// The actions required on the managed private endpoint
	ActionsRequired string `pulumi:"actionsRequired"`
	// The managed private endpoint description
	Description string `pulumi:"description"`
	// The approval status
	Status string `pulumi:"status"`
}

// The connection state of a managed private endpoint
type ConnectionStatePropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectionStatePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionStatePropertiesResponse)(nil)).Elem()
}

func (o ConnectionStatePropertiesResponseOutput) ToConnectionStatePropertiesResponseOutput() ConnectionStatePropertiesResponseOutput {
	return o
}

func (o ConnectionStatePropertiesResponseOutput) ToConnectionStatePropertiesResponseOutputWithContext(ctx context.Context) ConnectionStatePropertiesResponseOutput {
	return o
}

// The actions required on the managed private endpoint
func (o ConnectionStatePropertiesResponseOutput) ActionsRequired() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionStatePropertiesResponse) string { return v.ActionsRequired }).(pulumi.StringOutput)
}

// The managed private endpoint description
func (o ConnectionStatePropertiesResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionStatePropertiesResponse) string { return v.Description }).(pulumi.StringOutput)
}

// The approval status
func (o ConnectionStatePropertiesResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionStatePropertiesResponse) string { return v.Status }).(pulumi.StringOutput)
}

type ConnectionStatePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectionStatePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionStatePropertiesResponse)(nil)).Elem()
}

func (o ConnectionStatePropertiesResponsePtrOutput) ToConnectionStatePropertiesResponsePtrOutput() ConnectionStatePropertiesResponsePtrOutput {
	return o
}

func (o ConnectionStatePropertiesResponsePtrOutput) ToConnectionStatePropertiesResponsePtrOutputWithContext(ctx context.Context) ConnectionStatePropertiesResponsePtrOutput {
	return o
}

func (o ConnectionStatePropertiesResponsePtrOutput) Elem() ConnectionStatePropertiesResponseOutput {
	return o.ApplyT(func(v *ConnectionStatePropertiesResponse) ConnectionStatePropertiesResponse {
		if v != nil {
			return *v
		}
		var ret ConnectionStatePropertiesResponse
		return ret
	}).(ConnectionStatePropertiesResponseOutput)
}

// The actions required on the managed private endpoint
func (o ConnectionStatePropertiesResponsePtrOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionStatePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ActionsRequired
	}).(pulumi.StringPtrOutput)
}

// The managed private endpoint description
func (o ConnectionStatePropertiesResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionStatePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Description
	}).(pulumi.StringPtrOutput)
}

// The approval status
func (o ConnectionStatePropertiesResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionStatePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

// Base class for all control activities like IfCondition, ForEach , Until.
type ControlActivity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'Container'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// Base class for all control activities like IfCondition, ForEach , Until.
type ControlActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'Container'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Copy activity.
type CopyActivity struct {
	// Maximum number of data integration units that can be used to perform this data movement. Type: integer (or Expression with resultType integer), minimum: 0.
	DataIntegrationUnits interface{} `pulumi:"dataIntegrationUnits"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Whether to skip incompatible row. Default value is false. Type: boolean (or Expression with resultType boolean).
	EnableSkipIncompatibleRow interface{} `pulumi:"enableSkipIncompatibleRow"`
	// Specifies whether to copy data via an interim staging. Default value is false. Type: boolean (or Expression with resultType boolean).
	EnableStaging interface{} `pulumi:"enableStaging"`
	// List of inputs for the activity.
	Inputs []DatasetReference `pulumi:"inputs"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Log settings customer needs provide when enabling log.
	LogSettings *LogSettings `pulumi:"logSettings"`
	// (Deprecated. Please use LogSettings) Log storage settings customer need to provide when enabling session log.
	LogStorageSettings *LogStorageSettings `pulumi:"logStorageSettings"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// List of outputs for the activity.
	Outputs []DatasetReference `pulumi:"outputs"`
	// Maximum number of concurrent sessions opened on the source or sink to avoid overloading the data store. Type: integer (or Expression with resultType integer), minimum: 0.
	ParallelCopies interface{} `pulumi:"parallelCopies"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Preserve rules.
	Preserve []interface{} `pulumi:"preserve"`
	// Preserve Rules.
	PreserveRules []interface{} `pulumi:"preserveRules"`
	// Redirect incompatible row settings when EnableSkipIncompatibleRow is true.
	RedirectIncompatibleRowSettings *RedirectIncompatibleRowSettings `pulumi:"redirectIncompatibleRowSettings"`
	// Copy activity sink.
	Sink interface{} `pulumi:"sink"`
	// Specify the fault tolerance for data consistency.
	SkipErrorFile *SkipErrorFile `pulumi:"skipErrorFile"`
	// Copy activity source.
	Source interface{} `pulumi:"source"`
	// Specifies interim staging settings when EnableStaging is true.
	StagingSettings *StagingSettings `pulumi:"stagingSettings"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Copy activity translator. If not specified, tabular translator is used.
	Translator interface{} `pulumi:"translator"`
	// Type of activity.
	// Expected value is 'Copy'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
	// Whether to enable Data Consistency validation. Type: boolean (or Expression with resultType boolean).
	ValidateDataConsistency interface{} `pulumi:"validateDataConsistency"`
}

// Settings for copy activity log.
type CopyActivityLogSettings struct {
	// Specifies whether to enable reliable logging. Type: boolean (or Expression with resultType boolean).
	EnableReliableLogging interface{} `pulumi:"enableReliableLogging"`
	// Gets or sets the log level, support: Info, Warning. Type: string (or Expression with resultType string).
	LogLevel interface{} `pulumi:"logLevel"`
}

// Settings for copy activity log.
type CopyActivityLogSettingsResponse struct {
	// Specifies whether to enable reliable logging. Type: boolean (or Expression with resultType boolean).
	EnableReliableLogging interface{} `pulumi:"enableReliableLogging"`
	// Gets or sets the log level, support: Info, Warning. Type: string (or Expression with resultType string).
	LogLevel interface{} `pulumi:"logLevel"`
}

// Copy activity.
type CopyActivityResponse struct {
	// Maximum number of data integration units that can be used to perform this data movement. Type: integer (or Expression with resultType integer), minimum: 0.
	DataIntegrationUnits interface{} `pulumi:"dataIntegrationUnits"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Whether to skip incompatible row. Default value is false. Type: boolean (or Expression with resultType boolean).
	EnableSkipIncompatibleRow interface{} `pulumi:"enableSkipIncompatibleRow"`
	// Specifies whether to copy data via an interim staging. Default value is false. Type: boolean (or Expression with resultType boolean).
	EnableStaging interface{} `pulumi:"enableStaging"`
	// List of inputs for the activity.
	Inputs []DatasetReferenceResponse `pulumi:"inputs"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Log settings customer needs provide when enabling log.
	LogSettings *LogSettingsResponse `pulumi:"logSettings"`
	// (Deprecated. Please use LogSettings) Log storage settings customer need to provide when enabling session log.
	LogStorageSettings *LogStorageSettingsResponse `pulumi:"logStorageSettings"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// List of outputs for the activity.
	Outputs []DatasetReferenceResponse `pulumi:"outputs"`
	// Maximum number of concurrent sessions opened on the source or sink to avoid overloading the data store. Type: integer (or Expression with resultType integer), minimum: 0.
	ParallelCopies interface{} `pulumi:"parallelCopies"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Preserve rules.
	Preserve []interface{} `pulumi:"preserve"`
	// Preserve Rules.
	PreserveRules []interface{} `pulumi:"preserveRules"`
	// Redirect incompatible row settings when EnableSkipIncompatibleRow is true.
	RedirectIncompatibleRowSettings *RedirectIncompatibleRowSettingsResponse `pulumi:"redirectIncompatibleRowSettings"`
	// Copy activity sink.
	Sink interface{} `pulumi:"sink"`
	// Specify the fault tolerance for data consistency.
	SkipErrorFile *SkipErrorFileResponse `pulumi:"skipErrorFile"`
	// Copy activity source.
	Source interface{} `pulumi:"source"`
	// Specifies interim staging settings when EnableStaging is true.
	StagingSettings *StagingSettingsResponse `pulumi:"stagingSettings"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Copy activity translator. If not specified, tabular translator is used.
	Translator interface{} `pulumi:"translator"`
	// Type of activity.
	// Expected value is 'Copy'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
	// Whether to enable Data Consistency validation. Type: boolean (or Expression with resultType boolean).
	ValidateDataConsistency interface{} `pulumi:"validateDataConsistency"`
}

// CopyComputeScale properties for managed integration runtime.
type CopyComputeScaleProperties struct {
	// DIU number setting reserved for copy activity execution. Supported values are multiples of 4 in range 4-256.
	DataIntegrationUnit *int `pulumi:"dataIntegrationUnit"`
	// Time to live (in minutes) setting of integration runtime which will execute copy activity.
	TimeToLive *int `pulumi:"timeToLive"`
}

// CopyComputeScale properties for managed integration runtime.
type CopyComputeScalePropertiesResponse struct {
	// DIU number setting reserved for copy activity execution. Supported values are multiples of 4 in range 4-256.
	DataIntegrationUnit *int `pulumi:"dataIntegrationUnit"`
	// Time to live (in minutes) setting of integration runtime which will execute copy activity.
	TimeToLive *int `pulumi:"timeToLive"`
}

// Microsoft Azure Cosmos Database (CosmosDB) linked service.
type CosmosDbLinkedService struct {
	// The endpoint of the Azure CosmosDB account. Type: string (or Expression with resultType string)
	AccountEndpoint interface{} `pulumi:"accountEndpoint"`
	// The account key of the Azure CosmosDB account. Type: SecureString or AzureKeyVaultSecretReference.
	AccountKey interface{} `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection mode used to access CosmosDB account. Type: string.
	ConnectionMode *string `pulumi:"connectionMode"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// The name of the database. Type: string (or Expression with resultType string)
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential interface{} `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string.
	ServicePrincipalCredentialType interface{} `pulumi:"servicePrincipalCredentialType"`
	// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'CosmosDb'.
	Type string `pulumi:"type"`
}

// Microsoft Azure Cosmos Database (CosmosDB) linked service.
type CosmosDbLinkedServiceResponse struct {
	// The endpoint of the Azure CosmosDB account. Type: string (or Expression with resultType string)
	AccountEndpoint interface{} `pulumi:"accountEndpoint"`
	// The account key of the Azure CosmosDB account. Type: SecureString or AzureKeyVaultSecretReference.
	AccountKey interface{} `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection mode used to access CosmosDB account. Type: string.
	ConnectionMode *string `pulumi:"connectionMode"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// The name of the database. Type: string (or Expression with resultType string)
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential interface{} `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string.
	ServicePrincipalCredentialType interface{} `pulumi:"servicePrincipalCredentialType"`
	// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'CosmosDb'.
	Type string `pulumi:"type"`
}

// The CosmosDB (MongoDB API) database dataset.
type CosmosDbMongoDbApiCollectionDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The collection name of the CosmosDB (MongoDB API) database. Type: string (or Expression with resultType string).
	Collection interface{} `pulumi:"collection"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'CosmosDbMongoDbApiCollection'.
	Type string `pulumi:"type"`
}

// The CosmosDB (MongoDB API) database dataset.
type CosmosDbMongoDbApiCollectionDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The collection name of the CosmosDB (MongoDB API) database. Type: string (or Expression with resultType string).
	Collection interface{} `pulumi:"collection"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'CosmosDbMongoDbApiCollection'.
	Type string `pulumi:"type"`
}

// Linked service for CosmosDB (MongoDB API) data source.
type CosmosDbMongoDbApiLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The CosmosDB (MongoDB API) connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The name of the CosmosDB (MongoDB API) database that you want to access. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Whether the CosmosDB (MongoDB API) server version is higher than 3.2. The default value is false. Type: boolean (or Expression with resultType boolean).
	IsServerVersionAbove32 interface{} `pulumi:"isServerVersionAbove32"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'CosmosDbMongoDbApi'.
	Type string `pulumi:"type"`
}

// Linked service for CosmosDB (MongoDB API) data source.
type CosmosDbMongoDbApiLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The CosmosDB (MongoDB API) connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The name of the CosmosDB (MongoDB API) database that you want to access. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Whether the CosmosDB (MongoDB API) server version is higher than 3.2. The default value is false. Type: boolean (or Expression with resultType boolean).
	IsServerVersionAbove32 interface{} `pulumi:"isServerVersionAbove32"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'CosmosDbMongoDbApi'.
	Type string `pulumi:"type"`
}

// A copy activity sink for a CosmosDB (MongoDB API) database.
type CosmosDbMongoDbApiSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'CosmosDbMongoDbApiSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Specifies whether the document with same key to be overwritten (upsert) rather than throw exception (insert). The default value is "insert". Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// A copy activity sink for a CosmosDB (MongoDB API) database.
type CosmosDbMongoDbApiSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'CosmosDbMongoDbApiSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Specifies whether the document with same key to be overwritten (upsert) rather than throw exception (insert). The default value is "insert". Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// A copy activity source for a CosmosDB (MongoDB API) database.
type CosmosDbMongoDbApiSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// Specifies the number of documents to return in each batch of the response from MongoDB instance. In most cases, modifying the batch size will not affect the user or the application. This property's main purpose is to avoid hit the limitation of response size. Type: integer (or Expression with resultType integer).
	BatchSize interface{} `pulumi:"batchSize"`
	// Cursor methods for Mongodb query.
	CursorMethods *MongoDbCursorMethodsProperties `pulumi:"cursorMethods"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies selection filter using query operators. To return all documents in a collection, omit this parameter or pass an empty document ({}). Type: string (or Expression with resultType string).
	Filter interface{} `pulumi:"filter"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'CosmosDbMongoDbApiSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for a CosmosDB (MongoDB API) database.
type CosmosDbMongoDbApiSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// Specifies the number of documents to return in each batch of the response from MongoDB instance. In most cases, modifying the batch size will not affect the user or the application. This property's main purpose is to avoid hit the limitation of response size. Type: integer (or Expression with resultType integer).
	BatchSize interface{} `pulumi:"batchSize"`
	// Cursor methods for Mongodb query.
	CursorMethods *MongoDbCursorMethodsPropertiesResponse `pulumi:"cursorMethods"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies selection filter using query operators. To return all documents in a collection, omit this parameter or pass an empty document ({}). Type: string (or Expression with resultType string).
	Filter interface{} `pulumi:"filter"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'CosmosDbMongoDbApiSource'.
	Type string `pulumi:"type"`
}

// Microsoft Azure CosmosDB (SQL API) Collection dataset.
type CosmosDbSqlApiCollectionDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// CosmosDB (SQL API) collection name. Type: string (or Expression with resultType string).
	CollectionName interface{} `pulumi:"collectionName"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'CosmosDbSqlApiCollection'.
	Type string `pulumi:"type"`
}

// Microsoft Azure CosmosDB (SQL API) Collection dataset.
type CosmosDbSqlApiCollectionDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// CosmosDB (SQL API) collection name. Type: string (or Expression with resultType string).
	CollectionName interface{} `pulumi:"collectionName"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'CosmosDbSqlApiCollection'.
	Type string `pulumi:"type"`
}

// A copy activity Azure CosmosDB (SQL API) Collection sink.
type CosmosDbSqlApiSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'CosmosDbSqlApiSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Describes how to write data to Azure Cosmos DB. Type: string (or Expression with resultType string). Allowed values: insert and upsert.
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// A copy activity Azure CosmosDB (SQL API) Collection sink.
type CosmosDbSqlApiSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'CosmosDbSqlApiSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Describes how to write data to Azure Cosmos DB. Type: string (or Expression with resultType string). Allowed values: insert and upsert.
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// A copy activity Azure CosmosDB (SQL API) Collection source.
type CosmosDbSqlApiSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// Whether detect primitive values as datetime values. Type: boolean (or Expression with resultType boolean).
	DetectDatetime interface{} `pulumi:"detectDatetime"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Page size of the result. Type: integer (or Expression with resultType integer).
	PageSize interface{} `pulumi:"pageSize"`
	// Preferred regions. Type: array of strings (or Expression with resultType array of strings).
	PreferredRegions interface{} `pulumi:"preferredRegions"`
	// SQL API query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'CosmosDbSqlApiSource'.
	Type string `pulumi:"type"`
}

// A copy activity Azure CosmosDB (SQL API) Collection source.
type CosmosDbSqlApiSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// Whether detect primitive values as datetime values. Type: boolean (or Expression with resultType boolean).
	DetectDatetime interface{} `pulumi:"detectDatetime"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Page size of the result. Type: integer (or Expression with resultType integer).
	PageSize interface{} `pulumi:"pageSize"`
	// Preferred regions. Type: array of strings (or Expression with resultType array of strings).
	PreferredRegions interface{} `pulumi:"preferredRegions"`
	// SQL API query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'CosmosDbSqlApiSource'.
	Type string `pulumi:"type"`
}

// Couchbase server linked service.
type CouchbaseLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The Azure key vault secret reference of credString in connection string.
	CredString *AzureKeyVaultSecretReference `pulumi:"credString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Couchbase'.
	Type string `pulumi:"type"`
}

// Couchbase server linked service.
type CouchbaseLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The Azure key vault secret reference of credString in connection string.
	CredString *AzureKeyVaultSecretReferenceResponse `pulumi:"credString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Couchbase'.
	Type string `pulumi:"type"`
}

// A copy activity Couchbase server source.
type CouchbaseSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'CouchbaseSource'.
	Type string `pulumi:"type"`
}

// A copy activity Couchbase server source.
type CouchbaseSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'CouchbaseSource'.
	Type string `pulumi:"type"`
}

// Couchbase server dataset.
type CouchbaseTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'CouchbaseTable'.
	Type string `pulumi:"type"`
}

// Couchbase server dataset.
type CouchbaseTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'CouchbaseTable'.
	Type string `pulumi:"type"`
}

// Credential reference type.
type CredentialReference struct {
	// Reference credential name.
	ReferenceName string `pulumi:"referenceName"`
	// Credential reference type.
	Type string `pulumi:"type"`
}

// Credential reference type.
type CredentialReferenceResponse struct {
	// Reference credential name.
	ReferenceName string `pulumi:"referenceName"`
	// Credential reference type.
	Type string `pulumi:"type"`
}

// Custom activity type.
type CustomActivity struct {
	// Elevation level and scope for the user, default is nonadmin task. Type: string (or Expression with resultType double).
	AutoUserSpecification interface{} `pulumi:"autoUserSpecification"`
	// Command for custom activity Type: string (or Expression with resultType string).
	Command interface{} `pulumi:"command"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// User defined property bag. There is no restriction on the keys or values that can be used. The user specified custom activity has the full responsibility to consume and interpret the content defined.
	ExtendedProperties map[string]interface{} `pulumi:"extendedProperties"`
	// Folder path for resource files Type: string (or Expression with resultType string).
	FolderPath interface{} `pulumi:"folderPath"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Reference objects
	ReferenceObjects *CustomActivityReferenceObject `pulumi:"referenceObjects"`
	// Resource linked service reference.
	ResourceLinkedService *LinkedServiceReference `pulumi:"resourceLinkedService"`
	// The retention time for the files submitted for custom activity. Type: double (or Expression with resultType double).
	RetentionTimeInDays interface{} `pulumi:"retentionTimeInDays"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'Custom'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// Reference objects for custom activity
type CustomActivityReferenceObject struct {
	// Dataset references.
	Datasets []DatasetReference `pulumi:"datasets"`
	// Linked service references.
	LinkedServices []LinkedServiceReference `pulumi:"linkedServices"`
}

// Reference objects for custom activity
type CustomActivityReferenceObjectResponse struct {
	// Dataset references.
	Datasets []DatasetReferenceResponse `pulumi:"datasets"`
	// Linked service references.
	LinkedServices []LinkedServiceReferenceResponse `pulumi:"linkedServices"`
}

// Custom activity type.
type CustomActivityResponse struct {
	// Elevation level and scope for the user, default is nonadmin task. Type: string (or Expression with resultType double).
	AutoUserSpecification interface{} `pulumi:"autoUserSpecification"`
	// Command for custom activity Type: string (or Expression with resultType string).
	Command interface{} `pulumi:"command"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// User defined property bag. There is no restriction on the keys or values that can be used. The user specified custom activity has the full responsibility to consume and interpret the content defined.
	ExtendedProperties map[string]interface{} `pulumi:"extendedProperties"`
	// Folder path for resource files Type: string (or Expression with resultType string).
	FolderPath interface{} `pulumi:"folderPath"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Reference objects
	ReferenceObjects *CustomActivityReferenceObjectResponse `pulumi:"referenceObjects"`
	// Resource linked service reference.
	ResourceLinkedService *LinkedServiceReferenceResponse `pulumi:"resourceLinkedService"`
	// The retention time for the files submitted for custom activity. Type: double (or Expression with resultType double).
	RetentionTimeInDays interface{} `pulumi:"retentionTimeInDays"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'Custom'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Custom linked service.
type CustomDataSourceLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'CustomDataSource'.
	Type string `pulumi:"type"`
}

// Custom linked service.
type CustomDataSourceLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'CustomDataSource'.
	Type string `pulumi:"type"`
}

// The custom dataset.
type CustomDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'CustomDataset'.
	Type string `pulumi:"type"`
}

// The custom dataset.
type CustomDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'CustomDataset'.
	Type string `pulumi:"type"`
}

// Trigger that runs every time a custom event is received.
type CustomEventsTrigger struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// The list of event types that cause this trigger to fire.
	Events []interface{} `pulumi:"events"`
	// Pipelines that need to be started.
	Pipelines []TriggerPipelineReference `pulumi:"pipelines"`
	// The ARM resource ID of the Azure Event Grid Topic.
	Scope string `pulumi:"scope"`
	// The event subject must begin with the pattern provided for trigger to fire. At least one of these must be provided: subjectBeginsWith, subjectEndsWith.
	SubjectBeginsWith *string `pulumi:"subjectBeginsWith"`
	// The event subject must end with the pattern provided for trigger to fire. At least one of these must be provided: subjectBeginsWith, subjectEndsWith.
	SubjectEndsWith *string `pulumi:"subjectEndsWith"`
	// Trigger type.
	// Expected value is 'CustomEventsTrigger'.
	Type string `pulumi:"type"`
}

// Trigger that runs every time a custom event is received.
type CustomEventsTriggerResponse struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// The list of event types that cause this trigger to fire.
	Events []interface{} `pulumi:"events"`
	// Pipelines that need to be started.
	Pipelines []TriggerPipelineReferenceResponse `pulumi:"pipelines"`
	// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState string `pulumi:"runtimeState"`
	// The ARM resource ID of the Azure Event Grid Topic.
	Scope string `pulumi:"scope"`
	// The event subject must begin with the pattern provided for trigger to fire. At least one of these must be provided: subjectBeginsWith, subjectEndsWith.
	SubjectBeginsWith *string `pulumi:"subjectBeginsWith"`
	// The event subject must end with the pattern provided for trigger to fire. At least one of these must be provided: subjectBeginsWith, subjectEndsWith.
	SubjectEndsWith *string `pulumi:"subjectEndsWith"`
	// Trigger type.
	// Expected value is 'CustomEventsTrigger'.
	Type string `pulumi:"type"`
}

// Default value.
type DWCopyCommandDefaultValue struct {
	// Column name. Type: object (or Expression with resultType string).
	ColumnName interface{} `pulumi:"columnName"`
	// The default value of the column. Type: object (or Expression with resultType string).
	DefaultValue interface{} `pulumi:"defaultValue"`
}

// Default value.
type DWCopyCommandDefaultValueResponse struct {
	// Column name. Type: object (or Expression with resultType string).
	ColumnName interface{} `pulumi:"columnName"`
	// The default value of the column. Type: object (or Expression with resultType string).
	DefaultValue interface{} `pulumi:"defaultValue"`
}

// DW Copy Command settings.
type DWCopyCommandSettings struct {
	// Additional options directly passed to SQL DW in Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalOptions": { "MAXERRORS": "1000", "DATEFORMAT": "'ymd'" }
	AdditionalOptions map[string]string `pulumi:"additionalOptions"`
	// Specifies the default values for each target column in SQL DW. The default values in the property overwrite the DEFAULT constraint set in the DB, and identity column cannot have a default value. Type: array of objects (or Expression with resultType array of objects).
	DefaultValues []DWCopyCommandDefaultValue `pulumi:"defaultValues"`
}

// DW Copy Command settings.
type DWCopyCommandSettingsResponse struct {
	// Additional options directly passed to SQL DW in Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalOptions": { "MAXERRORS": "1000", "DATEFORMAT": "'ymd'" }
	AdditionalOptions map[string]string `pulumi:"additionalOptions"`
	// Specifies the default values for each target column in SQL DW. The default values in the property overwrite the DEFAULT constraint set in the DB, and identity column cannot have a default value. Type: array of objects (or Expression with resultType array of objects).
	DefaultValues []DWCopyCommandDefaultValueResponse `pulumi:"defaultValues"`
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
type DataFlowFolder struct {
	// The name of the folder that this data flow is in.
	Name *string `pulumi:"name"`
}

// Data flow reference type.
type DataFlowReference struct {
	// Reference data flow parameters from dataset.
	DatasetParameters interface{} `pulumi:"datasetParameters"`
	// Data flow parameters
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Reference data flow name.
	ReferenceName string `pulumi:"referenceName"`
	// Data flow reference type.
	Type string `pulumi:"type"`
}

// Data flow reference type.
type DataFlowReferenceResponse struct {
	// Reference data flow parameters from dataset.
	DatasetParameters interface{} `pulumi:"datasetParameters"`
	// Data flow parameters
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Reference data flow name.
	ReferenceName string `pulumi:"referenceName"`
	// Data flow reference type.
	Type string `pulumi:"type"`
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
type DataFlowResponseFolder struct {
	// The name of the folder that this data flow is in.
	Name *string `pulumi:"name"`
}

// Transformation for data flow sink.
type DataFlowSink struct {
	// Dataset reference.
	Dataset *DatasetReference `pulumi:"dataset"`
	// Transformation description.
	Description *string `pulumi:"description"`
	// Flowlet Reference
	Flowlet *DataFlowReference `pulumi:"flowlet"`
	// Linked service reference.
	LinkedService *LinkedServiceReference `pulumi:"linkedService"`
	// Transformation name.
	Name string `pulumi:"name"`
	// Rejected data linked service reference.
	RejectedDataLinkedService *LinkedServiceReference `pulumi:"rejectedDataLinkedService"`
	// Schema linked service reference.
	SchemaLinkedService *LinkedServiceReference `pulumi:"schemaLinkedService"`
}

// Transformation for data flow sink.
type DataFlowSinkResponse struct {
	// Dataset reference.
	Dataset *DatasetReferenceResponse `pulumi:"dataset"`
	// Transformation description.
	Description *string `pulumi:"description"`
	// Flowlet Reference
	Flowlet *DataFlowReferenceResponse `pulumi:"flowlet"`
	// Linked service reference.
	LinkedService *LinkedServiceReferenceResponse `pulumi:"linkedService"`
	// Transformation name.
	Name string `pulumi:"name"`
	// Rejected data linked service reference.
	RejectedDataLinkedService *LinkedServiceReferenceResponse `pulumi:"rejectedDataLinkedService"`
	// Schema linked service reference.
	SchemaLinkedService *LinkedServiceReferenceResponse `pulumi:"schemaLinkedService"`
}

// Transformation for data flow source.
type DataFlowSource struct {
	// Dataset reference.
	Dataset *DatasetReference `pulumi:"dataset"`
	// Transformation description.
	Description *string `pulumi:"description"`
	// Flowlet Reference
	Flowlet *DataFlowReference `pulumi:"flowlet"`
	// Linked service reference.
	LinkedService *LinkedServiceReference `pulumi:"linkedService"`
	// Transformation name.
	Name string `pulumi:"name"`
	// Schema linked service reference.
	SchemaLinkedService *LinkedServiceReference `pulumi:"schemaLinkedService"`
}

// Transformation for data flow source.
type DataFlowSourceResponse struct {
	// Dataset reference.
	Dataset *DatasetReferenceResponse `pulumi:"dataset"`
	// Transformation description.
	Description *string `pulumi:"description"`
	// Flowlet Reference
	Flowlet *DataFlowReferenceResponse `pulumi:"flowlet"`
	// Linked service reference.
	LinkedService *LinkedServiceReferenceResponse `pulumi:"linkedService"`
	// Transformation name.
	Name string `pulumi:"name"`
	// Schema linked service reference.
	SchemaLinkedService *LinkedServiceReferenceResponse `pulumi:"schemaLinkedService"`
}

// Staging info for execute data flow activity.
type DataFlowStagingInfo struct {
	// Folder path for staging blob. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Staging linked service reference.
	LinkedService *LinkedServiceReference `pulumi:"linkedService"`
}

// Staging info for execute data flow activity.
type DataFlowStagingInfoResponse struct {
	// Folder path for staging blob. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Staging linked service reference.
	LinkedService *LinkedServiceReferenceResponse `pulumi:"linkedService"`
}

// Data Lake Analytics U-SQL activity.
type DataLakeAnalyticsUSQLActivity struct {
	// Compilation mode of U-SQL. Must be one of these values : Semantic, Full and SingleBox. Type: string (or Expression with resultType string).
	CompilationMode interface{} `pulumi:"compilationMode"`
	// The maximum number of nodes simultaneously used to run the job. Default value is 1. Type: integer (or Expression with resultType integer), minimum: 1.
	DegreeOfParallelism interface{} `pulumi:"degreeOfParallelism"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Parameters for U-SQL job request.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Determines which jobs out of all that are queued should be selected to run first. The lower the number, the higher the priority. Default value is 1000. Type: integer (or Expression with resultType integer), minimum: 1.
	Priority interface{} `pulumi:"priority"`
	// Runtime version of the U-SQL engine to use. Type: string (or Expression with resultType string).
	RuntimeVersion interface{} `pulumi:"runtimeVersion"`
	// Script linked service reference.
	ScriptLinkedService LinkedServiceReference `pulumi:"scriptLinkedService"`
	// Case-sensitive path to folder that contains the U-SQL script. Type: string (or Expression with resultType string).
	ScriptPath interface{} `pulumi:"scriptPath"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'DataLakeAnalyticsU-SQL'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// Data Lake Analytics U-SQL activity.
type DataLakeAnalyticsUSQLActivityResponse struct {
	// Compilation mode of U-SQL. Must be one of these values : Semantic, Full and SingleBox. Type: string (or Expression with resultType string).
	CompilationMode interface{} `pulumi:"compilationMode"`
	// The maximum number of nodes simultaneously used to run the job. Default value is 1. Type: integer (or Expression with resultType integer), minimum: 1.
	DegreeOfParallelism interface{} `pulumi:"degreeOfParallelism"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Parameters for U-SQL job request.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Determines which jobs out of all that are queued should be selected to run first. The lower the number, the higher the priority. Default value is 1000. Type: integer (or Expression with resultType integer), minimum: 1.
	Priority interface{} `pulumi:"priority"`
	// Runtime version of the U-SQL engine to use. Type: string (or Expression with resultType string).
	RuntimeVersion interface{} `pulumi:"runtimeVersion"`
	// Script linked service reference.
	ScriptLinkedService LinkedServiceReferenceResponse `pulumi:"scriptLinkedService"`
	// Case-sensitive path to folder that contains the U-SQL script. Type: string (or Expression with resultType string).
	ScriptPath interface{} `pulumi:"scriptPath"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'DataLakeAnalyticsU-SQL'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Source and target table mapping details.
type DataMapperMapping struct {
	// This holds the user provided attribute mapping information.
	AttributeMappingInfo *MapperAttributeMappings `pulumi:"attributeMappingInfo"`
	// The connection reference for the source connection.
	SourceConnectionReference *MapperConnectionReference `pulumi:"sourceConnectionReference"`
	// This holds the source denormalization information used while joining multiple sources.
	SourceDenormalizeInfo interface{} `pulumi:"sourceDenormalizeInfo"`
	// Name of the source table
	SourceEntityName *string `pulumi:"sourceEntityName"`
	// Name of the target table
	TargetEntityName *string `pulumi:"targetEntityName"`
}

// DataMapperMappingInput is an input type that accepts DataMapperMappingArgs and DataMapperMappingOutput values.
// You can construct a concrete instance of `DataMapperMappingInput` via:
//
//	DataMapperMappingArgs{...}
type DataMapperMappingInput interface {
	pulumi.Input

	ToDataMapperMappingOutput() DataMapperMappingOutput
	ToDataMapperMappingOutputWithContext(context.Context) DataMapperMappingOutput
}

// Source and target table mapping details.
type DataMapperMappingArgs struct {
	// This holds the user provided attribute mapping information.
	AttributeMappingInfo MapperAttributeMappingsPtrInput `pulumi:"attributeMappingInfo"`
	// The connection reference for the source connection.
	SourceConnectionReference MapperConnectionReferencePtrInput `pulumi:"sourceConnectionReference"`
	// This holds the source denormalization information used while joining multiple sources.
	SourceDenormalizeInfo pulumi.Input `pulumi:"sourceDenormalizeInfo"`
	// Name of the source table
	SourceEntityName pulumi.StringPtrInput `pulumi:"sourceEntityName"`
	// Name of the target table
	TargetEntityName pulumi.StringPtrInput `pulumi:"targetEntityName"`
}

func (DataMapperMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataMapperMapping)(nil)).Elem()
}

func (i DataMapperMappingArgs) ToDataMapperMappingOutput() DataMapperMappingOutput {
	return i.ToDataMapperMappingOutputWithContext(context.Background())
}

func (i DataMapperMappingArgs) ToDataMapperMappingOutputWithContext(ctx context.Context) DataMapperMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataMapperMappingOutput)
}

// DataMapperMappingArrayInput is an input type that accepts DataMapperMappingArray and DataMapperMappingArrayOutput values.
// You can construct a concrete instance of `DataMapperMappingArrayInput` via:
//
//	DataMapperMappingArray{ DataMapperMappingArgs{...} }
type DataMapperMappingArrayInput interface {
	pulumi.Input

	ToDataMapperMappingArrayOutput() DataMapperMappingArrayOutput
	ToDataMapperMappingArrayOutputWithContext(context.Context) DataMapperMappingArrayOutput
}

type DataMapperMappingArray []DataMapperMappingInput

func (DataMapperMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataMapperMapping)(nil)).Elem()
}

func (i DataMapperMappingArray) ToDataMapperMappingArrayOutput() DataMapperMappingArrayOutput {
	return i.ToDataMapperMappingArrayOutputWithContext(context.Background())
}

func (i DataMapperMappingArray) ToDataMapperMappingArrayOutputWithContext(ctx context.Context) DataMapperMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataMapperMappingArrayOutput)
}

// Source and target table mapping details.
type DataMapperMappingOutput struct{ *pulumi.OutputState }

func (DataMapperMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataMapperMapping)(nil)).Elem()
}

func (o DataMapperMappingOutput) ToDataMapperMappingOutput() DataMapperMappingOutput {
	return o
}

func (o DataMapperMappingOutput) ToDataMapperMappingOutputWithContext(ctx context.Context) DataMapperMappingOutput {
	return o
}

// This holds the user provided attribute mapping information.
func (o DataMapperMappingOutput) AttributeMappingInfo() MapperAttributeMappingsPtrOutput {
	return o.ApplyT(func(v DataMapperMapping) *MapperAttributeMappings { return v.AttributeMappingInfo }).(MapperAttributeMappingsPtrOutput)
}

// The connection reference for the source connection.
func (o DataMapperMappingOutput) SourceConnectionReference() MapperConnectionReferencePtrOutput {
	return o.ApplyT(func(v DataMapperMapping) *MapperConnectionReference { return v.SourceConnectionReference }).(MapperConnectionReferencePtrOutput)
}

// This holds the source denormalization information used while joining multiple sources.
func (o DataMapperMappingOutput) SourceDenormalizeInfo() pulumi.AnyOutput {
	return o.ApplyT(func(v DataMapperMapping) interface{} { return v.SourceDenormalizeInfo }).(pulumi.AnyOutput)
}

// Name of the source table
func (o DataMapperMappingOutput) SourceEntityName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataMapperMapping) *string { return v.SourceEntityName }).(pulumi.StringPtrOutput)
}

// Name of the target table
func (o DataMapperMappingOutput) TargetEntityName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataMapperMapping) *string { return v.TargetEntityName }).(pulumi.StringPtrOutput)
}

type DataMapperMappingArrayOutput struct{ *pulumi.OutputState }

func (DataMapperMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataMapperMapping)(nil)).Elem()
}

func (o DataMapperMappingArrayOutput) ToDataMapperMappingArrayOutput() DataMapperMappingArrayOutput {
	return o
}

func (o DataMapperMappingArrayOutput) ToDataMapperMappingArrayOutputWithContext(ctx context.Context) DataMapperMappingArrayOutput {
	return o
}

func (o DataMapperMappingArrayOutput) Index(i pulumi.IntInput) DataMapperMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataMapperMapping {
		return vs[0].([]DataMapperMapping)[vs[1].(int)]
	}).(DataMapperMappingOutput)
}

// Source and target table mapping details.
type DataMapperMappingResponse struct {
	// This holds the user provided attribute mapping information.
	AttributeMappingInfo *MapperAttributeMappingsResponse `pulumi:"attributeMappingInfo"`
	// The connection reference for the source connection.
	SourceConnectionReference *MapperConnectionReferenceResponse `pulumi:"sourceConnectionReference"`
	// This holds the source denormalization information used while joining multiple sources.
	SourceDenormalizeInfo interface{} `pulumi:"sourceDenormalizeInfo"`
	// Name of the source table
	SourceEntityName *string `pulumi:"sourceEntityName"`
	// Name of the target table
	TargetEntityName *string `pulumi:"targetEntityName"`
}

// Source and target table mapping details.
type DataMapperMappingResponseOutput struct{ *pulumi.OutputState }

func (DataMapperMappingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataMapperMappingResponse)(nil)).Elem()
}

func (o DataMapperMappingResponseOutput) ToDataMapperMappingResponseOutput() DataMapperMappingResponseOutput {
	return o
}

func (o DataMapperMappingResponseOutput) ToDataMapperMappingResponseOutputWithContext(ctx context.Context) DataMapperMappingResponseOutput {
	return o
}

// This holds the user provided attribute mapping information.
func (o DataMapperMappingResponseOutput) AttributeMappingInfo() MapperAttributeMappingsResponsePtrOutput {
	return o.ApplyT(func(v DataMapperMappingResponse) *MapperAttributeMappingsResponse { return v.AttributeMappingInfo }).(MapperAttributeMappingsResponsePtrOutput)
}

// The connection reference for the source connection.
func (o DataMapperMappingResponseOutput) SourceConnectionReference() MapperConnectionReferenceResponsePtrOutput {
	return o.ApplyT(func(v DataMapperMappingResponse) *MapperConnectionReferenceResponse {
		return v.SourceConnectionReference
	}).(MapperConnectionReferenceResponsePtrOutput)
}

// This holds the source denormalization information used while joining multiple sources.
func (o DataMapperMappingResponseOutput) SourceDenormalizeInfo() pulumi.AnyOutput {
	return o.ApplyT(func(v DataMapperMappingResponse) interface{} { return v.SourceDenormalizeInfo }).(pulumi.AnyOutput)
}

// Name of the source table
func (o DataMapperMappingResponseOutput) SourceEntityName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataMapperMappingResponse) *string { return v.SourceEntityName }).(pulumi.StringPtrOutput)
}

// Name of the target table
func (o DataMapperMappingResponseOutput) TargetEntityName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataMapperMappingResponse) *string { return v.TargetEntityName }).(pulumi.StringPtrOutput)
}

type DataMapperMappingResponseArrayOutput struct{ *pulumi.OutputState }

func (DataMapperMappingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataMapperMappingResponse)(nil)).Elem()
}

func (o DataMapperMappingResponseArrayOutput) ToDataMapperMappingResponseArrayOutput() DataMapperMappingResponseArrayOutput {
	return o
}

func (o DataMapperMappingResponseArrayOutput) ToDataMapperMappingResponseArrayOutputWithContext(ctx context.Context) DataMapperMappingResponseArrayOutput {
	return o
}

func (o DataMapperMappingResponseArrayOutput) Index(i pulumi.IntInput) DataMapperMappingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataMapperMappingResponse {
		return vs[0].([]DataMapperMappingResponse)[vs[1].(int)]
	}).(DataMapperMappingResponseOutput)
}

// DatabricksNotebook activity.
type DatabricksNotebookActivity struct {
	// Base parameters to be used for each run of this job.If the notebook takes a parameter that is not specified, the default value from the notebook will be used.
	BaseParameters map[string]interface{} `pulumi:"baseParameters"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// A list of libraries to be installed on the cluster that will execute the job.
	Libraries []map[string]interface{} `pulumi:"libraries"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// The absolute path of the notebook to be run in the Databricks Workspace. This path must begin with a slash. Type: string (or Expression with resultType string).
	NotebookPath interface{} `pulumi:"notebookPath"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'DatabricksNotebook'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// DatabricksNotebook activity.
type DatabricksNotebookActivityResponse struct {
	// Base parameters to be used for each run of this job.If the notebook takes a parameter that is not specified, the default value from the notebook will be used.
	BaseParameters map[string]interface{} `pulumi:"baseParameters"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// A list of libraries to be installed on the cluster that will execute the job.
	Libraries []map[string]interface{} `pulumi:"libraries"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// The absolute path of the notebook to be run in the Databricks Workspace. This path must begin with a slash. Type: string (or Expression with resultType string).
	NotebookPath interface{} `pulumi:"notebookPath"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'DatabricksNotebook'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// DatabricksSparkJar activity.
type DatabricksSparkJarActivity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// A list of libraries to be installed on the cluster that will execute the job.
	Libraries []map[string]interface{} `pulumi:"libraries"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// The full name of the class containing the main method to be executed. This class must be contained in a JAR provided as a library. Type: string (or Expression with resultType string).
	MainClassName interface{} `pulumi:"mainClassName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Parameters that will be passed to the main method.
	Parameters []interface{} `pulumi:"parameters"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'DatabricksSparkJar'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// DatabricksSparkJar activity.
type DatabricksSparkJarActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// A list of libraries to be installed on the cluster that will execute the job.
	Libraries []map[string]interface{} `pulumi:"libraries"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The full name of the class containing the main method to be executed. This class must be contained in a JAR provided as a library. Type: string (or Expression with resultType string).
	MainClassName interface{} `pulumi:"mainClassName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Parameters that will be passed to the main method.
	Parameters []interface{} `pulumi:"parameters"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'DatabricksSparkJar'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// DatabricksSparkPython activity.
type DatabricksSparkPythonActivity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// A list of libraries to be installed on the cluster that will execute the job.
	Libraries []map[string]interface{} `pulumi:"libraries"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Command line parameters that will be passed to the Python file.
	Parameters []interface{} `pulumi:"parameters"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// The URI of the Python file to be executed. DBFS paths are supported. Type: string (or Expression with resultType string).
	PythonFile interface{} `pulumi:"pythonFile"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'DatabricksSparkPython'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// DatabricksSparkPython activity.
type DatabricksSparkPythonActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// A list of libraries to be installed on the cluster that will execute the job.
	Libraries []map[string]interface{} `pulumi:"libraries"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Command line parameters that will be passed to the Python file.
	Parameters []interface{} `pulumi:"parameters"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// The URI of the Python file to be executed. DBFS paths are supported. Type: string (or Expression with resultType string).
	PythonFile interface{} `pulumi:"pythonFile"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'DatabricksSparkPython'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// The compression method used on a dataset.
type DatasetCompression struct {
	// The dataset compression level. Type: string (or Expression with resultType string).
	Level interface{} `pulumi:"level"`
	// Type of dataset compression. Type: string (or Expression with resultType string).
	Type interface{} `pulumi:"type"`
}

// The compression method used on a dataset.
type DatasetCompressionResponse struct {
	// The dataset compression level. Type: string (or Expression with resultType string).
	Level interface{} `pulumi:"level"`
	// Type of dataset compression. Type: string (or Expression with resultType string).
	Type interface{} `pulumi:"type"`
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
type DatasetFolder struct {
	// The name of the folder that this Dataset is in.
	Name *string `pulumi:"name"`
}

// Dataset reference type.
type DatasetReference struct {
	// Arguments for dataset.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Reference dataset name.
	ReferenceName string `pulumi:"referenceName"`
	// Dataset reference type.
	Type string `pulumi:"type"`
}

// Dataset reference type.
type DatasetReferenceResponse struct {
	// Arguments for dataset.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Reference dataset name.
	ReferenceName string `pulumi:"referenceName"`
	// Dataset reference type.
	Type string `pulumi:"type"`
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
type DatasetResponseFolder struct {
	// The name of the folder that this Dataset is in.
	Name *string `pulumi:"name"`
}

// Linked service for Dataworld.
type DataworldLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The api token for the Dataworld source.
	ApiToken interface{} `pulumi:"apiToken"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Dataworld'.
	Type string `pulumi:"type"`
}

// Linked service for Dataworld.
type DataworldLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The api token for the Dataworld source.
	ApiToken interface{} `pulumi:"apiToken"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Dataworld'.
	Type string `pulumi:"type"`
}

// Linked service for DB2 data source.
type Db2LinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// AuthenticationType to be used for connection. It is mutually exclusive with connectionString property.
	AuthenticationType *string `pulumi:"authenticationType"`
	// Certificate Common Name when TLS is enabled. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	CertificateCommonName interface{} `pulumi:"certificateCommonName"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with server, database, authenticationType, userName, packageCollection and certificateCommonName property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Database name for connection. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. It is mutually exclusive with connectionString property. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Under where packages are created when querying database. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	PackageCollection interface{} `pulumi:"packageCollection"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// Server name for connection. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	// Expected value is 'Db2'.
	Type string `pulumi:"type"`
	// Username for authentication. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// Linked service for DB2 data source.
type Db2LinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// AuthenticationType to be used for connection. It is mutually exclusive with connectionString property.
	AuthenticationType *string `pulumi:"authenticationType"`
	// Certificate Common Name when TLS is enabled. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	CertificateCommonName interface{} `pulumi:"certificateCommonName"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with server, database, authenticationType, userName, packageCollection and certificateCommonName property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Database name for connection. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. It is mutually exclusive with connectionString property. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Under where packages are created when querying database. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	PackageCollection interface{} `pulumi:"packageCollection"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// Server name for connection. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	// Expected value is 'Db2'.
	Type string `pulumi:"type"`
	// Username for authentication. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// A copy activity source for Db2 databases.
type Db2Source struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'Db2Source'.
	Type string `pulumi:"type"`
}

// A copy activity source for Db2 databases.
type Db2SourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'Db2Source'.
	Type string `pulumi:"type"`
}

// The Db2 table dataset.
type Db2TableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The Db2 table name. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'Db2Table'.
	Type string `pulumi:"type"`
}

// The Db2 table dataset.
type Db2TableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The Db2 table name. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'Db2Table'.
	Type string `pulumi:"type"`
}

// Delete activity.
type DeleteActivity struct {
	// Delete activity dataset reference.
	Dataset DatasetReference `pulumi:"dataset"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Whether to record detailed logs of delete-activity execution. Default value is false. Type: boolean (or Expression with resultType boolean).
	EnableLogging interface{} `pulumi:"enableLogging"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Log storage settings customer need to provide when enableLogging is true.
	LogStorageSettings *LogStorageSettings `pulumi:"logStorageSettings"`
	// The max concurrent connections to connect data source at the same time.
	MaxConcurrentConnections *int `pulumi:"maxConcurrentConnections"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// If true, files or sub-folders under current folder path will be deleted recursively. Default is false. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Delete activity store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Type of activity.
	// Expected value is 'Delete'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// Delete activity.
type DeleteActivityResponse struct {
	// Delete activity dataset reference.
	Dataset DatasetReferenceResponse `pulumi:"dataset"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Whether to record detailed logs of delete-activity execution. Default value is false. Type: boolean (or Expression with resultType boolean).
	EnableLogging interface{} `pulumi:"enableLogging"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Log storage settings customer need to provide when enableLogging is true.
	LogStorageSettings *LogStorageSettingsResponse `pulumi:"logStorageSettings"`
	// The max concurrent connections to connect data source at the same time.
	MaxConcurrentConnections *int `pulumi:"maxConcurrentConnections"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// If true, files or sub-folders under current folder path will be deleted recursively. Default is false. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Delete activity store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Type of activity.
	// Expected value is 'Delete'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Delimited text dataset.
type DelimitedTextDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The column delimiter. Type: string (or Expression with resultType string).
	ColumnDelimiter interface{} `pulumi:"columnDelimiter"`
	// The data compressionCodec. Type: string (or Expression with resultType string).
	CompressionCodec interface{} `pulumi:"compressionCodec"`
	// The data compression method used for DelimitedText.
	CompressionLevel interface{} `pulumi:"compressionLevel"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The code page name of the preferred encoding. If miss, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
	EncodingName interface{} `pulumi:"encodingName"`
	// The escape character. Type: string (or Expression with resultType string).
	EscapeChar interface{} `pulumi:"escapeChar"`
	// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
	FirstRowAsHeader interface{} `pulumi:"firstRowAsHeader"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The location of the delimited text storage.
	Location interface{} `pulumi:"location"`
	// The null value string. Type: string (or Expression with resultType string).
	NullValue interface{} `pulumi:"nullValue"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The quote character. Type: string (or Expression with resultType string).
	QuoteChar interface{} `pulumi:"quoteChar"`
	// The row delimiter. Type: string (or Expression with resultType string).
	RowDelimiter interface{} `pulumi:"rowDelimiter"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'DelimitedText'.
	Type string `pulumi:"type"`
}

// Delimited text dataset.
type DelimitedTextDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The column delimiter. Type: string (or Expression with resultType string).
	ColumnDelimiter interface{} `pulumi:"columnDelimiter"`
	// The data compressionCodec. Type: string (or Expression with resultType string).
	CompressionCodec interface{} `pulumi:"compressionCodec"`
	// The data compression method used for DelimitedText.
	CompressionLevel interface{} `pulumi:"compressionLevel"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The code page name of the preferred encoding. If miss, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
	EncodingName interface{} `pulumi:"encodingName"`
	// The escape character. Type: string (or Expression with resultType string).
	EscapeChar interface{} `pulumi:"escapeChar"`
	// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
	FirstRowAsHeader interface{} `pulumi:"firstRowAsHeader"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The location of the delimited text storage.
	Location interface{} `pulumi:"location"`
	// The null value string. Type: string (or Expression with resultType string).
	NullValue interface{} `pulumi:"nullValue"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The quote character. Type: string (or Expression with resultType string).
	QuoteChar interface{} `pulumi:"quoteChar"`
	// The row delimiter. Type: string (or Expression with resultType string).
	RowDelimiter interface{} `pulumi:"rowDelimiter"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'DelimitedText'.
	Type string `pulumi:"type"`
}

// Delimited text read settings.
type DelimitedTextReadSettings struct {
	// Compression settings.
	CompressionProperties interface{} `pulumi:"compressionProperties"`
	// Indicates the number of non-empty rows to skip when reading data from input files. Type: integer (or Expression with resultType integer).
	SkipLineCount interface{} `pulumi:"skipLineCount"`
	// The read setting type.
	// Expected value is 'DelimitedTextReadSettings'.
	Type string `pulumi:"type"`
}

// Delimited text read settings.
type DelimitedTextReadSettingsResponse struct {
	// Compression settings.
	CompressionProperties interface{} `pulumi:"compressionProperties"`
	// Indicates the number of non-empty rows to skip when reading data from input files. Type: integer (or Expression with resultType integer).
	SkipLineCount interface{} `pulumi:"skipLineCount"`
	// The read setting type.
	// Expected value is 'DelimitedTextReadSettings'.
	Type string `pulumi:"type"`
}

// A copy activity DelimitedText sink.
type DelimitedTextSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// DelimitedText format settings.
	FormatSettings *DelimitedTextWriteSettings `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// DelimitedText store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy sink type.
	// Expected value is 'DelimitedTextSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity DelimitedText sink.
type DelimitedTextSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// DelimitedText format settings.
	FormatSettings *DelimitedTextWriteSettingsResponse `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// DelimitedText store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy sink type.
	// Expected value is 'DelimitedTextSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity DelimitedText source.
type DelimitedTextSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// DelimitedText format settings.
	FormatSettings *DelimitedTextReadSettings `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// DelimitedText store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'DelimitedTextSource'.
	Type string `pulumi:"type"`
}

// A copy activity DelimitedText source.
type DelimitedTextSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// DelimitedText format settings.
	FormatSettings *DelimitedTextReadSettingsResponse `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// DelimitedText store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'DelimitedTextSource'.
	Type string `pulumi:"type"`
}

// Delimited text write settings.
type DelimitedTextWriteSettings struct {
	// The file extension used to create the files. Type: string (or Expression with resultType string).
	FileExtension interface{} `pulumi:"fileExtension"`
	// Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
	FileNamePrefix interface{} `pulumi:"fileNamePrefix"`
	// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
	MaxRowsPerFile interface{} `pulumi:"maxRowsPerFile"`
	// Indicates whether string values should always be enclosed with quotes. Type: boolean (or Expression with resultType boolean).
	QuoteAllText interface{} `pulumi:"quoteAllText"`
	// The write setting type.
	// Expected value is 'DelimitedTextWriteSettings'.
	Type string `pulumi:"type"`
}

// Delimited text write settings.
type DelimitedTextWriteSettingsResponse struct {
	// The file extension used to create the files. Type: string (or Expression with resultType string).
	FileExtension interface{} `pulumi:"fileExtension"`
	// Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
	FileNamePrefix interface{} `pulumi:"fileNamePrefix"`
	// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
	MaxRowsPerFile interface{} `pulumi:"maxRowsPerFile"`
	// Indicates whether string values should always be enclosed with quotes. Type: boolean (or Expression with resultType boolean).
	QuoteAllText interface{} `pulumi:"quoteAllText"`
	// The write setting type.
	// Expected value is 'DelimitedTextWriteSettings'.
	Type string `pulumi:"type"`
}

// Distcp settings.
type DistcpSettings struct {
	// Specifies the Distcp options. Type: string (or Expression with resultType string).
	DistcpOptions interface{} `pulumi:"distcpOptions"`
	// Specifies the Yarn ResourceManager endpoint. Type: string (or Expression with resultType string).
	ResourceManagerEndpoint interface{} `pulumi:"resourceManagerEndpoint"`
	// Specifies an existing folder path which will be used to store temp Distcp command script. The script file is generated by ADF and will be removed after Copy job finished. Type: string (or Expression with resultType string).
	TempScriptPath interface{} `pulumi:"tempScriptPath"`
}

// Distcp settings.
type DistcpSettingsResponse struct {
	// Specifies the Distcp options. Type: string (or Expression with resultType string).
	DistcpOptions interface{} `pulumi:"distcpOptions"`
	// Specifies the Yarn ResourceManager endpoint. Type: string (or Expression with resultType string).
	ResourceManagerEndpoint interface{} `pulumi:"resourceManagerEndpoint"`
	// Specifies an existing folder path which will be used to store temp Distcp command script. The script file is generated by ADF and will be removed after Copy job finished. Type: string (or Expression with resultType string).
	TempScriptPath interface{} `pulumi:"tempScriptPath"`
}

// Microsoft Azure Document Database Collection dataset.
type DocumentDbCollectionDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Document Database collection name. Type: string (or Expression with resultType string).
	CollectionName interface{} `pulumi:"collectionName"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'DocumentDbCollection'.
	Type string `pulumi:"type"`
}

// Microsoft Azure Document Database Collection dataset.
type DocumentDbCollectionDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Document Database collection name. Type: string (or Expression with resultType string).
	CollectionName interface{} `pulumi:"collectionName"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'DocumentDbCollection'.
	Type string `pulumi:"type"`
}

// A copy activity Document Database Collection sink.
type DocumentDbCollectionSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Nested properties separator. Default is . (dot). Type: string (or Expression with resultType string).
	NestingSeparator interface{} `pulumi:"nestingSeparator"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'DocumentDbCollectionSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Describes how to write data to Azure Cosmos DB. Type: string (or Expression with resultType string). Allowed values: insert and upsert.
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// A copy activity Document Database Collection sink.
type DocumentDbCollectionSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Nested properties separator. Default is . (dot). Type: string (or Expression with resultType string).
	NestingSeparator interface{} `pulumi:"nestingSeparator"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'DocumentDbCollectionSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Describes how to write data to Azure Cosmos DB. Type: string (or Expression with resultType string). Allowed values: insert and upsert.
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// A copy activity Document Database Collection source.
type DocumentDbCollectionSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Nested properties separator. Type: string (or Expression with resultType string).
	NestingSeparator interface{} `pulumi:"nestingSeparator"`
	// Documents query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'DocumentDbCollectionSource'.
	Type string `pulumi:"type"`
}

// A copy activity Document Database Collection source.
type DocumentDbCollectionSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Nested properties separator. Type: string (or Expression with resultType string).
	NestingSeparator interface{} `pulumi:"nestingSeparator"`
	// Documents query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'DocumentDbCollectionSource'.
	Type string `pulumi:"type"`
}

// Drill server linked service.
type DrillLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReference `pulumi:"pwd"`
	// Type of linked service.
	// Expected value is 'Drill'.
	Type string `pulumi:"type"`
}

// Drill server linked service.
type DrillLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReferenceResponse `pulumi:"pwd"`
	// Type of linked service.
	// Expected value is 'Drill'.
	Type string `pulumi:"type"`
}

// A copy activity Drill server source.
type DrillSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'DrillSource'.
	Type string `pulumi:"type"`
}

// A copy activity Drill server source.
type DrillSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'DrillSource'.
	Type string `pulumi:"type"`
}

// Drill server dataset.
type DrillTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Drill. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'DrillTable'.
	Type string `pulumi:"type"`
}

// Drill server dataset.
type DrillTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Drill. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'DrillTable'.
	Type string `pulumi:"type"`
}

// Dynamics AX linked service.
type DynamicsAXLinkedService struct {
	// Specify the resource you are requesting authorization. Type: string (or Expression with resultType string).
	AadResourceId interface{} `pulumi:"aadResourceId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Specify the application's client ID. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// Specify the application's key. Mark this field as a SecureString to store it securely in Data Factory, or reference a secret stored in Azure Key Vault. Type: string (or Expression with resultType string).
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Specify the tenant information (domain name or tenant ID) under which your application resides. Retrieve it by hovering the mouse in the top-right corner of the Azure portal. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'DynamicsAX'.
	Type string `pulumi:"type"`
	// The Dynamics AX (or Dynamics 365 Finance and Operations) instance OData endpoint.
	Url interface{} `pulumi:"url"`
}

// Dynamics AX linked service.
type DynamicsAXLinkedServiceResponse struct {
	// Specify the resource you are requesting authorization. Type: string (or Expression with resultType string).
	AadResourceId interface{} `pulumi:"aadResourceId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Specify the application's client ID. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// Specify the application's key. Mark this field as a SecureString to store it securely in Data Factory, or reference a secret stored in Azure Key Vault. Type: string (or Expression with resultType string).
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Specify the tenant information (domain name or tenant ID) under which your application resides. Retrieve it by hovering the mouse in the top-right corner of the Azure portal. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'DynamicsAX'.
	Type string `pulumi:"type"`
	// The Dynamics AX (or Dynamics 365 Finance and Operations) instance OData endpoint.
	Url interface{} `pulumi:"url"`
}

// The path of the Dynamics AX OData entity.
type DynamicsAXResourceDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The path of the Dynamics AX OData entity. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'DynamicsAXResource'.
	Type string `pulumi:"type"`
}

// The path of the Dynamics AX OData entity.
type DynamicsAXResourceDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The path of the Dynamics AX OData entity. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'DynamicsAXResource'.
	Type string `pulumi:"type"`
}

// A copy activity Dynamics AX source.
type DynamicsAXSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'DynamicsAXSource'.
	Type string `pulumi:"type"`
}

// A copy activity Dynamics AX source.
type DynamicsAXSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'DynamicsAXSource'.
	Type string `pulumi:"type"`
}

// The Dynamics CRM entity dataset.
type DynamicsCrmEntityDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The logical name of the entity. Type: string (or Expression with resultType string).
	EntityName interface{} `pulumi:"entityName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'DynamicsCrmEntity'.
	Type string `pulumi:"type"`
}

// The Dynamics CRM entity dataset.
type DynamicsCrmEntityDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The logical name of the entity. Type: string (or Expression with resultType string).
	EntityName interface{} `pulumi:"entityName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'DynamicsCrmEntity'.
	Type string `pulumi:"type"`
}

// Dynamics CRM linked service.
type DynamicsCrmLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to connect to Dynamics CRM server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario, 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The deployment type of the Dynamics CRM instance. 'Online' for Dynamics CRM Online and 'OnPremisesWithIfd' for Dynamics CRM on-premises with Ifd. Type: string (or Expression with resultType string).
	DeploymentType interface{} `pulumi:"deploymentType"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The host name of the on-premises Dynamics CRM server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
	HostName interface{} `pulumi:"hostName"`
	// The organization name of the Dynamics CRM instance. The property is required for on-prem and required for online when there are more than one Dynamics CRM instances associated with the user. Type: string (or Expression with resultType string).
	OrganizationName interface{} `pulumi:"organizationName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to access the Dynamics CRM instance.
	Password interface{} `pulumi:"password"`
	// The port of on-premises Dynamics CRM server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential interface{} `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType interface{} `pulumi:"servicePrincipalCredentialType"`
	// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The URL to the Microsoft Dynamics CRM server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
	ServiceUri interface{} `pulumi:"serviceUri"`
	// Type of linked service.
	// Expected value is 'DynamicsCrm'.
	Type string `pulumi:"type"`
	// User name to access the Dynamics CRM instance. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// Dynamics CRM linked service.
type DynamicsCrmLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to connect to Dynamics CRM server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario, 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The deployment type of the Dynamics CRM instance. 'Online' for Dynamics CRM Online and 'OnPremisesWithIfd' for Dynamics CRM on-premises with Ifd. Type: string (or Expression with resultType string).
	DeploymentType interface{} `pulumi:"deploymentType"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The host name of the on-premises Dynamics CRM server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
	HostName interface{} `pulumi:"hostName"`
	// The organization name of the Dynamics CRM instance. The property is required for on-prem and required for online when there are more than one Dynamics CRM instances associated with the user. Type: string (or Expression with resultType string).
	OrganizationName interface{} `pulumi:"organizationName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to access the Dynamics CRM instance.
	Password interface{} `pulumi:"password"`
	// The port of on-premises Dynamics CRM server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential interface{} `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType interface{} `pulumi:"servicePrincipalCredentialType"`
	// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The URL to the Microsoft Dynamics CRM server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
	ServiceUri interface{} `pulumi:"serviceUri"`
	// Type of linked service.
	// Expected value is 'DynamicsCrm'.
	Type string `pulumi:"type"`
	// User name to access the Dynamics CRM instance. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// A copy activity Dynamics CRM sink.
type DynamicsCrmSink struct {
	// The logical name of the alternate key which will be used when upserting records. Type: string (or Expression with resultType string).
	AlternateKeyName interface{} `pulumi:"alternateKeyName"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The flag indicating whether to ignore null values from input dataset (except key fields) during write operation. Default is false. Type: boolean (or Expression with resultType boolean).
	IgnoreNullValues interface{} `pulumi:"ignoreNullValues"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'DynamicsCrmSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation.
	WriteBehavior string `pulumi:"writeBehavior"`
}

// A copy activity Dynamics CRM sink.
type DynamicsCrmSinkResponse struct {
	// The logical name of the alternate key which will be used when upserting records. Type: string (or Expression with resultType string).
	AlternateKeyName interface{} `pulumi:"alternateKeyName"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The flag indicating whether to ignore null values from input dataset (except key fields) during write operation. Default is false. Type: boolean (or Expression with resultType boolean).
	IgnoreNullValues interface{} `pulumi:"ignoreNullValues"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'DynamicsCrmSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation.
	WriteBehavior string `pulumi:"writeBehavior"`
}

// A copy activity Dynamics CRM source.
type DynamicsCrmSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// FetchXML is a proprietary query language that is used in Microsoft Dynamics CRM (online & on-premises). Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'DynamicsCrmSource'.
	Type string `pulumi:"type"`
}

// A copy activity Dynamics CRM source.
type DynamicsCrmSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// FetchXML is a proprietary query language that is used in Microsoft Dynamics CRM (online & on-premises). Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'DynamicsCrmSource'.
	Type string `pulumi:"type"`
}

// The Dynamics entity dataset.
type DynamicsEntityDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The logical name of the entity. Type: string (or Expression with resultType string).
	EntityName interface{} `pulumi:"entityName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'DynamicsEntity'.
	Type string `pulumi:"type"`
}

// The Dynamics entity dataset.
type DynamicsEntityDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The logical name of the entity. Type: string (or Expression with resultType string).
	EntityName interface{} `pulumi:"entityName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'DynamicsEntity'.
	Type string `pulumi:"type"`
}

// Dynamics linked service.
type DynamicsLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to connect to Dynamics server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario, 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// The deployment type of the Dynamics instance. 'Online' for Dynamics Online and 'OnPremisesWithIfd' for Dynamics on-premises with Ifd. Type: string (or Expression with resultType string).
	DeploymentType interface{} `pulumi:"deploymentType"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The host name of the on-premises Dynamics server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
	HostName interface{} `pulumi:"hostName"`
	// The organization name of the Dynamics instance. The property is required for on-prem and required for online when there are more than one Dynamics instances associated with the user. Type: string (or Expression with resultType string).
	OrganizationName interface{} `pulumi:"organizationName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to access the Dynamics instance.
	Password interface{} `pulumi:"password"`
	// The port of on-premises Dynamics server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential interface{} `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType interface{} `pulumi:"servicePrincipalCredentialType"`
	// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The URL to the Microsoft Dynamics server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
	ServiceUri interface{} `pulumi:"serviceUri"`
	// Type of linked service.
	// Expected value is 'Dynamics'.
	Type string `pulumi:"type"`
	// User name to access the Dynamics instance. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// Dynamics linked service.
type DynamicsLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to connect to Dynamics server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario, 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// The deployment type of the Dynamics instance. 'Online' for Dynamics Online and 'OnPremisesWithIfd' for Dynamics on-premises with Ifd. Type: string (or Expression with resultType string).
	DeploymentType interface{} `pulumi:"deploymentType"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The host name of the on-premises Dynamics server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
	HostName interface{} `pulumi:"hostName"`
	// The organization name of the Dynamics instance. The property is required for on-prem and required for online when there are more than one Dynamics instances associated with the user. Type: string (or Expression with resultType string).
	OrganizationName interface{} `pulumi:"organizationName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to access the Dynamics instance.
	Password interface{} `pulumi:"password"`
	// The port of on-premises Dynamics server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential interface{} `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType interface{} `pulumi:"servicePrincipalCredentialType"`
	// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The URL to the Microsoft Dynamics server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
	ServiceUri interface{} `pulumi:"serviceUri"`
	// Type of linked service.
	// Expected value is 'Dynamics'.
	Type string `pulumi:"type"`
	// User name to access the Dynamics instance. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// A copy activity Dynamics sink.
type DynamicsSink struct {
	// The logical name of the alternate key which will be used when upserting records. Type: string (or Expression with resultType string).
	AlternateKeyName interface{} `pulumi:"alternateKeyName"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The flag indicating whether ignore null values from input dataset (except key fields) during write operation. Default is false. Type: boolean (or Expression with resultType boolean).
	IgnoreNullValues interface{} `pulumi:"ignoreNullValues"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'DynamicsSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation.
	WriteBehavior string `pulumi:"writeBehavior"`
}

// A copy activity Dynamics sink.
type DynamicsSinkResponse struct {
	// The logical name of the alternate key which will be used when upserting records. Type: string (or Expression with resultType string).
	AlternateKeyName interface{} `pulumi:"alternateKeyName"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The flag indicating whether ignore null values from input dataset (except key fields) during write operation. Default is false. Type: boolean (or Expression with resultType boolean).
	IgnoreNullValues interface{} `pulumi:"ignoreNullValues"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'DynamicsSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation.
	WriteBehavior string `pulumi:"writeBehavior"`
}

// A copy activity Dynamics source.
type DynamicsSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// FetchXML is a proprietary query language that is used in Microsoft Dynamics (online & on-premises). Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'DynamicsSource'.
	Type string `pulumi:"type"`
}

// A copy activity Dynamics source.
type DynamicsSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// FetchXML is a proprietary query language that is used in Microsoft Dynamics (online & on-premises). Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'DynamicsSource'.
	Type string `pulumi:"type"`
}

// Eloqua server linked service.
type EloquaLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The endpoint of the Eloqua server. (i.e. eloqua.example.com)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Eloqua'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
	// The site name and user name of your Eloqua account in the form: sitename/username. (i.e. Eloqua/Alice)
	Username interface{} `pulumi:"username"`
}

// Eloqua server linked service.
type EloquaLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The endpoint of the Eloqua server. (i.e. eloqua.example.com)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Eloqua'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
	// The site name and user name of your Eloqua account in the form: sitename/username. (i.e. Eloqua/Alice)
	Username interface{} `pulumi:"username"`
}

// Eloqua server dataset.
type EloquaObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'EloquaObject'.
	Type string `pulumi:"type"`
}

// Eloqua server dataset.
type EloquaObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'EloquaObject'.
	Type string `pulumi:"type"`
}

// A copy activity Eloqua server source.
type EloquaSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'EloquaSource'.
	Type string `pulumi:"type"`
}

// A copy activity Eloqua server source.
type EloquaSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'EloquaSource'.
	Type string `pulumi:"type"`
}

// Definition of CMK for the factory.
type EncryptionConfiguration struct {
	// User assigned identity to use to authenticate to customer's key vault. If not provided Managed Service Identity will be used.
	Identity *CMKIdentityDefinition `pulumi:"identity"`
	// The name of the key in Azure Key Vault to use as Customer Managed Key.
	KeyName string `pulumi:"keyName"`
	// The version of the key used for CMK. If not provided, latest version will be used.
	KeyVersion *string `pulumi:"keyVersion"`
	// The url of the Azure Key Vault used for CMK.
	VaultBaseUrl string `pulumi:"vaultBaseUrl"`
}

// EncryptionConfigurationInput is an input type that accepts EncryptionConfigurationArgs and EncryptionConfigurationOutput values.
// You can construct a concrete instance of `EncryptionConfigurationInput` via:
//
//	EncryptionConfigurationArgs{...}
type EncryptionConfigurationInput interface {
	pulumi.Input

	ToEncryptionConfigurationOutput() EncryptionConfigurationOutput
	ToEncryptionConfigurationOutputWithContext(context.Context) EncryptionConfigurationOutput
}

// Definition of CMK for the factory.
type EncryptionConfigurationArgs struct {
	// User assigned identity to use to authenticate to customer's key vault. If not provided Managed Service Identity will be used.
	Identity CMKIdentityDefinitionPtrInput `pulumi:"identity"`
	// The name of the key in Azure Key Vault to use as Customer Managed Key.
	KeyName pulumi.StringInput `pulumi:"keyName"`
	// The version of the key used for CMK. If not provided, latest version will be used.
	KeyVersion pulumi.StringPtrInput `pulumi:"keyVersion"`
	// The url of the Azure Key Vault used for CMK.
	VaultBaseUrl pulumi.StringInput `pulumi:"vaultBaseUrl"`
}

func (EncryptionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfiguration)(nil)).Elem()
}

func (i EncryptionConfigurationArgs) ToEncryptionConfigurationOutput() EncryptionConfigurationOutput {
	return i.ToEncryptionConfigurationOutputWithContext(context.Background())
}

func (i EncryptionConfigurationArgs) ToEncryptionConfigurationOutputWithContext(ctx context.Context) EncryptionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigurationOutput)
}

func (i EncryptionConfigurationArgs) ToEncryptionConfigurationPtrOutput() EncryptionConfigurationPtrOutput {
	return i.ToEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i EncryptionConfigurationArgs) ToEncryptionConfigurationPtrOutputWithContext(ctx context.Context) EncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigurationOutput).ToEncryptionConfigurationPtrOutputWithContext(ctx)
}

// EncryptionConfigurationPtrInput is an input type that accepts EncryptionConfigurationArgs, EncryptionConfigurationPtr and EncryptionConfigurationPtrOutput values.
// You can construct a concrete instance of `EncryptionConfigurationPtrInput` via:
//
//	        EncryptionConfigurationArgs{...}
//
//	or:
//
//	        nil
type EncryptionConfigurationPtrInput interface {
	pulumi.Input

	ToEncryptionConfigurationPtrOutput() EncryptionConfigurationPtrOutput
	ToEncryptionConfigurationPtrOutputWithContext(context.Context) EncryptionConfigurationPtrOutput
}

type encryptionConfigurationPtrType EncryptionConfigurationArgs

func EncryptionConfigurationPtr(v *EncryptionConfigurationArgs) EncryptionConfigurationPtrInput {
	return (*encryptionConfigurationPtrType)(v)
}

func (*encryptionConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionConfiguration)(nil)).Elem()
}

func (i *encryptionConfigurationPtrType) ToEncryptionConfigurationPtrOutput() EncryptionConfigurationPtrOutput {
	return i.ToEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i *encryptionConfigurationPtrType) ToEncryptionConfigurationPtrOutputWithContext(ctx context.Context) EncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigurationPtrOutput)
}

// Definition of CMK for the factory.
type EncryptionConfigurationOutput struct{ *pulumi.OutputState }

func (EncryptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfiguration)(nil)).Elem()
}

func (o EncryptionConfigurationOutput) ToEncryptionConfigurationOutput() EncryptionConfigurationOutput {
	return o
}

func (o EncryptionConfigurationOutput) ToEncryptionConfigurationOutputWithContext(ctx context.Context) EncryptionConfigurationOutput {
	return o
}

func (o EncryptionConfigurationOutput) ToEncryptionConfigurationPtrOutput() EncryptionConfigurationPtrOutput {
	return o.ToEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (o EncryptionConfigurationOutput) ToEncryptionConfigurationPtrOutputWithContext(ctx context.Context) EncryptionConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EncryptionConfiguration) *EncryptionConfiguration {
		return &v
	}).(EncryptionConfigurationPtrOutput)
}

// User assigned identity to use to authenticate to customer's key vault. If not provided Managed Service Identity will be used.
func (o EncryptionConfigurationOutput) Identity() CMKIdentityDefinitionPtrOutput {
	return o.ApplyT(func(v EncryptionConfiguration) *CMKIdentityDefinition { return v.Identity }).(CMKIdentityDefinitionPtrOutput)
}

// The name of the key in Azure Key Vault to use as Customer Managed Key.
func (o EncryptionConfigurationOutput) KeyName() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionConfiguration) string { return v.KeyName }).(pulumi.StringOutput)
}

// The version of the key used for CMK. If not provided, latest version will be used.
func (o EncryptionConfigurationOutput) KeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionConfiguration) *string { return v.KeyVersion }).(pulumi.StringPtrOutput)
}

// The url of the Azure Key Vault used for CMK.
func (o EncryptionConfigurationOutput) VaultBaseUrl() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionConfiguration) string { return v.VaultBaseUrl }).(pulumi.StringOutput)
}

type EncryptionConfigurationPtrOutput struct{ *pulumi.OutputState }

func (EncryptionConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionConfiguration)(nil)).Elem()
}

func (o EncryptionConfigurationPtrOutput) ToEncryptionConfigurationPtrOutput() EncryptionConfigurationPtrOutput {
	return o
}

func (o EncryptionConfigurationPtrOutput) ToEncryptionConfigurationPtrOutputWithContext(ctx context.Context) EncryptionConfigurationPtrOutput {
	return o
}

func (o EncryptionConfigurationPtrOutput) Elem() EncryptionConfigurationOutput {
	return o.ApplyT(func(v *EncryptionConfiguration) EncryptionConfiguration {
		if v != nil {
			return *v
		}
		var ret EncryptionConfiguration
		return ret
	}).(EncryptionConfigurationOutput)
}

// User assigned identity to use to authenticate to customer's key vault. If not provided Managed Service Identity will be used.
func (o EncryptionConfigurationPtrOutput) Identity() CMKIdentityDefinitionPtrOutput {
	return o.ApplyT(func(v *EncryptionConfiguration) *CMKIdentityDefinition {
		if v == nil {
			return nil
		}
		return v.Identity
	}).(CMKIdentityDefinitionPtrOutput)
}

// The name of the key in Azure Key Vault to use as Customer Managed Key.
func (o EncryptionConfigurationPtrOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.KeyName
	}).(pulumi.StringPtrOutput)
}

// The version of the key used for CMK. If not provided, latest version will be used.
func (o EncryptionConfigurationPtrOutput) KeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.KeyVersion
	}).(pulumi.StringPtrOutput)
}

// The url of the Azure Key Vault used for CMK.
func (o EncryptionConfigurationPtrOutput) VaultBaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.VaultBaseUrl
	}).(pulumi.StringPtrOutput)
}

// Definition of CMK for the factory.
type EncryptionConfigurationResponse struct {
	// User assigned identity to use to authenticate to customer's key vault. If not provided Managed Service Identity will be used.
	Identity *CMKIdentityDefinitionResponse `pulumi:"identity"`
	// The name of the key in Azure Key Vault to use as Customer Managed Key.
	KeyName string `pulumi:"keyName"`
	// The version of the key used for CMK. If not provided, latest version will be used.
	KeyVersion *string `pulumi:"keyVersion"`
	// The url of the Azure Key Vault used for CMK.
	VaultBaseUrl string `pulumi:"vaultBaseUrl"`
}

// Definition of CMK for the factory.
type EncryptionConfigurationResponseOutput struct{ *pulumi.OutputState }

func (EncryptionConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfigurationResponse)(nil)).Elem()
}

func (o EncryptionConfigurationResponseOutput) ToEncryptionConfigurationResponseOutput() EncryptionConfigurationResponseOutput {
	return o
}

func (o EncryptionConfigurationResponseOutput) ToEncryptionConfigurationResponseOutputWithContext(ctx context.Context) EncryptionConfigurationResponseOutput {
	return o
}

// User assigned identity to use to authenticate to customer's key vault. If not provided Managed Service Identity will be used.
func (o EncryptionConfigurationResponseOutput) Identity() CMKIdentityDefinitionResponsePtrOutput {
	return o.ApplyT(func(v EncryptionConfigurationResponse) *CMKIdentityDefinitionResponse { return v.Identity }).(CMKIdentityDefinitionResponsePtrOutput)
}

// The name of the key in Azure Key Vault to use as Customer Managed Key.
func (o EncryptionConfigurationResponseOutput) KeyName() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionConfigurationResponse) string { return v.KeyName }).(pulumi.StringOutput)
}

// The version of the key used for CMK. If not provided, latest version will be used.
func (o EncryptionConfigurationResponseOutput) KeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionConfigurationResponse) *string { return v.KeyVersion }).(pulumi.StringPtrOutput)
}

// The url of the Azure Key Vault used for CMK.
func (o EncryptionConfigurationResponseOutput) VaultBaseUrl() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionConfigurationResponse) string { return v.VaultBaseUrl }).(pulumi.StringOutput)
}

type EncryptionConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (EncryptionConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionConfigurationResponse)(nil)).Elem()
}

func (o EncryptionConfigurationResponsePtrOutput) ToEncryptionConfigurationResponsePtrOutput() EncryptionConfigurationResponsePtrOutput {
	return o
}

func (o EncryptionConfigurationResponsePtrOutput) ToEncryptionConfigurationResponsePtrOutputWithContext(ctx context.Context) EncryptionConfigurationResponsePtrOutput {
	return o
}

func (o EncryptionConfigurationResponsePtrOutput) Elem() EncryptionConfigurationResponseOutput {
	return o.ApplyT(func(v *EncryptionConfigurationResponse) EncryptionConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret EncryptionConfigurationResponse
		return ret
	}).(EncryptionConfigurationResponseOutput)
}

// User assigned identity to use to authenticate to customer's key vault. If not provided Managed Service Identity will be used.
func (o EncryptionConfigurationResponsePtrOutput) Identity() CMKIdentityDefinitionResponsePtrOutput {
	return o.ApplyT(func(v *EncryptionConfigurationResponse) *CMKIdentityDefinitionResponse {
		if v == nil {
			return nil
		}
		return v.Identity
	}).(CMKIdentityDefinitionResponsePtrOutput)
}

// The name of the key in Azure Key Vault to use as Customer Managed Key.
func (o EncryptionConfigurationResponsePtrOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KeyName
	}).(pulumi.StringPtrOutput)
}

// The version of the key used for CMK. If not provided, latest version will be used.
func (o EncryptionConfigurationResponsePtrOutput) KeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.KeyVersion
	}).(pulumi.StringPtrOutput)
}

// The url of the Azure Key Vault used for CMK.
func (o EncryptionConfigurationResponsePtrOutput) VaultBaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.VaultBaseUrl
	}).(pulumi.StringPtrOutput)
}

// The entity reference.
type EntityReference struct {
	// The name of this referenced entity.
	ReferenceName *string `pulumi:"referenceName"`
	// The type of this referenced entity.
	Type *string `pulumi:"type"`
}

// The entity reference.
type EntityReferenceResponse struct {
	// The name of this referenced entity.
	ReferenceName *string `pulumi:"referenceName"`
	// The type of this referenced entity.
	Type *string `pulumi:"type"`
}

// The custom setup of setting environment variable.
type EnvironmentVariableSetup struct {
	// The type of custom setup.
	// Expected value is 'EnvironmentVariableSetup'.
	Type string `pulumi:"type"`
	// The name of the environment variable.
	VariableName string `pulumi:"variableName"`
	// The value of the environment variable.
	VariableValue string `pulumi:"variableValue"`
}

// The custom setup of setting environment variable.
type EnvironmentVariableSetupResponse struct {
	// The type of custom setup.
	// Expected value is 'EnvironmentVariableSetup'.
	Type string `pulumi:"type"`
	// The name of the environment variable.
	VariableName string `pulumi:"variableName"`
	// The value of the environment variable.
	VariableValue string `pulumi:"variableValue"`
}

// Excel dataset.
type ExcelDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the json dataset.
	Compression *DatasetCompression `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
	FirstRowAsHeader interface{} `pulumi:"firstRowAsHeader"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The location of the excel storage.
	Location interface{} `pulumi:"location"`
	// The null value string. Type: string (or Expression with resultType string).
	NullValue interface{} `pulumi:"nullValue"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The partial data of one sheet. Type: string (or Expression with resultType string).
	Range interface{} `pulumi:"range"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// The sheet index of excel file and default value is 0. Type: integer (or Expression with resultType integer)
	SheetIndex interface{} `pulumi:"sheetIndex"`
	// The sheet name of excel file. Type: string (or Expression with resultType string).
	SheetName interface{} `pulumi:"sheetName"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Excel'.
	Type string `pulumi:"type"`
}

// Excel dataset.
type ExcelDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the json dataset.
	Compression *DatasetCompressionResponse `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
	FirstRowAsHeader interface{} `pulumi:"firstRowAsHeader"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The location of the excel storage.
	Location interface{} `pulumi:"location"`
	// The null value string. Type: string (or Expression with resultType string).
	NullValue interface{} `pulumi:"nullValue"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The partial data of one sheet. Type: string (or Expression with resultType string).
	Range interface{} `pulumi:"range"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// The sheet index of excel file and default value is 0. Type: integer (or Expression with resultType integer)
	SheetIndex interface{} `pulumi:"sheetIndex"`
	// The sheet name of excel file. Type: string (or Expression with resultType string).
	SheetName interface{} `pulumi:"sheetName"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Excel'.
	Type string `pulumi:"type"`
}

// A copy activity excel source.
type ExcelSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Excel store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'ExcelSource'.
	Type string `pulumi:"type"`
}

// A copy activity excel source.
type ExcelSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Excel store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'ExcelSource'.
	Type string `pulumi:"type"`
}

// Execute data flow activity.
type ExecuteDataFlowActivity struct {
	// Compute properties for data flow activity.
	Compute *ExecuteDataFlowActivityTypePropertiesCompute `pulumi:"compute"`
	// Continue on error setting used for data flow execution. Enables processing to continue if a sink fails. Type: boolean (or Expression with resultType boolean)
	ContinueOnError interface{} `pulumi:"continueOnError"`
	// Data flow reference.
	DataFlow DataFlowReference `pulumi:"dataFlow"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// The integration runtime reference.
	IntegrationRuntime *IntegrationRuntimeReference `pulumi:"integrationRuntime"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Concurrent run setting used for data flow execution. Allows sinks with the same save order to be processed concurrently. Type: boolean (or Expression with resultType boolean)
	RunConcurrently interface{} `pulumi:"runConcurrently"`
	// Specify number of parallel staging for sources applicable to the sink. Type: integer (or Expression with resultType integer)
	SourceStagingConcurrency interface{} `pulumi:"sourceStagingConcurrency"`
	// Staging info for execute data flow activity.
	Staging *DataFlowStagingInfo `pulumi:"staging"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Trace level setting used for data flow monitoring output. Supported values are: 'coarse', 'fine', and 'none'. Type: string (or Expression with resultType string)
	TraceLevel interface{} `pulumi:"traceLevel"`
	// Type of activity.
	// Expected value is 'ExecuteDataFlow'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// Execute data flow activity.
type ExecuteDataFlowActivityResponse struct {
	// Compute properties for data flow activity.
	Compute *ExecuteDataFlowActivityTypePropertiesResponseCompute `pulumi:"compute"`
	// Continue on error setting used for data flow execution. Enables processing to continue if a sink fails. Type: boolean (or Expression with resultType boolean)
	ContinueOnError interface{} `pulumi:"continueOnError"`
	// Data flow reference.
	DataFlow DataFlowReferenceResponse `pulumi:"dataFlow"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// The integration runtime reference.
	IntegrationRuntime *IntegrationRuntimeReferenceResponse `pulumi:"integrationRuntime"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Concurrent run setting used for data flow execution. Allows sinks with the same save order to be processed concurrently. Type: boolean (or Expression with resultType boolean)
	RunConcurrently interface{} `pulumi:"runConcurrently"`
	// Specify number of parallel staging for sources applicable to the sink. Type: integer (or Expression with resultType integer)
	SourceStagingConcurrency interface{} `pulumi:"sourceStagingConcurrency"`
	// Staging info for execute data flow activity.
	Staging *DataFlowStagingInfoResponse `pulumi:"staging"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Trace level setting used for data flow monitoring output. Supported values are: 'coarse', 'fine', and 'none'. Type: string (or Expression with resultType string)
	TraceLevel interface{} `pulumi:"traceLevel"`
	// Type of activity.
	// Expected value is 'ExecuteDataFlow'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Compute properties for data flow activity.
type ExecuteDataFlowActivityTypePropertiesCompute struct {
	// Compute type of the cluster which will execute data flow job. Possible values include: 'General', 'MemoryOptimized', 'ComputeOptimized'. Type: string (or Expression with resultType string)
	ComputeType interface{} `pulumi:"computeType"`
	// Core count of the cluster which will execute data flow job. Supported values are: 8, 16, 32, 48, 80, 144 and 272. Type: integer (or Expression with resultType integer)
	CoreCount interface{} `pulumi:"coreCount"`
}

// Compute properties for data flow activity.
type ExecuteDataFlowActivityTypePropertiesResponseCompute struct {
	// Compute type of the cluster which will execute data flow job. Possible values include: 'General', 'MemoryOptimized', 'ComputeOptimized'. Type: string (or Expression with resultType string)
	ComputeType interface{} `pulumi:"computeType"`
	// Core count of the cluster which will execute data flow job. Supported values are: 8, 16, 32, 48, 80, 144 and 272. Type: integer (or Expression with resultType integer)
	CoreCount interface{} `pulumi:"coreCount"`
}

// Execute pipeline activity.
type ExecutePipelineActivity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Pipeline parameters.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Pipeline reference.
	Pipeline PipelineReference `pulumi:"pipeline"`
	// Execute pipeline activity policy.
	Policy *ExecutePipelineActivityPolicy `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'ExecutePipeline'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
	// Defines whether activity execution will wait for the dependent pipeline execution to finish. Default is false.
	WaitOnCompletion *bool `pulumi:"waitOnCompletion"`
}

// Execution policy for an execute pipeline activity.
type ExecutePipelineActivityPolicy struct {
	// When set to true, Input from activity is considered as secure and will not be logged to monitoring.
	SecureInput *bool `pulumi:"secureInput"`
}

// Execution policy for an execute pipeline activity.
type ExecutePipelineActivityPolicyResponse struct {
	// When set to true, Input from activity is considered as secure and will not be logged to monitoring.
	SecureInput *bool `pulumi:"secureInput"`
}

// Execute pipeline activity.
type ExecutePipelineActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Pipeline parameters.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Pipeline reference.
	Pipeline PipelineReferenceResponse `pulumi:"pipeline"`
	// Execute pipeline activity policy.
	Policy *ExecutePipelineActivityPolicyResponse `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'ExecutePipeline'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
	// Defines whether activity execution will wait for the dependent pipeline execution to finish. Default is false.
	WaitOnCompletion *bool `pulumi:"waitOnCompletion"`
}

// Execute SSIS package activity.
type ExecuteSSISPackageActivity struct {
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReference `pulumi:"connectVia"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// The environment path to execute the SSIS package. Type: string (or Expression with resultType string).
	EnvironmentPath interface{} `pulumi:"environmentPath"`
	// The package execution credential.
	ExecutionCredential *SSISExecutionCredential `pulumi:"executionCredential"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// SSIS package execution log location.
	LogLocation *SSISLogLocation `pulumi:"logLocation"`
	// The logging level of SSIS package execution. Type: string (or Expression with resultType string).
	LoggingLevel interface{} `pulumi:"loggingLevel"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// The package level connection managers to execute the SSIS package.
	PackageConnectionManagers map[string]map[string]SSISExecutionParameter `pulumi:"packageConnectionManagers"`
	// SSIS package location.
	PackageLocation SSISPackageLocation `pulumi:"packageLocation"`
	// The package level parameters to execute the SSIS package.
	PackageParameters map[string]SSISExecutionParameter `pulumi:"packageParameters"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// The project level connection managers to execute the SSIS package.
	ProjectConnectionManagers map[string]map[string]SSISExecutionParameter `pulumi:"projectConnectionManagers"`
	// The project level parameters to execute the SSIS package.
	ProjectParameters map[string]SSISExecutionParameter `pulumi:"projectParameters"`
	// The property overrides to execute the SSIS package.
	PropertyOverrides map[string]SSISPropertyOverride `pulumi:"propertyOverrides"`
	// Specifies the runtime to execute SSIS package. The value should be "x86" or "x64". Type: string (or Expression with resultType string).
	Runtime interface{} `pulumi:"runtime"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'ExecuteSSISPackage'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// Execute SSIS package activity.
type ExecuteSSISPackageActivityResponse struct {
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// The environment path to execute the SSIS package. Type: string (or Expression with resultType string).
	EnvironmentPath interface{} `pulumi:"environmentPath"`
	// The package execution credential.
	ExecutionCredential *SSISExecutionCredentialResponse `pulumi:"executionCredential"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// SSIS package execution log location.
	LogLocation *SSISLogLocationResponse `pulumi:"logLocation"`
	// The logging level of SSIS package execution. Type: string (or Expression with resultType string).
	LoggingLevel interface{} `pulumi:"loggingLevel"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// The package level connection managers to execute the SSIS package.
	PackageConnectionManagers map[string]map[string]SSISExecutionParameterResponse `pulumi:"packageConnectionManagers"`
	// SSIS package location.
	PackageLocation SSISPackageLocationResponse `pulumi:"packageLocation"`
	// The package level parameters to execute the SSIS package.
	PackageParameters map[string]SSISExecutionParameterResponse `pulumi:"packageParameters"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// The project level connection managers to execute the SSIS package.
	ProjectConnectionManagers map[string]map[string]SSISExecutionParameterResponse `pulumi:"projectConnectionManagers"`
	// The project level parameters to execute the SSIS package.
	ProjectParameters map[string]SSISExecutionParameterResponse `pulumi:"projectParameters"`
	// The property overrides to execute the SSIS package.
	PropertyOverrides map[string]SSISPropertyOverrideResponse `pulumi:"propertyOverrides"`
	// Specifies the runtime to execute SSIS package. The value should be "x86" or "x64". Type: string (or Expression with resultType string).
	Runtime interface{} `pulumi:"runtime"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'ExecuteSSISPackage'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Execute power query activity.
type ExecuteWranglingDataflowActivity struct {
	// Compute properties for data flow activity.
	Compute *ExecuteDataFlowActivityTypePropertiesCompute `pulumi:"compute"`
	// Continue on error setting used for data flow execution. Enables processing to continue if a sink fails. Type: boolean (or Expression with resultType boolean)
	ContinueOnError interface{} `pulumi:"continueOnError"`
	// Data flow reference.
	DataFlow DataFlowReference `pulumi:"dataFlow"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// The integration runtime reference.
	IntegrationRuntime *IntegrationRuntimeReference `pulumi:"integrationRuntime"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// List of mapping for Power Query mashup query to sink dataset(s).
	Queries []PowerQuerySinkMapping `pulumi:"queries"`
	// Concurrent run setting used for data flow execution. Allows sinks with the same save order to be processed concurrently. Type: boolean (or Expression with resultType boolean)
	RunConcurrently interface{} `pulumi:"runConcurrently"`
	// (Deprecated. Please use Queries). List of Power Query activity sinks mapped to a queryName.
	Sinks map[string]PowerQuerySink `pulumi:"sinks"`
	// Specify number of parallel staging for sources applicable to the sink. Type: integer (or Expression with resultType integer)
	SourceStagingConcurrency interface{} `pulumi:"sourceStagingConcurrency"`
	// Staging info for execute data flow activity.
	Staging *DataFlowStagingInfo `pulumi:"staging"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Trace level setting used for data flow monitoring output. Supported values are: 'coarse', 'fine', and 'none'. Type: string (or Expression with resultType string)
	TraceLevel interface{} `pulumi:"traceLevel"`
	// Type of activity.
	// Expected value is 'ExecuteWranglingDataflow'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// Execute power query activity.
type ExecuteWranglingDataflowActivityResponse struct {
	// Compute properties for data flow activity.
	Compute *ExecuteDataFlowActivityTypePropertiesResponseCompute `pulumi:"compute"`
	// Continue on error setting used for data flow execution. Enables processing to continue if a sink fails. Type: boolean (or Expression with resultType boolean)
	ContinueOnError interface{} `pulumi:"continueOnError"`
	// Data flow reference.
	DataFlow DataFlowReferenceResponse `pulumi:"dataFlow"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// The integration runtime reference.
	IntegrationRuntime *IntegrationRuntimeReferenceResponse `pulumi:"integrationRuntime"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// List of mapping for Power Query mashup query to sink dataset(s).
	Queries []PowerQuerySinkMappingResponse `pulumi:"queries"`
	// Concurrent run setting used for data flow execution. Allows sinks with the same save order to be processed concurrently. Type: boolean (or Expression with resultType boolean)
	RunConcurrently interface{} `pulumi:"runConcurrently"`
	// (Deprecated. Please use Queries). List of Power Query activity sinks mapped to a queryName.
	Sinks map[string]PowerQuerySinkResponse `pulumi:"sinks"`
	// Specify number of parallel staging for sources applicable to the sink. Type: integer (or Expression with resultType integer)
	SourceStagingConcurrency interface{} `pulumi:"sourceStagingConcurrency"`
	// Staging info for execute data flow activity.
	Staging *DataFlowStagingInfoResponse `pulumi:"staging"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Trace level setting used for data flow monitoring output. Supported values are: 'coarse', 'fine', and 'none'. Type: string (or Expression with resultType string)
	TraceLevel interface{} `pulumi:"traceLevel"`
	// Type of activity.
	// Expected value is 'ExecuteWranglingDataflow'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Base class for all execution activities.
type ExecutionActivity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'Execution'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// Base class for all execution activities.
type ExecutionActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'Execution'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Azure Data Factory expression definition.
type Expression struct {
	// Expression type.
	Type string `pulumi:"type"`
	// Expression value.
	Value string `pulumi:"value"`
}

// Azure Data Factory expression definition.
type ExpressionResponse struct {
	// Expression type.
	Type string `pulumi:"type"`
	// Expression value.
	Value string `pulumi:"value"`
}

// Factory's GitHub repo information.
type FactoryGitHubConfiguration struct {
	// Account name.
	AccountName string `pulumi:"accountName"`
	// GitHub bring your own app client id.
	ClientId *string `pulumi:"clientId"`
	// GitHub bring your own app client secret information.
	ClientSecret *GitHubClientSecret `pulumi:"clientSecret"`
	// Collaboration branch.
	CollaborationBranch string `pulumi:"collaborationBranch"`
	// Disable manual publish operation in ADF studio to favor automated publish.
	DisablePublish *bool `pulumi:"disablePublish"`
	// GitHub Enterprise host name. For example: `https://github.mydomain.com`
	HostName *string `pulumi:"hostName"`
	// Last commit id.
	LastCommitId *string `pulumi:"lastCommitId"`
	// Repository name.
	RepositoryName string `pulumi:"repositoryName"`
	// Root folder.
	RootFolder string `pulumi:"rootFolder"`
	// Type of repo configuration.
	// Expected value is 'FactoryGitHubConfiguration'.
	Type string `pulumi:"type"`
}

// Factory's GitHub repo information.
type FactoryGitHubConfigurationResponse struct {
	// Account name.
	AccountName string `pulumi:"accountName"`
	// GitHub bring your own app client id.
	ClientId *string `pulumi:"clientId"`
	// GitHub bring your own app client secret information.
	ClientSecret *GitHubClientSecretResponse `pulumi:"clientSecret"`
	// Collaboration branch.
	CollaborationBranch string `pulumi:"collaborationBranch"`
	// Disable manual publish operation in ADF studio to favor automated publish.
	DisablePublish *bool `pulumi:"disablePublish"`
	// GitHub Enterprise host name. For example: `https://github.mydomain.com`
	HostName *string `pulumi:"hostName"`
	// Last commit id.
	LastCommitId *string `pulumi:"lastCommitId"`
	// Repository name.
	RepositoryName string `pulumi:"repositoryName"`
	// Root folder.
	RootFolder string `pulumi:"rootFolder"`
	// Type of repo configuration.
	// Expected value is 'FactoryGitHubConfiguration'.
	Type string `pulumi:"type"`
}

// Identity properties of the factory resource.
type FactoryIdentity struct {
	// The identity type.
	Type string `pulumi:"type"`
	// List of user assigned identities for the factory.
	UserAssignedIdentities map[string]interface{} `pulumi:"userAssignedIdentities"`
}

// FactoryIdentityInput is an input type that accepts FactoryIdentityArgs and FactoryIdentityOutput values.
// You can construct a concrete instance of `FactoryIdentityInput` via:
//
//	FactoryIdentityArgs{...}
type FactoryIdentityInput interface {
	pulumi.Input

	ToFactoryIdentityOutput() FactoryIdentityOutput
	ToFactoryIdentityOutputWithContext(context.Context) FactoryIdentityOutput
}

// Identity properties of the factory resource.
type FactoryIdentityArgs struct {
	// The identity type.
	Type pulumi.StringInput `pulumi:"type"`
	// List of user assigned identities for the factory.
	UserAssignedIdentities pulumi.MapInput `pulumi:"userAssignedIdentities"`
}

func (FactoryIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryIdentity)(nil)).Elem()
}

func (i FactoryIdentityArgs) ToFactoryIdentityOutput() FactoryIdentityOutput {
	return i.ToFactoryIdentityOutputWithContext(context.Background())
}

func (i FactoryIdentityArgs) ToFactoryIdentityOutputWithContext(ctx context.Context) FactoryIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityOutput)
}

func (i FactoryIdentityArgs) ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput {
	return i.ToFactoryIdentityPtrOutputWithContext(context.Background())
}

func (i FactoryIdentityArgs) ToFactoryIdentityPtrOutputWithContext(ctx context.Context) FactoryIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityOutput).ToFactoryIdentityPtrOutputWithContext(ctx)
}

// FactoryIdentityPtrInput is an input type that accepts FactoryIdentityArgs, FactoryIdentityPtr and FactoryIdentityPtrOutput values.
// You can construct a concrete instance of `FactoryIdentityPtrInput` via:
//
//	        FactoryIdentityArgs{...}
//
//	or:
//
//	        nil
type FactoryIdentityPtrInput interface {
	pulumi.Input

	ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput
	ToFactoryIdentityPtrOutputWithContext(context.Context) FactoryIdentityPtrOutput
}

type factoryIdentityPtrType FactoryIdentityArgs

func FactoryIdentityPtr(v *FactoryIdentityArgs) FactoryIdentityPtrInput {
	return (*factoryIdentityPtrType)(v)
}

func (*factoryIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryIdentity)(nil)).Elem()
}

func (i *factoryIdentityPtrType) ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput {
	return i.ToFactoryIdentityPtrOutputWithContext(context.Background())
}

func (i *factoryIdentityPtrType) ToFactoryIdentityPtrOutputWithContext(ctx context.Context) FactoryIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityPtrOutput)
}

// Identity properties of the factory resource.
type FactoryIdentityOutput struct{ *pulumi.OutputState }

func (FactoryIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryIdentity)(nil)).Elem()
}

func (o FactoryIdentityOutput) ToFactoryIdentityOutput() FactoryIdentityOutput {
	return o
}

func (o FactoryIdentityOutput) ToFactoryIdentityOutputWithContext(ctx context.Context) FactoryIdentityOutput {
	return o
}

func (o FactoryIdentityOutput) ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput {
	return o.ToFactoryIdentityPtrOutputWithContext(context.Background())
}

func (o FactoryIdentityOutput) ToFactoryIdentityPtrOutputWithContext(ctx context.Context) FactoryIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FactoryIdentity) *FactoryIdentity {
		return &v
	}).(FactoryIdentityPtrOutput)
}

// The identity type.
func (o FactoryIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryIdentity) string { return v.Type }).(pulumi.StringOutput)
}

// List of user assigned identities for the factory.
func (o FactoryIdentityOutput) UserAssignedIdentities() pulumi.MapOutput {
	return o.ApplyT(func(v FactoryIdentity) map[string]interface{} { return v.UserAssignedIdentities }).(pulumi.MapOutput)
}

type FactoryIdentityPtrOutput struct{ *pulumi.OutputState }

func (FactoryIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryIdentity)(nil)).Elem()
}

func (o FactoryIdentityPtrOutput) ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput {
	return o
}

func (o FactoryIdentityPtrOutput) ToFactoryIdentityPtrOutputWithContext(ctx context.Context) FactoryIdentityPtrOutput {
	return o
}

func (o FactoryIdentityPtrOutput) Elem() FactoryIdentityOutput {
	return o.ApplyT(func(v *FactoryIdentity) FactoryIdentity {
		if v != nil {
			return *v
		}
		var ret FactoryIdentity
		return ret
	}).(FactoryIdentityOutput)
}

// The identity type.
func (o FactoryIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// List of user assigned identities for the factory.
func (o FactoryIdentityPtrOutput) UserAssignedIdentities() pulumi.MapOutput {
	return o.ApplyT(func(v *FactoryIdentity) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.MapOutput)
}

// Identity properties of the factory resource.
type FactoryIdentityResponse struct {
	// The principal id of the identity.
	PrincipalId string `pulumi:"principalId"`
	// The client tenant id of the identity.
	TenantId string `pulumi:"tenantId"`
	// The identity type.
	Type string `pulumi:"type"`
	// List of user assigned identities for the factory.
	UserAssignedIdentities map[string]interface{} `pulumi:"userAssignedIdentities"`
}

// Identity properties of the factory resource.
type FactoryIdentityResponseOutput struct{ *pulumi.OutputState }

func (FactoryIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryIdentityResponse)(nil)).Elem()
}

func (o FactoryIdentityResponseOutput) ToFactoryIdentityResponseOutput() FactoryIdentityResponseOutput {
	return o
}

func (o FactoryIdentityResponseOutput) ToFactoryIdentityResponseOutputWithContext(ctx context.Context) FactoryIdentityResponseOutput {
	return o
}

// The principal id of the identity.
func (o FactoryIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The client tenant id of the identity.
func (o FactoryIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The identity type.
func (o FactoryIdentityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryIdentityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// List of user assigned identities for the factory.
func (o FactoryIdentityResponseOutput) UserAssignedIdentities() pulumi.MapOutput {
	return o.ApplyT(func(v FactoryIdentityResponse) map[string]interface{} { return v.UserAssignedIdentities }).(pulumi.MapOutput)
}

type FactoryIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (FactoryIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryIdentityResponse)(nil)).Elem()
}

func (o FactoryIdentityResponsePtrOutput) ToFactoryIdentityResponsePtrOutput() FactoryIdentityResponsePtrOutput {
	return o
}

func (o FactoryIdentityResponsePtrOutput) ToFactoryIdentityResponsePtrOutputWithContext(ctx context.Context) FactoryIdentityResponsePtrOutput {
	return o
}

func (o FactoryIdentityResponsePtrOutput) Elem() FactoryIdentityResponseOutput {
	return o.ApplyT(func(v *FactoryIdentityResponse) FactoryIdentityResponse {
		if v != nil {
			return *v
		}
		var ret FactoryIdentityResponse
		return ret
	}).(FactoryIdentityResponseOutput)
}

// The principal id of the identity.
func (o FactoryIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The client tenant id of the identity.
func (o FactoryIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The identity type.
func (o FactoryIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// List of user assigned identities for the factory.
func (o FactoryIdentityResponsePtrOutput) UserAssignedIdentities() pulumi.MapOutput {
	return o.ApplyT(func(v *FactoryIdentityResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.MapOutput)
}

// Factory's VSTS repo information.
type FactoryVSTSConfiguration struct {
	// Account name.
	AccountName string `pulumi:"accountName"`
	// Collaboration branch.
	CollaborationBranch string `pulumi:"collaborationBranch"`
	// Disable manual publish operation in ADF studio to favor automated publish.
	DisablePublish *bool `pulumi:"disablePublish"`
	// Last commit id.
	LastCommitId *string `pulumi:"lastCommitId"`
	// VSTS project name.
	ProjectName string `pulumi:"projectName"`
	// Repository name.
	RepositoryName string `pulumi:"repositoryName"`
	// Root folder.
	RootFolder string `pulumi:"rootFolder"`
	// VSTS tenant id.
	TenantId *string `pulumi:"tenantId"`
	// Type of repo configuration.
	// Expected value is 'FactoryVSTSConfiguration'.
	Type string `pulumi:"type"`
}

// Factory's VSTS repo information.
type FactoryVSTSConfigurationResponse struct {
	// Account name.
	AccountName string `pulumi:"accountName"`
	// Collaboration branch.
	CollaborationBranch string `pulumi:"collaborationBranch"`
	// Disable manual publish operation in ADF studio to favor automated publish.
	DisablePublish *bool `pulumi:"disablePublish"`
	// Last commit id.
	LastCommitId *string `pulumi:"lastCommitId"`
	// VSTS project name.
	ProjectName string `pulumi:"projectName"`
	// Repository name.
	RepositoryName string `pulumi:"repositoryName"`
	// Root folder.
	RootFolder string `pulumi:"rootFolder"`
	// VSTS tenant id.
	TenantId *string `pulumi:"tenantId"`
	// Type of repo configuration.
	// Expected value is 'FactoryVSTSConfiguration'.
	Type string `pulumi:"type"`
}

// This activity will fail within its own scope and output a custom error message and error code. The error message and code can provided either as a string literal or as an expression that can be evaluated to a string at runtime. The activity scope can be the whole pipeline or a control activity (e.g. foreach, switch, until), if the fail activity is contained in it.
type FailActivity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// The error code that categorizes the error type of the Fail activity. It can be dynamic content that's evaluated to a non empty/blank string at runtime. Type: string (or Expression with resultType string).
	ErrorCode interface{} `pulumi:"errorCode"`
	// The error message that surfaced in the Fail activity. It can be dynamic content that's evaluated to a non empty/blank string at runtime. Type: string (or Expression with resultType string).
	Message interface{} `pulumi:"message"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'Fail'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// This activity will fail within its own scope and output a custom error message and error code. The error message and code can provided either as a string literal or as an expression that can be evaluated to a string at runtime. The activity scope can be the whole pipeline or a control activity (e.g. foreach, switch, until), if the fail activity is contained in it.
type FailActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// The error code that categorizes the error type of the Fail activity. It can be dynamic content that's evaluated to a non empty/blank string at runtime. Type: string (or Expression with resultType string).
	ErrorCode interface{} `pulumi:"errorCode"`
	// The error message that surfaced in the Fail activity. It can be dynamic content that's evaluated to a non empty/blank string at runtime. Type: string (or Expression with resultType string).
	Message interface{} `pulumi:"message"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'Fail'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// File system linked service.
type FileServerLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Host name of the server. Type: string (or Expression with resultType string).
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to logon the server.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'FileServer'.
	Type string `pulumi:"type"`
	// User ID to logon the server. Type: string (or Expression with resultType string).
	UserId interface{} `pulumi:"userId"`
}

// File system linked service.
type FileServerLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Host name of the server. Type: string (or Expression with resultType string).
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to logon the server.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'FileServer'.
	Type string `pulumi:"type"`
	// User ID to logon the server. Type: string (or Expression with resultType string).
	UserId interface{} `pulumi:"userId"`
}

// The location of file server dataset.
type FileServerLocation struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'FileServerLocation'.
	Type string `pulumi:"type"`
}

// The location of file server dataset.
type FileServerLocationResponse struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'FileServerLocation'.
	Type string `pulumi:"type"`
}

// File server read settings.
type FileServerReadSettings struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery interface{} `pulumi:"enablePartitionDiscovery"`
	// Specify a filter to be used to select a subset of files in the folderPath rather than all files. Type: string (or Expression with resultType string).
	FileFilter interface{} `pulumi:"fileFilter"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'FileServerReadSettings'.
	Type string `pulumi:"type"`
	// FileServer wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// FileServer wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// File server read settings.
type FileServerReadSettingsResponse struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery interface{} `pulumi:"enablePartitionDiscovery"`
	// Specify a filter to be used to select a subset of files in the folderPath rather than all files. Type: string (or Expression with resultType string).
	FileFilter interface{} `pulumi:"fileFilter"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'FileServerReadSettings'.
	Type string `pulumi:"type"`
	// FileServer wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// FileServer wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// File server write settings.
type FileServerWriteSettings struct {
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The write setting type.
	// Expected value is 'FileServerWriteSettings'.
	Type string `pulumi:"type"`
}

// File server write settings.
type FileServerWriteSettingsResponse struct {
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The write setting type.
	// Expected value is 'FileServerWriteSettings'.
	Type string `pulumi:"type"`
}

// An on-premises file system dataset.
type FileShareDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the file system.
	Compression *DatasetCompression `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Specify a filter to be used to select a subset of files in the folderPath rather than all files. Type: string (or Expression with resultType string).
	FileFilter interface{} `pulumi:"fileFilter"`
	// The name of the on-premises file system. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// The path of the on-premises file system. Type: string (or Expression with resultType string).
	FolderPath interface{} `pulumi:"folderPath"`
	// The format of the files.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'FileShare'.
	Type string `pulumi:"type"`
}

// An on-premises file system dataset.
type FileShareDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the file system.
	Compression *DatasetCompressionResponse `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Specify a filter to be used to select a subset of files in the folderPath rather than all files. Type: string (or Expression with resultType string).
	FileFilter interface{} `pulumi:"fileFilter"`
	// The name of the on-premises file system. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// The path of the on-premises file system. Type: string (or Expression with resultType string).
	FolderPath interface{} `pulumi:"folderPath"`
	// The format of the files.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'FileShare'.
	Type string `pulumi:"type"`
}

// A copy activity file system sink.
type FileSystemSink struct {
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'FileSystemSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity file system sink.
type FileSystemSinkResponse struct {
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'FileSystemSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity file system source.
type FileSystemSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'FileSystemSource'.
	Type string `pulumi:"type"`
}

// A copy activity file system source.
type FileSystemSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'FileSystemSource'.
	Type string `pulumi:"type"`
}

// Filter and return results from input array based on the conditions.
type FilterActivity struct {
	// Condition to be used for filtering the input.
	Condition Expression `pulumi:"condition"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Input array on which filter should be applied.
	Items Expression `pulumi:"items"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'Filter'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// Filter and return results from input array based on the conditions.
type FilterActivityResponse struct {
	// Condition to be used for filtering the input.
	Condition ExpressionResponse `pulumi:"condition"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Input array on which filter should be applied.
	Items ExpressionResponse `pulumi:"items"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'Filter'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Data flow flowlet
type Flowlet struct {
	// List of tags that can be used for describing the data flow.
	Annotations []interface{} `pulumi:"annotations"`
	// The description of the data flow.
	Description *string `pulumi:"description"`
	// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
	Folder *DataFlowFolder `pulumi:"folder"`
	// Flowlet script.
	Script *string `pulumi:"script"`
	// Flowlet script lines.
	ScriptLines []string `pulumi:"scriptLines"`
	// List of sinks in Flowlet.
	Sinks []DataFlowSink `pulumi:"sinks"`
	// List of sources in Flowlet.
	Sources []DataFlowSource `pulumi:"sources"`
	// List of transformations in Flowlet.
	Transformations []Transformation `pulumi:"transformations"`
	// Type of data flow.
	// Expected value is 'Flowlet'.
	Type string `pulumi:"type"`
}

// Data flow flowlet
type FlowletResponse struct {
	// List of tags that can be used for describing the data flow.
	Annotations []interface{} `pulumi:"annotations"`
	// The description of the data flow.
	Description *string `pulumi:"description"`
	// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
	Folder *DataFlowResponseFolder `pulumi:"folder"`
	// Flowlet script.
	Script *string `pulumi:"script"`
	// Flowlet script lines.
	ScriptLines []string `pulumi:"scriptLines"`
	// List of sinks in Flowlet.
	Sinks []DataFlowSinkResponse `pulumi:"sinks"`
	// List of sources in Flowlet.
	Sources []DataFlowSourceResponse `pulumi:"sources"`
	// List of transformations in Flowlet.
	Transformations []TransformationResponse `pulumi:"transformations"`
	// Type of data flow.
	// Expected value is 'Flowlet'.
	Type string `pulumi:"type"`
}

// This activity is used for iterating over a collection and execute given activities.
type ForEachActivity struct {
	// List of activities to execute .
	Activities []interface{} `pulumi:"activities"`
	// Batch count to be used for controlling the number of parallel execution (when isSequential is set to false).
	BatchCount *int `pulumi:"batchCount"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Should the loop be executed in sequence or in parallel (max 50)
	IsSequential *bool `pulumi:"isSequential"`
	// Collection to iterate.
	Items Expression `pulumi:"items"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'ForEach'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// This activity is used for iterating over a collection and execute given activities.
type ForEachActivityResponse struct {
	// List of activities to execute .
	Activities []interface{} `pulumi:"activities"`
	// Batch count to be used for controlling the number of parallel execution (when isSequential is set to false).
	BatchCount *int `pulumi:"batchCount"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Should the loop be executed in sequence or in parallel (max 50)
	IsSequential *bool `pulumi:"isSequential"`
	// Collection to iterate.
	Items ExpressionResponse `pulumi:"items"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'ForEach'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Ftp read settings.
type FtpReadSettings struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable parallel reading within each file. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableChunking interface{} `pulumi:"disableChunking"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery interface{} `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'FtpReadSettings'.
	Type string `pulumi:"type"`
	// Specify whether to use binary transfer mode for FTP stores. Type: boolean (or Expression with resultType boolean).
	UseBinaryTransfer interface{} `pulumi:"useBinaryTransfer"`
	// Ftp wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Ftp wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// Ftp read settings.
type FtpReadSettingsResponse struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable parallel reading within each file. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableChunking interface{} `pulumi:"disableChunking"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery interface{} `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'FtpReadSettings'.
	Type string `pulumi:"type"`
	// Specify whether to use binary transfer mode for FTP stores. Type: boolean (or Expression with resultType boolean).
	UseBinaryTransfer interface{} `pulumi:"useBinaryTransfer"`
	// Ftp wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Ftp wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// A FTP server Linked Service.
type FtpServerLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to be used to connect to the FTP server.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// If true, validate the FTP server SSL certificate when connect over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean).
	EnableServerCertificateValidation interface{} `pulumi:"enableServerCertificateValidation"`
	// If true, connect to the FTP server over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean).
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Host name of the FTP server. Type: string (or Expression with resultType string).
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to logon the FTP server.
	Password interface{} `pulumi:"password"`
	// The TCP port number that the FTP server uses to listen for client connections. Default value is 21. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// Type of linked service.
	// Expected value is 'FtpServer'.
	Type string `pulumi:"type"`
	// Username to logon the FTP server. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// A FTP server Linked Service.
type FtpServerLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to be used to connect to the FTP server.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// If true, validate the FTP server SSL certificate when connect over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean).
	EnableServerCertificateValidation interface{} `pulumi:"enableServerCertificateValidation"`
	// If true, connect to the FTP server over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean).
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Host name of the FTP server. Type: string (or Expression with resultType string).
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to logon the FTP server.
	Password interface{} `pulumi:"password"`
	// The TCP port number that the FTP server uses to listen for client connections. Default value is 21. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// Type of linked service.
	// Expected value is 'FtpServer'.
	Type string `pulumi:"type"`
	// Username to logon the FTP server. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// The location of ftp server dataset.
type FtpServerLocation struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'FtpServerLocation'.
	Type string `pulumi:"type"`
}

// The location of ftp server dataset.
type FtpServerLocationResponse struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'FtpServerLocation'.
	Type string `pulumi:"type"`
}

// Activity to get metadata of dataset
type GetMetadataActivity struct {
	// GetMetadata activity dataset reference.
	Dataset DatasetReference `pulumi:"dataset"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Fields of metadata to get from dataset.
	FieldList []interface{} `pulumi:"fieldList"`
	// GetMetadata activity format settings.
	FormatSettings interface{} `pulumi:"formatSettings"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// GetMetadata activity store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Type of activity.
	// Expected value is 'GetMetadata'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// Activity to get metadata of dataset
type GetMetadataActivityResponse struct {
	// GetMetadata activity dataset reference.
	Dataset DatasetReferenceResponse `pulumi:"dataset"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Fields of metadata to get from dataset.
	FieldList []interface{} `pulumi:"fieldList"`
	// GetMetadata activity format settings.
	FormatSettings interface{} `pulumi:"formatSettings"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// GetMetadata activity store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Type of activity.
	// Expected value is 'GetMetadata'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Client secret information for factory's bring your own app repository configuration.
type GitHubClientSecret struct {
	// Bring your own app client secret AKV URL.
	ByoaSecretAkvUrl *string `pulumi:"byoaSecretAkvUrl"`
	// Bring your own app client secret name in AKV.
	ByoaSecretName *string `pulumi:"byoaSecretName"`
}

// GitHubClientSecretInput is an input type that accepts GitHubClientSecretArgs and GitHubClientSecretOutput values.
// You can construct a concrete instance of `GitHubClientSecretInput` via:
//
//	GitHubClientSecretArgs{...}
type GitHubClientSecretInput interface {
	pulumi.Input

	ToGitHubClientSecretOutput() GitHubClientSecretOutput
	ToGitHubClientSecretOutputWithContext(context.Context) GitHubClientSecretOutput
}

// Client secret information for factory's bring your own app repository configuration.
type GitHubClientSecretArgs struct {
	// Bring your own app client secret AKV URL.
	ByoaSecretAkvUrl pulumi.StringPtrInput `pulumi:"byoaSecretAkvUrl"`
	// Bring your own app client secret name in AKV.
	ByoaSecretName pulumi.StringPtrInput `pulumi:"byoaSecretName"`
}

func (GitHubClientSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitHubClientSecret)(nil)).Elem()
}

func (i GitHubClientSecretArgs) ToGitHubClientSecretOutput() GitHubClientSecretOutput {
	return i.ToGitHubClientSecretOutputWithContext(context.Background())
}

func (i GitHubClientSecretArgs) ToGitHubClientSecretOutputWithContext(ctx context.Context) GitHubClientSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubClientSecretOutput)
}

func (i GitHubClientSecretArgs) ToGitHubClientSecretPtrOutput() GitHubClientSecretPtrOutput {
	return i.ToGitHubClientSecretPtrOutputWithContext(context.Background())
}

func (i GitHubClientSecretArgs) ToGitHubClientSecretPtrOutputWithContext(ctx context.Context) GitHubClientSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubClientSecretOutput).ToGitHubClientSecretPtrOutputWithContext(ctx)
}

// GitHubClientSecretPtrInput is an input type that accepts GitHubClientSecretArgs, GitHubClientSecretPtr and GitHubClientSecretPtrOutput values.
// You can construct a concrete instance of `GitHubClientSecretPtrInput` via:
//
//	        GitHubClientSecretArgs{...}
//
//	or:
//
//	        nil
type GitHubClientSecretPtrInput interface {
	pulumi.Input

	ToGitHubClientSecretPtrOutput() GitHubClientSecretPtrOutput
	ToGitHubClientSecretPtrOutputWithContext(context.Context) GitHubClientSecretPtrOutput
}

type gitHubClientSecretPtrType GitHubClientSecretArgs

func GitHubClientSecretPtr(v *GitHubClientSecretArgs) GitHubClientSecretPtrInput {
	return (*gitHubClientSecretPtrType)(v)
}

func (*gitHubClientSecretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHubClientSecret)(nil)).Elem()
}

func (i *gitHubClientSecretPtrType) ToGitHubClientSecretPtrOutput() GitHubClientSecretPtrOutput {
	return i.ToGitHubClientSecretPtrOutputWithContext(context.Background())
}

func (i *gitHubClientSecretPtrType) ToGitHubClientSecretPtrOutputWithContext(ctx context.Context) GitHubClientSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubClientSecretPtrOutput)
}

// Client secret information for factory's bring your own app repository configuration.
type GitHubClientSecretOutput struct{ *pulumi.OutputState }

func (GitHubClientSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitHubClientSecret)(nil)).Elem()
}

func (o GitHubClientSecretOutput) ToGitHubClientSecretOutput() GitHubClientSecretOutput {
	return o
}

func (o GitHubClientSecretOutput) ToGitHubClientSecretOutputWithContext(ctx context.Context) GitHubClientSecretOutput {
	return o
}

func (o GitHubClientSecretOutput) ToGitHubClientSecretPtrOutput() GitHubClientSecretPtrOutput {
	return o.ToGitHubClientSecretPtrOutputWithContext(context.Background())
}

func (o GitHubClientSecretOutput) ToGitHubClientSecretPtrOutputWithContext(ctx context.Context) GitHubClientSecretPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitHubClientSecret) *GitHubClientSecret {
		return &v
	}).(GitHubClientSecretPtrOutput)
}

// Bring your own app client secret AKV URL.
func (o GitHubClientSecretOutput) ByoaSecretAkvUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubClientSecret) *string { return v.ByoaSecretAkvUrl }).(pulumi.StringPtrOutput)
}

// Bring your own app client secret name in AKV.
func (o GitHubClientSecretOutput) ByoaSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubClientSecret) *string { return v.ByoaSecretName }).(pulumi.StringPtrOutput)
}

type GitHubClientSecretPtrOutput struct{ *pulumi.OutputState }

func (GitHubClientSecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHubClientSecret)(nil)).Elem()
}

func (o GitHubClientSecretPtrOutput) ToGitHubClientSecretPtrOutput() GitHubClientSecretPtrOutput {
	return o
}

func (o GitHubClientSecretPtrOutput) ToGitHubClientSecretPtrOutputWithContext(ctx context.Context) GitHubClientSecretPtrOutput {
	return o
}

func (o GitHubClientSecretPtrOutput) Elem() GitHubClientSecretOutput {
	return o.ApplyT(func(v *GitHubClientSecret) GitHubClientSecret {
		if v != nil {
			return *v
		}
		var ret GitHubClientSecret
		return ret
	}).(GitHubClientSecretOutput)
}

// Bring your own app client secret AKV URL.
func (o GitHubClientSecretPtrOutput) ByoaSecretAkvUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubClientSecret) *string {
		if v == nil {
			return nil
		}
		return v.ByoaSecretAkvUrl
	}).(pulumi.StringPtrOutput)
}

// Bring your own app client secret name in AKV.
func (o GitHubClientSecretPtrOutput) ByoaSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubClientSecret) *string {
		if v == nil {
			return nil
		}
		return v.ByoaSecretName
	}).(pulumi.StringPtrOutput)
}

// Client secret information for factory's bring your own app repository configuration.
type GitHubClientSecretResponse struct {
	// Bring your own app client secret AKV URL.
	ByoaSecretAkvUrl *string `pulumi:"byoaSecretAkvUrl"`
	// Bring your own app client secret name in AKV.
	ByoaSecretName *string `pulumi:"byoaSecretName"`
}

// Definition of a single parameter for an entity.
type GlobalParameterSpecification struct {
	// Global Parameter type.
	Type string `pulumi:"type"`
	// Value of parameter.
	Value interface{} `pulumi:"value"`
}

// GlobalParameterSpecificationInput is an input type that accepts GlobalParameterSpecificationArgs and GlobalParameterSpecificationOutput values.
// You can construct a concrete instance of `GlobalParameterSpecificationInput` via:
//
//	GlobalParameterSpecificationArgs{...}
type GlobalParameterSpecificationInput interface {
	pulumi.Input

	ToGlobalParameterSpecificationOutput() GlobalParameterSpecificationOutput
	ToGlobalParameterSpecificationOutputWithContext(context.Context) GlobalParameterSpecificationOutput
}

// Definition of a single parameter for an entity.
type GlobalParameterSpecificationArgs struct {
	// Global Parameter type.
	Type pulumi.StringInput `pulumi:"type"`
	// Value of parameter.
	Value pulumi.Input `pulumi:"value"`
}

func (GlobalParameterSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalParameterSpecification)(nil)).Elem()
}

func (i GlobalParameterSpecificationArgs) ToGlobalParameterSpecificationOutput() GlobalParameterSpecificationOutput {
	return i.ToGlobalParameterSpecificationOutputWithContext(context.Background())
}

func (i GlobalParameterSpecificationArgs) ToGlobalParameterSpecificationOutputWithContext(ctx context.Context) GlobalParameterSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalParameterSpecificationOutput)
}

// GlobalParameterSpecificationMapInput is an input type that accepts GlobalParameterSpecificationMap and GlobalParameterSpecificationMapOutput values.
// You can construct a concrete instance of `GlobalParameterSpecificationMapInput` via:
//
//	GlobalParameterSpecificationMap{ "key": GlobalParameterSpecificationArgs{...} }
type GlobalParameterSpecificationMapInput interface {
	pulumi.Input

	ToGlobalParameterSpecificationMapOutput() GlobalParameterSpecificationMapOutput
	ToGlobalParameterSpecificationMapOutputWithContext(context.Context) GlobalParameterSpecificationMapOutput
}

type GlobalParameterSpecificationMap map[string]GlobalParameterSpecificationInput

func (GlobalParameterSpecificationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GlobalParameterSpecification)(nil)).Elem()
}

func (i GlobalParameterSpecificationMap) ToGlobalParameterSpecificationMapOutput() GlobalParameterSpecificationMapOutput {
	return i.ToGlobalParameterSpecificationMapOutputWithContext(context.Background())
}

func (i GlobalParameterSpecificationMap) ToGlobalParameterSpecificationMapOutputWithContext(ctx context.Context) GlobalParameterSpecificationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalParameterSpecificationMapOutput)
}

// Definition of a single parameter for an entity.
type GlobalParameterSpecificationOutput struct{ *pulumi.OutputState }

func (GlobalParameterSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalParameterSpecification)(nil)).Elem()
}

func (o GlobalParameterSpecificationOutput) ToGlobalParameterSpecificationOutput() GlobalParameterSpecificationOutput {
	return o
}

func (o GlobalParameterSpecificationOutput) ToGlobalParameterSpecificationOutputWithContext(ctx context.Context) GlobalParameterSpecificationOutput {
	return o
}

// Global Parameter type.
func (o GlobalParameterSpecificationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalParameterSpecification) string { return v.Type }).(pulumi.StringOutput)
}

// Value of parameter.
func (o GlobalParameterSpecificationOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v GlobalParameterSpecification) interface{} { return v.Value }).(pulumi.AnyOutput)
}

type GlobalParameterSpecificationMapOutput struct{ *pulumi.OutputState }

func (GlobalParameterSpecificationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GlobalParameterSpecification)(nil)).Elem()
}

func (o GlobalParameterSpecificationMapOutput) ToGlobalParameterSpecificationMapOutput() GlobalParameterSpecificationMapOutput {
	return o
}

func (o GlobalParameterSpecificationMapOutput) ToGlobalParameterSpecificationMapOutputWithContext(ctx context.Context) GlobalParameterSpecificationMapOutput {
	return o
}

func (o GlobalParameterSpecificationMapOutput) MapIndex(k pulumi.StringInput) GlobalParameterSpecificationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GlobalParameterSpecification {
		return vs[0].(map[string]GlobalParameterSpecification)[vs[1].(string)]
	}).(GlobalParameterSpecificationOutput)
}

// Definition of a single parameter for an entity.
type GlobalParameterSpecificationResponse struct {
	// Global Parameter type.
	Type string `pulumi:"type"`
	// Value of parameter.
	Value interface{} `pulumi:"value"`
}

// Definition of a single parameter for an entity.
type GlobalParameterSpecificationResponseOutput struct{ *pulumi.OutputState }

func (GlobalParameterSpecificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalParameterSpecificationResponse)(nil)).Elem()
}

func (o GlobalParameterSpecificationResponseOutput) ToGlobalParameterSpecificationResponseOutput() GlobalParameterSpecificationResponseOutput {
	return o
}

func (o GlobalParameterSpecificationResponseOutput) ToGlobalParameterSpecificationResponseOutputWithContext(ctx context.Context) GlobalParameterSpecificationResponseOutput {
	return o
}

// Global Parameter type.
func (o GlobalParameterSpecificationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalParameterSpecificationResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Value of parameter.
func (o GlobalParameterSpecificationResponseOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v GlobalParameterSpecificationResponse) interface{} { return v.Value }).(pulumi.AnyOutput)
}

type GlobalParameterSpecificationResponseMapOutput struct{ *pulumi.OutputState }

func (GlobalParameterSpecificationResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GlobalParameterSpecificationResponse)(nil)).Elem()
}

func (o GlobalParameterSpecificationResponseMapOutput) ToGlobalParameterSpecificationResponseMapOutput() GlobalParameterSpecificationResponseMapOutput {
	return o
}

func (o GlobalParameterSpecificationResponseMapOutput) ToGlobalParameterSpecificationResponseMapOutputWithContext(ctx context.Context) GlobalParameterSpecificationResponseMapOutput {
	return o
}

func (o GlobalParameterSpecificationResponseMapOutput) MapIndex(k pulumi.StringInput) GlobalParameterSpecificationResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GlobalParameterSpecificationResponse {
		return vs[0].(map[string]GlobalParameterSpecificationResponse)[vs[1].(string)]
	}).(GlobalParameterSpecificationResponseOutput)
}

// Google AdWords service linked service.
type GoogleAdWordsLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The Client customer ID of the AdWords account that you want to fetch report data for. Type: string (or Expression with resultType string).
	ClientCustomerID interface{} `pulumi:"clientCustomerID"`
	// The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The client secret of the google application used to acquire the refresh token.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// (Deprecated) Properties used to connect to GoogleAds. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The developer token associated with the manager account that you use to grant access to the AdWords API.
	DeveloperToken interface{} `pulumi:"developerToken"`
	// The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR. Type: string (or Expression with resultType string).
	Email interface{} `pulumi:"email"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The Google Ads API major version such as v14. The supported major versions could be found on https://developers.google.com/google-ads/api/docs/release-notes. Type: string (or Expression with resultType string).
	GoogleAdsApiVersion interface{} `pulumi:"googleAdsApiVersion"`
	// (Deprecated) The full path to the .p12 key file that is used to authenticate the service account email address and can only be used on self-hosted IR. Type: string (or Expression with resultType string).
	KeyFilePath interface{} `pulumi:"keyFilePath"`
	// The customer ID of the Google Ads Manager account through which you want to fetch report data of specific Customer. Type: string (or Expression with resultType string).
	LoginCustomerID interface{} `pulumi:"loginCustomerID"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The private key that is used to authenticate the service account email address and can only be used on self-hosted IR.
	PrivateKey interface{} `pulumi:"privateKey"`
	// The refresh token obtained from Google for authorizing access to AdWords for UserAuthentication.
	RefreshToken interface{} `pulumi:"refreshToken"`
	// Specifies whether to use the legacy data type mappings, which maps float, int32 and int64 from Google to string. Do not set this to true unless you want to keep backward compatibility with legacy driver's data type mappings. Type: boolean (or Expression with resultType boolean).
	SupportLegacyDataTypes interface{} `pulumi:"supportLegacyDataTypes"`
	// (Deprecated) The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR. Type: string (or Expression with resultType string).
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'GoogleAdWords'.
	Type string `pulumi:"type"`
	// (Deprecated) Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false. Type: boolean (or Expression with resultType boolean).
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
}

// Google AdWords service linked service.
type GoogleAdWordsLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The Client customer ID of the AdWords account that you want to fetch report data for. Type: string (or Expression with resultType string).
	ClientCustomerID interface{} `pulumi:"clientCustomerID"`
	// The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The client secret of the google application used to acquire the refresh token.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// (Deprecated) Properties used to connect to GoogleAds. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The developer token associated with the manager account that you use to grant access to the AdWords API.
	DeveloperToken interface{} `pulumi:"developerToken"`
	// The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR. Type: string (or Expression with resultType string).
	Email interface{} `pulumi:"email"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The Google Ads API major version such as v14. The supported major versions could be found on https://developers.google.com/google-ads/api/docs/release-notes. Type: string (or Expression with resultType string).
	GoogleAdsApiVersion interface{} `pulumi:"googleAdsApiVersion"`
	// (Deprecated) The full path to the .p12 key file that is used to authenticate the service account email address and can only be used on self-hosted IR. Type: string (or Expression with resultType string).
	KeyFilePath interface{} `pulumi:"keyFilePath"`
	// The customer ID of the Google Ads Manager account through which you want to fetch report data of specific Customer. Type: string (or Expression with resultType string).
	LoginCustomerID interface{} `pulumi:"loginCustomerID"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The private key that is used to authenticate the service account email address and can only be used on self-hosted IR.
	PrivateKey interface{} `pulumi:"privateKey"`
	// The refresh token obtained from Google for authorizing access to AdWords for UserAuthentication.
	RefreshToken interface{} `pulumi:"refreshToken"`
	// Specifies whether to use the legacy data type mappings, which maps float, int32 and int64 from Google to string. Do not set this to true unless you want to keep backward compatibility with legacy driver's data type mappings. Type: boolean (or Expression with resultType boolean).
	SupportLegacyDataTypes interface{} `pulumi:"supportLegacyDataTypes"`
	// (Deprecated) The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR. Type: string (or Expression with resultType string).
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'GoogleAdWords'.
	Type string `pulumi:"type"`
	// (Deprecated) Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false. Type: boolean (or Expression with resultType boolean).
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
}

// Google AdWords service dataset.
type GoogleAdWordsObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'GoogleAdWordsObject'.
	Type string `pulumi:"type"`
}

// Google AdWords service dataset.
type GoogleAdWordsObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'GoogleAdWordsObject'.
	Type string `pulumi:"type"`
}

// A copy activity Google AdWords service source.
type GoogleAdWordsSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'GoogleAdWordsSource'.
	Type string `pulumi:"type"`
}

// A copy activity Google AdWords service source.
type GoogleAdWordsSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'GoogleAdWordsSource'.
	Type string `pulumi:"type"`
}

// Google BigQuery service linked service.
type GoogleBigQueryLinkedService struct {
	// A comma-separated list of public BigQuery projects to access. Type: string (or Expression with resultType string).
	AdditionalProjects interface{} `pulumi:"additionalProjects"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR.
	AuthenticationType string `pulumi:"authenticationType"`
	// The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The client secret of the google application used to acquire the refresh token.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR. Type: string (or Expression with resultType string).
	Email interface{} `pulumi:"email"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The full path to the .p12 key file that is used to authenticate the service account email address and can only be used on self-hosted IR. Type: string (or Expression with resultType string).
	KeyFilePath interface{} `pulumi:"keyFilePath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The default BigQuery project to query against. Type: string (or Expression with resultType string).
	Project interface{} `pulumi:"project"`
	// The refresh token obtained from Google for authorizing access to BigQuery for UserAuthentication.
	RefreshToken interface{} `pulumi:"refreshToken"`
	// Whether to request access to Google Drive. Allowing Google Drive access enables support for federated tables that combine BigQuery data with data from Google Drive. The default value is false. Type: string (or Expression with resultType string).
	RequestGoogleDriveScope interface{} `pulumi:"requestGoogleDriveScope"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR. Type: string (or Expression with resultType string).
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'GoogleBigQuery'.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.Type: boolean (or Expression with resultType boolean).
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
}

// Google BigQuery service linked service.
type GoogleBigQueryLinkedServiceResponse struct {
	// A comma-separated list of public BigQuery projects to access. Type: string (or Expression with resultType string).
	AdditionalProjects interface{} `pulumi:"additionalProjects"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR.
	AuthenticationType string `pulumi:"authenticationType"`
	// The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The client secret of the google application used to acquire the refresh token.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR. Type: string (or Expression with resultType string).
	Email interface{} `pulumi:"email"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The full path to the .p12 key file that is used to authenticate the service account email address and can only be used on self-hosted IR. Type: string (or Expression with resultType string).
	KeyFilePath interface{} `pulumi:"keyFilePath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The default BigQuery project to query against. Type: string (or Expression with resultType string).
	Project interface{} `pulumi:"project"`
	// The refresh token obtained from Google for authorizing access to BigQuery for UserAuthentication.
	RefreshToken interface{} `pulumi:"refreshToken"`
	// Whether to request access to Google Drive. Allowing Google Drive access enables support for federated tables that combine BigQuery data with data from Google Drive. The default value is false. Type: string (or Expression with resultType string).
	RequestGoogleDriveScope interface{} `pulumi:"requestGoogleDriveScope"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR. Type: string (or Expression with resultType string).
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'GoogleBigQuery'.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.Type: boolean (or Expression with resultType boolean).
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
}

// Google BigQuery service dataset.
type GoogleBigQueryObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The database name of the Google BigQuery. Type: string (or Expression with resultType string).
	Dataset interface{} `pulumi:"dataset"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Google BigQuery. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using database + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'GoogleBigQueryObject'.
	Type string `pulumi:"type"`
}

// Google BigQuery service dataset.
type GoogleBigQueryObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The database name of the Google BigQuery. Type: string (or Expression with resultType string).
	Dataset interface{} `pulumi:"dataset"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Google BigQuery. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using database + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'GoogleBigQueryObject'.
	Type string `pulumi:"type"`
}

// A copy activity Google BigQuery service source.
type GoogleBigQuerySource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'GoogleBigQuerySource'.
	Type string `pulumi:"type"`
}

// A copy activity Google BigQuery service source.
type GoogleBigQuerySourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'GoogleBigQuerySource'.
	Type string `pulumi:"type"`
}

// Linked service for Google Cloud Storage.
type GoogleCloudStorageLinkedService struct {
	// The access key identifier of the Google Cloud Storage Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
	AccessKeyId interface{} `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The secret access key of the Google Cloud Storage Identity and Access Management (IAM) user.
	SecretAccessKey interface{} `pulumi:"secretAccessKey"`
	// This value specifies the endpoint to access with the Google Cloud Storage Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
	ServiceUrl interface{} `pulumi:"serviceUrl"`
	// Type of linked service.
	// Expected value is 'GoogleCloudStorage'.
	Type string `pulumi:"type"`
}

// Linked service for Google Cloud Storage.
type GoogleCloudStorageLinkedServiceResponse struct {
	// The access key identifier of the Google Cloud Storage Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
	AccessKeyId interface{} `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The secret access key of the Google Cloud Storage Identity and Access Management (IAM) user.
	SecretAccessKey interface{} `pulumi:"secretAccessKey"`
	// This value specifies the endpoint to access with the Google Cloud Storage Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
	ServiceUrl interface{} `pulumi:"serviceUrl"`
	// Type of linked service.
	// Expected value is 'GoogleCloudStorage'.
	Type string `pulumi:"type"`
}

// The location of Google Cloud Storage dataset.
type GoogleCloudStorageLocation struct {
	// Specify the bucketName of Google Cloud Storage. Type: string (or Expression with resultType string)
	BucketName interface{} `pulumi:"bucketName"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'GoogleCloudStorageLocation'.
	Type string `pulumi:"type"`
	// Specify the version of Google Cloud Storage. Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
}

// The location of Google Cloud Storage dataset.
type GoogleCloudStorageLocationResponse struct {
	// Specify the bucketName of Google Cloud Storage. Type: string (or Expression with resultType string)
	BucketName interface{} `pulumi:"bucketName"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'GoogleCloudStorageLocation'.
	Type string `pulumi:"type"`
	// Specify the version of Google Cloud Storage. Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
}

// Google Cloud Storage read settings.
type GoogleCloudStorageReadSettings struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery interface{} `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// The prefix filter for the Google Cloud Storage object name. Type: string (or Expression with resultType string).
	Prefix interface{} `pulumi:"prefix"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'GoogleCloudStorageReadSettings'.
	Type string `pulumi:"type"`
	// Google Cloud Storage wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Google Cloud Storage wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// Google Cloud Storage read settings.
type GoogleCloudStorageReadSettingsResponse struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery interface{} `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// The prefix filter for the Google Cloud Storage object name. Type: string (or Expression with resultType string).
	Prefix interface{} `pulumi:"prefix"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'GoogleCloudStorageReadSettings'.
	Type string `pulumi:"type"`
	// Google Cloud Storage wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Google Cloud Storage wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// Linked service for GoogleSheets.
type GoogleSheetsLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The api token for the GoogleSheets source.
	ApiToken interface{} `pulumi:"apiToken"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'GoogleSheets'.
	Type string `pulumi:"type"`
}

// Linked service for GoogleSheets.
type GoogleSheetsLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The api token for the GoogleSheets source.
	ApiToken interface{} `pulumi:"apiToken"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'GoogleSheets'.
	Type string `pulumi:"type"`
}

// Greenplum Database linked service.
type GreenplumLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReference `pulumi:"pwd"`
	// Type of linked service.
	// Expected value is 'Greenplum'.
	Type string `pulumi:"type"`
}

// Greenplum Database linked service.
type GreenplumLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReferenceResponse `pulumi:"pwd"`
	// Type of linked service.
	// Expected value is 'Greenplum'.
	Type string `pulumi:"type"`
}

// A copy activity Greenplum Database source.
type GreenplumSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'GreenplumSource'.
	Type string `pulumi:"type"`
}

// A copy activity Greenplum Database source.
type GreenplumSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'GreenplumSource'.
	Type string `pulumi:"type"`
}

// Greenplum Database dataset.
type GreenplumTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of Greenplum. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'GreenplumTable'.
	Type string `pulumi:"type"`
}

// Greenplum Database dataset.
type GreenplumTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of Greenplum. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'GreenplumTable'.
	Type string `pulumi:"type"`
}

// HBase server linked service.
type HBaseLinkedService struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication mechanism to use to connect to the HBase server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The IP address or host name of the HBase server. (i.e. 192.168.222.160)
	Host interface{} `pulumi:"host"`
	// The partial URL corresponding to the HBase server. (i.e. /gateway/sandbox/hbase/version)
	HttpPath interface{} `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password interface{} `pulumi:"password"`
	// The TCP port that the HBase instance uses to listen for client connections. The default value is 9090.
	Port interface{} `pulumi:"port"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'HBase'.
	Type string `pulumi:"type"`
	// The user name used to connect to the HBase instance.
	Username interface{} `pulumi:"username"`
}

// HBase server linked service.
type HBaseLinkedServiceResponse struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication mechanism to use to connect to the HBase server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The IP address or host name of the HBase server. (i.e. 192.168.222.160)
	Host interface{} `pulumi:"host"`
	// The partial URL corresponding to the HBase server. (i.e. /gateway/sandbox/hbase/version)
	HttpPath interface{} `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password interface{} `pulumi:"password"`
	// The TCP port that the HBase instance uses to listen for client connections. The default value is 9090.
	Port interface{} `pulumi:"port"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'HBase'.
	Type string `pulumi:"type"`
	// The user name used to connect to the HBase instance.
	Username interface{} `pulumi:"username"`
}

// HBase server dataset.
type HBaseObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'HBaseObject'.
	Type string `pulumi:"type"`
}

// HBase server dataset.
type HBaseObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'HBaseObject'.
	Type string `pulumi:"type"`
}

// A copy activity HBase server source.
type HBaseSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'HBaseSource'.
	Type string `pulumi:"type"`
}

// A copy activity HBase server source.
type HBaseSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'HBaseSource'.
	Type string `pulumi:"type"`
}

// HDInsight Hive activity type.
type HDInsightHiveActivity struct {
	// User specified arguments to HDInsightActivity.
	Arguments []interface{} `pulumi:"arguments"`
	// Allows user to specify defines for Hive job request.
	Defines map[string]interface{} `pulumi:"defines"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Debug info option.
	GetDebugInfo *string `pulumi:"getDebugInfo"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Query timeout value (in minutes).  Effective when the HDInsight cluster is with ESP (Enterprise Security Package)
	QueryTimeout *int `pulumi:"queryTimeout"`
	// Script linked service reference.
	ScriptLinkedService *LinkedServiceReference `pulumi:"scriptLinkedService"`
	// Script path. Type: string (or Expression with resultType string).
	ScriptPath interface{} `pulumi:"scriptPath"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Storage linked service references.
	StorageLinkedServices []LinkedServiceReference `pulumi:"storageLinkedServices"`
	// Type of activity.
	// Expected value is 'HDInsightHive'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
	// User specified arguments under hivevar namespace.
	Variables map[string]interface{} `pulumi:"variables"`
}

// HDInsight Hive activity type.
type HDInsightHiveActivityResponse struct {
	// User specified arguments to HDInsightActivity.
	Arguments []interface{} `pulumi:"arguments"`
	// Allows user to specify defines for Hive job request.
	Defines map[string]interface{} `pulumi:"defines"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Debug info option.
	GetDebugInfo *string `pulumi:"getDebugInfo"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Query timeout value (in minutes).  Effective when the HDInsight cluster is with ESP (Enterprise Security Package)
	QueryTimeout *int `pulumi:"queryTimeout"`
	// Script linked service reference.
	ScriptLinkedService *LinkedServiceReferenceResponse `pulumi:"scriptLinkedService"`
	// Script path. Type: string (or Expression with resultType string).
	ScriptPath interface{} `pulumi:"scriptPath"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Storage linked service references.
	StorageLinkedServices []LinkedServiceReferenceResponse `pulumi:"storageLinkedServices"`
	// Type of activity.
	// Expected value is 'HDInsightHive'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
	// User specified arguments under hivevar namespace.
	Variables map[string]interface{} `pulumi:"variables"`
}

// HDInsight linked service.
type HDInsightLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// HDInsight cluster URI. Type: string (or Expression with resultType string).
	ClusterUri interface{} `pulumi:"clusterUri"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Specify the FileSystem if the main storage for the HDInsight is ADLS Gen2. Type: string (or Expression with resultType string).
	FileSystem interface{} `pulumi:"fileSystem"`
	// A reference to the Azure SQL linked service that points to the HCatalog database.
	HcatalogLinkedServiceName *LinkedServiceReference `pulumi:"hcatalogLinkedServiceName"`
	// Specify if the HDInsight is created with ESP (Enterprise Security Package). Type: Boolean.
	IsEspEnabled interface{} `pulumi:"isEspEnabled"`
	// The Azure Storage linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// HDInsight cluster password.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'HDInsight'.
	Type string `pulumi:"type"`
	// HDInsight cluster user name. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// HDInsight linked service.
type HDInsightLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// HDInsight cluster URI. Type: string (or Expression with resultType string).
	ClusterUri interface{} `pulumi:"clusterUri"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Specify the FileSystem if the main storage for the HDInsight is ADLS Gen2. Type: string (or Expression with resultType string).
	FileSystem interface{} `pulumi:"fileSystem"`
	// A reference to the Azure SQL linked service that points to the HCatalog database.
	HcatalogLinkedServiceName *LinkedServiceReferenceResponse `pulumi:"hcatalogLinkedServiceName"`
	// Specify if the HDInsight is created with ESP (Enterprise Security Package). Type: Boolean.
	IsEspEnabled interface{} `pulumi:"isEspEnabled"`
	// The Azure Storage linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// HDInsight cluster password.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'HDInsight'.
	Type string `pulumi:"type"`
	// HDInsight cluster user name. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

func init() {
	pulumi.RegisterOutputType(ArmIdWrapperResponseOutput{})
	pulumi.RegisterOutputType(ArmIdWrapperResponsePtrOutput{})
	pulumi.RegisterOutputType(CMKIdentityDefinitionOutput{})
	pulumi.RegisterOutputType(CMKIdentityDefinitionPtrOutput{})
	pulumi.RegisterOutputType(CMKIdentityDefinitionResponseOutput{})
	pulumi.RegisterOutputType(CMKIdentityDefinitionResponsePtrOutput{})
	pulumi.RegisterOutputType(ChangeDataCaptureFolderOutput{})
	pulumi.RegisterOutputType(ChangeDataCaptureFolderPtrOutput{})
	pulumi.RegisterOutputType(ChangeDataCaptureResponseFolderOutput{})
	pulumi.RegisterOutputType(ChangeDataCaptureResponseFolderPtrOutput{})
	pulumi.RegisterOutputType(ConnectionStatePropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectionStatePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(DataMapperMappingOutput{})
	pulumi.RegisterOutputType(DataMapperMappingArrayOutput{})
	pulumi.RegisterOutputType(DataMapperMappingResponseOutput{})
	pulumi.RegisterOutputType(DataMapperMappingResponseArrayOutput{})
	pulumi.RegisterOutputType(EncryptionConfigurationOutput{})
	pulumi.RegisterOutputType(EncryptionConfigurationPtrOutput{})
	pulumi.RegisterOutputType(EncryptionConfigurationResponseOutput{})
	pulumi.RegisterOutputType(EncryptionConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(FactoryIdentityOutput{})
	pulumi.RegisterOutputType(FactoryIdentityPtrOutput{})
	pulumi.RegisterOutputType(FactoryIdentityResponseOutput{})
	pulumi.RegisterOutputType(FactoryIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(GitHubClientSecretOutput{})
	pulumi.RegisterOutputType(GitHubClientSecretPtrOutput{})
	pulumi.RegisterOutputType(GlobalParameterSpecificationOutput{})
	pulumi.RegisterOutputType(GlobalParameterSpecificationMapOutput{})
	pulumi.RegisterOutputType(GlobalParameterSpecificationResponseOutput{})
	pulumi.RegisterOutputType(GlobalParameterSpecificationResponseMapOutput{})
}
