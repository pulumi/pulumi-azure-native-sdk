// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20170901preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Identity properties of the factory resource.
type FactoryIdentity struct {
	// The identity type. Currently the only supported type is 'SystemAssigned'.
	Type FactoryIdentityType `pulumi:"type"`
}

// FactoryIdentityInput is an input type that accepts FactoryIdentityArgs and FactoryIdentityOutput values.
// You can construct a concrete instance of `FactoryIdentityInput` via:
//
//	FactoryIdentityArgs{...}
type FactoryIdentityInput interface {
	pulumi.Input

	ToFactoryIdentityOutput() FactoryIdentityOutput
	ToFactoryIdentityOutputWithContext(context.Context) FactoryIdentityOutput
}

// Identity properties of the factory resource.
type FactoryIdentityArgs struct {
	// The identity type. Currently the only supported type is 'SystemAssigned'.
	Type FactoryIdentityTypeInput `pulumi:"type"`
}

func (FactoryIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryIdentity)(nil)).Elem()
}

func (i FactoryIdentityArgs) ToFactoryIdentityOutput() FactoryIdentityOutput {
	return i.ToFactoryIdentityOutputWithContext(context.Background())
}

func (i FactoryIdentityArgs) ToFactoryIdentityOutputWithContext(ctx context.Context) FactoryIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityOutput)
}

func (i FactoryIdentityArgs) ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput {
	return i.ToFactoryIdentityPtrOutputWithContext(context.Background())
}

func (i FactoryIdentityArgs) ToFactoryIdentityPtrOutputWithContext(ctx context.Context) FactoryIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityOutput).ToFactoryIdentityPtrOutputWithContext(ctx)
}

// FactoryIdentityPtrInput is an input type that accepts FactoryIdentityArgs, FactoryIdentityPtr and FactoryIdentityPtrOutput values.
// You can construct a concrete instance of `FactoryIdentityPtrInput` via:
//
//	        FactoryIdentityArgs{...}
//
//	or:
//
//	        nil
type FactoryIdentityPtrInput interface {
	pulumi.Input

	ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput
	ToFactoryIdentityPtrOutputWithContext(context.Context) FactoryIdentityPtrOutput
}

type factoryIdentityPtrType FactoryIdentityArgs

func FactoryIdentityPtr(v *FactoryIdentityArgs) FactoryIdentityPtrInput {
	return (*factoryIdentityPtrType)(v)
}

func (*factoryIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryIdentity)(nil)).Elem()
}

func (i *factoryIdentityPtrType) ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput {
	return i.ToFactoryIdentityPtrOutputWithContext(context.Background())
}

func (i *factoryIdentityPtrType) ToFactoryIdentityPtrOutputWithContext(ctx context.Context) FactoryIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityPtrOutput)
}

// Identity properties of the factory resource.
type FactoryIdentityOutput struct{ *pulumi.OutputState }

func (FactoryIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryIdentity)(nil)).Elem()
}

func (o FactoryIdentityOutput) ToFactoryIdentityOutput() FactoryIdentityOutput {
	return o
}

func (o FactoryIdentityOutput) ToFactoryIdentityOutputWithContext(ctx context.Context) FactoryIdentityOutput {
	return o
}

func (o FactoryIdentityOutput) ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput {
	return o.ToFactoryIdentityPtrOutputWithContext(context.Background())
}

func (o FactoryIdentityOutput) ToFactoryIdentityPtrOutputWithContext(ctx context.Context) FactoryIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FactoryIdentity) *FactoryIdentity {
		return &v
	}).(FactoryIdentityPtrOutput)
}

// The identity type. Currently the only supported type is 'SystemAssigned'.
func (o FactoryIdentityOutput) Type() FactoryIdentityTypeOutput {
	return o.ApplyT(func(v FactoryIdentity) FactoryIdentityType { return v.Type }).(FactoryIdentityTypeOutput)
}

type FactoryIdentityPtrOutput struct{ *pulumi.OutputState }

func (FactoryIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryIdentity)(nil)).Elem()
}

func (o FactoryIdentityPtrOutput) ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput {
	return o
}

func (o FactoryIdentityPtrOutput) ToFactoryIdentityPtrOutputWithContext(ctx context.Context) FactoryIdentityPtrOutput {
	return o
}

func (o FactoryIdentityPtrOutput) Elem() FactoryIdentityOutput {
	return o.ApplyT(func(v *FactoryIdentity) FactoryIdentity {
		if v != nil {
			return *v
		}
		var ret FactoryIdentity
		return ret
	}).(FactoryIdentityOutput)
}

// The identity type. Currently the only supported type is 'SystemAssigned'.
func (o FactoryIdentityPtrOutput) Type() FactoryIdentityTypePtrOutput {
	return o.ApplyT(func(v *FactoryIdentity) *FactoryIdentityType {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(FactoryIdentityTypePtrOutput)
}

// Identity properties of the factory resource.
type FactoryIdentityResponse struct {
	// The principal id of the identity.
	PrincipalId string `pulumi:"principalId"`
	// The client tenant id of the identity.
	TenantId string `pulumi:"tenantId"`
	// The identity type. Currently the only supported type is 'SystemAssigned'.
	Type string `pulumi:"type"`
}

// Identity properties of the factory resource.
type FactoryIdentityResponseOutput struct{ *pulumi.OutputState }

func (FactoryIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryIdentityResponse)(nil)).Elem()
}

func (o FactoryIdentityResponseOutput) ToFactoryIdentityResponseOutput() FactoryIdentityResponseOutput {
	return o
}

func (o FactoryIdentityResponseOutput) ToFactoryIdentityResponseOutputWithContext(ctx context.Context) FactoryIdentityResponseOutput {
	return o
}

// The principal id of the identity.
func (o FactoryIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The client tenant id of the identity.
func (o FactoryIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The identity type. Currently the only supported type is 'SystemAssigned'.
func (o FactoryIdentityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryIdentityResponse) string { return v.Type }).(pulumi.StringOutput)
}

type FactoryIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (FactoryIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryIdentityResponse)(nil)).Elem()
}

func (o FactoryIdentityResponsePtrOutput) ToFactoryIdentityResponsePtrOutput() FactoryIdentityResponsePtrOutput {
	return o
}

func (o FactoryIdentityResponsePtrOutput) ToFactoryIdentityResponsePtrOutputWithContext(ctx context.Context) FactoryIdentityResponsePtrOutput {
	return o
}

func (o FactoryIdentityResponsePtrOutput) Elem() FactoryIdentityResponseOutput {
	return o.ApplyT(func(v *FactoryIdentityResponse) FactoryIdentityResponse {
		if v != nil {
			return *v
		}
		var ret FactoryIdentityResponse
		return ret
	}).(FactoryIdentityResponseOutput)
}

// The principal id of the identity.
func (o FactoryIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The client tenant id of the identity.
func (o FactoryIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The identity type. Currently the only supported type is 'SystemAssigned'.
func (o FactoryIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Factory's VSTS repo information.
type FactoryVSTSConfiguration struct {
	// VSTS account name.
	AccountName *string `pulumi:"accountName"`
	// VSTS collaboration branch.
	CollaborationBranch *string `pulumi:"collaborationBranch"`
	// VSTS last commit id.
	LastCommitId *string `pulumi:"lastCommitId"`
	// VSTS project name.
	ProjectName *string `pulumi:"projectName"`
	// VSTS repository name.
	RepositoryName *string `pulumi:"repositoryName"`
	// VSTS root folder.
	RootFolder *string `pulumi:"rootFolder"`
	// VSTS tenant id.
	TenantId *string `pulumi:"tenantId"`
}

// FactoryVSTSConfigurationInput is an input type that accepts FactoryVSTSConfigurationArgs and FactoryVSTSConfigurationOutput values.
// You can construct a concrete instance of `FactoryVSTSConfigurationInput` via:
//
//	FactoryVSTSConfigurationArgs{...}
type FactoryVSTSConfigurationInput interface {
	pulumi.Input

	ToFactoryVSTSConfigurationOutput() FactoryVSTSConfigurationOutput
	ToFactoryVSTSConfigurationOutputWithContext(context.Context) FactoryVSTSConfigurationOutput
}

// Factory's VSTS repo information.
type FactoryVSTSConfigurationArgs struct {
	// VSTS account name.
	AccountName pulumi.StringPtrInput `pulumi:"accountName"`
	// VSTS collaboration branch.
	CollaborationBranch pulumi.StringPtrInput `pulumi:"collaborationBranch"`
	// VSTS last commit id.
	LastCommitId pulumi.StringPtrInput `pulumi:"lastCommitId"`
	// VSTS project name.
	ProjectName pulumi.StringPtrInput `pulumi:"projectName"`
	// VSTS repository name.
	RepositoryName pulumi.StringPtrInput `pulumi:"repositoryName"`
	// VSTS root folder.
	RootFolder pulumi.StringPtrInput `pulumi:"rootFolder"`
	// VSTS tenant id.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
}

func (FactoryVSTSConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryVSTSConfiguration)(nil)).Elem()
}

func (i FactoryVSTSConfigurationArgs) ToFactoryVSTSConfigurationOutput() FactoryVSTSConfigurationOutput {
	return i.ToFactoryVSTSConfigurationOutputWithContext(context.Background())
}

func (i FactoryVSTSConfigurationArgs) ToFactoryVSTSConfigurationOutputWithContext(ctx context.Context) FactoryVSTSConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryVSTSConfigurationOutput)
}

func (i FactoryVSTSConfigurationArgs) ToFactoryVSTSConfigurationPtrOutput() FactoryVSTSConfigurationPtrOutput {
	return i.ToFactoryVSTSConfigurationPtrOutputWithContext(context.Background())
}

func (i FactoryVSTSConfigurationArgs) ToFactoryVSTSConfigurationPtrOutputWithContext(ctx context.Context) FactoryVSTSConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryVSTSConfigurationOutput).ToFactoryVSTSConfigurationPtrOutputWithContext(ctx)
}

// FactoryVSTSConfigurationPtrInput is an input type that accepts FactoryVSTSConfigurationArgs, FactoryVSTSConfigurationPtr and FactoryVSTSConfigurationPtrOutput values.
// You can construct a concrete instance of `FactoryVSTSConfigurationPtrInput` via:
//
//	        FactoryVSTSConfigurationArgs{...}
//
//	or:
//
//	        nil
type FactoryVSTSConfigurationPtrInput interface {
	pulumi.Input

	ToFactoryVSTSConfigurationPtrOutput() FactoryVSTSConfigurationPtrOutput
	ToFactoryVSTSConfigurationPtrOutputWithContext(context.Context) FactoryVSTSConfigurationPtrOutput
}

type factoryVSTSConfigurationPtrType FactoryVSTSConfigurationArgs

func FactoryVSTSConfigurationPtr(v *FactoryVSTSConfigurationArgs) FactoryVSTSConfigurationPtrInput {
	return (*factoryVSTSConfigurationPtrType)(v)
}

func (*factoryVSTSConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryVSTSConfiguration)(nil)).Elem()
}

func (i *factoryVSTSConfigurationPtrType) ToFactoryVSTSConfigurationPtrOutput() FactoryVSTSConfigurationPtrOutput {
	return i.ToFactoryVSTSConfigurationPtrOutputWithContext(context.Background())
}

func (i *factoryVSTSConfigurationPtrType) ToFactoryVSTSConfigurationPtrOutputWithContext(ctx context.Context) FactoryVSTSConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryVSTSConfigurationPtrOutput)
}

// Factory's VSTS repo information.
type FactoryVSTSConfigurationOutput struct{ *pulumi.OutputState }

func (FactoryVSTSConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryVSTSConfiguration)(nil)).Elem()
}

func (o FactoryVSTSConfigurationOutput) ToFactoryVSTSConfigurationOutput() FactoryVSTSConfigurationOutput {
	return o
}

func (o FactoryVSTSConfigurationOutput) ToFactoryVSTSConfigurationOutputWithContext(ctx context.Context) FactoryVSTSConfigurationOutput {
	return o
}

func (o FactoryVSTSConfigurationOutput) ToFactoryVSTSConfigurationPtrOutput() FactoryVSTSConfigurationPtrOutput {
	return o.ToFactoryVSTSConfigurationPtrOutputWithContext(context.Background())
}

func (o FactoryVSTSConfigurationOutput) ToFactoryVSTSConfigurationPtrOutputWithContext(ctx context.Context) FactoryVSTSConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FactoryVSTSConfiguration) *FactoryVSTSConfiguration {
		return &v
	}).(FactoryVSTSConfigurationPtrOutput)
}

// VSTS account name.
func (o FactoryVSTSConfigurationOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfiguration) *string { return v.AccountName }).(pulumi.StringPtrOutput)
}

// VSTS collaboration branch.
func (o FactoryVSTSConfigurationOutput) CollaborationBranch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfiguration) *string { return v.CollaborationBranch }).(pulumi.StringPtrOutput)
}

// VSTS last commit id.
func (o FactoryVSTSConfigurationOutput) LastCommitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfiguration) *string { return v.LastCommitId }).(pulumi.StringPtrOutput)
}

// VSTS project name.
func (o FactoryVSTSConfigurationOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfiguration) *string { return v.ProjectName }).(pulumi.StringPtrOutput)
}

// VSTS repository name.
func (o FactoryVSTSConfigurationOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfiguration) *string { return v.RepositoryName }).(pulumi.StringPtrOutput)
}

// VSTS root folder.
func (o FactoryVSTSConfigurationOutput) RootFolder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfiguration) *string { return v.RootFolder }).(pulumi.StringPtrOutput)
}

// VSTS tenant id.
func (o FactoryVSTSConfigurationOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfiguration) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

type FactoryVSTSConfigurationPtrOutput struct{ *pulumi.OutputState }

func (FactoryVSTSConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryVSTSConfiguration)(nil)).Elem()
}

func (o FactoryVSTSConfigurationPtrOutput) ToFactoryVSTSConfigurationPtrOutput() FactoryVSTSConfigurationPtrOutput {
	return o
}

func (o FactoryVSTSConfigurationPtrOutput) ToFactoryVSTSConfigurationPtrOutputWithContext(ctx context.Context) FactoryVSTSConfigurationPtrOutput {
	return o
}

func (o FactoryVSTSConfigurationPtrOutput) Elem() FactoryVSTSConfigurationOutput {
	return o.ApplyT(func(v *FactoryVSTSConfiguration) FactoryVSTSConfiguration {
		if v != nil {
			return *v
		}
		var ret FactoryVSTSConfiguration
		return ret
	}).(FactoryVSTSConfigurationOutput)
}

// VSTS account name.
func (o FactoryVSTSConfigurationPtrOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.AccountName
	}).(pulumi.StringPtrOutput)
}

// VSTS collaboration branch.
func (o FactoryVSTSConfigurationPtrOutput) CollaborationBranch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.CollaborationBranch
	}).(pulumi.StringPtrOutput)
}

// VSTS last commit id.
func (o FactoryVSTSConfigurationPtrOutput) LastCommitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.LastCommitId
	}).(pulumi.StringPtrOutput)
}

// VSTS project name.
func (o FactoryVSTSConfigurationPtrOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ProjectName
	}).(pulumi.StringPtrOutput)
}

// VSTS repository name.
func (o FactoryVSTSConfigurationPtrOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryName
	}).(pulumi.StringPtrOutput)
}

// VSTS root folder.
func (o FactoryVSTSConfigurationPtrOutput) RootFolder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.RootFolder
	}).(pulumi.StringPtrOutput)
}

// VSTS tenant id.
func (o FactoryVSTSConfigurationPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Factory's VSTS repo information.
type FactoryVSTSConfigurationResponse struct {
	// VSTS account name.
	AccountName *string `pulumi:"accountName"`
	// VSTS collaboration branch.
	CollaborationBranch *string `pulumi:"collaborationBranch"`
	// VSTS last commit id.
	LastCommitId *string `pulumi:"lastCommitId"`
	// VSTS project name.
	ProjectName *string `pulumi:"projectName"`
	// VSTS repository name.
	RepositoryName *string `pulumi:"repositoryName"`
	// VSTS root folder.
	RootFolder *string `pulumi:"rootFolder"`
	// VSTS tenant id.
	TenantId *string `pulumi:"tenantId"`
}

// Factory's VSTS repo information.
type FactoryVSTSConfigurationResponseOutput struct{ *pulumi.OutputState }

func (FactoryVSTSConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryVSTSConfigurationResponse)(nil)).Elem()
}

func (o FactoryVSTSConfigurationResponseOutput) ToFactoryVSTSConfigurationResponseOutput() FactoryVSTSConfigurationResponseOutput {
	return o
}

func (o FactoryVSTSConfigurationResponseOutput) ToFactoryVSTSConfigurationResponseOutputWithContext(ctx context.Context) FactoryVSTSConfigurationResponseOutput {
	return o
}

// VSTS account name.
func (o FactoryVSTSConfigurationResponseOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfigurationResponse) *string { return v.AccountName }).(pulumi.StringPtrOutput)
}

// VSTS collaboration branch.
func (o FactoryVSTSConfigurationResponseOutput) CollaborationBranch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfigurationResponse) *string { return v.CollaborationBranch }).(pulumi.StringPtrOutput)
}

// VSTS last commit id.
func (o FactoryVSTSConfigurationResponseOutput) LastCommitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfigurationResponse) *string { return v.LastCommitId }).(pulumi.StringPtrOutput)
}

// VSTS project name.
func (o FactoryVSTSConfigurationResponseOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfigurationResponse) *string { return v.ProjectName }).(pulumi.StringPtrOutput)
}

// VSTS repository name.
func (o FactoryVSTSConfigurationResponseOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfigurationResponse) *string { return v.RepositoryName }).(pulumi.StringPtrOutput)
}

// VSTS root folder.
func (o FactoryVSTSConfigurationResponseOutput) RootFolder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfigurationResponse) *string { return v.RootFolder }).(pulumi.StringPtrOutput)
}

// VSTS tenant id.
func (o FactoryVSTSConfigurationResponseOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfigurationResponse) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

type FactoryVSTSConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (FactoryVSTSConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryVSTSConfigurationResponse)(nil)).Elem()
}

func (o FactoryVSTSConfigurationResponsePtrOutput) ToFactoryVSTSConfigurationResponsePtrOutput() FactoryVSTSConfigurationResponsePtrOutput {
	return o
}

func (o FactoryVSTSConfigurationResponsePtrOutput) ToFactoryVSTSConfigurationResponsePtrOutputWithContext(ctx context.Context) FactoryVSTSConfigurationResponsePtrOutput {
	return o
}

func (o FactoryVSTSConfigurationResponsePtrOutput) Elem() FactoryVSTSConfigurationResponseOutput {
	return o.ApplyT(func(v *FactoryVSTSConfigurationResponse) FactoryVSTSConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret FactoryVSTSConfigurationResponse
		return ret
	}).(FactoryVSTSConfigurationResponseOutput)
}

// VSTS account name.
func (o FactoryVSTSConfigurationResponsePtrOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.AccountName
	}).(pulumi.StringPtrOutput)
}

// VSTS collaboration branch.
func (o FactoryVSTSConfigurationResponsePtrOutput) CollaborationBranch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.CollaborationBranch
	}).(pulumi.StringPtrOutput)
}

// VSTS last commit id.
func (o FactoryVSTSConfigurationResponsePtrOutput) LastCommitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.LastCommitId
	}).(pulumi.StringPtrOutput)
}

// VSTS project name.
func (o FactoryVSTSConfigurationResponsePtrOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ProjectName
	}).(pulumi.StringPtrOutput)
}

// VSTS repository name.
func (o FactoryVSTSConfigurationResponsePtrOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.RepositoryName
	}).(pulumi.StringPtrOutput)
}

// VSTS root folder.
func (o FactoryVSTSConfigurationResponsePtrOutput) RootFolder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.RootFolder
	}).(pulumi.StringPtrOutput)
}

// VSTS tenant id.
func (o FactoryVSTSConfigurationResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The linked integration runtime information.
type LinkedIntegrationRuntimeResponse struct {
	// The creating time of the linked integration runtime.
	CreateTime string `pulumi:"createTime"`
	// The location of the data factory for which the linked integration runtime belong to.
	DataFactoryLocation string `pulumi:"dataFactoryLocation"`
	// The name of the data factory for which the linked integration runtime belong to.
	DataFactoryName string `pulumi:"dataFactoryName"`
	// The name of the linked integration runtime.
	Name string `pulumi:"name"`
	// The subscription ID for which the linked integration runtime belong to.
	SubscriptionId string `pulumi:"subscriptionId"`
}

// Error definition for managed integration runtime.
type ManagedIntegrationRuntimeErrorResponse struct {
	// Error code.
	Code string `pulumi:"code"`
	// Error message.
	Message string `pulumi:"message"`
	// Managed integration runtime error parameters.
	Parameters []string `pulumi:"parameters"`
	// The time when the error occurred.
	Time string `pulumi:"time"`
}

// Properties of integration runtime node.
type ManagedIntegrationRuntimeNodeResponse struct {
	// The errors that occurred on this integration runtime node.
	Errors []ManagedIntegrationRuntimeErrorResponse `pulumi:"errors"`
	// The managed integration runtime node id.
	NodeId string `pulumi:"nodeId"`
	// The managed integration runtime node status.
	Status string `pulumi:"status"`
}

// Properties of managed integration runtime operation result.
type ManagedIntegrationRuntimeOperationResultResponse struct {
	// The activity id for the operation request.
	ActivityId string `pulumi:"activityId"`
	// The error code.
	ErrorCode string `pulumi:"errorCode"`
	// Managed integration runtime error parameters.
	Parameters []string `pulumi:"parameters"`
	// The operation result.
	Result string `pulumi:"result"`
	// The start time of the operation.
	StartTime string `pulumi:"startTime"`
	// The operation type. Could be start or stop.
	Type string `pulumi:"type"`
}

// Managed integration runtime status.
type ManagedIntegrationRuntimeStatusResponse struct {
	// The time at which the integration runtime was created, in ISO8601 format.
	CreateTime string `pulumi:"createTime"`
	// The data factory name which the integration runtime belong to.
	DataFactoryName string `pulumi:"dataFactoryName"`
	// The last operation result that occurred on this integration runtime.
	LastOperation ManagedIntegrationRuntimeOperationResultResponse `pulumi:"lastOperation"`
	// The list of nodes for managed integration runtime.
	Nodes []ManagedIntegrationRuntimeNodeResponse `pulumi:"nodes"`
	// The errors that occurred on this integration runtime.
	OtherErrors []ManagedIntegrationRuntimeErrorResponse `pulumi:"otherErrors"`
	// The state of integration runtime.
	State string `pulumi:"state"`
	// The type of integration runtime.
	// Expected value is 'Managed'.
	Type *string `pulumi:"type"`
}

// Properties of Self-hosted integration runtime node.
type SelfHostedIntegrationRuntimeNodeResponse struct {
	// The integration runtime capabilities dictionary
	Capabilities map[string]string `pulumi:"capabilities"`
	// Maximum concurrent jobs on the integration runtime node.
	ConcurrentJobsLimit int `pulumi:"concurrentJobsLimit"`
	// The time at which the integration runtime will expire in ISO8601 format.
	ExpiryTime string `pulumi:"expiryTime"`
	// URI for the host machine of the integration runtime.
	HostServiceUri string `pulumi:"hostServiceUri"`
	// Indicates whether this node is the active dispatcher for integration runtime requests.
	IsActiveDispatcher bool `pulumi:"isActiveDispatcher"`
	// The most recent time at which the integration runtime was connected in ISO8601 format.
	LastConnectTime string `pulumi:"lastConnectTime"`
	// The last time for the integration runtime node update end.
	LastEndUpdateTime string `pulumi:"lastEndUpdateTime"`
	// The time the node last started up.
	LastStartTime string `pulumi:"lastStartTime"`
	// The last time for the integration runtime node update start.
	LastStartUpdateTime string `pulumi:"lastStartUpdateTime"`
	// The integration runtime node last stop time.
	LastStopTime string `pulumi:"lastStopTime"`
	// The result of the last integration runtime node update.
	LastUpdateResult string `pulumi:"lastUpdateResult"`
	// Machine name of the integration runtime node.
	MachineName string `pulumi:"machineName"`
	// The maximum concurrent jobs in this integration runtime.
	MaxConcurrentJobs int `pulumi:"maxConcurrentJobs"`
	// Name of the integration runtime node.
	NodeName string `pulumi:"nodeName"`
	// The time at which the integration runtime node was registered in ISO8601 format.
	RegisterTime string `pulumi:"registerTime"`
	// Status of the integration runtime node.
	Status string `pulumi:"status"`
	// Version of the integration runtime node.
	Version string `pulumi:"version"`
	// Status of the integration runtime node version.
	VersionStatus string `pulumi:"versionStatus"`
}

// Self-hosted integration runtime status.
type SelfHostedIntegrationRuntimeStatusResponse struct {
	// Whether Self-hosted integration runtime auto update has been turned on.
	AutoUpdate string `pulumi:"autoUpdate"`
	// Object with additional information about integration runtime capabilities.
	Capabilities map[string]string `pulumi:"capabilities"`
	// The time at which the integration runtime was created, in ISO8601 format.
	CreateTime string `pulumi:"createTime"`
	// The data factory name which the integration runtime belong to.
	DataFactoryName string `pulumi:"dataFactoryName"`
	// It is used to set the encryption mode for node-node communication channel (when more than 2 self-hosted integration runtime nodes exist).
	InternalChannelEncryption string `pulumi:"internalChannelEncryption"`
	// The list of linked integration runtimes that are created to share with this integration runtime.
	Links []LinkedIntegrationRuntimeResponse `pulumi:"links"`
	// The local time zone offset in hours.
	LocalTimeZoneOffset string `pulumi:"localTimeZoneOffset"`
	// The list of nodes for this integration runtime.
	Nodes []SelfHostedIntegrationRuntimeNodeResponse `pulumi:"nodes"`
	// The date at which the integration runtime will be scheduled to update, in ISO8601 format.
	ScheduledUpdateDate string `pulumi:"scheduledUpdateDate"`
	// The URLs for the services used in integration runtime backend service.
	ServiceUrls []string `pulumi:"serviceUrls"`
	// The state of integration runtime.
	State string `pulumi:"state"`
	// The task queue id of the integration runtime.
	TaskQueueId string `pulumi:"taskQueueId"`
	// The type of integration runtime.
	// Expected value is 'SelfHosted'.
	Type *string `pulumi:"type"`
	// The time in the date scheduled by service to update the integration runtime, e.g., PT03H is 3 hours
	UpdateDelayOffset string `pulumi:"updateDelayOffset"`
	// Version of the integration runtime.
	Version string `pulumi:"version"`
	// Status of the integration runtime version.
	VersionStatus string `pulumi:"versionStatus"`
}

func init() {
	pulumi.RegisterOutputType(FactoryIdentityOutput{})
	pulumi.RegisterOutputType(FactoryIdentityPtrOutput{})
	pulumi.RegisterOutputType(FactoryIdentityResponseOutput{})
	pulumi.RegisterOutputType(FactoryIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(FactoryVSTSConfigurationOutput{})
	pulumi.RegisterOutputType(FactoryVSTSConfigurationPtrOutput{})
	pulumi.RegisterOutputType(FactoryVSTSConfigurationResponseOutput{})
	pulumi.RegisterOutputType(FactoryVSTSConfigurationResponsePtrOutput{})
}
