// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20180601

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// HBase server dataset.
type HBaseObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'HBaseObject'.
	Type string `pulumi:"type"`
}

// HBaseObjectDatasetInput is an input type that accepts HBaseObjectDatasetArgs and HBaseObjectDatasetOutput values.
// You can construct a concrete instance of `HBaseObjectDatasetInput` via:
//
//	HBaseObjectDatasetArgs{...}
type HBaseObjectDatasetInput interface {
	pulumi.Input

	ToHBaseObjectDatasetOutput() HBaseObjectDatasetOutput
	ToHBaseObjectDatasetOutputWithContext(context.Context) HBaseObjectDatasetOutput
}

// HBase server dataset.
type HBaseObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'HBaseObject'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (HBaseObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HBaseObjectDataset)(nil)).Elem()
}

func (i HBaseObjectDatasetArgs) ToHBaseObjectDatasetOutput() HBaseObjectDatasetOutput {
	return i.ToHBaseObjectDatasetOutputWithContext(context.Background())
}

func (i HBaseObjectDatasetArgs) ToHBaseObjectDatasetOutputWithContext(ctx context.Context) HBaseObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HBaseObjectDatasetOutput)
}

// HBase server dataset.
type HBaseObjectDatasetOutput struct{ *pulumi.OutputState }

func (HBaseObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HBaseObjectDataset)(nil)).Elem()
}

func (o HBaseObjectDatasetOutput) ToHBaseObjectDatasetOutput() HBaseObjectDatasetOutput {
	return o
}

func (o HBaseObjectDatasetOutput) ToHBaseObjectDatasetOutputWithContext(ctx context.Context) HBaseObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o HBaseObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v HBaseObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o HBaseObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HBaseObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o HBaseObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v HBaseObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o HBaseObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v HBaseObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o HBaseObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v HBaseObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o HBaseObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o HBaseObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o HBaseObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'HBaseObject'.
func (o HBaseObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HBaseObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// HBase server dataset.
type HBaseObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'HBaseObject'.
	Type string `pulumi:"type"`
}

// HBase server dataset.
type HBaseObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (HBaseObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HBaseObjectDatasetResponse)(nil)).Elem()
}

func (o HBaseObjectDatasetResponseOutput) ToHBaseObjectDatasetResponseOutput() HBaseObjectDatasetResponseOutput {
	return o
}

func (o HBaseObjectDatasetResponseOutput) ToHBaseObjectDatasetResponseOutputWithContext(ctx context.Context) HBaseObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o HBaseObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v HBaseObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o HBaseObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HBaseObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o HBaseObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v HBaseObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o HBaseObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v HBaseObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o HBaseObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v HBaseObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o HBaseObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o HBaseObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o HBaseObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'HBaseObject'.
func (o HBaseObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HBaseObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity HBase server source.
type HBaseSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'HBaseSource'.
	Type string `pulumi:"type"`
}

// HBaseSourceInput is an input type that accepts HBaseSourceArgs and HBaseSourceOutput values.
// You can construct a concrete instance of `HBaseSourceInput` via:
//
//	HBaseSourceArgs{...}
type HBaseSourceInput interface {
	pulumi.Input

	ToHBaseSourceOutput() HBaseSourceOutput
	ToHBaseSourceOutputWithContext(context.Context) HBaseSourceOutput
}

// A copy activity HBase server source.
type HBaseSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'HBaseSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (HBaseSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HBaseSource)(nil)).Elem()
}

func (i HBaseSourceArgs) ToHBaseSourceOutput() HBaseSourceOutput {
	return i.ToHBaseSourceOutputWithContext(context.Background())
}

func (i HBaseSourceArgs) ToHBaseSourceOutputWithContext(ctx context.Context) HBaseSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HBaseSourceOutput)
}

// A copy activity HBase server source.
type HBaseSourceOutput struct{ *pulumi.OutputState }

func (HBaseSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HBaseSource)(nil)).Elem()
}

func (o HBaseSourceOutput) ToHBaseSourceOutput() HBaseSourceOutput {
	return o
}

func (o HBaseSourceOutput) ToHBaseSourceOutputWithContext(ctx context.Context) HBaseSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o HBaseSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o HBaseSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o HBaseSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o HBaseSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o HBaseSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o HBaseSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o HBaseSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'HBaseSource'.
func (o HBaseSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HBaseSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity HBase server source.
type HBaseSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'HBaseSource'.
	Type string `pulumi:"type"`
}

// A copy activity HBase server source.
type HBaseSourceResponseOutput struct{ *pulumi.OutputState }

func (HBaseSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HBaseSourceResponse)(nil)).Elem()
}

func (o HBaseSourceResponseOutput) ToHBaseSourceResponseOutput() HBaseSourceResponseOutput {
	return o
}

func (o HBaseSourceResponseOutput) ToHBaseSourceResponseOutputWithContext(ctx context.Context) HBaseSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o HBaseSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o HBaseSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o HBaseSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o HBaseSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o HBaseSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o HBaseSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o HBaseSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'HBaseSource'.
func (o HBaseSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HBaseSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// HDInsight Hive activity type.
type HDInsightHiveActivity struct {
	// User specified arguments to HDInsightActivity.
	Arguments []interface{} `pulumi:"arguments"`
	// Allows user to specify defines for Hive job request.
	Defines map[string]interface{} `pulumi:"defines"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Debug info option.
	GetDebugInfo *string `pulumi:"getDebugInfo"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Query timeout value (in minutes).  Effective when the HDInsight cluster is with ESP (Enterprise Security Package)
	QueryTimeout *int `pulumi:"queryTimeout"`
	// Script linked service reference.
	ScriptLinkedService *LinkedServiceReference `pulumi:"scriptLinkedService"`
	// Script path. Type: string (or Expression with resultType string).
	ScriptPath interface{} `pulumi:"scriptPath"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Storage linked service references.
	StorageLinkedServices []LinkedServiceReference `pulumi:"storageLinkedServices"`
	// Type of activity.
	// Expected value is 'HDInsightHive'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
	// User specified arguments under hivevar namespace.
	Variables map[string]interface{} `pulumi:"variables"`
}

// HDInsightHiveActivityInput is an input type that accepts HDInsightHiveActivityArgs and HDInsightHiveActivityOutput values.
// You can construct a concrete instance of `HDInsightHiveActivityInput` via:
//
//	HDInsightHiveActivityArgs{...}
type HDInsightHiveActivityInput interface {
	pulumi.Input

	ToHDInsightHiveActivityOutput() HDInsightHiveActivityOutput
	ToHDInsightHiveActivityOutputWithContext(context.Context) HDInsightHiveActivityOutput
}

// HDInsight Hive activity type.
type HDInsightHiveActivityArgs struct {
	// User specified arguments to HDInsightActivity.
	Arguments pulumi.ArrayInput `pulumi:"arguments"`
	// Allows user to specify defines for Hive job request.
	Defines pulumi.MapInput `pulumi:"defines"`
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Debug info option.
	GetDebugInfo pulumi.StringPtrInput `pulumi:"getDebugInfo"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferencePtrInput `pulumi:"linkedServiceName"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs pulumi.StringPtrInput `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy ActivityPolicyPtrInput `pulumi:"policy"`
	// Query timeout value (in minutes).  Effective when the HDInsight cluster is with ESP (Enterprise Security Package)
	QueryTimeout pulumi.IntPtrInput `pulumi:"queryTimeout"`
	// Script linked service reference.
	ScriptLinkedService LinkedServiceReferencePtrInput `pulumi:"scriptLinkedService"`
	// Script path. Type: string (or Expression with resultType string).
	ScriptPath pulumi.Input `pulumi:"scriptPath"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Storage linked service references.
	StorageLinkedServices LinkedServiceReferenceArrayInput `pulumi:"storageLinkedServices"`
	// Type of activity.
	// Expected value is 'HDInsightHive'.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
	// User specified arguments under hivevar namespace.
	Variables pulumi.MapInput `pulumi:"variables"`
}

func (HDInsightHiveActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsightHiveActivity)(nil)).Elem()
}

func (i HDInsightHiveActivityArgs) ToHDInsightHiveActivityOutput() HDInsightHiveActivityOutput {
	return i.ToHDInsightHiveActivityOutputWithContext(context.Background())
}

func (i HDInsightHiveActivityArgs) ToHDInsightHiveActivityOutputWithContext(ctx context.Context) HDInsightHiveActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HDInsightHiveActivityOutput)
}

// HDInsight Hive activity type.
type HDInsightHiveActivityOutput struct{ *pulumi.OutputState }

func (HDInsightHiveActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsightHiveActivity)(nil)).Elem()
}

func (o HDInsightHiveActivityOutput) ToHDInsightHiveActivityOutput() HDInsightHiveActivityOutput {
	return o
}

func (o HDInsightHiveActivityOutput) ToHDInsightHiveActivityOutputWithContext(ctx context.Context) HDInsightHiveActivityOutput {
	return o
}

// User specified arguments to HDInsightActivity.
func (o HDInsightHiveActivityOutput) Arguments() pulumi.ArrayOutput {
	return o.ApplyT(func(v HDInsightHiveActivity) []interface{} { return v.Arguments }).(pulumi.ArrayOutput)
}

// Allows user to specify defines for Hive job request.
func (o HDInsightHiveActivityOutput) Defines() pulumi.MapOutput {
	return o.ApplyT(func(v HDInsightHiveActivity) map[string]interface{} { return v.Defines }).(pulumi.MapOutput)
}

// Activity depends on condition.
func (o HDInsightHiveActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v HDInsightHiveActivity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o HDInsightHiveActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightHiveActivity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Debug info option.
func (o HDInsightHiveActivityOutput) GetDebugInfo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightHiveActivity) *string { return v.GetDebugInfo }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o HDInsightHiveActivityOutput) LinkedServiceName() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v HDInsightHiveActivity) *LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferencePtrOutput)
}

// Activity name.
func (o HDInsightHiveActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v HDInsightHiveActivity) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o HDInsightHiveActivityOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightHiveActivity) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o HDInsightHiveActivityOutput) Policy() ActivityPolicyPtrOutput {
	return o.ApplyT(func(v HDInsightHiveActivity) *ActivityPolicy { return v.Policy }).(ActivityPolicyPtrOutput)
}

// Query timeout value (in minutes).  Effective when the HDInsight cluster is with ESP (Enterprise Security Package)
func (o HDInsightHiveActivityOutput) QueryTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HDInsightHiveActivity) *int { return v.QueryTimeout }).(pulumi.IntPtrOutput)
}

// Script linked service reference.
func (o HDInsightHiveActivityOutput) ScriptLinkedService() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v HDInsightHiveActivity) *LinkedServiceReference { return v.ScriptLinkedService }).(LinkedServiceReferencePtrOutput)
}

// Script path. Type: string (or Expression with resultType string).
func (o HDInsightHiveActivityOutput) ScriptPath() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightHiveActivity) interface{} { return v.ScriptPath }).(pulumi.AnyOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o HDInsightHiveActivityOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightHiveActivity) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Storage linked service references.
func (o HDInsightHiveActivityOutput) StorageLinkedServices() LinkedServiceReferenceArrayOutput {
	return o.ApplyT(func(v HDInsightHiveActivity) []LinkedServiceReference { return v.StorageLinkedServices }).(LinkedServiceReferenceArrayOutput)
}

// Type of activity.
// Expected value is 'HDInsightHive'.
func (o HDInsightHiveActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HDInsightHiveActivity) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o HDInsightHiveActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v HDInsightHiveActivity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

// User specified arguments under hivevar namespace.
func (o HDInsightHiveActivityOutput) Variables() pulumi.MapOutput {
	return o.ApplyT(func(v HDInsightHiveActivity) map[string]interface{} { return v.Variables }).(pulumi.MapOutput)
}

// HDInsight Hive activity type.
type HDInsightHiveActivityResponse struct {
	// User specified arguments to HDInsightActivity.
	Arguments []interface{} `pulumi:"arguments"`
	// Allows user to specify defines for Hive job request.
	Defines map[string]interface{} `pulumi:"defines"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Debug info option.
	GetDebugInfo *string `pulumi:"getDebugInfo"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Query timeout value (in minutes).  Effective when the HDInsight cluster is with ESP (Enterprise Security Package)
	QueryTimeout *int `pulumi:"queryTimeout"`
	// Script linked service reference.
	ScriptLinkedService *LinkedServiceReferenceResponse `pulumi:"scriptLinkedService"`
	// Script path. Type: string (or Expression with resultType string).
	ScriptPath interface{} `pulumi:"scriptPath"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Storage linked service references.
	StorageLinkedServices []LinkedServiceReferenceResponse `pulumi:"storageLinkedServices"`
	// Type of activity.
	// Expected value is 'HDInsightHive'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
	// User specified arguments under hivevar namespace.
	Variables map[string]interface{} `pulumi:"variables"`
}

// HDInsight Hive activity type.
type HDInsightHiveActivityResponseOutput struct{ *pulumi.OutputState }

func (HDInsightHiveActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsightHiveActivityResponse)(nil)).Elem()
}

func (o HDInsightHiveActivityResponseOutput) ToHDInsightHiveActivityResponseOutput() HDInsightHiveActivityResponseOutput {
	return o
}

func (o HDInsightHiveActivityResponseOutput) ToHDInsightHiveActivityResponseOutputWithContext(ctx context.Context) HDInsightHiveActivityResponseOutput {
	return o
}

// User specified arguments to HDInsightActivity.
func (o HDInsightHiveActivityResponseOutput) Arguments() pulumi.ArrayOutput {
	return o.ApplyT(func(v HDInsightHiveActivityResponse) []interface{} { return v.Arguments }).(pulumi.ArrayOutput)
}

// Allows user to specify defines for Hive job request.
func (o HDInsightHiveActivityResponseOutput) Defines() pulumi.MapOutput {
	return o.ApplyT(func(v HDInsightHiveActivityResponse) map[string]interface{} { return v.Defines }).(pulumi.MapOutput)
}

// Activity depends on condition.
func (o HDInsightHiveActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v HDInsightHiveActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o HDInsightHiveActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightHiveActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Debug info option.
func (o HDInsightHiveActivityResponseOutput) GetDebugInfo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightHiveActivityResponse) *string { return v.GetDebugInfo }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o HDInsightHiveActivityResponseOutput) LinkedServiceName() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v HDInsightHiveActivityResponse) *LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponsePtrOutput)
}

// Activity name.
func (o HDInsightHiveActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v HDInsightHiveActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o HDInsightHiveActivityResponseOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightHiveActivityResponse) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o HDInsightHiveActivityResponseOutput) Policy() ActivityPolicyResponsePtrOutput {
	return o.ApplyT(func(v HDInsightHiveActivityResponse) *ActivityPolicyResponse { return v.Policy }).(ActivityPolicyResponsePtrOutput)
}

// Query timeout value (in minutes).  Effective when the HDInsight cluster is with ESP (Enterprise Security Package)
func (o HDInsightHiveActivityResponseOutput) QueryTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HDInsightHiveActivityResponse) *int { return v.QueryTimeout }).(pulumi.IntPtrOutput)
}

// Script linked service reference.
func (o HDInsightHiveActivityResponseOutput) ScriptLinkedService() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v HDInsightHiveActivityResponse) *LinkedServiceReferenceResponse { return v.ScriptLinkedService }).(LinkedServiceReferenceResponsePtrOutput)
}

// Script path. Type: string (or Expression with resultType string).
func (o HDInsightHiveActivityResponseOutput) ScriptPath() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightHiveActivityResponse) interface{} { return v.ScriptPath }).(pulumi.AnyOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o HDInsightHiveActivityResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightHiveActivityResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Storage linked service references.
func (o HDInsightHiveActivityResponseOutput) StorageLinkedServices() LinkedServiceReferenceResponseArrayOutput {
	return o.ApplyT(func(v HDInsightHiveActivityResponse) []LinkedServiceReferenceResponse { return v.StorageLinkedServices }).(LinkedServiceReferenceResponseArrayOutput)
}

// Type of activity.
// Expected value is 'HDInsightHive'.
func (o HDInsightHiveActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HDInsightHiveActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o HDInsightHiveActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v HDInsightHiveActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

// User specified arguments under hivevar namespace.
func (o HDInsightHiveActivityResponseOutput) Variables() pulumi.MapOutput {
	return o.ApplyT(func(v HDInsightHiveActivityResponse) map[string]interface{} { return v.Variables }).(pulumi.MapOutput)
}

// HDInsight linked service.
type HDInsightLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// HDInsight cluster URI. Type: string (or Expression with resultType string).
	ClusterUri interface{} `pulumi:"clusterUri"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Specify the FileSystem if the main storage for the HDInsight is ADLS Gen2. Type: string (or Expression with resultType string).
	FileSystem interface{} `pulumi:"fileSystem"`
	// A reference to the Azure SQL linked service that points to the HCatalog database.
	HcatalogLinkedServiceName *LinkedServiceReference `pulumi:"hcatalogLinkedServiceName"`
	// Specify if the HDInsight is created with ESP (Enterprise Security Package). Type: Boolean.
	IsEspEnabled interface{} `pulumi:"isEspEnabled"`
	// The Azure Storage linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// HDInsight cluster password.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'HDInsight'.
	Type string `pulumi:"type"`
	// HDInsight cluster user name. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// HDInsightLinkedServiceInput is an input type that accepts HDInsightLinkedServiceArgs and HDInsightLinkedServiceOutput values.
// You can construct a concrete instance of `HDInsightLinkedServiceInput` via:
//
//	HDInsightLinkedServiceArgs{...}
type HDInsightLinkedServiceInput interface {
	pulumi.Input

	ToHDInsightLinkedServiceOutput() HDInsightLinkedServiceOutput
	ToHDInsightLinkedServiceOutputWithContext(context.Context) HDInsightLinkedServiceOutput
}

// HDInsight linked service.
type HDInsightLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// HDInsight cluster URI. Type: string (or Expression with resultType string).
	ClusterUri pulumi.Input `pulumi:"clusterUri"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Specify the FileSystem if the main storage for the HDInsight is ADLS Gen2. Type: string (or Expression with resultType string).
	FileSystem pulumi.Input `pulumi:"fileSystem"`
	// A reference to the Azure SQL linked service that points to the HCatalog database.
	HcatalogLinkedServiceName LinkedServiceReferencePtrInput `pulumi:"hcatalogLinkedServiceName"`
	// Specify if the HDInsight is created with ESP (Enterprise Security Package). Type: Boolean.
	IsEspEnabled pulumi.Input `pulumi:"isEspEnabled"`
	// The Azure Storage linked service reference.
	LinkedServiceName LinkedServiceReferencePtrInput `pulumi:"linkedServiceName"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// HDInsight cluster password.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'HDInsight'.
	Type pulumi.StringInput `pulumi:"type"`
	// HDInsight cluster user name. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (HDInsightLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsightLinkedService)(nil)).Elem()
}

func (i HDInsightLinkedServiceArgs) ToHDInsightLinkedServiceOutput() HDInsightLinkedServiceOutput {
	return i.ToHDInsightLinkedServiceOutputWithContext(context.Background())
}

func (i HDInsightLinkedServiceArgs) ToHDInsightLinkedServiceOutputWithContext(ctx context.Context) HDInsightLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HDInsightLinkedServiceOutput)
}

// HDInsight linked service.
type HDInsightLinkedServiceOutput struct{ *pulumi.OutputState }

func (HDInsightLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsightLinkedService)(nil)).Elem()
}

func (o HDInsightLinkedServiceOutput) ToHDInsightLinkedServiceOutput() HDInsightLinkedServiceOutput {
	return o
}

func (o HDInsightLinkedServiceOutput) ToHDInsightLinkedServiceOutputWithContext(ctx context.Context) HDInsightLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o HDInsightLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v HDInsightLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// HDInsight cluster URI. Type: string (or Expression with resultType string).
func (o HDInsightLinkedServiceOutput) ClusterUri() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightLinkedService) interface{} { return v.ClusterUri }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o HDInsightLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v HDInsightLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o HDInsightLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o HDInsightLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Specify the FileSystem if the main storage for the HDInsight is ADLS Gen2. Type: string (or Expression with resultType string).
func (o HDInsightLinkedServiceOutput) FileSystem() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightLinkedService) interface{} { return v.FileSystem }).(pulumi.AnyOutput)
}

// A reference to the Azure SQL linked service that points to the HCatalog database.
func (o HDInsightLinkedServiceOutput) HcatalogLinkedServiceName() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v HDInsightLinkedService) *LinkedServiceReference { return v.HcatalogLinkedServiceName }).(LinkedServiceReferencePtrOutput)
}

// Specify if the HDInsight is created with ESP (Enterprise Security Package). Type: Boolean.
func (o HDInsightLinkedServiceOutput) IsEspEnabled() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightLinkedService) interface{} { return v.IsEspEnabled }).(pulumi.AnyOutput)
}

// The Azure Storage linked service reference.
func (o HDInsightLinkedServiceOutput) LinkedServiceName() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v HDInsightLinkedService) *LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferencePtrOutput)
}

// Parameters for linked service.
func (o HDInsightLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v HDInsightLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// HDInsight cluster password.
func (o HDInsightLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'HDInsight'.
func (o HDInsightLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HDInsightLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// HDInsight cluster user name. Type: string (or Expression with resultType string).
func (o HDInsightLinkedServiceOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightLinkedService) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// HDInsight linked service.
type HDInsightLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// HDInsight cluster URI. Type: string (or Expression with resultType string).
	ClusterUri interface{} `pulumi:"clusterUri"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Specify the FileSystem if the main storage for the HDInsight is ADLS Gen2. Type: string (or Expression with resultType string).
	FileSystem interface{} `pulumi:"fileSystem"`
	// A reference to the Azure SQL linked service that points to the HCatalog database.
	HcatalogLinkedServiceName *LinkedServiceReferenceResponse `pulumi:"hcatalogLinkedServiceName"`
	// Specify if the HDInsight is created with ESP (Enterprise Security Package). Type: Boolean.
	IsEspEnabled interface{} `pulumi:"isEspEnabled"`
	// The Azure Storage linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// HDInsight cluster password.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'HDInsight'.
	Type string `pulumi:"type"`
	// HDInsight cluster user name. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// HDInsight linked service.
type HDInsightLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (HDInsightLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsightLinkedServiceResponse)(nil)).Elem()
}

func (o HDInsightLinkedServiceResponseOutput) ToHDInsightLinkedServiceResponseOutput() HDInsightLinkedServiceResponseOutput {
	return o
}

func (o HDInsightLinkedServiceResponseOutput) ToHDInsightLinkedServiceResponseOutputWithContext(ctx context.Context) HDInsightLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o HDInsightLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v HDInsightLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// HDInsight cluster URI. Type: string (or Expression with resultType string).
func (o HDInsightLinkedServiceResponseOutput) ClusterUri() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightLinkedServiceResponse) interface{} { return v.ClusterUri }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o HDInsightLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v HDInsightLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o HDInsightLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o HDInsightLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Specify the FileSystem if the main storage for the HDInsight is ADLS Gen2. Type: string (or Expression with resultType string).
func (o HDInsightLinkedServiceResponseOutput) FileSystem() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightLinkedServiceResponse) interface{} { return v.FileSystem }).(pulumi.AnyOutput)
}

// A reference to the Azure SQL linked service that points to the HCatalog database.
func (o HDInsightLinkedServiceResponseOutput) HcatalogLinkedServiceName() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v HDInsightLinkedServiceResponse) *LinkedServiceReferenceResponse {
		return v.HcatalogLinkedServiceName
	}).(LinkedServiceReferenceResponsePtrOutput)
}

// Specify if the HDInsight is created with ESP (Enterprise Security Package). Type: Boolean.
func (o HDInsightLinkedServiceResponseOutput) IsEspEnabled() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightLinkedServiceResponse) interface{} { return v.IsEspEnabled }).(pulumi.AnyOutput)
}

// The Azure Storage linked service reference.
func (o HDInsightLinkedServiceResponseOutput) LinkedServiceName() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v HDInsightLinkedServiceResponse) *LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponsePtrOutput)
}

// Parameters for linked service.
func (o HDInsightLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v HDInsightLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// HDInsight cluster password.
func (o HDInsightLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'HDInsight'.
func (o HDInsightLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HDInsightLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// HDInsight cluster user name. Type: string (or Expression with resultType string).
func (o HDInsightLinkedServiceResponseOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightLinkedServiceResponse) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// HDInsight MapReduce activity type.
type HDInsightMapReduceActivity struct {
	// User specified arguments to HDInsightActivity.
	Arguments []interface{} `pulumi:"arguments"`
	// Class name. Type: string (or Expression with resultType string).
	ClassName interface{} `pulumi:"className"`
	// Allows user to specify defines for the MapReduce job request.
	Defines map[string]interface{} `pulumi:"defines"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Debug info option.
	GetDebugInfo *string `pulumi:"getDebugInfo"`
	// Jar path. Type: string (or Expression with resultType string).
	JarFilePath interface{} `pulumi:"jarFilePath"`
	// Jar libs.
	JarLibs []interface{} `pulumi:"jarLibs"`
	// Jar linked service reference.
	JarLinkedService *LinkedServiceReference `pulumi:"jarLinkedService"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Storage linked service references.
	StorageLinkedServices []LinkedServiceReference `pulumi:"storageLinkedServices"`
	// Type of activity.
	// Expected value is 'HDInsightMapReduce'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// HDInsightMapReduceActivityInput is an input type that accepts HDInsightMapReduceActivityArgs and HDInsightMapReduceActivityOutput values.
// You can construct a concrete instance of `HDInsightMapReduceActivityInput` via:
//
//	HDInsightMapReduceActivityArgs{...}
type HDInsightMapReduceActivityInput interface {
	pulumi.Input

	ToHDInsightMapReduceActivityOutput() HDInsightMapReduceActivityOutput
	ToHDInsightMapReduceActivityOutputWithContext(context.Context) HDInsightMapReduceActivityOutput
}

// HDInsight MapReduce activity type.
type HDInsightMapReduceActivityArgs struct {
	// User specified arguments to HDInsightActivity.
	Arguments pulumi.ArrayInput `pulumi:"arguments"`
	// Class name. Type: string (or Expression with resultType string).
	ClassName pulumi.Input `pulumi:"className"`
	// Allows user to specify defines for the MapReduce job request.
	Defines pulumi.MapInput `pulumi:"defines"`
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Debug info option.
	GetDebugInfo pulumi.StringPtrInput `pulumi:"getDebugInfo"`
	// Jar path. Type: string (or Expression with resultType string).
	JarFilePath pulumi.Input `pulumi:"jarFilePath"`
	// Jar libs.
	JarLibs pulumi.ArrayInput `pulumi:"jarLibs"`
	// Jar linked service reference.
	JarLinkedService LinkedServiceReferencePtrInput `pulumi:"jarLinkedService"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferencePtrInput `pulumi:"linkedServiceName"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs pulumi.StringPtrInput `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy ActivityPolicyPtrInput `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Storage linked service references.
	StorageLinkedServices LinkedServiceReferenceArrayInput `pulumi:"storageLinkedServices"`
	// Type of activity.
	// Expected value is 'HDInsightMapReduce'.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
}

func (HDInsightMapReduceActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsightMapReduceActivity)(nil)).Elem()
}

func (i HDInsightMapReduceActivityArgs) ToHDInsightMapReduceActivityOutput() HDInsightMapReduceActivityOutput {
	return i.ToHDInsightMapReduceActivityOutputWithContext(context.Background())
}

func (i HDInsightMapReduceActivityArgs) ToHDInsightMapReduceActivityOutputWithContext(ctx context.Context) HDInsightMapReduceActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HDInsightMapReduceActivityOutput)
}

// HDInsight MapReduce activity type.
type HDInsightMapReduceActivityOutput struct{ *pulumi.OutputState }

func (HDInsightMapReduceActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsightMapReduceActivity)(nil)).Elem()
}

func (o HDInsightMapReduceActivityOutput) ToHDInsightMapReduceActivityOutput() HDInsightMapReduceActivityOutput {
	return o
}

func (o HDInsightMapReduceActivityOutput) ToHDInsightMapReduceActivityOutputWithContext(ctx context.Context) HDInsightMapReduceActivityOutput {
	return o
}

// User specified arguments to HDInsightActivity.
func (o HDInsightMapReduceActivityOutput) Arguments() pulumi.ArrayOutput {
	return o.ApplyT(func(v HDInsightMapReduceActivity) []interface{} { return v.Arguments }).(pulumi.ArrayOutput)
}

// Class name. Type: string (or Expression with resultType string).
func (o HDInsightMapReduceActivityOutput) ClassName() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightMapReduceActivity) interface{} { return v.ClassName }).(pulumi.AnyOutput)
}

// Allows user to specify defines for the MapReduce job request.
func (o HDInsightMapReduceActivityOutput) Defines() pulumi.MapOutput {
	return o.ApplyT(func(v HDInsightMapReduceActivity) map[string]interface{} { return v.Defines }).(pulumi.MapOutput)
}

// Activity depends on condition.
func (o HDInsightMapReduceActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v HDInsightMapReduceActivity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o HDInsightMapReduceActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightMapReduceActivity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Debug info option.
func (o HDInsightMapReduceActivityOutput) GetDebugInfo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightMapReduceActivity) *string { return v.GetDebugInfo }).(pulumi.StringPtrOutput)
}

// Jar path. Type: string (or Expression with resultType string).
func (o HDInsightMapReduceActivityOutput) JarFilePath() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightMapReduceActivity) interface{} { return v.JarFilePath }).(pulumi.AnyOutput)
}

// Jar libs.
func (o HDInsightMapReduceActivityOutput) JarLibs() pulumi.ArrayOutput {
	return o.ApplyT(func(v HDInsightMapReduceActivity) []interface{} { return v.JarLibs }).(pulumi.ArrayOutput)
}

// Jar linked service reference.
func (o HDInsightMapReduceActivityOutput) JarLinkedService() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v HDInsightMapReduceActivity) *LinkedServiceReference { return v.JarLinkedService }).(LinkedServiceReferencePtrOutput)
}

// Linked service reference.
func (o HDInsightMapReduceActivityOutput) LinkedServiceName() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v HDInsightMapReduceActivity) *LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferencePtrOutput)
}

// Activity name.
func (o HDInsightMapReduceActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v HDInsightMapReduceActivity) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o HDInsightMapReduceActivityOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightMapReduceActivity) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o HDInsightMapReduceActivityOutput) Policy() ActivityPolicyPtrOutput {
	return o.ApplyT(func(v HDInsightMapReduceActivity) *ActivityPolicy { return v.Policy }).(ActivityPolicyPtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o HDInsightMapReduceActivityOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightMapReduceActivity) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Storage linked service references.
func (o HDInsightMapReduceActivityOutput) StorageLinkedServices() LinkedServiceReferenceArrayOutput {
	return o.ApplyT(func(v HDInsightMapReduceActivity) []LinkedServiceReference { return v.StorageLinkedServices }).(LinkedServiceReferenceArrayOutput)
}

// Type of activity.
// Expected value is 'HDInsightMapReduce'.
func (o HDInsightMapReduceActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HDInsightMapReduceActivity) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o HDInsightMapReduceActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v HDInsightMapReduceActivity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

// HDInsight MapReduce activity type.
type HDInsightMapReduceActivityResponse struct {
	// User specified arguments to HDInsightActivity.
	Arguments []interface{} `pulumi:"arguments"`
	// Class name. Type: string (or Expression with resultType string).
	ClassName interface{} `pulumi:"className"`
	// Allows user to specify defines for the MapReduce job request.
	Defines map[string]interface{} `pulumi:"defines"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Debug info option.
	GetDebugInfo *string `pulumi:"getDebugInfo"`
	// Jar path. Type: string (or Expression with resultType string).
	JarFilePath interface{} `pulumi:"jarFilePath"`
	// Jar libs.
	JarLibs []interface{} `pulumi:"jarLibs"`
	// Jar linked service reference.
	JarLinkedService *LinkedServiceReferenceResponse `pulumi:"jarLinkedService"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Storage linked service references.
	StorageLinkedServices []LinkedServiceReferenceResponse `pulumi:"storageLinkedServices"`
	// Type of activity.
	// Expected value is 'HDInsightMapReduce'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// HDInsight MapReduce activity type.
type HDInsightMapReduceActivityResponseOutput struct{ *pulumi.OutputState }

func (HDInsightMapReduceActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsightMapReduceActivityResponse)(nil)).Elem()
}

func (o HDInsightMapReduceActivityResponseOutput) ToHDInsightMapReduceActivityResponseOutput() HDInsightMapReduceActivityResponseOutput {
	return o
}

func (o HDInsightMapReduceActivityResponseOutput) ToHDInsightMapReduceActivityResponseOutputWithContext(ctx context.Context) HDInsightMapReduceActivityResponseOutput {
	return o
}

// User specified arguments to HDInsightActivity.
func (o HDInsightMapReduceActivityResponseOutput) Arguments() pulumi.ArrayOutput {
	return o.ApplyT(func(v HDInsightMapReduceActivityResponse) []interface{} { return v.Arguments }).(pulumi.ArrayOutput)
}

// Class name. Type: string (or Expression with resultType string).
func (o HDInsightMapReduceActivityResponseOutput) ClassName() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightMapReduceActivityResponse) interface{} { return v.ClassName }).(pulumi.AnyOutput)
}

// Allows user to specify defines for the MapReduce job request.
func (o HDInsightMapReduceActivityResponseOutput) Defines() pulumi.MapOutput {
	return o.ApplyT(func(v HDInsightMapReduceActivityResponse) map[string]interface{} { return v.Defines }).(pulumi.MapOutput)
}

// Activity depends on condition.
func (o HDInsightMapReduceActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v HDInsightMapReduceActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o HDInsightMapReduceActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightMapReduceActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Debug info option.
func (o HDInsightMapReduceActivityResponseOutput) GetDebugInfo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightMapReduceActivityResponse) *string { return v.GetDebugInfo }).(pulumi.StringPtrOutput)
}

// Jar path. Type: string (or Expression with resultType string).
func (o HDInsightMapReduceActivityResponseOutput) JarFilePath() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightMapReduceActivityResponse) interface{} { return v.JarFilePath }).(pulumi.AnyOutput)
}

// Jar libs.
func (o HDInsightMapReduceActivityResponseOutput) JarLibs() pulumi.ArrayOutput {
	return o.ApplyT(func(v HDInsightMapReduceActivityResponse) []interface{} { return v.JarLibs }).(pulumi.ArrayOutput)
}

// Jar linked service reference.
func (o HDInsightMapReduceActivityResponseOutput) JarLinkedService() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v HDInsightMapReduceActivityResponse) *LinkedServiceReferenceResponse { return v.JarLinkedService }).(LinkedServiceReferenceResponsePtrOutput)
}

// Linked service reference.
func (o HDInsightMapReduceActivityResponseOutput) LinkedServiceName() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v HDInsightMapReduceActivityResponse) *LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponsePtrOutput)
}

// Activity name.
func (o HDInsightMapReduceActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v HDInsightMapReduceActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o HDInsightMapReduceActivityResponseOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightMapReduceActivityResponse) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o HDInsightMapReduceActivityResponseOutput) Policy() ActivityPolicyResponsePtrOutput {
	return o.ApplyT(func(v HDInsightMapReduceActivityResponse) *ActivityPolicyResponse { return v.Policy }).(ActivityPolicyResponsePtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o HDInsightMapReduceActivityResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightMapReduceActivityResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Storage linked service references.
func (o HDInsightMapReduceActivityResponseOutput) StorageLinkedServices() LinkedServiceReferenceResponseArrayOutput {
	return o.ApplyT(func(v HDInsightMapReduceActivityResponse) []LinkedServiceReferenceResponse {
		return v.StorageLinkedServices
	}).(LinkedServiceReferenceResponseArrayOutput)
}

// Type of activity.
// Expected value is 'HDInsightMapReduce'.
func (o HDInsightMapReduceActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HDInsightMapReduceActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o HDInsightMapReduceActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v HDInsightMapReduceActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

// HDInsight ondemand linked service.
type HDInsightOnDemandLinkedService struct {
	// Specifies additional storage accounts for the HDInsight linked service so that the Data Factory service can register them on your behalf.
	AdditionalLinkedServiceNames []LinkedServiceReference `pulumi:"additionalLinkedServiceNames"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The prefix of cluster name, postfix will be distinct with timestamp. Type: string (or Expression with resultType string).
	ClusterNamePrefix interface{} `pulumi:"clusterNamePrefix"`
	// The password to access the cluster.
	ClusterPassword interface{} `pulumi:"clusterPassword"`
	// The resource group where the cluster belongs. Type: string (or Expression with resultType string).
	ClusterResourceGroup interface{} `pulumi:"clusterResourceGroup"`
	// Number of worker/data nodes in the cluster. Suggestion value: 4. Type: int (or Expression with resultType int).
	ClusterSize interface{} `pulumi:"clusterSize"`
	// The password to SSH remotely connect cluster’s node (for Linux).
	ClusterSshPassword interface{} `pulumi:"clusterSshPassword"`
	// The username to SSH remotely connect to cluster’s node (for Linux). Type: string (or Expression with resultType string).
	ClusterSshUserName interface{} `pulumi:"clusterSshUserName"`
	// The cluster type. Type: string (or Expression with resultType string).
	ClusterType interface{} `pulumi:"clusterType"`
	// The username to access the cluster. Type: string (or Expression with resultType string).
	ClusterUserName interface{} `pulumi:"clusterUserName"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Specifies the core configuration parameters (as in core-site.xml) for the HDInsight cluster to be created.
	CoreConfiguration interface{} `pulumi:"coreConfiguration"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Specifies the size of the data node for the HDInsight cluster.
	DataNodeSize interface{} `pulumi:"dataNodeSize"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Specifies the HBase configuration parameters (hbase-site.xml) for the HDInsight cluster.
	HBaseConfiguration interface{} `pulumi:"hBaseConfiguration"`
	// The name of Azure SQL linked service that point to the HCatalog database. The on-demand HDInsight cluster is created by using the Azure SQL database as the metastore.
	HcatalogLinkedServiceName *LinkedServiceReference `pulumi:"hcatalogLinkedServiceName"`
	// Specifies the HDFS configuration parameters (hdfs-site.xml) for the HDInsight cluster.
	HdfsConfiguration interface{} `pulumi:"hdfsConfiguration"`
	// Specifies the size of the head node for the HDInsight cluster.
	HeadNodeSize interface{} `pulumi:"headNodeSize"`
	// Specifies the hive configuration parameters (hive-site.xml) for the HDInsight cluster.
	HiveConfiguration interface{} `pulumi:"hiveConfiguration"`
	// The customer’s subscription to host the cluster. Type: string (or Expression with resultType string).
	HostSubscriptionId interface{} `pulumi:"hostSubscriptionId"`
	// Azure Storage linked service to be used by the on-demand cluster for storing and processing data.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Specifies the MapReduce configuration parameters (mapred-site.xml) for the HDInsight cluster.
	MapReduceConfiguration interface{} `pulumi:"mapReduceConfiguration"`
	// Specifies the Oozie configuration parameters (oozie-site.xml) for the HDInsight cluster.
	OozieConfiguration interface{} `pulumi:"oozieConfiguration"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Custom script actions to run on HDI ondemand cluster once it's up. Please refer to https://docs.microsoft.com/en-us/azure/hdinsight/hdinsight-hadoop-customize-cluster-linux?toc=%2Fen-us%2Fazure%2Fhdinsight%2Fr-server%2FTOC.json&bc=%2Fen-us%2Fazure%2Fbread%2Ftoc.json#understanding-script-actions.
	ScriptActions []ScriptAction `pulumi:"scriptActions"`
	// The service principal id for the hostSubscriptionId. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key for the service principal id.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The version of spark if the cluster type is 'spark'. Type: string (or Expression with resultType string).
	SparkVersion interface{} `pulumi:"sparkVersion"`
	// Specifies the Storm configuration parameters (storm-site.xml) for the HDInsight cluster.
	StormConfiguration interface{} `pulumi:"stormConfiguration"`
	// The ARM resource ID for the subnet in the vNet. If virtualNetworkId was specified, then this property is required. Type: string (or Expression with resultType string).
	SubnetName interface{} `pulumi:"subnetName"`
	// The Tenant id/name to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// The allowed idle time for the on-demand HDInsight cluster. Specifies how long the on-demand HDInsight cluster stays alive after completion of an activity run if there are no other active jobs in the cluster. The minimum value is 5 mins. Type: string (or Expression with resultType string).
	TimeToLive interface{} `pulumi:"timeToLive"`
	// Type of linked service.
	// Expected value is 'HDInsightOnDemand'.
	Type string `pulumi:"type"`
	// Version of the HDInsight cluster.  Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
	// The ARM resource ID for the vNet to which the cluster should be joined after creation. Type: string (or Expression with resultType string).
	VirtualNetworkId interface{} `pulumi:"virtualNetworkId"`
	// Specifies the Yarn configuration parameters (yarn-site.xml) for the HDInsight cluster.
	YarnConfiguration interface{} `pulumi:"yarnConfiguration"`
	// Specifies the size of the Zoo Keeper node for the HDInsight cluster.
	ZookeeperNodeSize interface{} `pulumi:"zookeeperNodeSize"`
}

// HDInsightOnDemandLinkedServiceInput is an input type that accepts HDInsightOnDemandLinkedServiceArgs and HDInsightOnDemandLinkedServiceOutput values.
// You can construct a concrete instance of `HDInsightOnDemandLinkedServiceInput` via:
//
//	HDInsightOnDemandLinkedServiceArgs{...}
type HDInsightOnDemandLinkedServiceInput interface {
	pulumi.Input

	ToHDInsightOnDemandLinkedServiceOutput() HDInsightOnDemandLinkedServiceOutput
	ToHDInsightOnDemandLinkedServiceOutputWithContext(context.Context) HDInsightOnDemandLinkedServiceOutput
}

// HDInsight ondemand linked service.
type HDInsightOnDemandLinkedServiceArgs struct {
	// Specifies additional storage accounts for the HDInsight linked service so that the Data Factory service can register them on your behalf.
	AdditionalLinkedServiceNames LinkedServiceReferenceArrayInput `pulumi:"additionalLinkedServiceNames"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The prefix of cluster name, postfix will be distinct with timestamp. Type: string (or Expression with resultType string).
	ClusterNamePrefix pulumi.Input `pulumi:"clusterNamePrefix"`
	// The password to access the cluster.
	ClusterPassword pulumi.Input `pulumi:"clusterPassword"`
	// The resource group where the cluster belongs. Type: string (or Expression with resultType string).
	ClusterResourceGroup pulumi.Input `pulumi:"clusterResourceGroup"`
	// Number of worker/data nodes in the cluster. Suggestion value: 4. Type: int (or Expression with resultType int).
	ClusterSize pulumi.Input `pulumi:"clusterSize"`
	// The password to SSH remotely connect cluster’s node (for Linux).
	ClusterSshPassword pulumi.Input `pulumi:"clusterSshPassword"`
	// The username to SSH remotely connect to cluster’s node (for Linux). Type: string (or Expression with resultType string).
	ClusterSshUserName pulumi.Input `pulumi:"clusterSshUserName"`
	// The cluster type. Type: string (or Expression with resultType string).
	ClusterType pulumi.Input `pulumi:"clusterType"`
	// The username to access the cluster. Type: string (or Expression with resultType string).
	ClusterUserName pulumi.Input `pulumi:"clusterUserName"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Specifies the core configuration parameters (as in core-site.xml) for the HDInsight cluster to be created.
	CoreConfiguration pulumi.Input `pulumi:"coreConfiguration"`
	// The credential reference containing authentication information.
	Credential CredentialReferencePtrInput `pulumi:"credential"`
	// Specifies the size of the data node for the HDInsight cluster.
	DataNodeSize pulumi.Input `pulumi:"dataNodeSize"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Specifies the HBase configuration parameters (hbase-site.xml) for the HDInsight cluster.
	HBaseConfiguration pulumi.Input `pulumi:"hBaseConfiguration"`
	// The name of Azure SQL linked service that point to the HCatalog database. The on-demand HDInsight cluster is created by using the Azure SQL database as the metastore.
	HcatalogLinkedServiceName LinkedServiceReferencePtrInput `pulumi:"hcatalogLinkedServiceName"`
	// Specifies the HDFS configuration parameters (hdfs-site.xml) for the HDInsight cluster.
	HdfsConfiguration pulumi.Input `pulumi:"hdfsConfiguration"`
	// Specifies the size of the head node for the HDInsight cluster.
	HeadNodeSize pulumi.Input `pulumi:"headNodeSize"`
	// Specifies the hive configuration parameters (hive-site.xml) for the HDInsight cluster.
	HiveConfiguration pulumi.Input `pulumi:"hiveConfiguration"`
	// The customer’s subscription to host the cluster. Type: string (or Expression with resultType string).
	HostSubscriptionId pulumi.Input `pulumi:"hostSubscriptionId"`
	// Azure Storage linked service to be used by the on-demand cluster for storing and processing data.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Specifies the MapReduce configuration parameters (mapred-site.xml) for the HDInsight cluster.
	MapReduceConfiguration pulumi.Input `pulumi:"mapReduceConfiguration"`
	// Specifies the Oozie configuration parameters (oozie-site.xml) for the HDInsight cluster.
	OozieConfiguration pulumi.Input `pulumi:"oozieConfiguration"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Custom script actions to run on HDI ondemand cluster once it's up. Please refer to https://docs.microsoft.com/en-us/azure/hdinsight/hdinsight-hadoop-customize-cluster-linux?toc=%2Fen-us%2Fazure%2Fhdinsight%2Fr-server%2FTOC.json&bc=%2Fen-us%2Fazure%2Fbread%2Ftoc.json#understanding-script-actions.
	ScriptActions ScriptActionArrayInput `pulumi:"scriptActions"`
	// The service principal id for the hostSubscriptionId. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The key for the service principal id.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// The version of spark if the cluster type is 'spark'. Type: string (or Expression with resultType string).
	SparkVersion pulumi.Input `pulumi:"sparkVersion"`
	// Specifies the Storm configuration parameters (storm-site.xml) for the HDInsight cluster.
	StormConfiguration pulumi.Input `pulumi:"stormConfiguration"`
	// The ARM resource ID for the subnet in the vNet. If virtualNetworkId was specified, then this property is required. Type: string (or Expression with resultType string).
	SubnetName pulumi.Input `pulumi:"subnetName"`
	// The Tenant id/name to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant pulumi.Input `pulumi:"tenant"`
	// The allowed idle time for the on-demand HDInsight cluster. Specifies how long the on-demand HDInsight cluster stays alive after completion of an activity run if there are no other active jobs in the cluster. The minimum value is 5 mins. Type: string (or Expression with resultType string).
	TimeToLive pulumi.Input `pulumi:"timeToLive"`
	// Type of linked service.
	// Expected value is 'HDInsightOnDemand'.
	Type pulumi.StringInput `pulumi:"type"`
	// Version of the HDInsight cluster.  Type: string (or Expression with resultType string).
	Version pulumi.Input `pulumi:"version"`
	// The ARM resource ID for the vNet to which the cluster should be joined after creation. Type: string (or Expression with resultType string).
	VirtualNetworkId pulumi.Input `pulumi:"virtualNetworkId"`
	// Specifies the Yarn configuration parameters (yarn-site.xml) for the HDInsight cluster.
	YarnConfiguration pulumi.Input `pulumi:"yarnConfiguration"`
	// Specifies the size of the Zoo Keeper node for the HDInsight cluster.
	ZookeeperNodeSize pulumi.Input `pulumi:"zookeeperNodeSize"`
}

func (HDInsightOnDemandLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsightOnDemandLinkedService)(nil)).Elem()
}

func (i HDInsightOnDemandLinkedServiceArgs) ToHDInsightOnDemandLinkedServiceOutput() HDInsightOnDemandLinkedServiceOutput {
	return i.ToHDInsightOnDemandLinkedServiceOutputWithContext(context.Background())
}

func (i HDInsightOnDemandLinkedServiceArgs) ToHDInsightOnDemandLinkedServiceOutputWithContext(ctx context.Context) HDInsightOnDemandLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HDInsightOnDemandLinkedServiceOutput)
}

// HDInsight ondemand linked service.
type HDInsightOnDemandLinkedServiceOutput struct{ *pulumi.OutputState }

func (HDInsightOnDemandLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsightOnDemandLinkedService)(nil)).Elem()
}

func (o HDInsightOnDemandLinkedServiceOutput) ToHDInsightOnDemandLinkedServiceOutput() HDInsightOnDemandLinkedServiceOutput {
	return o
}

func (o HDInsightOnDemandLinkedServiceOutput) ToHDInsightOnDemandLinkedServiceOutputWithContext(ctx context.Context) HDInsightOnDemandLinkedServiceOutput {
	return o
}

// Specifies additional storage accounts for the HDInsight linked service so that the Data Factory service can register them on your behalf.
func (o HDInsightOnDemandLinkedServiceOutput) AdditionalLinkedServiceNames() LinkedServiceReferenceArrayOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) []LinkedServiceReference { return v.AdditionalLinkedServiceNames }).(LinkedServiceReferenceArrayOutput)
}

// List of tags that can be used for describing the linked service.
func (o HDInsightOnDemandLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The prefix of cluster name, postfix will be distinct with timestamp. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceOutput) ClusterNamePrefix() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.ClusterNamePrefix }).(pulumi.AnyOutput)
}

// The password to access the cluster.
func (o HDInsightOnDemandLinkedServiceOutput) ClusterPassword() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.ClusterPassword }).(pulumi.AnyOutput)
}

// The resource group where the cluster belongs. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceOutput) ClusterResourceGroup() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.ClusterResourceGroup }).(pulumi.AnyOutput)
}

// Number of worker/data nodes in the cluster. Suggestion value: 4. Type: int (or Expression with resultType int).
func (o HDInsightOnDemandLinkedServiceOutput) ClusterSize() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.ClusterSize }).(pulumi.AnyOutput)
}

// The password to SSH remotely connect cluster’s node (for Linux).
func (o HDInsightOnDemandLinkedServiceOutput) ClusterSshPassword() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.ClusterSshPassword }).(pulumi.AnyOutput)
}

// The username to SSH remotely connect to cluster’s node (for Linux). Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceOutput) ClusterSshUserName() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.ClusterSshUserName }).(pulumi.AnyOutput)
}

// The cluster type. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceOutput) ClusterType() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.ClusterType }).(pulumi.AnyOutput)
}

// The username to access the cluster. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceOutput) ClusterUserName() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.ClusterUserName }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o HDInsightOnDemandLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Specifies the core configuration parameters (as in core-site.xml) for the HDInsight cluster to be created.
func (o HDInsightOnDemandLinkedServiceOutput) CoreConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.CoreConfiguration }).(pulumi.AnyOutput)
}

// The credential reference containing authentication information.
func (o HDInsightOnDemandLinkedServiceOutput) Credential() CredentialReferencePtrOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) *CredentialReference { return v.Credential }).(CredentialReferencePtrOutput)
}

// Specifies the size of the data node for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceOutput) DataNodeSize() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.DataNodeSize }).(pulumi.AnyOutput)
}

// Linked service description.
func (o HDInsightOnDemandLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o HDInsightOnDemandLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Specifies the HBase configuration parameters (hbase-site.xml) for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceOutput) HBaseConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.HBaseConfiguration }).(pulumi.AnyOutput)
}

// The name of Azure SQL linked service that point to the HCatalog database. The on-demand HDInsight cluster is created by using the Azure SQL database as the metastore.
func (o HDInsightOnDemandLinkedServiceOutput) HcatalogLinkedServiceName() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) *LinkedServiceReference { return v.HcatalogLinkedServiceName }).(LinkedServiceReferencePtrOutput)
}

// Specifies the HDFS configuration parameters (hdfs-site.xml) for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceOutput) HdfsConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.HdfsConfiguration }).(pulumi.AnyOutput)
}

// Specifies the size of the head node for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceOutput) HeadNodeSize() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.HeadNodeSize }).(pulumi.AnyOutput)
}

// Specifies the hive configuration parameters (hive-site.xml) for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceOutput) HiveConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.HiveConfiguration }).(pulumi.AnyOutput)
}

// The customer’s subscription to host the cluster. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceOutput) HostSubscriptionId() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.HostSubscriptionId }).(pulumi.AnyOutput)
}

// Azure Storage linked service to be used by the on-demand cluster for storing and processing data.
func (o HDInsightOnDemandLinkedServiceOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Specifies the MapReduce configuration parameters (mapred-site.xml) for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceOutput) MapReduceConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.MapReduceConfiguration }).(pulumi.AnyOutput)
}

// Specifies the Oozie configuration parameters (oozie-site.xml) for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceOutput) OozieConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.OozieConfiguration }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o HDInsightOnDemandLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Custom script actions to run on HDI ondemand cluster once it's up. Please refer to https://docs.microsoft.com/en-us/azure/hdinsight/hdinsight-hadoop-customize-cluster-linux?toc=%2Fen-us%2Fazure%2Fhdinsight%2Fr-server%2FTOC.json&bc=%2Fen-us%2Fazure%2Fbread%2Ftoc.json#understanding-script-actions.
func (o HDInsightOnDemandLinkedServiceOutput) ScriptActions() ScriptActionArrayOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) []ScriptAction { return v.ScriptActions }).(ScriptActionArrayOutput)
}

// The service principal id for the hostSubscriptionId. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The key for the service principal id.
func (o HDInsightOnDemandLinkedServiceOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The version of spark if the cluster type is 'spark'. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceOutput) SparkVersion() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.SparkVersion }).(pulumi.AnyOutput)
}

// Specifies the Storm configuration parameters (storm-site.xml) for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceOutput) StormConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.StormConfiguration }).(pulumi.AnyOutput)
}

// The ARM resource ID for the subnet in the vNet. If virtualNetworkId was specified, then this property is required. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceOutput) SubnetName() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.SubnetName }).(pulumi.AnyOutput)
}

// The Tenant id/name to which the service principal belongs. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// The allowed idle time for the on-demand HDInsight cluster. Specifies how long the on-demand HDInsight cluster stays alive after completion of an activity run if there are no other active jobs in the cluster. The minimum value is 5 mins. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceOutput) TimeToLive() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.TimeToLive }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'HDInsightOnDemand'.
func (o HDInsightOnDemandLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Version of the HDInsight cluster.  Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceOutput) Version() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.Version }).(pulumi.AnyOutput)
}

// The ARM resource ID for the vNet to which the cluster should be joined after creation. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceOutput) VirtualNetworkId() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.VirtualNetworkId }).(pulumi.AnyOutput)
}

// Specifies the Yarn configuration parameters (yarn-site.xml) for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceOutput) YarnConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.YarnConfiguration }).(pulumi.AnyOutput)
}

// Specifies the size of the Zoo Keeper node for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceOutput) ZookeeperNodeSize() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedService) interface{} { return v.ZookeeperNodeSize }).(pulumi.AnyOutput)
}

// HDInsight ondemand linked service.
type HDInsightOnDemandLinkedServiceResponse struct {
	// Specifies additional storage accounts for the HDInsight linked service so that the Data Factory service can register them on your behalf.
	AdditionalLinkedServiceNames []LinkedServiceReferenceResponse `pulumi:"additionalLinkedServiceNames"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The prefix of cluster name, postfix will be distinct with timestamp. Type: string (or Expression with resultType string).
	ClusterNamePrefix interface{} `pulumi:"clusterNamePrefix"`
	// The password to access the cluster.
	ClusterPassword interface{} `pulumi:"clusterPassword"`
	// The resource group where the cluster belongs. Type: string (or Expression with resultType string).
	ClusterResourceGroup interface{} `pulumi:"clusterResourceGroup"`
	// Number of worker/data nodes in the cluster. Suggestion value: 4. Type: int (or Expression with resultType int).
	ClusterSize interface{} `pulumi:"clusterSize"`
	// The password to SSH remotely connect cluster’s node (for Linux).
	ClusterSshPassword interface{} `pulumi:"clusterSshPassword"`
	// The username to SSH remotely connect to cluster’s node (for Linux). Type: string (or Expression with resultType string).
	ClusterSshUserName interface{} `pulumi:"clusterSshUserName"`
	// The cluster type. Type: string (or Expression with resultType string).
	ClusterType interface{} `pulumi:"clusterType"`
	// The username to access the cluster. Type: string (or Expression with resultType string).
	ClusterUserName interface{} `pulumi:"clusterUserName"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Specifies the core configuration parameters (as in core-site.xml) for the HDInsight cluster to be created.
	CoreConfiguration interface{} `pulumi:"coreConfiguration"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Specifies the size of the data node for the HDInsight cluster.
	DataNodeSize interface{} `pulumi:"dataNodeSize"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Specifies the HBase configuration parameters (hbase-site.xml) for the HDInsight cluster.
	HBaseConfiguration interface{} `pulumi:"hBaseConfiguration"`
	// The name of Azure SQL linked service that point to the HCatalog database. The on-demand HDInsight cluster is created by using the Azure SQL database as the metastore.
	HcatalogLinkedServiceName *LinkedServiceReferenceResponse `pulumi:"hcatalogLinkedServiceName"`
	// Specifies the HDFS configuration parameters (hdfs-site.xml) for the HDInsight cluster.
	HdfsConfiguration interface{} `pulumi:"hdfsConfiguration"`
	// Specifies the size of the head node for the HDInsight cluster.
	HeadNodeSize interface{} `pulumi:"headNodeSize"`
	// Specifies the hive configuration parameters (hive-site.xml) for the HDInsight cluster.
	HiveConfiguration interface{} `pulumi:"hiveConfiguration"`
	// The customer’s subscription to host the cluster. Type: string (or Expression with resultType string).
	HostSubscriptionId interface{} `pulumi:"hostSubscriptionId"`
	// Azure Storage linked service to be used by the on-demand cluster for storing and processing data.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Specifies the MapReduce configuration parameters (mapred-site.xml) for the HDInsight cluster.
	MapReduceConfiguration interface{} `pulumi:"mapReduceConfiguration"`
	// Specifies the Oozie configuration parameters (oozie-site.xml) for the HDInsight cluster.
	OozieConfiguration interface{} `pulumi:"oozieConfiguration"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Custom script actions to run on HDI ondemand cluster once it's up. Please refer to https://docs.microsoft.com/en-us/azure/hdinsight/hdinsight-hadoop-customize-cluster-linux?toc=%2Fen-us%2Fazure%2Fhdinsight%2Fr-server%2FTOC.json&bc=%2Fen-us%2Fazure%2Fbread%2Ftoc.json#understanding-script-actions.
	ScriptActions []ScriptActionResponse `pulumi:"scriptActions"`
	// The service principal id for the hostSubscriptionId. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key for the service principal id.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The version of spark if the cluster type is 'spark'. Type: string (or Expression with resultType string).
	SparkVersion interface{} `pulumi:"sparkVersion"`
	// Specifies the Storm configuration parameters (storm-site.xml) for the HDInsight cluster.
	StormConfiguration interface{} `pulumi:"stormConfiguration"`
	// The ARM resource ID for the subnet in the vNet. If virtualNetworkId was specified, then this property is required. Type: string (or Expression with resultType string).
	SubnetName interface{} `pulumi:"subnetName"`
	// The Tenant id/name to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// The allowed idle time for the on-demand HDInsight cluster. Specifies how long the on-demand HDInsight cluster stays alive after completion of an activity run if there are no other active jobs in the cluster. The minimum value is 5 mins. Type: string (or Expression with resultType string).
	TimeToLive interface{} `pulumi:"timeToLive"`
	// Type of linked service.
	// Expected value is 'HDInsightOnDemand'.
	Type string `pulumi:"type"`
	// Version of the HDInsight cluster.  Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
	// The ARM resource ID for the vNet to which the cluster should be joined after creation. Type: string (or Expression with resultType string).
	VirtualNetworkId interface{} `pulumi:"virtualNetworkId"`
	// Specifies the Yarn configuration parameters (yarn-site.xml) for the HDInsight cluster.
	YarnConfiguration interface{} `pulumi:"yarnConfiguration"`
	// Specifies the size of the Zoo Keeper node for the HDInsight cluster.
	ZookeeperNodeSize interface{} `pulumi:"zookeeperNodeSize"`
}

// HDInsight ondemand linked service.
type HDInsightOnDemandLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (HDInsightOnDemandLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsightOnDemandLinkedServiceResponse)(nil)).Elem()
}

func (o HDInsightOnDemandLinkedServiceResponseOutput) ToHDInsightOnDemandLinkedServiceResponseOutput() HDInsightOnDemandLinkedServiceResponseOutput {
	return o
}

func (o HDInsightOnDemandLinkedServiceResponseOutput) ToHDInsightOnDemandLinkedServiceResponseOutputWithContext(ctx context.Context) HDInsightOnDemandLinkedServiceResponseOutput {
	return o
}

// Specifies additional storage accounts for the HDInsight linked service so that the Data Factory service can register them on your behalf.
func (o HDInsightOnDemandLinkedServiceResponseOutput) AdditionalLinkedServiceNames() LinkedServiceReferenceResponseArrayOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) []LinkedServiceReferenceResponse {
		return v.AdditionalLinkedServiceNames
	}).(LinkedServiceReferenceResponseArrayOutput)
}

// List of tags that can be used for describing the linked service.
func (o HDInsightOnDemandLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The prefix of cluster name, postfix will be distinct with timestamp. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceResponseOutput) ClusterNamePrefix() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.ClusterNamePrefix }).(pulumi.AnyOutput)
}

// The password to access the cluster.
func (o HDInsightOnDemandLinkedServiceResponseOutput) ClusterPassword() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.ClusterPassword }).(pulumi.AnyOutput)
}

// The resource group where the cluster belongs. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceResponseOutput) ClusterResourceGroup() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.ClusterResourceGroup }).(pulumi.AnyOutput)
}

// Number of worker/data nodes in the cluster. Suggestion value: 4. Type: int (or Expression with resultType int).
func (o HDInsightOnDemandLinkedServiceResponseOutput) ClusterSize() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.ClusterSize }).(pulumi.AnyOutput)
}

// The password to SSH remotely connect cluster’s node (for Linux).
func (o HDInsightOnDemandLinkedServiceResponseOutput) ClusterSshPassword() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.ClusterSshPassword }).(pulumi.AnyOutput)
}

// The username to SSH remotely connect to cluster’s node (for Linux). Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceResponseOutput) ClusterSshUserName() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.ClusterSshUserName }).(pulumi.AnyOutput)
}

// The cluster type. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceResponseOutput) ClusterType() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.ClusterType }).(pulumi.AnyOutput)
}

// The username to access the cluster. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceResponseOutput) ClusterUserName() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.ClusterUserName }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o HDInsightOnDemandLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Specifies the core configuration parameters (as in core-site.xml) for the HDInsight cluster to be created.
func (o HDInsightOnDemandLinkedServiceResponseOutput) CoreConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.CoreConfiguration }).(pulumi.AnyOutput)
}

// The credential reference containing authentication information.
func (o HDInsightOnDemandLinkedServiceResponseOutput) Credential() CredentialReferenceResponsePtrOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) *CredentialReferenceResponse { return v.Credential }).(CredentialReferenceResponsePtrOutput)
}

// Specifies the size of the data node for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceResponseOutput) DataNodeSize() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.DataNodeSize }).(pulumi.AnyOutput)
}

// Linked service description.
func (o HDInsightOnDemandLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o HDInsightOnDemandLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Specifies the HBase configuration parameters (hbase-site.xml) for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceResponseOutput) HBaseConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.HBaseConfiguration }).(pulumi.AnyOutput)
}

// The name of Azure SQL linked service that point to the HCatalog database. The on-demand HDInsight cluster is created by using the Azure SQL database as the metastore.
func (o HDInsightOnDemandLinkedServiceResponseOutput) HcatalogLinkedServiceName() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) *LinkedServiceReferenceResponse {
		return v.HcatalogLinkedServiceName
	}).(LinkedServiceReferenceResponsePtrOutput)
}

// Specifies the HDFS configuration parameters (hdfs-site.xml) for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceResponseOutput) HdfsConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.HdfsConfiguration }).(pulumi.AnyOutput)
}

// Specifies the size of the head node for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceResponseOutput) HeadNodeSize() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.HeadNodeSize }).(pulumi.AnyOutput)
}

// Specifies the hive configuration parameters (hive-site.xml) for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceResponseOutput) HiveConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.HiveConfiguration }).(pulumi.AnyOutput)
}

// The customer’s subscription to host the cluster. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceResponseOutput) HostSubscriptionId() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.HostSubscriptionId }).(pulumi.AnyOutput)
}

// Azure Storage linked service to be used by the on-demand cluster for storing and processing data.
func (o HDInsightOnDemandLinkedServiceResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) LinkedServiceReferenceResponse {
		return v.LinkedServiceName
	}).(LinkedServiceReferenceResponseOutput)
}

// Specifies the MapReduce configuration parameters (mapred-site.xml) for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceResponseOutput) MapReduceConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.MapReduceConfiguration }).(pulumi.AnyOutput)
}

// Specifies the Oozie configuration parameters (oozie-site.xml) for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceResponseOutput) OozieConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.OozieConfiguration }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o HDInsightOnDemandLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Custom script actions to run on HDI ondemand cluster once it's up. Please refer to https://docs.microsoft.com/en-us/azure/hdinsight/hdinsight-hadoop-customize-cluster-linux?toc=%2Fen-us%2Fazure%2Fhdinsight%2Fr-server%2FTOC.json&bc=%2Fen-us%2Fazure%2Fbread%2Ftoc.json#understanding-script-actions.
func (o HDInsightOnDemandLinkedServiceResponseOutput) ScriptActions() ScriptActionResponseArrayOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) []ScriptActionResponse { return v.ScriptActions }).(ScriptActionResponseArrayOutput)
}

// The service principal id for the hostSubscriptionId. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceResponseOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The key for the service principal id.
func (o HDInsightOnDemandLinkedServiceResponseOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The version of spark if the cluster type is 'spark'. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceResponseOutput) SparkVersion() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.SparkVersion }).(pulumi.AnyOutput)
}

// Specifies the Storm configuration parameters (storm-site.xml) for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceResponseOutput) StormConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.StormConfiguration }).(pulumi.AnyOutput)
}

// The ARM resource ID for the subnet in the vNet. If virtualNetworkId was specified, then this property is required. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceResponseOutput) SubnetName() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.SubnetName }).(pulumi.AnyOutput)
}

// The Tenant id/name to which the service principal belongs. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceResponseOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// The allowed idle time for the on-demand HDInsight cluster. Specifies how long the on-demand HDInsight cluster stays alive after completion of an activity run if there are no other active jobs in the cluster. The minimum value is 5 mins. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceResponseOutput) TimeToLive() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.TimeToLive }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'HDInsightOnDemand'.
func (o HDInsightOnDemandLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Version of the HDInsight cluster.  Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceResponseOutput) Version() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.Version }).(pulumi.AnyOutput)
}

// The ARM resource ID for the vNet to which the cluster should be joined after creation. Type: string (or Expression with resultType string).
func (o HDInsightOnDemandLinkedServiceResponseOutput) VirtualNetworkId() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.VirtualNetworkId }).(pulumi.AnyOutput)
}

// Specifies the Yarn configuration parameters (yarn-site.xml) for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceResponseOutput) YarnConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.YarnConfiguration }).(pulumi.AnyOutput)
}

// Specifies the size of the Zoo Keeper node for the HDInsight cluster.
func (o HDInsightOnDemandLinkedServiceResponseOutput) ZookeeperNodeSize() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightOnDemandLinkedServiceResponse) interface{} { return v.ZookeeperNodeSize }).(pulumi.AnyOutput)
}

// HDInsight Pig activity type.
type HDInsightPigActivity struct {
	// User specified arguments to HDInsightActivity. Type: array (or Expression with resultType array).
	Arguments interface{} `pulumi:"arguments"`
	// Allows user to specify defines for Pig job request.
	Defines map[string]interface{} `pulumi:"defines"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Debug info option.
	GetDebugInfo *string `pulumi:"getDebugInfo"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Script linked service reference.
	ScriptLinkedService *LinkedServiceReference `pulumi:"scriptLinkedService"`
	// Script path. Type: string (or Expression with resultType string).
	ScriptPath interface{} `pulumi:"scriptPath"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Storage linked service references.
	StorageLinkedServices []LinkedServiceReference `pulumi:"storageLinkedServices"`
	// Type of activity.
	// Expected value is 'HDInsightPig'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// HDInsightPigActivityInput is an input type that accepts HDInsightPigActivityArgs and HDInsightPigActivityOutput values.
// You can construct a concrete instance of `HDInsightPigActivityInput` via:
//
//	HDInsightPigActivityArgs{...}
type HDInsightPigActivityInput interface {
	pulumi.Input

	ToHDInsightPigActivityOutput() HDInsightPigActivityOutput
	ToHDInsightPigActivityOutputWithContext(context.Context) HDInsightPigActivityOutput
}

// HDInsight Pig activity type.
type HDInsightPigActivityArgs struct {
	// User specified arguments to HDInsightActivity. Type: array (or Expression with resultType array).
	Arguments pulumi.Input `pulumi:"arguments"`
	// Allows user to specify defines for Pig job request.
	Defines pulumi.MapInput `pulumi:"defines"`
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Debug info option.
	GetDebugInfo pulumi.StringPtrInput `pulumi:"getDebugInfo"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferencePtrInput `pulumi:"linkedServiceName"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs pulumi.StringPtrInput `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy ActivityPolicyPtrInput `pulumi:"policy"`
	// Script linked service reference.
	ScriptLinkedService LinkedServiceReferencePtrInput `pulumi:"scriptLinkedService"`
	// Script path. Type: string (or Expression with resultType string).
	ScriptPath pulumi.Input `pulumi:"scriptPath"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Storage linked service references.
	StorageLinkedServices LinkedServiceReferenceArrayInput `pulumi:"storageLinkedServices"`
	// Type of activity.
	// Expected value is 'HDInsightPig'.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
}

func (HDInsightPigActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsightPigActivity)(nil)).Elem()
}

func (i HDInsightPigActivityArgs) ToHDInsightPigActivityOutput() HDInsightPigActivityOutput {
	return i.ToHDInsightPigActivityOutputWithContext(context.Background())
}

func (i HDInsightPigActivityArgs) ToHDInsightPigActivityOutputWithContext(ctx context.Context) HDInsightPigActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HDInsightPigActivityOutput)
}

// HDInsight Pig activity type.
type HDInsightPigActivityOutput struct{ *pulumi.OutputState }

func (HDInsightPigActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsightPigActivity)(nil)).Elem()
}

func (o HDInsightPigActivityOutput) ToHDInsightPigActivityOutput() HDInsightPigActivityOutput {
	return o
}

func (o HDInsightPigActivityOutput) ToHDInsightPigActivityOutputWithContext(ctx context.Context) HDInsightPigActivityOutput {
	return o
}

// User specified arguments to HDInsightActivity. Type: array (or Expression with resultType array).
func (o HDInsightPigActivityOutput) Arguments() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightPigActivity) interface{} { return v.Arguments }).(pulumi.AnyOutput)
}

// Allows user to specify defines for Pig job request.
func (o HDInsightPigActivityOutput) Defines() pulumi.MapOutput {
	return o.ApplyT(func(v HDInsightPigActivity) map[string]interface{} { return v.Defines }).(pulumi.MapOutput)
}

// Activity depends on condition.
func (o HDInsightPigActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v HDInsightPigActivity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o HDInsightPigActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightPigActivity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Debug info option.
func (o HDInsightPigActivityOutput) GetDebugInfo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightPigActivity) *string { return v.GetDebugInfo }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o HDInsightPigActivityOutput) LinkedServiceName() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v HDInsightPigActivity) *LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferencePtrOutput)
}

// Activity name.
func (o HDInsightPigActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v HDInsightPigActivity) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o HDInsightPigActivityOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightPigActivity) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o HDInsightPigActivityOutput) Policy() ActivityPolicyPtrOutput {
	return o.ApplyT(func(v HDInsightPigActivity) *ActivityPolicy { return v.Policy }).(ActivityPolicyPtrOutput)
}

// Script linked service reference.
func (o HDInsightPigActivityOutput) ScriptLinkedService() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v HDInsightPigActivity) *LinkedServiceReference { return v.ScriptLinkedService }).(LinkedServiceReferencePtrOutput)
}

// Script path. Type: string (or Expression with resultType string).
func (o HDInsightPigActivityOutput) ScriptPath() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightPigActivity) interface{} { return v.ScriptPath }).(pulumi.AnyOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o HDInsightPigActivityOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightPigActivity) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Storage linked service references.
func (o HDInsightPigActivityOutput) StorageLinkedServices() LinkedServiceReferenceArrayOutput {
	return o.ApplyT(func(v HDInsightPigActivity) []LinkedServiceReference { return v.StorageLinkedServices }).(LinkedServiceReferenceArrayOutput)
}

// Type of activity.
// Expected value is 'HDInsightPig'.
func (o HDInsightPigActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HDInsightPigActivity) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o HDInsightPigActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v HDInsightPigActivity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

// HDInsight Pig activity type.
type HDInsightPigActivityResponse struct {
	// User specified arguments to HDInsightActivity. Type: array (or Expression with resultType array).
	Arguments interface{} `pulumi:"arguments"`
	// Allows user to specify defines for Pig job request.
	Defines map[string]interface{} `pulumi:"defines"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Debug info option.
	GetDebugInfo *string `pulumi:"getDebugInfo"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Script linked service reference.
	ScriptLinkedService *LinkedServiceReferenceResponse `pulumi:"scriptLinkedService"`
	// Script path. Type: string (or Expression with resultType string).
	ScriptPath interface{} `pulumi:"scriptPath"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Storage linked service references.
	StorageLinkedServices []LinkedServiceReferenceResponse `pulumi:"storageLinkedServices"`
	// Type of activity.
	// Expected value is 'HDInsightPig'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// HDInsight Pig activity type.
type HDInsightPigActivityResponseOutput struct{ *pulumi.OutputState }

func (HDInsightPigActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsightPigActivityResponse)(nil)).Elem()
}

func (o HDInsightPigActivityResponseOutput) ToHDInsightPigActivityResponseOutput() HDInsightPigActivityResponseOutput {
	return o
}

func (o HDInsightPigActivityResponseOutput) ToHDInsightPigActivityResponseOutputWithContext(ctx context.Context) HDInsightPigActivityResponseOutput {
	return o
}

// User specified arguments to HDInsightActivity. Type: array (or Expression with resultType array).
func (o HDInsightPigActivityResponseOutput) Arguments() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightPigActivityResponse) interface{} { return v.Arguments }).(pulumi.AnyOutput)
}

// Allows user to specify defines for Pig job request.
func (o HDInsightPigActivityResponseOutput) Defines() pulumi.MapOutput {
	return o.ApplyT(func(v HDInsightPigActivityResponse) map[string]interface{} { return v.Defines }).(pulumi.MapOutput)
}

// Activity depends on condition.
func (o HDInsightPigActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v HDInsightPigActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o HDInsightPigActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightPigActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Debug info option.
func (o HDInsightPigActivityResponseOutput) GetDebugInfo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightPigActivityResponse) *string { return v.GetDebugInfo }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o HDInsightPigActivityResponseOutput) LinkedServiceName() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v HDInsightPigActivityResponse) *LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponsePtrOutput)
}

// Activity name.
func (o HDInsightPigActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v HDInsightPigActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o HDInsightPigActivityResponseOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightPigActivityResponse) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o HDInsightPigActivityResponseOutput) Policy() ActivityPolicyResponsePtrOutput {
	return o.ApplyT(func(v HDInsightPigActivityResponse) *ActivityPolicyResponse { return v.Policy }).(ActivityPolicyResponsePtrOutput)
}

// Script linked service reference.
func (o HDInsightPigActivityResponseOutput) ScriptLinkedService() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v HDInsightPigActivityResponse) *LinkedServiceReferenceResponse { return v.ScriptLinkedService }).(LinkedServiceReferenceResponsePtrOutput)
}

// Script path. Type: string (or Expression with resultType string).
func (o HDInsightPigActivityResponseOutput) ScriptPath() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightPigActivityResponse) interface{} { return v.ScriptPath }).(pulumi.AnyOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o HDInsightPigActivityResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightPigActivityResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Storage linked service references.
func (o HDInsightPigActivityResponseOutput) StorageLinkedServices() LinkedServiceReferenceResponseArrayOutput {
	return o.ApplyT(func(v HDInsightPigActivityResponse) []LinkedServiceReferenceResponse { return v.StorageLinkedServices }).(LinkedServiceReferenceResponseArrayOutput)
}

// Type of activity.
// Expected value is 'HDInsightPig'.
func (o HDInsightPigActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HDInsightPigActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o HDInsightPigActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v HDInsightPigActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

// HDInsight Spark activity.
type HDInsightSparkActivity struct {
	// The user-specified arguments to HDInsightSparkActivity.
	Arguments []interface{} `pulumi:"arguments"`
	// The application's Java/Spark main class.
	ClassName *string `pulumi:"className"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// The relative path to the root folder of the code/package to be executed. Type: string (or Expression with resultType string).
	EntryFilePath interface{} `pulumi:"entryFilePath"`
	// Debug info option.
	GetDebugInfo *string `pulumi:"getDebugInfo"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// The user to impersonate that will execute the job. Type: string (or Expression with resultType string).
	ProxyUser interface{} `pulumi:"proxyUser"`
	// The root path in 'sparkJobLinkedService' for all the job’s files. Type: string (or Expression with resultType string).
	RootPath interface{} `pulumi:"rootPath"`
	// Spark configuration property.
	SparkConfig map[string]interface{} `pulumi:"sparkConfig"`
	// The storage linked service for uploading the entry file and dependencies, and for receiving logs.
	SparkJobLinkedService *LinkedServiceReference `pulumi:"sparkJobLinkedService"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'HDInsightSpark'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// HDInsightSparkActivityInput is an input type that accepts HDInsightSparkActivityArgs and HDInsightSparkActivityOutput values.
// You can construct a concrete instance of `HDInsightSparkActivityInput` via:
//
//	HDInsightSparkActivityArgs{...}
type HDInsightSparkActivityInput interface {
	pulumi.Input

	ToHDInsightSparkActivityOutput() HDInsightSparkActivityOutput
	ToHDInsightSparkActivityOutputWithContext(context.Context) HDInsightSparkActivityOutput
}

// HDInsight Spark activity.
type HDInsightSparkActivityArgs struct {
	// The user-specified arguments to HDInsightSparkActivity.
	Arguments pulumi.ArrayInput `pulumi:"arguments"`
	// The application's Java/Spark main class.
	ClassName pulumi.StringPtrInput `pulumi:"className"`
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The relative path to the root folder of the code/package to be executed. Type: string (or Expression with resultType string).
	EntryFilePath pulumi.Input `pulumi:"entryFilePath"`
	// Debug info option.
	GetDebugInfo pulumi.StringPtrInput `pulumi:"getDebugInfo"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferencePtrInput `pulumi:"linkedServiceName"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs pulumi.StringPtrInput `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy ActivityPolicyPtrInput `pulumi:"policy"`
	// The user to impersonate that will execute the job. Type: string (or Expression with resultType string).
	ProxyUser pulumi.Input `pulumi:"proxyUser"`
	// The root path in 'sparkJobLinkedService' for all the job’s files. Type: string (or Expression with resultType string).
	RootPath pulumi.Input `pulumi:"rootPath"`
	// Spark configuration property.
	SparkConfig pulumi.MapInput `pulumi:"sparkConfig"`
	// The storage linked service for uploading the entry file and dependencies, and for receiving logs.
	SparkJobLinkedService LinkedServiceReferencePtrInput `pulumi:"sparkJobLinkedService"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Type of activity.
	// Expected value is 'HDInsightSpark'.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
}

func (HDInsightSparkActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsightSparkActivity)(nil)).Elem()
}

func (i HDInsightSparkActivityArgs) ToHDInsightSparkActivityOutput() HDInsightSparkActivityOutput {
	return i.ToHDInsightSparkActivityOutputWithContext(context.Background())
}

func (i HDInsightSparkActivityArgs) ToHDInsightSparkActivityOutputWithContext(ctx context.Context) HDInsightSparkActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HDInsightSparkActivityOutput)
}

// HDInsight Spark activity.
type HDInsightSparkActivityOutput struct{ *pulumi.OutputState }

func (HDInsightSparkActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsightSparkActivity)(nil)).Elem()
}

func (o HDInsightSparkActivityOutput) ToHDInsightSparkActivityOutput() HDInsightSparkActivityOutput {
	return o
}

func (o HDInsightSparkActivityOutput) ToHDInsightSparkActivityOutputWithContext(ctx context.Context) HDInsightSparkActivityOutput {
	return o
}

// The user-specified arguments to HDInsightSparkActivity.
func (o HDInsightSparkActivityOutput) Arguments() pulumi.ArrayOutput {
	return o.ApplyT(func(v HDInsightSparkActivity) []interface{} { return v.Arguments }).(pulumi.ArrayOutput)
}

// The application's Java/Spark main class.
func (o HDInsightSparkActivityOutput) ClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightSparkActivity) *string { return v.ClassName }).(pulumi.StringPtrOutput)
}

// Activity depends on condition.
func (o HDInsightSparkActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v HDInsightSparkActivity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o HDInsightSparkActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightSparkActivity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The relative path to the root folder of the code/package to be executed. Type: string (or Expression with resultType string).
func (o HDInsightSparkActivityOutput) EntryFilePath() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightSparkActivity) interface{} { return v.EntryFilePath }).(pulumi.AnyOutput)
}

// Debug info option.
func (o HDInsightSparkActivityOutput) GetDebugInfo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightSparkActivity) *string { return v.GetDebugInfo }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o HDInsightSparkActivityOutput) LinkedServiceName() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v HDInsightSparkActivity) *LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferencePtrOutput)
}

// Activity name.
func (o HDInsightSparkActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v HDInsightSparkActivity) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o HDInsightSparkActivityOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightSparkActivity) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o HDInsightSparkActivityOutput) Policy() ActivityPolicyPtrOutput {
	return o.ApplyT(func(v HDInsightSparkActivity) *ActivityPolicy { return v.Policy }).(ActivityPolicyPtrOutput)
}

// The user to impersonate that will execute the job. Type: string (or Expression with resultType string).
func (o HDInsightSparkActivityOutput) ProxyUser() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightSparkActivity) interface{} { return v.ProxyUser }).(pulumi.AnyOutput)
}

// The root path in 'sparkJobLinkedService' for all the job’s files. Type: string (or Expression with resultType string).
func (o HDInsightSparkActivityOutput) RootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightSparkActivity) interface{} { return v.RootPath }).(pulumi.AnyOutput)
}

// Spark configuration property.
func (o HDInsightSparkActivityOutput) SparkConfig() pulumi.MapOutput {
	return o.ApplyT(func(v HDInsightSparkActivity) map[string]interface{} { return v.SparkConfig }).(pulumi.MapOutput)
}

// The storage linked service for uploading the entry file and dependencies, and for receiving logs.
func (o HDInsightSparkActivityOutput) SparkJobLinkedService() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v HDInsightSparkActivity) *LinkedServiceReference { return v.SparkJobLinkedService }).(LinkedServiceReferencePtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o HDInsightSparkActivityOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightSparkActivity) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'HDInsightSpark'.
func (o HDInsightSparkActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HDInsightSparkActivity) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o HDInsightSparkActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v HDInsightSparkActivity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

// HDInsight Spark activity.
type HDInsightSparkActivityResponse struct {
	// The user-specified arguments to HDInsightSparkActivity.
	Arguments []interface{} `pulumi:"arguments"`
	// The application's Java/Spark main class.
	ClassName *string `pulumi:"className"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// The relative path to the root folder of the code/package to be executed. Type: string (or Expression with resultType string).
	EntryFilePath interface{} `pulumi:"entryFilePath"`
	// Debug info option.
	GetDebugInfo *string `pulumi:"getDebugInfo"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// The user to impersonate that will execute the job. Type: string (or Expression with resultType string).
	ProxyUser interface{} `pulumi:"proxyUser"`
	// The root path in 'sparkJobLinkedService' for all the job’s files. Type: string (or Expression with resultType string).
	RootPath interface{} `pulumi:"rootPath"`
	// Spark configuration property.
	SparkConfig map[string]interface{} `pulumi:"sparkConfig"`
	// The storage linked service for uploading the entry file and dependencies, and for receiving logs.
	SparkJobLinkedService *LinkedServiceReferenceResponse `pulumi:"sparkJobLinkedService"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'HDInsightSpark'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// HDInsight Spark activity.
type HDInsightSparkActivityResponseOutput struct{ *pulumi.OutputState }

func (HDInsightSparkActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsightSparkActivityResponse)(nil)).Elem()
}

func (o HDInsightSparkActivityResponseOutput) ToHDInsightSparkActivityResponseOutput() HDInsightSparkActivityResponseOutput {
	return o
}

func (o HDInsightSparkActivityResponseOutput) ToHDInsightSparkActivityResponseOutputWithContext(ctx context.Context) HDInsightSparkActivityResponseOutput {
	return o
}

// The user-specified arguments to HDInsightSparkActivity.
func (o HDInsightSparkActivityResponseOutput) Arguments() pulumi.ArrayOutput {
	return o.ApplyT(func(v HDInsightSparkActivityResponse) []interface{} { return v.Arguments }).(pulumi.ArrayOutput)
}

// The application's Java/Spark main class.
func (o HDInsightSparkActivityResponseOutput) ClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightSparkActivityResponse) *string { return v.ClassName }).(pulumi.StringPtrOutput)
}

// Activity depends on condition.
func (o HDInsightSparkActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v HDInsightSparkActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o HDInsightSparkActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightSparkActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The relative path to the root folder of the code/package to be executed. Type: string (or Expression with resultType string).
func (o HDInsightSparkActivityResponseOutput) EntryFilePath() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightSparkActivityResponse) interface{} { return v.EntryFilePath }).(pulumi.AnyOutput)
}

// Debug info option.
func (o HDInsightSparkActivityResponseOutput) GetDebugInfo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightSparkActivityResponse) *string { return v.GetDebugInfo }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o HDInsightSparkActivityResponseOutput) LinkedServiceName() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v HDInsightSparkActivityResponse) *LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponsePtrOutput)
}

// Activity name.
func (o HDInsightSparkActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v HDInsightSparkActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o HDInsightSparkActivityResponseOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightSparkActivityResponse) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o HDInsightSparkActivityResponseOutput) Policy() ActivityPolicyResponsePtrOutput {
	return o.ApplyT(func(v HDInsightSparkActivityResponse) *ActivityPolicyResponse { return v.Policy }).(ActivityPolicyResponsePtrOutput)
}

// The user to impersonate that will execute the job. Type: string (or Expression with resultType string).
func (o HDInsightSparkActivityResponseOutput) ProxyUser() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightSparkActivityResponse) interface{} { return v.ProxyUser }).(pulumi.AnyOutput)
}

// The root path in 'sparkJobLinkedService' for all the job’s files. Type: string (or Expression with resultType string).
func (o HDInsightSparkActivityResponseOutput) RootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightSparkActivityResponse) interface{} { return v.RootPath }).(pulumi.AnyOutput)
}

// Spark configuration property.
func (o HDInsightSparkActivityResponseOutput) SparkConfig() pulumi.MapOutput {
	return o.ApplyT(func(v HDInsightSparkActivityResponse) map[string]interface{} { return v.SparkConfig }).(pulumi.MapOutput)
}

// The storage linked service for uploading the entry file and dependencies, and for receiving logs.
func (o HDInsightSparkActivityResponseOutput) SparkJobLinkedService() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v HDInsightSparkActivityResponse) *LinkedServiceReferenceResponse { return v.SparkJobLinkedService }).(LinkedServiceReferenceResponsePtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o HDInsightSparkActivityResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightSparkActivityResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'HDInsightSpark'.
func (o HDInsightSparkActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HDInsightSparkActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o HDInsightSparkActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v HDInsightSparkActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

// HDInsight streaming activity type.
type HDInsightStreamingActivity struct {
	// User specified arguments to HDInsightActivity.
	Arguments []interface{} `pulumi:"arguments"`
	// Combiner executable name. Type: string (or Expression with resultType string).
	Combiner interface{} `pulumi:"combiner"`
	// Command line environment values.
	CommandEnvironment []interface{} `pulumi:"commandEnvironment"`
	// Allows user to specify defines for streaming job request.
	Defines map[string]interface{} `pulumi:"defines"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Linked service reference where the files are located.
	FileLinkedService *LinkedServiceReference `pulumi:"fileLinkedService"`
	// Paths to streaming job files. Can be directories.
	FilePaths []interface{} `pulumi:"filePaths"`
	// Debug info option.
	GetDebugInfo *string `pulumi:"getDebugInfo"`
	// Input blob path. Type: string (or Expression with resultType string).
	Input interface{} `pulumi:"input"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Mapper executable name. Type: string (or Expression with resultType string).
	Mapper interface{} `pulumi:"mapper"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Output blob path. Type: string (or Expression with resultType string).
	Output interface{} `pulumi:"output"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Reducer executable name. Type: string (or Expression with resultType string).
	Reducer interface{} `pulumi:"reducer"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Storage linked service references.
	StorageLinkedServices []LinkedServiceReference `pulumi:"storageLinkedServices"`
	// Type of activity.
	// Expected value is 'HDInsightStreaming'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// HDInsightStreamingActivityInput is an input type that accepts HDInsightStreamingActivityArgs and HDInsightStreamingActivityOutput values.
// You can construct a concrete instance of `HDInsightStreamingActivityInput` via:
//
//	HDInsightStreamingActivityArgs{...}
type HDInsightStreamingActivityInput interface {
	pulumi.Input

	ToHDInsightStreamingActivityOutput() HDInsightStreamingActivityOutput
	ToHDInsightStreamingActivityOutputWithContext(context.Context) HDInsightStreamingActivityOutput
}

// HDInsight streaming activity type.
type HDInsightStreamingActivityArgs struct {
	// User specified arguments to HDInsightActivity.
	Arguments pulumi.ArrayInput `pulumi:"arguments"`
	// Combiner executable name. Type: string (or Expression with resultType string).
	Combiner pulumi.Input `pulumi:"combiner"`
	// Command line environment values.
	CommandEnvironment pulumi.ArrayInput `pulumi:"commandEnvironment"`
	// Allows user to specify defines for streaming job request.
	Defines pulumi.MapInput `pulumi:"defines"`
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference where the files are located.
	FileLinkedService LinkedServiceReferencePtrInput `pulumi:"fileLinkedService"`
	// Paths to streaming job files. Can be directories.
	FilePaths pulumi.ArrayInput `pulumi:"filePaths"`
	// Debug info option.
	GetDebugInfo pulumi.StringPtrInput `pulumi:"getDebugInfo"`
	// Input blob path. Type: string (or Expression with resultType string).
	Input pulumi.Input `pulumi:"input"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferencePtrInput `pulumi:"linkedServiceName"`
	// Mapper executable name. Type: string (or Expression with resultType string).
	Mapper pulumi.Input `pulumi:"mapper"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs pulumi.StringPtrInput `pulumi:"onInactiveMarkAs"`
	// Output blob path. Type: string (or Expression with resultType string).
	Output pulumi.Input `pulumi:"output"`
	// Activity policy.
	Policy ActivityPolicyPtrInput `pulumi:"policy"`
	// Reducer executable name. Type: string (or Expression with resultType string).
	Reducer pulumi.Input `pulumi:"reducer"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Storage linked service references.
	StorageLinkedServices LinkedServiceReferenceArrayInput `pulumi:"storageLinkedServices"`
	// Type of activity.
	// Expected value is 'HDInsightStreaming'.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
}

func (HDInsightStreamingActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsightStreamingActivity)(nil)).Elem()
}

func (i HDInsightStreamingActivityArgs) ToHDInsightStreamingActivityOutput() HDInsightStreamingActivityOutput {
	return i.ToHDInsightStreamingActivityOutputWithContext(context.Background())
}

func (i HDInsightStreamingActivityArgs) ToHDInsightStreamingActivityOutputWithContext(ctx context.Context) HDInsightStreamingActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HDInsightStreamingActivityOutput)
}

// HDInsight streaming activity type.
type HDInsightStreamingActivityOutput struct{ *pulumi.OutputState }

func (HDInsightStreamingActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsightStreamingActivity)(nil)).Elem()
}

func (o HDInsightStreamingActivityOutput) ToHDInsightStreamingActivityOutput() HDInsightStreamingActivityOutput {
	return o
}

func (o HDInsightStreamingActivityOutput) ToHDInsightStreamingActivityOutputWithContext(ctx context.Context) HDInsightStreamingActivityOutput {
	return o
}

// User specified arguments to HDInsightActivity.
func (o HDInsightStreamingActivityOutput) Arguments() pulumi.ArrayOutput {
	return o.ApplyT(func(v HDInsightStreamingActivity) []interface{} { return v.Arguments }).(pulumi.ArrayOutput)
}

// Combiner executable name. Type: string (or Expression with resultType string).
func (o HDInsightStreamingActivityOutput) Combiner() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightStreamingActivity) interface{} { return v.Combiner }).(pulumi.AnyOutput)
}

// Command line environment values.
func (o HDInsightStreamingActivityOutput) CommandEnvironment() pulumi.ArrayOutput {
	return o.ApplyT(func(v HDInsightStreamingActivity) []interface{} { return v.CommandEnvironment }).(pulumi.ArrayOutput)
}

// Allows user to specify defines for streaming job request.
func (o HDInsightStreamingActivityOutput) Defines() pulumi.MapOutput {
	return o.ApplyT(func(v HDInsightStreamingActivity) map[string]interface{} { return v.Defines }).(pulumi.MapOutput)
}

// Activity depends on condition.
func (o HDInsightStreamingActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v HDInsightStreamingActivity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o HDInsightStreamingActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightStreamingActivity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference where the files are located.
func (o HDInsightStreamingActivityOutput) FileLinkedService() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v HDInsightStreamingActivity) *LinkedServiceReference { return v.FileLinkedService }).(LinkedServiceReferencePtrOutput)
}

// Paths to streaming job files. Can be directories.
func (o HDInsightStreamingActivityOutput) FilePaths() pulumi.ArrayOutput {
	return o.ApplyT(func(v HDInsightStreamingActivity) []interface{} { return v.FilePaths }).(pulumi.ArrayOutput)
}

// Debug info option.
func (o HDInsightStreamingActivityOutput) GetDebugInfo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightStreamingActivity) *string { return v.GetDebugInfo }).(pulumi.StringPtrOutput)
}

// Input blob path. Type: string (or Expression with resultType string).
func (o HDInsightStreamingActivityOutput) Input() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightStreamingActivity) interface{} { return v.Input }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o HDInsightStreamingActivityOutput) LinkedServiceName() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v HDInsightStreamingActivity) *LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferencePtrOutput)
}

// Mapper executable name. Type: string (or Expression with resultType string).
func (o HDInsightStreamingActivityOutput) Mapper() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightStreamingActivity) interface{} { return v.Mapper }).(pulumi.AnyOutput)
}

// Activity name.
func (o HDInsightStreamingActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v HDInsightStreamingActivity) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o HDInsightStreamingActivityOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightStreamingActivity) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Output blob path. Type: string (or Expression with resultType string).
func (o HDInsightStreamingActivityOutput) Output() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightStreamingActivity) interface{} { return v.Output }).(pulumi.AnyOutput)
}

// Activity policy.
func (o HDInsightStreamingActivityOutput) Policy() ActivityPolicyPtrOutput {
	return o.ApplyT(func(v HDInsightStreamingActivity) *ActivityPolicy { return v.Policy }).(ActivityPolicyPtrOutput)
}

// Reducer executable name. Type: string (or Expression with resultType string).
func (o HDInsightStreamingActivityOutput) Reducer() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightStreamingActivity) interface{} { return v.Reducer }).(pulumi.AnyOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o HDInsightStreamingActivityOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightStreamingActivity) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Storage linked service references.
func (o HDInsightStreamingActivityOutput) StorageLinkedServices() LinkedServiceReferenceArrayOutput {
	return o.ApplyT(func(v HDInsightStreamingActivity) []LinkedServiceReference { return v.StorageLinkedServices }).(LinkedServiceReferenceArrayOutput)
}

// Type of activity.
// Expected value is 'HDInsightStreaming'.
func (o HDInsightStreamingActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HDInsightStreamingActivity) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o HDInsightStreamingActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v HDInsightStreamingActivity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

// HDInsight streaming activity type.
type HDInsightStreamingActivityResponse struct {
	// User specified arguments to HDInsightActivity.
	Arguments []interface{} `pulumi:"arguments"`
	// Combiner executable name. Type: string (or Expression with resultType string).
	Combiner interface{} `pulumi:"combiner"`
	// Command line environment values.
	CommandEnvironment []interface{} `pulumi:"commandEnvironment"`
	// Allows user to specify defines for streaming job request.
	Defines map[string]interface{} `pulumi:"defines"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Linked service reference where the files are located.
	FileLinkedService *LinkedServiceReferenceResponse `pulumi:"fileLinkedService"`
	// Paths to streaming job files. Can be directories.
	FilePaths []interface{} `pulumi:"filePaths"`
	// Debug info option.
	GetDebugInfo *string `pulumi:"getDebugInfo"`
	// Input blob path. Type: string (or Expression with resultType string).
	Input interface{} `pulumi:"input"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Mapper executable name. Type: string (or Expression with resultType string).
	Mapper interface{} `pulumi:"mapper"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Output blob path. Type: string (or Expression with resultType string).
	Output interface{} `pulumi:"output"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Reducer executable name. Type: string (or Expression with resultType string).
	Reducer interface{} `pulumi:"reducer"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Storage linked service references.
	StorageLinkedServices []LinkedServiceReferenceResponse `pulumi:"storageLinkedServices"`
	// Type of activity.
	// Expected value is 'HDInsightStreaming'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// HDInsight streaming activity type.
type HDInsightStreamingActivityResponseOutput struct{ *pulumi.OutputState }

func (HDInsightStreamingActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsightStreamingActivityResponse)(nil)).Elem()
}

func (o HDInsightStreamingActivityResponseOutput) ToHDInsightStreamingActivityResponseOutput() HDInsightStreamingActivityResponseOutput {
	return o
}

func (o HDInsightStreamingActivityResponseOutput) ToHDInsightStreamingActivityResponseOutputWithContext(ctx context.Context) HDInsightStreamingActivityResponseOutput {
	return o
}

// User specified arguments to HDInsightActivity.
func (o HDInsightStreamingActivityResponseOutput) Arguments() pulumi.ArrayOutput {
	return o.ApplyT(func(v HDInsightStreamingActivityResponse) []interface{} { return v.Arguments }).(pulumi.ArrayOutput)
}

// Combiner executable name. Type: string (or Expression with resultType string).
func (o HDInsightStreamingActivityResponseOutput) Combiner() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightStreamingActivityResponse) interface{} { return v.Combiner }).(pulumi.AnyOutput)
}

// Command line environment values.
func (o HDInsightStreamingActivityResponseOutput) CommandEnvironment() pulumi.ArrayOutput {
	return o.ApplyT(func(v HDInsightStreamingActivityResponse) []interface{} { return v.CommandEnvironment }).(pulumi.ArrayOutput)
}

// Allows user to specify defines for streaming job request.
func (o HDInsightStreamingActivityResponseOutput) Defines() pulumi.MapOutput {
	return o.ApplyT(func(v HDInsightStreamingActivityResponse) map[string]interface{} { return v.Defines }).(pulumi.MapOutput)
}

// Activity depends on condition.
func (o HDInsightStreamingActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v HDInsightStreamingActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o HDInsightStreamingActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightStreamingActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference where the files are located.
func (o HDInsightStreamingActivityResponseOutput) FileLinkedService() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v HDInsightStreamingActivityResponse) *LinkedServiceReferenceResponse { return v.FileLinkedService }).(LinkedServiceReferenceResponsePtrOutput)
}

// Paths to streaming job files. Can be directories.
func (o HDInsightStreamingActivityResponseOutput) FilePaths() pulumi.ArrayOutput {
	return o.ApplyT(func(v HDInsightStreamingActivityResponse) []interface{} { return v.FilePaths }).(pulumi.ArrayOutput)
}

// Debug info option.
func (o HDInsightStreamingActivityResponseOutput) GetDebugInfo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightStreamingActivityResponse) *string { return v.GetDebugInfo }).(pulumi.StringPtrOutput)
}

// Input blob path. Type: string (or Expression with resultType string).
func (o HDInsightStreamingActivityResponseOutput) Input() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightStreamingActivityResponse) interface{} { return v.Input }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o HDInsightStreamingActivityResponseOutput) LinkedServiceName() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v HDInsightStreamingActivityResponse) *LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponsePtrOutput)
}

// Mapper executable name. Type: string (or Expression with resultType string).
func (o HDInsightStreamingActivityResponseOutput) Mapper() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightStreamingActivityResponse) interface{} { return v.Mapper }).(pulumi.AnyOutput)
}

// Activity name.
func (o HDInsightStreamingActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v HDInsightStreamingActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o HDInsightStreamingActivityResponseOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightStreamingActivityResponse) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Output blob path. Type: string (or Expression with resultType string).
func (o HDInsightStreamingActivityResponseOutput) Output() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightStreamingActivityResponse) interface{} { return v.Output }).(pulumi.AnyOutput)
}

// Activity policy.
func (o HDInsightStreamingActivityResponseOutput) Policy() ActivityPolicyResponsePtrOutput {
	return o.ApplyT(func(v HDInsightStreamingActivityResponse) *ActivityPolicyResponse { return v.Policy }).(ActivityPolicyResponsePtrOutput)
}

// Reducer executable name. Type: string (or Expression with resultType string).
func (o HDInsightStreamingActivityResponseOutput) Reducer() pulumi.AnyOutput {
	return o.ApplyT(func(v HDInsightStreamingActivityResponse) interface{} { return v.Reducer }).(pulumi.AnyOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o HDInsightStreamingActivityResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightStreamingActivityResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Storage linked service references.
func (o HDInsightStreamingActivityResponseOutput) StorageLinkedServices() LinkedServiceReferenceResponseArrayOutput {
	return o.ApplyT(func(v HDInsightStreamingActivityResponse) []LinkedServiceReferenceResponse {
		return v.StorageLinkedServices
	}).(LinkedServiceReferenceResponseArrayOutput)
}

// Type of activity.
// Expected value is 'HDInsightStreaming'.
func (o HDInsightStreamingActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HDInsightStreamingActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o HDInsightStreamingActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v HDInsightStreamingActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

// Hadoop Distributed File System (HDFS) linked service.
type HdfsLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication used to connect to the HDFS. Possible values are: Anonymous and Windows. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for Windows authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Hdfs'.
	Type string `pulumi:"type"`
	// The URL of the HDFS service endpoint, e.g. http://myhostname:50070/webhdfs/v1 . Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// User name for Windows authentication. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// HdfsLinkedServiceInput is an input type that accepts HdfsLinkedServiceArgs and HdfsLinkedServiceOutput values.
// You can construct a concrete instance of `HdfsLinkedServiceInput` via:
//
//	HdfsLinkedServiceArgs{...}
type HdfsLinkedServiceInput interface {
	pulumi.Input

	ToHdfsLinkedServiceOutput() HdfsLinkedServiceOutput
	ToHdfsLinkedServiceOutputWithContext(context.Context) HdfsLinkedServiceOutput
}

// Hadoop Distributed File System (HDFS) linked service.
type HdfsLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Type of authentication used to connect to the HDFS. Possible values are: Anonymous and Windows. Type: string (or Expression with resultType string).
	AuthenticationType pulumi.Input `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password for Windows authentication.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Hdfs'.
	Type pulumi.StringInput `pulumi:"type"`
	// The URL of the HDFS service endpoint, e.g. http://myhostname:50070/webhdfs/v1 . Type: string (or Expression with resultType string).
	Url pulumi.Input `pulumi:"url"`
	// User name for Windows authentication. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (HdfsLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HdfsLinkedService)(nil)).Elem()
}

func (i HdfsLinkedServiceArgs) ToHdfsLinkedServiceOutput() HdfsLinkedServiceOutput {
	return i.ToHdfsLinkedServiceOutputWithContext(context.Background())
}

func (i HdfsLinkedServiceArgs) ToHdfsLinkedServiceOutputWithContext(ctx context.Context) HdfsLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HdfsLinkedServiceOutput)
}

// Hadoop Distributed File System (HDFS) linked service.
type HdfsLinkedServiceOutput struct{ *pulumi.OutputState }

func (HdfsLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HdfsLinkedService)(nil)).Elem()
}

func (o HdfsLinkedServiceOutput) ToHdfsLinkedServiceOutput() HdfsLinkedServiceOutput {
	return o
}

func (o HdfsLinkedServiceOutput) ToHdfsLinkedServiceOutputWithContext(ctx context.Context) HdfsLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o HdfsLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v HdfsLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Type of authentication used to connect to the HDFS. Possible values are: Anonymous and Windows. Type: string (or Expression with resultType string).
func (o HdfsLinkedServiceOutput) AuthenticationType() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsLinkedService) interface{} { return v.AuthenticationType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o HdfsLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v HdfsLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o HdfsLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HdfsLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o HdfsLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HdfsLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o HdfsLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v HdfsLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Password for Windows authentication.
func (o HdfsLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Hdfs'.
func (o HdfsLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HdfsLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The URL of the HDFS service endpoint, e.g. http://myhostname:50070/webhdfs/v1 . Type: string (or Expression with resultType string).
func (o HdfsLinkedServiceOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsLinkedService) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// User name for Windows authentication. Type: string (or Expression with resultType string).
func (o HdfsLinkedServiceOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsLinkedService) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// Hadoop Distributed File System (HDFS) linked service.
type HdfsLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication used to connect to the HDFS. Possible values are: Anonymous and Windows. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for Windows authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Hdfs'.
	Type string `pulumi:"type"`
	// The URL of the HDFS service endpoint, e.g. http://myhostname:50070/webhdfs/v1 . Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// User name for Windows authentication. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// Hadoop Distributed File System (HDFS) linked service.
type HdfsLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (HdfsLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HdfsLinkedServiceResponse)(nil)).Elem()
}

func (o HdfsLinkedServiceResponseOutput) ToHdfsLinkedServiceResponseOutput() HdfsLinkedServiceResponseOutput {
	return o
}

func (o HdfsLinkedServiceResponseOutput) ToHdfsLinkedServiceResponseOutputWithContext(ctx context.Context) HdfsLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o HdfsLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v HdfsLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Type of authentication used to connect to the HDFS. Possible values are: Anonymous and Windows. Type: string (or Expression with resultType string).
func (o HdfsLinkedServiceResponseOutput) AuthenticationType() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsLinkedServiceResponse) interface{} { return v.AuthenticationType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o HdfsLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v HdfsLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o HdfsLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HdfsLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o HdfsLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HdfsLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o HdfsLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v HdfsLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password for Windows authentication.
func (o HdfsLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Hdfs'.
func (o HdfsLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HdfsLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The URL of the HDFS service endpoint, e.g. http://myhostname:50070/webhdfs/v1 . Type: string (or Expression with resultType string).
func (o HdfsLinkedServiceResponseOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsLinkedServiceResponse) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// User name for Windows authentication. Type: string (or Expression with resultType string).
func (o HdfsLinkedServiceResponseOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsLinkedServiceResponse) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// The location of HDFS.
type HdfsLocation struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'HdfsLocation'.
	Type string `pulumi:"type"`
}

// HdfsLocationInput is an input type that accepts HdfsLocationArgs and HdfsLocationOutput values.
// You can construct a concrete instance of `HdfsLocationInput` via:
//
//	HdfsLocationArgs{...}
type HdfsLocationInput interface {
	pulumi.Input

	ToHdfsLocationOutput() HdfsLocationOutput
	ToHdfsLocationOutputWithContext(context.Context) HdfsLocationOutput
}

// The location of HDFS.
type HdfsLocationArgs struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'HdfsLocation'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (HdfsLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HdfsLocation)(nil)).Elem()
}

func (i HdfsLocationArgs) ToHdfsLocationOutput() HdfsLocationOutput {
	return i.ToHdfsLocationOutputWithContext(context.Background())
}

func (i HdfsLocationArgs) ToHdfsLocationOutputWithContext(ctx context.Context) HdfsLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HdfsLocationOutput)
}

// The location of HDFS.
type HdfsLocationOutput struct{ *pulumi.OutputState }

func (HdfsLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HdfsLocation)(nil)).Elem()
}

func (o HdfsLocationOutput) ToHdfsLocationOutput() HdfsLocationOutput {
	return o
}

func (o HdfsLocationOutput) ToHdfsLocationOutputWithContext(ctx context.Context) HdfsLocationOutput {
	return o
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o HdfsLocationOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsLocation) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o HdfsLocationOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsLocation) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
// Expected value is 'HdfsLocation'.
func (o HdfsLocationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HdfsLocation) string { return v.Type }).(pulumi.StringOutput)
}

// The location of HDFS.
type HdfsLocationResponse struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'HdfsLocation'.
	Type string `pulumi:"type"`
}

// The location of HDFS.
type HdfsLocationResponseOutput struct{ *pulumi.OutputState }

func (HdfsLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HdfsLocationResponse)(nil)).Elem()
}

func (o HdfsLocationResponseOutput) ToHdfsLocationResponseOutput() HdfsLocationResponseOutput {
	return o
}

func (o HdfsLocationResponseOutput) ToHdfsLocationResponseOutputWithContext(ctx context.Context) HdfsLocationResponseOutput {
	return o
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o HdfsLocationResponseOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsLocationResponse) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o HdfsLocationResponseOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsLocationResponse) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
// Expected value is 'HdfsLocation'.
func (o HdfsLocationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HdfsLocationResponse) string { return v.Type }).(pulumi.StringOutput)
}

// HDFS read settings.
type HdfsReadSettings struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies Distcp-related settings.
	DistcpSettings *DistcpSettings `pulumi:"distcpSettings"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery interface{} `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'HdfsReadSettings'.
	Type string `pulumi:"type"`
	// HDFS wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// HDFS wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// HdfsReadSettingsInput is an input type that accepts HdfsReadSettingsArgs and HdfsReadSettingsOutput values.
// You can construct a concrete instance of `HdfsReadSettingsInput` via:
//
//	HdfsReadSettingsArgs{...}
type HdfsReadSettingsInput interface {
	pulumi.Input

	ToHdfsReadSettingsOutput() HdfsReadSettingsOutput
	ToHdfsReadSettingsOutputWithContext(context.Context) HdfsReadSettingsOutput
}

// HDFS read settings.
type HdfsReadSettingsArgs struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion pulumi.Input `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// Specifies Distcp-related settings.
	DistcpSettings DistcpSettingsPtrInput `pulumi:"distcpSettings"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery pulumi.Input `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath pulumi.Input `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd pulumi.Input `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart pulumi.Input `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath pulumi.Input `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive pulumi.Input `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'HdfsReadSettings'.
	Type pulumi.StringInput `pulumi:"type"`
	// HDFS wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName pulumi.Input `pulumi:"wildcardFileName"`
	// HDFS wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath pulumi.Input `pulumi:"wildcardFolderPath"`
}

func (HdfsReadSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HdfsReadSettings)(nil)).Elem()
}

func (i HdfsReadSettingsArgs) ToHdfsReadSettingsOutput() HdfsReadSettingsOutput {
	return i.ToHdfsReadSettingsOutputWithContext(context.Background())
}

func (i HdfsReadSettingsArgs) ToHdfsReadSettingsOutputWithContext(ctx context.Context) HdfsReadSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HdfsReadSettingsOutput)
}

func (i HdfsReadSettingsArgs) ToHdfsReadSettingsPtrOutput() HdfsReadSettingsPtrOutput {
	return i.ToHdfsReadSettingsPtrOutputWithContext(context.Background())
}

func (i HdfsReadSettingsArgs) ToHdfsReadSettingsPtrOutputWithContext(ctx context.Context) HdfsReadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HdfsReadSettingsOutput).ToHdfsReadSettingsPtrOutputWithContext(ctx)
}

// HdfsReadSettingsPtrInput is an input type that accepts HdfsReadSettingsArgs, HdfsReadSettingsPtr and HdfsReadSettingsPtrOutput values.
// You can construct a concrete instance of `HdfsReadSettingsPtrInput` via:
//
//	        HdfsReadSettingsArgs{...}
//
//	or:
//
//	        nil
type HdfsReadSettingsPtrInput interface {
	pulumi.Input

	ToHdfsReadSettingsPtrOutput() HdfsReadSettingsPtrOutput
	ToHdfsReadSettingsPtrOutputWithContext(context.Context) HdfsReadSettingsPtrOutput
}

type hdfsReadSettingsPtrType HdfsReadSettingsArgs

func HdfsReadSettingsPtr(v *HdfsReadSettingsArgs) HdfsReadSettingsPtrInput {
	return (*hdfsReadSettingsPtrType)(v)
}

func (*hdfsReadSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HdfsReadSettings)(nil)).Elem()
}

func (i *hdfsReadSettingsPtrType) ToHdfsReadSettingsPtrOutput() HdfsReadSettingsPtrOutput {
	return i.ToHdfsReadSettingsPtrOutputWithContext(context.Background())
}

func (i *hdfsReadSettingsPtrType) ToHdfsReadSettingsPtrOutputWithContext(ctx context.Context) HdfsReadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HdfsReadSettingsPtrOutput)
}

// HDFS read settings.
type HdfsReadSettingsOutput struct{ *pulumi.OutputState }

func (HdfsReadSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HdfsReadSettings)(nil)).Elem()
}

func (o HdfsReadSettingsOutput) ToHdfsReadSettingsOutput() HdfsReadSettingsOutput {
	return o
}

func (o HdfsReadSettingsOutput) ToHdfsReadSettingsOutputWithContext(ctx context.Context) HdfsReadSettingsOutput {
	return o
}

func (o HdfsReadSettingsOutput) ToHdfsReadSettingsPtrOutput() HdfsReadSettingsPtrOutput {
	return o.ToHdfsReadSettingsPtrOutputWithContext(context.Background())
}

func (o HdfsReadSettingsOutput) ToHdfsReadSettingsPtrOutputWithContext(ctx context.Context) HdfsReadSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HdfsReadSettings) *HdfsReadSettings {
		return &v
	}).(HdfsReadSettingsPtrOutput)
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o HdfsReadSettingsOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsReadSettings) interface{} { return v.DeleteFilesAfterCompletion }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o HdfsReadSettingsOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsReadSettings) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Specifies Distcp-related settings.
func (o HdfsReadSettingsOutput) DistcpSettings() DistcpSettingsPtrOutput {
	return o.ApplyT(func(v HdfsReadSettings) *DistcpSettings { return v.DistcpSettings }).(DistcpSettingsPtrOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o HdfsReadSettingsOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsReadSettings) interface{} { return v.EnablePartitionDiscovery }).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o HdfsReadSettingsOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsReadSettings) interface{} { return v.FileListPath }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o HdfsReadSettingsOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsReadSettings) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o HdfsReadSettingsOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsReadSettings) interface{} { return v.ModifiedDatetimeEnd }).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o HdfsReadSettingsOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsReadSettings) interface{} { return v.ModifiedDatetimeStart }).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o HdfsReadSettingsOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsReadSettings) interface{} { return v.PartitionRootPath }).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o HdfsReadSettingsOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsReadSettings) interface{} { return v.Recursive }).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'HdfsReadSettings'.
func (o HdfsReadSettingsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HdfsReadSettings) string { return v.Type }).(pulumi.StringOutput)
}

// HDFS wildcardFileName. Type: string (or Expression with resultType string).
func (o HdfsReadSettingsOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsReadSettings) interface{} { return v.WildcardFileName }).(pulumi.AnyOutput)
}

// HDFS wildcardFolderPath. Type: string (or Expression with resultType string).
func (o HdfsReadSettingsOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsReadSettings) interface{} { return v.WildcardFolderPath }).(pulumi.AnyOutput)
}

type HdfsReadSettingsPtrOutput struct{ *pulumi.OutputState }

func (HdfsReadSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HdfsReadSettings)(nil)).Elem()
}

func (o HdfsReadSettingsPtrOutput) ToHdfsReadSettingsPtrOutput() HdfsReadSettingsPtrOutput {
	return o
}

func (o HdfsReadSettingsPtrOutput) ToHdfsReadSettingsPtrOutputWithContext(ctx context.Context) HdfsReadSettingsPtrOutput {
	return o
}

func (o HdfsReadSettingsPtrOutput) Elem() HdfsReadSettingsOutput {
	return o.ApplyT(func(v *HdfsReadSettings) HdfsReadSettings {
		if v != nil {
			return *v
		}
		var ret HdfsReadSettings
		return ret
	}).(HdfsReadSettingsOutput)
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o HdfsReadSettingsPtrOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v *HdfsReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.DeleteFilesAfterCompletion
	}).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o HdfsReadSettingsPtrOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v *HdfsReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableMetricsCollection
	}).(pulumi.AnyOutput)
}

// Specifies Distcp-related settings.
func (o HdfsReadSettingsPtrOutput) DistcpSettings() DistcpSettingsPtrOutput {
	return o.ApplyT(func(v *HdfsReadSettings) *DistcpSettings {
		if v == nil {
			return nil
		}
		return v.DistcpSettings
	}).(DistcpSettingsPtrOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o HdfsReadSettingsPtrOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v *HdfsReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.EnablePartitionDiscovery
	}).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o HdfsReadSettingsPtrOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *HdfsReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.FileListPath
	}).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o HdfsReadSettingsPtrOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v *HdfsReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentConnections
	}).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o HdfsReadSettingsPtrOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v *HdfsReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeEnd
	}).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o HdfsReadSettingsPtrOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v *HdfsReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeStart
	}).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o HdfsReadSettingsPtrOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *HdfsReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionRootPath
	}).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o HdfsReadSettingsPtrOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v *HdfsReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.Recursive
	}).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'HdfsReadSettings'.
func (o HdfsReadSettingsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HdfsReadSettings) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// HDFS wildcardFileName. Type: string (or Expression with resultType string).
func (o HdfsReadSettingsPtrOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v *HdfsReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFileName
	}).(pulumi.AnyOutput)
}

// HDFS wildcardFolderPath. Type: string (or Expression with resultType string).
func (o HdfsReadSettingsPtrOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *HdfsReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFolderPath
	}).(pulumi.AnyOutput)
}

// HDFS read settings.
type HdfsReadSettingsResponse struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies Distcp-related settings.
	DistcpSettings *DistcpSettingsResponse `pulumi:"distcpSettings"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery interface{} `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'HdfsReadSettings'.
	Type string `pulumi:"type"`
	// HDFS wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// HDFS wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// HDFS read settings.
type HdfsReadSettingsResponseOutput struct{ *pulumi.OutputState }

func (HdfsReadSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HdfsReadSettingsResponse)(nil)).Elem()
}

func (o HdfsReadSettingsResponseOutput) ToHdfsReadSettingsResponseOutput() HdfsReadSettingsResponseOutput {
	return o
}

func (o HdfsReadSettingsResponseOutput) ToHdfsReadSettingsResponseOutputWithContext(ctx context.Context) HdfsReadSettingsResponseOutput {
	return o
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o HdfsReadSettingsResponseOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsReadSettingsResponse) interface{} { return v.DeleteFilesAfterCompletion }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o HdfsReadSettingsResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsReadSettingsResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Specifies Distcp-related settings.
func (o HdfsReadSettingsResponseOutput) DistcpSettings() DistcpSettingsResponsePtrOutput {
	return o.ApplyT(func(v HdfsReadSettingsResponse) *DistcpSettingsResponse { return v.DistcpSettings }).(DistcpSettingsResponsePtrOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o HdfsReadSettingsResponseOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsReadSettingsResponse) interface{} { return v.EnablePartitionDiscovery }).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o HdfsReadSettingsResponseOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsReadSettingsResponse) interface{} { return v.FileListPath }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o HdfsReadSettingsResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsReadSettingsResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o HdfsReadSettingsResponseOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsReadSettingsResponse) interface{} { return v.ModifiedDatetimeEnd }).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o HdfsReadSettingsResponseOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsReadSettingsResponse) interface{} { return v.ModifiedDatetimeStart }).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o HdfsReadSettingsResponseOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsReadSettingsResponse) interface{} { return v.PartitionRootPath }).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o HdfsReadSettingsResponseOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsReadSettingsResponse) interface{} { return v.Recursive }).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'HdfsReadSettings'.
func (o HdfsReadSettingsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HdfsReadSettingsResponse) string { return v.Type }).(pulumi.StringOutput)
}

// HDFS wildcardFileName. Type: string (or Expression with resultType string).
func (o HdfsReadSettingsResponseOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsReadSettingsResponse) interface{} { return v.WildcardFileName }).(pulumi.AnyOutput)
}

// HDFS wildcardFolderPath. Type: string (or Expression with resultType string).
func (o HdfsReadSettingsResponseOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsReadSettingsResponse) interface{} { return v.WildcardFolderPath }).(pulumi.AnyOutput)
}

type HdfsReadSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (HdfsReadSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HdfsReadSettingsResponse)(nil)).Elem()
}

func (o HdfsReadSettingsResponsePtrOutput) ToHdfsReadSettingsResponsePtrOutput() HdfsReadSettingsResponsePtrOutput {
	return o
}

func (o HdfsReadSettingsResponsePtrOutput) ToHdfsReadSettingsResponsePtrOutputWithContext(ctx context.Context) HdfsReadSettingsResponsePtrOutput {
	return o
}

func (o HdfsReadSettingsResponsePtrOutput) Elem() HdfsReadSettingsResponseOutput {
	return o.ApplyT(func(v *HdfsReadSettingsResponse) HdfsReadSettingsResponse {
		if v != nil {
			return *v
		}
		var ret HdfsReadSettingsResponse
		return ret
	}).(HdfsReadSettingsResponseOutput)
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o HdfsReadSettingsResponsePtrOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v *HdfsReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.DeleteFilesAfterCompletion
	}).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o HdfsReadSettingsResponsePtrOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v *HdfsReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableMetricsCollection
	}).(pulumi.AnyOutput)
}

// Specifies Distcp-related settings.
func (o HdfsReadSettingsResponsePtrOutput) DistcpSettings() DistcpSettingsResponsePtrOutput {
	return o.ApplyT(func(v *HdfsReadSettingsResponse) *DistcpSettingsResponse {
		if v == nil {
			return nil
		}
		return v.DistcpSettings
	}).(DistcpSettingsResponsePtrOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o HdfsReadSettingsResponsePtrOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v *HdfsReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.EnablePartitionDiscovery
	}).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o HdfsReadSettingsResponsePtrOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *HdfsReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.FileListPath
	}).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o HdfsReadSettingsResponsePtrOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v *HdfsReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentConnections
	}).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o HdfsReadSettingsResponsePtrOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v *HdfsReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeEnd
	}).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o HdfsReadSettingsResponsePtrOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v *HdfsReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeStart
	}).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o HdfsReadSettingsResponsePtrOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *HdfsReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionRootPath
	}).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o HdfsReadSettingsResponsePtrOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v *HdfsReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Recursive
	}).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'HdfsReadSettings'.
func (o HdfsReadSettingsResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HdfsReadSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// HDFS wildcardFileName. Type: string (or Expression with resultType string).
func (o HdfsReadSettingsResponsePtrOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v *HdfsReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFileName
	}).(pulumi.AnyOutput)
}

// HDFS wildcardFolderPath. Type: string (or Expression with resultType string).
func (o HdfsReadSettingsResponsePtrOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *HdfsReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFolderPath
	}).(pulumi.AnyOutput)
}

// A copy activity HDFS source.
type HdfsSource struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies Distcp-related settings.
	DistcpSettings *DistcpSettings `pulumi:"distcpSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'HdfsSource'.
	Type string `pulumi:"type"`
}

// HdfsSourceInput is an input type that accepts HdfsSourceArgs and HdfsSourceOutput values.
// You can construct a concrete instance of `HdfsSourceInput` via:
//
//	HdfsSourceArgs{...}
type HdfsSourceInput interface {
	pulumi.Input

	ToHdfsSourceOutput() HdfsSourceOutput
	ToHdfsSourceOutputWithContext(context.Context) HdfsSourceOutput
}

// A copy activity HDFS source.
type HdfsSourceArgs struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// Specifies Distcp-related settings.
	DistcpSettings DistcpSettingsPtrInput `pulumi:"distcpSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive pulumi.Input `pulumi:"recursive"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'HdfsSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (HdfsSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HdfsSource)(nil)).Elem()
}

func (i HdfsSourceArgs) ToHdfsSourceOutput() HdfsSourceOutput {
	return i.ToHdfsSourceOutputWithContext(context.Background())
}

func (i HdfsSourceArgs) ToHdfsSourceOutputWithContext(ctx context.Context) HdfsSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HdfsSourceOutput)
}

// A copy activity HDFS source.
type HdfsSourceOutput struct{ *pulumi.OutputState }

func (HdfsSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HdfsSource)(nil)).Elem()
}

func (o HdfsSourceOutput) ToHdfsSourceOutput() HdfsSourceOutput {
	return o
}

func (o HdfsSourceOutput) ToHdfsSourceOutputWithContext(ctx context.Context) HdfsSourceOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o HdfsSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Specifies Distcp-related settings.
func (o HdfsSourceOutput) DistcpSettings() DistcpSettingsPtrOutput {
	return o.ApplyT(func(v HdfsSource) *DistcpSettings { return v.DistcpSettings }).(DistcpSettingsPtrOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o HdfsSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o HdfsSourceOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsSource) interface{} { return v.Recursive }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o HdfsSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o HdfsSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'HdfsSource'.
func (o HdfsSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HdfsSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity HDFS source.
type HdfsSourceResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies Distcp-related settings.
	DistcpSettings *DistcpSettingsResponse `pulumi:"distcpSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'HdfsSource'.
	Type string `pulumi:"type"`
}

// A copy activity HDFS source.
type HdfsSourceResponseOutput struct{ *pulumi.OutputState }

func (HdfsSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HdfsSourceResponse)(nil)).Elem()
}

func (o HdfsSourceResponseOutput) ToHdfsSourceResponseOutput() HdfsSourceResponseOutput {
	return o
}

func (o HdfsSourceResponseOutput) ToHdfsSourceResponseOutputWithContext(ctx context.Context) HdfsSourceResponseOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o HdfsSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Specifies Distcp-related settings.
func (o HdfsSourceResponseOutput) DistcpSettings() DistcpSettingsResponsePtrOutput {
	return o.ApplyT(func(v HdfsSourceResponse) *DistcpSettingsResponse { return v.DistcpSettings }).(DistcpSettingsResponsePtrOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o HdfsSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o HdfsSourceResponseOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsSourceResponse) interface{} { return v.Recursive }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o HdfsSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o HdfsSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'HdfsSource'.
func (o HdfsSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HdfsSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Hive Server linked service.
type HiveLinkedService struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication method used to access the Hive server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// IP address or host name of the Hive server, separated by ';' for multiple hosts (only when serviceDiscoveryMode is enable).
	Host interface{} `pulumi:"host"`
	// The partial URL corresponding to the Hive server.
	HttpPath interface{} `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the Username field
	Password interface{} `pulumi:"password"`
	// The TCP port that the Hive server uses to listen for client connections.
	Port interface{} `pulumi:"port"`
	// The type of Hive server.
	ServerType *string `pulumi:"serverType"`
	// true to indicate using the ZooKeeper service, false not.
	ServiceDiscoveryMode interface{} `pulumi:"serviceDiscoveryMode"`
	// The transport protocol to use in the Thrift layer.
	ThriftTransportProtocol *string `pulumi:"thriftTransportProtocol"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'Hive'.
	Type string `pulumi:"type"`
	// Specifies whether the driver uses native HiveQL queries,or converts them into an equivalent form in HiveQL.
	UseNativeQuery interface{} `pulumi:"useNativeQuery"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
	// The user name that you use to access Hive Server.
	Username interface{} `pulumi:"username"`
	// The namespace on ZooKeeper under which Hive Server 2 nodes are added.
	ZooKeeperNameSpace interface{} `pulumi:"zooKeeperNameSpace"`
}

// HiveLinkedServiceInput is an input type that accepts HiveLinkedServiceArgs and HiveLinkedServiceOutput values.
// You can construct a concrete instance of `HiveLinkedServiceInput` via:
//
//	HiveLinkedServiceArgs{...}
type HiveLinkedServiceInput interface {
	pulumi.Input

	ToHiveLinkedServiceOutput() HiveLinkedServiceOutput
	ToHiveLinkedServiceOutputWithContext(context.Context) HiveLinkedServiceOutput
}

// Hive Server linked service.
type HiveLinkedServiceArgs struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch pulumi.Input `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert pulumi.Input `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication method used to access the Hive server.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl pulumi.Input `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// IP address or host name of the Hive server, separated by ';' for multiple hosts (only when serviceDiscoveryMode is enable).
	Host pulumi.Input `pulumi:"host"`
	// The partial URL corresponding to the Hive server.
	HttpPath pulumi.Input `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the Username field
	Password pulumi.Input `pulumi:"password"`
	// The TCP port that the Hive server uses to listen for client connections.
	Port pulumi.Input `pulumi:"port"`
	// The type of Hive server.
	ServerType pulumi.StringPtrInput `pulumi:"serverType"`
	// true to indicate using the ZooKeeper service, false not.
	ServiceDiscoveryMode pulumi.Input `pulumi:"serviceDiscoveryMode"`
	// The transport protocol to use in the Thrift layer.
	ThriftTransportProtocol pulumi.StringPtrInput `pulumi:"thriftTransportProtocol"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath pulumi.Input `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'Hive'.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the driver uses native HiveQL queries,or converts them into an equivalent form in HiveQL.
	UseNativeQuery pulumi.Input `pulumi:"useNativeQuery"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore pulumi.Input `pulumi:"useSystemTrustStore"`
	// The user name that you use to access Hive Server.
	Username pulumi.Input `pulumi:"username"`
	// The namespace on ZooKeeper under which Hive Server 2 nodes are added.
	ZooKeeperNameSpace pulumi.Input `pulumi:"zooKeeperNameSpace"`
}

func (HiveLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HiveLinkedService)(nil)).Elem()
}

func (i HiveLinkedServiceArgs) ToHiveLinkedServiceOutput() HiveLinkedServiceOutput {
	return i.ToHiveLinkedServiceOutputWithContext(context.Background())
}

func (i HiveLinkedServiceArgs) ToHiveLinkedServiceOutputWithContext(ctx context.Context) HiveLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HiveLinkedServiceOutput)
}

// Hive Server linked service.
type HiveLinkedServiceOutput struct{ *pulumi.OutputState }

func (HiveLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HiveLinkedService)(nil)).Elem()
}

func (o HiveLinkedServiceOutput) ToHiveLinkedServiceOutput() HiveLinkedServiceOutput {
	return o
}

func (o HiveLinkedServiceOutput) ToHiveLinkedServiceOutputWithContext(ctx context.Context) HiveLinkedServiceOutput {
	return o
}

// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
func (o HiveLinkedServiceOutput) AllowHostNameCNMismatch() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedService) interface{} { return v.AllowHostNameCNMismatch }).(pulumi.AnyOutput)
}

// Specifies whether to allow self-signed certificates from the server. The default value is false.
func (o HiveLinkedServiceOutput) AllowSelfSignedServerCert() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedService) interface{} { return v.AllowSelfSignedServerCert }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o HiveLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v HiveLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication method used to access the Hive server.
func (o HiveLinkedServiceOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v HiveLinkedService) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The integration runtime reference.
func (o HiveLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v HiveLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o HiveLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HiveLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
func (o HiveLinkedServiceOutput) EnableSsl() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedService) interface{} { return v.EnableSsl }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o HiveLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HiveLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// IP address or host name of the Hive server, separated by ';' for multiple hosts (only when serviceDiscoveryMode is enable).
func (o HiveLinkedServiceOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedService) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// The partial URL corresponding to the Hive server.
func (o HiveLinkedServiceOutput) HttpPath() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedService) interface{} { return v.HttpPath }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o HiveLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v HiveLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The password corresponding to the user name that you provided in the Username field
func (o HiveLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port that the Hive server uses to listen for client connections.
func (o HiveLinkedServiceOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedService) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The type of Hive server.
func (o HiveLinkedServiceOutput) ServerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HiveLinkedService) *string { return v.ServerType }).(pulumi.StringPtrOutput)
}

// true to indicate using the ZooKeeper service, false not.
func (o HiveLinkedServiceOutput) ServiceDiscoveryMode() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedService) interface{} { return v.ServiceDiscoveryMode }).(pulumi.AnyOutput)
}

// The transport protocol to use in the Thrift layer.
func (o HiveLinkedServiceOutput) ThriftTransportProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HiveLinkedService) *string { return v.ThriftTransportProtocol }).(pulumi.StringPtrOutput)
}

// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
func (o HiveLinkedServiceOutput) TrustedCertPath() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedService) interface{} { return v.TrustedCertPath }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Hive'.
func (o HiveLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HiveLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the driver uses native HiveQL queries,or converts them into an equivalent form in HiveQL.
func (o HiveLinkedServiceOutput) UseNativeQuery() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedService) interface{} { return v.UseNativeQuery }).(pulumi.AnyOutput)
}

// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
func (o HiveLinkedServiceOutput) UseSystemTrustStore() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedService) interface{} { return v.UseSystemTrustStore }).(pulumi.AnyOutput)
}

// The user name that you use to access Hive Server.
func (o HiveLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// The namespace on ZooKeeper under which Hive Server 2 nodes are added.
func (o HiveLinkedServiceOutput) ZooKeeperNameSpace() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedService) interface{} { return v.ZooKeeperNameSpace }).(pulumi.AnyOutput)
}

// Hive Server linked service.
type HiveLinkedServiceResponse struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication method used to access the Hive server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// IP address or host name of the Hive server, separated by ';' for multiple hosts (only when serviceDiscoveryMode is enable).
	Host interface{} `pulumi:"host"`
	// The partial URL corresponding to the Hive server.
	HttpPath interface{} `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the Username field
	Password interface{} `pulumi:"password"`
	// The TCP port that the Hive server uses to listen for client connections.
	Port interface{} `pulumi:"port"`
	// The type of Hive server.
	ServerType *string `pulumi:"serverType"`
	// true to indicate using the ZooKeeper service, false not.
	ServiceDiscoveryMode interface{} `pulumi:"serviceDiscoveryMode"`
	// The transport protocol to use in the Thrift layer.
	ThriftTransportProtocol *string `pulumi:"thriftTransportProtocol"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'Hive'.
	Type string `pulumi:"type"`
	// Specifies whether the driver uses native HiveQL queries,or converts them into an equivalent form in HiveQL.
	UseNativeQuery interface{} `pulumi:"useNativeQuery"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
	// The user name that you use to access Hive Server.
	Username interface{} `pulumi:"username"`
	// The namespace on ZooKeeper under which Hive Server 2 nodes are added.
	ZooKeeperNameSpace interface{} `pulumi:"zooKeeperNameSpace"`
}

// Hive Server linked service.
type HiveLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (HiveLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HiveLinkedServiceResponse)(nil)).Elem()
}

func (o HiveLinkedServiceResponseOutput) ToHiveLinkedServiceResponseOutput() HiveLinkedServiceResponseOutput {
	return o
}

func (o HiveLinkedServiceResponseOutput) ToHiveLinkedServiceResponseOutputWithContext(ctx context.Context) HiveLinkedServiceResponseOutput {
	return o
}

// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
func (o HiveLinkedServiceResponseOutput) AllowHostNameCNMismatch() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) interface{} { return v.AllowHostNameCNMismatch }).(pulumi.AnyOutput)
}

// Specifies whether to allow self-signed certificates from the server. The default value is false.
func (o HiveLinkedServiceResponseOutput) AllowSelfSignedServerCert() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) interface{} { return v.AllowSelfSignedServerCert }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o HiveLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication method used to access the Hive server.
func (o HiveLinkedServiceResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The integration runtime reference.
func (o HiveLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o HiveLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
func (o HiveLinkedServiceResponseOutput) EnableSsl() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) interface{} { return v.EnableSsl }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o HiveLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// IP address or host name of the Hive server, separated by ';' for multiple hosts (only when serviceDiscoveryMode is enable).
func (o HiveLinkedServiceResponseOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// The partial URL corresponding to the Hive server.
func (o HiveLinkedServiceResponseOutput) HttpPath() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) interface{} { return v.HttpPath }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o HiveLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The password corresponding to the user name that you provided in the Username field
func (o HiveLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port that the Hive server uses to listen for client connections.
func (o HiveLinkedServiceResponseOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The type of Hive server.
func (o HiveLinkedServiceResponseOutput) ServerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) *string { return v.ServerType }).(pulumi.StringPtrOutput)
}

// true to indicate using the ZooKeeper service, false not.
func (o HiveLinkedServiceResponseOutput) ServiceDiscoveryMode() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) interface{} { return v.ServiceDiscoveryMode }).(pulumi.AnyOutput)
}

// The transport protocol to use in the Thrift layer.
func (o HiveLinkedServiceResponseOutput) ThriftTransportProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) *string { return v.ThriftTransportProtocol }).(pulumi.StringPtrOutput)
}

// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
func (o HiveLinkedServiceResponseOutput) TrustedCertPath() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) interface{} { return v.TrustedCertPath }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Hive'.
func (o HiveLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the driver uses native HiveQL queries,or converts them into an equivalent form in HiveQL.
func (o HiveLinkedServiceResponseOutput) UseNativeQuery() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) interface{} { return v.UseNativeQuery }).(pulumi.AnyOutput)
}

// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
func (o HiveLinkedServiceResponseOutput) UseSystemTrustStore() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) interface{} { return v.UseSystemTrustStore }).(pulumi.AnyOutput)
}

// The user name that you use to access Hive Server.
func (o HiveLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// The namespace on ZooKeeper under which Hive Server 2 nodes are added.
func (o HiveLinkedServiceResponseOutput) ZooKeeperNameSpace() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveLinkedServiceResponse) interface{} { return v.ZooKeeperNameSpace }).(pulumi.AnyOutput)
}

// Hive Server dataset.
type HiveObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Hive. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'HiveObject'.
	Type string `pulumi:"type"`
}

// HiveObjectDatasetInput is an input type that accepts HiveObjectDatasetArgs and HiveObjectDatasetOutput values.
// You can construct a concrete instance of `HiveObjectDatasetInput` via:
//
//	HiveObjectDatasetArgs{...}
type HiveObjectDatasetInput interface {
	pulumi.Input

	ToHiveObjectDatasetOutput() HiveObjectDatasetOutput
	ToHiveObjectDatasetOutputWithContext(context.Context) HiveObjectDatasetOutput
}

// Hive Server dataset.
type HiveObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Hive. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'HiveObject'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (HiveObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HiveObjectDataset)(nil)).Elem()
}

func (i HiveObjectDatasetArgs) ToHiveObjectDatasetOutput() HiveObjectDatasetOutput {
	return i.ToHiveObjectDatasetOutputWithContext(context.Background())
}

func (i HiveObjectDatasetArgs) ToHiveObjectDatasetOutputWithContext(ctx context.Context) HiveObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HiveObjectDatasetOutput)
}

// Hive Server dataset.
type HiveObjectDatasetOutput struct{ *pulumi.OutputState }

func (HiveObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HiveObjectDataset)(nil)).Elem()
}

func (o HiveObjectDatasetOutput) ToHiveObjectDatasetOutput() HiveObjectDatasetOutput {
	return o
}

func (o HiveObjectDatasetOutput) ToHiveObjectDatasetOutputWithContext(ctx context.Context) HiveObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o HiveObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v HiveObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o HiveObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HiveObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o HiveObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v HiveObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o HiveObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v HiveObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o HiveObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v HiveObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o HiveObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o HiveObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Hive. Type: string (or Expression with resultType string).
func (o HiveObjectDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveObjectDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o HiveObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'HiveObject'.
func (o HiveObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HiveObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Hive Server dataset.
type HiveObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Hive. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'HiveObject'.
	Type string `pulumi:"type"`
}

// Hive Server dataset.
type HiveObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (HiveObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HiveObjectDatasetResponse)(nil)).Elem()
}

func (o HiveObjectDatasetResponseOutput) ToHiveObjectDatasetResponseOutput() HiveObjectDatasetResponseOutput {
	return o
}

func (o HiveObjectDatasetResponseOutput) ToHiveObjectDatasetResponseOutputWithContext(ctx context.Context) HiveObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o HiveObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v HiveObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o HiveObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HiveObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o HiveObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v HiveObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o HiveObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v HiveObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o HiveObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v HiveObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o HiveObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o HiveObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Hive. Type: string (or Expression with resultType string).
func (o HiveObjectDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveObjectDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o HiveObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'HiveObject'.
func (o HiveObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HiveObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Hive Server source.
type HiveSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'HiveSource'.
	Type string `pulumi:"type"`
}

// HiveSourceInput is an input type that accepts HiveSourceArgs and HiveSourceOutput values.
// You can construct a concrete instance of `HiveSourceInput` via:
//
//	HiveSourceArgs{...}
type HiveSourceInput interface {
	pulumi.Input

	ToHiveSourceOutput() HiveSourceOutput
	ToHiveSourceOutputWithContext(context.Context) HiveSourceOutput
}

// A copy activity Hive Server source.
type HiveSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'HiveSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (HiveSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HiveSource)(nil)).Elem()
}

func (i HiveSourceArgs) ToHiveSourceOutput() HiveSourceOutput {
	return i.ToHiveSourceOutputWithContext(context.Background())
}

func (i HiveSourceArgs) ToHiveSourceOutputWithContext(ctx context.Context) HiveSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HiveSourceOutput)
}

// A copy activity Hive Server source.
type HiveSourceOutput struct{ *pulumi.OutputState }

func (HiveSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HiveSource)(nil)).Elem()
}

func (o HiveSourceOutput) ToHiveSourceOutput() HiveSourceOutput {
	return o
}

func (o HiveSourceOutput) ToHiveSourceOutputWithContext(ctx context.Context) HiveSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o HiveSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o HiveSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o HiveSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o HiveSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o HiveSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o HiveSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o HiveSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'HiveSource'.
func (o HiveSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HiveSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Hive Server source.
type HiveSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'HiveSource'.
	Type string `pulumi:"type"`
}

// A copy activity Hive Server source.
type HiveSourceResponseOutput struct{ *pulumi.OutputState }

func (HiveSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HiveSourceResponse)(nil)).Elem()
}

func (o HiveSourceResponseOutput) ToHiveSourceResponseOutput() HiveSourceResponseOutput {
	return o
}

func (o HiveSourceResponseOutput) ToHiveSourceResponseOutputWithContext(ctx context.Context) HiveSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o HiveSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o HiveSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o HiveSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o HiveSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o HiveSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o HiveSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o HiveSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v HiveSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'HiveSource'.
func (o HiveSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HiveSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A file in an HTTP web server.
type HttpDataset struct {
	// The headers for the HTTP Request. e.g. request-header-name-1:request-header-value-1
	// ...
	// request-header-name-n:request-header-value-n Type: string (or Expression with resultType string).
	AdditionalHeaders interface{} `pulumi:"additionalHeaders"`
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used on files.
	Compression *DatasetCompression `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// The format of files.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The relative URL based on the URL in the HttpLinkedService refers to an HTTP file Type: string (or Expression with resultType string).
	RelativeUrl interface{} `pulumi:"relativeUrl"`
	// The body for the HTTP request. Type: string (or Expression with resultType string).
	RequestBody interface{} `pulumi:"requestBody"`
	// The HTTP method for the HTTP request. Type: string (or Expression with resultType string).
	RequestMethod interface{} `pulumi:"requestMethod"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'HttpFile'.
	Type string `pulumi:"type"`
}

// HttpDatasetInput is an input type that accepts HttpDatasetArgs and HttpDatasetOutput values.
// You can construct a concrete instance of `HttpDatasetInput` via:
//
//	HttpDatasetArgs{...}
type HttpDatasetInput interface {
	pulumi.Input

	ToHttpDatasetOutput() HttpDatasetOutput
	ToHttpDatasetOutputWithContext(context.Context) HttpDatasetOutput
}

// A file in an HTTP web server.
type HttpDatasetArgs struct {
	// The headers for the HTTP Request. e.g. request-header-name-1:request-header-value-1
	// ...
	// request-header-name-n:request-header-value-n Type: string (or Expression with resultType string).
	AdditionalHeaders pulumi.Input `pulumi:"additionalHeaders"`
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The data compression method used on files.
	Compression DatasetCompressionPtrInput `pulumi:"compression"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// The format of files.
	Format pulumi.Input `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The relative URL based on the URL in the HttpLinkedService refers to an HTTP file Type: string (or Expression with resultType string).
	RelativeUrl pulumi.Input `pulumi:"relativeUrl"`
	// The body for the HTTP request. Type: string (or Expression with resultType string).
	RequestBody pulumi.Input `pulumi:"requestBody"`
	// The HTTP method for the HTTP request. Type: string (or Expression with resultType string).
	RequestMethod pulumi.Input `pulumi:"requestMethod"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'HttpFile'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (HttpDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpDataset)(nil)).Elem()
}

func (i HttpDatasetArgs) ToHttpDatasetOutput() HttpDatasetOutput {
	return i.ToHttpDatasetOutputWithContext(context.Background())
}

func (i HttpDatasetArgs) ToHttpDatasetOutputWithContext(ctx context.Context) HttpDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpDatasetOutput)
}

// A file in an HTTP web server.
type HttpDatasetOutput struct{ *pulumi.OutputState }

func (HttpDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpDataset)(nil)).Elem()
}

func (o HttpDatasetOutput) ToHttpDatasetOutput() HttpDatasetOutput {
	return o
}

func (o HttpDatasetOutput) ToHttpDatasetOutputWithContext(ctx context.Context) HttpDatasetOutput {
	return o
}

// The headers for the HTTP Request. e.g. request-header-name-1:request-header-value-1
// ...
// request-header-name-n:request-header-value-n Type: string (or Expression with resultType string).
func (o HttpDatasetOutput) AdditionalHeaders() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpDataset) interface{} { return v.AdditionalHeaders }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the Dataset.
func (o HttpDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v HttpDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The data compression method used on files.
func (o HttpDatasetOutput) Compression() DatasetCompressionPtrOutput {
	return o.ApplyT(func(v HttpDataset) *DatasetCompression { return v.Compression }).(DatasetCompressionPtrOutput)
}

// Dataset description.
func (o HttpDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o HttpDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v HttpDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// The format of files.
func (o HttpDatasetOutput) Format() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpDataset) interface{} { return v.Format }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o HttpDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v HttpDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o HttpDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v HttpDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The relative URL based on the URL in the HttpLinkedService refers to an HTTP file Type: string (or Expression with resultType string).
func (o HttpDatasetOutput) RelativeUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpDataset) interface{} { return v.RelativeUrl }).(pulumi.AnyOutput)
}

// The body for the HTTP request. Type: string (or Expression with resultType string).
func (o HttpDatasetOutput) RequestBody() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpDataset) interface{} { return v.RequestBody }).(pulumi.AnyOutput)
}

// The HTTP method for the HTTP request. Type: string (or Expression with resultType string).
func (o HttpDatasetOutput) RequestMethod() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpDataset) interface{} { return v.RequestMethod }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o HttpDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o HttpDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'HttpFile'.
func (o HttpDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HttpDataset) string { return v.Type }).(pulumi.StringOutput)
}

// A file in an HTTP web server.
type HttpDatasetResponse struct {
	// The headers for the HTTP Request. e.g. request-header-name-1:request-header-value-1
	// ...
	// request-header-name-n:request-header-value-n Type: string (or Expression with resultType string).
	AdditionalHeaders interface{} `pulumi:"additionalHeaders"`
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used on files.
	Compression *DatasetCompressionResponse `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// The format of files.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The relative URL based on the URL in the HttpLinkedService refers to an HTTP file Type: string (or Expression with resultType string).
	RelativeUrl interface{} `pulumi:"relativeUrl"`
	// The body for the HTTP request. Type: string (or Expression with resultType string).
	RequestBody interface{} `pulumi:"requestBody"`
	// The HTTP method for the HTTP request. Type: string (or Expression with resultType string).
	RequestMethod interface{} `pulumi:"requestMethod"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'HttpFile'.
	Type string `pulumi:"type"`
}

// A file in an HTTP web server.
type HttpDatasetResponseOutput struct{ *pulumi.OutputState }

func (HttpDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpDatasetResponse)(nil)).Elem()
}

func (o HttpDatasetResponseOutput) ToHttpDatasetResponseOutput() HttpDatasetResponseOutput {
	return o
}

func (o HttpDatasetResponseOutput) ToHttpDatasetResponseOutputWithContext(ctx context.Context) HttpDatasetResponseOutput {
	return o
}

// The headers for the HTTP Request. e.g. request-header-name-1:request-header-value-1
// ...
// request-header-name-n:request-header-value-n Type: string (or Expression with resultType string).
func (o HttpDatasetResponseOutput) AdditionalHeaders() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpDatasetResponse) interface{} { return v.AdditionalHeaders }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the Dataset.
func (o HttpDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v HttpDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The data compression method used on files.
func (o HttpDatasetResponseOutput) Compression() DatasetCompressionResponsePtrOutput {
	return o.ApplyT(func(v HttpDatasetResponse) *DatasetCompressionResponse { return v.Compression }).(DatasetCompressionResponsePtrOutput)
}

// Dataset description.
func (o HttpDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o HttpDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v HttpDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// The format of files.
func (o HttpDatasetResponseOutput) Format() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpDatasetResponse) interface{} { return v.Format }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o HttpDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v HttpDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o HttpDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v HttpDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The relative URL based on the URL in the HttpLinkedService refers to an HTTP file Type: string (or Expression with resultType string).
func (o HttpDatasetResponseOutput) RelativeUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpDatasetResponse) interface{} { return v.RelativeUrl }).(pulumi.AnyOutput)
}

// The body for the HTTP request. Type: string (or Expression with resultType string).
func (o HttpDatasetResponseOutput) RequestBody() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpDatasetResponse) interface{} { return v.RequestBody }).(pulumi.AnyOutput)
}

// The HTTP method for the HTTP request. Type: string (or Expression with resultType string).
func (o HttpDatasetResponseOutput) RequestMethod() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpDatasetResponse) interface{} { return v.RequestMethod }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o HttpDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o HttpDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'HttpFile'.
func (o HttpDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HttpDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for an HTTP source.
type HttpLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The additional HTTP headers in the request to RESTful API used for authorization. Type: key value pairs (value should be string type).
	AuthHeaders interface{} `pulumi:"authHeaders"`
	// The authentication type to be used to connect to the HTTP server.
	AuthenticationType *string `pulumi:"authenticationType"`
	// Thumbprint of certificate for ClientCertificate authentication. Only valid for on-premises copy. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
	CertThumbprint interface{} `pulumi:"certThumbprint"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Base64 encoded certificate data for ClientCertificate authentication. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
	EmbeddedCertData interface{} `pulumi:"embeddedCertData"`
	// If true, validate the HTTPS server SSL certificate. Default value is true. Type: boolean (or Expression with resultType boolean).
	EnableServerCertificateValidation interface{} `pulumi:"enableServerCertificateValidation"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for Basic, Digest, Windows, or ClientCertificate with EmbeddedCertData authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'HttpServer'.
	Type string `pulumi:"type"`
	// The base URL of the HTTP endpoint, e.g. https://www.microsoft.com. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// User name for Basic, Digest, or Windows authentication. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// HttpLinkedServiceInput is an input type that accepts HttpLinkedServiceArgs and HttpLinkedServiceOutput values.
// You can construct a concrete instance of `HttpLinkedServiceInput` via:
//
//	HttpLinkedServiceArgs{...}
type HttpLinkedServiceInput interface {
	pulumi.Input

	ToHttpLinkedServiceOutput() HttpLinkedServiceOutput
	ToHttpLinkedServiceOutputWithContext(context.Context) HttpLinkedServiceOutput
}

// Linked service for an HTTP source.
type HttpLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The additional HTTP headers in the request to RESTful API used for authorization. Type: key value pairs (value should be string type).
	AuthHeaders pulumi.Input `pulumi:"authHeaders"`
	// The authentication type to be used to connect to the HTTP server.
	AuthenticationType pulumi.StringPtrInput `pulumi:"authenticationType"`
	// Thumbprint of certificate for ClientCertificate authentication. Only valid for on-premises copy. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
	CertThumbprint pulumi.Input `pulumi:"certThumbprint"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Base64 encoded certificate data for ClientCertificate authentication. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
	EmbeddedCertData pulumi.Input `pulumi:"embeddedCertData"`
	// If true, validate the HTTPS server SSL certificate. Default value is true. Type: boolean (or Expression with resultType boolean).
	EnableServerCertificateValidation pulumi.Input `pulumi:"enableServerCertificateValidation"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password for Basic, Digest, Windows, or ClientCertificate with EmbeddedCertData authentication.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'HttpServer'.
	Type pulumi.StringInput `pulumi:"type"`
	// The base URL of the HTTP endpoint, e.g. https://www.microsoft.com. Type: string (or Expression with resultType string).
	Url pulumi.Input `pulumi:"url"`
	// User name for Basic, Digest, or Windows authentication. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (HttpLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpLinkedService)(nil)).Elem()
}

func (i HttpLinkedServiceArgs) ToHttpLinkedServiceOutput() HttpLinkedServiceOutput {
	return i.ToHttpLinkedServiceOutputWithContext(context.Background())
}

func (i HttpLinkedServiceArgs) ToHttpLinkedServiceOutputWithContext(ctx context.Context) HttpLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpLinkedServiceOutput)
}

// Linked service for an HTTP source.
type HttpLinkedServiceOutput struct{ *pulumi.OutputState }

func (HttpLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpLinkedService)(nil)).Elem()
}

func (o HttpLinkedServiceOutput) ToHttpLinkedServiceOutput() HttpLinkedServiceOutput {
	return o
}

func (o HttpLinkedServiceOutput) ToHttpLinkedServiceOutputWithContext(ctx context.Context) HttpLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o HttpLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v HttpLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The additional HTTP headers in the request to RESTful API used for authorization. Type: key value pairs (value should be string type).
func (o HttpLinkedServiceOutput) AuthHeaders() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpLinkedService) interface{} { return v.AuthHeaders }).(pulumi.AnyOutput)
}

// The authentication type to be used to connect to the HTTP server.
func (o HttpLinkedServiceOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpLinkedService) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// Thumbprint of certificate for ClientCertificate authentication. Only valid for on-premises copy. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
func (o HttpLinkedServiceOutput) CertThumbprint() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpLinkedService) interface{} { return v.CertThumbprint }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o HttpLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v HttpLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o HttpLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Base64 encoded certificate data for ClientCertificate authentication. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
func (o HttpLinkedServiceOutput) EmbeddedCertData() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpLinkedService) interface{} { return v.EmbeddedCertData }).(pulumi.AnyOutput)
}

// If true, validate the HTTPS server SSL certificate. Default value is true. Type: boolean (or Expression with resultType boolean).
func (o HttpLinkedServiceOutput) EnableServerCertificateValidation() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpLinkedService) interface{} { return v.EnableServerCertificateValidation }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o HttpLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o HttpLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v HttpLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Password for Basic, Digest, Windows, or ClientCertificate with EmbeddedCertData authentication.
func (o HttpLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'HttpServer'.
func (o HttpLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HttpLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The base URL of the HTTP endpoint, e.g. https://www.microsoft.com. Type: string (or Expression with resultType string).
func (o HttpLinkedServiceOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpLinkedService) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// User name for Basic, Digest, or Windows authentication. Type: string (or Expression with resultType string).
func (o HttpLinkedServiceOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpLinkedService) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// Linked service for an HTTP source.
type HttpLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The additional HTTP headers in the request to RESTful API used for authorization. Type: key value pairs (value should be string type).
	AuthHeaders interface{} `pulumi:"authHeaders"`
	// The authentication type to be used to connect to the HTTP server.
	AuthenticationType *string `pulumi:"authenticationType"`
	// Thumbprint of certificate for ClientCertificate authentication. Only valid for on-premises copy. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
	CertThumbprint interface{} `pulumi:"certThumbprint"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Base64 encoded certificate data for ClientCertificate authentication. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
	EmbeddedCertData interface{} `pulumi:"embeddedCertData"`
	// If true, validate the HTTPS server SSL certificate. Default value is true. Type: boolean (or Expression with resultType boolean).
	EnableServerCertificateValidation interface{} `pulumi:"enableServerCertificateValidation"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for Basic, Digest, Windows, or ClientCertificate with EmbeddedCertData authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'HttpServer'.
	Type string `pulumi:"type"`
	// The base URL of the HTTP endpoint, e.g. https://www.microsoft.com. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// User name for Basic, Digest, or Windows authentication. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// Linked service for an HTTP source.
type HttpLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (HttpLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpLinkedServiceResponse)(nil)).Elem()
}

func (o HttpLinkedServiceResponseOutput) ToHttpLinkedServiceResponseOutput() HttpLinkedServiceResponseOutput {
	return o
}

func (o HttpLinkedServiceResponseOutput) ToHttpLinkedServiceResponseOutputWithContext(ctx context.Context) HttpLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o HttpLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v HttpLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The additional HTTP headers in the request to RESTful API used for authorization. Type: key value pairs (value should be string type).
func (o HttpLinkedServiceResponseOutput) AuthHeaders() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpLinkedServiceResponse) interface{} { return v.AuthHeaders }).(pulumi.AnyOutput)
}

// The authentication type to be used to connect to the HTTP server.
func (o HttpLinkedServiceResponseOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpLinkedServiceResponse) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// Thumbprint of certificate for ClientCertificate authentication. Only valid for on-premises copy. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
func (o HttpLinkedServiceResponseOutput) CertThumbprint() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpLinkedServiceResponse) interface{} { return v.CertThumbprint }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o HttpLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v HttpLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o HttpLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Base64 encoded certificate data for ClientCertificate authentication. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
func (o HttpLinkedServiceResponseOutput) EmbeddedCertData() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpLinkedServiceResponse) interface{} { return v.EmbeddedCertData }).(pulumi.AnyOutput)
}

// If true, validate the HTTPS server SSL certificate. Default value is true. Type: boolean (or Expression with resultType boolean).
func (o HttpLinkedServiceResponseOutput) EnableServerCertificateValidation() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpLinkedServiceResponse) interface{} { return v.EnableServerCertificateValidation }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o HttpLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o HttpLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v HttpLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password for Basic, Digest, Windows, or ClientCertificate with EmbeddedCertData authentication.
func (o HttpLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'HttpServer'.
func (o HttpLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HttpLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The base URL of the HTTP endpoint, e.g. https://www.microsoft.com. Type: string (or Expression with resultType string).
func (o HttpLinkedServiceResponseOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpLinkedServiceResponse) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// User name for Basic, Digest, or Windows authentication. Type: string (or Expression with resultType string).
func (o HttpLinkedServiceResponseOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpLinkedServiceResponse) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// Http read settings.
type HttpReadSettings struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string).
	AdditionalHeaders interface{} `pulumi:"additionalHeaders"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string).
	RequestBody interface{} `pulumi:"requestBody"`
	// The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string).
	RequestMethod interface{} `pulumi:"requestMethod"`
	// Specifies the timeout for a HTTP client to get HTTP response from HTTP server. Type: string (or Expression with resultType string).
	RequestTimeout interface{} `pulumi:"requestTimeout"`
	// The read setting type.
	// Expected value is 'HttpReadSettings'.
	Type string `pulumi:"type"`
}

// HttpReadSettingsInput is an input type that accepts HttpReadSettingsArgs and HttpReadSettingsOutput values.
// You can construct a concrete instance of `HttpReadSettingsInput` via:
//
//	HttpReadSettingsArgs{...}
type HttpReadSettingsInput interface {
	pulumi.Input

	ToHttpReadSettingsOutput() HttpReadSettingsOutput
	ToHttpReadSettingsOutputWithContext(context.Context) HttpReadSettingsOutput
}

// Http read settings.
type HttpReadSettingsArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string).
	AdditionalHeaders pulumi.Input `pulumi:"additionalHeaders"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string).
	RequestBody pulumi.Input `pulumi:"requestBody"`
	// The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string).
	RequestMethod pulumi.Input `pulumi:"requestMethod"`
	// Specifies the timeout for a HTTP client to get HTTP response from HTTP server. Type: string (or Expression with resultType string).
	RequestTimeout pulumi.Input `pulumi:"requestTimeout"`
	// The read setting type.
	// Expected value is 'HttpReadSettings'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (HttpReadSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpReadSettings)(nil)).Elem()
}

func (i HttpReadSettingsArgs) ToHttpReadSettingsOutput() HttpReadSettingsOutput {
	return i.ToHttpReadSettingsOutputWithContext(context.Background())
}

func (i HttpReadSettingsArgs) ToHttpReadSettingsOutputWithContext(ctx context.Context) HttpReadSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpReadSettingsOutput)
}

func (i HttpReadSettingsArgs) ToHttpReadSettingsPtrOutput() HttpReadSettingsPtrOutput {
	return i.ToHttpReadSettingsPtrOutputWithContext(context.Background())
}

func (i HttpReadSettingsArgs) ToHttpReadSettingsPtrOutputWithContext(ctx context.Context) HttpReadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpReadSettingsOutput).ToHttpReadSettingsPtrOutputWithContext(ctx)
}

// HttpReadSettingsPtrInput is an input type that accepts HttpReadSettingsArgs, HttpReadSettingsPtr and HttpReadSettingsPtrOutput values.
// You can construct a concrete instance of `HttpReadSettingsPtrInput` via:
//
//	        HttpReadSettingsArgs{...}
//
//	or:
//
//	        nil
type HttpReadSettingsPtrInput interface {
	pulumi.Input

	ToHttpReadSettingsPtrOutput() HttpReadSettingsPtrOutput
	ToHttpReadSettingsPtrOutputWithContext(context.Context) HttpReadSettingsPtrOutput
}

type httpReadSettingsPtrType HttpReadSettingsArgs

func HttpReadSettingsPtr(v *HttpReadSettingsArgs) HttpReadSettingsPtrInput {
	return (*httpReadSettingsPtrType)(v)
}

func (*httpReadSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpReadSettings)(nil)).Elem()
}

func (i *httpReadSettingsPtrType) ToHttpReadSettingsPtrOutput() HttpReadSettingsPtrOutput {
	return i.ToHttpReadSettingsPtrOutputWithContext(context.Background())
}

func (i *httpReadSettingsPtrType) ToHttpReadSettingsPtrOutputWithContext(ctx context.Context) HttpReadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpReadSettingsPtrOutput)
}

// Http read settings.
type HttpReadSettingsOutput struct{ *pulumi.OutputState }

func (HttpReadSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpReadSettings)(nil)).Elem()
}

func (o HttpReadSettingsOutput) ToHttpReadSettingsOutput() HttpReadSettingsOutput {
	return o
}

func (o HttpReadSettingsOutput) ToHttpReadSettingsOutputWithContext(ctx context.Context) HttpReadSettingsOutput {
	return o
}

func (o HttpReadSettingsOutput) ToHttpReadSettingsPtrOutput() HttpReadSettingsPtrOutput {
	return o.ToHttpReadSettingsPtrOutputWithContext(context.Background())
}

func (o HttpReadSettingsOutput) ToHttpReadSettingsPtrOutputWithContext(ctx context.Context) HttpReadSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HttpReadSettings) *HttpReadSettings {
		return &v
	}).(HttpReadSettingsPtrOutput)
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o HttpReadSettingsOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpReadSettings) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string).
func (o HttpReadSettingsOutput) AdditionalHeaders() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpReadSettings) interface{} { return v.AdditionalHeaders }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o HttpReadSettingsOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpReadSettings) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o HttpReadSettingsOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpReadSettings) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string).
func (o HttpReadSettingsOutput) RequestBody() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpReadSettings) interface{} { return v.RequestBody }).(pulumi.AnyOutput)
}

// The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string).
func (o HttpReadSettingsOutput) RequestMethod() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpReadSettings) interface{} { return v.RequestMethod }).(pulumi.AnyOutput)
}

// Specifies the timeout for a HTTP client to get HTTP response from HTTP server. Type: string (or Expression with resultType string).
func (o HttpReadSettingsOutput) RequestTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpReadSettings) interface{} { return v.RequestTimeout }).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'HttpReadSettings'.
func (o HttpReadSettingsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HttpReadSettings) string { return v.Type }).(pulumi.StringOutput)
}

type HttpReadSettingsPtrOutput struct{ *pulumi.OutputState }

func (HttpReadSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpReadSettings)(nil)).Elem()
}

func (o HttpReadSettingsPtrOutput) ToHttpReadSettingsPtrOutput() HttpReadSettingsPtrOutput {
	return o
}

func (o HttpReadSettingsPtrOutput) ToHttpReadSettingsPtrOutputWithContext(ctx context.Context) HttpReadSettingsPtrOutput {
	return o
}

func (o HttpReadSettingsPtrOutput) Elem() HttpReadSettingsOutput {
	return o.ApplyT(func(v *HttpReadSettings) HttpReadSettings {
		if v != nil {
			return *v
		}
		var ret HttpReadSettings
		return ret
	}).(HttpReadSettingsOutput)
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o HttpReadSettingsPtrOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v *HttpReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.AdditionalColumns
	}).(pulumi.AnyOutput)
}

// The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string).
func (o HttpReadSettingsPtrOutput) AdditionalHeaders() pulumi.AnyOutput {
	return o.ApplyT(func(v *HttpReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.AdditionalHeaders
	}).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o HttpReadSettingsPtrOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v *HttpReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableMetricsCollection
	}).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o HttpReadSettingsPtrOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v *HttpReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentConnections
	}).(pulumi.AnyOutput)
}

// The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string).
func (o HttpReadSettingsPtrOutput) RequestBody() pulumi.AnyOutput {
	return o.ApplyT(func(v *HttpReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.RequestBody
	}).(pulumi.AnyOutput)
}

// The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string).
func (o HttpReadSettingsPtrOutput) RequestMethod() pulumi.AnyOutput {
	return o.ApplyT(func(v *HttpReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.RequestMethod
	}).(pulumi.AnyOutput)
}

// Specifies the timeout for a HTTP client to get HTTP response from HTTP server. Type: string (or Expression with resultType string).
func (o HttpReadSettingsPtrOutput) RequestTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v *HttpReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.RequestTimeout
	}).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'HttpReadSettings'.
func (o HttpReadSettingsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpReadSettings) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Http read settings.
type HttpReadSettingsResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string).
	AdditionalHeaders interface{} `pulumi:"additionalHeaders"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string).
	RequestBody interface{} `pulumi:"requestBody"`
	// The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string).
	RequestMethod interface{} `pulumi:"requestMethod"`
	// Specifies the timeout for a HTTP client to get HTTP response from HTTP server. Type: string (or Expression with resultType string).
	RequestTimeout interface{} `pulumi:"requestTimeout"`
	// The read setting type.
	// Expected value is 'HttpReadSettings'.
	Type string `pulumi:"type"`
}

// Http read settings.
type HttpReadSettingsResponseOutput struct{ *pulumi.OutputState }

func (HttpReadSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpReadSettingsResponse)(nil)).Elem()
}

func (o HttpReadSettingsResponseOutput) ToHttpReadSettingsResponseOutput() HttpReadSettingsResponseOutput {
	return o
}

func (o HttpReadSettingsResponseOutput) ToHttpReadSettingsResponseOutputWithContext(ctx context.Context) HttpReadSettingsResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o HttpReadSettingsResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpReadSettingsResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string).
func (o HttpReadSettingsResponseOutput) AdditionalHeaders() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpReadSettingsResponse) interface{} { return v.AdditionalHeaders }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o HttpReadSettingsResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpReadSettingsResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o HttpReadSettingsResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpReadSettingsResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string).
func (o HttpReadSettingsResponseOutput) RequestBody() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpReadSettingsResponse) interface{} { return v.RequestBody }).(pulumi.AnyOutput)
}

// The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string).
func (o HttpReadSettingsResponseOutput) RequestMethod() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpReadSettingsResponse) interface{} { return v.RequestMethod }).(pulumi.AnyOutput)
}

// Specifies the timeout for a HTTP client to get HTTP response from HTTP server. Type: string (or Expression with resultType string).
func (o HttpReadSettingsResponseOutput) RequestTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpReadSettingsResponse) interface{} { return v.RequestTimeout }).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'HttpReadSettings'.
func (o HttpReadSettingsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HttpReadSettingsResponse) string { return v.Type }).(pulumi.StringOutput)
}

type HttpReadSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (HttpReadSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpReadSettingsResponse)(nil)).Elem()
}

func (o HttpReadSettingsResponsePtrOutput) ToHttpReadSettingsResponsePtrOutput() HttpReadSettingsResponsePtrOutput {
	return o
}

func (o HttpReadSettingsResponsePtrOutput) ToHttpReadSettingsResponsePtrOutputWithContext(ctx context.Context) HttpReadSettingsResponsePtrOutput {
	return o
}

func (o HttpReadSettingsResponsePtrOutput) Elem() HttpReadSettingsResponseOutput {
	return o.ApplyT(func(v *HttpReadSettingsResponse) HttpReadSettingsResponse {
		if v != nil {
			return *v
		}
		var ret HttpReadSettingsResponse
		return ret
	}).(HttpReadSettingsResponseOutput)
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o HttpReadSettingsResponsePtrOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v *HttpReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.AdditionalColumns
	}).(pulumi.AnyOutput)
}

// The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string).
func (o HttpReadSettingsResponsePtrOutput) AdditionalHeaders() pulumi.AnyOutput {
	return o.ApplyT(func(v *HttpReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.AdditionalHeaders
	}).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o HttpReadSettingsResponsePtrOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v *HttpReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableMetricsCollection
	}).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o HttpReadSettingsResponsePtrOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v *HttpReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentConnections
	}).(pulumi.AnyOutput)
}

// The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string).
func (o HttpReadSettingsResponsePtrOutput) RequestBody() pulumi.AnyOutput {
	return o.ApplyT(func(v *HttpReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.RequestBody
	}).(pulumi.AnyOutput)
}

// The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string).
func (o HttpReadSettingsResponsePtrOutput) RequestMethod() pulumi.AnyOutput {
	return o.ApplyT(func(v *HttpReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.RequestMethod
	}).(pulumi.AnyOutput)
}

// Specifies the timeout for a HTTP client to get HTTP response from HTTP server. Type: string (or Expression with resultType string).
func (o HttpReadSettingsResponsePtrOutput) RequestTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v *HttpReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.RequestTimeout
	}).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'HttpReadSettings'.
func (o HttpReadSettingsResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpReadSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The location of http server.
type HttpServerLocation struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Specify the relativeUrl of http server. Type: string (or Expression with resultType string)
	RelativeUrl interface{} `pulumi:"relativeUrl"`
	// Type of dataset storage location.
	// Expected value is 'HttpServerLocation'.
	Type string `pulumi:"type"`
}

// HttpServerLocationInput is an input type that accepts HttpServerLocationArgs and HttpServerLocationOutput values.
// You can construct a concrete instance of `HttpServerLocationInput` via:
//
//	HttpServerLocationArgs{...}
type HttpServerLocationInput interface {
	pulumi.Input

	ToHttpServerLocationOutput() HttpServerLocationOutput
	ToHttpServerLocationOutputWithContext(context.Context) HttpServerLocationOutput
}

// The location of http server.
type HttpServerLocationArgs struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// Specify the relativeUrl of http server. Type: string (or Expression with resultType string)
	RelativeUrl pulumi.Input `pulumi:"relativeUrl"`
	// Type of dataset storage location.
	// Expected value is 'HttpServerLocation'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (HttpServerLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpServerLocation)(nil)).Elem()
}

func (i HttpServerLocationArgs) ToHttpServerLocationOutput() HttpServerLocationOutput {
	return i.ToHttpServerLocationOutputWithContext(context.Background())
}

func (i HttpServerLocationArgs) ToHttpServerLocationOutputWithContext(ctx context.Context) HttpServerLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpServerLocationOutput)
}

// The location of http server.
type HttpServerLocationOutput struct{ *pulumi.OutputState }

func (HttpServerLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpServerLocation)(nil)).Elem()
}

func (o HttpServerLocationOutput) ToHttpServerLocationOutput() HttpServerLocationOutput {
	return o
}

func (o HttpServerLocationOutput) ToHttpServerLocationOutputWithContext(ctx context.Context) HttpServerLocationOutput {
	return o
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o HttpServerLocationOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpServerLocation) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o HttpServerLocationOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpServerLocation) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Specify the relativeUrl of http server. Type: string (or Expression with resultType string)
func (o HttpServerLocationOutput) RelativeUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpServerLocation) interface{} { return v.RelativeUrl }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
// Expected value is 'HttpServerLocation'.
func (o HttpServerLocationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HttpServerLocation) string { return v.Type }).(pulumi.StringOutput)
}

// The location of http server.
type HttpServerLocationResponse struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Specify the relativeUrl of http server. Type: string (or Expression with resultType string)
	RelativeUrl interface{} `pulumi:"relativeUrl"`
	// Type of dataset storage location.
	// Expected value is 'HttpServerLocation'.
	Type string `pulumi:"type"`
}

// The location of http server.
type HttpServerLocationResponseOutput struct{ *pulumi.OutputState }

func (HttpServerLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpServerLocationResponse)(nil)).Elem()
}

func (o HttpServerLocationResponseOutput) ToHttpServerLocationResponseOutput() HttpServerLocationResponseOutput {
	return o
}

func (o HttpServerLocationResponseOutput) ToHttpServerLocationResponseOutputWithContext(ctx context.Context) HttpServerLocationResponseOutput {
	return o
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o HttpServerLocationResponseOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpServerLocationResponse) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o HttpServerLocationResponseOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpServerLocationResponse) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Specify the relativeUrl of http server. Type: string (or Expression with resultType string)
func (o HttpServerLocationResponseOutput) RelativeUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpServerLocationResponse) interface{} { return v.RelativeUrl }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
// Expected value is 'HttpServerLocation'.
func (o HttpServerLocationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HttpServerLocationResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity source for an HTTP file.
type HttpSource struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies the timeout for a HTTP client to get HTTP response from HTTP server. The default value is equivalent to System.Net.HttpWebRequest.Timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'HttpSource'.
	Type string `pulumi:"type"`
}

// HttpSourceInput is an input type that accepts HttpSourceArgs and HttpSourceOutput values.
// You can construct a concrete instance of `HttpSourceInput` via:
//
//	HttpSourceArgs{...}
type HttpSourceInput interface {
	pulumi.Input

	ToHttpSourceOutput() HttpSourceOutput
	ToHttpSourceOutputWithContext(context.Context) HttpSourceOutput
}

// A copy activity source for an HTTP file.
type HttpSourceArgs struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// Specifies the timeout for a HTTP client to get HTTP response from HTTP server. The default value is equivalent to System.Net.HttpWebRequest.Timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout pulumi.Input `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'HttpSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (HttpSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpSource)(nil)).Elem()
}

func (i HttpSourceArgs) ToHttpSourceOutput() HttpSourceOutput {
	return i.ToHttpSourceOutputWithContext(context.Background())
}

func (i HttpSourceArgs) ToHttpSourceOutputWithContext(ctx context.Context) HttpSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpSourceOutput)
}

// A copy activity source for an HTTP file.
type HttpSourceOutput struct{ *pulumi.OutputState }

func (HttpSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpSource)(nil)).Elem()
}

func (o HttpSourceOutput) ToHttpSourceOutput() HttpSourceOutput {
	return o
}

func (o HttpSourceOutput) ToHttpSourceOutputWithContext(ctx context.Context) HttpSourceOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o HttpSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Specifies the timeout for a HTTP client to get HTTP response from HTTP server. The default value is equivalent to System.Net.HttpWebRequest.Timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o HttpSourceOutput) HttpRequestTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpSource) interface{} { return v.HttpRequestTimeout }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o HttpSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o HttpSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o HttpSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'HttpSource'.
func (o HttpSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HttpSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity source for an HTTP file.
type HttpSourceResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies the timeout for a HTTP client to get HTTP response from HTTP server. The default value is equivalent to System.Net.HttpWebRequest.Timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'HttpSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for an HTTP file.
type HttpSourceResponseOutput struct{ *pulumi.OutputState }

func (HttpSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpSourceResponse)(nil)).Elem()
}

func (o HttpSourceResponseOutput) ToHttpSourceResponseOutput() HttpSourceResponseOutput {
	return o
}

func (o HttpSourceResponseOutput) ToHttpSourceResponseOutputWithContext(ctx context.Context) HttpSourceResponseOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o HttpSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Specifies the timeout for a HTTP client to get HTTP response from HTTP server. The default value is equivalent to System.Net.HttpWebRequest.Timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o HttpSourceResponseOutput) HttpRequestTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpSourceResponse) interface{} { return v.HttpRequestTimeout }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o HttpSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o HttpSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o HttpSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v HttpSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'HttpSource'.
func (o HttpSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HttpSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Hubspot Service linked service.
type HubspotLinkedService struct {
	// The access token obtained when initially authenticating your OAuth integration.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client ID associated with your Hubspot application.
	ClientId interface{} `pulumi:"clientId"`
	// The client secret associated with your Hubspot application.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The refresh token obtained when initially authenticating your OAuth integration.
	RefreshToken interface{} `pulumi:"refreshToken"`
	// Type of linked service.
	// Expected value is 'Hubspot'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// HubspotLinkedServiceInput is an input type that accepts HubspotLinkedServiceArgs and HubspotLinkedServiceOutput values.
// You can construct a concrete instance of `HubspotLinkedServiceInput` via:
//
//	HubspotLinkedServiceArgs{...}
type HubspotLinkedServiceInput interface {
	pulumi.Input

	ToHubspotLinkedServiceOutput() HubspotLinkedServiceOutput
	ToHubspotLinkedServiceOutputWithContext(context.Context) HubspotLinkedServiceOutput
}

// Hubspot Service linked service.
type HubspotLinkedServiceArgs struct {
	// The access token obtained when initially authenticating your OAuth integration.
	AccessToken pulumi.Input `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The client ID associated with your Hubspot application.
	ClientId pulumi.Input `pulumi:"clientId"`
	// The client secret associated with your Hubspot application.
	ClientSecret pulumi.Input `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The refresh token obtained when initially authenticating your OAuth integration.
	RefreshToken pulumi.Input `pulumi:"refreshToken"`
	// Type of linked service.
	// Expected value is 'Hubspot'.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
}

func (HubspotLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HubspotLinkedService)(nil)).Elem()
}

func (i HubspotLinkedServiceArgs) ToHubspotLinkedServiceOutput() HubspotLinkedServiceOutput {
	return i.ToHubspotLinkedServiceOutputWithContext(context.Background())
}

func (i HubspotLinkedServiceArgs) ToHubspotLinkedServiceOutputWithContext(ctx context.Context) HubspotLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubspotLinkedServiceOutput)
}

// Hubspot Service linked service.
type HubspotLinkedServiceOutput struct{ *pulumi.OutputState }

func (HubspotLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HubspotLinkedService)(nil)).Elem()
}

func (o HubspotLinkedServiceOutput) ToHubspotLinkedServiceOutput() HubspotLinkedServiceOutput {
	return o
}

func (o HubspotLinkedServiceOutput) ToHubspotLinkedServiceOutputWithContext(ctx context.Context) HubspotLinkedServiceOutput {
	return o
}

// The access token obtained when initially authenticating your OAuth integration.
func (o HubspotLinkedServiceOutput) AccessToken() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotLinkedService) interface{} { return v.AccessToken }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o HubspotLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v HubspotLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The client ID associated with your Hubspot application.
func (o HubspotLinkedServiceOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotLinkedService) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret associated with your Hubspot application.
func (o HubspotLinkedServiceOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotLinkedService) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o HubspotLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v HubspotLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o HubspotLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HubspotLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o HubspotLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HubspotLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o HubspotLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v HubspotLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The refresh token obtained when initially authenticating your OAuth integration.
func (o HubspotLinkedServiceOutput) RefreshToken() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotLinkedService) interface{} { return v.RefreshToken }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Hubspot'.
func (o HubspotLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HubspotLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o HubspotLinkedServiceOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotLinkedService) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o HubspotLinkedServiceOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotLinkedService) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o HubspotLinkedServiceOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotLinkedService) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// Hubspot Service linked service.
type HubspotLinkedServiceResponse struct {
	// The access token obtained when initially authenticating your OAuth integration.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client ID associated with your Hubspot application.
	ClientId interface{} `pulumi:"clientId"`
	// The client secret associated with your Hubspot application.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The refresh token obtained when initially authenticating your OAuth integration.
	RefreshToken interface{} `pulumi:"refreshToken"`
	// Type of linked service.
	// Expected value is 'Hubspot'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Hubspot Service linked service.
type HubspotLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (HubspotLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HubspotLinkedServiceResponse)(nil)).Elem()
}

func (o HubspotLinkedServiceResponseOutput) ToHubspotLinkedServiceResponseOutput() HubspotLinkedServiceResponseOutput {
	return o
}

func (o HubspotLinkedServiceResponseOutput) ToHubspotLinkedServiceResponseOutputWithContext(ctx context.Context) HubspotLinkedServiceResponseOutput {
	return o
}

// The access token obtained when initially authenticating your OAuth integration.
func (o HubspotLinkedServiceResponseOutput) AccessToken() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotLinkedServiceResponse) interface{} { return v.AccessToken }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o HubspotLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v HubspotLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The client ID associated with your Hubspot application.
func (o HubspotLinkedServiceResponseOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotLinkedServiceResponse) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret associated with your Hubspot application.
func (o HubspotLinkedServiceResponseOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotLinkedServiceResponse) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o HubspotLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v HubspotLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o HubspotLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HubspotLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o HubspotLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HubspotLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o HubspotLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v HubspotLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The refresh token obtained when initially authenticating your OAuth integration.
func (o HubspotLinkedServiceResponseOutput) RefreshToken() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotLinkedServiceResponse) interface{} { return v.RefreshToken }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Hubspot'.
func (o HubspotLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HubspotLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o HubspotLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotLinkedServiceResponse) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o HubspotLinkedServiceResponseOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotLinkedServiceResponse) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o HubspotLinkedServiceResponseOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotLinkedServiceResponse) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// Hubspot Service dataset.
type HubspotObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'HubspotObject'.
	Type string `pulumi:"type"`
}

// HubspotObjectDatasetInput is an input type that accepts HubspotObjectDatasetArgs and HubspotObjectDatasetOutput values.
// You can construct a concrete instance of `HubspotObjectDatasetInput` via:
//
//	HubspotObjectDatasetArgs{...}
type HubspotObjectDatasetInput interface {
	pulumi.Input

	ToHubspotObjectDatasetOutput() HubspotObjectDatasetOutput
	ToHubspotObjectDatasetOutputWithContext(context.Context) HubspotObjectDatasetOutput
}

// Hubspot Service dataset.
type HubspotObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'HubspotObject'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (HubspotObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HubspotObjectDataset)(nil)).Elem()
}

func (i HubspotObjectDatasetArgs) ToHubspotObjectDatasetOutput() HubspotObjectDatasetOutput {
	return i.ToHubspotObjectDatasetOutputWithContext(context.Background())
}

func (i HubspotObjectDatasetArgs) ToHubspotObjectDatasetOutputWithContext(ctx context.Context) HubspotObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubspotObjectDatasetOutput)
}

// Hubspot Service dataset.
type HubspotObjectDatasetOutput struct{ *pulumi.OutputState }

func (HubspotObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HubspotObjectDataset)(nil)).Elem()
}

func (o HubspotObjectDatasetOutput) ToHubspotObjectDatasetOutput() HubspotObjectDatasetOutput {
	return o
}

func (o HubspotObjectDatasetOutput) ToHubspotObjectDatasetOutputWithContext(ctx context.Context) HubspotObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o HubspotObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v HubspotObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o HubspotObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HubspotObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o HubspotObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v HubspotObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o HubspotObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v HubspotObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o HubspotObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v HubspotObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o HubspotObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o HubspotObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o HubspotObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'HubspotObject'.
func (o HubspotObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HubspotObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Hubspot Service dataset.
type HubspotObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'HubspotObject'.
	Type string `pulumi:"type"`
}

// Hubspot Service dataset.
type HubspotObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (HubspotObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HubspotObjectDatasetResponse)(nil)).Elem()
}

func (o HubspotObjectDatasetResponseOutput) ToHubspotObjectDatasetResponseOutput() HubspotObjectDatasetResponseOutput {
	return o
}

func (o HubspotObjectDatasetResponseOutput) ToHubspotObjectDatasetResponseOutputWithContext(ctx context.Context) HubspotObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o HubspotObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v HubspotObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o HubspotObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HubspotObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o HubspotObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v HubspotObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o HubspotObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v HubspotObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o HubspotObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v HubspotObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o HubspotObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o HubspotObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o HubspotObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'HubspotObject'.
func (o HubspotObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HubspotObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Hubspot Service source.
type HubspotSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'HubspotSource'.
	Type string `pulumi:"type"`
}

// HubspotSourceInput is an input type that accepts HubspotSourceArgs and HubspotSourceOutput values.
// You can construct a concrete instance of `HubspotSourceInput` via:
//
//	HubspotSourceArgs{...}
type HubspotSourceInput interface {
	pulumi.Input

	ToHubspotSourceOutput() HubspotSourceOutput
	ToHubspotSourceOutputWithContext(context.Context) HubspotSourceOutput
}

// A copy activity Hubspot Service source.
type HubspotSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'HubspotSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (HubspotSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HubspotSource)(nil)).Elem()
}

func (i HubspotSourceArgs) ToHubspotSourceOutput() HubspotSourceOutput {
	return i.ToHubspotSourceOutputWithContext(context.Background())
}

func (i HubspotSourceArgs) ToHubspotSourceOutputWithContext(ctx context.Context) HubspotSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubspotSourceOutput)
}

// A copy activity Hubspot Service source.
type HubspotSourceOutput struct{ *pulumi.OutputState }

func (HubspotSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HubspotSource)(nil)).Elem()
}

func (o HubspotSourceOutput) ToHubspotSourceOutput() HubspotSourceOutput {
	return o
}

func (o HubspotSourceOutput) ToHubspotSourceOutputWithContext(ctx context.Context) HubspotSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o HubspotSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o HubspotSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o HubspotSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o HubspotSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o HubspotSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o HubspotSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o HubspotSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'HubspotSource'.
func (o HubspotSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HubspotSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Hubspot Service source.
type HubspotSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'HubspotSource'.
	Type string `pulumi:"type"`
}

// A copy activity Hubspot Service source.
type HubspotSourceResponseOutput struct{ *pulumi.OutputState }

func (HubspotSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HubspotSourceResponse)(nil)).Elem()
}

func (o HubspotSourceResponseOutput) ToHubspotSourceResponseOutput() HubspotSourceResponseOutput {
	return o
}

func (o HubspotSourceResponseOutput) ToHubspotSourceResponseOutputWithContext(ctx context.Context) HubspotSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o HubspotSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o HubspotSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o HubspotSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o HubspotSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o HubspotSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o HubspotSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o HubspotSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v HubspotSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'HubspotSource'.
func (o HubspotSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HubspotSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// This activity evaluates a boolean expression and executes either the activities under the ifTrueActivities property or the ifFalseActivities property depending on the result of the expression.
type IfConditionActivity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// An expression that would evaluate to Boolean. This is used to determine the block of activities (ifTrueActivities or ifFalseActivities) that will be executed.
	Expression Expression `pulumi:"expression"`
	// List of activities to execute if expression is evaluated to false. This is an optional property and if not provided, the activity will exit without any action.
	IfFalseActivities []interface{} `pulumi:"ifFalseActivities"`
	// List of activities to execute if expression is evaluated to true. This is an optional property and if not provided, the activity will exit without any action.
	IfTrueActivities []interface{} `pulumi:"ifTrueActivities"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'IfCondition'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// IfConditionActivityInput is an input type that accepts IfConditionActivityArgs and IfConditionActivityOutput values.
// You can construct a concrete instance of `IfConditionActivityInput` via:
//
//	IfConditionActivityArgs{...}
type IfConditionActivityInput interface {
	pulumi.Input

	ToIfConditionActivityOutput() IfConditionActivityOutput
	ToIfConditionActivityOutputWithContext(context.Context) IfConditionActivityOutput
}

// This activity evaluates a boolean expression and executes either the activities under the ifTrueActivities property or the ifFalseActivities property depending on the result of the expression.
type IfConditionActivityArgs struct {
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// An expression that would evaluate to Boolean. This is used to determine the block of activities (ifTrueActivities or ifFalseActivities) that will be executed.
	Expression ExpressionInput `pulumi:"expression"`
	// List of activities to execute if expression is evaluated to false. This is an optional property and if not provided, the activity will exit without any action.
	IfFalseActivities pulumi.ArrayInput `pulumi:"ifFalseActivities"`
	// List of activities to execute if expression is evaluated to true. This is an optional property and if not provided, the activity will exit without any action.
	IfTrueActivities pulumi.ArrayInput `pulumi:"ifTrueActivities"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs pulumi.StringPtrInput `pulumi:"onInactiveMarkAs"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Type of activity.
	// Expected value is 'IfCondition'.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
}

func (IfConditionActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IfConditionActivity)(nil)).Elem()
}

func (i IfConditionActivityArgs) ToIfConditionActivityOutput() IfConditionActivityOutput {
	return i.ToIfConditionActivityOutputWithContext(context.Background())
}

func (i IfConditionActivityArgs) ToIfConditionActivityOutputWithContext(ctx context.Context) IfConditionActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IfConditionActivityOutput)
}

// This activity evaluates a boolean expression and executes either the activities under the ifTrueActivities property or the ifFalseActivities property depending on the result of the expression.
type IfConditionActivityOutput struct{ *pulumi.OutputState }

func (IfConditionActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IfConditionActivity)(nil)).Elem()
}

func (o IfConditionActivityOutput) ToIfConditionActivityOutput() IfConditionActivityOutput {
	return o
}

func (o IfConditionActivityOutput) ToIfConditionActivityOutputWithContext(ctx context.Context) IfConditionActivityOutput {
	return o
}

// Activity depends on condition.
func (o IfConditionActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v IfConditionActivity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o IfConditionActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IfConditionActivity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// An expression that would evaluate to Boolean. This is used to determine the block of activities (ifTrueActivities or ifFalseActivities) that will be executed.
func (o IfConditionActivityOutput) Expression() ExpressionOutput {
	return o.ApplyT(func(v IfConditionActivity) Expression { return v.Expression }).(ExpressionOutput)
}

// List of activities to execute if expression is evaluated to false. This is an optional property and if not provided, the activity will exit without any action.
func (o IfConditionActivityOutput) IfFalseActivities() pulumi.ArrayOutput {
	return o.ApplyT(func(v IfConditionActivity) []interface{} { return v.IfFalseActivities }).(pulumi.ArrayOutput)
}

// List of activities to execute if expression is evaluated to true. This is an optional property and if not provided, the activity will exit without any action.
func (o IfConditionActivityOutput) IfTrueActivities() pulumi.ArrayOutput {
	return o.ApplyT(func(v IfConditionActivity) []interface{} { return v.IfTrueActivities }).(pulumi.ArrayOutput)
}

// Activity name.
func (o IfConditionActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v IfConditionActivity) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o IfConditionActivityOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IfConditionActivity) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o IfConditionActivityOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IfConditionActivity) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'IfCondition'.
func (o IfConditionActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IfConditionActivity) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o IfConditionActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v IfConditionActivity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

// This activity evaluates a boolean expression and executes either the activities under the ifTrueActivities property or the ifFalseActivities property depending on the result of the expression.
type IfConditionActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// An expression that would evaluate to Boolean. This is used to determine the block of activities (ifTrueActivities or ifFalseActivities) that will be executed.
	Expression ExpressionResponse `pulumi:"expression"`
	// List of activities to execute if expression is evaluated to false. This is an optional property and if not provided, the activity will exit without any action.
	IfFalseActivities []interface{} `pulumi:"ifFalseActivities"`
	// List of activities to execute if expression is evaluated to true. This is an optional property and if not provided, the activity will exit without any action.
	IfTrueActivities []interface{} `pulumi:"ifTrueActivities"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'IfCondition'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// This activity evaluates a boolean expression and executes either the activities under the ifTrueActivities property or the ifFalseActivities property depending on the result of the expression.
type IfConditionActivityResponseOutput struct{ *pulumi.OutputState }

func (IfConditionActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IfConditionActivityResponse)(nil)).Elem()
}

func (o IfConditionActivityResponseOutput) ToIfConditionActivityResponseOutput() IfConditionActivityResponseOutput {
	return o
}

func (o IfConditionActivityResponseOutput) ToIfConditionActivityResponseOutputWithContext(ctx context.Context) IfConditionActivityResponseOutput {
	return o
}

// Activity depends on condition.
func (o IfConditionActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v IfConditionActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o IfConditionActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IfConditionActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// An expression that would evaluate to Boolean. This is used to determine the block of activities (ifTrueActivities or ifFalseActivities) that will be executed.
func (o IfConditionActivityResponseOutput) Expression() ExpressionResponseOutput {
	return o.ApplyT(func(v IfConditionActivityResponse) ExpressionResponse { return v.Expression }).(ExpressionResponseOutput)
}

// List of activities to execute if expression is evaluated to false. This is an optional property and if not provided, the activity will exit without any action.
func (o IfConditionActivityResponseOutput) IfFalseActivities() pulumi.ArrayOutput {
	return o.ApplyT(func(v IfConditionActivityResponse) []interface{} { return v.IfFalseActivities }).(pulumi.ArrayOutput)
}

// List of activities to execute if expression is evaluated to true. This is an optional property and if not provided, the activity will exit without any action.
func (o IfConditionActivityResponseOutput) IfTrueActivities() pulumi.ArrayOutput {
	return o.ApplyT(func(v IfConditionActivityResponse) []interface{} { return v.IfTrueActivities }).(pulumi.ArrayOutput)
}

// Activity name.
func (o IfConditionActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v IfConditionActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o IfConditionActivityResponseOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IfConditionActivityResponse) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o IfConditionActivityResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IfConditionActivityResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'IfCondition'.
func (o IfConditionActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IfConditionActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o IfConditionActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v IfConditionActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

// Impala server linked service.
type ImpalaLinkedService struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to use.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The IP address or host name of the Impala server. (i.e. 192.168.222.160)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name when using UsernameAndPassword.
	Password interface{} `pulumi:"password"`
	// The TCP port that the Impala server uses to listen for client connections. The default value is 21050.
	Port interface{} `pulumi:"port"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'Impala'.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
	// The user name used to access the Impala server. The default value is anonymous when using SASLUsername.
	Username interface{} `pulumi:"username"`
}

// ImpalaLinkedServiceInput is an input type that accepts ImpalaLinkedServiceArgs and ImpalaLinkedServiceOutput values.
// You can construct a concrete instance of `ImpalaLinkedServiceInput` via:
//
//	ImpalaLinkedServiceArgs{...}
type ImpalaLinkedServiceInput interface {
	pulumi.Input

	ToImpalaLinkedServiceOutput() ImpalaLinkedServiceOutput
	ToImpalaLinkedServiceOutputWithContext(context.Context) ImpalaLinkedServiceOutput
}

// Impala server linked service.
type ImpalaLinkedServiceArgs struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch pulumi.Input `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert pulumi.Input `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication type to use.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl pulumi.Input `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// The IP address or host name of the Impala server. (i.e. 192.168.222.160)
	Host pulumi.Input `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password corresponding to the user name when using UsernameAndPassword.
	Password pulumi.Input `pulumi:"password"`
	// The TCP port that the Impala server uses to listen for client connections. The default value is 21050.
	Port pulumi.Input `pulumi:"port"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath pulumi.Input `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'Impala'.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore pulumi.Input `pulumi:"useSystemTrustStore"`
	// The user name used to access the Impala server. The default value is anonymous when using SASLUsername.
	Username pulumi.Input `pulumi:"username"`
}

func (ImpalaLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImpalaLinkedService)(nil)).Elem()
}

func (i ImpalaLinkedServiceArgs) ToImpalaLinkedServiceOutput() ImpalaLinkedServiceOutput {
	return i.ToImpalaLinkedServiceOutputWithContext(context.Background())
}

func (i ImpalaLinkedServiceArgs) ToImpalaLinkedServiceOutputWithContext(ctx context.Context) ImpalaLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImpalaLinkedServiceOutput)
}

// Impala server linked service.
type ImpalaLinkedServiceOutput struct{ *pulumi.OutputState }

func (ImpalaLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImpalaLinkedService)(nil)).Elem()
}

func (o ImpalaLinkedServiceOutput) ToImpalaLinkedServiceOutput() ImpalaLinkedServiceOutput {
	return o
}

func (o ImpalaLinkedServiceOutput) ToImpalaLinkedServiceOutputWithContext(ctx context.Context) ImpalaLinkedServiceOutput {
	return o
}

// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
func (o ImpalaLinkedServiceOutput) AllowHostNameCNMismatch() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaLinkedService) interface{} { return v.AllowHostNameCNMismatch }).(pulumi.AnyOutput)
}

// Specifies whether to allow self-signed certificates from the server. The default value is false.
func (o ImpalaLinkedServiceOutput) AllowSelfSignedServerCert() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaLinkedService) interface{} { return v.AllowSelfSignedServerCert }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o ImpalaLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ImpalaLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication type to use.
func (o ImpalaLinkedServiceOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v ImpalaLinkedService) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The integration runtime reference.
func (o ImpalaLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v ImpalaLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o ImpalaLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImpalaLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
func (o ImpalaLinkedServiceOutput) EnableSsl() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaLinkedService) interface{} { return v.EnableSsl }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o ImpalaLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImpalaLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The IP address or host name of the Impala server. (i.e. 192.168.222.160)
func (o ImpalaLinkedServiceOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaLinkedService) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o ImpalaLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v ImpalaLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The password corresponding to the user name when using UsernameAndPassword.
func (o ImpalaLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port that the Impala server uses to listen for client connections. The default value is 21050.
func (o ImpalaLinkedServiceOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaLinkedService) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
func (o ImpalaLinkedServiceOutput) TrustedCertPath() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaLinkedService) interface{} { return v.TrustedCertPath }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Impala'.
func (o ImpalaLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImpalaLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
func (o ImpalaLinkedServiceOutput) UseSystemTrustStore() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaLinkedService) interface{} { return v.UseSystemTrustStore }).(pulumi.AnyOutput)
}

// The user name used to access the Impala server. The default value is anonymous when using SASLUsername.
func (o ImpalaLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Impala server linked service.
type ImpalaLinkedServiceResponse struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to use.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The IP address or host name of the Impala server. (i.e. 192.168.222.160)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name when using UsernameAndPassword.
	Password interface{} `pulumi:"password"`
	// The TCP port that the Impala server uses to listen for client connections. The default value is 21050.
	Port interface{} `pulumi:"port"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'Impala'.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
	// The user name used to access the Impala server. The default value is anonymous when using SASLUsername.
	Username interface{} `pulumi:"username"`
}

// Impala server linked service.
type ImpalaLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (ImpalaLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImpalaLinkedServiceResponse)(nil)).Elem()
}

func (o ImpalaLinkedServiceResponseOutput) ToImpalaLinkedServiceResponseOutput() ImpalaLinkedServiceResponseOutput {
	return o
}

func (o ImpalaLinkedServiceResponseOutput) ToImpalaLinkedServiceResponseOutputWithContext(ctx context.Context) ImpalaLinkedServiceResponseOutput {
	return o
}

// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
func (o ImpalaLinkedServiceResponseOutput) AllowHostNameCNMismatch() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) interface{} { return v.AllowHostNameCNMismatch }).(pulumi.AnyOutput)
}

// Specifies whether to allow self-signed certificates from the server. The default value is false.
func (o ImpalaLinkedServiceResponseOutput) AllowSelfSignedServerCert() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) interface{} { return v.AllowSelfSignedServerCert }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o ImpalaLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication type to use.
func (o ImpalaLinkedServiceResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The integration runtime reference.
func (o ImpalaLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o ImpalaLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
func (o ImpalaLinkedServiceResponseOutput) EnableSsl() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) interface{} { return v.EnableSsl }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o ImpalaLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The IP address or host name of the Impala server. (i.e. 192.168.222.160)
func (o ImpalaLinkedServiceResponseOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o ImpalaLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The password corresponding to the user name when using UsernameAndPassword.
func (o ImpalaLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port that the Impala server uses to listen for client connections. The default value is 21050.
func (o ImpalaLinkedServiceResponseOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
func (o ImpalaLinkedServiceResponseOutput) TrustedCertPath() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) interface{} { return v.TrustedCertPath }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Impala'.
func (o ImpalaLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
func (o ImpalaLinkedServiceResponseOutput) UseSystemTrustStore() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) interface{} { return v.UseSystemTrustStore }).(pulumi.AnyOutput)
}

// The user name used to access the Impala server. The default value is anonymous when using SASLUsername.
func (o ImpalaLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Impala server dataset.
type ImpalaObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Impala. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'ImpalaObject'.
	Type string `pulumi:"type"`
}

// ImpalaObjectDatasetInput is an input type that accepts ImpalaObjectDatasetArgs and ImpalaObjectDatasetOutput values.
// You can construct a concrete instance of `ImpalaObjectDatasetInput` via:
//
//	ImpalaObjectDatasetArgs{...}
type ImpalaObjectDatasetInput interface {
	pulumi.Input

	ToImpalaObjectDatasetOutput() ImpalaObjectDatasetOutput
	ToImpalaObjectDatasetOutputWithContext(context.Context) ImpalaObjectDatasetOutput
}

// Impala server dataset.
type ImpalaObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Impala. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'ImpalaObject'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ImpalaObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImpalaObjectDataset)(nil)).Elem()
}

func (i ImpalaObjectDatasetArgs) ToImpalaObjectDatasetOutput() ImpalaObjectDatasetOutput {
	return i.ToImpalaObjectDatasetOutputWithContext(context.Background())
}

func (i ImpalaObjectDatasetArgs) ToImpalaObjectDatasetOutputWithContext(ctx context.Context) ImpalaObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImpalaObjectDatasetOutput)
}

// Impala server dataset.
type ImpalaObjectDatasetOutput struct{ *pulumi.OutputState }

func (ImpalaObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImpalaObjectDataset)(nil)).Elem()
}

func (o ImpalaObjectDatasetOutput) ToImpalaObjectDatasetOutput() ImpalaObjectDatasetOutput {
	return o
}

func (o ImpalaObjectDatasetOutput) ToImpalaObjectDatasetOutputWithContext(ctx context.Context) ImpalaObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ImpalaObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ImpalaObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o ImpalaObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImpalaObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o ImpalaObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v ImpalaObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o ImpalaObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v ImpalaObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o ImpalaObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v ImpalaObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o ImpalaObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ImpalaObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Impala. Type: string (or Expression with resultType string).
func (o ImpalaObjectDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaObjectDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o ImpalaObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'ImpalaObject'.
func (o ImpalaObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImpalaObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Impala server dataset.
type ImpalaObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Impala. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'ImpalaObject'.
	Type string `pulumi:"type"`
}

// Impala server dataset.
type ImpalaObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (ImpalaObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImpalaObjectDatasetResponse)(nil)).Elem()
}

func (o ImpalaObjectDatasetResponseOutput) ToImpalaObjectDatasetResponseOutput() ImpalaObjectDatasetResponseOutput {
	return o
}

func (o ImpalaObjectDatasetResponseOutput) ToImpalaObjectDatasetResponseOutputWithContext(ctx context.Context) ImpalaObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ImpalaObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ImpalaObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o ImpalaObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImpalaObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o ImpalaObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v ImpalaObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o ImpalaObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v ImpalaObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o ImpalaObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ImpalaObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o ImpalaObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ImpalaObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Impala. Type: string (or Expression with resultType string).
func (o ImpalaObjectDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaObjectDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o ImpalaObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'ImpalaObject'.
func (o ImpalaObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImpalaObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Impala server source.
type ImpalaSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ImpalaSource'.
	Type string `pulumi:"type"`
}

// ImpalaSourceInput is an input type that accepts ImpalaSourceArgs and ImpalaSourceOutput values.
// You can construct a concrete instance of `ImpalaSourceInput` via:
//
//	ImpalaSourceArgs{...}
type ImpalaSourceInput interface {
	pulumi.Input

	ToImpalaSourceOutput() ImpalaSourceOutput
	ToImpalaSourceOutputWithContext(context.Context) ImpalaSourceOutput
}

// A copy activity Impala server source.
type ImpalaSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ImpalaSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ImpalaSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImpalaSource)(nil)).Elem()
}

func (i ImpalaSourceArgs) ToImpalaSourceOutput() ImpalaSourceOutput {
	return i.ToImpalaSourceOutputWithContext(context.Background())
}

func (i ImpalaSourceArgs) ToImpalaSourceOutputWithContext(ctx context.Context) ImpalaSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImpalaSourceOutput)
}

// A copy activity Impala server source.
type ImpalaSourceOutput struct{ *pulumi.OutputState }

func (ImpalaSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImpalaSource)(nil)).Elem()
}

func (o ImpalaSourceOutput) ToImpalaSourceOutput() ImpalaSourceOutput {
	return o
}

func (o ImpalaSourceOutput) ToImpalaSourceOutputWithContext(ctx context.Context) ImpalaSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o ImpalaSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o ImpalaSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o ImpalaSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o ImpalaSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ImpalaSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o ImpalaSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ImpalaSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'ImpalaSource'.
func (o ImpalaSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImpalaSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Impala server source.
type ImpalaSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ImpalaSource'.
	Type string `pulumi:"type"`
}

// A copy activity Impala server source.
type ImpalaSourceResponseOutput struct{ *pulumi.OutputState }

func (ImpalaSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImpalaSourceResponse)(nil)).Elem()
}

func (o ImpalaSourceResponseOutput) ToImpalaSourceResponseOutput() ImpalaSourceResponseOutput {
	return o
}

func (o ImpalaSourceResponseOutput) ToImpalaSourceResponseOutputWithContext(ctx context.Context) ImpalaSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o ImpalaSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o ImpalaSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o ImpalaSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o ImpalaSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ImpalaSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o ImpalaSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ImpalaSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v ImpalaSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'ImpalaSource'.
func (o ImpalaSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ImpalaSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Informix linked service.
type InformixLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication used to connect to the Informix as ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, or SecureString, or AzureKeyVaultSecretReference, or Expression with resultType string.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The access credential portion of the connection string specified in driver-specific property-value format.
	Credential interface{} `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Informix'.
	Type string `pulumi:"type"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// InformixLinkedServiceInput is an input type that accepts InformixLinkedServiceArgs and InformixLinkedServiceOutput values.
// You can construct a concrete instance of `InformixLinkedServiceInput` via:
//
//	InformixLinkedServiceArgs{...}
type InformixLinkedServiceInput interface {
	pulumi.Input

	ToInformixLinkedServiceOutput() InformixLinkedServiceOutput
	ToInformixLinkedServiceOutputWithContext(context.Context) InformixLinkedServiceOutput
}

// Informix linked service.
type InformixLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Type of authentication used to connect to the Informix as ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
	AuthenticationType pulumi.Input `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, or SecureString, or AzureKeyVaultSecretReference, or Expression with resultType string.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// The access credential portion of the connection string specified in driver-specific property-value format.
	Credential pulumi.Input `pulumi:"credential"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password for Basic authentication.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Informix'.
	Type pulumi.StringInput `pulumi:"type"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (InformixLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InformixLinkedService)(nil)).Elem()
}

func (i InformixLinkedServiceArgs) ToInformixLinkedServiceOutput() InformixLinkedServiceOutput {
	return i.ToInformixLinkedServiceOutputWithContext(context.Background())
}

func (i InformixLinkedServiceArgs) ToInformixLinkedServiceOutputWithContext(ctx context.Context) InformixLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InformixLinkedServiceOutput)
}

// Informix linked service.
type InformixLinkedServiceOutput struct{ *pulumi.OutputState }

func (InformixLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InformixLinkedService)(nil)).Elem()
}

func (o InformixLinkedServiceOutput) ToInformixLinkedServiceOutput() InformixLinkedServiceOutput {
	return o
}

func (o InformixLinkedServiceOutput) ToInformixLinkedServiceOutputWithContext(ctx context.Context) InformixLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o InformixLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v InformixLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Type of authentication used to connect to the Informix as ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
func (o InformixLinkedServiceOutput) AuthenticationType() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixLinkedService) interface{} { return v.AuthenticationType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o InformixLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v InformixLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, or SecureString, or AzureKeyVaultSecretReference, or Expression with resultType string.
func (o InformixLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// The access credential portion of the connection string specified in driver-specific property-value format.
func (o InformixLinkedServiceOutput) Credential() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixLinkedService) interface{} { return v.Credential }).(pulumi.AnyOutput)
}

// Linked service description.
func (o InformixLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InformixLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o InformixLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InformixLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o InformixLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v InformixLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Password for Basic authentication.
func (o InformixLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Informix'.
func (o InformixLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v InformixLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// User name for Basic authentication. Type: string (or Expression with resultType string).
func (o InformixLinkedServiceOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixLinkedService) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// Informix linked service.
type InformixLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication used to connect to the Informix as ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, or SecureString, or AzureKeyVaultSecretReference, or Expression with resultType string.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The access credential portion of the connection string specified in driver-specific property-value format.
	Credential interface{} `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Informix'.
	Type string `pulumi:"type"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// Informix linked service.
type InformixLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (InformixLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InformixLinkedServiceResponse)(nil)).Elem()
}

func (o InformixLinkedServiceResponseOutput) ToInformixLinkedServiceResponseOutput() InformixLinkedServiceResponseOutput {
	return o
}

func (o InformixLinkedServiceResponseOutput) ToInformixLinkedServiceResponseOutputWithContext(ctx context.Context) InformixLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o InformixLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v InformixLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Type of authentication used to connect to the Informix as ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
func (o InformixLinkedServiceResponseOutput) AuthenticationType() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixLinkedServiceResponse) interface{} { return v.AuthenticationType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o InformixLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v InformixLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, or SecureString, or AzureKeyVaultSecretReference, or Expression with resultType string.
func (o InformixLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// The access credential portion of the connection string specified in driver-specific property-value format.
func (o InformixLinkedServiceResponseOutput) Credential() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixLinkedServiceResponse) interface{} { return v.Credential }).(pulumi.AnyOutput)
}

// Linked service description.
func (o InformixLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InformixLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o InformixLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InformixLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o InformixLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v InformixLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password for Basic authentication.
func (o InformixLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Informix'.
func (o InformixLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v InformixLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User name for Basic authentication. Type: string (or Expression with resultType string).
func (o InformixLinkedServiceResponseOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixLinkedServiceResponse) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// A copy activity Informix sink.
type InformixSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to execute before starting the copy. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'InformixSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// InformixSinkInput is an input type that accepts InformixSinkArgs and InformixSinkOutput values.
// You can construct a concrete instance of `InformixSinkInput` via:
//
//	InformixSinkArgs{...}
type InformixSinkInput interface {
	pulumi.Input

	ToInformixSinkOutput() InformixSinkOutput
	ToInformixSinkOutputWithContext(context.Context) InformixSinkOutput
}

// A copy activity Informix sink.
type InformixSinkArgs struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// A query to execute before starting the copy. Type: string (or Expression with resultType string).
	PreCopyScript pulumi.Input `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount pulumi.Input `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait pulumi.Input `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'InformixSink'.
	Type pulumi.StringInput `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize pulumi.Input `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout pulumi.Input `pulumi:"writeBatchTimeout"`
}

func (InformixSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InformixSink)(nil)).Elem()
}

func (i InformixSinkArgs) ToInformixSinkOutput() InformixSinkOutput {
	return i.ToInformixSinkOutputWithContext(context.Background())
}

func (i InformixSinkArgs) ToInformixSinkOutputWithContext(ctx context.Context) InformixSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InformixSinkOutput)
}

// A copy activity Informix sink.
type InformixSinkOutput struct{ *pulumi.OutputState }

func (InformixSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InformixSink)(nil)).Elem()
}

func (o InformixSinkOutput) ToInformixSinkOutput() InformixSinkOutput {
	return o
}

func (o InformixSinkOutput) ToInformixSinkOutputWithContext(ctx context.Context) InformixSinkOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o InformixSinkOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixSink) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o InformixSinkOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixSink) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to execute before starting the copy. Type: string (or Expression with resultType string).
func (o InformixSinkOutput) PreCopyScript() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixSink) interface{} { return v.PreCopyScript }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o InformixSinkOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixSink) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o InformixSinkOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixSink) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'InformixSink'.
func (o InformixSinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v InformixSink) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o InformixSinkOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixSink) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o InformixSinkOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixSink) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity Informix sink.
type InformixSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to execute before starting the copy. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'InformixSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Informix sink.
type InformixSinkResponseOutput struct{ *pulumi.OutputState }

func (InformixSinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InformixSinkResponse)(nil)).Elem()
}

func (o InformixSinkResponseOutput) ToInformixSinkResponseOutput() InformixSinkResponseOutput {
	return o
}

func (o InformixSinkResponseOutput) ToInformixSinkResponseOutputWithContext(ctx context.Context) InformixSinkResponseOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o InformixSinkResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixSinkResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o InformixSinkResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixSinkResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to execute before starting the copy. Type: string (or Expression with resultType string).
func (o InformixSinkResponseOutput) PreCopyScript() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixSinkResponse) interface{} { return v.PreCopyScript }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o InformixSinkResponseOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixSinkResponse) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o InformixSinkResponseOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixSinkResponse) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'InformixSink'.
func (o InformixSinkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v InformixSinkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o InformixSinkResponseOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixSinkResponse) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o InformixSinkResponseOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixSinkResponse) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity source for Informix.
type InformixSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'InformixSource'.
	Type string `pulumi:"type"`
}

// InformixSourceInput is an input type that accepts InformixSourceArgs and InformixSourceOutput values.
// You can construct a concrete instance of `InformixSourceInput` via:
//
//	InformixSourceArgs{...}
type InformixSourceInput interface {
	pulumi.Input

	ToInformixSourceOutput() InformixSourceOutput
	ToInformixSourceOutputWithContext(context.Context) InformixSourceOutput
}

// A copy activity source for Informix.
type InformixSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'InformixSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (InformixSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InformixSource)(nil)).Elem()
}

func (i InformixSourceArgs) ToInformixSourceOutput() InformixSourceOutput {
	return i.ToInformixSourceOutputWithContext(context.Background())
}

func (i InformixSourceArgs) ToInformixSourceOutputWithContext(ctx context.Context) InformixSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InformixSourceOutput)
}

// A copy activity source for Informix.
type InformixSourceOutput struct{ *pulumi.OutputState }

func (InformixSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InformixSource)(nil)).Elem()
}

func (o InformixSourceOutput) ToInformixSourceOutput() InformixSourceOutput {
	return o
}

func (o InformixSourceOutput) ToInformixSourceOutputWithContext(ctx context.Context) InformixSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o InformixSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o InformixSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o InformixSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Database query. Type: string (or Expression with resultType string).
func (o InformixSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o InformixSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o InformixSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o InformixSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'InformixSource'.
func (o InformixSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v InformixSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity source for Informix.
type InformixSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'InformixSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for Informix.
type InformixSourceResponseOutput struct{ *pulumi.OutputState }

func (InformixSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InformixSourceResponse)(nil)).Elem()
}

func (o InformixSourceResponseOutput) ToInformixSourceResponseOutput() InformixSourceResponseOutput {
	return o
}

func (o InformixSourceResponseOutput) ToInformixSourceResponseOutputWithContext(ctx context.Context) InformixSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o InformixSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o InformixSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o InformixSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Database query. Type: string (or Expression with resultType string).
func (o InformixSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o InformixSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o InformixSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o InformixSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'InformixSource'.
func (o InformixSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v InformixSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Informix table dataset.
type InformixTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The Informix table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'InformixTable'.
	Type string `pulumi:"type"`
}

// InformixTableDatasetInput is an input type that accepts InformixTableDatasetArgs and InformixTableDatasetOutput values.
// You can construct a concrete instance of `InformixTableDatasetInput` via:
//
//	InformixTableDatasetArgs{...}
type InformixTableDatasetInput interface {
	pulumi.Input

	ToInformixTableDatasetOutput() InformixTableDatasetOutput
	ToInformixTableDatasetOutputWithContext(context.Context) InformixTableDatasetOutput
}

// The Informix table dataset.
type InformixTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The Informix table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'InformixTable'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (InformixTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InformixTableDataset)(nil)).Elem()
}

func (i InformixTableDatasetArgs) ToInformixTableDatasetOutput() InformixTableDatasetOutput {
	return i.ToInformixTableDatasetOutputWithContext(context.Background())
}

func (i InformixTableDatasetArgs) ToInformixTableDatasetOutputWithContext(ctx context.Context) InformixTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InformixTableDatasetOutput)
}

// The Informix table dataset.
type InformixTableDatasetOutput struct{ *pulumi.OutputState }

func (InformixTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InformixTableDataset)(nil)).Elem()
}

func (o InformixTableDatasetOutput) ToInformixTableDatasetOutput() InformixTableDatasetOutput {
	return o
}

func (o InformixTableDatasetOutput) ToInformixTableDatasetOutputWithContext(ctx context.Context) InformixTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o InformixTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v InformixTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o InformixTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InformixTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o InformixTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v InformixTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o InformixTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v InformixTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o InformixTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v InformixTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o InformixTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o InformixTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The Informix table name. Type: string (or Expression with resultType string).
func (o InformixTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'InformixTable'.
func (o InformixTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v InformixTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Informix table dataset.
type InformixTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The Informix table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'InformixTable'.
	Type string `pulumi:"type"`
}

// The Informix table dataset.
type InformixTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (InformixTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InformixTableDatasetResponse)(nil)).Elem()
}

func (o InformixTableDatasetResponseOutput) ToInformixTableDatasetResponseOutput() InformixTableDatasetResponseOutput {
	return o
}

func (o InformixTableDatasetResponseOutput) ToInformixTableDatasetResponseOutputWithContext(ctx context.Context) InformixTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o InformixTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v InformixTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o InformixTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InformixTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o InformixTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v InformixTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o InformixTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v InformixTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o InformixTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v InformixTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o InformixTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o InformixTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The Informix table name. Type: string (or Expression with resultType string).
func (o InformixTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v InformixTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'InformixTable'.
func (o InformixTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v InformixTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The compute resource properties for managed integration runtime.
type IntegrationRuntimeComputeProperties struct {
	// CopyComputeScale properties for managed integration runtime.
	CopyComputeScaleProperties *CopyComputeScaleProperties `pulumi:"copyComputeScaleProperties"`
	// Data flow properties for managed integration runtime.
	DataFlowProperties *IntegrationRuntimeDataFlowProperties `pulumi:"dataFlowProperties"`
	// The location for managed integration runtime. The supported regions could be found on https://docs.microsoft.com/en-us/azure/data-factory/data-factory-data-movement-activities
	Location *string `pulumi:"location"`
	// Maximum parallel executions count per node for managed integration runtime.
	MaxParallelExecutionsPerNode *int `pulumi:"maxParallelExecutionsPerNode"`
	// The node size requirement to managed integration runtime.
	NodeSize *string `pulumi:"nodeSize"`
	// The required number of nodes for managed integration runtime.
	NumberOfNodes *int `pulumi:"numberOfNodes"`
	// PipelineExternalComputeScale properties for managed integration runtime.
	PipelineExternalComputeScaleProperties *PipelineExternalComputeScaleProperties `pulumi:"pipelineExternalComputeScaleProperties"`
	// VNet properties for managed integration runtime.
	VNetProperties *IntegrationRuntimeVNetProperties `pulumi:"vNetProperties"`
}

// IntegrationRuntimeComputePropertiesInput is an input type that accepts IntegrationRuntimeComputePropertiesArgs and IntegrationRuntimeComputePropertiesOutput values.
// You can construct a concrete instance of `IntegrationRuntimeComputePropertiesInput` via:
//
//	IntegrationRuntimeComputePropertiesArgs{...}
type IntegrationRuntimeComputePropertiesInput interface {
	pulumi.Input

	ToIntegrationRuntimeComputePropertiesOutput() IntegrationRuntimeComputePropertiesOutput
	ToIntegrationRuntimeComputePropertiesOutputWithContext(context.Context) IntegrationRuntimeComputePropertiesOutput
}

// The compute resource properties for managed integration runtime.
type IntegrationRuntimeComputePropertiesArgs struct {
	// CopyComputeScale properties for managed integration runtime.
	CopyComputeScaleProperties CopyComputeScalePropertiesPtrInput `pulumi:"copyComputeScaleProperties"`
	// Data flow properties for managed integration runtime.
	DataFlowProperties IntegrationRuntimeDataFlowPropertiesPtrInput `pulumi:"dataFlowProperties"`
	// The location for managed integration runtime. The supported regions could be found on https://docs.microsoft.com/en-us/azure/data-factory/data-factory-data-movement-activities
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Maximum parallel executions count per node for managed integration runtime.
	MaxParallelExecutionsPerNode pulumi.IntPtrInput `pulumi:"maxParallelExecutionsPerNode"`
	// The node size requirement to managed integration runtime.
	NodeSize pulumi.StringPtrInput `pulumi:"nodeSize"`
	// The required number of nodes for managed integration runtime.
	NumberOfNodes pulumi.IntPtrInput `pulumi:"numberOfNodes"`
	// PipelineExternalComputeScale properties for managed integration runtime.
	PipelineExternalComputeScaleProperties PipelineExternalComputeScalePropertiesPtrInput `pulumi:"pipelineExternalComputeScaleProperties"`
	// VNet properties for managed integration runtime.
	VNetProperties IntegrationRuntimeVNetPropertiesPtrInput `pulumi:"vNetProperties"`
}

func (IntegrationRuntimeComputePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeComputeProperties)(nil)).Elem()
}

func (i IntegrationRuntimeComputePropertiesArgs) ToIntegrationRuntimeComputePropertiesOutput() IntegrationRuntimeComputePropertiesOutput {
	return i.ToIntegrationRuntimeComputePropertiesOutputWithContext(context.Background())
}

func (i IntegrationRuntimeComputePropertiesArgs) ToIntegrationRuntimeComputePropertiesOutputWithContext(ctx context.Context) IntegrationRuntimeComputePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeComputePropertiesOutput)
}

func (i IntegrationRuntimeComputePropertiesArgs) ToIntegrationRuntimeComputePropertiesPtrOutput() IntegrationRuntimeComputePropertiesPtrOutput {
	return i.ToIntegrationRuntimeComputePropertiesPtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeComputePropertiesArgs) ToIntegrationRuntimeComputePropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeComputePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeComputePropertiesOutput).ToIntegrationRuntimeComputePropertiesPtrOutputWithContext(ctx)
}

// IntegrationRuntimeComputePropertiesPtrInput is an input type that accepts IntegrationRuntimeComputePropertiesArgs, IntegrationRuntimeComputePropertiesPtr and IntegrationRuntimeComputePropertiesPtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeComputePropertiesPtrInput` via:
//
//	        IntegrationRuntimeComputePropertiesArgs{...}
//
//	or:
//
//	        nil
type IntegrationRuntimeComputePropertiesPtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeComputePropertiesPtrOutput() IntegrationRuntimeComputePropertiesPtrOutput
	ToIntegrationRuntimeComputePropertiesPtrOutputWithContext(context.Context) IntegrationRuntimeComputePropertiesPtrOutput
}

type integrationRuntimeComputePropertiesPtrType IntegrationRuntimeComputePropertiesArgs

func IntegrationRuntimeComputePropertiesPtr(v *IntegrationRuntimeComputePropertiesArgs) IntegrationRuntimeComputePropertiesPtrInput {
	return (*integrationRuntimeComputePropertiesPtrType)(v)
}

func (*integrationRuntimeComputePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeComputeProperties)(nil)).Elem()
}

func (i *integrationRuntimeComputePropertiesPtrType) ToIntegrationRuntimeComputePropertiesPtrOutput() IntegrationRuntimeComputePropertiesPtrOutput {
	return i.ToIntegrationRuntimeComputePropertiesPtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeComputePropertiesPtrType) ToIntegrationRuntimeComputePropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeComputePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeComputePropertiesPtrOutput)
}

// The compute resource properties for managed integration runtime.
type IntegrationRuntimeComputePropertiesOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeComputePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeComputeProperties)(nil)).Elem()
}

func (o IntegrationRuntimeComputePropertiesOutput) ToIntegrationRuntimeComputePropertiesOutput() IntegrationRuntimeComputePropertiesOutput {
	return o
}

func (o IntegrationRuntimeComputePropertiesOutput) ToIntegrationRuntimeComputePropertiesOutputWithContext(ctx context.Context) IntegrationRuntimeComputePropertiesOutput {
	return o
}

func (o IntegrationRuntimeComputePropertiesOutput) ToIntegrationRuntimeComputePropertiesPtrOutput() IntegrationRuntimeComputePropertiesPtrOutput {
	return o.ToIntegrationRuntimeComputePropertiesPtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeComputePropertiesOutput) ToIntegrationRuntimeComputePropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeComputePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IntegrationRuntimeComputeProperties) *IntegrationRuntimeComputeProperties {
		return &v
	}).(IntegrationRuntimeComputePropertiesPtrOutput)
}

// CopyComputeScale properties for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesOutput) CopyComputeScaleProperties() CopyComputeScalePropertiesPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeComputeProperties) *CopyComputeScaleProperties {
		return v.CopyComputeScaleProperties
	}).(CopyComputeScalePropertiesPtrOutput)
}

// Data flow properties for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesOutput) DataFlowProperties() IntegrationRuntimeDataFlowPropertiesPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeComputeProperties) *IntegrationRuntimeDataFlowProperties {
		return v.DataFlowProperties
	}).(IntegrationRuntimeDataFlowPropertiesPtrOutput)
}

// The location for managed integration runtime. The supported regions could be found on https://docs.microsoft.com/en-us/azure/data-factory/data-factory-data-movement-activities
func (o IntegrationRuntimeComputePropertiesOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeComputeProperties) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Maximum parallel executions count per node for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesOutput) MaxParallelExecutionsPerNode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeComputeProperties) *int { return v.MaxParallelExecutionsPerNode }).(pulumi.IntPtrOutput)
}

// The node size requirement to managed integration runtime.
func (o IntegrationRuntimeComputePropertiesOutput) NodeSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeComputeProperties) *string { return v.NodeSize }).(pulumi.StringPtrOutput)
}

// The required number of nodes for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesOutput) NumberOfNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeComputeProperties) *int { return v.NumberOfNodes }).(pulumi.IntPtrOutput)
}

// PipelineExternalComputeScale properties for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesOutput) PipelineExternalComputeScaleProperties() PipelineExternalComputeScalePropertiesPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeComputeProperties) *PipelineExternalComputeScaleProperties {
		return v.PipelineExternalComputeScaleProperties
	}).(PipelineExternalComputeScalePropertiesPtrOutput)
}

// VNet properties for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesOutput) VNetProperties() IntegrationRuntimeVNetPropertiesPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeComputeProperties) *IntegrationRuntimeVNetProperties { return v.VNetProperties }).(IntegrationRuntimeVNetPropertiesPtrOutput)
}

type IntegrationRuntimeComputePropertiesPtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeComputePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeComputeProperties)(nil)).Elem()
}

func (o IntegrationRuntimeComputePropertiesPtrOutput) ToIntegrationRuntimeComputePropertiesPtrOutput() IntegrationRuntimeComputePropertiesPtrOutput {
	return o
}

func (o IntegrationRuntimeComputePropertiesPtrOutput) ToIntegrationRuntimeComputePropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeComputePropertiesPtrOutput {
	return o
}

func (o IntegrationRuntimeComputePropertiesPtrOutput) Elem() IntegrationRuntimeComputePropertiesOutput {
	return o.ApplyT(func(v *IntegrationRuntimeComputeProperties) IntegrationRuntimeComputeProperties {
		if v != nil {
			return *v
		}
		var ret IntegrationRuntimeComputeProperties
		return ret
	}).(IntegrationRuntimeComputePropertiesOutput)
}

// CopyComputeScale properties for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesPtrOutput) CopyComputeScaleProperties() CopyComputeScalePropertiesPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeComputeProperties) *CopyComputeScaleProperties {
		if v == nil {
			return nil
		}
		return v.CopyComputeScaleProperties
	}).(CopyComputeScalePropertiesPtrOutput)
}

// Data flow properties for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesPtrOutput) DataFlowProperties() IntegrationRuntimeDataFlowPropertiesPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeComputeProperties) *IntegrationRuntimeDataFlowProperties {
		if v == nil {
			return nil
		}
		return v.DataFlowProperties
	}).(IntegrationRuntimeDataFlowPropertiesPtrOutput)
}

// The location for managed integration runtime. The supported regions could be found on https://docs.microsoft.com/en-us/azure/data-factory/data-factory-data-movement-activities
func (o IntegrationRuntimeComputePropertiesPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeComputeProperties) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Maximum parallel executions count per node for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesPtrOutput) MaxParallelExecutionsPerNode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeComputeProperties) *int {
		if v == nil {
			return nil
		}
		return v.MaxParallelExecutionsPerNode
	}).(pulumi.IntPtrOutput)
}

// The node size requirement to managed integration runtime.
func (o IntegrationRuntimeComputePropertiesPtrOutput) NodeSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeComputeProperties) *string {
		if v == nil {
			return nil
		}
		return v.NodeSize
	}).(pulumi.StringPtrOutput)
}

// The required number of nodes for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesPtrOutput) NumberOfNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeComputeProperties) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfNodes
	}).(pulumi.IntPtrOutput)
}

// PipelineExternalComputeScale properties for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesPtrOutput) PipelineExternalComputeScaleProperties() PipelineExternalComputeScalePropertiesPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeComputeProperties) *PipelineExternalComputeScaleProperties {
		if v == nil {
			return nil
		}
		return v.PipelineExternalComputeScaleProperties
	}).(PipelineExternalComputeScalePropertiesPtrOutput)
}

// VNet properties for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesPtrOutput) VNetProperties() IntegrationRuntimeVNetPropertiesPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeComputeProperties) *IntegrationRuntimeVNetProperties {
		if v == nil {
			return nil
		}
		return v.VNetProperties
	}).(IntegrationRuntimeVNetPropertiesPtrOutput)
}

// The compute resource properties for managed integration runtime.
type IntegrationRuntimeComputePropertiesResponse struct {
	// CopyComputeScale properties for managed integration runtime.
	CopyComputeScaleProperties *CopyComputeScalePropertiesResponse `pulumi:"copyComputeScaleProperties"`
	// Data flow properties for managed integration runtime.
	DataFlowProperties *IntegrationRuntimeDataFlowPropertiesResponse `pulumi:"dataFlowProperties"`
	// The location for managed integration runtime. The supported regions could be found on https://docs.microsoft.com/en-us/azure/data-factory/data-factory-data-movement-activities
	Location *string `pulumi:"location"`
	// Maximum parallel executions count per node for managed integration runtime.
	MaxParallelExecutionsPerNode *int `pulumi:"maxParallelExecutionsPerNode"`
	// The node size requirement to managed integration runtime.
	NodeSize *string `pulumi:"nodeSize"`
	// The required number of nodes for managed integration runtime.
	NumberOfNodes *int `pulumi:"numberOfNodes"`
	// PipelineExternalComputeScale properties for managed integration runtime.
	PipelineExternalComputeScaleProperties *PipelineExternalComputeScalePropertiesResponse `pulumi:"pipelineExternalComputeScaleProperties"`
	// VNet properties for managed integration runtime.
	VNetProperties *IntegrationRuntimeVNetPropertiesResponse `pulumi:"vNetProperties"`
}

// The compute resource properties for managed integration runtime.
type IntegrationRuntimeComputePropertiesResponseOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeComputePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeComputePropertiesResponse)(nil)).Elem()
}

func (o IntegrationRuntimeComputePropertiesResponseOutput) ToIntegrationRuntimeComputePropertiesResponseOutput() IntegrationRuntimeComputePropertiesResponseOutput {
	return o
}

func (o IntegrationRuntimeComputePropertiesResponseOutput) ToIntegrationRuntimeComputePropertiesResponseOutputWithContext(ctx context.Context) IntegrationRuntimeComputePropertiesResponseOutput {
	return o
}

// CopyComputeScale properties for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesResponseOutput) CopyComputeScaleProperties() CopyComputeScalePropertiesResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeComputePropertiesResponse) *CopyComputeScalePropertiesResponse {
		return v.CopyComputeScaleProperties
	}).(CopyComputeScalePropertiesResponsePtrOutput)
}

// Data flow properties for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesResponseOutput) DataFlowProperties() IntegrationRuntimeDataFlowPropertiesResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeComputePropertiesResponse) *IntegrationRuntimeDataFlowPropertiesResponse {
		return v.DataFlowProperties
	}).(IntegrationRuntimeDataFlowPropertiesResponsePtrOutput)
}

// The location for managed integration runtime. The supported regions could be found on https://docs.microsoft.com/en-us/azure/data-factory/data-factory-data-movement-activities
func (o IntegrationRuntimeComputePropertiesResponseOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeComputePropertiesResponse) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Maximum parallel executions count per node for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesResponseOutput) MaxParallelExecutionsPerNode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeComputePropertiesResponse) *int { return v.MaxParallelExecutionsPerNode }).(pulumi.IntPtrOutput)
}

// The node size requirement to managed integration runtime.
func (o IntegrationRuntimeComputePropertiesResponseOutput) NodeSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeComputePropertiesResponse) *string { return v.NodeSize }).(pulumi.StringPtrOutput)
}

// The required number of nodes for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesResponseOutput) NumberOfNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeComputePropertiesResponse) *int { return v.NumberOfNodes }).(pulumi.IntPtrOutput)
}

// PipelineExternalComputeScale properties for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesResponseOutput) PipelineExternalComputeScaleProperties() PipelineExternalComputeScalePropertiesResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeComputePropertiesResponse) *PipelineExternalComputeScalePropertiesResponse {
		return v.PipelineExternalComputeScaleProperties
	}).(PipelineExternalComputeScalePropertiesResponsePtrOutput)
}

// VNet properties for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesResponseOutput) VNetProperties() IntegrationRuntimeVNetPropertiesResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeComputePropertiesResponse) *IntegrationRuntimeVNetPropertiesResponse {
		return v.VNetProperties
	}).(IntegrationRuntimeVNetPropertiesResponsePtrOutput)
}

type IntegrationRuntimeComputePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeComputePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeComputePropertiesResponse)(nil)).Elem()
}

func (o IntegrationRuntimeComputePropertiesResponsePtrOutput) ToIntegrationRuntimeComputePropertiesResponsePtrOutput() IntegrationRuntimeComputePropertiesResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeComputePropertiesResponsePtrOutput) ToIntegrationRuntimeComputePropertiesResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeComputePropertiesResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeComputePropertiesResponsePtrOutput) Elem() IntegrationRuntimeComputePropertiesResponseOutput {
	return o.ApplyT(func(v *IntegrationRuntimeComputePropertiesResponse) IntegrationRuntimeComputePropertiesResponse {
		if v != nil {
			return *v
		}
		var ret IntegrationRuntimeComputePropertiesResponse
		return ret
	}).(IntegrationRuntimeComputePropertiesResponseOutput)
}

// CopyComputeScale properties for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesResponsePtrOutput) CopyComputeScaleProperties() CopyComputeScalePropertiesResponsePtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeComputePropertiesResponse) *CopyComputeScalePropertiesResponse {
		if v == nil {
			return nil
		}
		return v.CopyComputeScaleProperties
	}).(CopyComputeScalePropertiesResponsePtrOutput)
}

// Data flow properties for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesResponsePtrOutput) DataFlowProperties() IntegrationRuntimeDataFlowPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeComputePropertiesResponse) *IntegrationRuntimeDataFlowPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.DataFlowProperties
	}).(IntegrationRuntimeDataFlowPropertiesResponsePtrOutput)
}

// The location for managed integration runtime. The supported regions could be found on https://docs.microsoft.com/en-us/azure/data-factory/data-factory-data-movement-activities
func (o IntegrationRuntimeComputePropertiesResponsePtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeComputePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Maximum parallel executions count per node for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesResponsePtrOutput) MaxParallelExecutionsPerNode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeComputePropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxParallelExecutionsPerNode
	}).(pulumi.IntPtrOutput)
}

// The node size requirement to managed integration runtime.
func (o IntegrationRuntimeComputePropertiesResponsePtrOutput) NodeSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeComputePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.NodeSize
	}).(pulumi.StringPtrOutput)
}

// The required number of nodes for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesResponsePtrOutput) NumberOfNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeComputePropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfNodes
	}).(pulumi.IntPtrOutput)
}

// PipelineExternalComputeScale properties for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesResponsePtrOutput) PipelineExternalComputeScaleProperties() PipelineExternalComputeScalePropertiesResponsePtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeComputePropertiesResponse) *PipelineExternalComputeScalePropertiesResponse {
		if v == nil {
			return nil
		}
		return v.PipelineExternalComputeScaleProperties
	}).(PipelineExternalComputeScalePropertiesResponsePtrOutput)
}

// VNet properties for managed integration runtime.
func (o IntegrationRuntimeComputePropertiesResponsePtrOutput) VNetProperties() IntegrationRuntimeVNetPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeComputePropertiesResponse) *IntegrationRuntimeVNetPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.VNetProperties
	}).(IntegrationRuntimeVNetPropertiesResponsePtrOutput)
}

// Custom setup script properties for a managed dedicated integration runtime.
type IntegrationRuntimeCustomSetupScriptProperties struct {
	// The URI of the Azure blob container that contains the custom setup script.
	BlobContainerUri *string `pulumi:"blobContainerUri"`
	// The SAS token of the Azure blob container.
	SasToken *SecureString `pulumi:"sasToken"`
}

// IntegrationRuntimeCustomSetupScriptPropertiesInput is an input type that accepts IntegrationRuntimeCustomSetupScriptPropertiesArgs and IntegrationRuntimeCustomSetupScriptPropertiesOutput values.
// You can construct a concrete instance of `IntegrationRuntimeCustomSetupScriptPropertiesInput` via:
//
//	IntegrationRuntimeCustomSetupScriptPropertiesArgs{...}
type IntegrationRuntimeCustomSetupScriptPropertiesInput interface {
	pulumi.Input

	ToIntegrationRuntimeCustomSetupScriptPropertiesOutput() IntegrationRuntimeCustomSetupScriptPropertiesOutput
	ToIntegrationRuntimeCustomSetupScriptPropertiesOutputWithContext(context.Context) IntegrationRuntimeCustomSetupScriptPropertiesOutput
}

// Custom setup script properties for a managed dedicated integration runtime.
type IntegrationRuntimeCustomSetupScriptPropertiesArgs struct {
	// The URI of the Azure blob container that contains the custom setup script.
	BlobContainerUri pulumi.StringPtrInput `pulumi:"blobContainerUri"`
	// The SAS token of the Azure blob container.
	SasToken SecureStringPtrInput `pulumi:"sasToken"`
}

func (IntegrationRuntimeCustomSetupScriptPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeCustomSetupScriptProperties)(nil)).Elem()
}

func (i IntegrationRuntimeCustomSetupScriptPropertiesArgs) ToIntegrationRuntimeCustomSetupScriptPropertiesOutput() IntegrationRuntimeCustomSetupScriptPropertiesOutput {
	return i.ToIntegrationRuntimeCustomSetupScriptPropertiesOutputWithContext(context.Background())
}

func (i IntegrationRuntimeCustomSetupScriptPropertiesArgs) ToIntegrationRuntimeCustomSetupScriptPropertiesOutputWithContext(ctx context.Context) IntegrationRuntimeCustomSetupScriptPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeCustomSetupScriptPropertiesOutput)
}

func (i IntegrationRuntimeCustomSetupScriptPropertiesArgs) ToIntegrationRuntimeCustomSetupScriptPropertiesPtrOutput() IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput {
	return i.ToIntegrationRuntimeCustomSetupScriptPropertiesPtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeCustomSetupScriptPropertiesArgs) ToIntegrationRuntimeCustomSetupScriptPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeCustomSetupScriptPropertiesOutput).ToIntegrationRuntimeCustomSetupScriptPropertiesPtrOutputWithContext(ctx)
}

// IntegrationRuntimeCustomSetupScriptPropertiesPtrInput is an input type that accepts IntegrationRuntimeCustomSetupScriptPropertiesArgs, IntegrationRuntimeCustomSetupScriptPropertiesPtr and IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeCustomSetupScriptPropertiesPtrInput` via:
//
//	        IntegrationRuntimeCustomSetupScriptPropertiesArgs{...}
//
//	or:
//
//	        nil
type IntegrationRuntimeCustomSetupScriptPropertiesPtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeCustomSetupScriptPropertiesPtrOutput() IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput
	ToIntegrationRuntimeCustomSetupScriptPropertiesPtrOutputWithContext(context.Context) IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput
}

type integrationRuntimeCustomSetupScriptPropertiesPtrType IntegrationRuntimeCustomSetupScriptPropertiesArgs

func IntegrationRuntimeCustomSetupScriptPropertiesPtr(v *IntegrationRuntimeCustomSetupScriptPropertiesArgs) IntegrationRuntimeCustomSetupScriptPropertiesPtrInput {
	return (*integrationRuntimeCustomSetupScriptPropertiesPtrType)(v)
}

func (*integrationRuntimeCustomSetupScriptPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeCustomSetupScriptProperties)(nil)).Elem()
}

func (i *integrationRuntimeCustomSetupScriptPropertiesPtrType) ToIntegrationRuntimeCustomSetupScriptPropertiesPtrOutput() IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput {
	return i.ToIntegrationRuntimeCustomSetupScriptPropertiesPtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeCustomSetupScriptPropertiesPtrType) ToIntegrationRuntimeCustomSetupScriptPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput)
}

// Custom setup script properties for a managed dedicated integration runtime.
type IntegrationRuntimeCustomSetupScriptPropertiesOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeCustomSetupScriptPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeCustomSetupScriptProperties)(nil)).Elem()
}

func (o IntegrationRuntimeCustomSetupScriptPropertiesOutput) ToIntegrationRuntimeCustomSetupScriptPropertiesOutput() IntegrationRuntimeCustomSetupScriptPropertiesOutput {
	return o
}

func (o IntegrationRuntimeCustomSetupScriptPropertiesOutput) ToIntegrationRuntimeCustomSetupScriptPropertiesOutputWithContext(ctx context.Context) IntegrationRuntimeCustomSetupScriptPropertiesOutput {
	return o
}

func (o IntegrationRuntimeCustomSetupScriptPropertiesOutput) ToIntegrationRuntimeCustomSetupScriptPropertiesPtrOutput() IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput {
	return o.ToIntegrationRuntimeCustomSetupScriptPropertiesPtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeCustomSetupScriptPropertiesOutput) ToIntegrationRuntimeCustomSetupScriptPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IntegrationRuntimeCustomSetupScriptProperties) *IntegrationRuntimeCustomSetupScriptProperties {
		return &v
	}).(IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput)
}

// The URI of the Azure blob container that contains the custom setup script.
func (o IntegrationRuntimeCustomSetupScriptPropertiesOutput) BlobContainerUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeCustomSetupScriptProperties) *string { return v.BlobContainerUri }).(pulumi.StringPtrOutput)
}

// The SAS token of the Azure blob container.
func (o IntegrationRuntimeCustomSetupScriptPropertiesOutput) SasToken() SecureStringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeCustomSetupScriptProperties) *SecureString { return v.SasToken }).(SecureStringPtrOutput)
}

type IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeCustomSetupScriptProperties)(nil)).Elem()
}

func (o IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput) ToIntegrationRuntimeCustomSetupScriptPropertiesPtrOutput() IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput {
	return o
}

func (o IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput) ToIntegrationRuntimeCustomSetupScriptPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput {
	return o
}

func (o IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput) Elem() IntegrationRuntimeCustomSetupScriptPropertiesOutput {
	return o.ApplyT(func(v *IntegrationRuntimeCustomSetupScriptProperties) IntegrationRuntimeCustomSetupScriptProperties {
		if v != nil {
			return *v
		}
		var ret IntegrationRuntimeCustomSetupScriptProperties
		return ret
	}).(IntegrationRuntimeCustomSetupScriptPropertiesOutput)
}

// The URI of the Azure blob container that contains the custom setup script.
func (o IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput) BlobContainerUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeCustomSetupScriptProperties) *string {
		if v == nil {
			return nil
		}
		return v.BlobContainerUri
	}).(pulumi.StringPtrOutput)
}

// The SAS token of the Azure blob container.
func (o IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput) SasToken() SecureStringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeCustomSetupScriptProperties) *SecureString {
		if v == nil {
			return nil
		}
		return v.SasToken
	}).(SecureStringPtrOutput)
}

// Custom setup script properties for a managed dedicated integration runtime.
type IntegrationRuntimeCustomSetupScriptPropertiesResponse struct {
	// The URI of the Azure blob container that contains the custom setup script.
	BlobContainerUri *string `pulumi:"blobContainerUri"`
	// The SAS token of the Azure blob container.
	SasToken *SecureStringResponse `pulumi:"sasToken"`
}

// Custom setup script properties for a managed dedicated integration runtime.
type IntegrationRuntimeCustomSetupScriptPropertiesResponseOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeCustomSetupScriptPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeCustomSetupScriptPropertiesResponse)(nil)).Elem()
}

func (o IntegrationRuntimeCustomSetupScriptPropertiesResponseOutput) ToIntegrationRuntimeCustomSetupScriptPropertiesResponseOutput() IntegrationRuntimeCustomSetupScriptPropertiesResponseOutput {
	return o
}

func (o IntegrationRuntimeCustomSetupScriptPropertiesResponseOutput) ToIntegrationRuntimeCustomSetupScriptPropertiesResponseOutputWithContext(ctx context.Context) IntegrationRuntimeCustomSetupScriptPropertiesResponseOutput {
	return o
}

// The URI of the Azure blob container that contains the custom setup script.
func (o IntegrationRuntimeCustomSetupScriptPropertiesResponseOutput) BlobContainerUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeCustomSetupScriptPropertiesResponse) *string { return v.BlobContainerUri }).(pulumi.StringPtrOutput)
}

// The SAS token of the Azure blob container.
func (o IntegrationRuntimeCustomSetupScriptPropertiesResponseOutput) SasToken() SecureStringResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeCustomSetupScriptPropertiesResponse) *SecureStringResponse { return v.SasToken }).(SecureStringResponsePtrOutput)
}

type IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeCustomSetupScriptPropertiesResponse)(nil)).Elem()
}

func (o IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput) ToIntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput() IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput) ToIntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput) Elem() IntegrationRuntimeCustomSetupScriptPropertiesResponseOutput {
	return o.ApplyT(func(v *IntegrationRuntimeCustomSetupScriptPropertiesResponse) IntegrationRuntimeCustomSetupScriptPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret IntegrationRuntimeCustomSetupScriptPropertiesResponse
		return ret
	}).(IntegrationRuntimeCustomSetupScriptPropertiesResponseOutput)
}

// The URI of the Azure blob container that contains the custom setup script.
func (o IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput) BlobContainerUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeCustomSetupScriptPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.BlobContainerUri
	}).(pulumi.StringPtrOutput)
}

// The SAS token of the Azure blob container.
func (o IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput) SasToken() SecureStringResponsePtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeCustomSetupScriptPropertiesResponse) *SecureStringResponse {
		if v == nil {
			return nil
		}
		return v.SasToken
	}).(SecureStringResponsePtrOutput)
}

// The definition and properties of virtual network to which Azure-SSIS integration runtime will join.
type IntegrationRuntimeCustomerVirtualNetwork struct {
	// The ID of subnet to which Azure-SSIS integration runtime will join.
	SubnetId *string `pulumi:"subnetId"`
}

// IntegrationRuntimeCustomerVirtualNetworkInput is an input type that accepts IntegrationRuntimeCustomerVirtualNetworkArgs and IntegrationRuntimeCustomerVirtualNetworkOutput values.
// You can construct a concrete instance of `IntegrationRuntimeCustomerVirtualNetworkInput` via:
//
//	IntegrationRuntimeCustomerVirtualNetworkArgs{...}
type IntegrationRuntimeCustomerVirtualNetworkInput interface {
	pulumi.Input

	ToIntegrationRuntimeCustomerVirtualNetworkOutput() IntegrationRuntimeCustomerVirtualNetworkOutput
	ToIntegrationRuntimeCustomerVirtualNetworkOutputWithContext(context.Context) IntegrationRuntimeCustomerVirtualNetworkOutput
}

// The definition and properties of virtual network to which Azure-SSIS integration runtime will join.
type IntegrationRuntimeCustomerVirtualNetworkArgs struct {
	// The ID of subnet to which Azure-SSIS integration runtime will join.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
}

func (IntegrationRuntimeCustomerVirtualNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeCustomerVirtualNetwork)(nil)).Elem()
}

func (i IntegrationRuntimeCustomerVirtualNetworkArgs) ToIntegrationRuntimeCustomerVirtualNetworkOutput() IntegrationRuntimeCustomerVirtualNetworkOutput {
	return i.ToIntegrationRuntimeCustomerVirtualNetworkOutputWithContext(context.Background())
}

func (i IntegrationRuntimeCustomerVirtualNetworkArgs) ToIntegrationRuntimeCustomerVirtualNetworkOutputWithContext(ctx context.Context) IntegrationRuntimeCustomerVirtualNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeCustomerVirtualNetworkOutput)
}

func (i IntegrationRuntimeCustomerVirtualNetworkArgs) ToIntegrationRuntimeCustomerVirtualNetworkPtrOutput() IntegrationRuntimeCustomerVirtualNetworkPtrOutput {
	return i.ToIntegrationRuntimeCustomerVirtualNetworkPtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeCustomerVirtualNetworkArgs) ToIntegrationRuntimeCustomerVirtualNetworkPtrOutputWithContext(ctx context.Context) IntegrationRuntimeCustomerVirtualNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeCustomerVirtualNetworkOutput).ToIntegrationRuntimeCustomerVirtualNetworkPtrOutputWithContext(ctx)
}

// IntegrationRuntimeCustomerVirtualNetworkPtrInput is an input type that accepts IntegrationRuntimeCustomerVirtualNetworkArgs, IntegrationRuntimeCustomerVirtualNetworkPtr and IntegrationRuntimeCustomerVirtualNetworkPtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeCustomerVirtualNetworkPtrInput` via:
//
//	        IntegrationRuntimeCustomerVirtualNetworkArgs{...}
//
//	or:
//
//	        nil
type IntegrationRuntimeCustomerVirtualNetworkPtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeCustomerVirtualNetworkPtrOutput() IntegrationRuntimeCustomerVirtualNetworkPtrOutput
	ToIntegrationRuntimeCustomerVirtualNetworkPtrOutputWithContext(context.Context) IntegrationRuntimeCustomerVirtualNetworkPtrOutput
}

type integrationRuntimeCustomerVirtualNetworkPtrType IntegrationRuntimeCustomerVirtualNetworkArgs

func IntegrationRuntimeCustomerVirtualNetworkPtr(v *IntegrationRuntimeCustomerVirtualNetworkArgs) IntegrationRuntimeCustomerVirtualNetworkPtrInput {
	return (*integrationRuntimeCustomerVirtualNetworkPtrType)(v)
}

func (*integrationRuntimeCustomerVirtualNetworkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeCustomerVirtualNetwork)(nil)).Elem()
}

func (i *integrationRuntimeCustomerVirtualNetworkPtrType) ToIntegrationRuntimeCustomerVirtualNetworkPtrOutput() IntegrationRuntimeCustomerVirtualNetworkPtrOutput {
	return i.ToIntegrationRuntimeCustomerVirtualNetworkPtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeCustomerVirtualNetworkPtrType) ToIntegrationRuntimeCustomerVirtualNetworkPtrOutputWithContext(ctx context.Context) IntegrationRuntimeCustomerVirtualNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeCustomerVirtualNetworkPtrOutput)
}

// The definition and properties of virtual network to which Azure-SSIS integration runtime will join.
type IntegrationRuntimeCustomerVirtualNetworkOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeCustomerVirtualNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeCustomerVirtualNetwork)(nil)).Elem()
}

func (o IntegrationRuntimeCustomerVirtualNetworkOutput) ToIntegrationRuntimeCustomerVirtualNetworkOutput() IntegrationRuntimeCustomerVirtualNetworkOutput {
	return o
}

func (o IntegrationRuntimeCustomerVirtualNetworkOutput) ToIntegrationRuntimeCustomerVirtualNetworkOutputWithContext(ctx context.Context) IntegrationRuntimeCustomerVirtualNetworkOutput {
	return o
}

func (o IntegrationRuntimeCustomerVirtualNetworkOutput) ToIntegrationRuntimeCustomerVirtualNetworkPtrOutput() IntegrationRuntimeCustomerVirtualNetworkPtrOutput {
	return o.ToIntegrationRuntimeCustomerVirtualNetworkPtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeCustomerVirtualNetworkOutput) ToIntegrationRuntimeCustomerVirtualNetworkPtrOutputWithContext(ctx context.Context) IntegrationRuntimeCustomerVirtualNetworkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IntegrationRuntimeCustomerVirtualNetwork) *IntegrationRuntimeCustomerVirtualNetwork {
		return &v
	}).(IntegrationRuntimeCustomerVirtualNetworkPtrOutput)
}

// The ID of subnet to which Azure-SSIS integration runtime will join.
func (o IntegrationRuntimeCustomerVirtualNetworkOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeCustomerVirtualNetwork) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

type IntegrationRuntimeCustomerVirtualNetworkPtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeCustomerVirtualNetworkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeCustomerVirtualNetwork)(nil)).Elem()
}

func (o IntegrationRuntimeCustomerVirtualNetworkPtrOutput) ToIntegrationRuntimeCustomerVirtualNetworkPtrOutput() IntegrationRuntimeCustomerVirtualNetworkPtrOutput {
	return o
}

func (o IntegrationRuntimeCustomerVirtualNetworkPtrOutput) ToIntegrationRuntimeCustomerVirtualNetworkPtrOutputWithContext(ctx context.Context) IntegrationRuntimeCustomerVirtualNetworkPtrOutput {
	return o
}

func (o IntegrationRuntimeCustomerVirtualNetworkPtrOutput) Elem() IntegrationRuntimeCustomerVirtualNetworkOutput {
	return o.ApplyT(func(v *IntegrationRuntimeCustomerVirtualNetwork) IntegrationRuntimeCustomerVirtualNetwork {
		if v != nil {
			return *v
		}
		var ret IntegrationRuntimeCustomerVirtualNetwork
		return ret
	}).(IntegrationRuntimeCustomerVirtualNetworkOutput)
}

// The ID of subnet to which Azure-SSIS integration runtime will join.
func (o IntegrationRuntimeCustomerVirtualNetworkPtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeCustomerVirtualNetwork) *string {
		if v == nil {
			return nil
		}
		return v.SubnetId
	}).(pulumi.StringPtrOutput)
}

// The definition and properties of virtual network to which Azure-SSIS integration runtime will join.
type IntegrationRuntimeCustomerVirtualNetworkResponse struct {
	// The ID of subnet to which Azure-SSIS integration runtime will join.
	SubnetId *string `pulumi:"subnetId"`
}

// The definition and properties of virtual network to which Azure-SSIS integration runtime will join.
type IntegrationRuntimeCustomerVirtualNetworkResponseOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeCustomerVirtualNetworkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeCustomerVirtualNetworkResponse)(nil)).Elem()
}

func (o IntegrationRuntimeCustomerVirtualNetworkResponseOutput) ToIntegrationRuntimeCustomerVirtualNetworkResponseOutput() IntegrationRuntimeCustomerVirtualNetworkResponseOutput {
	return o
}

func (o IntegrationRuntimeCustomerVirtualNetworkResponseOutput) ToIntegrationRuntimeCustomerVirtualNetworkResponseOutputWithContext(ctx context.Context) IntegrationRuntimeCustomerVirtualNetworkResponseOutput {
	return o
}

// The ID of subnet to which Azure-SSIS integration runtime will join.
func (o IntegrationRuntimeCustomerVirtualNetworkResponseOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeCustomerVirtualNetworkResponse) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

type IntegrationRuntimeCustomerVirtualNetworkResponsePtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeCustomerVirtualNetworkResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeCustomerVirtualNetworkResponse)(nil)).Elem()
}

func (o IntegrationRuntimeCustomerVirtualNetworkResponsePtrOutput) ToIntegrationRuntimeCustomerVirtualNetworkResponsePtrOutput() IntegrationRuntimeCustomerVirtualNetworkResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeCustomerVirtualNetworkResponsePtrOutput) ToIntegrationRuntimeCustomerVirtualNetworkResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeCustomerVirtualNetworkResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeCustomerVirtualNetworkResponsePtrOutput) Elem() IntegrationRuntimeCustomerVirtualNetworkResponseOutput {
	return o.ApplyT(func(v *IntegrationRuntimeCustomerVirtualNetworkResponse) IntegrationRuntimeCustomerVirtualNetworkResponse {
		if v != nil {
			return *v
		}
		var ret IntegrationRuntimeCustomerVirtualNetworkResponse
		return ret
	}).(IntegrationRuntimeCustomerVirtualNetworkResponseOutput)
}

// The ID of subnet to which Azure-SSIS integration runtime will join.
func (o IntegrationRuntimeCustomerVirtualNetworkResponsePtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeCustomerVirtualNetworkResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubnetId
	}).(pulumi.StringPtrOutput)
}

// Data flow properties for managed integration runtime.
type IntegrationRuntimeDataFlowProperties struct {
	// Cluster will not be recycled and it will be used in next data flow activity run until TTL (time to live) is reached if this is set as false. Default is true.
	Cleanup *bool `pulumi:"cleanup"`
	// Compute type of the cluster which will execute data flow job.
	ComputeType *string `pulumi:"computeType"`
	// Core count of the cluster which will execute data flow job. Supported values are: 8, 16, 32, 48, 80, 144 and 272.
	CoreCount *int `pulumi:"coreCount"`
	// Custom properties are used to tune the data flow runtime performance.
	CustomProperties []IntegrationRuntimeDataFlowPropertiesCustomProperties `pulumi:"customProperties"`
	// Time to live (in minutes) setting of the cluster which will execute data flow job.
	TimeToLive *int `pulumi:"timeToLive"`
}

// IntegrationRuntimeDataFlowPropertiesInput is an input type that accepts IntegrationRuntimeDataFlowPropertiesArgs and IntegrationRuntimeDataFlowPropertiesOutput values.
// You can construct a concrete instance of `IntegrationRuntimeDataFlowPropertiesInput` via:
//
//	IntegrationRuntimeDataFlowPropertiesArgs{...}
type IntegrationRuntimeDataFlowPropertiesInput interface {
	pulumi.Input

	ToIntegrationRuntimeDataFlowPropertiesOutput() IntegrationRuntimeDataFlowPropertiesOutput
	ToIntegrationRuntimeDataFlowPropertiesOutputWithContext(context.Context) IntegrationRuntimeDataFlowPropertiesOutput
}

// Data flow properties for managed integration runtime.
type IntegrationRuntimeDataFlowPropertiesArgs struct {
	// Cluster will not be recycled and it will be used in next data flow activity run until TTL (time to live) is reached if this is set as false. Default is true.
	Cleanup pulumi.BoolPtrInput `pulumi:"cleanup"`
	// Compute type of the cluster which will execute data flow job.
	ComputeType pulumi.StringPtrInput `pulumi:"computeType"`
	// Core count of the cluster which will execute data flow job. Supported values are: 8, 16, 32, 48, 80, 144 and 272.
	CoreCount pulumi.IntPtrInput `pulumi:"coreCount"`
	// Custom properties are used to tune the data flow runtime performance.
	CustomProperties IntegrationRuntimeDataFlowPropertiesCustomPropertiesArrayInput `pulumi:"customProperties"`
	// Time to live (in minutes) setting of the cluster which will execute data flow job.
	TimeToLive pulumi.IntPtrInput `pulumi:"timeToLive"`
}

func (IntegrationRuntimeDataFlowPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeDataFlowProperties)(nil)).Elem()
}

func (i IntegrationRuntimeDataFlowPropertiesArgs) ToIntegrationRuntimeDataFlowPropertiesOutput() IntegrationRuntimeDataFlowPropertiesOutput {
	return i.ToIntegrationRuntimeDataFlowPropertiesOutputWithContext(context.Background())
}

func (i IntegrationRuntimeDataFlowPropertiesArgs) ToIntegrationRuntimeDataFlowPropertiesOutputWithContext(ctx context.Context) IntegrationRuntimeDataFlowPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeDataFlowPropertiesOutput)
}

func (i IntegrationRuntimeDataFlowPropertiesArgs) ToIntegrationRuntimeDataFlowPropertiesPtrOutput() IntegrationRuntimeDataFlowPropertiesPtrOutput {
	return i.ToIntegrationRuntimeDataFlowPropertiesPtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeDataFlowPropertiesArgs) ToIntegrationRuntimeDataFlowPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeDataFlowPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeDataFlowPropertiesOutput).ToIntegrationRuntimeDataFlowPropertiesPtrOutputWithContext(ctx)
}

// IntegrationRuntimeDataFlowPropertiesPtrInput is an input type that accepts IntegrationRuntimeDataFlowPropertiesArgs, IntegrationRuntimeDataFlowPropertiesPtr and IntegrationRuntimeDataFlowPropertiesPtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeDataFlowPropertiesPtrInput` via:
//
//	        IntegrationRuntimeDataFlowPropertiesArgs{...}
//
//	or:
//
//	        nil
type IntegrationRuntimeDataFlowPropertiesPtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeDataFlowPropertiesPtrOutput() IntegrationRuntimeDataFlowPropertiesPtrOutput
	ToIntegrationRuntimeDataFlowPropertiesPtrOutputWithContext(context.Context) IntegrationRuntimeDataFlowPropertiesPtrOutput
}

type integrationRuntimeDataFlowPropertiesPtrType IntegrationRuntimeDataFlowPropertiesArgs

func IntegrationRuntimeDataFlowPropertiesPtr(v *IntegrationRuntimeDataFlowPropertiesArgs) IntegrationRuntimeDataFlowPropertiesPtrInput {
	return (*integrationRuntimeDataFlowPropertiesPtrType)(v)
}

func (*integrationRuntimeDataFlowPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeDataFlowProperties)(nil)).Elem()
}

func (i *integrationRuntimeDataFlowPropertiesPtrType) ToIntegrationRuntimeDataFlowPropertiesPtrOutput() IntegrationRuntimeDataFlowPropertiesPtrOutput {
	return i.ToIntegrationRuntimeDataFlowPropertiesPtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeDataFlowPropertiesPtrType) ToIntegrationRuntimeDataFlowPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeDataFlowPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeDataFlowPropertiesPtrOutput)
}

// Data flow properties for managed integration runtime.
type IntegrationRuntimeDataFlowPropertiesOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeDataFlowPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeDataFlowProperties)(nil)).Elem()
}

func (o IntegrationRuntimeDataFlowPropertiesOutput) ToIntegrationRuntimeDataFlowPropertiesOutput() IntegrationRuntimeDataFlowPropertiesOutput {
	return o
}

func (o IntegrationRuntimeDataFlowPropertiesOutput) ToIntegrationRuntimeDataFlowPropertiesOutputWithContext(ctx context.Context) IntegrationRuntimeDataFlowPropertiesOutput {
	return o
}

func (o IntegrationRuntimeDataFlowPropertiesOutput) ToIntegrationRuntimeDataFlowPropertiesPtrOutput() IntegrationRuntimeDataFlowPropertiesPtrOutput {
	return o.ToIntegrationRuntimeDataFlowPropertiesPtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeDataFlowPropertiesOutput) ToIntegrationRuntimeDataFlowPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeDataFlowPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IntegrationRuntimeDataFlowProperties) *IntegrationRuntimeDataFlowProperties {
		return &v
	}).(IntegrationRuntimeDataFlowPropertiesPtrOutput)
}

// Cluster will not be recycled and it will be used in next data flow activity run until TTL (time to live) is reached if this is set as false. Default is true.
func (o IntegrationRuntimeDataFlowPropertiesOutput) Cleanup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeDataFlowProperties) *bool { return v.Cleanup }).(pulumi.BoolPtrOutput)
}

// Compute type of the cluster which will execute data flow job.
func (o IntegrationRuntimeDataFlowPropertiesOutput) ComputeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeDataFlowProperties) *string { return v.ComputeType }).(pulumi.StringPtrOutput)
}

// Core count of the cluster which will execute data flow job. Supported values are: 8, 16, 32, 48, 80, 144 and 272.
func (o IntegrationRuntimeDataFlowPropertiesOutput) CoreCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeDataFlowProperties) *int { return v.CoreCount }).(pulumi.IntPtrOutput)
}

// Custom properties are used to tune the data flow runtime performance.
func (o IntegrationRuntimeDataFlowPropertiesOutput) CustomProperties() IntegrationRuntimeDataFlowPropertiesCustomPropertiesArrayOutput {
	return o.ApplyT(func(v IntegrationRuntimeDataFlowProperties) []IntegrationRuntimeDataFlowPropertiesCustomProperties {
		return v.CustomProperties
	}).(IntegrationRuntimeDataFlowPropertiesCustomPropertiesArrayOutput)
}

// Time to live (in minutes) setting of the cluster which will execute data flow job.
func (o IntegrationRuntimeDataFlowPropertiesOutput) TimeToLive() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeDataFlowProperties) *int { return v.TimeToLive }).(pulumi.IntPtrOutput)
}

type IntegrationRuntimeDataFlowPropertiesPtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeDataFlowPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeDataFlowProperties)(nil)).Elem()
}

func (o IntegrationRuntimeDataFlowPropertiesPtrOutput) ToIntegrationRuntimeDataFlowPropertiesPtrOutput() IntegrationRuntimeDataFlowPropertiesPtrOutput {
	return o
}

func (o IntegrationRuntimeDataFlowPropertiesPtrOutput) ToIntegrationRuntimeDataFlowPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeDataFlowPropertiesPtrOutput {
	return o
}

func (o IntegrationRuntimeDataFlowPropertiesPtrOutput) Elem() IntegrationRuntimeDataFlowPropertiesOutput {
	return o.ApplyT(func(v *IntegrationRuntimeDataFlowProperties) IntegrationRuntimeDataFlowProperties {
		if v != nil {
			return *v
		}
		var ret IntegrationRuntimeDataFlowProperties
		return ret
	}).(IntegrationRuntimeDataFlowPropertiesOutput)
}

// Cluster will not be recycled and it will be used in next data flow activity run until TTL (time to live) is reached if this is set as false. Default is true.
func (o IntegrationRuntimeDataFlowPropertiesPtrOutput) Cleanup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeDataFlowProperties) *bool {
		if v == nil {
			return nil
		}
		return v.Cleanup
	}).(pulumi.BoolPtrOutput)
}

// Compute type of the cluster which will execute data flow job.
func (o IntegrationRuntimeDataFlowPropertiesPtrOutput) ComputeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeDataFlowProperties) *string {
		if v == nil {
			return nil
		}
		return v.ComputeType
	}).(pulumi.StringPtrOutput)
}

// Core count of the cluster which will execute data flow job. Supported values are: 8, 16, 32, 48, 80, 144 and 272.
func (o IntegrationRuntimeDataFlowPropertiesPtrOutput) CoreCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeDataFlowProperties) *int {
		if v == nil {
			return nil
		}
		return v.CoreCount
	}).(pulumi.IntPtrOutput)
}

// Custom properties are used to tune the data flow runtime performance.
func (o IntegrationRuntimeDataFlowPropertiesPtrOutput) CustomProperties() IntegrationRuntimeDataFlowPropertiesCustomPropertiesArrayOutput {
	return o.ApplyT(func(v *IntegrationRuntimeDataFlowProperties) []IntegrationRuntimeDataFlowPropertiesCustomProperties {
		if v == nil {
			return nil
		}
		return v.CustomProperties
	}).(IntegrationRuntimeDataFlowPropertiesCustomPropertiesArrayOutput)
}

// Time to live (in minutes) setting of the cluster which will execute data flow job.
func (o IntegrationRuntimeDataFlowPropertiesPtrOutput) TimeToLive() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeDataFlowProperties) *int {
		if v == nil {
			return nil
		}
		return v.TimeToLive
	}).(pulumi.IntPtrOutput)
}

type IntegrationRuntimeDataFlowPropertiesCustomProperties struct {
	// Name of custom property.
	Name *string `pulumi:"name"`
	// Value of custom property.
	Value *string `pulumi:"value"`
}

// IntegrationRuntimeDataFlowPropertiesCustomPropertiesInput is an input type that accepts IntegrationRuntimeDataFlowPropertiesCustomPropertiesArgs and IntegrationRuntimeDataFlowPropertiesCustomPropertiesOutput values.
// You can construct a concrete instance of `IntegrationRuntimeDataFlowPropertiesCustomPropertiesInput` via:
//
//	IntegrationRuntimeDataFlowPropertiesCustomPropertiesArgs{...}
type IntegrationRuntimeDataFlowPropertiesCustomPropertiesInput interface {
	pulumi.Input

	ToIntegrationRuntimeDataFlowPropertiesCustomPropertiesOutput() IntegrationRuntimeDataFlowPropertiesCustomPropertiesOutput
	ToIntegrationRuntimeDataFlowPropertiesCustomPropertiesOutputWithContext(context.Context) IntegrationRuntimeDataFlowPropertiesCustomPropertiesOutput
}

type IntegrationRuntimeDataFlowPropertiesCustomPropertiesArgs struct {
	// Name of custom property.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Value of custom property.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (IntegrationRuntimeDataFlowPropertiesCustomPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeDataFlowPropertiesCustomProperties)(nil)).Elem()
}

func (i IntegrationRuntimeDataFlowPropertiesCustomPropertiesArgs) ToIntegrationRuntimeDataFlowPropertiesCustomPropertiesOutput() IntegrationRuntimeDataFlowPropertiesCustomPropertiesOutput {
	return i.ToIntegrationRuntimeDataFlowPropertiesCustomPropertiesOutputWithContext(context.Background())
}

func (i IntegrationRuntimeDataFlowPropertiesCustomPropertiesArgs) ToIntegrationRuntimeDataFlowPropertiesCustomPropertiesOutputWithContext(ctx context.Context) IntegrationRuntimeDataFlowPropertiesCustomPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeDataFlowPropertiesCustomPropertiesOutput)
}

// IntegrationRuntimeDataFlowPropertiesCustomPropertiesArrayInput is an input type that accepts IntegrationRuntimeDataFlowPropertiesCustomPropertiesArray and IntegrationRuntimeDataFlowPropertiesCustomPropertiesArrayOutput values.
// You can construct a concrete instance of `IntegrationRuntimeDataFlowPropertiesCustomPropertiesArrayInput` via:
//
//	IntegrationRuntimeDataFlowPropertiesCustomPropertiesArray{ IntegrationRuntimeDataFlowPropertiesCustomPropertiesArgs{...} }
type IntegrationRuntimeDataFlowPropertiesCustomPropertiesArrayInput interface {
	pulumi.Input

	ToIntegrationRuntimeDataFlowPropertiesCustomPropertiesArrayOutput() IntegrationRuntimeDataFlowPropertiesCustomPropertiesArrayOutput
	ToIntegrationRuntimeDataFlowPropertiesCustomPropertiesArrayOutputWithContext(context.Context) IntegrationRuntimeDataFlowPropertiesCustomPropertiesArrayOutput
}

type IntegrationRuntimeDataFlowPropertiesCustomPropertiesArray []IntegrationRuntimeDataFlowPropertiesCustomPropertiesInput

func (IntegrationRuntimeDataFlowPropertiesCustomPropertiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationRuntimeDataFlowPropertiesCustomProperties)(nil)).Elem()
}

func (i IntegrationRuntimeDataFlowPropertiesCustomPropertiesArray) ToIntegrationRuntimeDataFlowPropertiesCustomPropertiesArrayOutput() IntegrationRuntimeDataFlowPropertiesCustomPropertiesArrayOutput {
	return i.ToIntegrationRuntimeDataFlowPropertiesCustomPropertiesArrayOutputWithContext(context.Background())
}

func (i IntegrationRuntimeDataFlowPropertiesCustomPropertiesArray) ToIntegrationRuntimeDataFlowPropertiesCustomPropertiesArrayOutputWithContext(ctx context.Context) IntegrationRuntimeDataFlowPropertiesCustomPropertiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeDataFlowPropertiesCustomPropertiesArrayOutput)
}

type IntegrationRuntimeDataFlowPropertiesCustomPropertiesOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeDataFlowPropertiesCustomPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeDataFlowPropertiesCustomProperties)(nil)).Elem()
}

func (o IntegrationRuntimeDataFlowPropertiesCustomPropertiesOutput) ToIntegrationRuntimeDataFlowPropertiesCustomPropertiesOutput() IntegrationRuntimeDataFlowPropertiesCustomPropertiesOutput {
	return o
}

func (o IntegrationRuntimeDataFlowPropertiesCustomPropertiesOutput) ToIntegrationRuntimeDataFlowPropertiesCustomPropertiesOutputWithContext(ctx context.Context) IntegrationRuntimeDataFlowPropertiesCustomPropertiesOutput {
	return o
}

// Name of custom property.
func (o IntegrationRuntimeDataFlowPropertiesCustomPropertiesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeDataFlowPropertiesCustomProperties) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Value of custom property.
func (o IntegrationRuntimeDataFlowPropertiesCustomPropertiesOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeDataFlowPropertiesCustomProperties) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type IntegrationRuntimeDataFlowPropertiesCustomPropertiesArrayOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeDataFlowPropertiesCustomPropertiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationRuntimeDataFlowPropertiesCustomProperties)(nil)).Elem()
}

func (o IntegrationRuntimeDataFlowPropertiesCustomPropertiesArrayOutput) ToIntegrationRuntimeDataFlowPropertiesCustomPropertiesArrayOutput() IntegrationRuntimeDataFlowPropertiesCustomPropertiesArrayOutput {
	return o
}

func (o IntegrationRuntimeDataFlowPropertiesCustomPropertiesArrayOutput) ToIntegrationRuntimeDataFlowPropertiesCustomPropertiesArrayOutputWithContext(ctx context.Context) IntegrationRuntimeDataFlowPropertiesCustomPropertiesArrayOutput {
	return o
}

func (o IntegrationRuntimeDataFlowPropertiesCustomPropertiesArrayOutput) Index(i pulumi.IntInput) IntegrationRuntimeDataFlowPropertiesCustomPropertiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IntegrationRuntimeDataFlowPropertiesCustomProperties {
		return vs[0].([]IntegrationRuntimeDataFlowPropertiesCustomProperties)[vs[1].(int)]
	}).(IntegrationRuntimeDataFlowPropertiesCustomPropertiesOutput)
}

// Data flow properties for managed integration runtime.
type IntegrationRuntimeDataFlowPropertiesResponse struct {
	// Cluster will not be recycled and it will be used in next data flow activity run until TTL (time to live) is reached if this is set as false. Default is true.
	Cleanup *bool `pulumi:"cleanup"`
	// Compute type of the cluster which will execute data flow job.
	ComputeType *string `pulumi:"computeType"`
	// Core count of the cluster which will execute data flow job. Supported values are: 8, 16, 32, 48, 80, 144 and 272.
	CoreCount *int `pulumi:"coreCount"`
	// Custom properties are used to tune the data flow runtime performance.
	CustomProperties []IntegrationRuntimeDataFlowPropertiesResponseCustomProperties `pulumi:"customProperties"`
	// Time to live (in minutes) setting of the cluster which will execute data flow job.
	TimeToLive *int `pulumi:"timeToLive"`
}

// Data flow properties for managed integration runtime.
type IntegrationRuntimeDataFlowPropertiesResponseOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeDataFlowPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeDataFlowPropertiesResponse)(nil)).Elem()
}

func (o IntegrationRuntimeDataFlowPropertiesResponseOutput) ToIntegrationRuntimeDataFlowPropertiesResponseOutput() IntegrationRuntimeDataFlowPropertiesResponseOutput {
	return o
}

func (o IntegrationRuntimeDataFlowPropertiesResponseOutput) ToIntegrationRuntimeDataFlowPropertiesResponseOutputWithContext(ctx context.Context) IntegrationRuntimeDataFlowPropertiesResponseOutput {
	return o
}

// Cluster will not be recycled and it will be used in next data flow activity run until TTL (time to live) is reached if this is set as false. Default is true.
func (o IntegrationRuntimeDataFlowPropertiesResponseOutput) Cleanup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeDataFlowPropertiesResponse) *bool { return v.Cleanup }).(pulumi.BoolPtrOutput)
}

// Compute type of the cluster which will execute data flow job.
func (o IntegrationRuntimeDataFlowPropertiesResponseOutput) ComputeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeDataFlowPropertiesResponse) *string { return v.ComputeType }).(pulumi.StringPtrOutput)
}

// Core count of the cluster which will execute data flow job. Supported values are: 8, 16, 32, 48, 80, 144 and 272.
func (o IntegrationRuntimeDataFlowPropertiesResponseOutput) CoreCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeDataFlowPropertiesResponse) *int { return v.CoreCount }).(pulumi.IntPtrOutput)
}

// Custom properties are used to tune the data flow runtime performance.
func (o IntegrationRuntimeDataFlowPropertiesResponseOutput) CustomProperties() IntegrationRuntimeDataFlowPropertiesResponseCustomPropertiesArrayOutput {
	return o.ApplyT(func(v IntegrationRuntimeDataFlowPropertiesResponse) []IntegrationRuntimeDataFlowPropertiesResponseCustomProperties {
		return v.CustomProperties
	}).(IntegrationRuntimeDataFlowPropertiesResponseCustomPropertiesArrayOutput)
}

// Time to live (in minutes) setting of the cluster which will execute data flow job.
func (o IntegrationRuntimeDataFlowPropertiesResponseOutput) TimeToLive() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeDataFlowPropertiesResponse) *int { return v.TimeToLive }).(pulumi.IntPtrOutput)
}

type IntegrationRuntimeDataFlowPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeDataFlowPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeDataFlowPropertiesResponse)(nil)).Elem()
}

func (o IntegrationRuntimeDataFlowPropertiesResponsePtrOutput) ToIntegrationRuntimeDataFlowPropertiesResponsePtrOutput() IntegrationRuntimeDataFlowPropertiesResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeDataFlowPropertiesResponsePtrOutput) ToIntegrationRuntimeDataFlowPropertiesResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeDataFlowPropertiesResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeDataFlowPropertiesResponsePtrOutput) Elem() IntegrationRuntimeDataFlowPropertiesResponseOutput {
	return o.ApplyT(func(v *IntegrationRuntimeDataFlowPropertiesResponse) IntegrationRuntimeDataFlowPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret IntegrationRuntimeDataFlowPropertiesResponse
		return ret
	}).(IntegrationRuntimeDataFlowPropertiesResponseOutput)
}

// Cluster will not be recycled and it will be used in next data flow activity run until TTL (time to live) is reached if this is set as false. Default is true.
func (o IntegrationRuntimeDataFlowPropertiesResponsePtrOutput) Cleanup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeDataFlowPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Cleanup
	}).(pulumi.BoolPtrOutput)
}

// Compute type of the cluster which will execute data flow job.
func (o IntegrationRuntimeDataFlowPropertiesResponsePtrOutput) ComputeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeDataFlowPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ComputeType
	}).(pulumi.StringPtrOutput)
}

// Core count of the cluster which will execute data flow job. Supported values are: 8, 16, 32, 48, 80, 144 and 272.
func (o IntegrationRuntimeDataFlowPropertiesResponsePtrOutput) CoreCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeDataFlowPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.CoreCount
	}).(pulumi.IntPtrOutput)
}

// Custom properties are used to tune the data flow runtime performance.
func (o IntegrationRuntimeDataFlowPropertiesResponsePtrOutput) CustomProperties() IntegrationRuntimeDataFlowPropertiesResponseCustomPropertiesArrayOutput {
	return o.ApplyT(func(v *IntegrationRuntimeDataFlowPropertiesResponse) []IntegrationRuntimeDataFlowPropertiesResponseCustomProperties {
		if v == nil {
			return nil
		}
		return v.CustomProperties
	}).(IntegrationRuntimeDataFlowPropertiesResponseCustomPropertiesArrayOutput)
}

// Time to live (in minutes) setting of the cluster which will execute data flow job.
func (o IntegrationRuntimeDataFlowPropertiesResponsePtrOutput) TimeToLive() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeDataFlowPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.TimeToLive
	}).(pulumi.IntPtrOutput)
}

type IntegrationRuntimeDataFlowPropertiesResponseCustomProperties struct {
	// Name of custom property.
	Name *string `pulumi:"name"`
	// Value of custom property.
	Value *string `pulumi:"value"`
}

type IntegrationRuntimeDataFlowPropertiesResponseCustomPropertiesOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeDataFlowPropertiesResponseCustomPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeDataFlowPropertiesResponseCustomProperties)(nil)).Elem()
}

func (o IntegrationRuntimeDataFlowPropertiesResponseCustomPropertiesOutput) ToIntegrationRuntimeDataFlowPropertiesResponseCustomPropertiesOutput() IntegrationRuntimeDataFlowPropertiesResponseCustomPropertiesOutput {
	return o
}

func (o IntegrationRuntimeDataFlowPropertiesResponseCustomPropertiesOutput) ToIntegrationRuntimeDataFlowPropertiesResponseCustomPropertiesOutputWithContext(ctx context.Context) IntegrationRuntimeDataFlowPropertiesResponseCustomPropertiesOutput {
	return o
}

// Name of custom property.
func (o IntegrationRuntimeDataFlowPropertiesResponseCustomPropertiesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeDataFlowPropertiesResponseCustomProperties) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Value of custom property.
func (o IntegrationRuntimeDataFlowPropertiesResponseCustomPropertiesOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeDataFlowPropertiesResponseCustomProperties) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type IntegrationRuntimeDataFlowPropertiesResponseCustomPropertiesArrayOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeDataFlowPropertiesResponseCustomPropertiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationRuntimeDataFlowPropertiesResponseCustomProperties)(nil)).Elem()
}

func (o IntegrationRuntimeDataFlowPropertiesResponseCustomPropertiesArrayOutput) ToIntegrationRuntimeDataFlowPropertiesResponseCustomPropertiesArrayOutput() IntegrationRuntimeDataFlowPropertiesResponseCustomPropertiesArrayOutput {
	return o
}

func (o IntegrationRuntimeDataFlowPropertiesResponseCustomPropertiesArrayOutput) ToIntegrationRuntimeDataFlowPropertiesResponseCustomPropertiesArrayOutputWithContext(ctx context.Context) IntegrationRuntimeDataFlowPropertiesResponseCustomPropertiesArrayOutput {
	return o
}

func (o IntegrationRuntimeDataFlowPropertiesResponseCustomPropertiesArrayOutput) Index(i pulumi.IntInput) IntegrationRuntimeDataFlowPropertiesResponseCustomPropertiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IntegrationRuntimeDataFlowPropertiesResponseCustomProperties {
		return vs[0].([]IntegrationRuntimeDataFlowPropertiesResponseCustomProperties)[vs[1].(int)]
	}).(IntegrationRuntimeDataFlowPropertiesResponseCustomPropertiesOutput)
}

// Data proxy properties for a managed dedicated integration runtime.
type IntegrationRuntimeDataProxyProperties struct {
	// The self-hosted integration runtime reference.
	ConnectVia *EntityReference `pulumi:"connectVia"`
	// The path to contain the staged data in the Blob storage.
	Path *string `pulumi:"path"`
	// The staging linked service reference.
	StagingLinkedService *EntityReference `pulumi:"stagingLinkedService"`
}

// IntegrationRuntimeDataProxyPropertiesInput is an input type that accepts IntegrationRuntimeDataProxyPropertiesArgs and IntegrationRuntimeDataProxyPropertiesOutput values.
// You can construct a concrete instance of `IntegrationRuntimeDataProxyPropertiesInput` via:
//
//	IntegrationRuntimeDataProxyPropertiesArgs{...}
type IntegrationRuntimeDataProxyPropertiesInput interface {
	pulumi.Input

	ToIntegrationRuntimeDataProxyPropertiesOutput() IntegrationRuntimeDataProxyPropertiesOutput
	ToIntegrationRuntimeDataProxyPropertiesOutputWithContext(context.Context) IntegrationRuntimeDataProxyPropertiesOutput
}

// Data proxy properties for a managed dedicated integration runtime.
type IntegrationRuntimeDataProxyPropertiesArgs struct {
	// The self-hosted integration runtime reference.
	ConnectVia EntityReferencePtrInput `pulumi:"connectVia"`
	// The path to contain the staged data in the Blob storage.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// The staging linked service reference.
	StagingLinkedService EntityReferencePtrInput `pulumi:"stagingLinkedService"`
}

func (IntegrationRuntimeDataProxyPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeDataProxyProperties)(nil)).Elem()
}

func (i IntegrationRuntimeDataProxyPropertiesArgs) ToIntegrationRuntimeDataProxyPropertiesOutput() IntegrationRuntimeDataProxyPropertiesOutput {
	return i.ToIntegrationRuntimeDataProxyPropertiesOutputWithContext(context.Background())
}

func (i IntegrationRuntimeDataProxyPropertiesArgs) ToIntegrationRuntimeDataProxyPropertiesOutputWithContext(ctx context.Context) IntegrationRuntimeDataProxyPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeDataProxyPropertiesOutput)
}

func (i IntegrationRuntimeDataProxyPropertiesArgs) ToIntegrationRuntimeDataProxyPropertiesPtrOutput() IntegrationRuntimeDataProxyPropertiesPtrOutput {
	return i.ToIntegrationRuntimeDataProxyPropertiesPtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeDataProxyPropertiesArgs) ToIntegrationRuntimeDataProxyPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeDataProxyPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeDataProxyPropertiesOutput).ToIntegrationRuntimeDataProxyPropertiesPtrOutputWithContext(ctx)
}

// IntegrationRuntimeDataProxyPropertiesPtrInput is an input type that accepts IntegrationRuntimeDataProxyPropertiesArgs, IntegrationRuntimeDataProxyPropertiesPtr and IntegrationRuntimeDataProxyPropertiesPtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeDataProxyPropertiesPtrInput` via:
//
//	        IntegrationRuntimeDataProxyPropertiesArgs{...}
//
//	or:
//
//	        nil
type IntegrationRuntimeDataProxyPropertiesPtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeDataProxyPropertiesPtrOutput() IntegrationRuntimeDataProxyPropertiesPtrOutput
	ToIntegrationRuntimeDataProxyPropertiesPtrOutputWithContext(context.Context) IntegrationRuntimeDataProxyPropertiesPtrOutput
}

type integrationRuntimeDataProxyPropertiesPtrType IntegrationRuntimeDataProxyPropertiesArgs

func IntegrationRuntimeDataProxyPropertiesPtr(v *IntegrationRuntimeDataProxyPropertiesArgs) IntegrationRuntimeDataProxyPropertiesPtrInput {
	return (*integrationRuntimeDataProxyPropertiesPtrType)(v)
}

func (*integrationRuntimeDataProxyPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeDataProxyProperties)(nil)).Elem()
}

func (i *integrationRuntimeDataProxyPropertiesPtrType) ToIntegrationRuntimeDataProxyPropertiesPtrOutput() IntegrationRuntimeDataProxyPropertiesPtrOutput {
	return i.ToIntegrationRuntimeDataProxyPropertiesPtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeDataProxyPropertiesPtrType) ToIntegrationRuntimeDataProxyPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeDataProxyPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeDataProxyPropertiesPtrOutput)
}

// Data proxy properties for a managed dedicated integration runtime.
type IntegrationRuntimeDataProxyPropertiesOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeDataProxyPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeDataProxyProperties)(nil)).Elem()
}

func (o IntegrationRuntimeDataProxyPropertiesOutput) ToIntegrationRuntimeDataProxyPropertiesOutput() IntegrationRuntimeDataProxyPropertiesOutput {
	return o
}

func (o IntegrationRuntimeDataProxyPropertiesOutput) ToIntegrationRuntimeDataProxyPropertiesOutputWithContext(ctx context.Context) IntegrationRuntimeDataProxyPropertiesOutput {
	return o
}

func (o IntegrationRuntimeDataProxyPropertiesOutput) ToIntegrationRuntimeDataProxyPropertiesPtrOutput() IntegrationRuntimeDataProxyPropertiesPtrOutput {
	return o.ToIntegrationRuntimeDataProxyPropertiesPtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeDataProxyPropertiesOutput) ToIntegrationRuntimeDataProxyPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeDataProxyPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IntegrationRuntimeDataProxyProperties) *IntegrationRuntimeDataProxyProperties {
		return &v
	}).(IntegrationRuntimeDataProxyPropertiesPtrOutput)
}

// The self-hosted integration runtime reference.
func (o IntegrationRuntimeDataProxyPropertiesOutput) ConnectVia() EntityReferencePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeDataProxyProperties) *EntityReference { return v.ConnectVia }).(EntityReferencePtrOutput)
}

// The path to contain the staged data in the Blob storage.
func (o IntegrationRuntimeDataProxyPropertiesOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeDataProxyProperties) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// The staging linked service reference.
func (o IntegrationRuntimeDataProxyPropertiesOutput) StagingLinkedService() EntityReferencePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeDataProxyProperties) *EntityReference { return v.StagingLinkedService }).(EntityReferencePtrOutput)
}

type IntegrationRuntimeDataProxyPropertiesPtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeDataProxyPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeDataProxyProperties)(nil)).Elem()
}

func (o IntegrationRuntimeDataProxyPropertiesPtrOutput) ToIntegrationRuntimeDataProxyPropertiesPtrOutput() IntegrationRuntimeDataProxyPropertiesPtrOutput {
	return o
}

func (o IntegrationRuntimeDataProxyPropertiesPtrOutput) ToIntegrationRuntimeDataProxyPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeDataProxyPropertiesPtrOutput {
	return o
}

func (o IntegrationRuntimeDataProxyPropertiesPtrOutput) Elem() IntegrationRuntimeDataProxyPropertiesOutput {
	return o.ApplyT(func(v *IntegrationRuntimeDataProxyProperties) IntegrationRuntimeDataProxyProperties {
		if v != nil {
			return *v
		}
		var ret IntegrationRuntimeDataProxyProperties
		return ret
	}).(IntegrationRuntimeDataProxyPropertiesOutput)
}

// The self-hosted integration runtime reference.
func (o IntegrationRuntimeDataProxyPropertiesPtrOutput) ConnectVia() EntityReferencePtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeDataProxyProperties) *EntityReference {
		if v == nil {
			return nil
		}
		return v.ConnectVia
	}).(EntityReferencePtrOutput)
}

// The path to contain the staged data in the Blob storage.
func (o IntegrationRuntimeDataProxyPropertiesPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeDataProxyProperties) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// The staging linked service reference.
func (o IntegrationRuntimeDataProxyPropertiesPtrOutput) StagingLinkedService() EntityReferencePtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeDataProxyProperties) *EntityReference {
		if v == nil {
			return nil
		}
		return v.StagingLinkedService
	}).(EntityReferencePtrOutput)
}

// Data proxy properties for a managed dedicated integration runtime.
type IntegrationRuntimeDataProxyPropertiesResponse struct {
	// The self-hosted integration runtime reference.
	ConnectVia *EntityReferenceResponse `pulumi:"connectVia"`
	// The path to contain the staged data in the Blob storage.
	Path *string `pulumi:"path"`
	// The staging linked service reference.
	StagingLinkedService *EntityReferenceResponse `pulumi:"stagingLinkedService"`
}

// Data proxy properties for a managed dedicated integration runtime.
type IntegrationRuntimeDataProxyPropertiesResponseOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeDataProxyPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeDataProxyPropertiesResponse)(nil)).Elem()
}

func (o IntegrationRuntimeDataProxyPropertiesResponseOutput) ToIntegrationRuntimeDataProxyPropertiesResponseOutput() IntegrationRuntimeDataProxyPropertiesResponseOutput {
	return o
}

func (o IntegrationRuntimeDataProxyPropertiesResponseOutput) ToIntegrationRuntimeDataProxyPropertiesResponseOutputWithContext(ctx context.Context) IntegrationRuntimeDataProxyPropertiesResponseOutput {
	return o
}

// The self-hosted integration runtime reference.
func (o IntegrationRuntimeDataProxyPropertiesResponseOutput) ConnectVia() EntityReferenceResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeDataProxyPropertiesResponse) *EntityReferenceResponse { return v.ConnectVia }).(EntityReferenceResponsePtrOutput)
}

// The path to contain the staged data in the Blob storage.
func (o IntegrationRuntimeDataProxyPropertiesResponseOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeDataProxyPropertiesResponse) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// The staging linked service reference.
func (o IntegrationRuntimeDataProxyPropertiesResponseOutput) StagingLinkedService() EntityReferenceResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeDataProxyPropertiesResponse) *EntityReferenceResponse {
		return v.StagingLinkedService
	}).(EntityReferenceResponsePtrOutput)
}

type IntegrationRuntimeDataProxyPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeDataProxyPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeDataProxyPropertiesResponse)(nil)).Elem()
}

func (o IntegrationRuntimeDataProxyPropertiesResponsePtrOutput) ToIntegrationRuntimeDataProxyPropertiesResponsePtrOutput() IntegrationRuntimeDataProxyPropertiesResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeDataProxyPropertiesResponsePtrOutput) ToIntegrationRuntimeDataProxyPropertiesResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeDataProxyPropertiesResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeDataProxyPropertiesResponsePtrOutput) Elem() IntegrationRuntimeDataProxyPropertiesResponseOutput {
	return o.ApplyT(func(v *IntegrationRuntimeDataProxyPropertiesResponse) IntegrationRuntimeDataProxyPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret IntegrationRuntimeDataProxyPropertiesResponse
		return ret
	}).(IntegrationRuntimeDataProxyPropertiesResponseOutput)
}

// The self-hosted integration runtime reference.
func (o IntegrationRuntimeDataProxyPropertiesResponsePtrOutput) ConnectVia() EntityReferenceResponsePtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeDataProxyPropertiesResponse) *EntityReferenceResponse {
		if v == nil {
			return nil
		}
		return v.ConnectVia
	}).(EntityReferenceResponsePtrOutput)
}

// The path to contain the staged data in the Blob storage.
func (o IntegrationRuntimeDataProxyPropertiesResponsePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeDataProxyPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// The staging linked service reference.
func (o IntegrationRuntimeDataProxyPropertiesResponsePtrOutput) StagingLinkedService() EntityReferenceResponsePtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeDataProxyPropertiesResponse) *EntityReferenceResponse {
		if v == nil {
			return nil
		}
		return v.StagingLinkedService
	}).(EntityReferenceResponsePtrOutput)
}

// Integration runtime reference type.
type IntegrationRuntimeReference struct {
	// Arguments for integration runtime.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Reference integration runtime name.
	ReferenceName string `pulumi:"referenceName"`
	// Type of integration runtime.
	Type string `pulumi:"type"`
}

// IntegrationRuntimeReferenceInput is an input type that accepts IntegrationRuntimeReferenceArgs and IntegrationRuntimeReferenceOutput values.
// You can construct a concrete instance of `IntegrationRuntimeReferenceInput` via:
//
//	IntegrationRuntimeReferenceArgs{...}
type IntegrationRuntimeReferenceInput interface {
	pulumi.Input

	ToIntegrationRuntimeReferenceOutput() IntegrationRuntimeReferenceOutput
	ToIntegrationRuntimeReferenceOutputWithContext(context.Context) IntegrationRuntimeReferenceOutput
}

// Integration runtime reference type.
type IntegrationRuntimeReferenceArgs struct {
	// Arguments for integration runtime.
	Parameters pulumi.MapInput `pulumi:"parameters"`
	// Reference integration runtime name.
	ReferenceName pulumi.StringInput `pulumi:"referenceName"`
	// Type of integration runtime.
	Type pulumi.StringInput `pulumi:"type"`
}

func (IntegrationRuntimeReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeReference)(nil)).Elem()
}

func (i IntegrationRuntimeReferenceArgs) ToIntegrationRuntimeReferenceOutput() IntegrationRuntimeReferenceOutput {
	return i.ToIntegrationRuntimeReferenceOutputWithContext(context.Background())
}

func (i IntegrationRuntimeReferenceArgs) ToIntegrationRuntimeReferenceOutputWithContext(ctx context.Context) IntegrationRuntimeReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeReferenceOutput)
}

func (i IntegrationRuntimeReferenceArgs) ToIntegrationRuntimeReferencePtrOutput() IntegrationRuntimeReferencePtrOutput {
	return i.ToIntegrationRuntimeReferencePtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeReferenceArgs) ToIntegrationRuntimeReferencePtrOutputWithContext(ctx context.Context) IntegrationRuntimeReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeReferenceOutput).ToIntegrationRuntimeReferencePtrOutputWithContext(ctx)
}

// IntegrationRuntimeReferencePtrInput is an input type that accepts IntegrationRuntimeReferenceArgs, IntegrationRuntimeReferencePtr and IntegrationRuntimeReferencePtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeReferencePtrInput` via:
//
//	        IntegrationRuntimeReferenceArgs{...}
//
//	or:
//
//	        nil
type IntegrationRuntimeReferencePtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeReferencePtrOutput() IntegrationRuntimeReferencePtrOutput
	ToIntegrationRuntimeReferencePtrOutputWithContext(context.Context) IntegrationRuntimeReferencePtrOutput
}

type integrationRuntimeReferencePtrType IntegrationRuntimeReferenceArgs

func IntegrationRuntimeReferencePtr(v *IntegrationRuntimeReferenceArgs) IntegrationRuntimeReferencePtrInput {
	return (*integrationRuntimeReferencePtrType)(v)
}

func (*integrationRuntimeReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeReference)(nil)).Elem()
}

func (i *integrationRuntimeReferencePtrType) ToIntegrationRuntimeReferencePtrOutput() IntegrationRuntimeReferencePtrOutput {
	return i.ToIntegrationRuntimeReferencePtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeReferencePtrType) ToIntegrationRuntimeReferencePtrOutputWithContext(ctx context.Context) IntegrationRuntimeReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeReferencePtrOutput)
}

// Integration runtime reference type.
type IntegrationRuntimeReferenceOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeReference)(nil)).Elem()
}

func (o IntegrationRuntimeReferenceOutput) ToIntegrationRuntimeReferenceOutput() IntegrationRuntimeReferenceOutput {
	return o
}

func (o IntegrationRuntimeReferenceOutput) ToIntegrationRuntimeReferenceOutputWithContext(ctx context.Context) IntegrationRuntimeReferenceOutput {
	return o
}

func (o IntegrationRuntimeReferenceOutput) ToIntegrationRuntimeReferencePtrOutput() IntegrationRuntimeReferencePtrOutput {
	return o.ToIntegrationRuntimeReferencePtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeReferenceOutput) ToIntegrationRuntimeReferencePtrOutputWithContext(ctx context.Context) IntegrationRuntimeReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IntegrationRuntimeReference) *IntegrationRuntimeReference {
		return &v
	}).(IntegrationRuntimeReferencePtrOutput)
}

// Arguments for integration runtime.
func (o IntegrationRuntimeReferenceOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v IntegrationRuntimeReference) map[string]interface{} { return v.Parameters }).(pulumi.MapOutput)
}

// Reference integration runtime name.
func (o IntegrationRuntimeReferenceOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeReference) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Type of integration runtime.
func (o IntegrationRuntimeReferenceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeReference) string { return v.Type }).(pulumi.StringOutput)
}

type IntegrationRuntimeReferencePtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeReference)(nil)).Elem()
}

func (o IntegrationRuntimeReferencePtrOutput) ToIntegrationRuntimeReferencePtrOutput() IntegrationRuntimeReferencePtrOutput {
	return o
}

func (o IntegrationRuntimeReferencePtrOutput) ToIntegrationRuntimeReferencePtrOutputWithContext(ctx context.Context) IntegrationRuntimeReferencePtrOutput {
	return o
}

func (o IntegrationRuntimeReferencePtrOutput) Elem() IntegrationRuntimeReferenceOutput {
	return o.ApplyT(func(v *IntegrationRuntimeReference) IntegrationRuntimeReference {
		if v != nil {
			return *v
		}
		var ret IntegrationRuntimeReference
		return ret
	}).(IntegrationRuntimeReferenceOutput)
}

// Arguments for integration runtime.
func (o IntegrationRuntimeReferencePtrOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v *IntegrationRuntimeReference) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.MapOutput)
}

// Reference integration runtime name.
func (o IntegrationRuntimeReferencePtrOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeReference) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceName
	}).(pulumi.StringPtrOutput)
}

// Type of integration runtime.
func (o IntegrationRuntimeReferencePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeReference) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Integration runtime reference type.
type IntegrationRuntimeReferenceResponse struct {
	// Arguments for integration runtime.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Reference integration runtime name.
	ReferenceName string `pulumi:"referenceName"`
	// Type of integration runtime.
	Type string `pulumi:"type"`
}

// Integration runtime reference type.
type IntegrationRuntimeReferenceResponseOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeReferenceResponse)(nil)).Elem()
}

func (o IntegrationRuntimeReferenceResponseOutput) ToIntegrationRuntimeReferenceResponseOutput() IntegrationRuntimeReferenceResponseOutput {
	return o
}

func (o IntegrationRuntimeReferenceResponseOutput) ToIntegrationRuntimeReferenceResponseOutputWithContext(ctx context.Context) IntegrationRuntimeReferenceResponseOutput {
	return o
}

// Arguments for integration runtime.
func (o IntegrationRuntimeReferenceResponseOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v IntegrationRuntimeReferenceResponse) map[string]interface{} { return v.Parameters }).(pulumi.MapOutput)
}

// Reference integration runtime name.
func (o IntegrationRuntimeReferenceResponseOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeReferenceResponse) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Type of integration runtime.
func (o IntegrationRuntimeReferenceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeReferenceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type IntegrationRuntimeReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeReferenceResponse)(nil)).Elem()
}

func (o IntegrationRuntimeReferenceResponsePtrOutput) ToIntegrationRuntimeReferenceResponsePtrOutput() IntegrationRuntimeReferenceResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeReferenceResponsePtrOutput) ToIntegrationRuntimeReferenceResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeReferenceResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeReferenceResponsePtrOutput) Elem() IntegrationRuntimeReferenceResponseOutput {
	return o.ApplyT(func(v *IntegrationRuntimeReferenceResponse) IntegrationRuntimeReferenceResponse {
		if v != nil {
			return *v
		}
		var ret IntegrationRuntimeReferenceResponse
		return ret
	}).(IntegrationRuntimeReferenceResponseOutput)
}

// Arguments for integration runtime.
func (o IntegrationRuntimeReferenceResponsePtrOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v *IntegrationRuntimeReferenceResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.MapOutput)
}

// Reference integration runtime name.
func (o IntegrationRuntimeReferenceResponsePtrOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceName
	}).(pulumi.StringPtrOutput)
}

// Type of integration runtime.
func (o IntegrationRuntimeReferenceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Catalog information for managed dedicated integration runtime.
type IntegrationRuntimeSsisCatalogInfo struct {
	// The password of the administrator user account of the catalog database.
	CatalogAdminPassword *SecureString `pulumi:"catalogAdminPassword"`
	// The administrator user name of catalog database.
	CatalogAdminUserName *string `pulumi:"catalogAdminUserName"`
	// The pricing tier for the catalog database. The valid values could be found in https://azure.microsoft.com/en-us/pricing/details/sql-database/
	CatalogPricingTier *string `pulumi:"catalogPricingTier"`
	// The catalog database server URL.
	CatalogServerEndpoint *string `pulumi:"catalogServerEndpoint"`
	// The dual standby pair name of Azure-SSIS Integration Runtimes to support SSISDB failover.
	DualStandbyPairName *string `pulumi:"dualStandbyPairName"`
}

// IntegrationRuntimeSsisCatalogInfoInput is an input type that accepts IntegrationRuntimeSsisCatalogInfoArgs and IntegrationRuntimeSsisCatalogInfoOutput values.
// You can construct a concrete instance of `IntegrationRuntimeSsisCatalogInfoInput` via:
//
//	IntegrationRuntimeSsisCatalogInfoArgs{...}
type IntegrationRuntimeSsisCatalogInfoInput interface {
	pulumi.Input

	ToIntegrationRuntimeSsisCatalogInfoOutput() IntegrationRuntimeSsisCatalogInfoOutput
	ToIntegrationRuntimeSsisCatalogInfoOutputWithContext(context.Context) IntegrationRuntimeSsisCatalogInfoOutput
}

// Catalog information for managed dedicated integration runtime.
type IntegrationRuntimeSsisCatalogInfoArgs struct {
	// The password of the administrator user account of the catalog database.
	CatalogAdminPassword SecureStringPtrInput `pulumi:"catalogAdminPassword"`
	// The administrator user name of catalog database.
	CatalogAdminUserName pulumi.StringPtrInput `pulumi:"catalogAdminUserName"`
	// The pricing tier for the catalog database. The valid values could be found in https://azure.microsoft.com/en-us/pricing/details/sql-database/
	CatalogPricingTier pulumi.StringPtrInput `pulumi:"catalogPricingTier"`
	// The catalog database server URL.
	CatalogServerEndpoint pulumi.StringPtrInput `pulumi:"catalogServerEndpoint"`
	// The dual standby pair name of Azure-SSIS Integration Runtimes to support SSISDB failover.
	DualStandbyPairName pulumi.StringPtrInput `pulumi:"dualStandbyPairName"`
}

func (IntegrationRuntimeSsisCatalogInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeSsisCatalogInfo)(nil)).Elem()
}

func (i IntegrationRuntimeSsisCatalogInfoArgs) ToIntegrationRuntimeSsisCatalogInfoOutput() IntegrationRuntimeSsisCatalogInfoOutput {
	return i.ToIntegrationRuntimeSsisCatalogInfoOutputWithContext(context.Background())
}

func (i IntegrationRuntimeSsisCatalogInfoArgs) ToIntegrationRuntimeSsisCatalogInfoOutputWithContext(ctx context.Context) IntegrationRuntimeSsisCatalogInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeSsisCatalogInfoOutput)
}

func (i IntegrationRuntimeSsisCatalogInfoArgs) ToIntegrationRuntimeSsisCatalogInfoPtrOutput() IntegrationRuntimeSsisCatalogInfoPtrOutput {
	return i.ToIntegrationRuntimeSsisCatalogInfoPtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeSsisCatalogInfoArgs) ToIntegrationRuntimeSsisCatalogInfoPtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisCatalogInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeSsisCatalogInfoOutput).ToIntegrationRuntimeSsisCatalogInfoPtrOutputWithContext(ctx)
}

// IntegrationRuntimeSsisCatalogInfoPtrInput is an input type that accepts IntegrationRuntimeSsisCatalogInfoArgs, IntegrationRuntimeSsisCatalogInfoPtr and IntegrationRuntimeSsisCatalogInfoPtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeSsisCatalogInfoPtrInput` via:
//
//	        IntegrationRuntimeSsisCatalogInfoArgs{...}
//
//	or:
//
//	        nil
type IntegrationRuntimeSsisCatalogInfoPtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeSsisCatalogInfoPtrOutput() IntegrationRuntimeSsisCatalogInfoPtrOutput
	ToIntegrationRuntimeSsisCatalogInfoPtrOutputWithContext(context.Context) IntegrationRuntimeSsisCatalogInfoPtrOutput
}

type integrationRuntimeSsisCatalogInfoPtrType IntegrationRuntimeSsisCatalogInfoArgs

func IntegrationRuntimeSsisCatalogInfoPtr(v *IntegrationRuntimeSsisCatalogInfoArgs) IntegrationRuntimeSsisCatalogInfoPtrInput {
	return (*integrationRuntimeSsisCatalogInfoPtrType)(v)
}

func (*integrationRuntimeSsisCatalogInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeSsisCatalogInfo)(nil)).Elem()
}

func (i *integrationRuntimeSsisCatalogInfoPtrType) ToIntegrationRuntimeSsisCatalogInfoPtrOutput() IntegrationRuntimeSsisCatalogInfoPtrOutput {
	return i.ToIntegrationRuntimeSsisCatalogInfoPtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeSsisCatalogInfoPtrType) ToIntegrationRuntimeSsisCatalogInfoPtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisCatalogInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeSsisCatalogInfoPtrOutput)
}

// Catalog information for managed dedicated integration runtime.
type IntegrationRuntimeSsisCatalogInfoOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeSsisCatalogInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeSsisCatalogInfo)(nil)).Elem()
}

func (o IntegrationRuntimeSsisCatalogInfoOutput) ToIntegrationRuntimeSsisCatalogInfoOutput() IntegrationRuntimeSsisCatalogInfoOutput {
	return o
}

func (o IntegrationRuntimeSsisCatalogInfoOutput) ToIntegrationRuntimeSsisCatalogInfoOutputWithContext(ctx context.Context) IntegrationRuntimeSsisCatalogInfoOutput {
	return o
}

func (o IntegrationRuntimeSsisCatalogInfoOutput) ToIntegrationRuntimeSsisCatalogInfoPtrOutput() IntegrationRuntimeSsisCatalogInfoPtrOutput {
	return o.ToIntegrationRuntimeSsisCatalogInfoPtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeSsisCatalogInfoOutput) ToIntegrationRuntimeSsisCatalogInfoPtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisCatalogInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IntegrationRuntimeSsisCatalogInfo) *IntegrationRuntimeSsisCatalogInfo {
		return &v
	}).(IntegrationRuntimeSsisCatalogInfoPtrOutput)
}

// The password of the administrator user account of the catalog database.
func (o IntegrationRuntimeSsisCatalogInfoOutput) CatalogAdminPassword() SecureStringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisCatalogInfo) *SecureString { return v.CatalogAdminPassword }).(SecureStringPtrOutput)
}

// The administrator user name of catalog database.
func (o IntegrationRuntimeSsisCatalogInfoOutput) CatalogAdminUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisCatalogInfo) *string { return v.CatalogAdminUserName }).(pulumi.StringPtrOutput)
}

// The pricing tier for the catalog database. The valid values could be found in https://azure.microsoft.com/en-us/pricing/details/sql-database/
func (o IntegrationRuntimeSsisCatalogInfoOutput) CatalogPricingTier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisCatalogInfo) *string { return v.CatalogPricingTier }).(pulumi.StringPtrOutput)
}

// The catalog database server URL.
func (o IntegrationRuntimeSsisCatalogInfoOutput) CatalogServerEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisCatalogInfo) *string { return v.CatalogServerEndpoint }).(pulumi.StringPtrOutput)
}

// The dual standby pair name of Azure-SSIS Integration Runtimes to support SSISDB failover.
func (o IntegrationRuntimeSsisCatalogInfoOutput) DualStandbyPairName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisCatalogInfo) *string { return v.DualStandbyPairName }).(pulumi.StringPtrOutput)
}

type IntegrationRuntimeSsisCatalogInfoPtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeSsisCatalogInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeSsisCatalogInfo)(nil)).Elem()
}

func (o IntegrationRuntimeSsisCatalogInfoPtrOutput) ToIntegrationRuntimeSsisCatalogInfoPtrOutput() IntegrationRuntimeSsisCatalogInfoPtrOutput {
	return o
}

func (o IntegrationRuntimeSsisCatalogInfoPtrOutput) ToIntegrationRuntimeSsisCatalogInfoPtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisCatalogInfoPtrOutput {
	return o
}

func (o IntegrationRuntimeSsisCatalogInfoPtrOutput) Elem() IntegrationRuntimeSsisCatalogInfoOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisCatalogInfo) IntegrationRuntimeSsisCatalogInfo {
		if v != nil {
			return *v
		}
		var ret IntegrationRuntimeSsisCatalogInfo
		return ret
	}).(IntegrationRuntimeSsisCatalogInfoOutput)
}

// The password of the administrator user account of the catalog database.
func (o IntegrationRuntimeSsisCatalogInfoPtrOutput) CatalogAdminPassword() SecureStringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisCatalogInfo) *SecureString {
		if v == nil {
			return nil
		}
		return v.CatalogAdminPassword
	}).(SecureStringPtrOutput)
}

// The administrator user name of catalog database.
func (o IntegrationRuntimeSsisCatalogInfoPtrOutput) CatalogAdminUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisCatalogInfo) *string {
		if v == nil {
			return nil
		}
		return v.CatalogAdminUserName
	}).(pulumi.StringPtrOutput)
}

// The pricing tier for the catalog database. The valid values could be found in https://azure.microsoft.com/en-us/pricing/details/sql-database/
func (o IntegrationRuntimeSsisCatalogInfoPtrOutput) CatalogPricingTier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisCatalogInfo) *string {
		if v == nil {
			return nil
		}
		return v.CatalogPricingTier
	}).(pulumi.StringPtrOutput)
}

// The catalog database server URL.
func (o IntegrationRuntimeSsisCatalogInfoPtrOutput) CatalogServerEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisCatalogInfo) *string {
		if v == nil {
			return nil
		}
		return v.CatalogServerEndpoint
	}).(pulumi.StringPtrOutput)
}

// The dual standby pair name of Azure-SSIS Integration Runtimes to support SSISDB failover.
func (o IntegrationRuntimeSsisCatalogInfoPtrOutput) DualStandbyPairName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisCatalogInfo) *string {
		if v == nil {
			return nil
		}
		return v.DualStandbyPairName
	}).(pulumi.StringPtrOutput)
}

// Catalog information for managed dedicated integration runtime.
type IntegrationRuntimeSsisCatalogInfoResponse struct {
	// The password of the administrator user account of the catalog database.
	CatalogAdminPassword *SecureStringResponse `pulumi:"catalogAdminPassword"`
	// The administrator user name of catalog database.
	CatalogAdminUserName *string `pulumi:"catalogAdminUserName"`
	// The pricing tier for the catalog database. The valid values could be found in https://azure.microsoft.com/en-us/pricing/details/sql-database/
	CatalogPricingTier *string `pulumi:"catalogPricingTier"`
	// The catalog database server URL.
	CatalogServerEndpoint *string `pulumi:"catalogServerEndpoint"`
	// The dual standby pair name of Azure-SSIS Integration Runtimes to support SSISDB failover.
	DualStandbyPairName *string `pulumi:"dualStandbyPairName"`
}

// Catalog information for managed dedicated integration runtime.
type IntegrationRuntimeSsisCatalogInfoResponseOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeSsisCatalogInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeSsisCatalogInfoResponse)(nil)).Elem()
}

func (o IntegrationRuntimeSsisCatalogInfoResponseOutput) ToIntegrationRuntimeSsisCatalogInfoResponseOutput() IntegrationRuntimeSsisCatalogInfoResponseOutput {
	return o
}

func (o IntegrationRuntimeSsisCatalogInfoResponseOutput) ToIntegrationRuntimeSsisCatalogInfoResponseOutputWithContext(ctx context.Context) IntegrationRuntimeSsisCatalogInfoResponseOutput {
	return o
}

// The password of the administrator user account of the catalog database.
func (o IntegrationRuntimeSsisCatalogInfoResponseOutput) CatalogAdminPassword() SecureStringResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisCatalogInfoResponse) *SecureStringResponse { return v.CatalogAdminPassword }).(SecureStringResponsePtrOutput)
}

// The administrator user name of catalog database.
func (o IntegrationRuntimeSsisCatalogInfoResponseOutput) CatalogAdminUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisCatalogInfoResponse) *string { return v.CatalogAdminUserName }).(pulumi.StringPtrOutput)
}

// The pricing tier for the catalog database. The valid values could be found in https://azure.microsoft.com/en-us/pricing/details/sql-database/
func (o IntegrationRuntimeSsisCatalogInfoResponseOutput) CatalogPricingTier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisCatalogInfoResponse) *string { return v.CatalogPricingTier }).(pulumi.StringPtrOutput)
}

// The catalog database server URL.
func (o IntegrationRuntimeSsisCatalogInfoResponseOutput) CatalogServerEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisCatalogInfoResponse) *string { return v.CatalogServerEndpoint }).(pulumi.StringPtrOutput)
}

// The dual standby pair name of Azure-SSIS Integration Runtimes to support SSISDB failover.
func (o IntegrationRuntimeSsisCatalogInfoResponseOutput) DualStandbyPairName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisCatalogInfoResponse) *string { return v.DualStandbyPairName }).(pulumi.StringPtrOutput)
}

type IntegrationRuntimeSsisCatalogInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeSsisCatalogInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeSsisCatalogInfoResponse)(nil)).Elem()
}

func (o IntegrationRuntimeSsisCatalogInfoResponsePtrOutput) ToIntegrationRuntimeSsisCatalogInfoResponsePtrOutput() IntegrationRuntimeSsisCatalogInfoResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeSsisCatalogInfoResponsePtrOutput) ToIntegrationRuntimeSsisCatalogInfoResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisCatalogInfoResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeSsisCatalogInfoResponsePtrOutput) Elem() IntegrationRuntimeSsisCatalogInfoResponseOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisCatalogInfoResponse) IntegrationRuntimeSsisCatalogInfoResponse {
		if v != nil {
			return *v
		}
		var ret IntegrationRuntimeSsisCatalogInfoResponse
		return ret
	}).(IntegrationRuntimeSsisCatalogInfoResponseOutput)
}

// The password of the administrator user account of the catalog database.
func (o IntegrationRuntimeSsisCatalogInfoResponsePtrOutput) CatalogAdminPassword() SecureStringResponsePtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisCatalogInfoResponse) *SecureStringResponse {
		if v == nil {
			return nil
		}
		return v.CatalogAdminPassword
	}).(SecureStringResponsePtrOutput)
}

// The administrator user name of catalog database.
func (o IntegrationRuntimeSsisCatalogInfoResponsePtrOutput) CatalogAdminUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisCatalogInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.CatalogAdminUserName
	}).(pulumi.StringPtrOutput)
}

// The pricing tier for the catalog database. The valid values could be found in https://azure.microsoft.com/en-us/pricing/details/sql-database/
func (o IntegrationRuntimeSsisCatalogInfoResponsePtrOutput) CatalogPricingTier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisCatalogInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.CatalogPricingTier
	}).(pulumi.StringPtrOutput)
}

// The catalog database server URL.
func (o IntegrationRuntimeSsisCatalogInfoResponsePtrOutput) CatalogServerEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisCatalogInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.CatalogServerEndpoint
	}).(pulumi.StringPtrOutput)
}

// The dual standby pair name of Azure-SSIS Integration Runtimes to support SSISDB failover.
func (o IntegrationRuntimeSsisCatalogInfoResponsePtrOutput) DualStandbyPairName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisCatalogInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.DualStandbyPairName
	}).(pulumi.StringPtrOutput)
}

// SSIS properties for managed integration runtime.
type IntegrationRuntimeSsisProperties struct {
	// Catalog information for managed dedicated integration runtime.
	CatalogInfo *IntegrationRuntimeSsisCatalogInfo `pulumi:"catalogInfo"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Custom setup script properties for a managed dedicated integration runtime.
	CustomSetupScriptProperties *IntegrationRuntimeCustomSetupScriptProperties `pulumi:"customSetupScriptProperties"`
	// Data proxy properties for a managed dedicated integration runtime.
	DataProxyProperties *IntegrationRuntimeDataProxyProperties `pulumi:"dataProxyProperties"`
	// The edition for the SSIS Integration Runtime
	Edition *string `pulumi:"edition"`
	// Custom setup without script properties for a SSIS integration runtime.
	ExpressCustomSetupProperties []interface{} `pulumi:"expressCustomSetupProperties"`
	// License type for bringing your own license scenario.
	LicenseType *string `pulumi:"licenseType"`
	// Package stores for the SSIS Integration Runtime.
	PackageStores []PackageStore `pulumi:"packageStores"`
}

// IntegrationRuntimeSsisPropertiesInput is an input type that accepts IntegrationRuntimeSsisPropertiesArgs and IntegrationRuntimeSsisPropertiesOutput values.
// You can construct a concrete instance of `IntegrationRuntimeSsisPropertiesInput` via:
//
//	IntegrationRuntimeSsisPropertiesArgs{...}
type IntegrationRuntimeSsisPropertiesInput interface {
	pulumi.Input

	ToIntegrationRuntimeSsisPropertiesOutput() IntegrationRuntimeSsisPropertiesOutput
	ToIntegrationRuntimeSsisPropertiesOutputWithContext(context.Context) IntegrationRuntimeSsisPropertiesOutput
}

// SSIS properties for managed integration runtime.
type IntegrationRuntimeSsisPropertiesArgs struct {
	// Catalog information for managed dedicated integration runtime.
	CatalogInfo IntegrationRuntimeSsisCatalogInfoPtrInput `pulumi:"catalogInfo"`
	// The credential reference containing authentication information.
	Credential CredentialReferencePtrInput `pulumi:"credential"`
	// Custom setup script properties for a managed dedicated integration runtime.
	CustomSetupScriptProperties IntegrationRuntimeCustomSetupScriptPropertiesPtrInput `pulumi:"customSetupScriptProperties"`
	// Data proxy properties for a managed dedicated integration runtime.
	DataProxyProperties IntegrationRuntimeDataProxyPropertiesPtrInput `pulumi:"dataProxyProperties"`
	// The edition for the SSIS Integration Runtime
	Edition pulumi.StringPtrInput `pulumi:"edition"`
	// Custom setup without script properties for a SSIS integration runtime.
	ExpressCustomSetupProperties pulumi.ArrayInput `pulumi:"expressCustomSetupProperties"`
	// License type for bringing your own license scenario.
	LicenseType pulumi.StringPtrInput `pulumi:"licenseType"`
	// Package stores for the SSIS Integration Runtime.
	PackageStores PackageStoreArrayInput `pulumi:"packageStores"`
}

func (IntegrationRuntimeSsisPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeSsisProperties)(nil)).Elem()
}

func (i IntegrationRuntimeSsisPropertiesArgs) ToIntegrationRuntimeSsisPropertiesOutput() IntegrationRuntimeSsisPropertiesOutput {
	return i.ToIntegrationRuntimeSsisPropertiesOutputWithContext(context.Background())
}

func (i IntegrationRuntimeSsisPropertiesArgs) ToIntegrationRuntimeSsisPropertiesOutputWithContext(ctx context.Context) IntegrationRuntimeSsisPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeSsisPropertiesOutput)
}

func (i IntegrationRuntimeSsisPropertiesArgs) ToIntegrationRuntimeSsisPropertiesPtrOutput() IntegrationRuntimeSsisPropertiesPtrOutput {
	return i.ToIntegrationRuntimeSsisPropertiesPtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeSsisPropertiesArgs) ToIntegrationRuntimeSsisPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeSsisPropertiesOutput).ToIntegrationRuntimeSsisPropertiesPtrOutputWithContext(ctx)
}

// IntegrationRuntimeSsisPropertiesPtrInput is an input type that accepts IntegrationRuntimeSsisPropertiesArgs, IntegrationRuntimeSsisPropertiesPtr and IntegrationRuntimeSsisPropertiesPtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeSsisPropertiesPtrInput` via:
//
//	        IntegrationRuntimeSsisPropertiesArgs{...}
//
//	or:
//
//	        nil
type IntegrationRuntimeSsisPropertiesPtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeSsisPropertiesPtrOutput() IntegrationRuntimeSsisPropertiesPtrOutput
	ToIntegrationRuntimeSsisPropertiesPtrOutputWithContext(context.Context) IntegrationRuntimeSsisPropertiesPtrOutput
}

type integrationRuntimeSsisPropertiesPtrType IntegrationRuntimeSsisPropertiesArgs

func IntegrationRuntimeSsisPropertiesPtr(v *IntegrationRuntimeSsisPropertiesArgs) IntegrationRuntimeSsisPropertiesPtrInput {
	return (*integrationRuntimeSsisPropertiesPtrType)(v)
}

func (*integrationRuntimeSsisPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeSsisProperties)(nil)).Elem()
}

func (i *integrationRuntimeSsisPropertiesPtrType) ToIntegrationRuntimeSsisPropertiesPtrOutput() IntegrationRuntimeSsisPropertiesPtrOutput {
	return i.ToIntegrationRuntimeSsisPropertiesPtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeSsisPropertiesPtrType) ToIntegrationRuntimeSsisPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeSsisPropertiesPtrOutput)
}

// SSIS properties for managed integration runtime.
type IntegrationRuntimeSsisPropertiesOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeSsisPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeSsisProperties)(nil)).Elem()
}

func (o IntegrationRuntimeSsisPropertiesOutput) ToIntegrationRuntimeSsisPropertiesOutput() IntegrationRuntimeSsisPropertiesOutput {
	return o
}

func (o IntegrationRuntimeSsisPropertiesOutput) ToIntegrationRuntimeSsisPropertiesOutputWithContext(ctx context.Context) IntegrationRuntimeSsisPropertiesOutput {
	return o
}

func (o IntegrationRuntimeSsisPropertiesOutput) ToIntegrationRuntimeSsisPropertiesPtrOutput() IntegrationRuntimeSsisPropertiesPtrOutput {
	return o.ToIntegrationRuntimeSsisPropertiesPtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeSsisPropertiesOutput) ToIntegrationRuntimeSsisPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IntegrationRuntimeSsisProperties) *IntegrationRuntimeSsisProperties {
		return &v
	}).(IntegrationRuntimeSsisPropertiesPtrOutput)
}

// Catalog information for managed dedicated integration runtime.
func (o IntegrationRuntimeSsisPropertiesOutput) CatalogInfo() IntegrationRuntimeSsisCatalogInfoPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisProperties) *IntegrationRuntimeSsisCatalogInfo { return v.CatalogInfo }).(IntegrationRuntimeSsisCatalogInfoPtrOutput)
}

// The credential reference containing authentication information.
func (o IntegrationRuntimeSsisPropertiesOutput) Credential() CredentialReferencePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisProperties) *CredentialReference { return v.Credential }).(CredentialReferencePtrOutput)
}

// Custom setup script properties for a managed dedicated integration runtime.
func (o IntegrationRuntimeSsisPropertiesOutput) CustomSetupScriptProperties() IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisProperties) *IntegrationRuntimeCustomSetupScriptProperties {
		return v.CustomSetupScriptProperties
	}).(IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput)
}

// Data proxy properties for a managed dedicated integration runtime.
func (o IntegrationRuntimeSsisPropertiesOutput) DataProxyProperties() IntegrationRuntimeDataProxyPropertiesPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisProperties) *IntegrationRuntimeDataProxyProperties {
		return v.DataProxyProperties
	}).(IntegrationRuntimeDataProxyPropertiesPtrOutput)
}

// The edition for the SSIS Integration Runtime
func (o IntegrationRuntimeSsisPropertiesOutput) Edition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisProperties) *string { return v.Edition }).(pulumi.StringPtrOutput)
}

// Custom setup without script properties for a SSIS integration runtime.
func (o IntegrationRuntimeSsisPropertiesOutput) ExpressCustomSetupProperties() pulumi.ArrayOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisProperties) []interface{} { return v.ExpressCustomSetupProperties }).(pulumi.ArrayOutput)
}

// License type for bringing your own license scenario.
func (o IntegrationRuntimeSsisPropertiesOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisProperties) *string { return v.LicenseType }).(pulumi.StringPtrOutput)
}

// Package stores for the SSIS Integration Runtime.
func (o IntegrationRuntimeSsisPropertiesOutput) PackageStores() PackageStoreArrayOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisProperties) []PackageStore { return v.PackageStores }).(PackageStoreArrayOutput)
}

type IntegrationRuntimeSsisPropertiesPtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeSsisPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeSsisProperties)(nil)).Elem()
}

func (o IntegrationRuntimeSsisPropertiesPtrOutput) ToIntegrationRuntimeSsisPropertiesPtrOutput() IntegrationRuntimeSsisPropertiesPtrOutput {
	return o
}

func (o IntegrationRuntimeSsisPropertiesPtrOutput) ToIntegrationRuntimeSsisPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisPropertiesPtrOutput {
	return o
}

func (o IntegrationRuntimeSsisPropertiesPtrOutput) Elem() IntegrationRuntimeSsisPropertiesOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisProperties) IntegrationRuntimeSsisProperties {
		if v != nil {
			return *v
		}
		var ret IntegrationRuntimeSsisProperties
		return ret
	}).(IntegrationRuntimeSsisPropertiesOutput)
}

// Catalog information for managed dedicated integration runtime.
func (o IntegrationRuntimeSsisPropertiesPtrOutput) CatalogInfo() IntegrationRuntimeSsisCatalogInfoPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisProperties) *IntegrationRuntimeSsisCatalogInfo {
		if v == nil {
			return nil
		}
		return v.CatalogInfo
	}).(IntegrationRuntimeSsisCatalogInfoPtrOutput)
}

// The credential reference containing authentication information.
func (o IntegrationRuntimeSsisPropertiesPtrOutput) Credential() CredentialReferencePtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisProperties) *CredentialReference {
		if v == nil {
			return nil
		}
		return v.Credential
	}).(CredentialReferencePtrOutput)
}

// Custom setup script properties for a managed dedicated integration runtime.
func (o IntegrationRuntimeSsisPropertiesPtrOutput) CustomSetupScriptProperties() IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisProperties) *IntegrationRuntimeCustomSetupScriptProperties {
		if v == nil {
			return nil
		}
		return v.CustomSetupScriptProperties
	}).(IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput)
}

// Data proxy properties for a managed dedicated integration runtime.
func (o IntegrationRuntimeSsisPropertiesPtrOutput) DataProxyProperties() IntegrationRuntimeDataProxyPropertiesPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisProperties) *IntegrationRuntimeDataProxyProperties {
		if v == nil {
			return nil
		}
		return v.DataProxyProperties
	}).(IntegrationRuntimeDataProxyPropertiesPtrOutput)
}

// The edition for the SSIS Integration Runtime
func (o IntegrationRuntimeSsisPropertiesPtrOutput) Edition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisProperties) *string {
		if v == nil {
			return nil
		}
		return v.Edition
	}).(pulumi.StringPtrOutput)
}

// Custom setup without script properties for a SSIS integration runtime.
func (o IntegrationRuntimeSsisPropertiesPtrOutput) ExpressCustomSetupProperties() pulumi.ArrayOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisProperties) []interface{} {
		if v == nil {
			return nil
		}
		return v.ExpressCustomSetupProperties
	}).(pulumi.ArrayOutput)
}

// License type for bringing your own license scenario.
func (o IntegrationRuntimeSsisPropertiesPtrOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisProperties) *string {
		if v == nil {
			return nil
		}
		return v.LicenseType
	}).(pulumi.StringPtrOutput)
}

// Package stores for the SSIS Integration Runtime.
func (o IntegrationRuntimeSsisPropertiesPtrOutput) PackageStores() PackageStoreArrayOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisProperties) []PackageStore {
		if v == nil {
			return nil
		}
		return v.PackageStores
	}).(PackageStoreArrayOutput)
}

// SSIS properties for managed integration runtime.
type IntegrationRuntimeSsisPropertiesResponse struct {
	// Catalog information for managed dedicated integration runtime.
	CatalogInfo *IntegrationRuntimeSsisCatalogInfoResponse `pulumi:"catalogInfo"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Custom setup script properties for a managed dedicated integration runtime.
	CustomSetupScriptProperties *IntegrationRuntimeCustomSetupScriptPropertiesResponse `pulumi:"customSetupScriptProperties"`
	// Data proxy properties for a managed dedicated integration runtime.
	DataProxyProperties *IntegrationRuntimeDataProxyPropertiesResponse `pulumi:"dataProxyProperties"`
	// The edition for the SSIS Integration Runtime
	Edition *string `pulumi:"edition"`
	// Custom setup without script properties for a SSIS integration runtime.
	ExpressCustomSetupProperties []interface{} `pulumi:"expressCustomSetupProperties"`
	// License type for bringing your own license scenario.
	LicenseType *string `pulumi:"licenseType"`
	// Package stores for the SSIS Integration Runtime.
	PackageStores []PackageStoreResponse `pulumi:"packageStores"`
}

// SSIS properties for managed integration runtime.
type IntegrationRuntimeSsisPropertiesResponseOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeSsisPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeSsisPropertiesResponse)(nil)).Elem()
}

func (o IntegrationRuntimeSsisPropertiesResponseOutput) ToIntegrationRuntimeSsisPropertiesResponseOutput() IntegrationRuntimeSsisPropertiesResponseOutput {
	return o
}

func (o IntegrationRuntimeSsisPropertiesResponseOutput) ToIntegrationRuntimeSsisPropertiesResponseOutputWithContext(ctx context.Context) IntegrationRuntimeSsisPropertiesResponseOutput {
	return o
}

// Catalog information for managed dedicated integration runtime.
func (o IntegrationRuntimeSsisPropertiesResponseOutput) CatalogInfo() IntegrationRuntimeSsisCatalogInfoResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisPropertiesResponse) *IntegrationRuntimeSsisCatalogInfoResponse {
		return v.CatalogInfo
	}).(IntegrationRuntimeSsisCatalogInfoResponsePtrOutput)
}

// The credential reference containing authentication information.
func (o IntegrationRuntimeSsisPropertiesResponseOutput) Credential() CredentialReferenceResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisPropertiesResponse) *CredentialReferenceResponse { return v.Credential }).(CredentialReferenceResponsePtrOutput)
}

// Custom setup script properties for a managed dedicated integration runtime.
func (o IntegrationRuntimeSsisPropertiesResponseOutput) CustomSetupScriptProperties() IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisPropertiesResponse) *IntegrationRuntimeCustomSetupScriptPropertiesResponse {
		return v.CustomSetupScriptProperties
	}).(IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput)
}

// Data proxy properties for a managed dedicated integration runtime.
func (o IntegrationRuntimeSsisPropertiesResponseOutput) DataProxyProperties() IntegrationRuntimeDataProxyPropertiesResponsePtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisPropertiesResponse) *IntegrationRuntimeDataProxyPropertiesResponse {
		return v.DataProxyProperties
	}).(IntegrationRuntimeDataProxyPropertiesResponsePtrOutput)
}

// The edition for the SSIS Integration Runtime
func (o IntegrationRuntimeSsisPropertiesResponseOutput) Edition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisPropertiesResponse) *string { return v.Edition }).(pulumi.StringPtrOutput)
}

// Custom setup without script properties for a SSIS integration runtime.
func (o IntegrationRuntimeSsisPropertiesResponseOutput) ExpressCustomSetupProperties() pulumi.ArrayOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisPropertiesResponse) []interface{} { return v.ExpressCustomSetupProperties }).(pulumi.ArrayOutput)
}

// License type for bringing your own license scenario.
func (o IntegrationRuntimeSsisPropertiesResponseOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisPropertiesResponse) *string { return v.LicenseType }).(pulumi.StringPtrOutput)
}

// Package stores for the SSIS Integration Runtime.
func (o IntegrationRuntimeSsisPropertiesResponseOutput) PackageStores() PackageStoreResponseArrayOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisPropertiesResponse) []PackageStoreResponse { return v.PackageStores }).(PackageStoreResponseArrayOutput)
}

type IntegrationRuntimeSsisPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeSsisPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeSsisPropertiesResponse)(nil)).Elem()
}

func (o IntegrationRuntimeSsisPropertiesResponsePtrOutput) ToIntegrationRuntimeSsisPropertiesResponsePtrOutput() IntegrationRuntimeSsisPropertiesResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeSsisPropertiesResponsePtrOutput) ToIntegrationRuntimeSsisPropertiesResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisPropertiesResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeSsisPropertiesResponsePtrOutput) Elem() IntegrationRuntimeSsisPropertiesResponseOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisPropertiesResponse) IntegrationRuntimeSsisPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret IntegrationRuntimeSsisPropertiesResponse
		return ret
	}).(IntegrationRuntimeSsisPropertiesResponseOutput)
}

// Catalog information for managed dedicated integration runtime.
func (o IntegrationRuntimeSsisPropertiesResponsePtrOutput) CatalogInfo() IntegrationRuntimeSsisCatalogInfoResponsePtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisPropertiesResponse) *IntegrationRuntimeSsisCatalogInfoResponse {
		if v == nil {
			return nil
		}
		return v.CatalogInfo
	}).(IntegrationRuntimeSsisCatalogInfoResponsePtrOutput)
}

// The credential reference containing authentication information.
func (o IntegrationRuntimeSsisPropertiesResponsePtrOutput) Credential() CredentialReferenceResponsePtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisPropertiesResponse) *CredentialReferenceResponse {
		if v == nil {
			return nil
		}
		return v.Credential
	}).(CredentialReferenceResponsePtrOutput)
}

// Custom setup script properties for a managed dedicated integration runtime.
func (o IntegrationRuntimeSsisPropertiesResponsePtrOutput) CustomSetupScriptProperties() IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisPropertiesResponse) *IntegrationRuntimeCustomSetupScriptPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.CustomSetupScriptProperties
	}).(IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput)
}

// Data proxy properties for a managed dedicated integration runtime.
func (o IntegrationRuntimeSsisPropertiesResponsePtrOutput) DataProxyProperties() IntegrationRuntimeDataProxyPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisPropertiesResponse) *IntegrationRuntimeDataProxyPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.DataProxyProperties
	}).(IntegrationRuntimeDataProxyPropertiesResponsePtrOutput)
}

// The edition for the SSIS Integration Runtime
func (o IntegrationRuntimeSsisPropertiesResponsePtrOutput) Edition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Edition
	}).(pulumi.StringPtrOutput)
}

// Custom setup without script properties for a SSIS integration runtime.
func (o IntegrationRuntimeSsisPropertiesResponsePtrOutput) ExpressCustomSetupProperties() pulumi.ArrayOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisPropertiesResponse) []interface{} {
		if v == nil {
			return nil
		}
		return v.ExpressCustomSetupProperties
	}).(pulumi.ArrayOutput)
}

// License type for bringing your own license scenario.
func (o IntegrationRuntimeSsisPropertiesResponsePtrOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.LicenseType
	}).(pulumi.StringPtrOutput)
}

// Package stores for the SSIS Integration Runtime.
func (o IntegrationRuntimeSsisPropertiesResponsePtrOutput) PackageStores() PackageStoreResponseArrayOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisPropertiesResponse) []PackageStoreResponse {
		if v == nil {
			return nil
		}
		return v.PackageStores
	}).(PackageStoreResponseArrayOutput)
}

// VNet properties for managed integration runtime.
type IntegrationRuntimeVNetProperties struct {
	// Resource IDs of the public IP addresses that this integration runtime will use.
	PublicIPs []string `pulumi:"publicIPs"`
	// The name of the subnet this integration runtime will join.
	Subnet *string `pulumi:"subnet"`
	// The ID of subnet, to which this Azure-SSIS integration runtime will be joined.
	SubnetId *string `pulumi:"subnetId"`
	// The ID of the VNet that this integration runtime will join.
	VNetId *string `pulumi:"vNetId"`
}

// IntegrationRuntimeVNetPropertiesInput is an input type that accepts IntegrationRuntimeVNetPropertiesArgs and IntegrationRuntimeVNetPropertiesOutput values.
// You can construct a concrete instance of `IntegrationRuntimeVNetPropertiesInput` via:
//
//	IntegrationRuntimeVNetPropertiesArgs{...}
type IntegrationRuntimeVNetPropertiesInput interface {
	pulumi.Input

	ToIntegrationRuntimeVNetPropertiesOutput() IntegrationRuntimeVNetPropertiesOutput
	ToIntegrationRuntimeVNetPropertiesOutputWithContext(context.Context) IntegrationRuntimeVNetPropertiesOutput
}

// VNet properties for managed integration runtime.
type IntegrationRuntimeVNetPropertiesArgs struct {
	// Resource IDs of the public IP addresses that this integration runtime will use.
	PublicIPs pulumi.StringArrayInput `pulumi:"publicIPs"`
	// The name of the subnet this integration runtime will join.
	Subnet pulumi.StringPtrInput `pulumi:"subnet"`
	// The ID of subnet, to which this Azure-SSIS integration runtime will be joined.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// The ID of the VNet that this integration runtime will join.
	VNetId pulumi.StringPtrInput `pulumi:"vNetId"`
}

func (IntegrationRuntimeVNetPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeVNetProperties)(nil)).Elem()
}

func (i IntegrationRuntimeVNetPropertiesArgs) ToIntegrationRuntimeVNetPropertiesOutput() IntegrationRuntimeVNetPropertiesOutput {
	return i.ToIntegrationRuntimeVNetPropertiesOutputWithContext(context.Background())
}

func (i IntegrationRuntimeVNetPropertiesArgs) ToIntegrationRuntimeVNetPropertiesOutputWithContext(ctx context.Context) IntegrationRuntimeVNetPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeVNetPropertiesOutput)
}

func (i IntegrationRuntimeVNetPropertiesArgs) ToIntegrationRuntimeVNetPropertiesPtrOutput() IntegrationRuntimeVNetPropertiesPtrOutput {
	return i.ToIntegrationRuntimeVNetPropertiesPtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeVNetPropertiesArgs) ToIntegrationRuntimeVNetPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeVNetPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeVNetPropertiesOutput).ToIntegrationRuntimeVNetPropertiesPtrOutputWithContext(ctx)
}

// IntegrationRuntimeVNetPropertiesPtrInput is an input type that accepts IntegrationRuntimeVNetPropertiesArgs, IntegrationRuntimeVNetPropertiesPtr and IntegrationRuntimeVNetPropertiesPtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeVNetPropertiesPtrInput` via:
//
//	        IntegrationRuntimeVNetPropertiesArgs{...}
//
//	or:
//
//	        nil
type IntegrationRuntimeVNetPropertiesPtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeVNetPropertiesPtrOutput() IntegrationRuntimeVNetPropertiesPtrOutput
	ToIntegrationRuntimeVNetPropertiesPtrOutputWithContext(context.Context) IntegrationRuntimeVNetPropertiesPtrOutput
}

type integrationRuntimeVNetPropertiesPtrType IntegrationRuntimeVNetPropertiesArgs

func IntegrationRuntimeVNetPropertiesPtr(v *IntegrationRuntimeVNetPropertiesArgs) IntegrationRuntimeVNetPropertiesPtrInput {
	return (*integrationRuntimeVNetPropertiesPtrType)(v)
}

func (*integrationRuntimeVNetPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeVNetProperties)(nil)).Elem()
}

func (i *integrationRuntimeVNetPropertiesPtrType) ToIntegrationRuntimeVNetPropertiesPtrOutput() IntegrationRuntimeVNetPropertiesPtrOutput {
	return i.ToIntegrationRuntimeVNetPropertiesPtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeVNetPropertiesPtrType) ToIntegrationRuntimeVNetPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeVNetPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeVNetPropertiesPtrOutput)
}

// VNet properties for managed integration runtime.
type IntegrationRuntimeVNetPropertiesOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeVNetPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeVNetProperties)(nil)).Elem()
}

func (o IntegrationRuntimeVNetPropertiesOutput) ToIntegrationRuntimeVNetPropertiesOutput() IntegrationRuntimeVNetPropertiesOutput {
	return o
}

func (o IntegrationRuntimeVNetPropertiesOutput) ToIntegrationRuntimeVNetPropertiesOutputWithContext(ctx context.Context) IntegrationRuntimeVNetPropertiesOutput {
	return o
}

func (o IntegrationRuntimeVNetPropertiesOutput) ToIntegrationRuntimeVNetPropertiesPtrOutput() IntegrationRuntimeVNetPropertiesPtrOutput {
	return o.ToIntegrationRuntimeVNetPropertiesPtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeVNetPropertiesOutput) ToIntegrationRuntimeVNetPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeVNetPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IntegrationRuntimeVNetProperties) *IntegrationRuntimeVNetProperties {
		return &v
	}).(IntegrationRuntimeVNetPropertiesPtrOutput)
}

// Resource IDs of the public IP addresses that this integration runtime will use.
func (o IntegrationRuntimeVNetPropertiesOutput) PublicIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IntegrationRuntimeVNetProperties) []string { return v.PublicIPs }).(pulumi.StringArrayOutput)
}

// The name of the subnet this integration runtime will join.
func (o IntegrationRuntimeVNetPropertiesOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeVNetProperties) *string { return v.Subnet }).(pulumi.StringPtrOutput)
}

// The ID of subnet, to which this Azure-SSIS integration runtime will be joined.
func (o IntegrationRuntimeVNetPropertiesOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeVNetProperties) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// The ID of the VNet that this integration runtime will join.
func (o IntegrationRuntimeVNetPropertiesOutput) VNetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeVNetProperties) *string { return v.VNetId }).(pulumi.StringPtrOutput)
}

type IntegrationRuntimeVNetPropertiesPtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeVNetPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeVNetProperties)(nil)).Elem()
}

func (o IntegrationRuntimeVNetPropertiesPtrOutput) ToIntegrationRuntimeVNetPropertiesPtrOutput() IntegrationRuntimeVNetPropertiesPtrOutput {
	return o
}

func (o IntegrationRuntimeVNetPropertiesPtrOutput) ToIntegrationRuntimeVNetPropertiesPtrOutputWithContext(ctx context.Context) IntegrationRuntimeVNetPropertiesPtrOutput {
	return o
}

func (o IntegrationRuntimeVNetPropertiesPtrOutput) Elem() IntegrationRuntimeVNetPropertiesOutput {
	return o.ApplyT(func(v *IntegrationRuntimeVNetProperties) IntegrationRuntimeVNetProperties {
		if v != nil {
			return *v
		}
		var ret IntegrationRuntimeVNetProperties
		return ret
	}).(IntegrationRuntimeVNetPropertiesOutput)
}

// Resource IDs of the public IP addresses that this integration runtime will use.
func (o IntegrationRuntimeVNetPropertiesPtrOutput) PublicIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IntegrationRuntimeVNetProperties) []string {
		if v == nil {
			return nil
		}
		return v.PublicIPs
	}).(pulumi.StringArrayOutput)
}

// The name of the subnet this integration runtime will join.
func (o IntegrationRuntimeVNetPropertiesPtrOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeVNetProperties) *string {
		if v == nil {
			return nil
		}
		return v.Subnet
	}).(pulumi.StringPtrOutput)
}

// The ID of subnet, to which this Azure-SSIS integration runtime will be joined.
func (o IntegrationRuntimeVNetPropertiesPtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeVNetProperties) *string {
		if v == nil {
			return nil
		}
		return v.SubnetId
	}).(pulumi.StringPtrOutput)
}

// The ID of the VNet that this integration runtime will join.
func (o IntegrationRuntimeVNetPropertiesPtrOutput) VNetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeVNetProperties) *string {
		if v == nil {
			return nil
		}
		return v.VNetId
	}).(pulumi.StringPtrOutput)
}

// VNet properties for managed integration runtime.
type IntegrationRuntimeVNetPropertiesResponse struct {
	// Resource IDs of the public IP addresses that this integration runtime will use.
	PublicIPs []string `pulumi:"publicIPs"`
	// The name of the subnet this integration runtime will join.
	Subnet *string `pulumi:"subnet"`
	// The ID of subnet, to which this Azure-SSIS integration runtime will be joined.
	SubnetId *string `pulumi:"subnetId"`
	// The ID of the VNet that this integration runtime will join.
	VNetId *string `pulumi:"vNetId"`
}

// VNet properties for managed integration runtime.
type IntegrationRuntimeVNetPropertiesResponseOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeVNetPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeVNetPropertiesResponse)(nil)).Elem()
}

func (o IntegrationRuntimeVNetPropertiesResponseOutput) ToIntegrationRuntimeVNetPropertiesResponseOutput() IntegrationRuntimeVNetPropertiesResponseOutput {
	return o
}

func (o IntegrationRuntimeVNetPropertiesResponseOutput) ToIntegrationRuntimeVNetPropertiesResponseOutputWithContext(ctx context.Context) IntegrationRuntimeVNetPropertiesResponseOutput {
	return o
}

// Resource IDs of the public IP addresses that this integration runtime will use.
func (o IntegrationRuntimeVNetPropertiesResponseOutput) PublicIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IntegrationRuntimeVNetPropertiesResponse) []string { return v.PublicIPs }).(pulumi.StringArrayOutput)
}

// The name of the subnet this integration runtime will join.
func (o IntegrationRuntimeVNetPropertiesResponseOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeVNetPropertiesResponse) *string { return v.Subnet }).(pulumi.StringPtrOutput)
}

// The ID of subnet, to which this Azure-SSIS integration runtime will be joined.
func (o IntegrationRuntimeVNetPropertiesResponseOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeVNetPropertiesResponse) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// The ID of the VNet that this integration runtime will join.
func (o IntegrationRuntimeVNetPropertiesResponseOutput) VNetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeVNetPropertiesResponse) *string { return v.VNetId }).(pulumi.StringPtrOutput)
}

type IntegrationRuntimeVNetPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeVNetPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeVNetPropertiesResponse)(nil)).Elem()
}

func (o IntegrationRuntimeVNetPropertiesResponsePtrOutput) ToIntegrationRuntimeVNetPropertiesResponsePtrOutput() IntegrationRuntimeVNetPropertiesResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeVNetPropertiesResponsePtrOutput) ToIntegrationRuntimeVNetPropertiesResponsePtrOutputWithContext(ctx context.Context) IntegrationRuntimeVNetPropertiesResponsePtrOutput {
	return o
}

func (o IntegrationRuntimeVNetPropertiesResponsePtrOutput) Elem() IntegrationRuntimeVNetPropertiesResponseOutput {
	return o.ApplyT(func(v *IntegrationRuntimeVNetPropertiesResponse) IntegrationRuntimeVNetPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret IntegrationRuntimeVNetPropertiesResponse
		return ret
	}).(IntegrationRuntimeVNetPropertiesResponseOutput)
}

// Resource IDs of the public IP addresses that this integration runtime will use.
func (o IntegrationRuntimeVNetPropertiesResponsePtrOutput) PublicIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IntegrationRuntimeVNetPropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.PublicIPs
	}).(pulumi.StringArrayOutput)
}

// The name of the subnet this integration runtime will join.
func (o IntegrationRuntimeVNetPropertiesResponsePtrOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeVNetPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Subnet
	}).(pulumi.StringPtrOutput)
}

// The ID of subnet, to which this Azure-SSIS integration runtime will be joined.
func (o IntegrationRuntimeVNetPropertiesResponsePtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeVNetPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubnetId
	}).(pulumi.StringPtrOutput)
}

// The ID of the VNet that this integration runtime will join.
func (o IntegrationRuntimeVNetPropertiesResponsePtrOutput) VNetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeVNetPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.VNetId
	}).(pulumi.StringPtrOutput)
}

// Jira Service linked service.
type JiraLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The IP address or host name of the Jira service. (e.g. jira.example.com)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the username field.
	Password interface{} `pulumi:"password"`
	// The TCP port that the Jira server uses to listen for client connections. The default value is 443 if connecting through HTTPS, or 8080 if connecting through HTTP.
	Port interface{} `pulumi:"port"`
	// Type of linked service.
	// Expected value is 'Jira'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
	// The user name that you use to access Jira Service.
	Username interface{} `pulumi:"username"`
}

// JiraLinkedServiceInput is an input type that accepts JiraLinkedServiceArgs and JiraLinkedServiceOutput values.
// You can construct a concrete instance of `JiraLinkedServiceInput` via:
//
//	JiraLinkedServiceArgs{...}
type JiraLinkedServiceInput interface {
	pulumi.Input

	ToJiraLinkedServiceOutput() JiraLinkedServiceOutput
	ToJiraLinkedServiceOutputWithContext(context.Context) JiraLinkedServiceOutput
}

// Jira Service linked service.
type JiraLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// The IP address or host name of the Jira service. (e.g. jira.example.com)
	Host pulumi.Input `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the username field.
	Password pulumi.Input `pulumi:"password"`
	// The TCP port that the Jira server uses to listen for client connections. The default value is 443 if connecting through HTTPS, or 8080 if connecting through HTTP.
	Port pulumi.Input `pulumi:"port"`
	// Type of linked service.
	// Expected value is 'Jira'.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
	// The user name that you use to access Jira Service.
	Username pulumi.Input `pulumi:"username"`
}

func (JiraLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JiraLinkedService)(nil)).Elem()
}

func (i JiraLinkedServiceArgs) ToJiraLinkedServiceOutput() JiraLinkedServiceOutput {
	return i.ToJiraLinkedServiceOutputWithContext(context.Background())
}

func (i JiraLinkedServiceArgs) ToJiraLinkedServiceOutputWithContext(ctx context.Context) JiraLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JiraLinkedServiceOutput)
}

// Jira Service linked service.
type JiraLinkedServiceOutput struct{ *pulumi.OutputState }

func (JiraLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JiraLinkedService)(nil)).Elem()
}

func (o JiraLinkedServiceOutput) ToJiraLinkedServiceOutput() JiraLinkedServiceOutput {
	return o
}

func (o JiraLinkedServiceOutput) ToJiraLinkedServiceOutputWithContext(ctx context.Context) JiraLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o JiraLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v JiraLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o JiraLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v JiraLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o JiraLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JiraLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o JiraLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JiraLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The IP address or host name of the Jira service. (e.g. jira.example.com)
func (o JiraLinkedServiceOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraLinkedService) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o JiraLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v JiraLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The password corresponding to the user name that you provided in the username field.
func (o JiraLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port that the Jira server uses to listen for client connections. The default value is 443 if connecting through HTTPS, or 8080 if connecting through HTTP.
func (o JiraLinkedServiceOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraLinkedService) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Jira'.
func (o JiraLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JiraLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o JiraLinkedServiceOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraLinkedService) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o JiraLinkedServiceOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraLinkedService) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o JiraLinkedServiceOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraLinkedService) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// The user name that you use to access Jira Service.
func (o JiraLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Jira Service linked service.
type JiraLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The IP address or host name of the Jira service. (e.g. jira.example.com)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the username field.
	Password interface{} `pulumi:"password"`
	// The TCP port that the Jira server uses to listen for client connections. The default value is 443 if connecting through HTTPS, or 8080 if connecting through HTTP.
	Port interface{} `pulumi:"port"`
	// Type of linked service.
	// Expected value is 'Jira'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
	// The user name that you use to access Jira Service.
	Username interface{} `pulumi:"username"`
}

// Jira Service linked service.
type JiraLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (JiraLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JiraLinkedServiceResponse)(nil)).Elem()
}

func (o JiraLinkedServiceResponseOutput) ToJiraLinkedServiceResponseOutput() JiraLinkedServiceResponseOutput {
	return o
}

func (o JiraLinkedServiceResponseOutput) ToJiraLinkedServiceResponseOutputWithContext(ctx context.Context) JiraLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o JiraLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v JiraLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o JiraLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v JiraLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o JiraLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JiraLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o JiraLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JiraLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The IP address or host name of the Jira service. (e.g. jira.example.com)
func (o JiraLinkedServiceResponseOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraLinkedServiceResponse) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o JiraLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v JiraLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The password corresponding to the user name that you provided in the username field.
func (o JiraLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port that the Jira server uses to listen for client connections. The default value is 443 if connecting through HTTPS, or 8080 if connecting through HTTP.
func (o JiraLinkedServiceResponseOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraLinkedServiceResponse) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Jira'.
func (o JiraLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JiraLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o JiraLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraLinkedServiceResponse) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o JiraLinkedServiceResponseOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraLinkedServiceResponse) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o JiraLinkedServiceResponseOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraLinkedServiceResponse) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// The user name that you use to access Jira Service.
func (o JiraLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Jira Service dataset.
type JiraObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'JiraObject'.
	Type string `pulumi:"type"`
}

// JiraObjectDatasetInput is an input type that accepts JiraObjectDatasetArgs and JiraObjectDatasetOutput values.
// You can construct a concrete instance of `JiraObjectDatasetInput` via:
//
//	JiraObjectDatasetArgs{...}
type JiraObjectDatasetInput interface {
	pulumi.Input

	ToJiraObjectDatasetOutput() JiraObjectDatasetOutput
	ToJiraObjectDatasetOutputWithContext(context.Context) JiraObjectDatasetOutput
}

// Jira Service dataset.
type JiraObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'JiraObject'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (JiraObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JiraObjectDataset)(nil)).Elem()
}

func (i JiraObjectDatasetArgs) ToJiraObjectDatasetOutput() JiraObjectDatasetOutput {
	return i.ToJiraObjectDatasetOutputWithContext(context.Background())
}

func (i JiraObjectDatasetArgs) ToJiraObjectDatasetOutputWithContext(ctx context.Context) JiraObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JiraObjectDatasetOutput)
}

// Jira Service dataset.
type JiraObjectDatasetOutput struct{ *pulumi.OutputState }

func (JiraObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JiraObjectDataset)(nil)).Elem()
}

func (o JiraObjectDatasetOutput) ToJiraObjectDatasetOutput() JiraObjectDatasetOutput {
	return o
}

func (o JiraObjectDatasetOutput) ToJiraObjectDatasetOutputWithContext(ctx context.Context) JiraObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o JiraObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v JiraObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o JiraObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JiraObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o JiraObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v JiraObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o JiraObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v JiraObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o JiraObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v JiraObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o JiraObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o JiraObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o JiraObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'JiraObject'.
func (o JiraObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JiraObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Jira Service dataset.
type JiraObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'JiraObject'.
	Type string `pulumi:"type"`
}

// Jira Service dataset.
type JiraObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (JiraObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JiraObjectDatasetResponse)(nil)).Elem()
}

func (o JiraObjectDatasetResponseOutput) ToJiraObjectDatasetResponseOutput() JiraObjectDatasetResponseOutput {
	return o
}

func (o JiraObjectDatasetResponseOutput) ToJiraObjectDatasetResponseOutputWithContext(ctx context.Context) JiraObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o JiraObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v JiraObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o JiraObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JiraObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o JiraObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v JiraObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o JiraObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v JiraObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o JiraObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v JiraObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o JiraObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o JiraObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o JiraObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'JiraObject'.
func (o JiraObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JiraObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Jira Service source.
type JiraSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'JiraSource'.
	Type string `pulumi:"type"`
}

// JiraSourceInput is an input type that accepts JiraSourceArgs and JiraSourceOutput values.
// You can construct a concrete instance of `JiraSourceInput` via:
//
//	JiraSourceArgs{...}
type JiraSourceInput interface {
	pulumi.Input

	ToJiraSourceOutput() JiraSourceOutput
	ToJiraSourceOutputWithContext(context.Context) JiraSourceOutput
}

// A copy activity Jira Service source.
type JiraSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'JiraSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (JiraSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JiraSource)(nil)).Elem()
}

func (i JiraSourceArgs) ToJiraSourceOutput() JiraSourceOutput {
	return i.ToJiraSourceOutputWithContext(context.Background())
}

func (i JiraSourceArgs) ToJiraSourceOutputWithContext(ctx context.Context) JiraSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JiraSourceOutput)
}

// A copy activity Jira Service source.
type JiraSourceOutput struct{ *pulumi.OutputState }

func (JiraSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JiraSource)(nil)).Elem()
}

func (o JiraSourceOutput) ToJiraSourceOutput() JiraSourceOutput {
	return o
}

func (o JiraSourceOutput) ToJiraSourceOutputWithContext(ctx context.Context) JiraSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o JiraSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o JiraSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o JiraSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o JiraSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o JiraSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o JiraSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o JiraSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'JiraSource'.
func (o JiraSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JiraSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Jira Service source.
type JiraSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'JiraSource'.
	Type string `pulumi:"type"`
}

// A copy activity Jira Service source.
type JiraSourceResponseOutput struct{ *pulumi.OutputState }

func (JiraSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JiraSourceResponse)(nil)).Elem()
}

func (o JiraSourceResponseOutput) ToJiraSourceResponseOutput() JiraSourceResponseOutput {
	return o
}

func (o JiraSourceResponseOutput) ToJiraSourceResponseOutputWithContext(ctx context.Context) JiraSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o JiraSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o JiraSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o JiraSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o JiraSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o JiraSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o JiraSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o JiraSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v JiraSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'JiraSource'.
func (o JiraSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JiraSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Json dataset.
type JsonDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the json dataset.
	Compression *DatasetCompression `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The code page name of the preferred encoding. If not specified, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
	EncodingName interface{} `pulumi:"encodingName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The location of the json data storage.
	Location interface{} `pulumi:"location"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Json'.
	Type string `pulumi:"type"`
}

// JsonDatasetInput is an input type that accepts JsonDatasetArgs and JsonDatasetOutput values.
// You can construct a concrete instance of `JsonDatasetInput` via:
//
//	JsonDatasetArgs{...}
type JsonDatasetInput interface {
	pulumi.Input

	ToJsonDatasetOutput() JsonDatasetOutput
	ToJsonDatasetOutputWithContext(context.Context) JsonDatasetOutput
}

// Json dataset.
type JsonDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The data compression method used for the json dataset.
	Compression DatasetCompressionPtrInput `pulumi:"compression"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The code page name of the preferred encoding. If not specified, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
	EncodingName pulumi.Input `pulumi:"encodingName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// The location of the json data storage.
	Location pulumi.Input `pulumi:"location"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Json'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (JsonDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonDataset)(nil)).Elem()
}

func (i JsonDatasetArgs) ToJsonDatasetOutput() JsonDatasetOutput {
	return i.ToJsonDatasetOutputWithContext(context.Background())
}

func (i JsonDatasetArgs) ToJsonDatasetOutputWithContext(ctx context.Context) JsonDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonDatasetOutput)
}

// Json dataset.
type JsonDatasetOutput struct{ *pulumi.OutputState }

func (JsonDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonDataset)(nil)).Elem()
}

func (o JsonDatasetOutput) ToJsonDatasetOutput() JsonDatasetOutput {
	return o
}

func (o JsonDatasetOutput) ToJsonDatasetOutputWithContext(ctx context.Context) JsonDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o JsonDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v JsonDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The data compression method used for the json dataset.
func (o JsonDatasetOutput) Compression() DatasetCompressionPtrOutput {
	return o.ApplyT(func(v JsonDataset) *DatasetCompression { return v.Compression }).(DatasetCompressionPtrOutput)
}

// Dataset description.
func (o JsonDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JsonDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The code page name of the preferred encoding. If not specified, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
func (o JsonDatasetOutput) EncodingName() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonDataset) interface{} { return v.EncodingName }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o JsonDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v JsonDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o JsonDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v JsonDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// The location of the json data storage.
func (o JsonDatasetOutput) Location() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonDataset) interface{} { return v.Location }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o JsonDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v JsonDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o JsonDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o JsonDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'Json'.
func (o JsonDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JsonDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Json dataset.
type JsonDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the json dataset.
	Compression *DatasetCompressionResponse `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The code page name of the preferred encoding. If not specified, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
	EncodingName interface{} `pulumi:"encodingName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The location of the json data storage.
	Location interface{} `pulumi:"location"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Json'.
	Type string `pulumi:"type"`
}

// Json dataset.
type JsonDatasetResponseOutput struct{ *pulumi.OutputState }

func (JsonDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonDatasetResponse)(nil)).Elem()
}

func (o JsonDatasetResponseOutput) ToJsonDatasetResponseOutput() JsonDatasetResponseOutput {
	return o
}

func (o JsonDatasetResponseOutput) ToJsonDatasetResponseOutputWithContext(ctx context.Context) JsonDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o JsonDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v JsonDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The data compression method used for the json dataset.
func (o JsonDatasetResponseOutput) Compression() DatasetCompressionResponsePtrOutput {
	return o.ApplyT(func(v JsonDatasetResponse) *DatasetCompressionResponse { return v.Compression }).(DatasetCompressionResponsePtrOutput)
}

// Dataset description.
func (o JsonDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JsonDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The code page name of the preferred encoding. If not specified, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
func (o JsonDatasetResponseOutput) EncodingName() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonDatasetResponse) interface{} { return v.EncodingName }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o JsonDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v JsonDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o JsonDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v JsonDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// The location of the json data storage.
func (o JsonDatasetResponseOutput) Location() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonDatasetResponse) interface{} { return v.Location }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o JsonDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v JsonDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o JsonDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o JsonDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'Json'.
func (o JsonDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JsonDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The data stored in JSON format.
type JsonFormat struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer interface{} `pulumi:"deserializer"`
	// The code page name of the preferred encoding. If not provided, the default value is 'utf-8', unless the byte order mark (BOM) denotes another Unicode encoding. The full list of supported values can be found in the 'Name' column of the table of encodings in the following reference: https://go.microsoft.com/fwlink/?linkid=861078. Type: string (or Expression with resultType string).
	EncodingName interface{} `pulumi:"encodingName"`
	// File pattern of JSON. To be more specific, the way of separating a collection of JSON objects. The default value is 'setOfObjects'. It is case-sensitive.
	FilePattern interface{} `pulumi:"filePattern"`
	// The JSONPath of the JSON array element to be flattened. Example: "$.ArrayPath". Type: string (or Expression with resultType string).
	JsonNodeReference interface{} `pulumi:"jsonNodeReference"`
	// The JSONPath definition for each column mapping with a customized column name to extract data from JSON file. For fields under root object, start with "$"; for fields inside the array chosen by jsonNodeReference property, start from the array element. Example: {"Column1": "$.Column1Path", "Column2": "Column2PathInArray"}. Type: object (or Expression with resultType object).
	JsonPathDefinition interface{} `pulumi:"jsonPathDefinition"`
	// The character used to separate nesting levels. Default value is '.' (dot). Type: string (or Expression with resultType string).
	NestingSeparator interface{} `pulumi:"nestingSeparator"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer interface{} `pulumi:"serializer"`
	// Type of dataset storage format.
	// Expected value is 'JsonFormat'.
	Type string `pulumi:"type"`
}

// JsonFormatInput is an input type that accepts JsonFormatArgs and JsonFormatOutput values.
// You can construct a concrete instance of `JsonFormatInput` via:
//
//	JsonFormatArgs{...}
type JsonFormatInput interface {
	pulumi.Input

	ToJsonFormatOutput() JsonFormatOutput
	ToJsonFormatOutputWithContext(context.Context) JsonFormatOutput
}

// The data stored in JSON format.
type JsonFormatArgs struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer pulumi.Input `pulumi:"deserializer"`
	// The code page name of the preferred encoding. If not provided, the default value is 'utf-8', unless the byte order mark (BOM) denotes another Unicode encoding. The full list of supported values can be found in the 'Name' column of the table of encodings in the following reference: https://go.microsoft.com/fwlink/?linkid=861078. Type: string (or Expression with resultType string).
	EncodingName pulumi.Input `pulumi:"encodingName"`
	// File pattern of JSON. To be more specific, the way of separating a collection of JSON objects. The default value is 'setOfObjects'. It is case-sensitive.
	FilePattern pulumi.Input `pulumi:"filePattern"`
	// The JSONPath of the JSON array element to be flattened. Example: "$.ArrayPath". Type: string (or Expression with resultType string).
	JsonNodeReference pulumi.Input `pulumi:"jsonNodeReference"`
	// The JSONPath definition for each column mapping with a customized column name to extract data from JSON file. For fields under root object, start with "$"; for fields inside the array chosen by jsonNodeReference property, start from the array element. Example: {"Column1": "$.Column1Path", "Column2": "Column2PathInArray"}. Type: object (or Expression with resultType object).
	JsonPathDefinition pulumi.Input `pulumi:"jsonPathDefinition"`
	// The character used to separate nesting levels. Default value is '.' (dot). Type: string (or Expression with resultType string).
	NestingSeparator pulumi.Input `pulumi:"nestingSeparator"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer pulumi.Input `pulumi:"serializer"`
	// Type of dataset storage format.
	// Expected value is 'JsonFormat'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (JsonFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonFormat)(nil)).Elem()
}

func (i JsonFormatArgs) ToJsonFormatOutput() JsonFormatOutput {
	return i.ToJsonFormatOutputWithContext(context.Background())
}

func (i JsonFormatArgs) ToJsonFormatOutputWithContext(ctx context.Context) JsonFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonFormatOutput)
}

func (i JsonFormatArgs) ToJsonFormatPtrOutput() JsonFormatPtrOutput {
	return i.ToJsonFormatPtrOutputWithContext(context.Background())
}

func (i JsonFormatArgs) ToJsonFormatPtrOutputWithContext(ctx context.Context) JsonFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonFormatOutput).ToJsonFormatPtrOutputWithContext(ctx)
}

// JsonFormatPtrInput is an input type that accepts JsonFormatArgs, JsonFormatPtr and JsonFormatPtrOutput values.
// You can construct a concrete instance of `JsonFormatPtrInput` via:
//
//	        JsonFormatArgs{...}
//
//	or:
//
//	        nil
type JsonFormatPtrInput interface {
	pulumi.Input

	ToJsonFormatPtrOutput() JsonFormatPtrOutput
	ToJsonFormatPtrOutputWithContext(context.Context) JsonFormatPtrOutput
}

type jsonFormatPtrType JsonFormatArgs

func JsonFormatPtr(v *JsonFormatArgs) JsonFormatPtrInput {
	return (*jsonFormatPtrType)(v)
}

func (*jsonFormatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonFormat)(nil)).Elem()
}

func (i *jsonFormatPtrType) ToJsonFormatPtrOutput() JsonFormatPtrOutput {
	return i.ToJsonFormatPtrOutputWithContext(context.Background())
}

func (i *jsonFormatPtrType) ToJsonFormatPtrOutputWithContext(ctx context.Context) JsonFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonFormatPtrOutput)
}

// The data stored in JSON format.
type JsonFormatOutput struct{ *pulumi.OutputState }

func (JsonFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonFormat)(nil)).Elem()
}

func (o JsonFormatOutput) ToJsonFormatOutput() JsonFormatOutput {
	return o
}

func (o JsonFormatOutput) ToJsonFormatOutputWithContext(ctx context.Context) JsonFormatOutput {
	return o
}

func (o JsonFormatOutput) ToJsonFormatPtrOutput() JsonFormatPtrOutput {
	return o.ToJsonFormatPtrOutputWithContext(context.Background())
}

func (o JsonFormatOutput) ToJsonFormatPtrOutputWithContext(ctx context.Context) JsonFormatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JsonFormat) *JsonFormat {
		return &v
	}).(JsonFormatPtrOutput)
}

// Deserializer. Type: string (or Expression with resultType string).
func (o JsonFormatOutput) Deserializer() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonFormat) interface{} { return v.Deserializer }).(pulumi.AnyOutput)
}

// The code page name of the preferred encoding. If not provided, the default value is 'utf-8', unless the byte order mark (BOM) denotes another Unicode encoding. The full list of supported values can be found in the 'Name' column of the table of encodings in the following reference: https://go.microsoft.com/fwlink/?linkid=861078. Type: string (or Expression with resultType string).
func (o JsonFormatOutput) EncodingName() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonFormat) interface{} { return v.EncodingName }).(pulumi.AnyOutput)
}

// File pattern of JSON. To be more specific, the way of separating a collection of JSON objects. The default value is 'setOfObjects'. It is case-sensitive.
func (o JsonFormatOutput) FilePattern() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonFormat) interface{} { return v.FilePattern }).(pulumi.AnyOutput)
}

// The JSONPath of the JSON array element to be flattened. Example: "$.ArrayPath". Type: string (or Expression with resultType string).
func (o JsonFormatOutput) JsonNodeReference() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonFormat) interface{} { return v.JsonNodeReference }).(pulumi.AnyOutput)
}

// The JSONPath definition for each column mapping with a customized column name to extract data from JSON file. For fields under root object, start with "$"; for fields inside the array chosen by jsonNodeReference property, start from the array element. Example: {"Column1": "$.Column1Path", "Column2": "Column2PathInArray"}. Type: object (or Expression with resultType object).
func (o JsonFormatOutput) JsonPathDefinition() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonFormat) interface{} { return v.JsonPathDefinition }).(pulumi.AnyOutput)
}

// The character used to separate nesting levels. Default value is '.' (dot). Type: string (or Expression with resultType string).
func (o JsonFormatOutput) NestingSeparator() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonFormat) interface{} { return v.NestingSeparator }).(pulumi.AnyOutput)
}

// Serializer. Type: string (or Expression with resultType string).
func (o JsonFormatOutput) Serializer() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonFormat) interface{} { return v.Serializer }).(pulumi.AnyOutput)
}

// Type of dataset storage format.
// Expected value is 'JsonFormat'.
func (o JsonFormatOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JsonFormat) string { return v.Type }).(pulumi.StringOutput)
}

type JsonFormatPtrOutput struct{ *pulumi.OutputState }

func (JsonFormatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonFormat)(nil)).Elem()
}

func (o JsonFormatPtrOutput) ToJsonFormatPtrOutput() JsonFormatPtrOutput {
	return o
}

func (o JsonFormatPtrOutput) ToJsonFormatPtrOutputWithContext(ctx context.Context) JsonFormatPtrOutput {
	return o
}

func (o JsonFormatPtrOutput) Elem() JsonFormatOutput {
	return o.ApplyT(func(v *JsonFormat) JsonFormat {
		if v != nil {
			return *v
		}
		var ret JsonFormat
		return ret
	}).(JsonFormatOutput)
}

// Deserializer. Type: string (or Expression with resultType string).
func (o JsonFormatPtrOutput) Deserializer() pulumi.AnyOutput {
	return o.ApplyT(func(v *JsonFormat) interface{} {
		if v == nil {
			return nil
		}
		return v.Deserializer
	}).(pulumi.AnyOutput)
}

// The code page name of the preferred encoding. If not provided, the default value is 'utf-8', unless the byte order mark (BOM) denotes another Unicode encoding. The full list of supported values can be found in the 'Name' column of the table of encodings in the following reference: https://go.microsoft.com/fwlink/?linkid=861078. Type: string (or Expression with resultType string).
func (o JsonFormatPtrOutput) EncodingName() pulumi.AnyOutput {
	return o.ApplyT(func(v *JsonFormat) interface{} {
		if v == nil {
			return nil
		}
		return v.EncodingName
	}).(pulumi.AnyOutput)
}

// File pattern of JSON. To be more specific, the way of separating a collection of JSON objects. The default value is 'setOfObjects'. It is case-sensitive.
func (o JsonFormatPtrOutput) FilePattern() pulumi.AnyOutput {
	return o.ApplyT(func(v *JsonFormat) interface{} {
		if v == nil {
			return nil
		}
		return v.FilePattern
	}).(pulumi.AnyOutput)
}

// The JSONPath of the JSON array element to be flattened. Example: "$.ArrayPath". Type: string (or Expression with resultType string).
func (o JsonFormatPtrOutput) JsonNodeReference() pulumi.AnyOutput {
	return o.ApplyT(func(v *JsonFormat) interface{} {
		if v == nil {
			return nil
		}
		return v.JsonNodeReference
	}).(pulumi.AnyOutput)
}

// The JSONPath definition for each column mapping with a customized column name to extract data from JSON file. For fields under root object, start with "$"; for fields inside the array chosen by jsonNodeReference property, start from the array element. Example: {"Column1": "$.Column1Path", "Column2": "Column2PathInArray"}. Type: object (or Expression with resultType object).
func (o JsonFormatPtrOutput) JsonPathDefinition() pulumi.AnyOutput {
	return o.ApplyT(func(v *JsonFormat) interface{} {
		if v == nil {
			return nil
		}
		return v.JsonPathDefinition
	}).(pulumi.AnyOutput)
}

// The character used to separate nesting levels. Default value is '.' (dot). Type: string (or Expression with resultType string).
func (o JsonFormatPtrOutput) NestingSeparator() pulumi.AnyOutput {
	return o.ApplyT(func(v *JsonFormat) interface{} {
		if v == nil {
			return nil
		}
		return v.NestingSeparator
	}).(pulumi.AnyOutput)
}

// Serializer. Type: string (or Expression with resultType string).
func (o JsonFormatPtrOutput) Serializer() pulumi.AnyOutput {
	return o.ApplyT(func(v *JsonFormat) interface{} {
		if v == nil {
			return nil
		}
		return v.Serializer
	}).(pulumi.AnyOutput)
}

// Type of dataset storage format.
// Expected value is 'JsonFormat'.
func (o JsonFormatPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JsonFormat) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The data stored in JSON format.
type JsonFormatResponse struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer interface{} `pulumi:"deserializer"`
	// The code page name of the preferred encoding. If not provided, the default value is 'utf-8', unless the byte order mark (BOM) denotes another Unicode encoding. The full list of supported values can be found in the 'Name' column of the table of encodings in the following reference: https://go.microsoft.com/fwlink/?linkid=861078. Type: string (or Expression with resultType string).
	EncodingName interface{} `pulumi:"encodingName"`
	// File pattern of JSON. To be more specific, the way of separating a collection of JSON objects. The default value is 'setOfObjects'. It is case-sensitive.
	FilePattern interface{} `pulumi:"filePattern"`
	// The JSONPath of the JSON array element to be flattened. Example: "$.ArrayPath". Type: string (or Expression with resultType string).
	JsonNodeReference interface{} `pulumi:"jsonNodeReference"`
	// The JSONPath definition for each column mapping with a customized column name to extract data from JSON file. For fields under root object, start with "$"; for fields inside the array chosen by jsonNodeReference property, start from the array element. Example: {"Column1": "$.Column1Path", "Column2": "Column2PathInArray"}. Type: object (or Expression with resultType object).
	JsonPathDefinition interface{} `pulumi:"jsonPathDefinition"`
	// The character used to separate nesting levels. Default value is '.' (dot). Type: string (or Expression with resultType string).
	NestingSeparator interface{} `pulumi:"nestingSeparator"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer interface{} `pulumi:"serializer"`
	// Type of dataset storage format.
	// Expected value is 'JsonFormat'.
	Type string `pulumi:"type"`
}

// The data stored in JSON format.
type JsonFormatResponseOutput struct{ *pulumi.OutputState }

func (JsonFormatResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonFormatResponse)(nil)).Elem()
}

func (o JsonFormatResponseOutput) ToJsonFormatResponseOutput() JsonFormatResponseOutput {
	return o
}

func (o JsonFormatResponseOutput) ToJsonFormatResponseOutputWithContext(ctx context.Context) JsonFormatResponseOutput {
	return o
}

// Deserializer. Type: string (or Expression with resultType string).
func (o JsonFormatResponseOutput) Deserializer() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonFormatResponse) interface{} { return v.Deserializer }).(pulumi.AnyOutput)
}

// The code page name of the preferred encoding. If not provided, the default value is 'utf-8', unless the byte order mark (BOM) denotes another Unicode encoding. The full list of supported values can be found in the 'Name' column of the table of encodings in the following reference: https://go.microsoft.com/fwlink/?linkid=861078. Type: string (or Expression with resultType string).
func (o JsonFormatResponseOutput) EncodingName() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonFormatResponse) interface{} { return v.EncodingName }).(pulumi.AnyOutput)
}

// File pattern of JSON. To be more specific, the way of separating a collection of JSON objects. The default value is 'setOfObjects'. It is case-sensitive.
func (o JsonFormatResponseOutput) FilePattern() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonFormatResponse) interface{} { return v.FilePattern }).(pulumi.AnyOutput)
}

// The JSONPath of the JSON array element to be flattened. Example: "$.ArrayPath". Type: string (or Expression with resultType string).
func (o JsonFormatResponseOutput) JsonNodeReference() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonFormatResponse) interface{} { return v.JsonNodeReference }).(pulumi.AnyOutput)
}

// The JSONPath definition for each column mapping with a customized column name to extract data from JSON file. For fields under root object, start with "$"; for fields inside the array chosen by jsonNodeReference property, start from the array element. Example: {"Column1": "$.Column1Path", "Column2": "Column2PathInArray"}. Type: object (or Expression with resultType object).
func (o JsonFormatResponseOutput) JsonPathDefinition() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonFormatResponse) interface{} { return v.JsonPathDefinition }).(pulumi.AnyOutput)
}

// The character used to separate nesting levels. Default value is '.' (dot). Type: string (or Expression with resultType string).
func (o JsonFormatResponseOutput) NestingSeparator() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonFormatResponse) interface{} { return v.NestingSeparator }).(pulumi.AnyOutput)
}

// Serializer. Type: string (or Expression with resultType string).
func (o JsonFormatResponseOutput) Serializer() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonFormatResponse) interface{} { return v.Serializer }).(pulumi.AnyOutput)
}

// Type of dataset storage format.
// Expected value is 'JsonFormat'.
func (o JsonFormatResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JsonFormatResponse) string { return v.Type }).(pulumi.StringOutput)
}

type JsonFormatResponsePtrOutput struct{ *pulumi.OutputState }

func (JsonFormatResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonFormatResponse)(nil)).Elem()
}

func (o JsonFormatResponsePtrOutput) ToJsonFormatResponsePtrOutput() JsonFormatResponsePtrOutput {
	return o
}

func (o JsonFormatResponsePtrOutput) ToJsonFormatResponsePtrOutputWithContext(ctx context.Context) JsonFormatResponsePtrOutput {
	return o
}

func (o JsonFormatResponsePtrOutput) Elem() JsonFormatResponseOutput {
	return o.ApplyT(func(v *JsonFormatResponse) JsonFormatResponse {
		if v != nil {
			return *v
		}
		var ret JsonFormatResponse
		return ret
	}).(JsonFormatResponseOutput)
}

// Deserializer. Type: string (or Expression with resultType string).
func (o JsonFormatResponsePtrOutput) Deserializer() pulumi.AnyOutput {
	return o.ApplyT(func(v *JsonFormatResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Deserializer
	}).(pulumi.AnyOutput)
}

// The code page name of the preferred encoding. If not provided, the default value is 'utf-8', unless the byte order mark (BOM) denotes another Unicode encoding. The full list of supported values can be found in the 'Name' column of the table of encodings in the following reference: https://go.microsoft.com/fwlink/?linkid=861078. Type: string (or Expression with resultType string).
func (o JsonFormatResponsePtrOutput) EncodingName() pulumi.AnyOutput {
	return o.ApplyT(func(v *JsonFormatResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.EncodingName
	}).(pulumi.AnyOutput)
}

// File pattern of JSON. To be more specific, the way of separating a collection of JSON objects. The default value is 'setOfObjects'. It is case-sensitive.
func (o JsonFormatResponsePtrOutput) FilePattern() pulumi.AnyOutput {
	return o.ApplyT(func(v *JsonFormatResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.FilePattern
	}).(pulumi.AnyOutput)
}

// The JSONPath of the JSON array element to be flattened. Example: "$.ArrayPath". Type: string (or Expression with resultType string).
func (o JsonFormatResponsePtrOutput) JsonNodeReference() pulumi.AnyOutput {
	return o.ApplyT(func(v *JsonFormatResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.JsonNodeReference
	}).(pulumi.AnyOutput)
}

// The JSONPath definition for each column mapping with a customized column name to extract data from JSON file. For fields under root object, start with "$"; for fields inside the array chosen by jsonNodeReference property, start from the array element. Example: {"Column1": "$.Column1Path", "Column2": "Column2PathInArray"}. Type: object (or Expression with resultType object).
func (o JsonFormatResponsePtrOutput) JsonPathDefinition() pulumi.AnyOutput {
	return o.ApplyT(func(v *JsonFormatResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.JsonPathDefinition
	}).(pulumi.AnyOutput)
}

// The character used to separate nesting levels. Default value is '.' (dot). Type: string (or Expression with resultType string).
func (o JsonFormatResponsePtrOutput) NestingSeparator() pulumi.AnyOutput {
	return o.ApplyT(func(v *JsonFormatResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.NestingSeparator
	}).(pulumi.AnyOutput)
}

// Serializer. Type: string (or Expression with resultType string).
func (o JsonFormatResponsePtrOutput) Serializer() pulumi.AnyOutput {
	return o.ApplyT(func(v *JsonFormatResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Serializer
	}).(pulumi.AnyOutput)
}

// Type of dataset storage format.
// Expected value is 'JsonFormat'.
func (o JsonFormatResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JsonFormatResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Json read settings.
type JsonReadSettings struct {
	// Compression settings.
	CompressionProperties interface{} `pulumi:"compressionProperties"`
	// The read setting type.
	// Expected value is 'JsonReadSettings'.
	Type string `pulumi:"type"`
}

// JsonReadSettingsInput is an input type that accepts JsonReadSettingsArgs and JsonReadSettingsOutput values.
// You can construct a concrete instance of `JsonReadSettingsInput` via:
//
//	JsonReadSettingsArgs{...}
type JsonReadSettingsInput interface {
	pulumi.Input

	ToJsonReadSettingsOutput() JsonReadSettingsOutput
	ToJsonReadSettingsOutputWithContext(context.Context) JsonReadSettingsOutput
}

// Json read settings.
type JsonReadSettingsArgs struct {
	// Compression settings.
	CompressionProperties pulumi.Input `pulumi:"compressionProperties"`
	// The read setting type.
	// Expected value is 'JsonReadSettings'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (JsonReadSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonReadSettings)(nil)).Elem()
}

func (i JsonReadSettingsArgs) ToJsonReadSettingsOutput() JsonReadSettingsOutput {
	return i.ToJsonReadSettingsOutputWithContext(context.Background())
}

func (i JsonReadSettingsArgs) ToJsonReadSettingsOutputWithContext(ctx context.Context) JsonReadSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonReadSettingsOutput)
}

func (i JsonReadSettingsArgs) ToJsonReadSettingsPtrOutput() JsonReadSettingsPtrOutput {
	return i.ToJsonReadSettingsPtrOutputWithContext(context.Background())
}

func (i JsonReadSettingsArgs) ToJsonReadSettingsPtrOutputWithContext(ctx context.Context) JsonReadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonReadSettingsOutput).ToJsonReadSettingsPtrOutputWithContext(ctx)
}

// JsonReadSettingsPtrInput is an input type that accepts JsonReadSettingsArgs, JsonReadSettingsPtr and JsonReadSettingsPtrOutput values.
// You can construct a concrete instance of `JsonReadSettingsPtrInput` via:
//
//	        JsonReadSettingsArgs{...}
//
//	or:
//
//	        nil
type JsonReadSettingsPtrInput interface {
	pulumi.Input

	ToJsonReadSettingsPtrOutput() JsonReadSettingsPtrOutput
	ToJsonReadSettingsPtrOutputWithContext(context.Context) JsonReadSettingsPtrOutput
}

type jsonReadSettingsPtrType JsonReadSettingsArgs

func JsonReadSettingsPtr(v *JsonReadSettingsArgs) JsonReadSettingsPtrInput {
	return (*jsonReadSettingsPtrType)(v)
}

func (*jsonReadSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonReadSettings)(nil)).Elem()
}

func (i *jsonReadSettingsPtrType) ToJsonReadSettingsPtrOutput() JsonReadSettingsPtrOutput {
	return i.ToJsonReadSettingsPtrOutputWithContext(context.Background())
}

func (i *jsonReadSettingsPtrType) ToJsonReadSettingsPtrOutputWithContext(ctx context.Context) JsonReadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonReadSettingsPtrOutput)
}

// Json read settings.
type JsonReadSettingsOutput struct{ *pulumi.OutputState }

func (JsonReadSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonReadSettings)(nil)).Elem()
}

func (o JsonReadSettingsOutput) ToJsonReadSettingsOutput() JsonReadSettingsOutput {
	return o
}

func (o JsonReadSettingsOutput) ToJsonReadSettingsOutputWithContext(ctx context.Context) JsonReadSettingsOutput {
	return o
}

func (o JsonReadSettingsOutput) ToJsonReadSettingsPtrOutput() JsonReadSettingsPtrOutput {
	return o.ToJsonReadSettingsPtrOutputWithContext(context.Background())
}

func (o JsonReadSettingsOutput) ToJsonReadSettingsPtrOutputWithContext(ctx context.Context) JsonReadSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JsonReadSettings) *JsonReadSettings {
		return &v
	}).(JsonReadSettingsPtrOutput)
}

// Compression settings.
func (o JsonReadSettingsOutput) CompressionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonReadSettings) interface{} { return v.CompressionProperties }).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'JsonReadSettings'.
func (o JsonReadSettingsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JsonReadSettings) string { return v.Type }).(pulumi.StringOutput)
}

type JsonReadSettingsPtrOutput struct{ *pulumi.OutputState }

func (JsonReadSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonReadSettings)(nil)).Elem()
}

func (o JsonReadSettingsPtrOutput) ToJsonReadSettingsPtrOutput() JsonReadSettingsPtrOutput {
	return o
}

func (o JsonReadSettingsPtrOutput) ToJsonReadSettingsPtrOutputWithContext(ctx context.Context) JsonReadSettingsPtrOutput {
	return o
}

func (o JsonReadSettingsPtrOutput) Elem() JsonReadSettingsOutput {
	return o.ApplyT(func(v *JsonReadSettings) JsonReadSettings {
		if v != nil {
			return *v
		}
		var ret JsonReadSettings
		return ret
	}).(JsonReadSettingsOutput)
}

// Compression settings.
func (o JsonReadSettingsPtrOutput) CompressionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v *JsonReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.CompressionProperties
	}).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'JsonReadSettings'.
func (o JsonReadSettingsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JsonReadSettings) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Json read settings.
type JsonReadSettingsResponse struct {
	// Compression settings.
	CompressionProperties interface{} `pulumi:"compressionProperties"`
	// The read setting type.
	// Expected value is 'JsonReadSettings'.
	Type string `pulumi:"type"`
}

// Json read settings.
type JsonReadSettingsResponseOutput struct{ *pulumi.OutputState }

func (JsonReadSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonReadSettingsResponse)(nil)).Elem()
}

func (o JsonReadSettingsResponseOutput) ToJsonReadSettingsResponseOutput() JsonReadSettingsResponseOutput {
	return o
}

func (o JsonReadSettingsResponseOutput) ToJsonReadSettingsResponseOutputWithContext(ctx context.Context) JsonReadSettingsResponseOutput {
	return o
}

// Compression settings.
func (o JsonReadSettingsResponseOutput) CompressionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonReadSettingsResponse) interface{} { return v.CompressionProperties }).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'JsonReadSettings'.
func (o JsonReadSettingsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JsonReadSettingsResponse) string { return v.Type }).(pulumi.StringOutput)
}

type JsonReadSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (JsonReadSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonReadSettingsResponse)(nil)).Elem()
}

func (o JsonReadSettingsResponsePtrOutput) ToJsonReadSettingsResponsePtrOutput() JsonReadSettingsResponsePtrOutput {
	return o
}

func (o JsonReadSettingsResponsePtrOutput) ToJsonReadSettingsResponsePtrOutputWithContext(ctx context.Context) JsonReadSettingsResponsePtrOutput {
	return o
}

func (o JsonReadSettingsResponsePtrOutput) Elem() JsonReadSettingsResponseOutput {
	return o.ApplyT(func(v *JsonReadSettingsResponse) JsonReadSettingsResponse {
		if v != nil {
			return *v
		}
		var ret JsonReadSettingsResponse
		return ret
	}).(JsonReadSettingsResponseOutput)
}

// Compression settings.
func (o JsonReadSettingsResponsePtrOutput) CompressionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v *JsonReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.CompressionProperties
	}).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'JsonReadSettings'.
func (o JsonReadSettingsResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JsonReadSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// A copy activity Json sink.
type JsonSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Json format settings.
	FormatSettings *JsonWriteSettings `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Json store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy sink type.
	// Expected value is 'JsonSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// JsonSinkInput is an input type that accepts JsonSinkArgs and JsonSinkOutput values.
// You can construct a concrete instance of `JsonSinkInput` via:
//
//	JsonSinkArgs{...}
type JsonSinkInput interface {
	pulumi.Input

	ToJsonSinkOutput() JsonSinkOutput
	ToJsonSinkOutputWithContext(context.Context) JsonSinkOutput
}

// A copy activity Json sink.
type JsonSinkArgs struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// Json format settings.
	FormatSettings JsonWriteSettingsPtrInput `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount pulumi.Input `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait pulumi.Input `pulumi:"sinkRetryWait"`
	// Json store settings.
	StoreSettings pulumi.Input `pulumi:"storeSettings"`
	// Copy sink type.
	// Expected value is 'JsonSink'.
	Type pulumi.StringInput `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize pulumi.Input `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout pulumi.Input `pulumi:"writeBatchTimeout"`
}

func (JsonSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonSink)(nil)).Elem()
}

func (i JsonSinkArgs) ToJsonSinkOutput() JsonSinkOutput {
	return i.ToJsonSinkOutputWithContext(context.Background())
}

func (i JsonSinkArgs) ToJsonSinkOutputWithContext(ctx context.Context) JsonSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonSinkOutput)
}

// A copy activity Json sink.
type JsonSinkOutput struct{ *pulumi.OutputState }

func (JsonSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonSink)(nil)).Elem()
}

func (o JsonSinkOutput) ToJsonSinkOutput() JsonSinkOutput {
	return o
}

func (o JsonSinkOutput) ToJsonSinkOutputWithContext(ctx context.Context) JsonSinkOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o JsonSinkOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonSink) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Json format settings.
func (o JsonSinkOutput) FormatSettings() JsonWriteSettingsPtrOutput {
	return o.ApplyT(func(v JsonSink) *JsonWriteSettings { return v.FormatSettings }).(JsonWriteSettingsPtrOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o JsonSinkOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonSink) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o JsonSinkOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonSink) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o JsonSinkOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonSink) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Json store settings.
func (o JsonSinkOutput) StoreSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonSink) interface{} { return v.StoreSettings }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'JsonSink'.
func (o JsonSinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JsonSink) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o JsonSinkOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonSink) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o JsonSinkOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonSink) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity Json sink.
type JsonSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Json format settings.
	FormatSettings *JsonWriteSettingsResponse `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Json store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy sink type.
	// Expected value is 'JsonSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Json sink.
type JsonSinkResponseOutput struct{ *pulumi.OutputState }

func (JsonSinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonSinkResponse)(nil)).Elem()
}

func (o JsonSinkResponseOutput) ToJsonSinkResponseOutput() JsonSinkResponseOutput {
	return o
}

func (o JsonSinkResponseOutput) ToJsonSinkResponseOutputWithContext(ctx context.Context) JsonSinkResponseOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o JsonSinkResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonSinkResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Json format settings.
func (o JsonSinkResponseOutput) FormatSettings() JsonWriteSettingsResponsePtrOutput {
	return o.ApplyT(func(v JsonSinkResponse) *JsonWriteSettingsResponse { return v.FormatSettings }).(JsonWriteSettingsResponsePtrOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o JsonSinkResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonSinkResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o JsonSinkResponseOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonSinkResponse) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o JsonSinkResponseOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonSinkResponse) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Json store settings.
func (o JsonSinkResponseOutput) StoreSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonSinkResponse) interface{} { return v.StoreSettings }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'JsonSink'.
func (o JsonSinkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JsonSinkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o JsonSinkResponseOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonSinkResponse) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o JsonSinkResponseOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonSinkResponse) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity Json source.
type JsonSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Json format settings.
	FormatSettings *JsonReadSettings `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Json store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'JsonSource'.
	Type string `pulumi:"type"`
}

// JsonSourceInput is an input type that accepts JsonSourceArgs and JsonSourceOutput values.
// You can construct a concrete instance of `JsonSourceInput` via:
//
//	JsonSourceArgs{...}
type JsonSourceInput interface {
	pulumi.Input

	ToJsonSourceOutput() JsonSourceOutput
	ToJsonSourceOutputWithContext(context.Context) JsonSourceOutput
}

// A copy activity Json source.
type JsonSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// Json format settings.
	FormatSettings JsonReadSettingsPtrInput `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Json store settings.
	StoreSettings pulumi.Input `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'JsonSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (JsonSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonSource)(nil)).Elem()
}

func (i JsonSourceArgs) ToJsonSourceOutput() JsonSourceOutput {
	return i.ToJsonSourceOutputWithContext(context.Background())
}

func (i JsonSourceArgs) ToJsonSourceOutputWithContext(ctx context.Context) JsonSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonSourceOutput)
}

// A copy activity Json source.
type JsonSourceOutput struct{ *pulumi.OutputState }

func (JsonSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonSource)(nil)).Elem()
}

func (o JsonSourceOutput) ToJsonSourceOutput() JsonSourceOutput {
	return o
}

func (o JsonSourceOutput) ToJsonSourceOutputWithContext(ctx context.Context) JsonSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o JsonSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o JsonSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Json format settings.
func (o JsonSourceOutput) FormatSettings() JsonReadSettingsPtrOutput {
	return o.ApplyT(func(v JsonSource) *JsonReadSettings { return v.FormatSettings }).(JsonReadSettingsPtrOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o JsonSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o JsonSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o JsonSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Json store settings.
func (o JsonSourceOutput) StoreSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonSource) interface{} { return v.StoreSettings }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'JsonSource'.
func (o JsonSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JsonSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Json source.
type JsonSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Json format settings.
	FormatSettings *JsonReadSettingsResponse `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Json store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'JsonSource'.
	Type string `pulumi:"type"`
}

// A copy activity Json source.
type JsonSourceResponseOutput struct{ *pulumi.OutputState }

func (JsonSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonSourceResponse)(nil)).Elem()
}

func (o JsonSourceResponseOutput) ToJsonSourceResponseOutput() JsonSourceResponseOutput {
	return o
}

func (o JsonSourceResponseOutput) ToJsonSourceResponseOutputWithContext(ctx context.Context) JsonSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o JsonSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o JsonSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Json format settings.
func (o JsonSourceResponseOutput) FormatSettings() JsonReadSettingsResponsePtrOutput {
	return o.ApplyT(func(v JsonSourceResponse) *JsonReadSettingsResponse { return v.FormatSettings }).(JsonReadSettingsResponsePtrOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o JsonSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o JsonSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o JsonSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Json store settings.
func (o JsonSourceResponseOutput) StoreSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonSourceResponse) interface{} { return v.StoreSettings }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'JsonSource'.
func (o JsonSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JsonSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Json write settings.
type JsonWriteSettings struct {
	// File pattern of JSON. This setting controls the way a collection of JSON objects will be treated. The default value is 'setOfObjects'. It is case-sensitive.
	FilePattern interface{} `pulumi:"filePattern"`
	// The write setting type.
	// Expected value is 'JsonWriteSettings'.
	Type string `pulumi:"type"`
}

// JsonWriteSettingsInput is an input type that accepts JsonWriteSettingsArgs and JsonWriteSettingsOutput values.
// You can construct a concrete instance of `JsonWriteSettingsInput` via:
//
//	JsonWriteSettingsArgs{...}
type JsonWriteSettingsInput interface {
	pulumi.Input

	ToJsonWriteSettingsOutput() JsonWriteSettingsOutput
	ToJsonWriteSettingsOutputWithContext(context.Context) JsonWriteSettingsOutput
}

// Json write settings.
type JsonWriteSettingsArgs struct {
	// File pattern of JSON. This setting controls the way a collection of JSON objects will be treated. The default value is 'setOfObjects'. It is case-sensitive.
	FilePattern pulumi.Input `pulumi:"filePattern"`
	// The write setting type.
	// Expected value is 'JsonWriteSettings'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (JsonWriteSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonWriteSettings)(nil)).Elem()
}

func (i JsonWriteSettingsArgs) ToJsonWriteSettingsOutput() JsonWriteSettingsOutput {
	return i.ToJsonWriteSettingsOutputWithContext(context.Background())
}

func (i JsonWriteSettingsArgs) ToJsonWriteSettingsOutputWithContext(ctx context.Context) JsonWriteSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonWriteSettingsOutput)
}

func (i JsonWriteSettingsArgs) ToJsonWriteSettingsPtrOutput() JsonWriteSettingsPtrOutput {
	return i.ToJsonWriteSettingsPtrOutputWithContext(context.Background())
}

func (i JsonWriteSettingsArgs) ToJsonWriteSettingsPtrOutputWithContext(ctx context.Context) JsonWriteSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonWriteSettingsOutput).ToJsonWriteSettingsPtrOutputWithContext(ctx)
}

// JsonWriteSettingsPtrInput is an input type that accepts JsonWriteSettingsArgs, JsonWriteSettingsPtr and JsonWriteSettingsPtrOutput values.
// You can construct a concrete instance of `JsonWriteSettingsPtrInput` via:
//
//	        JsonWriteSettingsArgs{...}
//
//	or:
//
//	        nil
type JsonWriteSettingsPtrInput interface {
	pulumi.Input

	ToJsonWriteSettingsPtrOutput() JsonWriteSettingsPtrOutput
	ToJsonWriteSettingsPtrOutputWithContext(context.Context) JsonWriteSettingsPtrOutput
}

type jsonWriteSettingsPtrType JsonWriteSettingsArgs

func JsonWriteSettingsPtr(v *JsonWriteSettingsArgs) JsonWriteSettingsPtrInput {
	return (*jsonWriteSettingsPtrType)(v)
}

func (*jsonWriteSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonWriteSettings)(nil)).Elem()
}

func (i *jsonWriteSettingsPtrType) ToJsonWriteSettingsPtrOutput() JsonWriteSettingsPtrOutput {
	return i.ToJsonWriteSettingsPtrOutputWithContext(context.Background())
}

func (i *jsonWriteSettingsPtrType) ToJsonWriteSettingsPtrOutputWithContext(ctx context.Context) JsonWriteSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonWriteSettingsPtrOutput)
}

// Json write settings.
type JsonWriteSettingsOutput struct{ *pulumi.OutputState }

func (JsonWriteSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonWriteSettings)(nil)).Elem()
}

func (o JsonWriteSettingsOutput) ToJsonWriteSettingsOutput() JsonWriteSettingsOutput {
	return o
}

func (o JsonWriteSettingsOutput) ToJsonWriteSettingsOutputWithContext(ctx context.Context) JsonWriteSettingsOutput {
	return o
}

func (o JsonWriteSettingsOutput) ToJsonWriteSettingsPtrOutput() JsonWriteSettingsPtrOutput {
	return o.ToJsonWriteSettingsPtrOutputWithContext(context.Background())
}

func (o JsonWriteSettingsOutput) ToJsonWriteSettingsPtrOutputWithContext(ctx context.Context) JsonWriteSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JsonWriteSettings) *JsonWriteSettings {
		return &v
	}).(JsonWriteSettingsPtrOutput)
}

// File pattern of JSON. This setting controls the way a collection of JSON objects will be treated. The default value is 'setOfObjects'. It is case-sensitive.
func (o JsonWriteSettingsOutput) FilePattern() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonWriteSettings) interface{} { return v.FilePattern }).(pulumi.AnyOutput)
}

// The write setting type.
// Expected value is 'JsonWriteSettings'.
func (o JsonWriteSettingsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JsonWriteSettings) string { return v.Type }).(pulumi.StringOutput)
}

type JsonWriteSettingsPtrOutput struct{ *pulumi.OutputState }

func (JsonWriteSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonWriteSettings)(nil)).Elem()
}

func (o JsonWriteSettingsPtrOutput) ToJsonWriteSettingsPtrOutput() JsonWriteSettingsPtrOutput {
	return o
}

func (o JsonWriteSettingsPtrOutput) ToJsonWriteSettingsPtrOutputWithContext(ctx context.Context) JsonWriteSettingsPtrOutput {
	return o
}

func (o JsonWriteSettingsPtrOutput) Elem() JsonWriteSettingsOutput {
	return o.ApplyT(func(v *JsonWriteSettings) JsonWriteSettings {
		if v != nil {
			return *v
		}
		var ret JsonWriteSettings
		return ret
	}).(JsonWriteSettingsOutput)
}

// File pattern of JSON. This setting controls the way a collection of JSON objects will be treated. The default value is 'setOfObjects'. It is case-sensitive.
func (o JsonWriteSettingsPtrOutput) FilePattern() pulumi.AnyOutput {
	return o.ApplyT(func(v *JsonWriteSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.FilePattern
	}).(pulumi.AnyOutput)
}

// The write setting type.
// Expected value is 'JsonWriteSettings'.
func (o JsonWriteSettingsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JsonWriteSettings) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Json write settings.
type JsonWriteSettingsResponse struct {
	// File pattern of JSON. This setting controls the way a collection of JSON objects will be treated. The default value is 'setOfObjects'. It is case-sensitive.
	FilePattern interface{} `pulumi:"filePattern"`
	// The write setting type.
	// Expected value is 'JsonWriteSettings'.
	Type string `pulumi:"type"`
}

// Json write settings.
type JsonWriteSettingsResponseOutput struct{ *pulumi.OutputState }

func (JsonWriteSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonWriteSettingsResponse)(nil)).Elem()
}

func (o JsonWriteSettingsResponseOutput) ToJsonWriteSettingsResponseOutput() JsonWriteSettingsResponseOutput {
	return o
}

func (o JsonWriteSettingsResponseOutput) ToJsonWriteSettingsResponseOutputWithContext(ctx context.Context) JsonWriteSettingsResponseOutput {
	return o
}

// File pattern of JSON. This setting controls the way a collection of JSON objects will be treated. The default value is 'setOfObjects'. It is case-sensitive.
func (o JsonWriteSettingsResponseOutput) FilePattern() pulumi.AnyOutput {
	return o.ApplyT(func(v JsonWriteSettingsResponse) interface{} { return v.FilePattern }).(pulumi.AnyOutput)
}

// The write setting type.
// Expected value is 'JsonWriteSettings'.
func (o JsonWriteSettingsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JsonWriteSettingsResponse) string { return v.Type }).(pulumi.StringOutput)
}

type JsonWriteSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (JsonWriteSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonWriteSettingsResponse)(nil)).Elem()
}

func (o JsonWriteSettingsResponsePtrOutput) ToJsonWriteSettingsResponsePtrOutput() JsonWriteSettingsResponsePtrOutput {
	return o
}

func (o JsonWriteSettingsResponsePtrOutput) ToJsonWriteSettingsResponsePtrOutputWithContext(ctx context.Context) JsonWriteSettingsResponsePtrOutput {
	return o
}

func (o JsonWriteSettingsResponsePtrOutput) Elem() JsonWriteSettingsResponseOutput {
	return o.ApplyT(func(v *JsonWriteSettingsResponse) JsonWriteSettingsResponse {
		if v != nil {
			return *v
		}
		var ret JsonWriteSettingsResponse
		return ret
	}).(JsonWriteSettingsResponseOutput)
}

// File pattern of JSON. This setting controls the way a collection of JSON objects will be treated. The default value is 'setOfObjects'. It is case-sensitive.
func (o JsonWriteSettingsResponsePtrOutput) FilePattern() pulumi.AnyOutput {
	return o.ApplyT(func(v *JsonWriteSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.FilePattern
	}).(pulumi.AnyOutput)
}

// The write setting type.
// Expected value is 'JsonWriteSettings'.
func (o JsonWriteSettingsResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JsonWriteSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Microsoft Fabric LakeHouse linked service.
type LakeHouseLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The ID of Microsoft Fabric LakeHouse artifact. Type: string (or Expression with resultType string).
	ArtifactId interface{} `pulumi:"artifactId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential interface{} `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType interface{} `pulumi:"servicePrincipalCredentialType"`
	// The ID of the application used to authenticate against Microsoft Fabric LakeHouse. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against Microsoft Fabric LakeHouse.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'LakeHouse'.
	Type string `pulumi:"type"`
	// The ID of Microsoft Fabric workspace. Type: string (or Expression with resultType string).
	WorkspaceId interface{} `pulumi:"workspaceId"`
}

// LakeHouseLinkedServiceInput is an input type that accepts LakeHouseLinkedServiceArgs and LakeHouseLinkedServiceOutput values.
// You can construct a concrete instance of `LakeHouseLinkedServiceInput` via:
//
//	LakeHouseLinkedServiceArgs{...}
type LakeHouseLinkedServiceInput interface {
	pulumi.Input

	ToLakeHouseLinkedServiceOutput() LakeHouseLinkedServiceOutput
	ToLakeHouseLinkedServiceOutputWithContext(context.Context) LakeHouseLinkedServiceOutput
}

// Microsoft Fabric LakeHouse linked service.
type LakeHouseLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The ID of Microsoft Fabric LakeHouse artifact. Type: string (or Expression with resultType string).
	ArtifactId pulumi.Input `pulumi:"artifactId"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential pulumi.Input `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType pulumi.Input `pulumi:"servicePrincipalCredentialType"`
	// The ID of the application used to authenticate against Microsoft Fabric LakeHouse. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against Microsoft Fabric LakeHouse.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant pulumi.Input `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'LakeHouse'.
	Type pulumi.StringInput `pulumi:"type"`
	// The ID of Microsoft Fabric workspace. Type: string (or Expression with resultType string).
	WorkspaceId pulumi.Input `pulumi:"workspaceId"`
}

func (LakeHouseLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LakeHouseLinkedService)(nil)).Elem()
}

func (i LakeHouseLinkedServiceArgs) ToLakeHouseLinkedServiceOutput() LakeHouseLinkedServiceOutput {
	return i.ToLakeHouseLinkedServiceOutputWithContext(context.Background())
}

func (i LakeHouseLinkedServiceArgs) ToLakeHouseLinkedServiceOutputWithContext(ctx context.Context) LakeHouseLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LakeHouseLinkedServiceOutput)
}

// Microsoft Fabric LakeHouse linked service.
type LakeHouseLinkedServiceOutput struct{ *pulumi.OutputState }

func (LakeHouseLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LakeHouseLinkedService)(nil)).Elem()
}

func (o LakeHouseLinkedServiceOutput) ToLakeHouseLinkedServiceOutput() LakeHouseLinkedServiceOutput {
	return o
}

func (o LakeHouseLinkedServiceOutput) ToLakeHouseLinkedServiceOutputWithContext(ctx context.Context) LakeHouseLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o LakeHouseLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v LakeHouseLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The ID of Microsoft Fabric LakeHouse artifact. Type: string (or Expression with resultType string).
func (o LakeHouseLinkedServiceOutput) ArtifactId() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseLinkedService) interface{} { return v.ArtifactId }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o LakeHouseLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v LakeHouseLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o LakeHouseLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LakeHouseLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o LakeHouseLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LakeHouseLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o LakeHouseLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v LakeHouseLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
func (o LakeHouseLinkedServiceOutput) ServicePrincipalCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseLinkedService) interface{} { return v.ServicePrincipalCredential }).(pulumi.AnyOutput)
}

// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
func (o LakeHouseLinkedServiceOutput) ServicePrincipalCredentialType() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseLinkedService) interface{} { return v.ServicePrincipalCredentialType }).(pulumi.AnyOutput)
}

// The ID of the application used to authenticate against Microsoft Fabric LakeHouse. Type: string (or Expression with resultType string).
func (o LakeHouseLinkedServiceOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseLinkedService) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The Key of the application used to authenticate against Microsoft Fabric LakeHouse.
func (o LakeHouseLinkedServiceOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseLinkedService) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o LakeHouseLinkedServiceOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseLinkedService) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'LakeHouse'.
func (o LakeHouseLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LakeHouseLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The ID of Microsoft Fabric workspace. Type: string (or Expression with resultType string).
func (o LakeHouseLinkedServiceOutput) WorkspaceId() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseLinkedService) interface{} { return v.WorkspaceId }).(pulumi.AnyOutput)
}

// Microsoft Fabric LakeHouse linked service.
type LakeHouseLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The ID of Microsoft Fabric LakeHouse artifact. Type: string (or Expression with resultType string).
	ArtifactId interface{} `pulumi:"artifactId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential interface{} `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType interface{} `pulumi:"servicePrincipalCredentialType"`
	// The ID of the application used to authenticate against Microsoft Fabric LakeHouse. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against Microsoft Fabric LakeHouse.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'LakeHouse'.
	Type string `pulumi:"type"`
	// The ID of Microsoft Fabric workspace. Type: string (or Expression with resultType string).
	WorkspaceId interface{} `pulumi:"workspaceId"`
}

// Microsoft Fabric LakeHouse linked service.
type LakeHouseLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (LakeHouseLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LakeHouseLinkedServiceResponse)(nil)).Elem()
}

func (o LakeHouseLinkedServiceResponseOutput) ToLakeHouseLinkedServiceResponseOutput() LakeHouseLinkedServiceResponseOutput {
	return o
}

func (o LakeHouseLinkedServiceResponseOutput) ToLakeHouseLinkedServiceResponseOutputWithContext(ctx context.Context) LakeHouseLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o LakeHouseLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v LakeHouseLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The ID of Microsoft Fabric LakeHouse artifact. Type: string (or Expression with resultType string).
func (o LakeHouseLinkedServiceResponseOutput) ArtifactId() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseLinkedServiceResponse) interface{} { return v.ArtifactId }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o LakeHouseLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v LakeHouseLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o LakeHouseLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LakeHouseLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o LakeHouseLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LakeHouseLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o LakeHouseLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v LakeHouseLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
func (o LakeHouseLinkedServiceResponseOutput) ServicePrincipalCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseLinkedServiceResponse) interface{} { return v.ServicePrincipalCredential }).(pulumi.AnyOutput)
}

// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
func (o LakeHouseLinkedServiceResponseOutput) ServicePrincipalCredentialType() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseLinkedServiceResponse) interface{} { return v.ServicePrincipalCredentialType }).(pulumi.AnyOutput)
}

// The ID of the application used to authenticate against Microsoft Fabric LakeHouse. Type: string (or Expression with resultType string).
func (o LakeHouseLinkedServiceResponseOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseLinkedServiceResponse) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The Key of the application used to authenticate against Microsoft Fabric LakeHouse.
func (o LakeHouseLinkedServiceResponseOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseLinkedServiceResponse) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o LakeHouseLinkedServiceResponseOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseLinkedServiceResponse) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'LakeHouse'.
func (o LakeHouseLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LakeHouseLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The ID of Microsoft Fabric workspace. Type: string (or Expression with resultType string).
func (o LakeHouseLinkedServiceResponseOutput) WorkspaceId() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseLinkedServiceResponse) interface{} { return v.WorkspaceId }).(pulumi.AnyOutput)
}

// The location of Microsoft Fabric LakeHouse Files dataset.
type LakeHouseLocation struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'LakeHouseLocation'.
	Type string `pulumi:"type"`
}

// LakeHouseLocationInput is an input type that accepts LakeHouseLocationArgs and LakeHouseLocationOutput values.
// You can construct a concrete instance of `LakeHouseLocationInput` via:
//
//	LakeHouseLocationArgs{...}
type LakeHouseLocationInput interface {
	pulumi.Input

	ToLakeHouseLocationOutput() LakeHouseLocationOutput
	ToLakeHouseLocationOutputWithContext(context.Context) LakeHouseLocationOutput
}

// The location of Microsoft Fabric LakeHouse Files dataset.
type LakeHouseLocationArgs struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'LakeHouseLocation'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (LakeHouseLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LakeHouseLocation)(nil)).Elem()
}

func (i LakeHouseLocationArgs) ToLakeHouseLocationOutput() LakeHouseLocationOutput {
	return i.ToLakeHouseLocationOutputWithContext(context.Background())
}

func (i LakeHouseLocationArgs) ToLakeHouseLocationOutputWithContext(ctx context.Context) LakeHouseLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LakeHouseLocationOutput)
}

// The location of Microsoft Fabric LakeHouse Files dataset.
type LakeHouseLocationOutput struct{ *pulumi.OutputState }

func (LakeHouseLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LakeHouseLocation)(nil)).Elem()
}

func (o LakeHouseLocationOutput) ToLakeHouseLocationOutput() LakeHouseLocationOutput {
	return o
}

func (o LakeHouseLocationOutput) ToLakeHouseLocationOutputWithContext(ctx context.Context) LakeHouseLocationOutput {
	return o
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o LakeHouseLocationOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseLocation) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o LakeHouseLocationOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseLocation) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
// Expected value is 'LakeHouseLocation'.
func (o LakeHouseLocationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LakeHouseLocation) string { return v.Type }).(pulumi.StringOutput)
}

// The location of Microsoft Fabric LakeHouse Files dataset.
type LakeHouseLocationResponse struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'LakeHouseLocation'.
	Type string `pulumi:"type"`
}

// The location of Microsoft Fabric LakeHouse Files dataset.
type LakeHouseLocationResponseOutput struct{ *pulumi.OutputState }

func (LakeHouseLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LakeHouseLocationResponse)(nil)).Elem()
}

func (o LakeHouseLocationResponseOutput) ToLakeHouseLocationResponseOutput() LakeHouseLocationResponseOutput {
	return o
}

func (o LakeHouseLocationResponseOutput) ToLakeHouseLocationResponseOutputWithContext(ctx context.Context) LakeHouseLocationResponseOutput {
	return o
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o LakeHouseLocationResponseOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseLocationResponse) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o LakeHouseLocationResponseOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseLocationResponse) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
// Expected value is 'LakeHouseLocation'.
func (o LakeHouseLocationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LakeHouseLocationResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Microsoft Fabric LakeHouse Files read settings.
type LakeHouseReadSettings struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery interface{} `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'LakeHouseReadSettings'.
	Type string `pulumi:"type"`
	// Microsoft Fabric LakeHouse Files wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Microsoft Fabric LakeHouse Files wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// LakeHouseReadSettingsInput is an input type that accepts LakeHouseReadSettingsArgs and LakeHouseReadSettingsOutput values.
// You can construct a concrete instance of `LakeHouseReadSettingsInput` via:
//
//	LakeHouseReadSettingsArgs{...}
type LakeHouseReadSettingsInput interface {
	pulumi.Input

	ToLakeHouseReadSettingsOutput() LakeHouseReadSettingsOutput
	ToLakeHouseReadSettingsOutputWithContext(context.Context) LakeHouseReadSettingsOutput
}

// Microsoft Fabric LakeHouse Files read settings.
type LakeHouseReadSettingsArgs struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion pulumi.Input `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery pulumi.Input `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath pulumi.Input `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd pulumi.Input `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart pulumi.Input `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath pulumi.Input `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive pulumi.Input `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'LakeHouseReadSettings'.
	Type pulumi.StringInput `pulumi:"type"`
	// Microsoft Fabric LakeHouse Files wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName pulumi.Input `pulumi:"wildcardFileName"`
	// Microsoft Fabric LakeHouse Files wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath pulumi.Input `pulumi:"wildcardFolderPath"`
}

func (LakeHouseReadSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LakeHouseReadSettings)(nil)).Elem()
}

func (i LakeHouseReadSettingsArgs) ToLakeHouseReadSettingsOutput() LakeHouseReadSettingsOutput {
	return i.ToLakeHouseReadSettingsOutputWithContext(context.Background())
}

func (i LakeHouseReadSettingsArgs) ToLakeHouseReadSettingsOutputWithContext(ctx context.Context) LakeHouseReadSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LakeHouseReadSettingsOutput)
}

func (i LakeHouseReadSettingsArgs) ToLakeHouseReadSettingsPtrOutput() LakeHouseReadSettingsPtrOutput {
	return i.ToLakeHouseReadSettingsPtrOutputWithContext(context.Background())
}

func (i LakeHouseReadSettingsArgs) ToLakeHouseReadSettingsPtrOutputWithContext(ctx context.Context) LakeHouseReadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LakeHouseReadSettingsOutput).ToLakeHouseReadSettingsPtrOutputWithContext(ctx)
}

// LakeHouseReadSettingsPtrInput is an input type that accepts LakeHouseReadSettingsArgs, LakeHouseReadSettingsPtr and LakeHouseReadSettingsPtrOutput values.
// You can construct a concrete instance of `LakeHouseReadSettingsPtrInput` via:
//
//	        LakeHouseReadSettingsArgs{...}
//
//	or:
//
//	        nil
type LakeHouseReadSettingsPtrInput interface {
	pulumi.Input

	ToLakeHouseReadSettingsPtrOutput() LakeHouseReadSettingsPtrOutput
	ToLakeHouseReadSettingsPtrOutputWithContext(context.Context) LakeHouseReadSettingsPtrOutput
}

type lakeHouseReadSettingsPtrType LakeHouseReadSettingsArgs

func LakeHouseReadSettingsPtr(v *LakeHouseReadSettingsArgs) LakeHouseReadSettingsPtrInput {
	return (*lakeHouseReadSettingsPtrType)(v)
}

func (*lakeHouseReadSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LakeHouseReadSettings)(nil)).Elem()
}

func (i *lakeHouseReadSettingsPtrType) ToLakeHouseReadSettingsPtrOutput() LakeHouseReadSettingsPtrOutput {
	return i.ToLakeHouseReadSettingsPtrOutputWithContext(context.Background())
}

func (i *lakeHouseReadSettingsPtrType) ToLakeHouseReadSettingsPtrOutputWithContext(ctx context.Context) LakeHouseReadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LakeHouseReadSettingsPtrOutput)
}

// Microsoft Fabric LakeHouse Files read settings.
type LakeHouseReadSettingsOutput struct{ *pulumi.OutputState }

func (LakeHouseReadSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LakeHouseReadSettings)(nil)).Elem()
}

func (o LakeHouseReadSettingsOutput) ToLakeHouseReadSettingsOutput() LakeHouseReadSettingsOutput {
	return o
}

func (o LakeHouseReadSettingsOutput) ToLakeHouseReadSettingsOutputWithContext(ctx context.Context) LakeHouseReadSettingsOutput {
	return o
}

func (o LakeHouseReadSettingsOutput) ToLakeHouseReadSettingsPtrOutput() LakeHouseReadSettingsPtrOutput {
	return o.ToLakeHouseReadSettingsPtrOutputWithContext(context.Background())
}

func (o LakeHouseReadSettingsOutput) ToLakeHouseReadSettingsPtrOutputWithContext(ctx context.Context) LakeHouseReadSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LakeHouseReadSettings) *LakeHouseReadSettings {
		return &v
	}).(LakeHouseReadSettingsPtrOutput)
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o LakeHouseReadSettingsOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseReadSettings) interface{} { return v.DeleteFilesAfterCompletion }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o LakeHouseReadSettingsOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseReadSettings) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o LakeHouseReadSettingsOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseReadSettings) interface{} { return v.EnablePartitionDiscovery }).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o LakeHouseReadSettingsOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseReadSettings) interface{} { return v.FileListPath }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o LakeHouseReadSettingsOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseReadSettings) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o LakeHouseReadSettingsOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseReadSettings) interface{} { return v.ModifiedDatetimeEnd }).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o LakeHouseReadSettingsOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseReadSettings) interface{} { return v.ModifiedDatetimeStart }).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o LakeHouseReadSettingsOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseReadSettings) interface{} { return v.PartitionRootPath }).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o LakeHouseReadSettingsOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseReadSettings) interface{} { return v.Recursive }).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'LakeHouseReadSettings'.
func (o LakeHouseReadSettingsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LakeHouseReadSettings) string { return v.Type }).(pulumi.StringOutput)
}

// Microsoft Fabric LakeHouse Files wildcardFileName. Type: string (or Expression with resultType string).
func (o LakeHouseReadSettingsOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseReadSettings) interface{} { return v.WildcardFileName }).(pulumi.AnyOutput)
}

// Microsoft Fabric LakeHouse Files wildcardFolderPath. Type: string (or Expression with resultType string).
func (o LakeHouseReadSettingsOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseReadSettings) interface{} { return v.WildcardFolderPath }).(pulumi.AnyOutput)
}

type LakeHouseReadSettingsPtrOutput struct{ *pulumi.OutputState }

func (LakeHouseReadSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LakeHouseReadSettings)(nil)).Elem()
}

func (o LakeHouseReadSettingsPtrOutput) ToLakeHouseReadSettingsPtrOutput() LakeHouseReadSettingsPtrOutput {
	return o
}

func (o LakeHouseReadSettingsPtrOutput) ToLakeHouseReadSettingsPtrOutputWithContext(ctx context.Context) LakeHouseReadSettingsPtrOutput {
	return o
}

func (o LakeHouseReadSettingsPtrOutput) Elem() LakeHouseReadSettingsOutput {
	return o.ApplyT(func(v *LakeHouseReadSettings) LakeHouseReadSettings {
		if v != nil {
			return *v
		}
		var ret LakeHouseReadSettings
		return ret
	}).(LakeHouseReadSettingsOutput)
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o LakeHouseReadSettingsPtrOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v *LakeHouseReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.DeleteFilesAfterCompletion
	}).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o LakeHouseReadSettingsPtrOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v *LakeHouseReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableMetricsCollection
	}).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o LakeHouseReadSettingsPtrOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v *LakeHouseReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.EnablePartitionDiscovery
	}).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o LakeHouseReadSettingsPtrOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *LakeHouseReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.FileListPath
	}).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o LakeHouseReadSettingsPtrOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v *LakeHouseReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentConnections
	}).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o LakeHouseReadSettingsPtrOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v *LakeHouseReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeEnd
	}).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o LakeHouseReadSettingsPtrOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v *LakeHouseReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeStart
	}).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o LakeHouseReadSettingsPtrOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *LakeHouseReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionRootPath
	}).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o LakeHouseReadSettingsPtrOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v *LakeHouseReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.Recursive
	}).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'LakeHouseReadSettings'.
func (o LakeHouseReadSettingsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LakeHouseReadSettings) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Microsoft Fabric LakeHouse Files wildcardFileName. Type: string (or Expression with resultType string).
func (o LakeHouseReadSettingsPtrOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v *LakeHouseReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFileName
	}).(pulumi.AnyOutput)
}

// Microsoft Fabric LakeHouse Files wildcardFolderPath. Type: string (or Expression with resultType string).
func (o LakeHouseReadSettingsPtrOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *LakeHouseReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFolderPath
	}).(pulumi.AnyOutput)
}

// Microsoft Fabric LakeHouse Files read settings.
type LakeHouseReadSettingsResponse struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery interface{} `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'LakeHouseReadSettings'.
	Type string `pulumi:"type"`
	// Microsoft Fabric LakeHouse Files wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Microsoft Fabric LakeHouse Files wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// Microsoft Fabric LakeHouse Files read settings.
type LakeHouseReadSettingsResponseOutput struct{ *pulumi.OutputState }

func (LakeHouseReadSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LakeHouseReadSettingsResponse)(nil)).Elem()
}

func (o LakeHouseReadSettingsResponseOutput) ToLakeHouseReadSettingsResponseOutput() LakeHouseReadSettingsResponseOutput {
	return o
}

func (o LakeHouseReadSettingsResponseOutput) ToLakeHouseReadSettingsResponseOutputWithContext(ctx context.Context) LakeHouseReadSettingsResponseOutput {
	return o
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o LakeHouseReadSettingsResponseOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseReadSettingsResponse) interface{} { return v.DeleteFilesAfterCompletion }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o LakeHouseReadSettingsResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseReadSettingsResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o LakeHouseReadSettingsResponseOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseReadSettingsResponse) interface{} { return v.EnablePartitionDiscovery }).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o LakeHouseReadSettingsResponseOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseReadSettingsResponse) interface{} { return v.FileListPath }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o LakeHouseReadSettingsResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseReadSettingsResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o LakeHouseReadSettingsResponseOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseReadSettingsResponse) interface{} { return v.ModifiedDatetimeEnd }).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o LakeHouseReadSettingsResponseOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseReadSettingsResponse) interface{} { return v.ModifiedDatetimeStart }).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o LakeHouseReadSettingsResponseOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseReadSettingsResponse) interface{} { return v.PartitionRootPath }).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o LakeHouseReadSettingsResponseOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseReadSettingsResponse) interface{} { return v.Recursive }).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'LakeHouseReadSettings'.
func (o LakeHouseReadSettingsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LakeHouseReadSettingsResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Microsoft Fabric LakeHouse Files wildcardFileName. Type: string (or Expression with resultType string).
func (o LakeHouseReadSettingsResponseOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseReadSettingsResponse) interface{} { return v.WildcardFileName }).(pulumi.AnyOutput)
}

// Microsoft Fabric LakeHouse Files wildcardFolderPath. Type: string (or Expression with resultType string).
func (o LakeHouseReadSettingsResponseOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseReadSettingsResponse) interface{} { return v.WildcardFolderPath }).(pulumi.AnyOutput)
}

type LakeHouseReadSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (LakeHouseReadSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LakeHouseReadSettingsResponse)(nil)).Elem()
}

func (o LakeHouseReadSettingsResponsePtrOutput) ToLakeHouseReadSettingsResponsePtrOutput() LakeHouseReadSettingsResponsePtrOutput {
	return o
}

func (o LakeHouseReadSettingsResponsePtrOutput) ToLakeHouseReadSettingsResponsePtrOutputWithContext(ctx context.Context) LakeHouseReadSettingsResponsePtrOutput {
	return o
}

func (o LakeHouseReadSettingsResponsePtrOutput) Elem() LakeHouseReadSettingsResponseOutput {
	return o.ApplyT(func(v *LakeHouseReadSettingsResponse) LakeHouseReadSettingsResponse {
		if v != nil {
			return *v
		}
		var ret LakeHouseReadSettingsResponse
		return ret
	}).(LakeHouseReadSettingsResponseOutput)
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o LakeHouseReadSettingsResponsePtrOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v *LakeHouseReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.DeleteFilesAfterCompletion
	}).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o LakeHouseReadSettingsResponsePtrOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v *LakeHouseReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableMetricsCollection
	}).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o LakeHouseReadSettingsResponsePtrOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v *LakeHouseReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.EnablePartitionDiscovery
	}).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o LakeHouseReadSettingsResponsePtrOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *LakeHouseReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.FileListPath
	}).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o LakeHouseReadSettingsResponsePtrOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v *LakeHouseReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentConnections
	}).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o LakeHouseReadSettingsResponsePtrOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v *LakeHouseReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeEnd
	}).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o LakeHouseReadSettingsResponsePtrOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v *LakeHouseReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeStart
	}).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o LakeHouseReadSettingsResponsePtrOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *LakeHouseReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionRootPath
	}).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o LakeHouseReadSettingsResponsePtrOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v *LakeHouseReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Recursive
	}).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'LakeHouseReadSettings'.
func (o LakeHouseReadSettingsResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LakeHouseReadSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Microsoft Fabric LakeHouse Files wildcardFileName. Type: string (or Expression with resultType string).
func (o LakeHouseReadSettingsResponsePtrOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v *LakeHouseReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFileName
	}).(pulumi.AnyOutput)
}

// Microsoft Fabric LakeHouse Files wildcardFolderPath. Type: string (or Expression with resultType string).
func (o LakeHouseReadSettingsResponsePtrOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *LakeHouseReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFolderPath
	}).(pulumi.AnyOutput)
}

// Microsoft Fabric LakeHouse Table.
type LakeHouseTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The name of Microsoft Fabric LakeHouse Table. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'LakeHouseTable'.
	Type string `pulumi:"type"`
}

// LakeHouseTableDatasetInput is an input type that accepts LakeHouseTableDatasetArgs and LakeHouseTableDatasetOutput values.
// You can construct a concrete instance of `LakeHouseTableDatasetInput` via:
//
//	LakeHouseTableDatasetArgs{...}
type LakeHouseTableDatasetInput interface {
	pulumi.Input

	ToLakeHouseTableDatasetOutput() LakeHouseTableDatasetOutput
	ToLakeHouseTableDatasetOutputWithContext(context.Context) LakeHouseTableDatasetOutput
}

// Microsoft Fabric LakeHouse Table.
type LakeHouseTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The name of Microsoft Fabric LakeHouse Table. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'LakeHouseTable'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (LakeHouseTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LakeHouseTableDataset)(nil)).Elem()
}

func (i LakeHouseTableDatasetArgs) ToLakeHouseTableDatasetOutput() LakeHouseTableDatasetOutput {
	return i.ToLakeHouseTableDatasetOutputWithContext(context.Background())
}

func (i LakeHouseTableDatasetArgs) ToLakeHouseTableDatasetOutputWithContext(ctx context.Context) LakeHouseTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LakeHouseTableDatasetOutput)
}

// Microsoft Fabric LakeHouse Table.
type LakeHouseTableDatasetOutput struct{ *pulumi.OutputState }

func (LakeHouseTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LakeHouseTableDataset)(nil)).Elem()
}

func (o LakeHouseTableDatasetOutput) ToLakeHouseTableDatasetOutput() LakeHouseTableDatasetOutput {
	return o
}

func (o LakeHouseTableDatasetOutput) ToLakeHouseTableDatasetOutputWithContext(ctx context.Context) LakeHouseTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o LakeHouseTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v LakeHouseTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o LakeHouseTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LakeHouseTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o LakeHouseTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v LakeHouseTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o LakeHouseTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v LakeHouseTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o LakeHouseTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v LakeHouseTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o LakeHouseTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o LakeHouseTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The name of Microsoft Fabric LakeHouse Table. Type: string (or Expression with resultType string).
func (o LakeHouseTableDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseTableDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'LakeHouseTable'.
func (o LakeHouseTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LakeHouseTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Microsoft Fabric LakeHouse Table.
type LakeHouseTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The name of Microsoft Fabric LakeHouse Table. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'LakeHouseTable'.
	Type string `pulumi:"type"`
}

// Microsoft Fabric LakeHouse Table.
type LakeHouseTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (LakeHouseTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LakeHouseTableDatasetResponse)(nil)).Elem()
}

func (o LakeHouseTableDatasetResponseOutput) ToLakeHouseTableDatasetResponseOutput() LakeHouseTableDatasetResponseOutput {
	return o
}

func (o LakeHouseTableDatasetResponseOutput) ToLakeHouseTableDatasetResponseOutputWithContext(ctx context.Context) LakeHouseTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o LakeHouseTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v LakeHouseTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o LakeHouseTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LakeHouseTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o LakeHouseTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v LakeHouseTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o LakeHouseTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v LakeHouseTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o LakeHouseTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v LakeHouseTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o LakeHouseTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o LakeHouseTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The name of Microsoft Fabric LakeHouse Table. Type: string (or Expression with resultType string).
func (o LakeHouseTableDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseTableDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'LakeHouseTable'.
func (o LakeHouseTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LakeHouseTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity for Microsoft Fabric LakeHouse Table sink.
type LakeHouseTableSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specify the partition column names from sink columns. Type: array of objects (or Expression with resultType array of objects).
	PartitionNameList interface{} `pulumi:"partitionNameList"`
	// Create partitions in folder structure based on one or multiple columns. Each distinct column value (pair) will be a new partition. Possible values include: "None", "PartitionByKey".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// The type of table action for LakeHouse Table sink. Possible values include: "None", "Append", "Overwrite".
	TableActionOption interface{} `pulumi:"tableActionOption"`
	// Copy sink type.
	// Expected value is 'LakeHouseTableSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// LakeHouseTableSinkInput is an input type that accepts LakeHouseTableSinkArgs and LakeHouseTableSinkOutput values.
// You can construct a concrete instance of `LakeHouseTableSinkInput` via:
//
//	LakeHouseTableSinkArgs{...}
type LakeHouseTableSinkInput interface {
	pulumi.Input

	ToLakeHouseTableSinkOutput() LakeHouseTableSinkOutput
	ToLakeHouseTableSinkOutputWithContext(context.Context) LakeHouseTableSinkOutput
}

// A copy activity for Microsoft Fabric LakeHouse Table sink.
type LakeHouseTableSinkArgs struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Specify the partition column names from sink columns. Type: array of objects (or Expression with resultType array of objects).
	PartitionNameList pulumi.Input `pulumi:"partitionNameList"`
	// Create partitions in folder structure based on one or multiple columns. Each distinct column value (pair) will be a new partition. Possible values include: "None", "PartitionByKey".
	PartitionOption pulumi.Input `pulumi:"partitionOption"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount pulumi.Input `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait pulumi.Input `pulumi:"sinkRetryWait"`
	// The type of table action for LakeHouse Table sink. Possible values include: "None", "Append", "Overwrite".
	TableActionOption pulumi.Input `pulumi:"tableActionOption"`
	// Copy sink type.
	// Expected value is 'LakeHouseTableSink'.
	Type pulumi.StringInput `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize pulumi.Input `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout pulumi.Input `pulumi:"writeBatchTimeout"`
}

func (LakeHouseTableSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LakeHouseTableSink)(nil)).Elem()
}

func (i LakeHouseTableSinkArgs) ToLakeHouseTableSinkOutput() LakeHouseTableSinkOutput {
	return i.ToLakeHouseTableSinkOutputWithContext(context.Background())
}

func (i LakeHouseTableSinkArgs) ToLakeHouseTableSinkOutputWithContext(ctx context.Context) LakeHouseTableSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LakeHouseTableSinkOutput)
}

// A copy activity for Microsoft Fabric LakeHouse Table sink.
type LakeHouseTableSinkOutput struct{ *pulumi.OutputState }

func (LakeHouseTableSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LakeHouseTableSink)(nil)).Elem()
}

func (o LakeHouseTableSinkOutput) ToLakeHouseTableSinkOutput() LakeHouseTableSinkOutput {
	return o
}

func (o LakeHouseTableSinkOutput) ToLakeHouseTableSinkOutputWithContext(ctx context.Context) LakeHouseTableSinkOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o LakeHouseTableSinkOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseTableSink) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o LakeHouseTableSinkOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseTableSink) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Specify the partition column names from sink columns. Type: array of objects (or Expression with resultType array of objects).
func (o LakeHouseTableSinkOutput) PartitionNameList() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseTableSink) interface{} { return v.PartitionNameList }).(pulumi.AnyOutput)
}

// Create partitions in folder structure based on one or multiple columns. Each distinct column value (pair) will be a new partition. Possible values include: "None", "PartitionByKey".
func (o LakeHouseTableSinkOutput) PartitionOption() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseTableSink) interface{} { return v.PartitionOption }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o LakeHouseTableSinkOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseTableSink) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o LakeHouseTableSinkOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseTableSink) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// The type of table action for LakeHouse Table sink. Possible values include: "None", "Append", "Overwrite".
func (o LakeHouseTableSinkOutput) TableActionOption() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseTableSink) interface{} { return v.TableActionOption }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'LakeHouseTableSink'.
func (o LakeHouseTableSinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LakeHouseTableSink) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o LakeHouseTableSinkOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseTableSink) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o LakeHouseTableSinkOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseTableSink) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity for Microsoft Fabric LakeHouse Table sink.
type LakeHouseTableSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specify the partition column names from sink columns. Type: array of objects (or Expression with resultType array of objects).
	PartitionNameList interface{} `pulumi:"partitionNameList"`
	// Create partitions in folder structure based on one or multiple columns. Each distinct column value (pair) will be a new partition. Possible values include: "None", "PartitionByKey".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// The type of table action for LakeHouse Table sink. Possible values include: "None", "Append", "Overwrite".
	TableActionOption interface{} `pulumi:"tableActionOption"`
	// Copy sink type.
	// Expected value is 'LakeHouseTableSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity for Microsoft Fabric LakeHouse Table sink.
type LakeHouseTableSinkResponseOutput struct{ *pulumi.OutputState }

func (LakeHouseTableSinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LakeHouseTableSinkResponse)(nil)).Elem()
}

func (o LakeHouseTableSinkResponseOutput) ToLakeHouseTableSinkResponseOutput() LakeHouseTableSinkResponseOutput {
	return o
}

func (o LakeHouseTableSinkResponseOutput) ToLakeHouseTableSinkResponseOutputWithContext(ctx context.Context) LakeHouseTableSinkResponseOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o LakeHouseTableSinkResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseTableSinkResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o LakeHouseTableSinkResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseTableSinkResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Specify the partition column names from sink columns. Type: array of objects (or Expression with resultType array of objects).
func (o LakeHouseTableSinkResponseOutput) PartitionNameList() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseTableSinkResponse) interface{} { return v.PartitionNameList }).(pulumi.AnyOutput)
}

// Create partitions in folder structure based on one or multiple columns. Each distinct column value (pair) will be a new partition. Possible values include: "None", "PartitionByKey".
func (o LakeHouseTableSinkResponseOutput) PartitionOption() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseTableSinkResponse) interface{} { return v.PartitionOption }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o LakeHouseTableSinkResponseOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseTableSinkResponse) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o LakeHouseTableSinkResponseOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseTableSinkResponse) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// The type of table action for LakeHouse Table sink. Possible values include: "None", "Append", "Overwrite".
func (o LakeHouseTableSinkResponseOutput) TableActionOption() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseTableSinkResponse) interface{} { return v.TableActionOption }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'LakeHouseTableSink'.
func (o LakeHouseTableSinkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LakeHouseTableSinkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o LakeHouseTableSinkResponseOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseTableSinkResponse) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o LakeHouseTableSinkResponseOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseTableSinkResponse) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity source for Microsoft Fabric LakeHouse Table.
type LakeHouseTableSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Query an older snapshot by timestamp. Type: string (or Expression with resultType string).
	TimestampAsOf interface{} `pulumi:"timestampAsOf"`
	// Copy source type.
	// Expected value is 'LakeHouseTableSource'.
	Type string `pulumi:"type"`
	// Query an older snapshot by version. Type: integer (or Expression with resultType integer).
	VersionAsOf interface{} `pulumi:"versionAsOf"`
}

// LakeHouseTableSourceInput is an input type that accepts LakeHouseTableSourceArgs and LakeHouseTableSourceOutput values.
// You can construct a concrete instance of `LakeHouseTableSourceInput` via:
//
//	LakeHouseTableSourceArgs{...}
type LakeHouseTableSourceInput interface {
	pulumi.Input

	ToLakeHouseTableSourceOutput() LakeHouseTableSourceOutput
	ToLakeHouseTableSourceOutputWithContext(context.Context) LakeHouseTableSourceOutput
}

// A copy activity source for Microsoft Fabric LakeHouse Table.
type LakeHouseTableSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Query an older snapshot by timestamp. Type: string (or Expression with resultType string).
	TimestampAsOf pulumi.Input `pulumi:"timestampAsOf"`
	// Copy source type.
	// Expected value is 'LakeHouseTableSource'.
	Type pulumi.StringInput `pulumi:"type"`
	// Query an older snapshot by version. Type: integer (or Expression with resultType integer).
	VersionAsOf pulumi.Input `pulumi:"versionAsOf"`
}

func (LakeHouseTableSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LakeHouseTableSource)(nil)).Elem()
}

func (i LakeHouseTableSourceArgs) ToLakeHouseTableSourceOutput() LakeHouseTableSourceOutput {
	return i.ToLakeHouseTableSourceOutputWithContext(context.Background())
}

func (i LakeHouseTableSourceArgs) ToLakeHouseTableSourceOutputWithContext(ctx context.Context) LakeHouseTableSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LakeHouseTableSourceOutput)
}

// A copy activity source for Microsoft Fabric LakeHouse Table.
type LakeHouseTableSourceOutput struct{ *pulumi.OutputState }

func (LakeHouseTableSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LakeHouseTableSource)(nil)).Elem()
}

func (o LakeHouseTableSourceOutput) ToLakeHouseTableSourceOutput() LakeHouseTableSourceOutput {
	return o
}

func (o LakeHouseTableSourceOutput) ToLakeHouseTableSourceOutputWithContext(ctx context.Context) LakeHouseTableSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o LakeHouseTableSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseTableSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o LakeHouseTableSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseTableSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o LakeHouseTableSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseTableSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o LakeHouseTableSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseTableSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o LakeHouseTableSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseTableSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Query an older snapshot by timestamp. Type: string (or Expression with resultType string).
func (o LakeHouseTableSourceOutput) TimestampAsOf() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseTableSource) interface{} { return v.TimestampAsOf }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'LakeHouseTableSource'.
func (o LakeHouseTableSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LakeHouseTableSource) string { return v.Type }).(pulumi.StringOutput)
}

// Query an older snapshot by version. Type: integer (or Expression with resultType integer).
func (o LakeHouseTableSourceOutput) VersionAsOf() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseTableSource) interface{} { return v.VersionAsOf }).(pulumi.AnyOutput)
}

// A copy activity source for Microsoft Fabric LakeHouse Table.
type LakeHouseTableSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Query an older snapshot by timestamp. Type: string (or Expression with resultType string).
	TimestampAsOf interface{} `pulumi:"timestampAsOf"`
	// Copy source type.
	// Expected value is 'LakeHouseTableSource'.
	Type string `pulumi:"type"`
	// Query an older snapshot by version. Type: integer (or Expression with resultType integer).
	VersionAsOf interface{} `pulumi:"versionAsOf"`
}

// A copy activity source for Microsoft Fabric LakeHouse Table.
type LakeHouseTableSourceResponseOutput struct{ *pulumi.OutputState }

func (LakeHouseTableSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LakeHouseTableSourceResponse)(nil)).Elem()
}

func (o LakeHouseTableSourceResponseOutput) ToLakeHouseTableSourceResponseOutput() LakeHouseTableSourceResponseOutput {
	return o
}

func (o LakeHouseTableSourceResponseOutput) ToLakeHouseTableSourceResponseOutputWithContext(ctx context.Context) LakeHouseTableSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o LakeHouseTableSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseTableSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o LakeHouseTableSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseTableSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o LakeHouseTableSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseTableSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o LakeHouseTableSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseTableSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o LakeHouseTableSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseTableSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Query an older snapshot by timestamp. Type: string (or Expression with resultType string).
func (o LakeHouseTableSourceResponseOutput) TimestampAsOf() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseTableSourceResponse) interface{} { return v.TimestampAsOf }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'LakeHouseTableSource'.
func (o LakeHouseTableSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LakeHouseTableSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Query an older snapshot by version. Type: integer (or Expression with resultType integer).
func (o LakeHouseTableSourceResponseOutput) VersionAsOf() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseTableSourceResponse) interface{} { return v.VersionAsOf }).(pulumi.AnyOutput)
}

// Microsoft Fabric LakeHouse Files write settings.
type LakeHouseWriteSettings struct {
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
	Metadata []MetadataItem `pulumi:"metadata"`
	// The write setting type.
	// Expected value is 'LakeHouseWriteSettings'.
	Type string `pulumi:"type"`
}

// LakeHouseWriteSettingsInput is an input type that accepts LakeHouseWriteSettingsArgs and LakeHouseWriteSettingsOutput values.
// You can construct a concrete instance of `LakeHouseWriteSettingsInput` via:
//
//	LakeHouseWriteSettingsArgs{...}
type LakeHouseWriteSettingsInput interface {
	pulumi.Input

	ToLakeHouseWriteSettingsOutput() LakeHouseWriteSettingsOutput
	ToLakeHouseWriteSettingsOutputWithContext(context.Context) LakeHouseWriteSettingsOutput
}

// Microsoft Fabric LakeHouse Files write settings.
type LakeHouseWriteSettingsArgs struct {
	// The type of copy behavior for copy sink.
	CopyBehavior pulumi.Input `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
	Metadata MetadataItemArrayInput `pulumi:"metadata"`
	// The write setting type.
	// Expected value is 'LakeHouseWriteSettings'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (LakeHouseWriteSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LakeHouseWriteSettings)(nil)).Elem()
}

func (i LakeHouseWriteSettingsArgs) ToLakeHouseWriteSettingsOutput() LakeHouseWriteSettingsOutput {
	return i.ToLakeHouseWriteSettingsOutputWithContext(context.Background())
}

func (i LakeHouseWriteSettingsArgs) ToLakeHouseWriteSettingsOutputWithContext(ctx context.Context) LakeHouseWriteSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LakeHouseWriteSettingsOutput)
}

func (i LakeHouseWriteSettingsArgs) ToLakeHouseWriteSettingsPtrOutput() LakeHouseWriteSettingsPtrOutput {
	return i.ToLakeHouseWriteSettingsPtrOutputWithContext(context.Background())
}

func (i LakeHouseWriteSettingsArgs) ToLakeHouseWriteSettingsPtrOutputWithContext(ctx context.Context) LakeHouseWriteSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LakeHouseWriteSettingsOutput).ToLakeHouseWriteSettingsPtrOutputWithContext(ctx)
}

// LakeHouseWriteSettingsPtrInput is an input type that accepts LakeHouseWriteSettingsArgs, LakeHouseWriteSettingsPtr and LakeHouseWriteSettingsPtrOutput values.
// You can construct a concrete instance of `LakeHouseWriteSettingsPtrInput` via:
//
//	        LakeHouseWriteSettingsArgs{...}
//
//	or:
//
//	        nil
type LakeHouseWriteSettingsPtrInput interface {
	pulumi.Input

	ToLakeHouseWriteSettingsPtrOutput() LakeHouseWriteSettingsPtrOutput
	ToLakeHouseWriteSettingsPtrOutputWithContext(context.Context) LakeHouseWriteSettingsPtrOutput
}

type lakeHouseWriteSettingsPtrType LakeHouseWriteSettingsArgs

func LakeHouseWriteSettingsPtr(v *LakeHouseWriteSettingsArgs) LakeHouseWriteSettingsPtrInput {
	return (*lakeHouseWriteSettingsPtrType)(v)
}

func (*lakeHouseWriteSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LakeHouseWriteSettings)(nil)).Elem()
}

func (i *lakeHouseWriteSettingsPtrType) ToLakeHouseWriteSettingsPtrOutput() LakeHouseWriteSettingsPtrOutput {
	return i.ToLakeHouseWriteSettingsPtrOutputWithContext(context.Background())
}

func (i *lakeHouseWriteSettingsPtrType) ToLakeHouseWriteSettingsPtrOutputWithContext(ctx context.Context) LakeHouseWriteSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LakeHouseWriteSettingsPtrOutput)
}

// Microsoft Fabric LakeHouse Files write settings.
type LakeHouseWriteSettingsOutput struct{ *pulumi.OutputState }

func (LakeHouseWriteSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LakeHouseWriteSettings)(nil)).Elem()
}

func (o LakeHouseWriteSettingsOutput) ToLakeHouseWriteSettingsOutput() LakeHouseWriteSettingsOutput {
	return o
}

func (o LakeHouseWriteSettingsOutput) ToLakeHouseWriteSettingsOutputWithContext(ctx context.Context) LakeHouseWriteSettingsOutput {
	return o
}

func (o LakeHouseWriteSettingsOutput) ToLakeHouseWriteSettingsPtrOutput() LakeHouseWriteSettingsPtrOutput {
	return o.ToLakeHouseWriteSettingsPtrOutputWithContext(context.Background())
}

func (o LakeHouseWriteSettingsOutput) ToLakeHouseWriteSettingsPtrOutputWithContext(ctx context.Context) LakeHouseWriteSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LakeHouseWriteSettings) *LakeHouseWriteSettings {
		return &v
	}).(LakeHouseWriteSettingsPtrOutput)
}

// The type of copy behavior for copy sink.
func (o LakeHouseWriteSettingsOutput) CopyBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseWriteSettings) interface{} { return v.CopyBehavior }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o LakeHouseWriteSettingsOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseWriteSettings) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o LakeHouseWriteSettingsOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseWriteSettings) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
func (o LakeHouseWriteSettingsOutput) Metadata() MetadataItemArrayOutput {
	return o.ApplyT(func(v LakeHouseWriteSettings) []MetadataItem { return v.Metadata }).(MetadataItemArrayOutput)
}

// The write setting type.
// Expected value is 'LakeHouseWriteSettings'.
func (o LakeHouseWriteSettingsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LakeHouseWriteSettings) string { return v.Type }).(pulumi.StringOutput)
}

type LakeHouseWriteSettingsPtrOutput struct{ *pulumi.OutputState }

func (LakeHouseWriteSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LakeHouseWriteSettings)(nil)).Elem()
}

func (o LakeHouseWriteSettingsPtrOutput) ToLakeHouseWriteSettingsPtrOutput() LakeHouseWriteSettingsPtrOutput {
	return o
}

func (o LakeHouseWriteSettingsPtrOutput) ToLakeHouseWriteSettingsPtrOutputWithContext(ctx context.Context) LakeHouseWriteSettingsPtrOutput {
	return o
}

func (o LakeHouseWriteSettingsPtrOutput) Elem() LakeHouseWriteSettingsOutput {
	return o.ApplyT(func(v *LakeHouseWriteSettings) LakeHouseWriteSettings {
		if v != nil {
			return *v
		}
		var ret LakeHouseWriteSettings
		return ret
	}).(LakeHouseWriteSettingsOutput)
}

// The type of copy behavior for copy sink.
func (o LakeHouseWriteSettingsPtrOutput) CopyBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v *LakeHouseWriteSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.CopyBehavior
	}).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o LakeHouseWriteSettingsPtrOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v *LakeHouseWriteSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableMetricsCollection
	}).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o LakeHouseWriteSettingsPtrOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v *LakeHouseWriteSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentConnections
	}).(pulumi.AnyOutput)
}

// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
func (o LakeHouseWriteSettingsPtrOutput) Metadata() MetadataItemArrayOutput {
	return o.ApplyT(func(v *LakeHouseWriteSettings) []MetadataItem {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(MetadataItemArrayOutput)
}

// The write setting type.
// Expected value is 'LakeHouseWriteSettings'.
func (o LakeHouseWriteSettingsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LakeHouseWriteSettings) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Microsoft Fabric LakeHouse Files write settings.
type LakeHouseWriteSettingsResponse struct {
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
	Metadata []MetadataItemResponse `pulumi:"metadata"`
	// The write setting type.
	// Expected value is 'LakeHouseWriteSettings'.
	Type string `pulumi:"type"`
}

// Microsoft Fabric LakeHouse Files write settings.
type LakeHouseWriteSettingsResponseOutput struct{ *pulumi.OutputState }

func (LakeHouseWriteSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LakeHouseWriteSettingsResponse)(nil)).Elem()
}

func (o LakeHouseWriteSettingsResponseOutput) ToLakeHouseWriteSettingsResponseOutput() LakeHouseWriteSettingsResponseOutput {
	return o
}

func (o LakeHouseWriteSettingsResponseOutput) ToLakeHouseWriteSettingsResponseOutputWithContext(ctx context.Context) LakeHouseWriteSettingsResponseOutput {
	return o
}

// The type of copy behavior for copy sink.
func (o LakeHouseWriteSettingsResponseOutput) CopyBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseWriteSettingsResponse) interface{} { return v.CopyBehavior }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o LakeHouseWriteSettingsResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseWriteSettingsResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o LakeHouseWriteSettingsResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v LakeHouseWriteSettingsResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
func (o LakeHouseWriteSettingsResponseOutput) Metadata() MetadataItemResponseArrayOutput {
	return o.ApplyT(func(v LakeHouseWriteSettingsResponse) []MetadataItemResponse { return v.Metadata }).(MetadataItemResponseArrayOutput)
}

// The write setting type.
// Expected value is 'LakeHouseWriteSettings'.
func (o LakeHouseWriteSettingsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LakeHouseWriteSettingsResponse) string { return v.Type }).(pulumi.StringOutput)
}

type LakeHouseWriteSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (LakeHouseWriteSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LakeHouseWriteSettingsResponse)(nil)).Elem()
}

func (o LakeHouseWriteSettingsResponsePtrOutput) ToLakeHouseWriteSettingsResponsePtrOutput() LakeHouseWriteSettingsResponsePtrOutput {
	return o
}

func (o LakeHouseWriteSettingsResponsePtrOutput) ToLakeHouseWriteSettingsResponsePtrOutputWithContext(ctx context.Context) LakeHouseWriteSettingsResponsePtrOutput {
	return o
}

func (o LakeHouseWriteSettingsResponsePtrOutput) Elem() LakeHouseWriteSettingsResponseOutput {
	return o.ApplyT(func(v *LakeHouseWriteSettingsResponse) LakeHouseWriteSettingsResponse {
		if v != nil {
			return *v
		}
		var ret LakeHouseWriteSettingsResponse
		return ret
	}).(LakeHouseWriteSettingsResponseOutput)
}

// The type of copy behavior for copy sink.
func (o LakeHouseWriteSettingsResponsePtrOutput) CopyBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v *LakeHouseWriteSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.CopyBehavior
	}).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o LakeHouseWriteSettingsResponsePtrOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v *LakeHouseWriteSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableMetricsCollection
	}).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o LakeHouseWriteSettingsResponsePtrOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v *LakeHouseWriteSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentConnections
	}).(pulumi.AnyOutput)
}

// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
func (o LakeHouseWriteSettingsResponsePtrOutput) Metadata() MetadataItemResponseArrayOutput {
	return o.ApplyT(func(v *LakeHouseWriteSettingsResponse) []MetadataItemResponse {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(MetadataItemResponseArrayOutput)
}

// The write setting type.
// Expected value is 'LakeHouseWriteSettings'.
func (o LakeHouseWriteSettingsResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LakeHouseWriteSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The key authorization type integration runtime.
type LinkedIntegrationRuntimeKeyAuthorization struct {
	// The authorization type for integration runtime sharing.
	// Expected value is 'Key'.
	AuthorizationType string `pulumi:"authorizationType"`
	// The key used for authorization.
	Key SecureString `pulumi:"key"`
}

// LinkedIntegrationRuntimeKeyAuthorizationInput is an input type that accepts LinkedIntegrationRuntimeKeyAuthorizationArgs and LinkedIntegrationRuntimeKeyAuthorizationOutput values.
// You can construct a concrete instance of `LinkedIntegrationRuntimeKeyAuthorizationInput` via:
//
//	LinkedIntegrationRuntimeKeyAuthorizationArgs{...}
type LinkedIntegrationRuntimeKeyAuthorizationInput interface {
	pulumi.Input

	ToLinkedIntegrationRuntimeKeyAuthorizationOutput() LinkedIntegrationRuntimeKeyAuthorizationOutput
	ToLinkedIntegrationRuntimeKeyAuthorizationOutputWithContext(context.Context) LinkedIntegrationRuntimeKeyAuthorizationOutput
}

// The key authorization type integration runtime.
type LinkedIntegrationRuntimeKeyAuthorizationArgs struct {
	// The authorization type for integration runtime sharing.
	// Expected value is 'Key'.
	AuthorizationType pulumi.StringInput `pulumi:"authorizationType"`
	// The key used for authorization.
	Key SecureStringInput `pulumi:"key"`
}

func (LinkedIntegrationRuntimeKeyAuthorizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedIntegrationRuntimeKeyAuthorization)(nil)).Elem()
}

func (i LinkedIntegrationRuntimeKeyAuthorizationArgs) ToLinkedIntegrationRuntimeKeyAuthorizationOutput() LinkedIntegrationRuntimeKeyAuthorizationOutput {
	return i.ToLinkedIntegrationRuntimeKeyAuthorizationOutputWithContext(context.Background())
}

func (i LinkedIntegrationRuntimeKeyAuthorizationArgs) ToLinkedIntegrationRuntimeKeyAuthorizationOutputWithContext(ctx context.Context) LinkedIntegrationRuntimeKeyAuthorizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedIntegrationRuntimeKeyAuthorizationOutput)
}

func (i LinkedIntegrationRuntimeKeyAuthorizationArgs) ToLinkedIntegrationRuntimeKeyAuthorizationPtrOutput() LinkedIntegrationRuntimeKeyAuthorizationPtrOutput {
	return i.ToLinkedIntegrationRuntimeKeyAuthorizationPtrOutputWithContext(context.Background())
}

func (i LinkedIntegrationRuntimeKeyAuthorizationArgs) ToLinkedIntegrationRuntimeKeyAuthorizationPtrOutputWithContext(ctx context.Context) LinkedIntegrationRuntimeKeyAuthorizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedIntegrationRuntimeKeyAuthorizationOutput).ToLinkedIntegrationRuntimeKeyAuthorizationPtrOutputWithContext(ctx)
}

// LinkedIntegrationRuntimeKeyAuthorizationPtrInput is an input type that accepts LinkedIntegrationRuntimeKeyAuthorizationArgs, LinkedIntegrationRuntimeKeyAuthorizationPtr and LinkedIntegrationRuntimeKeyAuthorizationPtrOutput values.
// You can construct a concrete instance of `LinkedIntegrationRuntimeKeyAuthorizationPtrInput` via:
//
//	        LinkedIntegrationRuntimeKeyAuthorizationArgs{...}
//
//	or:
//
//	        nil
type LinkedIntegrationRuntimeKeyAuthorizationPtrInput interface {
	pulumi.Input

	ToLinkedIntegrationRuntimeKeyAuthorizationPtrOutput() LinkedIntegrationRuntimeKeyAuthorizationPtrOutput
	ToLinkedIntegrationRuntimeKeyAuthorizationPtrOutputWithContext(context.Context) LinkedIntegrationRuntimeKeyAuthorizationPtrOutput
}

type linkedIntegrationRuntimeKeyAuthorizationPtrType LinkedIntegrationRuntimeKeyAuthorizationArgs

func LinkedIntegrationRuntimeKeyAuthorizationPtr(v *LinkedIntegrationRuntimeKeyAuthorizationArgs) LinkedIntegrationRuntimeKeyAuthorizationPtrInput {
	return (*linkedIntegrationRuntimeKeyAuthorizationPtrType)(v)
}

func (*linkedIntegrationRuntimeKeyAuthorizationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedIntegrationRuntimeKeyAuthorization)(nil)).Elem()
}

func (i *linkedIntegrationRuntimeKeyAuthorizationPtrType) ToLinkedIntegrationRuntimeKeyAuthorizationPtrOutput() LinkedIntegrationRuntimeKeyAuthorizationPtrOutput {
	return i.ToLinkedIntegrationRuntimeKeyAuthorizationPtrOutputWithContext(context.Background())
}

func (i *linkedIntegrationRuntimeKeyAuthorizationPtrType) ToLinkedIntegrationRuntimeKeyAuthorizationPtrOutputWithContext(ctx context.Context) LinkedIntegrationRuntimeKeyAuthorizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedIntegrationRuntimeKeyAuthorizationPtrOutput)
}

// The key authorization type integration runtime.
type LinkedIntegrationRuntimeKeyAuthorizationOutput struct{ *pulumi.OutputState }

func (LinkedIntegrationRuntimeKeyAuthorizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedIntegrationRuntimeKeyAuthorization)(nil)).Elem()
}

func (o LinkedIntegrationRuntimeKeyAuthorizationOutput) ToLinkedIntegrationRuntimeKeyAuthorizationOutput() LinkedIntegrationRuntimeKeyAuthorizationOutput {
	return o
}

func (o LinkedIntegrationRuntimeKeyAuthorizationOutput) ToLinkedIntegrationRuntimeKeyAuthorizationOutputWithContext(ctx context.Context) LinkedIntegrationRuntimeKeyAuthorizationOutput {
	return o
}

func (o LinkedIntegrationRuntimeKeyAuthorizationOutput) ToLinkedIntegrationRuntimeKeyAuthorizationPtrOutput() LinkedIntegrationRuntimeKeyAuthorizationPtrOutput {
	return o.ToLinkedIntegrationRuntimeKeyAuthorizationPtrOutputWithContext(context.Background())
}

func (o LinkedIntegrationRuntimeKeyAuthorizationOutput) ToLinkedIntegrationRuntimeKeyAuthorizationPtrOutputWithContext(ctx context.Context) LinkedIntegrationRuntimeKeyAuthorizationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LinkedIntegrationRuntimeKeyAuthorization) *LinkedIntegrationRuntimeKeyAuthorization {
		return &v
	}).(LinkedIntegrationRuntimeKeyAuthorizationPtrOutput)
}

// The authorization type for integration runtime sharing.
// Expected value is 'Key'.
func (o LinkedIntegrationRuntimeKeyAuthorizationOutput) AuthorizationType() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedIntegrationRuntimeKeyAuthorization) string { return v.AuthorizationType }).(pulumi.StringOutput)
}

// The key used for authorization.
func (o LinkedIntegrationRuntimeKeyAuthorizationOutput) Key() SecureStringOutput {
	return o.ApplyT(func(v LinkedIntegrationRuntimeKeyAuthorization) SecureString { return v.Key }).(SecureStringOutput)
}

type LinkedIntegrationRuntimeKeyAuthorizationPtrOutput struct{ *pulumi.OutputState }

func (LinkedIntegrationRuntimeKeyAuthorizationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedIntegrationRuntimeKeyAuthorization)(nil)).Elem()
}

func (o LinkedIntegrationRuntimeKeyAuthorizationPtrOutput) ToLinkedIntegrationRuntimeKeyAuthorizationPtrOutput() LinkedIntegrationRuntimeKeyAuthorizationPtrOutput {
	return o
}

func (o LinkedIntegrationRuntimeKeyAuthorizationPtrOutput) ToLinkedIntegrationRuntimeKeyAuthorizationPtrOutputWithContext(ctx context.Context) LinkedIntegrationRuntimeKeyAuthorizationPtrOutput {
	return o
}

func (o LinkedIntegrationRuntimeKeyAuthorizationPtrOutput) Elem() LinkedIntegrationRuntimeKeyAuthorizationOutput {
	return o.ApplyT(func(v *LinkedIntegrationRuntimeKeyAuthorization) LinkedIntegrationRuntimeKeyAuthorization {
		if v != nil {
			return *v
		}
		var ret LinkedIntegrationRuntimeKeyAuthorization
		return ret
	}).(LinkedIntegrationRuntimeKeyAuthorizationOutput)
}

// The authorization type for integration runtime sharing.
// Expected value is 'Key'.
func (o LinkedIntegrationRuntimeKeyAuthorizationPtrOutput) AuthorizationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedIntegrationRuntimeKeyAuthorization) *string {
		if v == nil {
			return nil
		}
		return &v.AuthorizationType
	}).(pulumi.StringPtrOutput)
}

// The key used for authorization.
func (o LinkedIntegrationRuntimeKeyAuthorizationPtrOutput) Key() SecureStringPtrOutput {
	return o.ApplyT(func(v *LinkedIntegrationRuntimeKeyAuthorization) *SecureString {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(SecureStringPtrOutput)
}

// The key authorization type integration runtime.
type LinkedIntegrationRuntimeKeyAuthorizationResponse struct {
	// The authorization type for integration runtime sharing.
	// Expected value is 'Key'.
	AuthorizationType string `pulumi:"authorizationType"`
	// The key used for authorization.
	Key SecureStringResponse `pulumi:"key"`
}

// The key authorization type integration runtime.
type LinkedIntegrationRuntimeKeyAuthorizationResponseOutput struct{ *pulumi.OutputState }

func (LinkedIntegrationRuntimeKeyAuthorizationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedIntegrationRuntimeKeyAuthorizationResponse)(nil)).Elem()
}

func (o LinkedIntegrationRuntimeKeyAuthorizationResponseOutput) ToLinkedIntegrationRuntimeKeyAuthorizationResponseOutput() LinkedIntegrationRuntimeKeyAuthorizationResponseOutput {
	return o
}

func (o LinkedIntegrationRuntimeKeyAuthorizationResponseOutput) ToLinkedIntegrationRuntimeKeyAuthorizationResponseOutputWithContext(ctx context.Context) LinkedIntegrationRuntimeKeyAuthorizationResponseOutput {
	return o
}

// The authorization type for integration runtime sharing.
// Expected value is 'Key'.
func (o LinkedIntegrationRuntimeKeyAuthorizationResponseOutput) AuthorizationType() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedIntegrationRuntimeKeyAuthorizationResponse) string { return v.AuthorizationType }).(pulumi.StringOutput)
}

// The key used for authorization.
func (o LinkedIntegrationRuntimeKeyAuthorizationResponseOutput) Key() SecureStringResponseOutput {
	return o.ApplyT(func(v LinkedIntegrationRuntimeKeyAuthorizationResponse) SecureStringResponse { return v.Key }).(SecureStringResponseOutput)
}

type LinkedIntegrationRuntimeKeyAuthorizationResponsePtrOutput struct{ *pulumi.OutputState }

func (LinkedIntegrationRuntimeKeyAuthorizationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedIntegrationRuntimeKeyAuthorizationResponse)(nil)).Elem()
}

func (o LinkedIntegrationRuntimeKeyAuthorizationResponsePtrOutput) ToLinkedIntegrationRuntimeKeyAuthorizationResponsePtrOutput() LinkedIntegrationRuntimeKeyAuthorizationResponsePtrOutput {
	return o
}

func (o LinkedIntegrationRuntimeKeyAuthorizationResponsePtrOutput) ToLinkedIntegrationRuntimeKeyAuthorizationResponsePtrOutputWithContext(ctx context.Context) LinkedIntegrationRuntimeKeyAuthorizationResponsePtrOutput {
	return o
}

func (o LinkedIntegrationRuntimeKeyAuthorizationResponsePtrOutput) Elem() LinkedIntegrationRuntimeKeyAuthorizationResponseOutput {
	return o.ApplyT(func(v *LinkedIntegrationRuntimeKeyAuthorizationResponse) LinkedIntegrationRuntimeKeyAuthorizationResponse {
		if v != nil {
			return *v
		}
		var ret LinkedIntegrationRuntimeKeyAuthorizationResponse
		return ret
	}).(LinkedIntegrationRuntimeKeyAuthorizationResponseOutput)
}

// The authorization type for integration runtime sharing.
// Expected value is 'Key'.
func (o LinkedIntegrationRuntimeKeyAuthorizationResponsePtrOutput) AuthorizationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedIntegrationRuntimeKeyAuthorizationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AuthorizationType
	}).(pulumi.StringPtrOutput)
}

// The key used for authorization.
func (o LinkedIntegrationRuntimeKeyAuthorizationResponsePtrOutput) Key() SecureStringResponsePtrOutput {
	return o.ApplyT(func(v *LinkedIntegrationRuntimeKeyAuthorizationResponse) *SecureStringResponse {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(SecureStringResponsePtrOutput)
}

// The role based access control (RBAC) authorization type integration runtime.
type LinkedIntegrationRuntimeRbacAuthorization struct {
	// The authorization type for integration runtime sharing.
	// Expected value is 'RBAC'.
	AuthorizationType string `pulumi:"authorizationType"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// The resource identifier of the integration runtime to be shared.
	ResourceId string `pulumi:"resourceId"`
}

// LinkedIntegrationRuntimeRbacAuthorizationInput is an input type that accepts LinkedIntegrationRuntimeRbacAuthorizationArgs and LinkedIntegrationRuntimeRbacAuthorizationOutput values.
// You can construct a concrete instance of `LinkedIntegrationRuntimeRbacAuthorizationInput` via:
//
//	LinkedIntegrationRuntimeRbacAuthorizationArgs{...}
type LinkedIntegrationRuntimeRbacAuthorizationInput interface {
	pulumi.Input

	ToLinkedIntegrationRuntimeRbacAuthorizationOutput() LinkedIntegrationRuntimeRbacAuthorizationOutput
	ToLinkedIntegrationRuntimeRbacAuthorizationOutputWithContext(context.Context) LinkedIntegrationRuntimeRbacAuthorizationOutput
}

// The role based access control (RBAC) authorization type integration runtime.
type LinkedIntegrationRuntimeRbacAuthorizationArgs struct {
	// The authorization type for integration runtime sharing.
	// Expected value is 'RBAC'.
	AuthorizationType pulumi.StringInput `pulumi:"authorizationType"`
	// The credential reference containing authentication information.
	Credential CredentialReferencePtrInput `pulumi:"credential"`
	// The resource identifier of the integration runtime to be shared.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
}

func (LinkedIntegrationRuntimeRbacAuthorizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedIntegrationRuntimeRbacAuthorization)(nil)).Elem()
}

func (i LinkedIntegrationRuntimeRbacAuthorizationArgs) ToLinkedIntegrationRuntimeRbacAuthorizationOutput() LinkedIntegrationRuntimeRbacAuthorizationOutput {
	return i.ToLinkedIntegrationRuntimeRbacAuthorizationOutputWithContext(context.Background())
}

func (i LinkedIntegrationRuntimeRbacAuthorizationArgs) ToLinkedIntegrationRuntimeRbacAuthorizationOutputWithContext(ctx context.Context) LinkedIntegrationRuntimeRbacAuthorizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedIntegrationRuntimeRbacAuthorizationOutput)
}

func (i LinkedIntegrationRuntimeRbacAuthorizationArgs) ToLinkedIntegrationRuntimeRbacAuthorizationPtrOutput() LinkedIntegrationRuntimeRbacAuthorizationPtrOutput {
	return i.ToLinkedIntegrationRuntimeRbacAuthorizationPtrOutputWithContext(context.Background())
}

func (i LinkedIntegrationRuntimeRbacAuthorizationArgs) ToLinkedIntegrationRuntimeRbacAuthorizationPtrOutputWithContext(ctx context.Context) LinkedIntegrationRuntimeRbacAuthorizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedIntegrationRuntimeRbacAuthorizationOutput).ToLinkedIntegrationRuntimeRbacAuthorizationPtrOutputWithContext(ctx)
}

// LinkedIntegrationRuntimeRbacAuthorizationPtrInput is an input type that accepts LinkedIntegrationRuntimeRbacAuthorizationArgs, LinkedIntegrationRuntimeRbacAuthorizationPtr and LinkedIntegrationRuntimeRbacAuthorizationPtrOutput values.
// You can construct a concrete instance of `LinkedIntegrationRuntimeRbacAuthorizationPtrInput` via:
//
//	        LinkedIntegrationRuntimeRbacAuthorizationArgs{...}
//
//	or:
//
//	        nil
type LinkedIntegrationRuntimeRbacAuthorizationPtrInput interface {
	pulumi.Input

	ToLinkedIntegrationRuntimeRbacAuthorizationPtrOutput() LinkedIntegrationRuntimeRbacAuthorizationPtrOutput
	ToLinkedIntegrationRuntimeRbacAuthorizationPtrOutputWithContext(context.Context) LinkedIntegrationRuntimeRbacAuthorizationPtrOutput
}

type linkedIntegrationRuntimeRbacAuthorizationPtrType LinkedIntegrationRuntimeRbacAuthorizationArgs

func LinkedIntegrationRuntimeRbacAuthorizationPtr(v *LinkedIntegrationRuntimeRbacAuthorizationArgs) LinkedIntegrationRuntimeRbacAuthorizationPtrInput {
	return (*linkedIntegrationRuntimeRbacAuthorizationPtrType)(v)
}

func (*linkedIntegrationRuntimeRbacAuthorizationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedIntegrationRuntimeRbacAuthorization)(nil)).Elem()
}

func (i *linkedIntegrationRuntimeRbacAuthorizationPtrType) ToLinkedIntegrationRuntimeRbacAuthorizationPtrOutput() LinkedIntegrationRuntimeRbacAuthorizationPtrOutput {
	return i.ToLinkedIntegrationRuntimeRbacAuthorizationPtrOutputWithContext(context.Background())
}

func (i *linkedIntegrationRuntimeRbacAuthorizationPtrType) ToLinkedIntegrationRuntimeRbacAuthorizationPtrOutputWithContext(ctx context.Context) LinkedIntegrationRuntimeRbacAuthorizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedIntegrationRuntimeRbacAuthorizationPtrOutput)
}

// The role based access control (RBAC) authorization type integration runtime.
type LinkedIntegrationRuntimeRbacAuthorizationOutput struct{ *pulumi.OutputState }

func (LinkedIntegrationRuntimeRbacAuthorizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedIntegrationRuntimeRbacAuthorization)(nil)).Elem()
}

func (o LinkedIntegrationRuntimeRbacAuthorizationOutput) ToLinkedIntegrationRuntimeRbacAuthorizationOutput() LinkedIntegrationRuntimeRbacAuthorizationOutput {
	return o
}

func (o LinkedIntegrationRuntimeRbacAuthorizationOutput) ToLinkedIntegrationRuntimeRbacAuthorizationOutputWithContext(ctx context.Context) LinkedIntegrationRuntimeRbacAuthorizationOutput {
	return o
}

func (o LinkedIntegrationRuntimeRbacAuthorizationOutput) ToLinkedIntegrationRuntimeRbacAuthorizationPtrOutput() LinkedIntegrationRuntimeRbacAuthorizationPtrOutput {
	return o.ToLinkedIntegrationRuntimeRbacAuthorizationPtrOutputWithContext(context.Background())
}

func (o LinkedIntegrationRuntimeRbacAuthorizationOutput) ToLinkedIntegrationRuntimeRbacAuthorizationPtrOutputWithContext(ctx context.Context) LinkedIntegrationRuntimeRbacAuthorizationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LinkedIntegrationRuntimeRbacAuthorization) *LinkedIntegrationRuntimeRbacAuthorization {
		return &v
	}).(LinkedIntegrationRuntimeRbacAuthorizationPtrOutput)
}

// The authorization type for integration runtime sharing.
// Expected value is 'RBAC'.
func (o LinkedIntegrationRuntimeRbacAuthorizationOutput) AuthorizationType() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedIntegrationRuntimeRbacAuthorization) string { return v.AuthorizationType }).(pulumi.StringOutput)
}

// The credential reference containing authentication information.
func (o LinkedIntegrationRuntimeRbacAuthorizationOutput) Credential() CredentialReferencePtrOutput {
	return o.ApplyT(func(v LinkedIntegrationRuntimeRbacAuthorization) *CredentialReference { return v.Credential }).(CredentialReferencePtrOutput)
}

// The resource identifier of the integration runtime to be shared.
func (o LinkedIntegrationRuntimeRbacAuthorizationOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedIntegrationRuntimeRbacAuthorization) string { return v.ResourceId }).(pulumi.StringOutput)
}

type LinkedIntegrationRuntimeRbacAuthorizationPtrOutput struct{ *pulumi.OutputState }

func (LinkedIntegrationRuntimeRbacAuthorizationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedIntegrationRuntimeRbacAuthorization)(nil)).Elem()
}

func (o LinkedIntegrationRuntimeRbacAuthorizationPtrOutput) ToLinkedIntegrationRuntimeRbacAuthorizationPtrOutput() LinkedIntegrationRuntimeRbacAuthorizationPtrOutput {
	return o
}

func (o LinkedIntegrationRuntimeRbacAuthorizationPtrOutput) ToLinkedIntegrationRuntimeRbacAuthorizationPtrOutputWithContext(ctx context.Context) LinkedIntegrationRuntimeRbacAuthorizationPtrOutput {
	return o
}

func (o LinkedIntegrationRuntimeRbacAuthorizationPtrOutput) Elem() LinkedIntegrationRuntimeRbacAuthorizationOutput {
	return o.ApplyT(func(v *LinkedIntegrationRuntimeRbacAuthorization) LinkedIntegrationRuntimeRbacAuthorization {
		if v != nil {
			return *v
		}
		var ret LinkedIntegrationRuntimeRbacAuthorization
		return ret
	}).(LinkedIntegrationRuntimeRbacAuthorizationOutput)
}

// The authorization type for integration runtime sharing.
// Expected value is 'RBAC'.
func (o LinkedIntegrationRuntimeRbacAuthorizationPtrOutput) AuthorizationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedIntegrationRuntimeRbacAuthorization) *string {
		if v == nil {
			return nil
		}
		return &v.AuthorizationType
	}).(pulumi.StringPtrOutput)
}

// The credential reference containing authentication information.
func (o LinkedIntegrationRuntimeRbacAuthorizationPtrOutput) Credential() CredentialReferencePtrOutput {
	return o.ApplyT(func(v *LinkedIntegrationRuntimeRbacAuthorization) *CredentialReference {
		if v == nil {
			return nil
		}
		return v.Credential
	}).(CredentialReferencePtrOutput)
}

// The resource identifier of the integration runtime to be shared.
func (o LinkedIntegrationRuntimeRbacAuthorizationPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedIntegrationRuntimeRbacAuthorization) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// The role based access control (RBAC) authorization type integration runtime.
type LinkedIntegrationRuntimeRbacAuthorizationResponse struct {
	// The authorization type for integration runtime sharing.
	// Expected value is 'RBAC'.
	AuthorizationType string `pulumi:"authorizationType"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// The resource identifier of the integration runtime to be shared.
	ResourceId string `pulumi:"resourceId"`
}

// The role based access control (RBAC) authorization type integration runtime.
type LinkedIntegrationRuntimeRbacAuthorizationResponseOutput struct{ *pulumi.OutputState }

func (LinkedIntegrationRuntimeRbacAuthorizationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedIntegrationRuntimeRbacAuthorizationResponse)(nil)).Elem()
}

func (o LinkedIntegrationRuntimeRbacAuthorizationResponseOutput) ToLinkedIntegrationRuntimeRbacAuthorizationResponseOutput() LinkedIntegrationRuntimeRbacAuthorizationResponseOutput {
	return o
}

func (o LinkedIntegrationRuntimeRbacAuthorizationResponseOutput) ToLinkedIntegrationRuntimeRbacAuthorizationResponseOutputWithContext(ctx context.Context) LinkedIntegrationRuntimeRbacAuthorizationResponseOutput {
	return o
}

// The authorization type for integration runtime sharing.
// Expected value is 'RBAC'.
func (o LinkedIntegrationRuntimeRbacAuthorizationResponseOutput) AuthorizationType() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedIntegrationRuntimeRbacAuthorizationResponse) string { return v.AuthorizationType }).(pulumi.StringOutput)
}

// The credential reference containing authentication information.
func (o LinkedIntegrationRuntimeRbacAuthorizationResponseOutput) Credential() CredentialReferenceResponsePtrOutput {
	return o.ApplyT(func(v LinkedIntegrationRuntimeRbacAuthorizationResponse) *CredentialReferenceResponse {
		return v.Credential
	}).(CredentialReferenceResponsePtrOutput)
}

// The resource identifier of the integration runtime to be shared.
func (o LinkedIntegrationRuntimeRbacAuthorizationResponseOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedIntegrationRuntimeRbacAuthorizationResponse) string { return v.ResourceId }).(pulumi.StringOutput)
}

type LinkedIntegrationRuntimeRbacAuthorizationResponsePtrOutput struct{ *pulumi.OutputState }

func (LinkedIntegrationRuntimeRbacAuthorizationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedIntegrationRuntimeRbacAuthorizationResponse)(nil)).Elem()
}

func (o LinkedIntegrationRuntimeRbacAuthorizationResponsePtrOutput) ToLinkedIntegrationRuntimeRbacAuthorizationResponsePtrOutput() LinkedIntegrationRuntimeRbacAuthorizationResponsePtrOutput {
	return o
}

func (o LinkedIntegrationRuntimeRbacAuthorizationResponsePtrOutput) ToLinkedIntegrationRuntimeRbacAuthorizationResponsePtrOutputWithContext(ctx context.Context) LinkedIntegrationRuntimeRbacAuthorizationResponsePtrOutput {
	return o
}

func (o LinkedIntegrationRuntimeRbacAuthorizationResponsePtrOutput) Elem() LinkedIntegrationRuntimeRbacAuthorizationResponseOutput {
	return o.ApplyT(func(v *LinkedIntegrationRuntimeRbacAuthorizationResponse) LinkedIntegrationRuntimeRbacAuthorizationResponse {
		if v != nil {
			return *v
		}
		var ret LinkedIntegrationRuntimeRbacAuthorizationResponse
		return ret
	}).(LinkedIntegrationRuntimeRbacAuthorizationResponseOutput)
}

// The authorization type for integration runtime sharing.
// Expected value is 'RBAC'.
func (o LinkedIntegrationRuntimeRbacAuthorizationResponsePtrOutput) AuthorizationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedIntegrationRuntimeRbacAuthorizationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AuthorizationType
	}).(pulumi.StringPtrOutput)
}

// The credential reference containing authentication information.
func (o LinkedIntegrationRuntimeRbacAuthorizationResponsePtrOutput) Credential() CredentialReferenceResponsePtrOutput {
	return o.ApplyT(func(v *LinkedIntegrationRuntimeRbacAuthorizationResponse) *CredentialReferenceResponse {
		if v == nil {
			return nil
		}
		return v.Credential
	}).(CredentialReferenceResponsePtrOutput)
}

// The resource identifier of the integration runtime to be shared.
func (o LinkedIntegrationRuntimeRbacAuthorizationResponsePtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedIntegrationRuntimeRbacAuthorizationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// The linked integration runtime information.
type LinkedIntegrationRuntimeResponse struct {
	// The creating time of the linked integration runtime.
	CreateTime string `pulumi:"createTime"`
	// The location of the data factory for which the linked integration runtime belong to.
	DataFactoryLocation string `pulumi:"dataFactoryLocation"`
	// The name of the data factory for which the linked integration runtime belong to.
	DataFactoryName string `pulumi:"dataFactoryName"`
	// The name of the linked integration runtime.
	Name string `pulumi:"name"`
	// The subscription ID for which the linked integration runtime belong to.
	SubscriptionId string `pulumi:"subscriptionId"`
}

// The linked integration runtime information.
type LinkedIntegrationRuntimeResponseOutput struct{ *pulumi.OutputState }

func (LinkedIntegrationRuntimeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedIntegrationRuntimeResponse)(nil)).Elem()
}

func (o LinkedIntegrationRuntimeResponseOutput) ToLinkedIntegrationRuntimeResponseOutput() LinkedIntegrationRuntimeResponseOutput {
	return o
}

func (o LinkedIntegrationRuntimeResponseOutput) ToLinkedIntegrationRuntimeResponseOutputWithContext(ctx context.Context) LinkedIntegrationRuntimeResponseOutput {
	return o
}

// The creating time of the linked integration runtime.
func (o LinkedIntegrationRuntimeResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedIntegrationRuntimeResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The location of the data factory for which the linked integration runtime belong to.
func (o LinkedIntegrationRuntimeResponseOutput) DataFactoryLocation() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedIntegrationRuntimeResponse) string { return v.DataFactoryLocation }).(pulumi.StringOutput)
}

// The name of the data factory for which the linked integration runtime belong to.
func (o LinkedIntegrationRuntimeResponseOutput) DataFactoryName() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedIntegrationRuntimeResponse) string { return v.DataFactoryName }).(pulumi.StringOutput)
}

// The name of the linked integration runtime.
func (o LinkedIntegrationRuntimeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedIntegrationRuntimeResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The subscription ID for which the linked integration runtime belong to.
func (o LinkedIntegrationRuntimeResponseOutput) SubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedIntegrationRuntimeResponse) string { return v.SubscriptionId }).(pulumi.StringOutput)
}

type LinkedIntegrationRuntimeResponseArrayOutput struct{ *pulumi.OutputState }

func (LinkedIntegrationRuntimeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LinkedIntegrationRuntimeResponse)(nil)).Elem()
}

func (o LinkedIntegrationRuntimeResponseArrayOutput) ToLinkedIntegrationRuntimeResponseArrayOutput() LinkedIntegrationRuntimeResponseArrayOutput {
	return o
}

func (o LinkedIntegrationRuntimeResponseArrayOutput) ToLinkedIntegrationRuntimeResponseArrayOutputWithContext(ctx context.Context) LinkedIntegrationRuntimeResponseArrayOutput {
	return o
}

func (o LinkedIntegrationRuntimeResponseArrayOutput) Index(i pulumi.IntInput) LinkedIntegrationRuntimeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LinkedIntegrationRuntimeResponse {
		return vs[0].([]LinkedIntegrationRuntimeResponse)[vs[1].(int)]
	}).(LinkedIntegrationRuntimeResponseOutput)
}

// Linked service reference type.
type LinkedServiceReference struct {
	// Arguments for LinkedService.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Reference LinkedService name.
	ReferenceName string `pulumi:"referenceName"`
	// Linked service reference type.
	Type string `pulumi:"type"`
}

// LinkedServiceReferenceInput is an input type that accepts LinkedServiceReferenceArgs and LinkedServiceReferenceOutput values.
// You can construct a concrete instance of `LinkedServiceReferenceInput` via:
//
//	LinkedServiceReferenceArgs{...}
type LinkedServiceReferenceInput interface {
	pulumi.Input

	ToLinkedServiceReferenceOutput() LinkedServiceReferenceOutput
	ToLinkedServiceReferenceOutputWithContext(context.Context) LinkedServiceReferenceOutput
}

// Linked service reference type.
type LinkedServiceReferenceArgs struct {
	// Arguments for LinkedService.
	Parameters pulumi.MapInput `pulumi:"parameters"`
	// Reference LinkedService name.
	ReferenceName pulumi.StringInput `pulumi:"referenceName"`
	// Linked service reference type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (LinkedServiceReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceReference)(nil)).Elem()
}

func (i LinkedServiceReferenceArgs) ToLinkedServiceReferenceOutput() LinkedServiceReferenceOutput {
	return i.ToLinkedServiceReferenceOutputWithContext(context.Background())
}

func (i LinkedServiceReferenceArgs) ToLinkedServiceReferenceOutputWithContext(ctx context.Context) LinkedServiceReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceReferenceOutput)
}

func (i LinkedServiceReferenceArgs) ToLinkedServiceReferencePtrOutput() LinkedServiceReferencePtrOutput {
	return i.ToLinkedServiceReferencePtrOutputWithContext(context.Background())
}

func (i LinkedServiceReferenceArgs) ToLinkedServiceReferencePtrOutputWithContext(ctx context.Context) LinkedServiceReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceReferenceOutput).ToLinkedServiceReferencePtrOutputWithContext(ctx)
}

// LinkedServiceReferencePtrInput is an input type that accepts LinkedServiceReferenceArgs, LinkedServiceReferencePtr and LinkedServiceReferencePtrOutput values.
// You can construct a concrete instance of `LinkedServiceReferencePtrInput` via:
//
//	        LinkedServiceReferenceArgs{...}
//
//	or:
//
//	        nil
type LinkedServiceReferencePtrInput interface {
	pulumi.Input

	ToLinkedServiceReferencePtrOutput() LinkedServiceReferencePtrOutput
	ToLinkedServiceReferencePtrOutputWithContext(context.Context) LinkedServiceReferencePtrOutput
}

type linkedServiceReferencePtrType LinkedServiceReferenceArgs

func LinkedServiceReferencePtr(v *LinkedServiceReferenceArgs) LinkedServiceReferencePtrInput {
	return (*linkedServiceReferencePtrType)(v)
}

func (*linkedServiceReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceReference)(nil)).Elem()
}

func (i *linkedServiceReferencePtrType) ToLinkedServiceReferencePtrOutput() LinkedServiceReferencePtrOutput {
	return i.ToLinkedServiceReferencePtrOutputWithContext(context.Background())
}

func (i *linkedServiceReferencePtrType) ToLinkedServiceReferencePtrOutputWithContext(ctx context.Context) LinkedServiceReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceReferencePtrOutput)
}

// LinkedServiceReferenceArrayInput is an input type that accepts LinkedServiceReferenceArray and LinkedServiceReferenceArrayOutput values.
// You can construct a concrete instance of `LinkedServiceReferenceArrayInput` via:
//
//	LinkedServiceReferenceArray{ LinkedServiceReferenceArgs{...} }
type LinkedServiceReferenceArrayInput interface {
	pulumi.Input

	ToLinkedServiceReferenceArrayOutput() LinkedServiceReferenceArrayOutput
	ToLinkedServiceReferenceArrayOutputWithContext(context.Context) LinkedServiceReferenceArrayOutput
}

type LinkedServiceReferenceArray []LinkedServiceReferenceInput

func (LinkedServiceReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LinkedServiceReference)(nil)).Elem()
}

func (i LinkedServiceReferenceArray) ToLinkedServiceReferenceArrayOutput() LinkedServiceReferenceArrayOutput {
	return i.ToLinkedServiceReferenceArrayOutputWithContext(context.Background())
}

func (i LinkedServiceReferenceArray) ToLinkedServiceReferenceArrayOutputWithContext(ctx context.Context) LinkedServiceReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceReferenceArrayOutput)
}

// Linked service reference type.
type LinkedServiceReferenceOutput struct{ *pulumi.OutputState }

func (LinkedServiceReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceReference)(nil)).Elem()
}

func (o LinkedServiceReferenceOutput) ToLinkedServiceReferenceOutput() LinkedServiceReferenceOutput {
	return o
}

func (o LinkedServiceReferenceOutput) ToLinkedServiceReferenceOutputWithContext(ctx context.Context) LinkedServiceReferenceOutput {
	return o
}

func (o LinkedServiceReferenceOutput) ToLinkedServiceReferencePtrOutput() LinkedServiceReferencePtrOutput {
	return o.ToLinkedServiceReferencePtrOutputWithContext(context.Background())
}

func (o LinkedServiceReferenceOutput) ToLinkedServiceReferencePtrOutputWithContext(ctx context.Context) LinkedServiceReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LinkedServiceReference) *LinkedServiceReference {
		return &v
	}).(LinkedServiceReferencePtrOutput)
}

// Arguments for LinkedService.
func (o LinkedServiceReferenceOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v LinkedServiceReference) map[string]interface{} { return v.Parameters }).(pulumi.MapOutput)
}

// Reference LinkedService name.
func (o LinkedServiceReferenceOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedServiceReference) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Linked service reference type.
func (o LinkedServiceReferenceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedServiceReference) string { return v.Type }).(pulumi.StringOutput)
}

type LinkedServiceReferencePtrOutput struct{ *pulumi.OutputState }

func (LinkedServiceReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceReference)(nil)).Elem()
}

func (o LinkedServiceReferencePtrOutput) ToLinkedServiceReferencePtrOutput() LinkedServiceReferencePtrOutput {
	return o
}

func (o LinkedServiceReferencePtrOutput) ToLinkedServiceReferencePtrOutputWithContext(ctx context.Context) LinkedServiceReferencePtrOutput {
	return o
}

func (o LinkedServiceReferencePtrOutput) Elem() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v *LinkedServiceReference) LinkedServiceReference {
		if v != nil {
			return *v
		}
		var ret LinkedServiceReference
		return ret
	}).(LinkedServiceReferenceOutput)
}

// Arguments for LinkedService.
func (o LinkedServiceReferencePtrOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v *LinkedServiceReference) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.MapOutput)
}

// Reference LinkedService name.
func (o LinkedServiceReferencePtrOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceReference) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceName
	}).(pulumi.StringPtrOutput)
}

// Linked service reference type.
func (o LinkedServiceReferencePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceReference) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type LinkedServiceReferenceArrayOutput struct{ *pulumi.OutputState }

func (LinkedServiceReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LinkedServiceReference)(nil)).Elem()
}

func (o LinkedServiceReferenceArrayOutput) ToLinkedServiceReferenceArrayOutput() LinkedServiceReferenceArrayOutput {
	return o
}

func (o LinkedServiceReferenceArrayOutput) ToLinkedServiceReferenceArrayOutputWithContext(ctx context.Context) LinkedServiceReferenceArrayOutput {
	return o
}

func (o LinkedServiceReferenceArrayOutput) Index(i pulumi.IntInput) LinkedServiceReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LinkedServiceReference {
		return vs[0].([]LinkedServiceReference)[vs[1].(int)]
	}).(LinkedServiceReferenceOutput)
}

// Linked service reference type.
type LinkedServiceReferenceResponse struct {
	// Arguments for LinkedService.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Reference LinkedService name.
	ReferenceName string `pulumi:"referenceName"`
	// Linked service reference type.
	Type string `pulumi:"type"`
}

// Linked service reference type.
type LinkedServiceReferenceResponseOutput struct{ *pulumi.OutputState }

func (LinkedServiceReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceReferenceResponse)(nil)).Elem()
}

func (o LinkedServiceReferenceResponseOutput) ToLinkedServiceReferenceResponseOutput() LinkedServiceReferenceResponseOutput {
	return o
}

func (o LinkedServiceReferenceResponseOutput) ToLinkedServiceReferenceResponseOutputWithContext(ctx context.Context) LinkedServiceReferenceResponseOutput {
	return o
}

// Arguments for LinkedService.
func (o LinkedServiceReferenceResponseOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v LinkedServiceReferenceResponse) map[string]interface{} { return v.Parameters }).(pulumi.MapOutput)
}

// Reference LinkedService name.
func (o LinkedServiceReferenceResponseOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedServiceReferenceResponse) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Linked service reference type.
func (o LinkedServiceReferenceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedServiceReferenceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type LinkedServiceReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (LinkedServiceReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceReferenceResponse)(nil)).Elem()
}

func (o LinkedServiceReferenceResponsePtrOutput) ToLinkedServiceReferenceResponsePtrOutput() LinkedServiceReferenceResponsePtrOutput {
	return o
}

func (o LinkedServiceReferenceResponsePtrOutput) ToLinkedServiceReferenceResponsePtrOutputWithContext(ctx context.Context) LinkedServiceReferenceResponsePtrOutput {
	return o
}

func (o LinkedServiceReferenceResponsePtrOutput) Elem() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v *LinkedServiceReferenceResponse) LinkedServiceReferenceResponse {
		if v != nil {
			return *v
		}
		var ret LinkedServiceReferenceResponse
		return ret
	}).(LinkedServiceReferenceResponseOutput)
}

// Arguments for LinkedService.
func (o LinkedServiceReferenceResponsePtrOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v *LinkedServiceReferenceResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.MapOutput)
}

// Reference LinkedService name.
func (o LinkedServiceReferenceResponsePtrOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceName
	}).(pulumi.StringPtrOutput)
}

// Linked service reference type.
func (o LinkedServiceReferenceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type LinkedServiceReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (LinkedServiceReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LinkedServiceReferenceResponse)(nil)).Elem()
}

func (o LinkedServiceReferenceResponseArrayOutput) ToLinkedServiceReferenceResponseArrayOutput() LinkedServiceReferenceResponseArrayOutput {
	return o
}

func (o LinkedServiceReferenceResponseArrayOutput) ToLinkedServiceReferenceResponseArrayOutputWithContext(ctx context.Context) LinkedServiceReferenceResponseArrayOutput {
	return o
}

func (o LinkedServiceReferenceResponseArrayOutput) Index(i pulumi.IntInput) LinkedServiceReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LinkedServiceReferenceResponse {
		return vs[0].([]LinkedServiceReferenceResponse)[vs[1].(int)]
	}).(LinkedServiceReferenceResponseOutput)
}

// Log location settings.
type LogLocationSettings struct {
	// Log storage linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The path to storage for storing detailed logs of activity execution. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
}

// LogLocationSettingsInput is an input type that accepts LogLocationSettingsArgs and LogLocationSettingsOutput values.
// You can construct a concrete instance of `LogLocationSettingsInput` via:
//
//	LogLocationSettingsArgs{...}
type LogLocationSettingsInput interface {
	pulumi.Input

	ToLogLocationSettingsOutput() LogLocationSettingsOutput
	ToLogLocationSettingsOutputWithContext(context.Context) LogLocationSettingsOutput
}

// Log location settings.
type LogLocationSettingsArgs struct {
	// Log storage linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// The path to storage for storing detailed logs of activity execution. Type: string (or Expression with resultType string).
	Path pulumi.Input `pulumi:"path"`
}

func (LogLocationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogLocationSettings)(nil)).Elem()
}

func (i LogLocationSettingsArgs) ToLogLocationSettingsOutput() LogLocationSettingsOutput {
	return i.ToLogLocationSettingsOutputWithContext(context.Background())
}

func (i LogLocationSettingsArgs) ToLogLocationSettingsOutputWithContext(ctx context.Context) LogLocationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogLocationSettingsOutput)
}

func (i LogLocationSettingsArgs) ToLogLocationSettingsPtrOutput() LogLocationSettingsPtrOutput {
	return i.ToLogLocationSettingsPtrOutputWithContext(context.Background())
}

func (i LogLocationSettingsArgs) ToLogLocationSettingsPtrOutputWithContext(ctx context.Context) LogLocationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogLocationSettingsOutput).ToLogLocationSettingsPtrOutputWithContext(ctx)
}

// LogLocationSettingsPtrInput is an input type that accepts LogLocationSettingsArgs, LogLocationSettingsPtr and LogLocationSettingsPtrOutput values.
// You can construct a concrete instance of `LogLocationSettingsPtrInput` via:
//
//	        LogLocationSettingsArgs{...}
//
//	or:
//
//	        nil
type LogLocationSettingsPtrInput interface {
	pulumi.Input

	ToLogLocationSettingsPtrOutput() LogLocationSettingsPtrOutput
	ToLogLocationSettingsPtrOutputWithContext(context.Context) LogLocationSettingsPtrOutput
}

type logLocationSettingsPtrType LogLocationSettingsArgs

func LogLocationSettingsPtr(v *LogLocationSettingsArgs) LogLocationSettingsPtrInput {
	return (*logLocationSettingsPtrType)(v)
}

func (*logLocationSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LogLocationSettings)(nil)).Elem()
}

func (i *logLocationSettingsPtrType) ToLogLocationSettingsPtrOutput() LogLocationSettingsPtrOutput {
	return i.ToLogLocationSettingsPtrOutputWithContext(context.Background())
}

func (i *logLocationSettingsPtrType) ToLogLocationSettingsPtrOutputWithContext(ctx context.Context) LogLocationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogLocationSettingsPtrOutput)
}

// Log location settings.
type LogLocationSettingsOutput struct{ *pulumi.OutputState }

func (LogLocationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogLocationSettings)(nil)).Elem()
}

func (o LogLocationSettingsOutput) ToLogLocationSettingsOutput() LogLocationSettingsOutput {
	return o
}

func (o LogLocationSettingsOutput) ToLogLocationSettingsOutputWithContext(ctx context.Context) LogLocationSettingsOutput {
	return o
}

func (o LogLocationSettingsOutput) ToLogLocationSettingsPtrOutput() LogLocationSettingsPtrOutput {
	return o.ToLogLocationSettingsPtrOutputWithContext(context.Background())
}

func (o LogLocationSettingsOutput) ToLogLocationSettingsPtrOutputWithContext(ctx context.Context) LogLocationSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LogLocationSettings) *LogLocationSettings {
		return &v
	}).(LogLocationSettingsPtrOutput)
}

// Log storage linked service reference.
func (o LogLocationSettingsOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v LogLocationSettings) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// The path to storage for storing detailed logs of activity execution. Type: string (or Expression with resultType string).
func (o LogLocationSettingsOutput) Path() pulumi.AnyOutput {
	return o.ApplyT(func(v LogLocationSettings) interface{} { return v.Path }).(pulumi.AnyOutput)
}

type LogLocationSettingsPtrOutput struct{ *pulumi.OutputState }

func (LogLocationSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogLocationSettings)(nil)).Elem()
}

func (o LogLocationSettingsPtrOutput) ToLogLocationSettingsPtrOutput() LogLocationSettingsPtrOutput {
	return o
}

func (o LogLocationSettingsPtrOutput) ToLogLocationSettingsPtrOutputWithContext(ctx context.Context) LogLocationSettingsPtrOutput {
	return o
}

func (o LogLocationSettingsPtrOutput) Elem() LogLocationSettingsOutput {
	return o.ApplyT(func(v *LogLocationSettings) LogLocationSettings {
		if v != nil {
			return *v
		}
		var ret LogLocationSettings
		return ret
	}).(LogLocationSettingsOutput)
}

// Log storage linked service reference.
func (o LogLocationSettingsPtrOutput) LinkedServiceName() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v *LogLocationSettings) *LinkedServiceReference {
		if v == nil {
			return nil
		}
		return &v.LinkedServiceName
	}).(LinkedServiceReferencePtrOutput)
}

// The path to storage for storing detailed logs of activity execution. Type: string (or Expression with resultType string).
func (o LogLocationSettingsPtrOutput) Path() pulumi.AnyOutput {
	return o.ApplyT(func(v *LogLocationSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.AnyOutput)
}

// Log location settings.
type LogLocationSettingsResponse struct {
	// Log storage linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The path to storage for storing detailed logs of activity execution. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
}

// Log location settings.
type LogLocationSettingsResponseOutput struct{ *pulumi.OutputState }

func (LogLocationSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogLocationSettingsResponse)(nil)).Elem()
}

func (o LogLocationSettingsResponseOutput) ToLogLocationSettingsResponseOutput() LogLocationSettingsResponseOutput {
	return o
}

func (o LogLocationSettingsResponseOutput) ToLogLocationSettingsResponseOutputWithContext(ctx context.Context) LogLocationSettingsResponseOutput {
	return o
}

// Log storage linked service reference.
func (o LogLocationSettingsResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v LogLocationSettingsResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// The path to storage for storing detailed logs of activity execution. Type: string (or Expression with resultType string).
func (o LogLocationSettingsResponseOutput) Path() pulumi.AnyOutput {
	return o.ApplyT(func(v LogLocationSettingsResponse) interface{} { return v.Path }).(pulumi.AnyOutput)
}

type LogLocationSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (LogLocationSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogLocationSettingsResponse)(nil)).Elem()
}

func (o LogLocationSettingsResponsePtrOutput) ToLogLocationSettingsResponsePtrOutput() LogLocationSettingsResponsePtrOutput {
	return o
}

func (o LogLocationSettingsResponsePtrOutput) ToLogLocationSettingsResponsePtrOutputWithContext(ctx context.Context) LogLocationSettingsResponsePtrOutput {
	return o
}

func (o LogLocationSettingsResponsePtrOutput) Elem() LogLocationSettingsResponseOutput {
	return o.ApplyT(func(v *LogLocationSettingsResponse) LogLocationSettingsResponse {
		if v != nil {
			return *v
		}
		var ret LogLocationSettingsResponse
		return ret
	}).(LogLocationSettingsResponseOutput)
}

// Log storage linked service reference.
func (o LogLocationSettingsResponsePtrOutput) LinkedServiceName() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v *LogLocationSettingsResponse) *LinkedServiceReferenceResponse {
		if v == nil {
			return nil
		}
		return &v.LinkedServiceName
	}).(LinkedServiceReferenceResponsePtrOutput)
}

// The path to storage for storing detailed logs of activity execution. Type: string (or Expression with resultType string).
func (o LogLocationSettingsResponsePtrOutput) Path() pulumi.AnyOutput {
	return o.ApplyT(func(v *LogLocationSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.AnyOutput)
}

// Log settings.
type LogSettings struct {
	// Specifies settings for copy activity log.
	CopyActivityLogSettings *CopyActivityLogSettings `pulumi:"copyActivityLogSettings"`
	// Specifies whether to enable copy activity log. Type: boolean (or Expression with resultType boolean).
	EnableCopyActivityLog interface{} `pulumi:"enableCopyActivityLog"`
	// Log location settings customer needs to provide when enabling log.
	LogLocationSettings LogLocationSettings `pulumi:"logLocationSettings"`
}

// LogSettingsInput is an input type that accepts LogSettingsArgs and LogSettingsOutput values.
// You can construct a concrete instance of `LogSettingsInput` via:
//
//	LogSettingsArgs{...}
type LogSettingsInput interface {
	pulumi.Input

	ToLogSettingsOutput() LogSettingsOutput
	ToLogSettingsOutputWithContext(context.Context) LogSettingsOutput
}

// Log settings.
type LogSettingsArgs struct {
	// Specifies settings for copy activity log.
	CopyActivityLogSettings CopyActivityLogSettingsPtrInput `pulumi:"copyActivityLogSettings"`
	// Specifies whether to enable copy activity log. Type: boolean (or Expression with resultType boolean).
	EnableCopyActivityLog pulumi.Input `pulumi:"enableCopyActivityLog"`
	// Log location settings customer needs to provide when enabling log.
	LogLocationSettings LogLocationSettingsInput `pulumi:"logLocationSettings"`
}

func (LogSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogSettings)(nil)).Elem()
}

func (i LogSettingsArgs) ToLogSettingsOutput() LogSettingsOutput {
	return i.ToLogSettingsOutputWithContext(context.Background())
}

func (i LogSettingsArgs) ToLogSettingsOutputWithContext(ctx context.Context) LogSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogSettingsOutput)
}

func (i LogSettingsArgs) ToLogSettingsPtrOutput() LogSettingsPtrOutput {
	return i.ToLogSettingsPtrOutputWithContext(context.Background())
}

func (i LogSettingsArgs) ToLogSettingsPtrOutputWithContext(ctx context.Context) LogSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogSettingsOutput).ToLogSettingsPtrOutputWithContext(ctx)
}

// LogSettingsPtrInput is an input type that accepts LogSettingsArgs, LogSettingsPtr and LogSettingsPtrOutput values.
// You can construct a concrete instance of `LogSettingsPtrInput` via:
//
//	        LogSettingsArgs{...}
//
//	or:
//
//	        nil
type LogSettingsPtrInput interface {
	pulumi.Input

	ToLogSettingsPtrOutput() LogSettingsPtrOutput
	ToLogSettingsPtrOutputWithContext(context.Context) LogSettingsPtrOutput
}

type logSettingsPtrType LogSettingsArgs

func LogSettingsPtr(v *LogSettingsArgs) LogSettingsPtrInput {
	return (*logSettingsPtrType)(v)
}

func (*logSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LogSettings)(nil)).Elem()
}

func (i *logSettingsPtrType) ToLogSettingsPtrOutput() LogSettingsPtrOutput {
	return i.ToLogSettingsPtrOutputWithContext(context.Background())
}

func (i *logSettingsPtrType) ToLogSettingsPtrOutputWithContext(ctx context.Context) LogSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogSettingsPtrOutput)
}

// Log settings.
type LogSettingsOutput struct{ *pulumi.OutputState }

func (LogSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogSettings)(nil)).Elem()
}

func (o LogSettingsOutput) ToLogSettingsOutput() LogSettingsOutput {
	return o
}

func (o LogSettingsOutput) ToLogSettingsOutputWithContext(ctx context.Context) LogSettingsOutput {
	return o
}

func (o LogSettingsOutput) ToLogSettingsPtrOutput() LogSettingsPtrOutput {
	return o.ToLogSettingsPtrOutputWithContext(context.Background())
}

func (o LogSettingsOutput) ToLogSettingsPtrOutputWithContext(ctx context.Context) LogSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LogSettings) *LogSettings {
		return &v
	}).(LogSettingsPtrOutput)
}

// Specifies settings for copy activity log.
func (o LogSettingsOutput) CopyActivityLogSettings() CopyActivityLogSettingsPtrOutput {
	return o.ApplyT(func(v LogSettings) *CopyActivityLogSettings { return v.CopyActivityLogSettings }).(CopyActivityLogSettingsPtrOutput)
}

// Specifies whether to enable copy activity log. Type: boolean (or Expression with resultType boolean).
func (o LogSettingsOutput) EnableCopyActivityLog() pulumi.AnyOutput {
	return o.ApplyT(func(v LogSettings) interface{} { return v.EnableCopyActivityLog }).(pulumi.AnyOutput)
}

// Log location settings customer needs to provide when enabling log.
func (o LogSettingsOutput) LogLocationSettings() LogLocationSettingsOutput {
	return o.ApplyT(func(v LogSettings) LogLocationSettings { return v.LogLocationSettings }).(LogLocationSettingsOutput)
}

type LogSettingsPtrOutput struct{ *pulumi.OutputState }

func (LogSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogSettings)(nil)).Elem()
}

func (o LogSettingsPtrOutput) ToLogSettingsPtrOutput() LogSettingsPtrOutput {
	return o
}

func (o LogSettingsPtrOutput) ToLogSettingsPtrOutputWithContext(ctx context.Context) LogSettingsPtrOutput {
	return o
}

func (o LogSettingsPtrOutput) Elem() LogSettingsOutput {
	return o.ApplyT(func(v *LogSettings) LogSettings {
		if v != nil {
			return *v
		}
		var ret LogSettings
		return ret
	}).(LogSettingsOutput)
}

// Specifies settings for copy activity log.
func (o LogSettingsPtrOutput) CopyActivityLogSettings() CopyActivityLogSettingsPtrOutput {
	return o.ApplyT(func(v *LogSettings) *CopyActivityLogSettings {
		if v == nil {
			return nil
		}
		return v.CopyActivityLogSettings
	}).(CopyActivityLogSettingsPtrOutput)
}

// Specifies whether to enable copy activity log. Type: boolean (or Expression with resultType boolean).
func (o LogSettingsPtrOutput) EnableCopyActivityLog() pulumi.AnyOutput {
	return o.ApplyT(func(v *LogSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.EnableCopyActivityLog
	}).(pulumi.AnyOutput)
}

// Log location settings customer needs to provide when enabling log.
func (o LogSettingsPtrOutput) LogLocationSettings() LogLocationSettingsPtrOutput {
	return o.ApplyT(func(v *LogSettings) *LogLocationSettings {
		if v == nil {
			return nil
		}
		return &v.LogLocationSettings
	}).(LogLocationSettingsPtrOutput)
}

// Log settings.
type LogSettingsResponse struct {
	// Specifies settings for copy activity log.
	CopyActivityLogSettings *CopyActivityLogSettingsResponse `pulumi:"copyActivityLogSettings"`
	// Specifies whether to enable copy activity log. Type: boolean (or Expression with resultType boolean).
	EnableCopyActivityLog interface{} `pulumi:"enableCopyActivityLog"`
	// Log location settings customer needs to provide when enabling log.
	LogLocationSettings LogLocationSettingsResponse `pulumi:"logLocationSettings"`
}

// Log settings.
type LogSettingsResponseOutput struct{ *pulumi.OutputState }

func (LogSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogSettingsResponse)(nil)).Elem()
}

func (o LogSettingsResponseOutput) ToLogSettingsResponseOutput() LogSettingsResponseOutput {
	return o
}

func (o LogSettingsResponseOutput) ToLogSettingsResponseOutputWithContext(ctx context.Context) LogSettingsResponseOutput {
	return o
}

// Specifies settings for copy activity log.
func (o LogSettingsResponseOutput) CopyActivityLogSettings() CopyActivityLogSettingsResponsePtrOutput {
	return o.ApplyT(func(v LogSettingsResponse) *CopyActivityLogSettingsResponse { return v.CopyActivityLogSettings }).(CopyActivityLogSettingsResponsePtrOutput)
}

// Specifies whether to enable copy activity log. Type: boolean (or Expression with resultType boolean).
func (o LogSettingsResponseOutput) EnableCopyActivityLog() pulumi.AnyOutput {
	return o.ApplyT(func(v LogSettingsResponse) interface{} { return v.EnableCopyActivityLog }).(pulumi.AnyOutput)
}

// Log location settings customer needs to provide when enabling log.
func (o LogSettingsResponseOutput) LogLocationSettings() LogLocationSettingsResponseOutput {
	return o.ApplyT(func(v LogSettingsResponse) LogLocationSettingsResponse { return v.LogLocationSettings }).(LogLocationSettingsResponseOutput)
}

type LogSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (LogSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogSettingsResponse)(nil)).Elem()
}

func (o LogSettingsResponsePtrOutput) ToLogSettingsResponsePtrOutput() LogSettingsResponsePtrOutput {
	return o
}

func (o LogSettingsResponsePtrOutput) ToLogSettingsResponsePtrOutputWithContext(ctx context.Context) LogSettingsResponsePtrOutput {
	return o
}

func (o LogSettingsResponsePtrOutput) Elem() LogSettingsResponseOutput {
	return o.ApplyT(func(v *LogSettingsResponse) LogSettingsResponse {
		if v != nil {
			return *v
		}
		var ret LogSettingsResponse
		return ret
	}).(LogSettingsResponseOutput)
}

// Specifies settings for copy activity log.
func (o LogSettingsResponsePtrOutput) CopyActivityLogSettings() CopyActivityLogSettingsResponsePtrOutput {
	return o.ApplyT(func(v *LogSettingsResponse) *CopyActivityLogSettingsResponse {
		if v == nil {
			return nil
		}
		return v.CopyActivityLogSettings
	}).(CopyActivityLogSettingsResponsePtrOutput)
}

// Specifies whether to enable copy activity log. Type: boolean (or Expression with resultType boolean).
func (o LogSettingsResponsePtrOutput) EnableCopyActivityLog() pulumi.AnyOutput {
	return o.ApplyT(func(v *LogSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.EnableCopyActivityLog
	}).(pulumi.AnyOutput)
}

// Log location settings customer needs to provide when enabling log.
func (o LogSettingsResponsePtrOutput) LogLocationSettings() LogLocationSettingsResponsePtrOutput {
	return o.ApplyT(func(v *LogSettingsResponse) *LogLocationSettingsResponse {
		if v == nil {
			return nil
		}
		return &v.LogLocationSettings
	}).(LogLocationSettingsResponsePtrOutput)
}

// (Deprecated. Please use LogSettings) Log storage settings.
type LogStorageSettings struct {
	// Specifies whether to enable reliable logging. Type: boolean (or Expression with resultType boolean).
	EnableReliableLogging interface{} `pulumi:"enableReliableLogging"`
	// Log storage linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Gets or sets the log level, support: Info, Warning. Type: string (or Expression with resultType string).
	LogLevel interface{} `pulumi:"logLevel"`
	// The path to storage for storing detailed logs of activity execution. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
}

// LogStorageSettingsInput is an input type that accepts LogStorageSettingsArgs and LogStorageSettingsOutput values.
// You can construct a concrete instance of `LogStorageSettingsInput` via:
//
//	LogStorageSettingsArgs{...}
type LogStorageSettingsInput interface {
	pulumi.Input

	ToLogStorageSettingsOutput() LogStorageSettingsOutput
	ToLogStorageSettingsOutputWithContext(context.Context) LogStorageSettingsOutput
}

// (Deprecated. Please use LogSettings) Log storage settings.
type LogStorageSettingsArgs struct {
	// Specifies whether to enable reliable logging. Type: boolean (or Expression with resultType boolean).
	EnableReliableLogging pulumi.Input `pulumi:"enableReliableLogging"`
	// Log storage linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Gets or sets the log level, support: Info, Warning. Type: string (or Expression with resultType string).
	LogLevel pulumi.Input `pulumi:"logLevel"`
	// The path to storage for storing detailed logs of activity execution. Type: string (or Expression with resultType string).
	Path pulumi.Input `pulumi:"path"`
}

func (LogStorageSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogStorageSettings)(nil)).Elem()
}

func (i LogStorageSettingsArgs) ToLogStorageSettingsOutput() LogStorageSettingsOutput {
	return i.ToLogStorageSettingsOutputWithContext(context.Background())
}

func (i LogStorageSettingsArgs) ToLogStorageSettingsOutputWithContext(ctx context.Context) LogStorageSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogStorageSettingsOutput)
}

func (i LogStorageSettingsArgs) ToLogStorageSettingsPtrOutput() LogStorageSettingsPtrOutput {
	return i.ToLogStorageSettingsPtrOutputWithContext(context.Background())
}

func (i LogStorageSettingsArgs) ToLogStorageSettingsPtrOutputWithContext(ctx context.Context) LogStorageSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogStorageSettingsOutput).ToLogStorageSettingsPtrOutputWithContext(ctx)
}

// LogStorageSettingsPtrInput is an input type that accepts LogStorageSettingsArgs, LogStorageSettingsPtr and LogStorageSettingsPtrOutput values.
// You can construct a concrete instance of `LogStorageSettingsPtrInput` via:
//
//	        LogStorageSettingsArgs{...}
//
//	or:
//
//	        nil
type LogStorageSettingsPtrInput interface {
	pulumi.Input

	ToLogStorageSettingsPtrOutput() LogStorageSettingsPtrOutput
	ToLogStorageSettingsPtrOutputWithContext(context.Context) LogStorageSettingsPtrOutput
}

type logStorageSettingsPtrType LogStorageSettingsArgs

func LogStorageSettingsPtr(v *LogStorageSettingsArgs) LogStorageSettingsPtrInput {
	return (*logStorageSettingsPtrType)(v)
}

func (*logStorageSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LogStorageSettings)(nil)).Elem()
}

func (i *logStorageSettingsPtrType) ToLogStorageSettingsPtrOutput() LogStorageSettingsPtrOutput {
	return i.ToLogStorageSettingsPtrOutputWithContext(context.Background())
}

func (i *logStorageSettingsPtrType) ToLogStorageSettingsPtrOutputWithContext(ctx context.Context) LogStorageSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogStorageSettingsPtrOutput)
}

// (Deprecated. Please use LogSettings) Log storage settings.
type LogStorageSettingsOutput struct{ *pulumi.OutputState }

func (LogStorageSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogStorageSettings)(nil)).Elem()
}

func (o LogStorageSettingsOutput) ToLogStorageSettingsOutput() LogStorageSettingsOutput {
	return o
}

func (o LogStorageSettingsOutput) ToLogStorageSettingsOutputWithContext(ctx context.Context) LogStorageSettingsOutput {
	return o
}

func (o LogStorageSettingsOutput) ToLogStorageSettingsPtrOutput() LogStorageSettingsPtrOutput {
	return o.ToLogStorageSettingsPtrOutputWithContext(context.Background())
}

func (o LogStorageSettingsOutput) ToLogStorageSettingsPtrOutputWithContext(ctx context.Context) LogStorageSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LogStorageSettings) *LogStorageSettings {
		return &v
	}).(LogStorageSettingsPtrOutput)
}

// Specifies whether to enable reliable logging. Type: boolean (or Expression with resultType boolean).
func (o LogStorageSettingsOutput) EnableReliableLogging() pulumi.AnyOutput {
	return o.ApplyT(func(v LogStorageSettings) interface{} { return v.EnableReliableLogging }).(pulumi.AnyOutput)
}

// Log storage linked service reference.
func (o LogStorageSettingsOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v LogStorageSettings) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Gets or sets the log level, support: Info, Warning. Type: string (or Expression with resultType string).
func (o LogStorageSettingsOutput) LogLevel() pulumi.AnyOutput {
	return o.ApplyT(func(v LogStorageSettings) interface{} { return v.LogLevel }).(pulumi.AnyOutput)
}

// The path to storage for storing detailed logs of activity execution. Type: string (or Expression with resultType string).
func (o LogStorageSettingsOutput) Path() pulumi.AnyOutput {
	return o.ApplyT(func(v LogStorageSettings) interface{} { return v.Path }).(pulumi.AnyOutput)
}

type LogStorageSettingsPtrOutput struct{ *pulumi.OutputState }

func (LogStorageSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogStorageSettings)(nil)).Elem()
}

func (o LogStorageSettingsPtrOutput) ToLogStorageSettingsPtrOutput() LogStorageSettingsPtrOutput {
	return o
}

func (o LogStorageSettingsPtrOutput) ToLogStorageSettingsPtrOutputWithContext(ctx context.Context) LogStorageSettingsPtrOutput {
	return o
}

func (o LogStorageSettingsPtrOutput) Elem() LogStorageSettingsOutput {
	return o.ApplyT(func(v *LogStorageSettings) LogStorageSettings {
		if v != nil {
			return *v
		}
		var ret LogStorageSettings
		return ret
	}).(LogStorageSettingsOutput)
}

// Specifies whether to enable reliable logging. Type: boolean (or Expression with resultType boolean).
func (o LogStorageSettingsPtrOutput) EnableReliableLogging() pulumi.AnyOutput {
	return o.ApplyT(func(v *LogStorageSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.EnableReliableLogging
	}).(pulumi.AnyOutput)
}

// Log storage linked service reference.
func (o LogStorageSettingsPtrOutput) LinkedServiceName() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v *LogStorageSettings) *LinkedServiceReference {
		if v == nil {
			return nil
		}
		return &v.LinkedServiceName
	}).(LinkedServiceReferencePtrOutput)
}

// Gets or sets the log level, support: Info, Warning. Type: string (or Expression with resultType string).
func (o LogStorageSettingsPtrOutput) LogLevel() pulumi.AnyOutput {
	return o.ApplyT(func(v *LogStorageSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.LogLevel
	}).(pulumi.AnyOutput)
}

// The path to storage for storing detailed logs of activity execution. Type: string (or Expression with resultType string).
func (o LogStorageSettingsPtrOutput) Path() pulumi.AnyOutput {
	return o.ApplyT(func(v *LogStorageSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.AnyOutput)
}

// (Deprecated. Please use LogSettings) Log storage settings.
type LogStorageSettingsResponse struct {
	// Specifies whether to enable reliable logging. Type: boolean (or Expression with resultType boolean).
	EnableReliableLogging interface{} `pulumi:"enableReliableLogging"`
	// Log storage linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Gets or sets the log level, support: Info, Warning. Type: string (or Expression with resultType string).
	LogLevel interface{} `pulumi:"logLevel"`
	// The path to storage for storing detailed logs of activity execution. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
}

// (Deprecated. Please use LogSettings) Log storage settings.
type LogStorageSettingsResponseOutput struct{ *pulumi.OutputState }

func (LogStorageSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogStorageSettingsResponse)(nil)).Elem()
}

func (o LogStorageSettingsResponseOutput) ToLogStorageSettingsResponseOutput() LogStorageSettingsResponseOutput {
	return o
}

func (o LogStorageSettingsResponseOutput) ToLogStorageSettingsResponseOutputWithContext(ctx context.Context) LogStorageSettingsResponseOutput {
	return o
}

// Specifies whether to enable reliable logging. Type: boolean (or Expression with resultType boolean).
func (o LogStorageSettingsResponseOutput) EnableReliableLogging() pulumi.AnyOutput {
	return o.ApplyT(func(v LogStorageSettingsResponse) interface{} { return v.EnableReliableLogging }).(pulumi.AnyOutput)
}

// Log storage linked service reference.
func (o LogStorageSettingsResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v LogStorageSettingsResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Gets or sets the log level, support: Info, Warning. Type: string (or Expression with resultType string).
func (o LogStorageSettingsResponseOutput) LogLevel() pulumi.AnyOutput {
	return o.ApplyT(func(v LogStorageSettingsResponse) interface{} { return v.LogLevel }).(pulumi.AnyOutput)
}

// The path to storage for storing detailed logs of activity execution. Type: string (or Expression with resultType string).
func (o LogStorageSettingsResponseOutput) Path() pulumi.AnyOutput {
	return o.ApplyT(func(v LogStorageSettingsResponse) interface{} { return v.Path }).(pulumi.AnyOutput)
}

type LogStorageSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (LogStorageSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogStorageSettingsResponse)(nil)).Elem()
}

func (o LogStorageSettingsResponsePtrOutput) ToLogStorageSettingsResponsePtrOutput() LogStorageSettingsResponsePtrOutput {
	return o
}

func (o LogStorageSettingsResponsePtrOutput) ToLogStorageSettingsResponsePtrOutputWithContext(ctx context.Context) LogStorageSettingsResponsePtrOutput {
	return o
}

func (o LogStorageSettingsResponsePtrOutput) Elem() LogStorageSettingsResponseOutput {
	return o.ApplyT(func(v *LogStorageSettingsResponse) LogStorageSettingsResponse {
		if v != nil {
			return *v
		}
		var ret LogStorageSettingsResponse
		return ret
	}).(LogStorageSettingsResponseOutput)
}

// Specifies whether to enable reliable logging. Type: boolean (or Expression with resultType boolean).
func (o LogStorageSettingsResponsePtrOutput) EnableReliableLogging() pulumi.AnyOutput {
	return o.ApplyT(func(v *LogStorageSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.EnableReliableLogging
	}).(pulumi.AnyOutput)
}

// Log storage linked service reference.
func (o LogStorageSettingsResponsePtrOutput) LinkedServiceName() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v *LogStorageSettingsResponse) *LinkedServiceReferenceResponse {
		if v == nil {
			return nil
		}
		return &v.LinkedServiceName
	}).(LinkedServiceReferenceResponsePtrOutput)
}

// Gets or sets the log level, support: Info, Warning. Type: string (or Expression with resultType string).
func (o LogStorageSettingsResponsePtrOutput) LogLevel() pulumi.AnyOutput {
	return o.ApplyT(func(v *LogStorageSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.LogLevel
	}).(pulumi.AnyOutput)
}

// The path to storage for storing detailed logs of activity execution. Type: string (or Expression with resultType string).
func (o LogStorageSettingsResponsePtrOutput) Path() pulumi.AnyOutput {
	return o.ApplyT(func(v *LogStorageSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.AnyOutput)
}

// Lookup activity.
type LookupActivity struct {
	// Lookup activity dataset reference.
	Dataset DatasetReference `pulumi:"dataset"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Whether to return first row or all rows. Default value is true. Type: boolean (or Expression with resultType boolean).
	FirstRowOnly interface{} `pulumi:"firstRowOnly"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Dataset-specific source properties, same as copy activity source.
	Source interface{} `pulumi:"source"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'Lookup'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// LookupActivityInput is an input type that accepts LookupActivityArgs and LookupActivityOutput values.
// You can construct a concrete instance of `LookupActivityInput` via:
//
//	LookupActivityArgs{...}
type LookupActivityInput interface {
	pulumi.Input

	ToLookupActivityOutput() LookupActivityOutput
	ToLookupActivityOutputWithContext(context.Context) LookupActivityOutput
}

// Lookup activity.
type LookupActivityArgs struct {
	// Lookup activity dataset reference.
	Dataset DatasetReferenceInput `pulumi:"dataset"`
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Whether to return first row or all rows. Default value is true. Type: boolean (or Expression with resultType boolean).
	FirstRowOnly pulumi.Input `pulumi:"firstRowOnly"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferencePtrInput `pulumi:"linkedServiceName"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs pulumi.StringPtrInput `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy ActivityPolicyPtrInput `pulumi:"policy"`
	// Dataset-specific source properties, same as copy activity source.
	Source pulumi.Input `pulumi:"source"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Type of activity.
	// Expected value is 'Lookup'.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
}

func (LookupActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupActivity)(nil)).Elem()
}

func (i LookupActivityArgs) ToLookupActivityOutput() LookupActivityOutput {
	return i.ToLookupActivityOutputWithContext(context.Background())
}

func (i LookupActivityArgs) ToLookupActivityOutputWithContext(ctx context.Context) LookupActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LookupActivityOutput)
}

// Lookup activity.
type LookupActivityOutput struct{ *pulumi.OutputState }

func (LookupActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupActivity)(nil)).Elem()
}

func (o LookupActivityOutput) ToLookupActivityOutput() LookupActivityOutput {
	return o
}

func (o LookupActivityOutput) ToLookupActivityOutputWithContext(ctx context.Context) LookupActivityOutput {
	return o
}

// Lookup activity dataset reference.
func (o LookupActivityOutput) Dataset() DatasetReferenceOutput {
	return o.ApplyT(func(v LookupActivity) DatasetReference { return v.Dataset }).(DatasetReferenceOutput)
}

// Activity depends on condition.
func (o LookupActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v LookupActivity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o LookupActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupActivity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether to return first row or all rows. Default value is true. Type: boolean (or Expression with resultType boolean).
func (o LookupActivityOutput) FirstRowOnly() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupActivity) interface{} { return v.FirstRowOnly }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o LookupActivityOutput) LinkedServiceName() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v LookupActivity) *LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferencePtrOutput)
}

// Activity name.
func (o LookupActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupActivity) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o LookupActivityOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupActivity) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o LookupActivityOutput) Policy() ActivityPolicyPtrOutput {
	return o.ApplyT(func(v LookupActivity) *ActivityPolicy { return v.Policy }).(ActivityPolicyPtrOutput)
}

// Dataset-specific source properties, same as copy activity source.
func (o LookupActivityOutput) Source() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupActivity) interface{} { return v.Source }).(pulumi.AnyOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o LookupActivityOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupActivity) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'Lookup'.
func (o LookupActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupActivity) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o LookupActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v LookupActivity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

// Lookup activity.
type LookupActivityResponse struct {
	// Lookup activity dataset reference.
	Dataset DatasetReferenceResponse `pulumi:"dataset"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Whether to return first row or all rows. Default value is true. Type: boolean (or Expression with resultType boolean).
	FirstRowOnly interface{} `pulumi:"firstRowOnly"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Dataset-specific source properties, same as copy activity source.
	Source interface{} `pulumi:"source"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'Lookup'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Lookup activity.
type LookupActivityResponseOutput struct{ *pulumi.OutputState }

func (LookupActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupActivityResponse)(nil)).Elem()
}

func (o LookupActivityResponseOutput) ToLookupActivityResponseOutput() LookupActivityResponseOutput {
	return o
}

func (o LookupActivityResponseOutput) ToLookupActivityResponseOutputWithContext(ctx context.Context) LookupActivityResponseOutput {
	return o
}

// Lookup activity dataset reference.
func (o LookupActivityResponseOutput) Dataset() DatasetReferenceResponseOutput {
	return o.ApplyT(func(v LookupActivityResponse) DatasetReferenceResponse { return v.Dataset }).(DatasetReferenceResponseOutput)
}

// Activity depends on condition.
func (o LookupActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v LookupActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o LookupActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether to return first row or all rows. Default value is true. Type: boolean (or Expression with resultType boolean).
func (o LookupActivityResponseOutput) FirstRowOnly() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupActivityResponse) interface{} { return v.FirstRowOnly }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o LookupActivityResponseOutput) LinkedServiceName() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v LookupActivityResponse) *LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponsePtrOutput)
}

// Activity name.
func (o LookupActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o LookupActivityResponseOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupActivityResponse) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o LookupActivityResponseOutput) Policy() ActivityPolicyResponsePtrOutput {
	return o.ApplyT(func(v LookupActivityResponse) *ActivityPolicyResponse { return v.Policy }).(ActivityPolicyResponsePtrOutput)
}

// Dataset-specific source properties, same as copy activity source.
func (o LookupActivityResponseOutput) Source() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupActivityResponse) interface{} { return v.Source }).(pulumi.AnyOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o LookupActivityResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupActivityResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'Lookup'.
func (o LookupActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o LookupActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v LookupActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

// Magento server linked service.
type MagentoLinkedService struct {
	// The access token from Magento.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The URL of the Magento instance. (i.e. 192.168.222.110/magento3)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Magento'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// MagentoLinkedServiceInput is an input type that accepts MagentoLinkedServiceArgs and MagentoLinkedServiceOutput values.
// You can construct a concrete instance of `MagentoLinkedServiceInput` via:
//
//	MagentoLinkedServiceArgs{...}
type MagentoLinkedServiceInput interface {
	pulumi.Input

	ToMagentoLinkedServiceOutput() MagentoLinkedServiceOutput
	ToMagentoLinkedServiceOutputWithContext(context.Context) MagentoLinkedServiceOutput
}

// Magento server linked service.
type MagentoLinkedServiceArgs struct {
	// The access token from Magento.
	AccessToken pulumi.Input `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// The URL of the Magento instance. (i.e. 192.168.222.110/magento3)
	Host pulumi.Input `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Magento'.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
}

func (MagentoLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MagentoLinkedService)(nil)).Elem()
}

func (i MagentoLinkedServiceArgs) ToMagentoLinkedServiceOutput() MagentoLinkedServiceOutput {
	return i.ToMagentoLinkedServiceOutputWithContext(context.Background())
}

func (i MagentoLinkedServiceArgs) ToMagentoLinkedServiceOutputWithContext(ctx context.Context) MagentoLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MagentoLinkedServiceOutput)
}

// Magento server linked service.
type MagentoLinkedServiceOutput struct{ *pulumi.OutputState }

func (MagentoLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MagentoLinkedService)(nil)).Elem()
}

func (o MagentoLinkedServiceOutput) ToMagentoLinkedServiceOutput() MagentoLinkedServiceOutput {
	return o
}

func (o MagentoLinkedServiceOutput) ToMagentoLinkedServiceOutputWithContext(ctx context.Context) MagentoLinkedServiceOutput {
	return o
}

// The access token from Magento.
func (o MagentoLinkedServiceOutput) AccessToken() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoLinkedService) interface{} { return v.AccessToken }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o MagentoLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MagentoLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o MagentoLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v MagentoLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o MagentoLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MagentoLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o MagentoLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MagentoLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The URL of the Magento instance. (i.e. 192.168.222.110/magento3)
func (o MagentoLinkedServiceOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoLinkedService) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o MagentoLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v MagentoLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
// Expected value is 'Magento'.
func (o MagentoLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MagentoLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o MagentoLinkedServiceOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoLinkedService) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o MagentoLinkedServiceOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoLinkedService) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o MagentoLinkedServiceOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoLinkedService) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// Magento server linked service.
type MagentoLinkedServiceResponse struct {
	// The access token from Magento.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The URL of the Magento instance. (i.e. 192.168.222.110/magento3)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Magento'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Magento server linked service.
type MagentoLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (MagentoLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MagentoLinkedServiceResponse)(nil)).Elem()
}

func (o MagentoLinkedServiceResponseOutput) ToMagentoLinkedServiceResponseOutput() MagentoLinkedServiceResponseOutput {
	return o
}

func (o MagentoLinkedServiceResponseOutput) ToMagentoLinkedServiceResponseOutputWithContext(ctx context.Context) MagentoLinkedServiceResponseOutput {
	return o
}

// The access token from Magento.
func (o MagentoLinkedServiceResponseOutput) AccessToken() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoLinkedServiceResponse) interface{} { return v.AccessToken }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o MagentoLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MagentoLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o MagentoLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v MagentoLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o MagentoLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MagentoLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o MagentoLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MagentoLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The URL of the Magento instance. (i.e. 192.168.222.110/magento3)
func (o MagentoLinkedServiceResponseOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoLinkedServiceResponse) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o MagentoLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v MagentoLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
// Expected value is 'Magento'.
func (o MagentoLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MagentoLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o MagentoLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoLinkedServiceResponse) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o MagentoLinkedServiceResponseOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoLinkedServiceResponse) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o MagentoLinkedServiceResponseOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoLinkedServiceResponse) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// Magento server dataset.
type MagentoObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'MagentoObject'.
	Type string `pulumi:"type"`
}

// MagentoObjectDatasetInput is an input type that accepts MagentoObjectDatasetArgs and MagentoObjectDatasetOutput values.
// You can construct a concrete instance of `MagentoObjectDatasetInput` via:
//
//	MagentoObjectDatasetArgs{...}
type MagentoObjectDatasetInput interface {
	pulumi.Input

	ToMagentoObjectDatasetOutput() MagentoObjectDatasetOutput
	ToMagentoObjectDatasetOutputWithContext(context.Context) MagentoObjectDatasetOutput
}

// Magento server dataset.
type MagentoObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'MagentoObject'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MagentoObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MagentoObjectDataset)(nil)).Elem()
}

func (i MagentoObjectDatasetArgs) ToMagentoObjectDatasetOutput() MagentoObjectDatasetOutput {
	return i.ToMagentoObjectDatasetOutputWithContext(context.Background())
}

func (i MagentoObjectDatasetArgs) ToMagentoObjectDatasetOutputWithContext(ctx context.Context) MagentoObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MagentoObjectDatasetOutput)
}

// Magento server dataset.
type MagentoObjectDatasetOutput struct{ *pulumi.OutputState }

func (MagentoObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MagentoObjectDataset)(nil)).Elem()
}

func (o MagentoObjectDatasetOutput) ToMagentoObjectDatasetOutput() MagentoObjectDatasetOutput {
	return o
}

func (o MagentoObjectDatasetOutput) ToMagentoObjectDatasetOutputWithContext(ctx context.Context) MagentoObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o MagentoObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MagentoObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o MagentoObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MagentoObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o MagentoObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v MagentoObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o MagentoObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v MagentoObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o MagentoObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v MagentoObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o MagentoObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o MagentoObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o MagentoObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'MagentoObject'.
func (o MagentoObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MagentoObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Magento server dataset.
type MagentoObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'MagentoObject'.
	Type string `pulumi:"type"`
}

// Magento server dataset.
type MagentoObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (MagentoObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MagentoObjectDatasetResponse)(nil)).Elem()
}

func (o MagentoObjectDatasetResponseOutput) ToMagentoObjectDatasetResponseOutput() MagentoObjectDatasetResponseOutput {
	return o
}

func (o MagentoObjectDatasetResponseOutput) ToMagentoObjectDatasetResponseOutputWithContext(ctx context.Context) MagentoObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o MagentoObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MagentoObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o MagentoObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MagentoObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o MagentoObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v MagentoObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o MagentoObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v MagentoObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o MagentoObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v MagentoObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o MagentoObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o MagentoObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o MagentoObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'MagentoObject'.
func (o MagentoObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MagentoObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Magento server source.
type MagentoSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MagentoSource'.
	Type string `pulumi:"type"`
}

// MagentoSourceInput is an input type that accepts MagentoSourceArgs and MagentoSourceOutput values.
// You can construct a concrete instance of `MagentoSourceInput` via:
//
//	MagentoSourceArgs{...}
type MagentoSourceInput interface {
	pulumi.Input

	ToMagentoSourceOutput() MagentoSourceOutput
	ToMagentoSourceOutputWithContext(context.Context) MagentoSourceOutput
}

// A copy activity Magento server source.
type MagentoSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MagentoSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MagentoSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MagentoSource)(nil)).Elem()
}

func (i MagentoSourceArgs) ToMagentoSourceOutput() MagentoSourceOutput {
	return i.ToMagentoSourceOutputWithContext(context.Background())
}

func (i MagentoSourceArgs) ToMagentoSourceOutputWithContext(ctx context.Context) MagentoSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MagentoSourceOutput)
}

// A copy activity Magento server source.
type MagentoSourceOutput struct{ *pulumi.OutputState }

func (MagentoSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MagentoSource)(nil)).Elem()
}

func (o MagentoSourceOutput) ToMagentoSourceOutput() MagentoSourceOutput {
	return o
}

func (o MagentoSourceOutput) ToMagentoSourceOutputWithContext(ctx context.Context) MagentoSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o MagentoSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o MagentoSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o MagentoSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o MagentoSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o MagentoSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o MagentoSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o MagentoSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'MagentoSource'.
func (o MagentoSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MagentoSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Magento server source.
type MagentoSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MagentoSource'.
	Type string `pulumi:"type"`
}

// A copy activity Magento server source.
type MagentoSourceResponseOutput struct{ *pulumi.OutputState }

func (MagentoSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MagentoSourceResponse)(nil)).Elem()
}

func (o MagentoSourceResponseOutput) ToMagentoSourceResponseOutput() MagentoSourceResponseOutput {
	return o
}

func (o MagentoSourceResponseOutput) ToMagentoSourceResponseOutputWithContext(ctx context.Context) MagentoSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o MagentoSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o MagentoSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o MagentoSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o MagentoSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o MagentoSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o MagentoSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o MagentoSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v MagentoSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'MagentoSource'.
func (o MagentoSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MagentoSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Managed identity credential.
type ManagedIdentityCredential struct {
	// List of tags that can be used for describing the Credential.
	Annotations []interface{} `pulumi:"annotations"`
	// Credential description.
	Description *string `pulumi:"description"`
	// The resource id of user assigned managed identity
	ResourceId *string `pulumi:"resourceId"`
	// Type of credential.
	// Expected value is 'ManagedIdentity'.
	Type string `pulumi:"type"`
}

// ManagedIdentityCredentialInput is an input type that accepts ManagedIdentityCredentialArgs and ManagedIdentityCredentialOutput values.
// You can construct a concrete instance of `ManagedIdentityCredentialInput` via:
//
//	ManagedIdentityCredentialArgs{...}
type ManagedIdentityCredentialInput interface {
	pulumi.Input

	ToManagedIdentityCredentialOutput() ManagedIdentityCredentialOutput
	ToManagedIdentityCredentialOutputWithContext(context.Context) ManagedIdentityCredentialOutput
}

// Managed identity credential.
type ManagedIdentityCredentialArgs struct {
	// List of tags that can be used for describing the Credential.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Credential description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The resource id of user assigned managed identity
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
	// Type of credential.
	// Expected value is 'ManagedIdentity'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ManagedIdentityCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentityCredential)(nil)).Elem()
}

func (i ManagedIdentityCredentialArgs) ToManagedIdentityCredentialOutput() ManagedIdentityCredentialOutput {
	return i.ToManagedIdentityCredentialOutputWithContext(context.Background())
}

func (i ManagedIdentityCredentialArgs) ToManagedIdentityCredentialOutputWithContext(ctx context.Context) ManagedIdentityCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentityCredentialOutput)
}

// Managed identity credential.
type ManagedIdentityCredentialOutput struct{ *pulumi.OutputState }

func (ManagedIdentityCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentityCredential)(nil)).Elem()
}

func (o ManagedIdentityCredentialOutput) ToManagedIdentityCredentialOutput() ManagedIdentityCredentialOutput {
	return o
}

func (o ManagedIdentityCredentialOutput) ToManagedIdentityCredentialOutputWithContext(ctx context.Context) ManagedIdentityCredentialOutput {
	return o
}

// List of tags that can be used for describing the Credential.
func (o ManagedIdentityCredentialOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ManagedIdentityCredential) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Credential description.
func (o ManagedIdentityCredentialOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentityCredential) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The resource id of user assigned managed identity
func (o ManagedIdentityCredentialOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentityCredential) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// Type of credential.
// Expected value is 'ManagedIdentity'.
func (o ManagedIdentityCredentialOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentityCredential) string { return v.Type }).(pulumi.StringOutput)
}

// Managed identity credential.
type ManagedIdentityCredentialResponse struct {
	// List of tags that can be used for describing the Credential.
	Annotations []interface{} `pulumi:"annotations"`
	// Credential description.
	Description *string `pulumi:"description"`
	// The resource id of user assigned managed identity
	ResourceId *string `pulumi:"resourceId"`
	// Type of credential.
	// Expected value is 'ManagedIdentity'.
	Type string `pulumi:"type"`
}

// Managed identity credential.
type ManagedIdentityCredentialResponseOutput struct{ *pulumi.OutputState }

func (ManagedIdentityCredentialResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentityCredentialResponse)(nil)).Elem()
}

func (o ManagedIdentityCredentialResponseOutput) ToManagedIdentityCredentialResponseOutput() ManagedIdentityCredentialResponseOutput {
	return o
}

func (o ManagedIdentityCredentialResponseOutput) ToManagedIdentityCredentialResponseOutputWithContext(ctx context.Context) ManagedIdentityCredentialResponseOutput {
	return o
}

// List of tags that can be used for describing the Credential.
func (o ManagedIdentityCredentialResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ManagedIdentityCredentialResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Credential description.
func (o ManagedIdentityCredentialResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentityCredentialResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The resource id of user assigned managed identity
func (o ManagedIdentityCredentialResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentityCredentialResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// Type of credential.
// Expected value is 'ManagedIdentity'.
func (o ManagedIdentityCredentialResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentityCredentialResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Managed integration runtime, including managed elastic and managed dedicated integration runtimes.
type ManagedIntegrationRuntime struct {
	// The compute resource for managed integration runtime.
	ComputeProperties *IntegrationRuntimeComputeProperties `pulumi:"computeProperties"`
	// The name of virtual network to which Azure-SSIS integration runtime will join
	CustomerVirtualNetwork *IntegrationRuntimeCustomerVirtualNetwork `pulumi:"customerVirtualNetwork"`
	// Integration runtime description.
	Description *string `pulumi:"description"`
	// Managed Virtual Network reference.
	ManagedVirtualNetwork *ManagedVirtualNetworkReference `pulumi:"managedVirtualNetwork"`
	// SSIS properties for managed integration runtime.
	SsisProperties *IntegrationRuntimeSsisProperties `pulumi:"ssisProperties"`
	// The type of integration runtime.
	// Expected value is 'Managed'.
	Type string `pulumi:"type"`
}

// ManagedIntegrationRuntimeInput is an input type that accepts ManagedIntegrationRuntimeArgs and ManagedIntegrationRuntimeOutput values.
// You can construct a concrete instance of `ManagedIntegrationRuntimeInput` via:
//
//	ManagedIntegrationRuntimeArgs{...}
type ManagedIntegrationRuntimeInput interface {
	pulumi.Input

	ToManagedIntegrationRuntimeOutput() ManagedIntegrationRuntimeOutput
	ToManagedIntegrationRuntimeOutputWithContext(context.Context) ManagedIntegrationRuntimeOutput
}

// Managed integration runtime, including managed elastic and managed dedicated integration runtimes.
type ManagedIntegrationRuntimeArgs struct {
	// The compute resource for managed integration runtime.
	ComputeProperties IntegrationRuntimeComputePropertiesPtrInput `pulumi:"computeProperties"`
	// The name of virtual network to which Azure-SSIS integration runtime will join
	CustomerVirtualNetwork IntegrationRuntimeCustomerVirtualNetworkPtrInput `pulumi:"customerVirtualNetwork"`
	// Integration runtime description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Managed Virtual Network reference.
	ManagedVirtualNetwork ManagedVirtualNetworkReferencePtrInput `pulumi:"managedVirtualNetwork"`
	// SSIS properties for managed integration runtime.
	SsisProperties IntegrationRuntimeSsisPropertiesPtrInput `pulumi:"ssisProperties"`
	// The type of integration runtime.
	// Expected value is 'Managed'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ManagedIntegrationRuntimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIntegrationRuntime)(nil)).Elem()
}

func (i ManagedIntegrationRuntimeArgs) ToManagedIntegrationRuntimeOutput() ManagedIntegrationRuntimeOutput {
	return i.ToManagedIntegrationRuntimeOutputWithContext(context.Background())
}

func (i ManagedIntegrationRuntimeArgs) ToManagedIntegrationRuntimeOutputWithContext(ctx context.Context) ManagedIntegrationRuntimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIntegrationRuntimeOutput)
}

// Managed integration runtime, including managed elastic and managed dedicated integration runtimes.
type ManagedIntegrationRuntimeOutput struct{ *pulumi.OutputState }

func (ManagedIntegrationRuntimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIntegrationRuntime)(nil)).Elem()
}

func (o ManagedIntegrationRuntimeOutput) ToManagedIntegrationRuntimeOutput() ManagedIntegrationRuntimeOutput {
	return o
}

func (o ManagedIntegrationRuntimeOutput) ToManagedIntegrationRuntimeOutputWithContext(ctx context.Context) ManagedIntegrationRuntimeOutput {
	return o
}

// The compute resource for managed integration runtime.
func (o ManagedIntegrationRuntimeOutput) ComputeProperties() IntegrationRuntimeComputePropertiesPtrOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntime) *IntegrationRuntimeComputeProperties { return v.ComputeProperties }).(IntegrationRuntimeComputePropertiesPtrOutput)
}

// The name of virtual network to which Azure-SSIS integration runtime will join
func (o ManagedIntegrationRuntimeOutput) CustomerVirtualNetwork() IntegrationRuntimeCustomerVirtualNetworkPtrOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntime) *IntegrationRuntimeCustomerVirtualNetwork {
		return v.CustomerVirtualNetwork
	}).(IntegrationRuntimeCustomerVirtualNetworkPtrOutput)
}

// Integration runtime description.
func (o ManagedIntegrationRuntimeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntime) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Managed Virtual Network reference.
func (o ManagedIntegrationRuntimeOutput) ManagedVirtualNetwork() ManagedVirtualNetworkReferencePtrOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntime) *ManagedVirtualNetworkReference { return v.ManagedVirtualNetwork }).(ManagedVirtualNetworkReferencePtrOutput)
}

// SSIS properties for managed integration runtime.
func (o ManagedIntegrationRuntimeOutput) SsisProperties() IntegrationRuntimeSsisPropertiesPtrOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntime) *IntegrationRuntimeSsisProperties { return v.SsisProperties }).(IntegrationRuntimeSsisPropertiesPtrOutput)
}

// The type of integration runtime.
// Expected value is 'Managed'.
func (o ManagedIntegrationRuntimeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntime) string { return v.Type }).(pulumi.StringOutput)
}

// Error definition for managed integration runtime.
type ManagedIntegrationRuntimeErrorResponse struct {
	// Error code.
	Code string `pulumi:"code"`
	// Error message.
	Message string `pulumi:"message"`
	// Managed integration runtime error parameters.
	Parameters []string `pulumi:"parameters"`
	// The time when the error occurred.
	Time string `pulumi:"time"`
}

// Error definition for managed integration runtime.
type ManagedIntegrationRuntimeErrorResponseOutput struct{ *pulumi.OutputState }

func (ManagedIntegrationRuntimeErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIntegrationRuntimeErrorResponse)(nil)).Elem()
}

func (o ManagedIntegrationRuntimeErrorResponseOutput) ToManagedIntegrationRuntimeErrorResponseOutput() ManagedIntegrationRuntimeErrorResponseOutput {
	return o
}

func (o ManagedIntegrationRuntimeErrorResponseOutput) ToManagedIntegrationRuntimeErrorResponseOutputWithContext(ctx context.Context) ManagedIntegrationRuntimeErrorResponseOutput {
	return o
}

// Error code.
func (o ManagedIntegrationRuntimeErrorResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeErrorResponse) string { return v.Code }).(pulumi.StringOutput)
}

// Error message.
func (o ManagedIntegrationRuntimeErrorResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeErrorResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Managed integration runtime error parameters.
func (o ManagedIntegrationRuntimeErrorResponseOutput) Parameters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeErrorResponse) []string { return v.Parameters }).(pulumi.StringArrayOutput)
}

// The time when the error occurred.
func (o ManagedIntegrationRuntimeErrorResponseOutput) Time() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeErrorResponse) string { return v.Time }).(pulumi.StringOutput)
}

type ManagedIntegrationRuntimeErrorResponseArrayOutput struct{ *pulumi.OutputState }

func (ManagedIntegrationRuntimeErrorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedIntegrationRuntimeErrorResponse)(nil)).Elem()
}

func (o ManagedIntegrationRuntimeErrorResponseArrayOutput) ToManagedIntegrationRuntimeErrorResponseArrayOutput() ManagedIntegrationRuntimeErrorResponseArrayOutput {
	return o
}

func (o ManagedIntegrationRuntimeErrorResponseArrayOutput) ToManagedIntegrationRuntimeErrorResponseArrayOutputWithContext(ctx context.Context) ManagedIntegrationRuntimeErrorResponseArrayOutput {
	return o
}

func (o ManagedIntegrationRuntimeErrorResponseArrayOutput) Index(i pulumi.IntInput) ManagedIntegrationRuntimeErrorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedIntegrationRuntimeErrorResponse {
		return vs[0].([]ManagedIntegrationRuntimeErrorResponse)[vs[1].(int)]
	}).(ManagedIntegrationRuntimeErrorResponseOutput)
}

// Properties of integration runtime node.
type ManagedIntegrationRuntimeNodeResponse struct {
	// The errors that occurred on this integration runtime node.
	Errors []ManagedIntegrationRuntimeErrorResponse `pulumi:"errors"`
	// The managed integration runtime node id.
	NodeId string `pulumi:"nodeId"`
	// The managed integration runtime node status.
	Status string `pulumi:"status"`
}

// Properties of integration runtime node.
type ManagedIntegrationRuntimeNodeResponseOutput struct{ *pulumi.OutputState }

func (ManagedIntegrationRuntimeNodeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIntegrationRuntimeNodeResponse)(nil)).Elem()
}

func (o ManagedIntegrationRuntimeNodeResponseOutput) ToManagedIntegrationRuntimeNodeResponseOutput() ManagedIntegrationRuntimeNodeResponseOutput {
	return o
}

func (o ManagedIntegrationRuntimeNodeResponseOutput) ToManagedIntegrationRuntimeNodeResponseOutputWithContext(ctx context.Context) ManagedIntegrationRuntimeNodeResponseOutput {
	return o
}

// The errors that occurred on this integration runtime node.
func (o ManagedIntegrationRuntimeNodeResponseOutput) Errors() ManagedIntegrationRuntimeErrorResponseArrayOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeNodeResponse) []ManagedIntegrationRuntimeErrorResponse {
		return v.Errors
	}).(ManagedIntegrationRuntimeErrorResponseArrayOutput)
}

// The managed integration runtime node id.
func (o ManagedIntegrationRuntimeNodeResponseOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeNodeResponse) string { return v.NodeId }).(pulumi.StringOutput)
}

// The managed integration runtime node status.
func (o ManagedIntegrationRuntimeNodeResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeNodeResponse) string { return v.Status }).(pulumi.StringOutput)
}

type ManagedIntegrationRuntimeNodeResponseArrayOutput struct{ *pulumi.OutputState }

func (ManagedIntegrationRuntimeNodeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedIntegrationRuntimeNodeResponse)(nil)).Elem()
}

func (o ManagedIntegrationRuntimeNodeResponseArrayOutput) ToManagedIntegrationRuntimeNodeResponseArrayOutput() ManagedIntegrationRuntimeNodeResponseArrayOutput {
	return o
}

func (o ManagedIntegrationRuntimeNodeResponseArrayOutput) ToManagedIntegrationRuntimeNodeResponseArrayOutputWithContext(ctx context.Context) ManagedIntegrationRuntimeNodeResponseArrayOutput {
	return o
}

func (o ManagedIntegrationRuntimeNodeResponseArrayOutput) Index(i pulumi.IntInput) ManagedIntegrationRuntimeNodeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedIntegrationRuntimeNodeResponse {
		return vs[0].([]ManagedIntegrationRuntimeNodeResponse)[vs[1].(int)]
	}).(ManagedIntegrationRuntimeNodeResponseOutput)
}

// Properties of managed integration runtime operation result.
type ManagedIntegrationRuntimeOperationResultResponse struct {
	// The activity id for the operation request.
	ActivityId string `pulumi:"activityId"`
	// The error code.
	ErrorCode string `pulumi:"errorCode"`
	// Managed integration runtime error parameters.
	Parameters []string `pulumi:"parameters"`
	// The operation result.
	Result string `pulumi:"result"`
	// The start time of the operation.
	StartTime string `pulumi:"startTime"`
	// The operation type. Could be start or stop.
	Type string `pulumi:"type"`
}

// Properties of managed integration runtime operation result.
type ManagedIntegrationRuntimeOperationResultResponseOutput struct{ *pulumi.OutputState }

func (ManagedIntegrationRuntimeOperationResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIntegrationRuntimeOperationResultResponse)(nil)).Elem()
}

func (o ManagedIntegrationRuntimeOperationResultResponseOutput) ToManagedIntegrationRuntimeOperationResultResponseOutput() ManagedIntegrationRuntimeOperationResultResponseOutput {
	return o
}

func (o ManagedIntegrationRuntimeOperationResultResponseOutput) ToManagedIntegrationRuntimeOperationResultResponseOutputWithContext(ctx context.Context) ManagedIntegrationRuntimeOperationResultResponseOutput {
	return o
}

// The activity id for the operation request.
func (o ManagedIntegrationRuntimeOperationResultResponseOutput) ActivityId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeOperationResultResponse) string { return v.ActivityId }).(pulumi.StringOutput)
}

// The error code.
func (o ManagedIntegrationRuntimeOperationResultResponseOutput) ErrorCode() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeOperationResultResponse) string { return v.ErrorCode }).(pulumi.StringOutput)
}

// Managed integration runtime error parameters.
func (o ManagedIntegrationRuntimeOperationResultResponseOutput) Parameters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeOperationResultResponse) []string { return v.Parameters }).(pulumi.StringArrayOutput)
}

// The operation result.
func (o ManagedIntegrationRuntimeOperationResultResponseOutput) Result() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeOperationResultResponse) string { return v.Result }).(pulumi.StringOutput)
}

// The start time of the operation.
func (o ManagedIntegrationRuntimeOperationResultResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeOperationResultResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// The operation type. Could be start or stop.
func (o ManagedIntegrationRuntimeOperationResultResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeOperationResultResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Managed integration runtime, including managed elastic and managed dedicated integration runtimes.
type ManagedIntegrationRuntimeResponse struct {
	// The compute resource for managed integration runtime.
	ComputeProperties *IntegrationRuntimeComputePropertiesResponse `pulumi:"computeProperties"`
	// The name of virtual network to which Azure-SSIS integration runtime will join
	CustomerVirtualNetwork *IntegrationRuntimeCustomerVirtualNetworkResponse `pulumi:"customerVirtualNetwork"`
	// Integration runtime description.
	Description *string `pulumi:"description"`
	// Managed Virtual Network reference.
	ManagedVirtualNetwork *ManagedVirtualNetworkReferenceResponse `pulumi:"managedVirtualNetwork"`
	// SSIS properties for managed integration runtime.
	SsisProperties *IntegrationRuntimeSsisPropertiesResponse `pulumi:"ssisProperties"`
	// Integration runtime state, only valid for managed dedicated integration runtime.
	State string `pulumi:"state"`
	// The type of integration runtime.
	// Expected value is 'Managed'.
	Type string `pulumi:"type"`
}

// Managed integration runtime, including managed elastic and managed dedicated integration runtimes.
type ManagedIntegrationRuntimeResponseOutput struct{ *pulumi.OutputState }

func (ManagedIntegrationRuntimeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIntegrationRuntimeResponse)(nil)).Elem()
}

func (o ManagedIntegrationRuntimeResponseOutput) ToManagedIntegrationRuntimeResponseOutput() ManagedIntegrationRuntimeResponseOutput {
	return o
}

func (o ManagedIntegrationRuntimeResponseOutput) ToManagedIntegrationRuntimeResponseOutputWithContext(ctx context.Context) ManagedIntegrationRuntimeResponseOutput {
	return o
}

// The compute resource for managed integration runtime.
func (o ManagedIntegrationRuntimeResponseOutput) ComputeProperties() IntegrationRuntimeComputePropertiesResponsePtrOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeResponse) *IntegrationRuntimeComputePropertiesResponse {
		return v.ComputeProperties
	}).(IntegrationRuntimeComputePropertiesResponsePtrOutput)
}

// The name of virtual network to which Azure-SSIS integration runtime will join
func (o ManagedIntegrationRuntimeResponseOutput) CustomerVirtualNetwork() IntegrationRuntimeCustomerVirtualNetworkResponsePtrOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeResponse) *IntegrationRuntimeCustomerVirtualNetworkResponse {
		return v.CustomerVirtualNetwork
	}).(IntegrationRuntimeCustomerVirtualNetworkResponsePtrOutput)
}

// Integration runtime description.
func (o ManagedIntegrationRuntimeResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Managed Virtual Network reference.
func (o ManagedIntegrationRuntimeResponseOutput) ManagedVirtualNetwork() ManagedVirtualNetworkReferenceResponsePtrOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeResponse) *ManagedVirtualNetworkReferenceResponse {
		return v.ManagedVirtualNetwork
	}).(ManagedVirtualNetworkReferenceResponsePtrOutput)
}

// SSIS properties for managed integration runtime.
func (o ManagedIntegrationRuntimeResponseOutput) SsisProperties() IntegrationRuntimeSsisPropertiesResponsePtrOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeResponse) *IntegrationRuntimeSsisPropertiesResponse {
		return v.SsisProperties
	}).(IntegrationRuntimeSsisPropertiesResponsePtrOutput)
}

// Integration runtime state, only valid for managed dedicated integration runtime.
func (o ManagedIntegrationRuntimeResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeResponse) string { return v.State }).(pulumi.StringOutput)
}

// The type of integration runtime.
// Expected value is 'Managed'.
func (o ManagedIntegrationRuntimeResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Managed integration runtime status.
type ManagedIntegrationRuntimeStatusResponse struct {
	// The time at which the integration runtime was created, in ISO8601 format.
	CreateTime string `pulumi:"createTime"`
	// The data factory name which the integration runtime belong to.
	DataFactoryName string `pulumi:"dataFactoryName"`
	// The last operation result that occurred on this integration runtime.
	LastOperation ManagedIntegrationRuntimeOperationResultResponse `pulumi:"lastOperation"`
	// The list of nodes for managed integration runtime.
	Nodes []ManagedIntegrationRuntimeNodeResponse `pulumi:"nodes"`
	// The errors that occurred on this integration runtime.
	OtherErrors []ManagedIntegrationRuntimeErrorResponse `pulumi:"otherErrors"`
	// The state of integration runtime.
	State string `pulumi:"state"`
	// The type of integration runtime.
	// Expected value is 'Managed'.
	Type string `pulumi:"type"`
}

// Managed integration runtime status.
type ManagedIntegrationRuntimeStatusResponseOutput struct{ *pulumi.OutputState }

func (ManagedIntegrationRuntimeStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIntegrationRuntimeStatusResponse)(nil)).Elem()
}

func (o ManagedIntegrationRuntimeStatusResponseOutput) ToManagedIntegrationRuntimeStatusResponseOutput() ManagedIntegrationRuntimeStatusResponseOutput {
	return o
}

func (o ManagedIntegrationRuntimeStatusResponseOutput) ToManagedIntegrationRuntimeStatusResponseOutputWithContext(ctx context.Context) ManagedIntegrationRuntimeStatusResponseOutput {
	return o
}

// The time at which the integration runtime was created, in ISO8601 format.
func (o ManagedIntegrationRuntimeStatusResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeStatusResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The data factory name which the integration runtime belong to.
func (o ManagedIntegrationRuntimeStatusResponseOutput) DataFactoryName() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeStatusResponse) string { return v.DataFactoryName }).(pulumi.StringOutput)
}

// The last operation result that occurred on this integration runtime.
func (o ManagedIntegrationRuntimeStatusResponseOutput) LastOperation() ManagedIntegrationRuntimeOperationResultResponseOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeStatusResponse) ManagedIntegrationRuntimeOperationResultResponse {
		return v.LastOperation
	}).(ManagedIntegrationRuntimeOperationResultResponseOutput)
}

// The list of nodes for managed integration runtime.
func (o ManagedIntegrationRuntimeStatusResponseOutput) Nodes() ManagedIntegrationRuntimeNodeResponseArrayOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeStatusResponse) []ManagedIntegrationRuntimeNodeResponse {
		return v.Nodes
	}).(ManagedIntegrationRuntimeNodeResponseArrayOutput)
}

// The errors that occurred on this integration runtime.
func (o ManagedIntegrationRuntimeStatusResponseOutput) OtherErrors() ManagedIntegrationRuntimeErrorResponseArrayOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeStatusResponse) []ManagedIntegrationRuntimeErrorResponse {
		return v.OtherErrors
	}).(ManagedIntegrationRuntimeErrorResponseArrayOutput)
}

// The state of integration runtime.
func (o ManagedIntegrationRuntimeStatusResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeStatusResponse) string { return v.State }).(pulumi.StringOutput)
}

// The type of integration runtime.
// Expected value is 'Managed'.
func (o ManagedIntegrationRuntimeStatusResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIntegrationRuntimeStatusResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Properties of a managed private endpoint
type ManagedPrivateEndpointType struct {
	// Fully qualified domain names
	Fqdns []string `pulumi:"fqdns"`
	// The groupId to which the managed private endpoint is created
	GroupId *string `pulumi:"groupId"`
	// The ARM resource ID of the resource to which the managed private endpoint is created
	PrivateLinkResourceId *string `pulumi:"privateLinkResourceId"`
}

// ManagedPrivateEndpointTypeInput is an input type that accepts ManagedPrivateEndpointTypeArgs and ManagedPrivateEndpointTypeOutput values.
// You can construct a concrete instance of `ManagedPrivateEndpointTypeInput` via:
//
//	ManagedPrivateEndpointTypeArgs{...}
type ManagedPrivateEndpointTypeInput interface {
	pulumi.Input

	ToManagedPrivateEndpointTypeOutput() ManagedPrivateEndpointTypeOutput
	ToManagedPrivateEndpointTypeOutputWithContext(context.Context) ManagedPrivateEndpointTypeOutput
}

// Properties of a managed private endpoint
type ManagedPrivateEndpointTypeArgs struct {
	// Fully qualified domain names
	Fqdns pulumi.StringArrayInput `pulumi:"fqdns"`
	// The groupId to which the managed private endpoint is created
	GroupId pulumi.StringPtrInput `pulumi:"groupId"`
	// The ARM resource ID of the resource to which the managed private endpoint is created
	PrivateLinkResourceId pulumi.StringPtrInput `pulumi:"privateLinkResourceId"`
}

func (ManagedPrivateEndpointTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedPrivateEndpointType)(nil)).Elem()
}

func (i ManagedPrivateEndpointTypeArgs) ToManagedPrivateEndpointTypeOutput() ManagedPrivateEndpointTypeOutput {
	return i.ToManagedPrivateEndpointTypeOutputWithContext(context.Background())
}

func (i ManagedPrivateEndpointTypeArgs) ToManagedPrivateEndpointTypeOutputWithContext(ctx context.Context) ManagedPrivateEndpointTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedPrivateEndpointTypeOutput)
}

// Properties of a managed private endpoint
type ManagedPrivateEndpointTypeOutput struct{ *pulumi.OutputState }

func (ManagedPrivateEndpointTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedPrivateEndpointType)(nil)).Elem()
}

func (o ManagedPrivateEndpointTypeOutput) ToManagedPrivateEndpointTypeOutput() ManagedPrivateEndpointTypeOutput {
	return o
}

func (o ManagedPrivateEndpointTypeOutput) ToManagedPrivateEndpointTypeOutputWithContext(ctx context.Context) ManagedPrivateEndpointTypeOutput {
	return o
}

// Fully qualified domain names
func (o ManagedPrivateEndpointTypeOutput) Fqdns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointType) []string { return v.Fqdns }).(pulumi.StringArrayOutput)
}

// The groupId to which the managed private endpoint is created
func (o ManagedPrivateEndpointTypeOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointType) *string { return v.GroupId }).(pulumi.StringPtrOutput)
}

// The ARM resource ID of the resource to which the managed private endpoint is created
func (o ManagedPrivateEndpointTypeOutput) PrivateLinkResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointType) *string { return v.PrivateLinkResourceId }).(pulumi.StringPtrOutput)
}

// Properties of a managed private endpoint
type ManagedPrivateEndpointResponse struct {
	// The managed private endpoint connection state
	ConnectionState *ConnectionStatePropertiesResponse `pulumi:"connectionState"`
	// Fully qualified domain names
	Fqdns []string `pulumi:"fqdns"`
	// The groupId to which the managed private endpoint is created
	GroupId *string `pulumi:"groupId"`
	// Denotes whether the managed private endpoint is reserved
	IsReserved bool `pulumi:"isReserved"`
	// The ARM resource ID of the resource to which the managed private endpoint is created
	PrivateLinkResourceId *string `pulumi:"privateLinkResourceId"`
	// The managed private endpoint provisioning state
	ProvisioningState string `pulumi:"provisioningState"`
}

// Properties of a managed private endpoint
type ManagedPrivateEndpointResponseOutput struct{ *pulumi.OutputState }

func (ManagedPrivateEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedPrivateEndpointResponse)(nil)).Elem()
}

func (o ManagedPrivateEndpointResponseOutput) ToManagedPrivateEndpointResponseOutput() ManagedPrivateEndpointResponseOutput {
	return o
}

func (o ManagedPrivateEndpointResponseOutput) ToManagedPrivateEndpointResponseOutputWithContext(ctx context.Context) ManagedPrivateEndpointResponseOutput {
	return o
}

// The managed private endpoint connection state
func (o ManagedPrivateEndpointResponseOutput) ConnectionState() ConnectionStatePropertiesResponsePtrOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointResponse) *ConnectionStatePropertiesResponse { return v.ConnectionState }).(ConnectionStatePropertiesResponsePtrOutput)
}

// Fully qualified domain names
func (o ManagedPrivateEndpointResponseOutput) Fqdns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointResponse) []string { return v.Fqdns }).(pulumi.StringArrayOutput)
}

// The groupId to which the managed private endpoint is created
func (o ManagedPrivateEndpointResponseOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointResponse) *string { return v.GroupId }).(pulumi.StringPtrOutput)
}

// Denotes whether the managed private endpoint is reserved
func (o ManagedPrivateEndpointResponseOutput) IsReserved() pulumi.BoolOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointResponse) bool { return v.IsReserved }).(pulumi.BoolOutput)
}

// The ARM resource ID of the resource to which the managed private endpoint is created
func (o ManagedPrivateEndpointResponseOutput) PrivateLinkResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointResponse) *string { return v.PrivateLinkResourceId }).(pulumi.StringPtrOutput)
}

// The managed private endpoint provisioning state
func (o ManagedPrivateEndpointResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedPrivateEndpointResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Managed Virtual Network reference type.
type ManagedVirtualNetworkReference struct {
	// Reference ManagedVirtualNetwork name.
	ReferenceName string `pulumi:"referenceName"`
	// Managed Virtual Network reference type.
	Type string `pulumi:"type"`
}

// ManagedVirtualNetworkReferenceInput is an input type that accepts ManagedVirtualNetworkReferenceArgs and ManagedVirtualNetworkReferenceOutput values.
// You can construct a concrete instance of `ManagedVirtualNetworkReferenceInput` via:
//
//	ManagedVirtualNetworkReferenceArgs{...}
type ManagedVirtualNetworkReferenceInput interface {
	pulumi.Input

	ToManagedVirtualNetworkReferenceOutput() ManagedVirtualNetworkReferenceOutput
	ToManagedVirtualNetworkReferenceOutputWithContext(context.Context) ManagedVirtualNetworkReferenceOutput
}

// Managed Virtual Network reference type.
type ManagedVirtualNetworkReferenceArgs struct {
	// Reference ManagedVirtualNetwork name.
	ReferenceName pulumi.StringInput `pulumi:"referenceName"`
	// Managed Virtual Network reference type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ManagedVirtualNetworkReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedVirtualNetworkReference)(nil)).Elem()
}

func (i ManagedVirtualNetworkReferenceArgs) ToManagedVirtualNetworkReferenceOutput() ManagedVirtualNetworkReferenceOutput {
	return i.ToManagedVirtualNetworkReferenceOutputWithContext(context.Background())
}

func (i ManagedVirtualNetworkReferenceArgs) ToManagedVirtualNetworkReferenceOutputWithContext(ctx context.Context) ManagedVirtualNetworkReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedVirtualNetworkReferenceOutput)
}

func (i ManagedVirtualNetworkReferenceArgs) ToManagedVirtualNetworkReferencePtrOutput() ManagedVirtualNetworkReferencePtrOutput {
	return i.ToManagedVirtualNetworkReferencePtrOutputWithContext(context.Background())
}

func (i ManagedVirtualNetworkReferenceArgs) ToManagedVirtualNetworkReferencePtrOutputWithContext(ctx context.Context) ManagedVirtualNetworkReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedVirtualNetworkReferenceOutput).ToManagedVirtualNetworkReferencePtrOutputWithContext(ctx)
}

// ManagedVirtualNetworkReferencePtrInput is an input type that accepts ManagedVirtualNetworkReferenceArgs, ManagedVirtualNetworkReferencePtr and ManagedVirtualNetworkReferencePtrOutput values.
// You can construct a concrete instance of `ManagedVirtualNetworkReferencePtrInput` via:
//
//	        ManagedVirtualNetworkReferenceArgs{...}
//
//	or:
//
//	        nil
type ManagedVirtualNetworkReferencePtrInput interface {
	pulumi.Input

	ToManagedVirtualNetworkReferencePtrOutput() ManagedVirtualNetworkReferencePtrOutput
	ToManagedVirtualNetworkReferencePtrOutputWithContext(context.Context) ManagedVirtualNetworkReferencePtrOutput
}

type managedVirtualNetworkReferencePtrType ManagedVirtualNetworkReferenceArgs

func ManagedVirtualNetworkReferencePtr(v *ManagedVirtualNetworkReferenceArgs) ManagedVirtualNetworkReferencePtrInput {
	return (*managedVirtualNetworkReferencePtrType)(v)
}

func (*managedVirtualNetworkReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedVirtualNetworkReference)(nil)).Elem()
}

func (i *managedVirtualNetworkReferencePtrType) ToManagedVirtualNetworkReferencePtrOutput() ManagedVirtualNetworkReferencePtrOutput {
	return i.ToManagedVirtualNetworkReferencePtrOutputWithContext(context.Background())
}

func (i *managedVirtualNetworkReferencePtrType) ToManagedVirtualNetworkReferencePtrOutputWithContext(ctx context.Context) ManagedVirtualNetworkReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedVirtualNetworkReferencePtrOutput)
}

// Managed Virtual Network reference type.
type ManagedVirtualNetworkReferenceOutput struct{ *pulumi.OutputState }

func (ManagedVirtualNetworkReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedVirtualNetworkReference)(nil)).Elem()
}

func (o ManagedVirtualNetworkReferenceOutput) ToManagedVirtualNetworkReferenceOutput() ManagedVirtualNetworkReferenceOutput {
	return o
}

func (o ManagedVirtualNetworkReferenceOutput) ToManagedVirtualNetworkReferenceOutputWithContext(ctx context.Context) ManagedVirtualNetworkReferenceOutput {
	return o
}

func (o ManagedVirtualNetworkReferenceOutput) ToManagedVirtualNetworkReferencePtrOutput() ManagedVirtualNetworkReferencePtrOutput {
	return o.ToManagedVirtualNetworkReferencePtrOutputWithContext(context.Background())
}

func (o ManagedVirtualNetworkReferenceOutput) ToManagedVirtualNetworkReferencePtrOutputWithContext(ctx context.Context) ManagedVirtualNetworkReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedVirtualNetworkReference) *ManagedVirtualNetworkReference {
		return &v
	}).(ManagedVirtualNetworkReferencePtrOutput)
}

// Reference ManagedVirtualNetwork name.
func (o ManagedVirtualNetworkReferenceOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedVirtualNetworkReference) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Managed Virtual Network reference type.
func (o ManagedVirtualNetworkReferenceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedVirtualNetworkReference) string { return v.Type }).(pulumi.StringOutput)
}

type ManagedVirtualNetworkReferencePtrOutput struct{ *pulumi.OutputState }

func (ManagedVirtualNetworkReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedVirtualNetworkReference)(nil)).Elem()
}

func (o ManagedVirtualNetworkReferencePtrOutput) ToManagedVirtualNetworkReferencePtrOutput() ManagedVirtualNetworkReferencePtrOutput {
	return o
}

func (o ManagedVirtualNetworkReferencePtrOutput) ToManagedVirtualNetworkReferencePtrOutputWithContext(ctx context.Context) ManagedVirtualNetworkReferencePtrOutput {
	return o
}

func (o ManagedVirtualNetworkReferencePtrOutput) Elem() ManagedVirtualNetworkReferenceOutput {
	return o.ApplyT(func(v *ManagedVirtualNetworkReference) ManagedVirtualNetworkReference {
		if v != nil {
			return *v
		}
		var ret ManagedVirtualNetworkReference
		return ret
	}).(ManagedVirtualNetworkReferenceOutput)
}

// Reference ManagedVirtualNetwork name.
func (o ManagedVirtualNetworkReferencePtrOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedVirtualNetworkReference) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceName
	}).(pulumi.StringPtrOutput)
}

// Managed Virtual Network reference type.
func (o ManagedVirtualNetworkReferencePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedVirtualNetworkReference) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Managed Virtual Network reference type.
type ManagedVirtualNetworkReferenceResponse struct {
	// Reference ManagedVirtualNetwork name.
	ReferenceName string `pulumi:"referenceName"`
	// Managed Virtual Network reference type.
	Type string `pulumi:"type"`
}

// Managed Virtual Network reference type.
type ManagedVirtualNetworkReferenceResponseOutput struct{ *pulumi.OutputState }

func (ManagedVirtualNetworkReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedVirtualNetworkReferenceResponse)(nil)).Elem()
}

func (o ManagedVirtualNetworkReferenceResponseOutput) ToManagedVirtualNetworkReferenceResponseOutput() ManagedVirtualNetworkReferenceResponseOutput {
	return o
}

func (o ManagedVirtualNetworkReferenceResponseOutput) ToManagedVirtualNetworkReferenceResponseOutputWithContext(ctx context.Context) ManagedVirtualNetworkReferenceResponseOutput {
	return o
}

// Reference ManagedVirtualNetwork name.
func (o ManagedVirtualNetworkReferenceResponseOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedVirtualNetworkReferenceResponse) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Managed Virtual Network reference type.
func (o ManagedVirtualNetworkReferenceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedVirtualNetworkReferenceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ManagedVirtualNetworkReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedVirtualNetworkReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedVirtualNetworkReferenceResponse)(nil)).Elem()
}

func (o ManagedVirtualNetworkReferenceResponsePtrOutput) ToManagedVirtualNetworkReferenceResponsePtrOutput() ManagedVirtualNetworkReferenceResponsePtrOutput {
	return o
}

func (o ManagedVirtualNetworkReferenceResponsePtrOutput) ToManagedVirtualNetworkReferenceResponsePtrOutputWithContext(ctx context.Context) ManagedVirtualNetworkReferenceResponsePtrOutput {
	return o
}

func (o ManagedVirtualNetworkReferenceResponsePtrOutput) Elem() ManagedVirtualNetworkReferenceResponseOutput {
	return o.ApplyT(func(v *ManagedVirtualNetworkReferenceResponse) ManagedVirtualNetworkReferenceResponse {
		if v != nil {
			return *v
		}
		var ret ManagedVirtualNetworkReferenceResponse
		return ret
	}).(ManagedVirtualNetworkReferenceResponseOutput)
}

// Reference ManagedVirtualNetwork name.
func (o ManagedVirtualNetworkReferenceResponsePtrOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedVirtualNetworkReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceName
	}).(pulumi.StringPtrOutput)
}

// Managed Virtual Network reference type.
func (o ManagedVirtualNetworkReferenceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedVirtualNetworkReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Source and target column mapping details.
type MapperAttributeMapping struct {
	// Reference of the source column used in the mapping. It is used for 'Direct' mapping type only.
	AttributeReference *MapperAttributeReference `pulumi:"attributeReference"`
	// List of references for source columns. It is used for 'Derived' and 'Aggregate' type mappings only.
	AttributeReferences []MapperAttributeReference `pulumi:"attributeReferences"`
	// Expression used for 'Aggregate' and 'Derived' type mapping.
	Expression *string `pulumi:"expression"`
	// Name of the function used for 'Aggregate' and 'Derived' (except 'Advanced') type mapping.
	FunctionName *string `pulumi:"functionName"`
	// Name of the target column.
	Name *string `pulumi:"name"`
	// Type of the CDC attribute mapping. Note: 'Advanced' mapping type is also saved as 'Derived'.
	Type *string `pulumi:"type"`
}

// MapperAttributeMappingInput is an input type that accepts MapperAttributeMappingArgs and MapperAttributeMappingOutput values.
// You can construct a concrete instance of `MapperAttributeMappingInput` via:
//
//	MapperAttributeMappingArgs{...}
type MapperAttributeMappingInput interface {
	pulumi.Input

	ToMapperAttributeMappingOutput() MapperAttributeMappingOutput
	ToMapperAttributeMappingOutputWithContext(context.Context) MapperAttributeMappingOutput
}

// Source and target column mapping details.
type MapperAttributeMappingArgs struct {
	// Reference of the source column used in the mapping. It is used for 'Direct' mapping type only.
	AttributeReference MapperAttributeReferencePtrInput `pulumi:"attributeReference"`
	// List of references for source columns. It is used for 'Derived' and 'Aggregate' type mappings only.
	AttributeReferences MapperAttributeReferenceArrayInput `pulumi:"attributeReferences"`
	// Expression used for 'Aggregate' and 'Derived' type mapping.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Name of the function used for 'Aggregate' and 'Derived' (except 'Advanced') type mapping.
	FunctionName pulumi.StringPtrInput `pulumi:"functionName"`
	// Name of the target column.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Type of the CDC attribute mapping. Note: 'Advanced' mapping type is also saved as 'Derived'.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (MapperAttributeMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MapperAttributeMapping)(nil)).Elem()
}

func (i MapperAttributeMappingArgs) ToMapperAttributeMappingOutput() MapperAttributeMappingOutput {
	return i.ToMapperAttributeMappingOutputWithContext(context.Background())
}

func (i MapperAttributeMappingArgs) ToMapperAttributeMappingOutputWithContext(ctx context.Context) MapperAttributeMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MapperAttributeMappingOutput)
}

// MapperAttributeMappingArrayInput is an input type that accepts MapperAttributeMappingArray and MapperAttributeMappingArrayOutput values.
// You can construct a concrete instance of `MapperAttributeMappingArrayInput` via:
//
//	MapperAttributeMappingArray{ MapperAttributeMappingArgs{...} }
type MapperAttributeMappingArrayInput interface {
	pulumi.Input

	ToMapperAttributeMappingArrayOutput() MapperAttributeMappingArrayOutput
	ToMapperAttributeMappingArrayOutputWithContext(context.Context) MapperAttributeMappingArrayOutput
}

type MapperAttributeMappingArray []MapperAttributeMappingInput

func (MapperAttributeMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MapperAttributeMapping)(nil)).Elem()
}

func (i MapperAttributeMappingArray) ToMapperAttributeMappingArrayOutput() MapperAttributeMappingArrayOutput {
	return i.ToMapperAttributeMappingArrayOutputWithContext(context.Background())
}

func (i MapperAttributeMappingArray) ToMapperAttributeMappingArrayOutputWithContext(ctx context.Context) MapperAttributeMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MapperAttributeMappingArrayOutput)
}

// Source and target column mapping details.
type MapperAttributeMappingOutput struct{ *pulumi.OutputState }

func (MapperAttributeMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MapperAttributeMapping)(nil)).Elem()
}

func (o MapperAttributeMappingOutput) ToMapperAttributeMappingOutput() MapperAttributeMappingOutput {
	return o
}

func (o MapperAttributeMappingOutput) ToMapperAttributeMappingOutputWithContext(ctx context.Context) MapperAttributeMappingOutput {
	return o
}

// Reference of the source column used in the mapping. It is used for 'Direct' mapping type only.
func (o MapperAttributeMappingOutput) AttributeReference() MapperAttributeReferencePtrOutput {
	return o.ApplyT(func(v MapperAttributeMapping) *MapperAttributeReference { return v.AttributeReference }).(MapperAttributeReferencePtrOutput)
}

// List of references for source columns. It is used for 'Derived' and 'Aggregate' type mappings only.
func (o MapperAttributeMappingOutput) AttributeReferences() MapperAttributeReferenceArrayOutput {
	return o.ApplyT(func(v MapperAttributeMapping) []MapperAttributeReference { return v.AttributeReferences }).(MapperAttributeReferenceArrayOutput)
}

// Expression used for 'Aggregate' and 'Derived' type mapping.
func (o MapperAttributeMappingOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MapperAttributeMapping) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Name of the function used for 'Aggregate' and 'Derived' (except 'Advanced') type mapping.
func (o MapperAttributeMappingOutput) FunctionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MapperAttributeMapping) *string { return v.FunctionName }).(pulumi.StringPtrOutput)
}

// Name of the target column.
func (o MapperAttributeMappingOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MapperAttributeMapping) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Type of the CDC attribute mapping. Note: 'Advanced' mapping type is also saved as 'Derived'.
func (o MapperAttributeMappingOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MapperAttributeMapping) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type MapperAttributeMappingArrayOutput struct{ *pulumi.OutputState }

func (MapperAttributeMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MapperAttributeMapping)(nil)).Elem()
}

func (o MapperAttributeMappingArrayOutput) ToMapperAttributeMappingArrayOutput() MapperAttributeMappingArrayOutput {
	return o
}

func (o MapperAttributeMappingArrayOutput) ToMapperAttributeMappingArrayOutputWithContext(ctx context.Context) MapperAttributeMappingArrayOutput {
	return o
}

func (o MapperAttributeMappingArrayOutput) Index(i pulumi.IntInput) MapperAttributeMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MapperAttributeMapping {
		return vs[0].([]MapperAttributeMapping)[vs[1].(int)]
	}).(MapperAttributeMappingOutput)
}

// Source and target column mapping details.
type MapperAttributeMappingResponse struct {
	// Reference of the source column used in the mapping. It is used for 'Direct' mapping type only.
	AttributeReference *MapperAttributeReferenceResponse `pulumi:"attributeReference"`
	// List of references for source columns. It is used for 'Derived' and 'Aggregate' type mappings only.
	AttributeReferences []MapperAttributeReferenceResponse `pulumi:"attributeReferences"`
	// Expression used for 'Aggregate' and 'Derived' type mapping.
	Expression *string `pulumi:"expression"`
	// Name of the function used for 'Aggregate' and 'Derived' (except 'Advanced') type mapping.
	FunctionName *string `pulumi:"functionName"`
	// Name of the target column.
	Name *string `pulumi:"name"`
	// Type of the CDC attribute mapping. Note: 'Advanced' mapping type is also saved as 'Derived'.
	Type *string `pulumi:"type"`
}

// Source and target column mapping details.
type MapperAttributeMappingResponseOutput struct{ *pulumi.OutputState }

func (MapperAttributeMappingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MapperAttributeMappingResponse)(nil)).Elem()
}

func (o MapperAttributeMappingResponseOutput) ToMapperAttributeMappingResponseOutput() MapperAttributeMappingResponseOutput {
	return o
}

func (o MapperAttributeMappingResponseOutput) ToMapperAttributeMappingResponseOutputWithContext(ctx context.Context) MapperAttributeMappingResponseOutput {
	return o
}

// Reference of the source column used in the mapping. It is used for 'Direct' mapping type only.
func (o MapperAttributeMappingResponseOutput) AttributeReference() MapperAttributeReferenceResponsePtrOutput {
	return o.ApplyT(func(v MapperAttributeMappingResponse) *MapperAttributeReferenceResponse { return v.AttributeReference }).(MapperAttributeReferenceResponsePtrOutput)
}

// List of references for source columns. It is used for 'Derived' and 'Aggregate' type mappings only.
func (o MapperAttributeMappingResponseOutput) AttributeReferences() MapperAttributeReferenceResponseArrayOutput {
	return o.ApplyT(func(v MapperAttributeMappingResponse) []MapperAttributeReferenceResponse {
		return v.AttributeReferences
	}).(MapperAttributeReferenceResponseArrayOutput)
}

// Expression used for 'Aggregate' and 'Derived' type mapping.
func (o MapperAttributeMappingResponseOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MapperAttributeMappingResponse) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Name of the function used for 'Aggregate' and 'Derived' (except 'Advanced') type mapping.
func (o MapperAttributeMappingResponseOutput) FunctionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MapperAttributeMappingResponse) *string { return v.FunctionName }).(pulumi.StringPtrOutput)
}

// Name of the target column.
func (o MapperAttributeMappingResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MapperAttributeMappingResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Type of the CDC attribute mapping. Note: 'Advanced' mapping type is also saved as 'Derived'.
func (o MapperAttributeMappingResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MapperAttributeMappingResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type MapperAttributeMappingResponseArrayOutput struct{ *pulumi.OutputState }

func (MapperAttributeMappingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MapperAttributeMappingResponse)(nil)).Elem()
}

func (o MapperAttributeMappingResponseArrayOutput) ToMapperAttributeMappingResponseArrayOutput() MapperAttributeMappingResponseArrayOutput {
	return o
}

func (o MapperAttributeMappingResponseArrayOutput) ToMapperAttributeMappingResponseArrayOutputWithContext(ctx context.Context) MapperAttributeMappingResponseArrayOutput {
	return o
}

func (o MapperAttributeMappingResponseArrayOutput) Index(i pulumi.IntInput) MapperAttributeMappingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MapperAttributeMappingResponse {
		return vs[0].([]MapperAttributeMappingResponse)[vs[1].(int)]
	}).(MapperAttributeMappingResponseOutput)
}

// Attribute mapping details.
type MapperAttributeMappings struct {
	// List of attribute mappings.
	AttributeMappings []MapperAttributeMapping `pulumi:"attributeMappings"`
}

// MapperAttributeMappingsInput is an input type that accepts MapperAttributeMappingsArgs and MapperAttributeMappingsOutput values.
// You can construct a concrete instance of `MapperAttributeMappingsInput` via:
//
//	MapperAttributeMappingsArgs{...}
type MapperAttributeMappingsInput interface {
	pulumi.Input

	ToMapperAttributeMappingsOutput() MapperAttributeMappingsOutput
	ToMapperAttributeMappingsOutputWithContext(context.Context) MapperAttributeMappingsOutput
}

// Attribute mapping details.
type MapperAttributeMappingsArgs struct {
	// List of attribute mappings.
	AttributeMappings MapperAttributeMappingArrayInput `pulumi:"attributeMappings"`
}

func (MapperAttributeMappingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MapperAttributeMappings)(nil)).Elem()
}

func (i MapperAttributeMappingsArgs) ToMapperAttributeMappingsOutput() MapperAttributeMappingsOutput {
	return i.ToMapperAttributeMappingsOutputWithContext(context.Background())
}

func (i MapperAttributeMappingsArgs) ToMapperAttributeMappingsOutputWithContext(ctx context.Context) MapperAttributeMappingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MapperAttributeMappingsOutput)
}

func (i MapperAttributeMappingsArgs) ToMapperAttributeMappingsPtrOutput() MapperAttributeMappingsPtrOutput {
	return i.ToMapperAttributeMappingsPtrOutputWithContext(context.Background())
}

func (i MapperAttributeMappingsArgs) ToMapperAttributeMappingsPtrOutputWithContext(ctx context.Context) MapperAttributeMappingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MapperAttributeMappingsOutput).ToMapperAttributeMappingsPtrOutputWithContext(ctx)
}

// MapperAttributeMappingsPtrInput is an input type that accepts MapperAttributeMappingsArgs, MapperAttributeMappingsPtr and MapperAttributeMappingsPtrOutput values.
// You can construct a concrete instance of `MapperAttributeMappingsPtrInput` via:
//
//	        MapperAttributeMappingsArgs{...}
//
//	or:
//
//	        nil
type MapperAttributeMappingsPtrInput interface {
	pulumi.Input

	ToMapperAttributeMappingsPtrOutput() MapperAttributeMappingsPtrOutput
	ToMapperAttributeMappingsPtrOutputWithContext(context.Context) MapperAttributeMappingsPtrOutput
}

type mapperAttributeMappingsPtrType MapperAttributeMappingsArgs

func MapperAttributeMappingsPtr(v *MapperAttributeMappingsArgs) MapperAttributeMappingsPtrInput {
	return (*mapperAttributeMappingsPtrType)(v)
}

func (*mapperAttributeMappingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MapperAttributeMappings)(nil)).Elem()
}

func (i *mapperAttributeMappingsPtrType) ToMapperAttributeMappingsPtrOutput() MapperAttributeMappingsPtrOutput {
	return i.ToMapperAttributeMappingsPtrOutputWithContext(context.Background())
}

func (i *mapperAttributeMappingsPtrType) ToMapperAttributeMappingsPtrOutputWithContext(ctx context.Context) MapperAttributeMappingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MapperAttributeMappingsPtrOutput)
}

// Attribute mapping details.
type MapperAttributeMappingsOutput struct{ *pulumi.OutputState }

func (MapperAttributeMappingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MapperAttributeMappings)(nil)).Elem()
}

func (o MapperAttributeMappingsOutput) ToMapperAttributeMappingsOutput() MapperAttributeMappingsOutput {
	return o
}

func (o MapperAttributeMappingsOutput) ToMapperAttributeMappingsOutputWithContext(ctx context.Context) MapperAttributeMappingsOutput {
	return o
}

func (o MapperAttributeMappingsOutput) ToMapperAttributeMappingsPtrOutput() MapperAttributeMappingsPtrOutput {
	return o.ToMapperAttributeMappingsPtrOutputWithContext(context.Background())
}

func (o MapperAttributeMappingsOutput) ToMapperAttributeMappingsPtrOutputWithContext(ctx context.Context) MapperAttributeMappingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MapperAttributeMappings) *MapperAttributeMappings {
		return &v
	}).(MapperAttributeMappingsPtrOutput)
}

// List of attribute mappings.
func (o MapperAttributeMappingsOutput) AttributeMappings() MapperAttributeMappingArrayOutput {
	return o.ApplyT(func(v MapperAttributeMappings) []MapperAttributeMapping { return v.AttributeMappings }).(MapperAttributeMappingArrayOutput)
}

type MapperAttributeMappingsPtrOutput struct{ *pulumi.OutputState }

func (MapperAttributeMappingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MapperAttributeMappings)(nil)).Elem()
}

func (o MapperAttributeMappingsPtrOutput) ToMapperAttributeMappingsPtrOutput() MapperAttributeMappingsPtrOutput {
	return o
}

func (o MapperAttributeMappingsPtrOutput) ToMapperAttributeMappingsPtrOutputWithContext(ctx context.Context) MapperAttributeMappingsPtrOutput {
	return o
}

func (o MapperAttributeMappingsPtrOutput) Elem() MapperAttributeMappingsOutput {
	return o.ApplyT(func(v *MapperAttributeMappings) MapperAttributeMappings {
		if v != nil {
			return *v
		}
		var ret MapperAttributeMappings
		return ret
	}).(MapperAttributeMappingsOutput)
}

// List of attribute mappings.
func (o MapperAttributeMappingsPtrOutput) AttributeMappings() MapperAttributeMappingArrayOutput {
	return o.ApplyT(func(v *MapperAttributeMappings) []MapperAttributeMapping {
		if v == nil {
			return nil
		}
		return v.AttributeMappings
	}).(MapperAttributeMappingArrayOutput)
}

// Attribute mapping details.
type MapperAttributeMappingsResponse struct {
	// List of attribute mappings.
	AttributeMappings []MapperAttributeMappingResponse `pulumi:"attributeMappings"`
}

// Attribute mapping details.
type MapperAttributeMappingsResponseOutput struct{ *pulumi.OutputState }

func (MapperAttributeMappingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MapperAttributeMappingsResponse)(nil)).Elem()
}

func (o MapperAttributeMappingsResponseOutput) ToMapperAttributeMappingsResponseOutput() MapperAttributeMappingsResponseOutput {
	return o
}

func (o MapperAttributeMappingsResponseOutput) ToMapperAttributeMappingsResponseOutputWithContext(ctx context.Context) MapperAttributeMappingsResponseOutput {
	return o
}

// List of attribute mappings.
func (o MapperAttributeMappingsResponseOutput) AttributeMappings() MapperAttributeMappingResponseArrayOutput {
	return o.ApplyT(func(v MapperAttributeMappingsResponse) []MapperAttributeMappingResponse { return v.AttributeMappings }).(MapperAttributeMappingResponseArrayOutput)
}

type MapperAttributeMappingsResponsePtrOutput struct{ *pulumi.OutputState }

func (MapperAttributeMappingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MapperAttributeMappingsResponse)(nil)).Elem()
}

func (o MapperAttributeMappingsResponsePtrOutput) ToMapperAttributeMappingsResponsePtrOutput() MapperAttributeMappingsResponsePtrOutput {
	return o
}

func (o MapperAttributeMappingsResponsePtrOutput) ToMapperAttributeMappingsResponsePtrOutputWithContext(ctx context.Context) MapperAttributeMappingsResponsePtrOutput {
	return o
}

func (o MapperAttributeMappingsResponsePtrOutput) Elem() MapperAttributeMappingsResponseOutput {
	return o.ApplyT(func(v *MapperAttributeMappingsResponse) MapperAttributeMappingsResponse {
		if v != nil {
			return *v
		}
		var ret MapperAttributeMappingsResponse
		return ret
	}).(MapperAttributeMappingsResponseOutput)
}

// List of attribute mappings.
func (o MapperAttributeMappingsResponsePtrOutput) AttributeMappings() MapperAttributeMappingResponseArrayOutput {
	return o.ApplyT(func(v *MapperAttributeMappingsResponse) []MapperAttributeMappingResponse {
		if v == nil {
			return nil
		}
		return v.AttributeMappings
	}).(MapperAttributeMappingResponseArrayOutput)
}

// Attribute reference details for the referred column.
type MapperAttributeReference struct {
	// Name of the table.
	Entity *string `pulumi:"entity"`
	// The connection reference for the connection.
	EntityConnectionReference *MapperConnectionReference `pulumi:"entityConnectionReference"`
	// Name of the column.
	Name *string `pulumi:"name"`
}

// MapperAttributeReferenceInput is an input type that accepts MapperAttributeReferenceArgs and MapperAttributeReferenceOutput values.
// You can construct a concrete instance of `MapperAttributeReferenceInput` via:
//
//	MapperAttributeReferenceArgs{...}
type MapperAttributeReferenceInput interface {
	pulumi.Input

	ToMapperAttributeReferenceOutput() MapperAttributeReferenceOutput
	ToMapperAttributeReferenceOutputWithContext(context.Context) MapperAttributeReferenceOutput
}

// Attribute reference details for the referred column.
type MapperAttributeReferenceArgs struct {
	// Name of the table.
	Entity pulumi.StringPtrInput `pulumi:"entity"`
	// The connection reference for the connection.
	EntityConnectionReference MapperConnectionReferencePtrInput `pulumi:"entityConnectionReference"`
	// Name of the column.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (MapperAttributeReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MapperAttributeReference)(nil)).Elem()
}

func (i MapperAttributeReferenceArgs) ToMapperAttributeReferenceOutput() MapperAttributeReferenceOutput {
	return i.ToMapperAttributeReferenceOutputWithContext(context.Background())
}

func (i MapperAttributeReferenceArgs) ToMapperAttributeReferenceOutputWithContext(ctx context.Context) MapperAttributeReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MapperAttributeReferenceOutput)
}

func (i MapperAttributeReferenceArgs) ToMapperAttributeReferencePtrOutput() MapperAttributeReferencePtrOutput {
	return i.ToMapperAttributeReferencePtrOutputWithContext(context.Background())
}

func (i MapperAttributeReferenceArgs) ToMapperAttributeReferencePtrOutputWithContext(ctx context.Context) MapperAttributeReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MapperAttributeReferenceOutput).ToMapperAttributeReferencePtrOutputWithContext(ctx)
}

// MapperAttributeReferencePtrInput is an input type that accepts MapperAttributeReferenceArgs, MapperAttributeReferencePtr and MapperAttributeReferencePtrOutput values.
// You can construct a concrete instance of `MapperAttributeReferencePtrInput` via:
//
//	        MapperAttributeReferenceArgs{...}
//
//	or:
//
//	        nil
type MapperAttributeReferencePtrInput interface {
	pulumi.Input

	ToMapperAttributeReferencePtrOutput() MapperAttributeReferencePtrOutput
	ToMapperAttributeReferencePtrOutputWithContext(context.Context) MapperAttributeReferencePtrOutput
}

type mapperAttributeReferencePtrType MapperAttributeReferenceArgs

func MapperAttributeReferencePtr(v *MapperAttributeReferenceArgs) MapperAttributeReferencePtrInput {
	return (*mapperAttributeReferencePtrType)(v)
}

func (*mapperAttributeReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MapperAttributeReference)(nil)).Elem()
}

func (i *mapperAttributeReferencePtrType) ToMapperAttributeReferencePtrOutput() MapperAttributeReferencePtrOutput {
	return i.ToMapperAttributeReferencePtrOutputWithContext(context.Background())
}

func (i *mapperAttributeReferencePtrType) ToMapperAttributeReferencePtrOutputWithContext(ctx context.Context) MapperAttributeReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MapperAttributeReferencePtrOutput)
}

// MapperAttributeReferenceArrayInput is an input type that accepts MapperAttributeReferenceArray and MapperAttributeReferenceArrayOutput values.
// You can construct a concrete instance of `MapperAttributeReferenceArrayInput` via:
//
//	MapperAttributeReferenceArray{ MapperAttributeReferenceArgs{...} }
type MapperAttributeReferenceArrayInput interface {
	pulumi.Input

	ToMapperAttributeReferenceArrayOutput() MapperAttributeReferenceArrayOutput
	ToMapperAttributeReferenceArrayOutputWithContext(context.Context) MapperAttributeReferenceArrayOutput
}

type MapperAttributeReferenceArray []MapperAttributeReferenceInput

func (MapperAttributeReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MapperAttributeReference)(nil)).Elem()
}

func (i MapperAttributeReferenceArray) ToMapperAttributeReferenceArrayOutput() MapperAttributeReferenceArrayOutput {
	return i.ToMapperAttributeReferenceArrayOutputWithContext(context.Background())
}

func (i MapperAttributeReferenceArray) ToMapperAttributeReferenceArrayOutputWithContext(ctx context.Context) MapperAttributeReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MapperAttributeReferenceArrayOutput)
}

// Attribute reference details for the referred column.
type MapperAttributeReferenceOutput struct{ *pulumi.OutputState }

func (MapperAttributeReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MapperAttributeReference)(nil)).Elem()
}

func (o MapperAttributeReferenceOutput) ToMapperAttributeReferenceOutput() MapperAttributeReferenceOutput {
	return o
}

func (o MapperAttributeReferenceOutput) ToMapperAttributeReferenceOutputWithContext(ctx context.Context) MapperAttributeReferenceOutput {
	return o
}

func (o MapperAttributeReferenceOutput) ToMapperAttributeReferencePtrOutput() MapperAttributeReferencePtrOutput {
	return o.ToMapperAttributeReferencePtrOutputWithContext(context.Background())
}

func (o MapperAttributeReferenceOutput) ToMapperAttributeReferencePtrOutputWithContext(ctx context.Context) MapperAttributeReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MapperAttributeReference) *MapperAttributeReference {
		return &v
	}).(MapperAttributeReferencePtrOutput)
}

// Name of the table.
func (o MapperAttributeReferenceOutput) Entity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MapperAttributeReference) *string { return v.Entity }).(pulumi.StringPtrOutput)
}

// The connection reference for the connection.
func (o MapperAttributeReferenceOutput) EntityConnectionReference() MapperConnectionReferencePtrOutput {
	return o.ApplyT(func(v MapperAttributeReference) *MapperConnectionReference { return v.EntityConnectionReference }).(MapperConnectionReferencePtrOutput)
}

// Name of the column.
func (o MapperAttributeReferenceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MapperAttributeReference) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type MapperAttributeReferencePtrOutput struct{ *pulumi.OutputState }

func (MapperAttributeReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MapperAttributeReference)(nil)).Elem()
}

func (o MapperAttributeReferencePtrOutput) ToMapperAttributeReferencePtrOutput() MapperAttributeReferencePtrOutput {
	return o
}

func (o MapperAttributeReferencePtrOutput) ToMapperAttributeReferencePtrOutputWithContext(ctx context.Context) MapperAttributeReferencePtrOutput {
	return o
}

func (o MapperAttributeReferencePtrOutput) Elem() MapperAttributeReferenceOutput {
	return o.ApplyT(func(v *MapperAttributeReference) MapperAttributeReference {
		if v != nil {
			return *v
		}
		var ret MapperAttributeReference
		return ret
	}).(MapperAttributeReferenceOutput)
}

// Name of the table.
func (o MapperAttributeReferencePtrOutput) Entity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MapperAttributeReference) *string {
		if v == nil {
			return nil
		}
		return v.Entity
	}).(pulumi.StringPtrOutput)
}

// The connection reference for the connection.
func (o MapperAttributeReferencePtrOutput) EntityConnectionReference() MapperConnectionReferencePtrOutput {
	return o.ApplyT(func(v *MapperAttributeReference) *MapperConnectionReference {
		if v == nil {
			return nil
		}
		return v.EntityConnectionReference
	}).(MapperConnectionReferencePtrOutput)
}

// Name of the column.
func (o MapperAttributeReferencePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MapperAttributeReference) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type MapperAttributeReferenceArrayOutput struct{ *pulumi.OutputState }

func (MapperAttributeReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MapperAttributeReference)(nil)).Elem()
}

func (o MapperAttributeReferenceArrayOutput) ToMapperAttributeReferenceArrayOutput() MapperAttributeReferenceArrayOutput {
	return o
}

func (o MapperAttributeReferenceArrayOutput) ToMapperAttributeReferenceArrayOutputWithContext(ctx context.Context) MapperAttributeReferenceArrayOutput {
	return o
}

func (o MapperAttributeReferenceArrayOutput) Index(i pulumi.IntInput) MapperAttributeReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MapperAttributeReference {
		return vs[0].([]MapperAttributeReference)[vs[1].(int)]
	}).(MapperAttributeReferenceOutput)
}

// Attribute reference details for the referred column.
type MapperAttributeReferenceResponse struct {
	// Name of the table.
	Entity *string `pulumi:"entity"`
	// The connection reference for the connection.
	EntityConnectionReference *MapperConnectionReferenceResponse `pulumi:"entityConnectionReference"`
	// Name of the column.
	Name *string `pulumi:"name"`
}

// Attribute reference details for the referred column.
type MapperAttributeReferenceResponseOutput struct{ *pulumi.OutputState }

func (MapperAttributeReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MapperAttributeReferenceResponse)(nil)).Elem()
}

func (o MapperAttributeReferenceResponseOutput) ToMapperAttributeReferenceResponseOutput() MapperAttributeReferenceResponseOutput {
	return o
}

func (o MapperAttributeReferenceResponseOutput) ToMapperAttributeReferenceResponseOutputWithContext(ctx context.Context) MapperAttributeReferenceResponseOutput {
	return o
}

// Name of the table.
func (o MapperAttributeReferenceResponseOutput) Entity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MapperAttributeReferenceResponse) *string { return v.Entity }).(pulumi.StringPtrOutput)
}

// The connection reference for the connection.
func (o MapperAttributeReferenceResponseOutput) EntityConnectionReference() MapperConnectionReferenceResponsePtrOutput {
	return o.ApplyT(func(v MapperAttributeReferenceResponse) *MapperConnectionReferenceResponse {
		return v.EntityConnectionReference
	}).(MapperConnectionReferenceResponsePtrOutput)
}

// Name of the column.
func (o MapperAttributeReferenceResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MapperAttributeReferenceResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type MapperAttributeReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (MapperAttributeReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MapperAttributeReferenceResponse)(nil)).Elem()
}

func (o MapperAttributeReferenceResponsePtrOutput) ToMapperAttributeReferenceResponsePtrOutput() MapperAttributeReferenceResponsePtrOutput {
	return o
}

func (o MapperAttributeReferenceResponsePtrOutput) ToMapperAttributeReferenceResponsePtrOutputWithContext(ctx context.Context) MapperAttributeReferenceResponsePtrOutput {
	return o
}

func (o MapperAttributeReferenceResponsePtrOutput) Elem() MapperAttributeReferenceResponseOutput {
	return o.ApplyT(func(v *MapperAttributeReferenceResponse) MapperAttributeReferenceResponse {
		if v != nil {
			return *v
		}
		var ret MapperAttributeReferenceResponse
		return ret
	}).(MapperAttributeReferenceResponseOutput)
}

// Name of the table.
func (o MapperAttributeReferenceResponsePtrOutput) Entity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MapperAttributeReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Entity
	}).(pulumi.StringPtrOutput)
}

// The connection reference for the connection.
func (o MapperAttributeReferenceResponsePtrOutput) EntityConnectionReference() MapperConnectionReferenceResponsePtrOutput {
	return o.ApplyT(func(v *MapperAttributeReferenceResponse) *MapperConnectionReferenceResponse {
		if v == nil {
			return nil
		}
		return v.EntityConnectionReference
	}).(MapperConnectionReferenceResponsePtrOutput)
}

// Name of the column.
func (o MapperAttributeReferenceResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MapperAttributeReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type MapperAttributeReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (MapperAttributeReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MapperAttributeReferenceResponse)(nil)).Elem()
}

func (o MapperAttributeReferenceResponseArrayOutput) ToMapperAttributeReferenceResponseArrayOutput() MapperAttributeReferenceResponseArrayOutput {
	return o
}

func (o MapperAttributeReferenceResponseArrayOutput) ToMapperAttributeReferenceResponseArrayOutputWithContext(ctx context.Context) MapperAttributeReferenceResponseArrayOutput {
	return o
}

func (o MapperAttributeReferenceResponseArrayOutput) Index(i pulumi.IntInput) MapperAttributeReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MapperAttributeReferenceResponse {
		return vs[0].([]MapperAttributeReferenceResponse)[vs[1].(int)]
	}).(MapperAttributeReferenceResponseOutput)
}

// Source connection details.
type MapperConnection struct {
	// List of name/value pairs for connection properties.
	CommonDslConnectorProperties []MapperDslConnectorProperties `pulumi:"commonDslConnectorProperties"`
	// A boolean indicating whether linked service is of type inline dataset. Currently only inline datasets are supported.
	IsInlineDataset *bool `pulumi:"isInlineDataset"`
	// Linked service reference.
	LinkedService *LinkedServiceReference `pulumi:"linkedService"`
	// Type of the linked service e.g.: AzureBlobFS.
	LinkedServiceType *string `pulumi:"linkedServiceType"`
	// Type of connection via linked service or dataset.
	Type string `pulumi:"type"`
}

// MapperConnectionInput is an input type that accepts MapperConnectionArgs and MapperConnectionOutput values.
// You can construct a concrete instance of `MapperConnectionInput` via:
//
//	MapperConnectionArgs{...}
type MapperConnectionInput interface {
	pulumi.Input

	ToMapperConnectionOutput() MapperConnectionOutput
	ToMapperConnectionOutputWithContext(context.Context) MapperConnectionOutput
}

// Source connection details.
type MapperConnectionArgs struct {
	// List of name/value pairs for connection properties.
	CommonDslConnectorProperties MapperDslConnectorPropertiesArrayInput `pulumi:"commonDslConnectorProperties"`
	// A boolean indicating whether linked service is of type inline dataset. Currently only inline datasets are supported.
	IsInlineDataset pulumi.BoolPtrInput `pulumi:"isInlineDataset"`
	// Linked service reference.
	LinkedService LinkedServiceReferencePtrInput `pulumi:"linkedService"`
	// Type of the linked service e.g.: AzureBlobFS.
	LinkedServiceType pulumi.StringPtrInput `pulumi:"linkedServiceType"`
	// Type of connection via linked service or dataset.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MapperConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MapperConnection)(nil)).Elem()
}

func (i MapperConnectionArgs) ToMapperConnectionOutput() MapperConnectionOutput {
	return i.ToMapperConnectionOutputWithContext(context.Background())
}

func (i MapperConnectionArgs) ToMapperConnectionOutputWithContext(ctx context.Context) MapperConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MapperConnectionOutput)
}

func (i MapperConnectionArgs) ToMapperConnectionPtrOutput() MapperConnectionPtrOutput {
	return i.ToMapperConnectionPtrOutputWithContext(context.Background())
}

func (i MapperConnectionArgs) ToMapperConnectionPtrOutputWithContext(ctx context.Context) MapperConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MapperConnectionOutput).ToMapperConnectionPtrOutputWithContext(ctx)
}

// MapperConnectionPtrInput is an input type that accepts MapperConnectionArgs, MapperConnectionPtr and MapperConnectionPtrOutput values.
// You can construct a concrete instance of `MapperConnectionPtrInput` via:
//
//	        MapperConnectionArgs{...}
//
//	or:
//
//	        nil
type MapperConnectionPtrInput interface {
	pulumi.Input

	ToMapperConnectionPtrOutput() MapperConnectionPtrOutput
	ToMapperConnectionPtrOutputWithContext(context.Context) MapperConnectionPtrOutput
}

type mapperConnectionPtrType MapperConnectionArgs

func MapperConnectionPtr(v *MapperConnectionArgs) MapperConnectionPtrInput {
	return (*mapperConnectionPtrType)(v)
}

func (*mapperConnectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MapperConnection)(nil)).Elem()
}

func (i *mapperConnectionPtrType) ToMapperConnectionPtrOutput() MapperConnectionPtrOutput {
	return i.ToMapperConnectionPtrOutputWithContext(context.Background())
}

func (i *mapperConnectionPtrType) ToMapperConnectionPtrOutputWithContext(ctx context.Context) MapperConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MapperConnectionPtrOutput)
}

// Source connection details.
type MapperConnectionOutput struct{ *pulumi.OutputState }

func (MapperConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MapperConnection)(nil)).Elem()
}

func (o MapperConnectionOutput) ToMapperConnectionOutput() MapperConnectionOutput {
	return o
}

func (o MapperConnectionOutput) ToMapperConnectionOutputWithContext(ctx context.Context) MapperConnectionOutput {
	return o
}

func (o MapperConnectionOutput) ToMapperConnectionPtrOutput() MapperConnectionPtrOutput {
	return o.ToMapperConnectionPtrOutputWithContext(context.Background())
}

func (o MapperConnectionOutput) ToMapperConnectionPtrOutputWithContext(ctx context.Context) MapperConnectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MapperConnection) *MapperConnection {
		return &v
	}).(MapperConnectionPtrOutput)
}

// List of name/value pairs for connection properties.
func (o MapperConnectionOutput) CommonDslConnectorProperties() MapperDslConnectorPropertiesArrayOutput {
	return o.ApplyT(func(v MapperConnection) []MapperDslConnectorProperties { return v.CommonDslConnectorProperties }).(MapperDslConnectorPropertiesArrayOutput)
}

// A boolean indicating whether linked service is of type inline dataset. Currently only inline datasets are supported.
func (o MapperConnectionOutput) IsInlineDataset() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MapperConnection) *bool { return v.IsInlineDataset }).(pulumi.BoolPtrOutput)
}

// Linked service reference.
func (o MapperConnectionOutput) LinkedService() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v MapperConnection) *LinkedServiceReference { return v.LinkedService }).(LinkedServiceReferencePtrOutput)
}

// Type of the linked service e.g.: AzureBlobFS.
func (o MapperConnectionOutput) LinkedServiceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MapperConnection) *string { return v.LinkedServiceType }).(pulumi.StringPtrOutput)
}

// Type of connection via linked service or dataset.
func (o MapperConnectionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MapperConnection) string { return v.Type }).(pulumi.StringOutput)
}

type MapperConnectionPtrOutput struct{ *pulumi.OutputState }

func (MapperConnectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MapperConnection)(nil)).Elem()
}

func (o MapperConnectionPtrOutput) ToMapperConnectionPtrOutput() MapperConnectionPtrOutput {
	return o
}

func (o MapperConnectionPtrOutput) ToMapperConnectionPtrOutputWithContext(ctx context.Context) MapperConnectionPtrOutput {
	return o
}

func (o MapperConnectionPtrOutput) Elem() MapperConnectionOutput {
	return o.ApplyT(func(v *MapperConnection) MapperConnection {
		if v != nil {
			return *v
		}
		var ret MapperConnection
		return ret
	}).(MapperConnectionOutput)
}

// List of name/value pairs for connection properties.
func (o MapperConnectionPtrOutput) CommonDslConnectorProperties() MapperDslConnectorPropertiesArrayOutput {
	return o.ApplyT(func(v *MapperConnection) []MapperDslConnectorProperties {
		if v == nil {
			return nil
		}
		return v.CommonDslConnectorProperties
	}).(MapperDslConnectorPropertiesArrayOutput)
}

// A boolean indicating whether linked service is of type inline dataset. Currently only inline datasets are supported.
func (o MapperConnectionPtrOutput) IsInlineDataset() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MapperConnection) *bool {
		if v == nil {
			return nil
		}
		return v.IsInlineDataset
	}).(pulumi.BoolPtrOutput)
}

// Linked service reference.
func (o MapperConnectionPtrOutput) LinkedService() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v *MapperConnection) *LinkedServiceReference {
		if v == nil {
			return nil
		}
		return v.LinkedService
	}).(LinkedServiceReferencePtrOutput)
}

// Type of the linked service e.g.: AzureBlobFS.
func (o MapperConnectionPtrOutput) LinkedServiceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MapperConnection) *string {
		if v == nil {
			return nil
		}
		return v.LinkedServiceType
	}).(pulumi.StringPtrOutput)
}

// Type of connection via linked service or dataset.
func (o MapperConnectionPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MapperConnection) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Source or target connection reference details.
type MapperConnectionReference struct {
	// Name of the connection
	ConnectionName *string `pulumi:"connectionName"`
	// Type of connection via linked service or dataset.
	Type *string `pulumi:"type"`
}

// MapperConnectionReferenceInput is an input type that accepts MapperConnectionReferenceArgs and MapperConnectionReferenceOutput values.
// You can construct a concrete instance of `MapperConnectionReferenceInput` via:
//
//	MapperConnectionReferenceArgs{...}
type MapperConnectionReferenceInput interface {
	pulumi.Input

	ToMapperConnectionReferenceOutput() MapperConnectionReferenceOutput
	ToMapperConnectionReferenceOutputWithContext(context.Context) MapperConnectionReferenceOutput
}

// Source or target connection reference details.
type MapperConnectionReferenceArgs struct {
	// Name of the connection
	ConnectionName pulumi.StringPtrInput `pulumi:"connectionName"`
	// Type of connection via linked service or dataset.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (MapperConnectionReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MapperConnectionReference)(nil)).Elem()
}

func (i MapperConnectionReferenceArgs) ToMapperConnectionReferenceOutput() MapperConnectionReferenceOutput {
	return i.ToMapperConnectionReferenceOutputWithContext(context.Background())
}

func (i MapperConnectionReferenceArgs) ToMapperConnectionReferenceOutputWithContext(ctx context.Context) MapperConnectionReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MapperConnectionReferenceOutput)
}

func (i MapperConnectionReferenceArgs) ToMapperConnectionReferencePtrOutput() MapperConnectionReferencePtrOutput {
	return i.ToMapperConnectionReferencePtrOutputWithContext(context.Background())
}

func (i MapperConnectionReferenceArgs) ToMapperConnectionReferencePtrOutputWithContext(ctx context.Context) MapperConnectionReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MapperConnectionReferenceOutput).ToMapperConnectionReferencePtrOutputWithContext(ctx)
}

// MapperConnectionReferencePtrInput is an input type that accepts MapperConnectionReferenceArgs, MapperConnectionReferencePtr and MapperConnectionReferencePtrOutput values.
// You can construct a concrete instance of `MapperConnectionReferencePtrInput` via:
//
//	        MapperConnectionReferenceArgs{...}
//
//	or:
//
//	        nil
type MapperConnectionReferencePtrInput interface {
	pulumi.Input

	ToMapperConnectionReferencePtrOutput() MapperConnectionReferencePtrOutput
	ToMapperConnectionReferencePtrOutputWithContext(context.Context) MapperConnectionReferencePtrOutput
}

type mapperConnectionReferencePtrType MapperConnectionReferenceArgs

func MapperConnectionReferencePtr(v *MapperConnectionReferenceArgs) MapperConnectionReferencePtrInput {
	return (*mapperConnectionReferencePtrType)(v)
}

func (*mapperConnectionReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MapperConnectionReference)(nil)).Elem()
}

func (i *mapperConnectionReferencePtrType) ToMapperConnectionReferencePtrOutput() MapperConnectionReferencePtrOutput {
	return i.ToMapperConnectionReferencePtrOutputWithContext(context.Background())
}

func (i *mapperConnectionReferencePtrType) ToMapperConnectionReferencePtrOutputWithContext(ctx context.Context) MapperConnectionReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MapperConnectionReferencePtrOutput)
}

// Source or target connection reference details.
type MapperConnectionReferenceOutput struct{ *pulumi.OutputState }

func (MapperConnectionReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MapperConnectionReference)(nil)).Elem()
}

func (o MapperConnectionReferenceOutput) ToMapperConnectionReferenceOutput() MapperConnectionReferenceOutput {
	return o
}

func (o MapperConnectionReferenceOutput) ToMapperConnectionReferenceOutputWithContext(ctx context.Context) MapperConnectionReferenceOutput {
	return o
}

func (o MapperConnectionReferenceOutput) ToMapperConnectionReferencePtrOutput() MapperConnectionReferencePtrOutput {
	return o.ToMapperConnectionReferencePtrOutputWithContext(context.Background())
}

func (o MapperConnectionReferenceOutput) ToMapperConnectionReferencePtrOutputWithContext(ctx context.Context) MapperConnectionReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MapperConnectionReference) *MapperConnectionReference {
		return &v
	}).(MapperConnectionReferencePtrOutput)
}

// Name of the connection
func (o MapperConnectionReferenceOutput) ConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MapperConnectionReference) *string { return v.ConnectionName }).(pulumi.StringPtrOutput)
}

// Type of connection via linked service or dataset.
func (o MapperConnectionReferenceOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MapperConnectionReference) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type MapperConnectionReferencePtrOutput struct{ *pulumi.OutputState }

func (MapperConnectionReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MapperConnectionReference)(nil)).Elem()
}

func (o MapperConnectionReferencePtrOutput) ToMapperConnectionReferencePtrOutput() MapperConnectionReferencePtrOutput {
	return o
}

func (o MapperConnectionReferencePtrOutput) ToMapperConnectionReferencePtrOutputWithContext(ctx context.Context) MapperConnectionReferencePtrOutput {
	return o
}

func (o MapperConnectionReferencePtrOutput) Elem() MapperConnectionReferenceOutput {
	return o.ApplyT(func(v *MapperConnectionReference) MapperConnectionReference {
		if v != nil {
			return *v
		}
		var ret MapperConnectionReference
		return ret
	}).(MapperConnectionReferenceOutput)
}

// Name of the connection
func (o MapperConnectionReferencePtrOutput) ConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MapperConnectionReference) *string {
		if v == nil {
			return nil
		}
		return v.ConnectionName
	}).(pulumi.StringPtrOutput)
}

// Type of connection via linked service or dataset.
func (o MapperConnectionReferencePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MapperConnectionReference) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Source or target connection reference details.
type MapperConnectionReferenceResponse struct {
	// Name of the connection
	ConnectionName *string `pulumi:"connectionName"`
	// Type of connection via linked service or dataset.
	Type *string `pulumi:"type"`
}

// Source or target connection reference details.
type MapperConnectionReferenceResponseOutput struct{ *pulumi.OutputState }

func (MapperConnectionReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MapperConnectionReferenceResponse)(nil)).Elem()
}

func (o MapperConnectionReferenceResponseOutput) ToMapperConnectionReferenceResponseOutput() MapperConnectionReferenceResponseOutput {
	return o
}

func (o MapperConnectionReferenceResponseOutput) ToMapperConnectionReferenceResponseOutputWithContext(ctx context.Context) MapperConnectionReferenceResponseOutput {
	return o
}

// Name of the connection
func (o MapperConnectionReferenceResponseOutput) ConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MapperConnectionReferenceResponse) *string { return v.ConnectionName }).(pulumi.StringPtrOutput)
}

// Type of connection via linked service or dataset.
func (o MapperConnectionReferenceResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MapperConnectionReferenceResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type MapperConnectionReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (MapperConnectionReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MapperConnectionReferenceResponse)(nil)).Elem()
}

func (o MapperConnectionReferenceResponsePtrOutput) ToMapperConnectionReferenceResponsePtrOutput() MapperConnectionReferenceResponsePtrOutput {
	return o
}

func (o MapperConnectionReferenceResponsePtrOutput) ToMapperConnectionReferenceResponsePtrOutputWithContext(ctx context.Context) MapperConnectionReferenceResponsePtrOutput {
	return o
}

func (o MapperConnectionReferenceResponsePtrOutput) Elem() MapperConnectionReferenceResponseOutput {
	return o.ApplyT(func(v *MapperConnectionReferenceResponse) MapperConnectionReferenceResponse {
		if v != nil {
			return *v
		}
		var ret MapperConnectionReferenceResponse
		return ret
	}).(MapperConnectionReferenceResponseOutput)
}

// Name of the connection
func (o MapperConnectionReferenceResponsePtrOutput) ConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MapperConnectionReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.ConnectionName
	}).(pulumi.StringPtrOutput)
}

// Type of connection via linked service or dataset.
func (o MapperConnectionReferenceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MapperConnectionReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Source connection details.
type MapperConnectionResponse struct {
	// List of name/value pairs for connection properties.
	CommonDslConnectorProperties []MapperDslConnectorPropertiesResponse `pulumi:"commonDslConnectorProperties"`
	// A boolean indicating whether linked service is of type inline dataset. Currently only inline datasets are supported.
	IsInlineDataset *bool `pulumi:"isInlineDataset"`
	// Linked service reference.
	LinkedService *LinkedServiceReferenceResponse `pulumi:"linkedService"`
	// Type of the linked service e.g.: AzureBlobFS.
	LinkedServiceType *string `pulumi:"linkedServiceType"`
	// Type of connection via linked service or dataset.
	Type string `pulumi:"type"`
}

// Source connection details.
type MapperConnectionResponseOutput struct{ *pulumi.OutputState }

func (MapperConnectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MapperConnectionResponse)(nil)).Elem()
}

func (o MapperConnectionResponseOutput) ToMapperConnectionResponseOutput() MapperConnectionResponseOutput {
	return o
}

func (o MapperConnectionResponseOutput) ToMapperConnectionResponseOutputWithContext(ctx context.Context) MapperConnectionResponseOutput {
	return o
}

// List of name/value pairs for connection properties.
func (o MapperConnectionResponseOutput) CommonDslConnectorProperties() MapperDslConnectorPropertiesResponseArrayOutput {
	return o.ApplyT(func(v MapperConnectionResponse) []MapperDslConnectorPropertiesResponse {
		return v.CommonDslConnectorProperties
	}).(MapperDslConnectorPropertiesResponseArrayOutput)
}

// A boolean indicating whether linked service is of type inline dataset. Currently only inline datasets are supported.
func (o MapperConnectionResponseOutput) IsInlineDataset() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MapperConnectionResponse) *bool { return v.IsInlineDataset }).(pulumi.BoolPtrOutput)
}

// Linked service reference.
func (o MapperConnectionResponseOutput) LinkedService() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v MapperConnectionResponse) *LinkedServiceReferenceResponse { return v.LinkedService }).(LinkedServiceReferenceResponsePtrOutput)
}

// Type of the linked service e.g.: AzureBlobFS.
func (o MapperConnectionResponseOutput) LinkedServiceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MapperConnectionResponse) *string { return v.LinkedServiceType }).(pulumi.StringPtrOutput)
}

// Type of connection via linked service or dataset.
func (o MapperConnectionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MapperConnectionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type MapperConnectionResponsePtrOutput struct{ *pulumi.OutputState }

func (MapperConnectionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MapperConnectionResponse)(nil)).Elem()
}

func (o MapperConnectionResponsePtrOutput) ToMapperConnectionResponsePtrOutput() MapperConnectionResponsePtrOutput {
	return o
}

func (o MapperConnectionResponsePtrOutput) ToMapperConnectionResponsePtrOutputWithContext(ctx context.Context) MapperConnectionResponsePtrOutput {
	return o
}

func (o MapperConnectionResponsePtrOutput) Elem() MapperConnectionResponseOutput {
	return o.ApplyT(func(v *MapperConnectionResponse) MapperConnectionResponse {
		if v != nil {
			return *v
		}
		var ret MapperConnectionResponse
		return ret
	}).(MapperConnectionResponseOutput)
}

// List of name/value pairs for connection properties.
func (o MapperConnectionResponsePtrOutput) CommonDslConnectorProperties() MapperDslConnectorPropertiesResponseArrayOutput {
	return o.ApplyT(func(v *MapperConnectionResponse) []MapperDslConnectorPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.CommonDslConnectorProperties
	}).(MapperDslConnectorPropertiesResponseArrayOutput)
}

// A boolean indicating whether linked service is of type inline dataset. Currently only inline datasets are supported.
func (o MapperConnectionResponsePtrOutput) IsInlineDataset() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MapperConnectionResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsInlineDataset
	}).(pulumi.BoolPtrOutput)
}

// Linked service reference.
func (o MapperConnectionResponsePtrOutput) LinkedService() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v *MapperConnectionResponse) *LinkedServiceReferenceResponse {
		if v == nil {
			return nil
		}
		return v.LinkedService
	}).(LinkedServiceReferenceResponsePtrOutput)
}

// Type of the linked service e.g.: AzureBlobFS.
func (o MapperConnectionResponsePtrOutput) LinkedServiceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MapperConnectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.LinkedServiceType
	}).(pulumi.StringPtrOutput)
}

// Type of connection via linked service or dataset.
func (o MapperConnectionResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MapperConnectionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Connector properties of a CDC table in terms of name / value pairs.
type MapperDslConnectorProperties struct {
	// Name of the property.
	Name *string `pulumi:"name"`
	// Value of the property.
	Value interface{} `pulumi:"value"`
}

// MapperDslConnectorPropertiesInput is an input type that accepts MapperDslConnectorPropertiesArgs and MapperDslConnectorPropertiesOutput values.
// You can construct a concrete instance of `MapperDslConnectorPropertiesInput` via:
//
//	MapperDslConnectorPropertiesArgs{...}
type MapperDslConnectorPropertiesInput interface {
	pulumi.Input

	ToMapperDslConnectorPropertiesOutput() MapperDslConnectorPropertiesOutput
	ToMapperDslConnectorPropertiesOutputWithContext(context.Context) MapperDslConnectorPropertiesOutput
}

// Connector properties of a CDC table in terms of name / value pairs.
type MapperDslConnectorPropertiesArgs struct {
	// Name of the property.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Value of the property.
	Value pulumi.Input `pulumi:"value"`
}

func (MapperDslConnectorPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MapperDslConnectorProperties)(nil)).Elem()
}

func (i MapperDslConnectorPropertiesArgs) ToMapperDslConnectorPropertiesOutput() MapperDslConnectorPropertiesOutput {
	return i.ToMapperDslConnectorPropertiesOutputWithContext(context.Background())
}

func (i MapperDslConnectorPropertiesArgs) ToMapperDslConnectorPropertiesOutputWithContext(ctx context.Context) MapperDslConnectorPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MapperDslConnectorPropertiesOutput)
}

// MapperDslConnectorPropertiesArrayInput is an input type that accepts MapperDslConnectorPropertiesArray and MapperDslConnectorPropertiesArrayOutput values.
// You can construct a concrete instance of `MapperDslConnectorPropertiesArrayInput` via:
//
//	MapperDslConnectorPropertiesArray{ MapperDslConnectorPropertiesArgs{...} }
type MapperDslConnectorPropertiesArrayInput interface {
	pulumi.Input

	ToMapperDslConnectorPropertiesArrayOutput() MapperDslConnectorPropertiesArrayOutput
	ToMapperDslConnectorPropertiesArrayOutputWithContext(context.Context) MapperDslConnectorPropertiesArrayOutput
}

type MapperDslConnectorPropertiesArray []MapperDslConnectorPropertiesInput

func (MapperDslConnectorPropertiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MapperDslConnectorProperties)(nil)).Elem()
}

func (i MapperDslConnectorPropertiesArray) ToMapperDslConnectorPropertiesArrayOutput() MapperDslConnectorPropertiesArrayOutput {
	return i.ToMapperDslConnectorPropertiesArrayOutputWithContext(context.Background())
}

func (i MapperDslConnectorPropertiesArray) ToMapperDslConnectorPropertiesArrayOutputWithContext(ctx context.Context) MapperDslConnectorPropertiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MapperDslConnectorPropertiesArrayOutput)
}

// Connector properties of a CDC table in terms of name / value pairs.
type MapperDslConnectorPropertiesOutput struct{ *pulumi.OutputState }

func (MapperDslConnectorPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MapperDslConnectorProperties)(nil)).Elem()
}

func (o MapperDslConnectorPropertiesOutput) ToMapperDslConnectorPropertiesOutput() MapperDslConnectorPropertiesOutput {
	return o
}

func (o MapperDslConnectorPropertiesOutput) ToMapperDslConnectorPropertiesOutputWithContext(ctx context.Context) MapperDslConnectorPropertiesOutput {
	return o
}

// Name of the property.
func (o MapperDslConnectorPropertiesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MapperDslConnectorProperties) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Value of the property.
func (o MapperDslConnectorPropertiesOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v MapperDslConnectorProperties) interface{} { return v.Value }).(pulumi.AnyOutput)
}

type MapperDslConnectorPropertiesArrayOutput struct{ *pulumi.OutputState }

func (MapperDslConnectorPropertiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MapperDslConnectorProperties)(nil)).Elem()
}

func (o MapperDslConnectorPropertiesArrayOutput) ToMapperDslConnectorPropertiesArrayOutput() MapperDslConnectorPropertiesArrayOutput {
	return o
}

func (o MapperDslConnectorPropertiesArrayOutput) ToMapperDslConnectorPropertiesArrayOutputWithContext(ctx context.Context) MapperDslConnectorPropertiesArrayOutput {
	return o
}

func (o MapperDslConnectorPropertiesArrayOutput) Index(i pulumi.IntInput) MapperDslConnectorPropertiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MapperDslConnectorProperties {
		return vs[0].([]MapperDslConnectorProperties)[vs[1].(int)]
	}).(MapperDslConnectorPropertiesOutput)
}

// Connector properties of a CDC table in terms of name / value pairs.
type MapperDslConnectorPropertiesResponse struct {
	// Name of the property.
	Name *string `pulumi:"name"`
	// Value of the property.
	Value interface{} `pulumi:"value"`
}

// Connector properties of a CDC table in terms of name / value pairs.
type MapperDslConnectorPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MapperDslConnectorPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MapperDslConnectorPropertiesResponse)(nil)).Elem()
}

func (o MapperDslConnectorPropertiesResponseOutput) ToMapperDslConnectorPropertiesResponseOutput() MapperDslConnectorPropertiesResponseOutput {
	return o
}

func (o MapperDslConnectorPropertiesResponseOutput) ToMapperDslConnectorPropertiesResponseOutputWithContext(ctx context.Context) MapperDslConnectorPropertiesResponseOutput {
	return o
}

// Name of the property.
func (o MapperDslConnectorPropertiesResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MapperDslConnectorPropertiesResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Value of the property.
func (o MapperDslConnectorPropertiesResponseOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v MapperDslConnectorPropertiesResponse) interface{} { return v.Value }).(pulumi.AnyOutput)
}

type MapperDslConnectorPropertiesResponseArrayOutput struct{ *pulumi.OutputState }

func (MapperDslConnectorPropertiesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MapperDslConnectorPropertiesResponse)(nil)).Elem()
}

func (o MapperDslConnectorPropertiesResponseArrayOutput) ToMapperDslConnectorPropertiesResponseArrayOutput() MapperDslConnectorPropertiesResponseArrayOutput {
	return o
}

func (o MapperDslConnectorPropertiesResponseArrayOutput) ToMapperDslConnectorPropertiesResponseArrayOutputWithContext(ctx context.Context) MapperDslConnectorPropertiesResponseArrayOutput {
	return o
}

func (o MapperDslConnectorPropertiesResponseArrayOutput) Index(i pulumi.IntInput) MapperDslConnectorPropertiesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MapperDslConnectorPropertiesResponse {
		return vs[0].([]MapperDslConnectorPropertiesResponse)[vs[1].(int)]
	}).(MapperDslConnectorPropertiesResponseOutput)
}

// CDC Policy.
type MapperPolicy struct {
	// Mode of running the CDC: batch vs continuous.
	Mode *string `pulumi:"mode"`
	// Defines the frequency and interval for running the CDC for batch mode.
	Recurrence *MapperPolicyRecurrence `pulumi:"recurrence"`
}

// MapperPolicyInput is an input type that accepts MapperPolicyArgs and MapperPolicyOutput values.
// You can construct a concrete instance of `MapperPolicyInput` via:
//
//	MapperPolicyArgs{...}
type MapperPolicyInput interface {
	pulumi.Input

	ToMapperPolicyOutput() MapperPolicyOutput
	ToMapperPolicyOutputWithContext(context.Context) MapperPolicyOutput
}

// CDC Policy.
type MapperPolicyArgs struct {
	// Mode of running the CDC: batch vs continuous.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Defines the frequency and interval for running the CDC for batch mode.
	Recurrence MapperPolicyRecurrencePtrInput `pulumi:"recurrence"`
}

func (MapperPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MapperPolicy)(nil)).Elem()
}

func (i MapperPolicyArgs) ToMapperPolicyOutput() MapperPolicyOutput {
	return i.ToMapperPolicyOutputWithContext(context.Background())
}

func (i MapperPolicyArgs) ToMapperPolicyOutputWithContext(ctx context.Context) MapperPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MapperPolicyOutput)
}

// CDC Policy.
type MapperPolicyOutput struct{ *pulumi.OutputState }

func (MapperPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MapperPolicy)(nil)).Elem()
}

func (o MapperPolicyOutput) ToMapperPolicyOutput() MapperPolicyOutput {
	return o
}

func (o MapperPolicyOutput) ToMapperPolicyOutputWithContext(ctx context.Context) MapperPolicyOutput {
	return o
}

// Mode of running the CDC: batch vs continuous.
func (o MapperPolicyOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MapperPolicy) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Defines the frequency and interval for running the CDC for batch mode.
func (o MapperPolicyOutput) Recurrence() MapperPolicyRecurrencePtrOutput {
	return o.ApplyT(func(v MapperPolicy) *MapperPolicyRecurrence { return v.Recurrence }).(MapperPolicyRecurrencePtrOutput)
}

// CDC policy recurrence details.
type MapperPolicyRecurrence struct {
	// Frequency of period in terms of 'Hour', 'Minute' or 'Second'.
	Frequency *string `pulumi:"frequency"`
	// Actual interval value as per chosen frequency.
	Interval *int `pulumi:"interval"`
}

// MapperPolicyRecurrenceInput is an input type that accepts MapperPolicyRecurrenceArgs and MapperPolicyRecurrenceOutput values.
// You can construct a concrete instance of `MapperPolicyRecurrenceInput` via:
//
//	MapperPolicyRecurrenceArgs{...}
type MapperPolicyRecurrenceInput interface {
	pulumi.Input

	ToMapperPolicyRecurrenceOutput() MapperPolicyRecurrenceOutput
	ToMapperPolicyRecurrenceOutputWithContext(context.Context) MapperPolicyRecurrenceOutput
}

// CDC policy recurrence details.
type MapperPolicyRecurrenceArgs struct {
	// Frequency of period in terms of 'Hour', 'Minute' or 'Second'.
	Frequency pulumi.StringPtrInput `pulumi:"frequency"`
	// Actual interval value as per chosen frequency.
	Interval pulumi.IntPtrInput `pulumi:"interval"`
}

func (MapperPolicyRecurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MapperPolicyRecurrence)(nil)).Elem()
}

func (i MapperPolicyRecurrenceArgs) ToMapperPolicyRecurrenceOutput() MapperPolicyRecurrenceOutput {
	return i.ToMapperPolicyRecurrenceOutputWithContext(context.Background())
}

func (i MapperPolicyRecurrenceArgs) ToMapperPolicyRecurrenceOutputWithContext(ctx context.Context) MapperPolicyRecurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MapperPolicyRecurrenceOutput)
}

func (i MapperPolicyRecurrenceArgs) ToMapperPolicyRecurrencePtrOutput() MapperPolicyRecurrencePtrOutput {
	return i.ToMapperPolicyRecurrencePtrOutputWithContext(context.Background())
}

func (i MapperPolicyRecurrenceArgs) ToMapperPolicyRecurrencePtrOutputWithContext(ctx context.Context) MapperPolicyRecurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MapperPolicyRecurrenceOutput).ToMapperPolicyRecurrencePtrOutputWithContext(ctx)
}

// MapperPolicyRecurrencePtrInput is an input type that accepts MapperPolicyRecurrenceArgs, MapperPolicyRecurrencePtr and MapperPolicyRecurrencePtrOutput values.
// You can construct a concrete instance of `MapperPolicyRecurrencePtrInput` via:
//
//	        MapperPolicyRecurrenceArgs{...}
//
//	or:
//
//	        nil
type MapperPolicyRecurrencePtrInput interface {
	pulumi.Input

	ToMapperPolicyRecurrencePtrOutput() MapperPolicyRecurrencePtrOutput
	ToMapperPolicyRecurrencePtrOutputWithContext(context.Context) MapperPolicyRecurrencePtrOutput
}

type mapperPolicyRecurrencePtrType MapperPolicyRecurrenceArgs

func MapperPolicyRecurrencePtr(v *MapperPolicyRecurrenceArgs) MapperPolicyRecurrencePtrInput {
	return (*mapperPolicyRecurrencePtrType)(v)
}

func (*mapperPolicyRecurrencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MapperPolicyRecurrence)(nil)).Elem()
}

func (i *mapperPolicyRecurrencePtrType) ToMapperPolicyRecurrencePtrOutput() MapperPolicyRecurrencePtrOutput {
	return i.ToMapperPolicyRecurrencePtrOutputWithContext(context.Background())
}

func (i *mapperPolicyRecurrencePtrType) ToMapperPolicyRecurrencePtrOutputWithContext(ctx context.Context) MapperPolicyRecurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MapperPolicyRecurrencePtrOutput)
}

// CDC policy recurrence details.
type MapperPolicyRecurrenceOutput struct{ *pulumi.OutputState }

func (MapperPolicyRecurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MapperPolicyRecurrence)(nil)).Elem()
}

func (o MapperPolicyRecurrenceOutput) ToMapperPolicyRecurrenceOutput() MapperPolicyRecurrenceOutput {
	return o
}

func (o MapperPolicyRecurrenceOutput) ToMapperPolicyRecurrenceOutputWithContext(ctx context.Context) MapperPolicyRecurrenceOutput {
	return o
}

func (o MapperPolicyRecurrenceOutput) ToMapperPolicyRecurrencePtrOutput() MapperPolicyRecurrencePtrOutput {
	return o.ToMapperPolicyRecurrencePtrOutputWithContext(context.Background())
}

func (o MapperPolicyRecurrenceOutput) ToMapperPolicyRecurrencePtrOutputWithContext(ctx context.Context) MapperPolicyRecurrencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MapperPolicyRecurrence) *MapperPolicyRecurrence {
		return &v
	}).(MapperPolicyRecurrencePtrOutput)
}

// Frequency of period in terms of 'Hour', 'Minute' or 'Second'.
func (o MapperPolicyRecurrenceOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MapperPolicyRecurrence) *string { return v.Frequency }).(pulumi.StringPtrOutput)
}

// Actual interval value as per chosen frequency.
func (o MapperPolicyRecurrenceOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MapperPolicyRecurrence) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

type MapperPolicyRecurrencePtrOutput struct{ *pulumi.OutputState }

func (MapperPolicyRecurrencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MapperPolicyRecurrence)(nil)).Elem()
}

func (o MapperPolicyRecurrencePtrOutput) ToMapperPolicyRecurrencePtrOutput() MapperPolicyRecurrencePtrOutput {
	return o
}

func (o MapperPolicyRecurrencePtrOutput) ToMapperPolicyRecurrencePtrOutputWithContext(ctx context.Context) MapperPolicyRecurrencePtrOutput {
	return o
}

func (o MapperPolicyRecurrencePtrOutput) Elem() MapperPolicyRecurrenceOutput {
	return o.ApplyT(func(v *MapperPolicyRecurrence) MapperPolicyRecurrence {
		if v != nil {
			return *v
		}
		var ret MapperPolicyRecurrence
		return ret
	}).(MapperPolicyRecurrenceOutput)
}

// Frequency of period in terms of 'Hour', 'Minute' or 'Second'.
func (o MapperPolicyRecurrencePtrOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MapperPolicyRecurrence) *string {
		if v == nil {
			return nil
		}
		return v.Frequency
	}).(pulumi.StringPtrOutput)
}

// Actual interval value as per chosen frequency.
func (o MapperPolicyRecurrencePtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MapperPolicyRecurrence) *int {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.IntPtrOutput)
}

// CDC policy recurrence details.
type MapperPolicyRecurrenceResponse struct {
	// Frequency of period in terms of 'Hour', 'Minute' or 'Second'.
	Frequency *string `pulumi:"frequency"`
	// Actual interval value as per chosen frequency.
	Interval *int `pulumi:"interval"`
}

// CDC policy recurrence details.
type MapperPolicyRecurrenceResponseOutput struct{ *pulumi.OutputState }

func (MapperPolicyRecurrenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MapperPolicyRecurrenceResponse)(nil)).Elem()
}

func (o MapperPolicyRecurrenceResponseOutput) ToMapperPolicyRecurrenceResponseOutput() MapperPolicyRecurrenceResponseOutput {
	return o
}

func (o MapperPolicyRecurrenceResponseOutput) ToMapperPolicyRecurrenceResponseOutputWithContext(ctx context.Context) MapperPolicyRecurrenceResponseOutput {
	return o
}

// Frequency of period in terms of 'Hour', 'Minute' or 'Second'.
func (o MapperPolicyRecurrenceResponseOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MapperPolicyRecurrenceResponse) *string { return v.Frequency }).(pulumi.StringPtrOutput)
}

// Actual interval value as per chosen frequency.
func (o MapperPolicyRecurrenceResponseOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MapperPolicyRecurrenceResponse) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

type MapperPolicyRecurrenceResponsePtrOutput struct{ *pulumi.OutputState }

func (MapperPolicyRecurrenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MapperPolicyRecurrenceResponse)(nil)).Elem()
}

func (o MapperPolicyRecurrenceResponsePtrOutput) ToMapperPolicyRecurrenceResponsePtrOutput() MapperPolicyRecurrenceResponsePtrOutput {
	return o
}

func (o MapperPolicyRecurrenceResponsePtrOutput) ToMapperPolicyRecurrenceResponsePtrOutputWithContext(ctx context.Context) MapperPolicyRecurrenceResponsePtrOutput {
	return o
}

func (o MapperPolicyRecurrenceResponsePtrOutput) Elem() MapperPolicyRecurrenceResponseOutput {
	return o.ApplyT(func(v *MapperPolicyRecurrenceResponse) MapperPolicyRecurrenceResponse {
		if v != nil {
			return *v
		}
		var ret MapperPolicyRecurrenceResponse
		return ret
	}).(MapperPolicyRecurrenceResponseOutput)
}

// Frequency of period in terms of 'Hour', 'Minute' or 'Second'.
func (o MapperPolicyRecurrenceResponsePtrOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MapperPolicyRecurrenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Frequency
	}).(pulumi.StringPtrOutput)
}

// Actual interval value as per chosen frequency.
func (o MapperPolicyRecurrenceResponsePtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MapperPolicyRecurrenceResponse) *int {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.IntPtrOutput)
}

// CDC Policy.
type MapperPolicyResponse struct {
	// Mode of running the CDC: batch vs continuous.
	Mode *string `pulumi:"mode"`
	// Defines the frequency and interval for running the CDC for batch mode.
	Recurrence *MapperPolicyRecurrenceResponse `pulumi:"recurrence"`
}

// CDC Policy.
type MapperPolicyResponseOutput struct{ *pulumi.OutputState }

func (MapperPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MapperPolicyResponse)(nil)).Elem()
}

func (o MapperPolicyResponseOutput) ToMapperPolicyResponseOutput() MapperPolicyResponseOutput {
	return o
}

func (o MapperPolicyResponseOutput) ToMapperPolicyResponseOutputWithContext(ctx context.Context) MapperPolicyResponseOutput {
	return o
}

// Mode of running the CDC: batch vs continuous.
func (o MapperPolicyResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MapperPolicyResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Defines the frequency and interval for running the CDC for batch mode.
func (o MapperPolicyResponseOutput) Recurrence() MapperPolicyRecurrenceResponsePtrOutput {
	return o.ApplyT(func(v MapperPolicyResponse) *MapperPolicyRecurrenceResponse { return v.Recurrence }).(MapperPolicyRecurrenceResponsePtrOutput)
}

// A object which contains list of tables and connection details for a source connection.
type MapperSourceConnectionsInfo struct {
	// Source connection details.
	Connection *MapperConnection `pulumi:"connection"`
	// List of source tables for a source connection.
	SourceEntities []MapperTable `pulumi:"sourceEntities"`
}

// MapperSourceConnectionsInfoInput is an input type that accepts MapperSourceConnectionsInfoArgs and MapperSourceConnectionsInfoOutput values.
// You can construct a concrete instance of `MapperSourceConnectionsInfoInput` via:
//
//	MapperSourceConnectionsInfoArgs{...}
type MapperSourceConnectionsInfoInput interface {
	pulumi.Input

	ToMapperSourceConnectionsInfoOutput() MapperSourceConnectionsInfoOutput
	ToMapperSourceConnectionsInfoOutputWithContext(context.Context) MapperSourceConnectionsInfoOutput
}

// A object which contains list of tables and connection details for a source connection.
type MapperSourceConnectionsInfoArgs struct {
	// Source connection details.
	Connection MapperConnectionPtrInput `pulumi:"connection"`
	// List of source tables for a source connection.
	SourceEntities MapperTableArrayInput `pulumi:"sourceEntities"`
}

func (MapperSourceConnectionsInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MapperSourceConnectionsInfo)(nil)).Elem()
}

func (i MapperSourceConnectionsInfoArgs) ToMapperSourceConnectionsInfoOutput() MapperSourceConnectionsInfoOutput {
	return i.ToMapperSourceConnectionsInfoOutputWithContext(context.Background())
}

func (i MapperSourceConnectionsInfoArgs) ToMapperSourceConnectionsInfoOutputWithContext(ctx context.Context) MapperSourceConnectionsInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MapperSourceConnectionsInfoOutput)
}

// MapperSourceConnectionsInfoArrayInput is an input type that accepts MapperSourceConnectionsInfoArray and MapperSourceConnectionsInfoArrayOutput values.
// You can construct a concrete instance of `MapperSourceConnectionsInfoArrayInput` via:
//
//	MapperSourceConnectionsInfoArray{ MapperSourceConnectionsInfoArgs{...} }
type MapperSourceConnectionsInfoArrayInput interface {
	pulumi.Input

	ToMapperSourceConnectionsInfoArrayOutput() MapperSourceConnectionsInfoArrayOutput
	ToMapperSourceConnectionsInfoArrayOutputWithContext(context.Context) MapperSourceConnectionsInfoArrayOutput
}

type MapperSourceConnectionsInfoArray []MapperSourceConnectionsInfoInput

func (MapperSourceConnectionsInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MapperSourceConnectionsInfo)(nil)).Elem()
}

func (i MapperSourceConnectionsInfoArray) ToMapperSourceConnectionsInfoArrayOutput() MapperSourceConnectionsInfoArrayOutput {
	return i.ToMapperSourceConnectionsInfoArrayOutputWithContext(context.Background())
}

func (i MapperSourceConnectionsInfoArray) ToMapperSourceConnectionsInfoArrayOutputWithContext(ctx context.Context) MapperSourceConnectionsInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MapperSourceConnectionsInfoArrayOutput)
}

// A object which contains list of tables and connection details for a source connection.
type MapperSourceConnectionsInfoOutput struct{ *pulumi.OutputState }

func (MapperSourceConnectionsInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MapperSourceConnectionsInfo)(nil)).Elem()
}

func (o MapperSourceConnectionsInfoOutput) ToMapperSourceConnectionsInfoOutput() MapperSourceConnectionsInfoOutput {
	return o
}

func (o MapperSourceConnectionsInfoOutput) ToMapperSourceConnectionsInfoOutputWithContext(ctx context.Context) MapperSourceConnectionsInfoOutput {
	return o
}

// Source connection details.
func (o MapperSourceConnectionsInfoOutput) Connection() MapperConnectionPtrOutput {
	return o.ApplyT(func(v MapperSourceConnectionsInfo) *MapperConnection { return v.Connection }).(MapperConnectionPtrOutput)
}

// List of source tables for a source connection.
func (o MapperSourceConnectionsInfoOutput) SourceEntities() MapperTableArrayOutput {
	return o.ApplyT(func(v MapperSourceConnectionsInfo) []MapperTable { return v.SourceEntities }).(MapperTableArrayOutput)
}

type MapperSourceConnectionsInfoArrayOutput struct{ *pulumi.OutputState }

func (MapperSourceConnectionsInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MapperSourceConnectionsInfo)(nil)).Elem()
}

func (o MapperSourceConnectionsInfoArrayOutput) ToMapperSourceConnectionsInfoArrayOutput() MapperSourceConnectionsInfoArrayOutput {
	return o
}

func (o MapperSourceConnectionsInfoArrayOutput) ToMapperSourceConnectionsInfoArrayOutputWithContext(ctx context.Context) MapperSourceConnectionsInfoArrayOutput {
	return o
}

func (o MapperSourceConnectionsInfoArrayOutput) Index(i pulumi.IntInput) MapperSourceConnectionsInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MapperSourceConnectionsInfo {
		return vs[0].([]MapperSourceConnectionsInfo)[vs[1].(int)]
	}).(MapperSourceConnectionsInfoOutput)
}

// A object which contains list of tables and connection details for a source connection.
type MapperSourceConnectionsInfoResponse struct {
	// Source connection details.
	Connection *MapperConnectionResponse `pulumi:"connection"`
	// List of source tables for a source connection.
	SourceEntities []MapperTableResponse `pulumi:"sourceEntities"`
}

// A object which contains list of tables and connection details for a source connection.
type MapperSourceConnectionsInfoResponseOutput struct{ *pulumi.OutputState }

func (MapperSourceConnectionsInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MapperSourceConnectionsInfoResponse)(nil)).Elem()
}

func (o MapperSourceConnectionsInfoResponseOutput) ToMapperSourceConnectionsInfoResponseOutput() MapperSourceConnectionsInfoResponseOutput {
	return o
}

func (o MapperSourceConnectionsInfoResponseOutput) ToMapperSourceConnectionsInfoResponseOutputWithContext(ctx context.Context) MapperSourceConnectionsInfoResponseOutput {
	return o
}

// Source connection details.
func (o MapperSourceConnectionsInfoResponseOutput) Connection() MapperConnectionResponsePtrOutput {
	return o.ApplyT(func(v MapperSourceConnectionsInfoResponse) *MapperConnectionResponse { return v.Connection }).(MapperConnectionResponsePtrOutput)
}

// List of source tables for a source connection.
func (o MapperSourceConnectionsInfoResponseOutput) SourceEntities() MapperTableResponseArrayOutput {
	return o.ApplyT(func(v MapperSourceConnectionsInfoResponse) []MapperTableResponse { return v.SourceEntities }).(MapperTableResponseArrayOutput)
}

type MapperSourceConnectionsInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (MapperSourceConnectionsInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MapperSourceConnectionsInfoResponse)(nil)).Elem()
}

func (o MapperSourceConnectionsInfoResponseArrayOutput) ToMapperSourceConnectionsInfoResponseArrayOutput() MapperSourceConnectionsInfoResponseArrayOutput {
	return o
}

func (o MapperSourceConnectionsInfoResponseArrayOutput) ToMapperSourceConnectionsInfoResponseArrayOutputWithContext(ctx context.Context) MapperSourceConnectionsInfoResponseArrayOutput {
	return o
}

func (o MapperSourceConnectionsInfoResponseArrayOutput) Index(i pulumi.IntInput) MapperSourceConnectionsInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MapperSourceConnectionsInfoResponse {
		return vs[0].([]MapperSourceConnectionsInfoResponse)[vs[1].(int)]
	}).(MapperSourceConnectionsInfoResponseOutput)
}

// CDC table details.
type MapperTable struct {
	// List of name/value pairs for connection properties.
	DslConnectorProperties []MapperDslConnectorProperties `pulumi:"dslConnectorProperties"`
	// Name of the table.
	Name *string `pulumi:"name"`
	// List of columns for the source table.
	Schema []MapperTableSchema `pulumi:"schema"`
}

// MapperTableInput is an input type that accepts MapperTableArgs and MapperTableOutput values.
// You can construct a concrete instance of `MapperTableInput` via:
//
//	MapperTableArgs{...}
type MapperTableInput interface {
	pulumi.Input

	ToMapperTableOutput() MapperTableOutput
	ToMapperTableOutputWithContext(context.Context) MapperTableOutput
}

// CDC table details.
type MapperTableArgs struct {
	// List of name/value pairs for connection properties.
	DslConnectorProperties MapperDslConnectorPropertiesArrayInput `pulumi:"dslConnectorProperties"`
	// Name of the table.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// List of columns for the source table.
	Schema MapperTableSchemaArrayInput `pulumi:"schema"`
}

func (MapperTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MapperTable)(nil)).Elem()
}

func (i MapperTableArgs) ToMapperTableOutput() MapperTableOutput {
	return i.ToMapperTableOutputWithContext(context.Background())
}

func (i MapperTableArgs) ToMapperTableOutputWithContext(ctx context.Context) MapperTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MapperTableOutput)
}

// MapperTableArrayInput is an input type that accepts MapperTableArray and MapperTableArrayOutput values.
// You can construct a concrete instance of `MapperTableArrayInput` via:
//
//	MapperTableArray{ MapperTableArgs{...} }
type MapperTableArrayInput interface {
	pulumi.Input

	ToMapperTableArrayOutput() MapperTableArrayOutput
	ToMapperTableArrayOutputWithContext(context.Context) MapperTableArrayOutput
}

type MapperTableArray []MapperTableInput

func (MapperTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MapperTable)(nil)).Elem()
}

func (i MapperTableArray) ToMapperTableArrayOutput() MapperTableArrayOutput {
	return i.ToMapperTableArrayOutputWithContext(context.Background())
}

func (i MapperTableArray) ToMapperTableArrayOutputWithContext(ctx context.Context) MapperTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MapperTableArrayOutput)
}

// CDC table details.
type MapperTableOutput struct{ *pulumi.OutputState }

func (MapperTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MapperTable)(nil)).Elem()
}

func (o MapperTableOutput) ToMapperTableOutput() MapperTableOutput {
	return o
}

func (o MapperTableOutput) ToMapperTableOutputWithContext(ctx context.Context) MapperTableOutput {
	return o
}

// List of name/value pairs for connection properties.
func (o MapperTableOutput) DslConnectorProperties() MapperDslConnectorPropertiesArrayOutput {
	return o.ApplyT(func(v MapperTable) []MapperDslConnectorProperties { return v.DslConnectorProperties }).(MapperDslConnectorPropertiesArrayOutput)
}

// Name of the table.
func (o MapperTableOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MapperTable) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// List of columns for the source table.
func (o MapperTableOutput) Schema() MapperTableSchemaArrayOutput {
	return o.ApplyT(func(v MapperTable) []MapperTableSchema { return v.Schema }).(MapperTableSchemaArrayOutput)
}

type MapperTableArrayOutput struct{ *pulumi.OutputState }

func (MapperTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MapperTable)(nil)).Elem()
}

func (o MapperTableArrayOutput) ToMapperTableArrayOutput() MapperTableArrayOutput {
	return o
}

func (o MapperTableArrayOutput) ToMapperTableArrayOutputWithContext(ctx context.Context) MapperTableArrayOutput {
	return o
}

func (o MapperTableArrayOutput) Index(i pulumi.IntInput) MapperTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MapperTable {
		return vs[0].([]MapperTable)[vs[1].(int)]
	}).(MapperTableOutput)
}

// CDC table details.
type MapperTableResponse struct {
	// List of name/value pairs for connection properties.
	DslConnectorProperties []MapperDslConnectorPropertiesResponse `pulumi:"dslConnectorProperties"`
	// Name of the table.
	Name *string `pulumi:"name"`
	// List of columns for the source table.
	Schema []MapperTableSchemaResponse `pulumi:"schema"`
}

// CDC table details.
type MapperTableResponseOutput struct{ *pulumi.OutputState }

func (MapperTableResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MapperTableResponse)(nil)).Elem()
}

func (o MapperTableResponseOutput) ToMapperTableResponseOutput() MapperTableResponseOutput {
	return o
}

func (o MapperTableResponseOutput) ToMapperTableResponseOutputWithContext(ctx context.Context) MapperTableResponseOutput {
	return o
}

// List of name/value pairs for connection properties.
func (o MapperTableResponseOutput) DslConnectorProperties() MapperDslConnectorPropertiesResponseArrayOutput {
	return o.ApplyT(func(v MapperTableResponse) []MapperDslConnectorPropertiesResponse { return v.DslConnectorProperties }).(MapperDslConnectorPropertiesResponseArrayOutput)
}

// Name of the table.
func (o MapperTableResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MapperTableResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// List of columns for the source table.
func (o MapperTableResponseOutput) Schema() MapperTableSchemaResponseArrayOutput {
	return o.ApplyT(func(v MapperTableResponse) []MapperTableSchemaResponse { return v.Schema }).(MapperTableSchemaResponseArrayOutput)
}

type MapperTableResponseArrayOutput struct{ *pulumi.OutputState }

func (MapperTableResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MapperTableResponse)(nil)).Elem()
}

func (o MapperTableResponseArrayOutput) ToMapperTableResponseArrayOutput() MapperTableResponseArrayOutput {
	return o
}

func (o MapperTableResponseArrayOutput) ToMapperTableResponseArrayOutputWithContext(ctx context.Context) MapperTableResponseArrayOutput {
	return o
}

func (o MapperTableResponseArrayOutput) Index(i pulumi.IntInput) MapperTableResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MapperTableResponse {
		return vs[0].([]MapperTableResponse)[vs[1].(int)]
	}).(MapperTableResponseOutput)
}

// Schema of a CDC table in terms of column names and their corresponding data types.
type MapperTableSchema struct {
	// Data type of the column.
	DataType *string `pulumi:"dataType"`
	// Name of the column.
	Name *string `pulumi:"name"`
}

// MapperTableSchemaInput is an input type that accepts MapperTableSchemaArgs and MapperTableSchemaOutput values.
// You can construct a concrete instance of `MapperTableSchemaInput` via:
//
//	MapperTableSchemaArgs{...}
type MapperTableSchemaInput interface {
	pulumi.Input

	ToMapperTableSchemaOutput() MapperTableSchemaOutput
	ToMapperTableSchemaOutputWithContext(context.Context) MapperTableSchemaOutput
}

// Schema of a CDC table in terms of column names and their corresponding data types.
type MapperTableSchemaArgs struct {
	// Data type of the column.
	DataType pulumi.StringPtrInput `pulumi:"dataType"`
	// Name of the column.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (MapperTableSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MapperTableSchema)(nil)).Elem()
}

func (i MapperTableSchemaArgs) ToMapperTableSchemaOutput() MapperTableSchemaOutput {
	return i.ToMapperTableSchemaOutputWithContext(context.Background())
}

func (i MapperTableSchemaArgs) ToMapperTableSchemaOutputWithContext(ctx context.Context) MapperTableSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MapperTableSchemaOutput)
}

// MapperTableSchemaArrayInput is an input type that accepts MapperTableSchemaArray and MapperTableSchemaArrayOutput values.
// You can construct a concrete instance of `MapperTableSchemaArrayInput` via:
//
//	MapperTableSchemaArray{ MapperTableSchemaArgs{...} }
type MapperTableSchemaArrayInput interface {
	pulumi.Input

	ToMapperTableSchemaArrayOutput() MapperTableSchemaArrayOutput
	ToMapperTableSchemaArrayOutputWithContext(context.Context) MapperTableSchemaArrayOutput
}

type MapperTableSchemaArray []MapperTableSchemaInput

func (MapperTableSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MapperTableSchema)(nil)).Elem()
}

func (i MapperTableSchemaArray) ToMapperTableSchemaArrayOutput() MapperTableSchemaArrayOutput {
	return i.ToMapperTableSchemaArrayOutputWithContext(context.Background())
}

func (i MapperTableSchemaArray) ToMapperTableSchemaArrayOutputWithContext(ctx context.Context) MapperTableSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MapperTableSchemaArrayOutput)
}

// Schema of a CDC table in terms of column names and their corresponding data types.
type MapperTableSchemaOutput struct{ *pulumi.OutputState }

func (MapperTableSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MapperTableSchema)(nil)).Elem()
}

func (o MapperTableSchemaOutput) ToMapperTableSchemaOutput() MapperTableSchemaOutput {
	return o
}

func (o MapperTableSchemaOutput) ToMapperTableSchemaOutputWithContext(ctx context.Context) MapperTableSchemaOutput {
	return o
}

// Data type of the column.
func (o MapperTableSchemaOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MapperTableSchema) *string { return v.DataType }).(pulumi.StringPtrOutput)
}

// Name of the column.
func (o MapperTableSchemaOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MapperTableSchema) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type MapperTableSchemaArrayOutput struct{ *pulumi.OutputState }

func (MapperTableSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MapperTableSchema)(nil)).Elem()
}

func (o MapperTableSchemaArrayOutput) ToMapperTableSchemaArrayOutput() MapperTableSchemaArrayOutput {
	return o
}

func (o MapperTableSchemaArrayOutput) ToMapperTableSchemaArrayOutputWithContext(ctx context.Context) MapperTableSchemaArrayOutput {
	return o
}

func (o MapperTableSchemaArrayOutput) Index(i pulumi.IntInput) MapperTableSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MapperTableSchema {
		return vs[0].([]MapperTableSchema)[vs[1].(int)]
	}).(MapperTableSchemaOutput)
}

// Schema of a CDC table in terms of column names and their corresponding data types.
type MapperTableSchemaResponse struct {
	// Data type of the column.
	DataType *string `pulumi:"dataType"`
	// Name of the column.
	Name *string `pulumi:"name"`
}

// Schema of a CDC table in terms of column names and their corresponding data types.
type MapperTableSchemaResponseOutput struct{ *pulumi.OutputState }

func (MapperTableSchemaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MapperTableSchemaResponse)(nil)).Elem()
}

func (o MapperTableSchemaResponseOutput) ToMapperTableSchemaResponseOutput() MapperTableSchemaResponseOutput {
	return o
}

func (o MapperTableSchemaResponseOutput) ToMapperTableSchemaResponseOutputWithContext(ctx context.Context) MapperTableSchemaResponseOutput {
	return o
}

// Data type of the column.
func (o MapperTableSchemaResponseOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MapperTableSchemaResponse) *string { return v.DataType }).(pulumi.StringPtrOutput)
}

// Name of the column.
func (o MapperTableSchemaResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MapperTableSchemaResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type MapperTableSchemaResponseArrayOutput struct{ *pulumi.OutputState }

func (MapperTableSchemaResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MapperTableSchemaResponse)(nil)).Elem()
}

func (o MapperTableSchemaResponseArrayOutput) ToMapperTableSchemaResponseArrayOutput() MapperTableSchemaResponseArrayOutput {
	return o
}

func (o MapperTableSchemaResponseArrayOutput) ToMapperTableSchemaResponseArrayOutputWithContext(ctx context.Context) MapperTableSchemaResponseArrayOutput {
	return o
}

func (o MapperTableSchemaResponseArrayOutput) Index(i pulumi.IntInput) MapperTableSchemaResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MapperTableSchemaResponse {
		return vs[0].([]MapperTableSchemaResponse)[vs[1].(int)]
	}).(MapperTableSchemaResponseOutput)
}

// A object which contains list of tables and connection details for a target connection.
type MapperTargetConnectionsInfo struct {
	// Source connection details.
	Connection *MapperConnection `pulumi:"connection"`
	// List of table mappings.
	DataMapperMappings []DataMapperMapping `pulumi:"dataMapperMappings"`
	// List of relationship info among the tables.
	Relationships []interface{} `pulumi:"relationships"`
	// List of source tables for a target connection.
	TargetEntities []MapperTable `pulumi:"targetEntities"`
}

// MapperTargetConnectionsInfoInput is an input type that accepts MapperTargetConnectionsInfoArgs and MapperTargetConnectionsInfoOutput values.
// You can construct a concrete instance of `MapperTargetConnectionsInfoInput` via:
//
//	MapperTargetConnectionsInfoArgs{...}
type MapperTargetConnectionsInfoInput interface {
	pulumi.Input

	ToMapperTargetConnectionsInfoOutput() MapperTargetConnectionsInfoOutput
	ToMapperTargetConnectionsInfoOutputWithContext(context.Context) MapperTargetConnectionsInfoOutput
}

// A object which contains list of tables and connection details for a target connection.
type MapperTargetConnectionsInfoArgs struct {
	// Source connection details.
	Connection MapperConnectionPtrInput `pulumi:"connection"`
	// List of table mappings.
	DataMapperMappings DataMapperMappingArrayInput `pulumi:"dataMapperMappings"`
	// List of relationship info among the tables.
	Relationships pulumi.ArrayInput `pulumi:"relationships"`
	// List of source tables for a target connection.
	TargetEntities MapperTableArrayInput `pulumi:"targetEntities"`
}

func (MapperTargetConnectionsInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MapperTargetConnectionsInfo)(nil)).Elem()
}

func (i MapperTargetConnectionsInfoArgs) ToMapperTargetConnectionsInfoOutput() MapperTargetConnectionsInfoOutput {
	return i.ToMapperTargetConnectionsInfoOutputWithContext(context.Background())
}

func (i MapperTargetConnectionsInfoArgs) ToMapperTargetConnectionsInfoOutputWithContext(ctx context.Context) MapperTargetConnectionsInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MapperTargetConnectionsInfoOutput)
}

// MapperTargetConnectionsInfoArrayInput is an input type that accepts MapperTargetConnectionsInfoArray and MapperTargetConnectionsInfoArrayOutput values.
// You can construct a concrete instance of `MapperTargetConnectionsInfoArrayInput` via:
//
//	MapperTargetConnectionsInfoArray{ MapperTargetConnectionsInfoArgs{...} }
type MapperTargetConnectionsInfoArrayInput interface {
	pulumi.Input

	ToMapperTargetConnectionsInfoArrayOutput() MapperTargetConnectionsInfoArrayOutput
	ToMapperTargetConnectionsInfoArrayOutputWithContext(context.Context) MapperTargetConnectionsInfoArrayOutput
}

type MapperTargetConnectionsInfoArray []MapperTargetConnectionsInfoInput

func (MapperTargetConnectionsInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MapperTargetConnectionsInfo)(nil)).Elem()
}

func (i MapperTargetConnectionsInfoArray) ToMapperTargetConnectionsInfoArrayOutput() MapperTargetConnectionsInfoArrayOutput {
	return i.ToMapperTargetConnectionsInfoArrayOutputWithContext(context.Background())
}

func (i MapperTargetConnectionsInfoArray) ToMapperTargetConnectionsInfoArrayOutputWithContext(ctx context.Context) MapperTargetConnectionsInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MapperTargetConnectionsInfoArrayOutput)
}

// A object which contains list of tables and connection details for a target connection.
type MapperTargetConnectionsInfoOutput struct{ *pulumi.OutputState }

func (MapperTargetConnectionsInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MapperTargetConnectionsInfo)(nil)).Elem()
}

func (o MapperTargetConnectionsInfoOutput) ToMapperTargetConnectionsInfoOutput() MapperTargetConnectionsInfoOutput {
	return o
}

func (o MapperTargetConnectionsInfoOutput) ToMapperTargetConnectionsInfoOutputWithContext(ctx context.Context) MapperTargetConnectionsInfoOutput {
	return o
}

// Source connection details.
func (o MapperTargetConnectionsInfoOutput) Connection() MapperConnectionPtrOutput {
	return o.ApplyT(func(v MapperTargetConnectionsInfo) *MapperConnection { return v.Connection }).(MapperConnectionPtrOutput)
}

// List of table mappings.
func (o MapperTargetConnectionsInfoOutput) DataMapperMappings() DataMapperMappingArrayOutput {
	return o.ApplyT(func(v MapperTargetConnectionsInfo) []DataMapperMapping { return v.DataMapperMappings }).(DataMapperMappingArrayOutput)
}

// List of relationship info among the tables.
func (o MapperTargetConnectionsInfoOutput) Relationships() pulumi.ArrayOutput {
	return o.ApplyT(func(v MapperTargetConnectionsInfo) []interface{} { return v.Relationships }).(pulumi.ArrayOutput)
}

// List of source tables for a target connection.
func (o MapperTargetConnectionsInfoOutput) TargetEntities() MapperTableArrayOutput {
	return o.ApplyT(func(v MapperTargetConnectionsInfo) []MapperTable { return v.TargetEntities }).(MapperTableArrayOutput)
}

type MapperTargetConnectionsInfoArrayOutput struct{ *pulumi.OutputState }

func (MapperTargetConnectionsInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MapperTargetConnectionsInfo)(nil)).Elem()
}

func (o MapperTargetConnectionsInfoArrayOutput) ToMapperTargetConnectionsInfoArrayOutput() MapperTargetConnectionsInfoArrayOutput {
	return o
}

func (o MapperTargetConnectionsInfoArrayOutput) ToMapperTargetConnectionsInfoArrayOutputWithContext(ctx context.Context) MapperTargetConnectionsInfoArrayOutput {
	return o
}

func (o MapperTargetConnectionsInfoArrayOutput) Index(i pulumi.IntInput) MapperTargetConnectionsInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MapperTargetConnectionsInfo {
		return vs[0].([]MapperTargetConnectionsInfo)[vs[1].(int)]
	}).(MapperTargetConnectionsInfoOutput)
}

// A object which contains list of tables and connection details for a target connection.
type MapperTargetConnectionsInfoResponse struct {
	// Source connection details.
	Connection *MapperConnectionResponse `pulumi:"connection"`
	// List of table mappings.
	DataMapperMappings []DataMapperMappingResponse `pulumi:"dataMapperMappings"`
	// List of relationship info among the tables.
	Relationships []interface{} `pulumi:"relationships"`
	// List of source tables for a target connection.
	TargetEntities []MapperTableResponse `pulumi:"targetEntities"`
}

// A object which contains list of tables and connection details for a target connection.
type MapperTargetConnectionsInfoResponseOutput struct{ *pulumi.OutputState }

func (MapperTargetConnectionsInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MapperTargetConnectionsInfoResponse)(nil)).Elem()
}

func (o MapperTargetConnectionsInfoResponseOutput) ToMapperTargetConnectionsInfoResponseOutput() MapperTargetConnectionsInfoResponseOutput {
	return o
}

func (o MapperTargetConnectionsInfoResponseOutput) ToMapperTargetConnectionsInfoResponseOutputWithContext(ctx context.Context) MapperTargetConnectionsInfoResponseOutput {
	return o
}

// Source connection details.
func (o MapperTargetConnectionsInfoResponseOutput) Connection() MapperConnectionResponsePtrOutput {
	return o.ApplyT(func(v MapperTargetConnectionsInfoResponse) *MapperConnectionResponse { return v.Connection }).(MapperConnectionResponsePtrOutput)
}

// List of table mappings.
func (o MapperTargetConnectionsInfoResponseOutput) DataMapperMappings() DataMapperMappingResponseArrayOutput {
	return o.ApplyT(func(v MapperTargetConnectionsInfoResponse) []DataMapperMappingResponse { return v.DataMapperMappings }).(DataMapperMappingResponseArrayOutput)
}

// List of relationship info among the tables.
func (o MapperTargetConnectionsInfoResponseOutput) Relationships() pulumi.ArrayOutput {
	return o.ApplyT(func(v MapperTargetConnectionsInfoResponse) []interface{} { return v.Relationships }).(pulumi.ArrayOutput)
}

// List of source tables for a target connection.
func (o MapperTargetConnectionsInfoResponseOutput) TargetEntities() MapperTableResponseArrayOutput {
	return o.ApplyT(func(v MapperTargetConnectionsInfoResponse) []MapperTableResponse { return v.TargetEntities }).(MapperTableResponseArrayOutput)
}

type MapperTargetConnectionsInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (MapperTargetConnectionsInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MapperTargetConnectionsInfoResponse)(nil)).Elem()
}

func (o MapperTargetConnectionsInfoResponseArrayOutput) ToMapperTargetConnectionsInfoResponseArrayOutput() MapperTargetConnectionsInfoResponseArrayOutput {
	return o
}

func (o MapperTargetConnectionsInfoResponseArrayOutput) ToMapperTargetConnectionsInfoResponseArrayOutputWithContext(ctx context.Context) MapperTargetConnectionsInfoResponseArrayOutput {
	return o
}

func (o MapperTargetConnectionsInfoResponseArrayOutput) Index(i pulumi.IntInput) MapperTargetConnectionsInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MapperTargetConnectionsInfoResponse {
		return vs[0].([]MapperTargetConnectionsInfoResponse)[vs[1].(int)]
	}).(MapperTargetConnectionsInfoResponseOutput)
}

// Mapping data flow.
type MappingDataFlow struct {
	// List of tags that can be used for describing the data flow.
	Annotations []interface{} `pulumi:"annotations"`
	// The description of the data flow.
	Description *string `pulumi:"description"`
	// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
	Folder *DataFlowFolder `pulumi:"folder"`
	// DataFlow script.
	Script *string `pulumi:"script"`
	// Data flow script lines.
	ScriptLines []string `pulumi:"scriptLines"`
	// List of sinks in data flow.
	Sinks []DataFlowSink `pulumi:"sinks"`
	// List of sources in data flow.
	Sources []DataFlowSource `pulumi:"sources"`
	// List of transformations in data flow.
	Transformations []Transformation `pulumi:"transformations"`
	// Type of data flow.
	// Expected value is 'MappingDataFlow'.
	Type string `pulumi:"type"`
}

// MappingDataFlowInput is an input type that accepts MappingDataFlowArgs and MappingDataFlowOutput values.
// You can construct a concrete instance of `MappingDataFlowInput` via:
//
//	MappingDataFlowArgs{...}
type MappingDataFlowInput interface {
	pulumi.Input

	ToMappingDataFlowOutput() MappingDataFlowOutput
	ToMappingDataFlowOutputWithContext(context.Context) MappingDataFlowOutput
}

// Mapping data flow.
type MappingDataFlowArgs struct {
	// List of tags that can be used for describing the data flow.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The description of the data flow.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
	Folder DataFlowFolderPtrInput `pulumi:"folder"`
	// DataFlow script.
	Script pulumi.StringPtrInput `pulumi:"script"`
	// Data flow script lines.
	ScriptLines pulumi.StringArrayInput `pulumi:"scriptLines"`
	// List of sinks in data flow.
	Sinks DataFlowSinkArrayInput `pulumi:"sinks"`
	// List of sources in data flow.
	Sources DataFlowSourceArrayInput `pulumi:"sources"`
	// List of transformations in data flow.
	Transformations TransformationArrayInput `pulumi:"transformations"`
	// Type of data flow.
	// Expected value is 'MappingDataFlow'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MappingDataFlowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingDataFlow)(nil)).Elem()
}

func (i MappingDataFlowArgs) ToMappingDataFlowOutput() MappingDataFlowOutput {
	return i.ToMappingDataFlowOutputWithContext(context.Background())
}

func (i MappingDataFlowArgs) ToMappingDataFlowOutputWithContext(ctx context.Context) MappingDataFlowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MappingDataFlowOutput)
}

// Mapping data flow.
type MappingDataFlowOutput struct{ *pulumi.OutputState }

func (MappingDataFlowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingDataFlow)(nil)).Elem()
}

func (o MappingDataFlowOutput) ToMappingDataFlowOutput() MappingDataFlowOutput {
	return o
}

func (o MappingDataFlowOutput) ToMappingDataFlowOutputWithContext(ctx context.Context) MappingDataFlowOutput {
	return o
}

// List of tags that can be used for describing the data flow.
func (o MappingDataFlowOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MappingDataFlow) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The description of the data flow.
func (o MappingDataFlowOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MappingDataFlow) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
func (o MappingDataFlowOutput) Folder() DataFlowFolderPtrOutput {
	return o.ApplyT(func(v MappingDataFlow) *DataFlowFolder { return v.Folder }).(DataFlowFolderPtrOutput)
}

// DataFlow script.
func (o MappingDataFlowOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MappingDataFlow) *string { return v.Script }).(pulumi.StringPtrOutput)
}

// Data flow script lines.
func (o MappingDataFlowOutput) ScriptLines() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MappingDataFlow) []string { return v.ScriptLines }).(pulumi.StringArrayOutput)
}

// List of sinks in data flow.
func (o MappingDataFlowOutput) Sinks() DataFlowSinkArrayOutput {
	return o.ApplyT(func(v MappingDataFlow) []DataFlowSink { return v.Sinks }).(DataFlowSinkArrayOutput)
}

// List of sources in data flow.
func (o MappingDataFlowOutput) Sources() DataFlowSourceArrayOutput {
	return o.ApplyT(func(v MappingDataFlow) []DataFlowSource { return v.Sources }).(DataFlowSourceArrayOutput)
}

// List of transformations in data flow.
func (o MappingDataFlowOutput) Transformations() TransformationArrayOutput {
	return o.ApplyT(func(v MappingDataFlow) []Transformation { return v.Transformations }).(TransformationArrayOutput)
}

// Type of data flow.
// Expected value is 'MappingDataFlow'.
func (o MappingDataFlowOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MappingDataFlow) string { return v.Type }).(pulumi.StringOutput)
}

// Mapping data flow.
type MappingDataFlowResponse struct {
	// List of tags that can be used for describing the data flow.
	Annotations []interface{} `pulumi:"annotations"`
	// The description of the data flow.
	Description *string `pulumi:"description"`
	// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
	Folder *DataFlowResponseFolder `pulumi:"folder"`
	// DataFlow script.
	Script *string `pulumi:"script"`
	// Data flow script lines.
	ScriptLines []string `pulumi:"scriptLines"`
	// List of sinks in data flow.
	Sinks []DataFlowSinkResponse `pulumi:"sinks"`
	// List of sources in data flow.
	Sources []DataFlowSourceResponse `pulumi:"sources"`
	// List of transformations in data flow.
	Transformations []TransformationResponse `pulumi:"transformations"`
	// Type of data flow.
	// Expected value is 'MappingDataFlow'.
	Type string `pulumi:"type"`
}

// Mapping data flow.
type MappingDataFlowResponseOutput struct{ *pulumi.OutputState }

func (MappingDataFlowResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MappingDataFlowResponse)(nil)).Elem()
}

func (o MappingDataFlowResponseOutput) ToMappingDataFlowResponseOutput() MappingDataFlowResponseOutput {
	return o
}

func (o MappingDataFlowResponseOutput) ToMappingDataFlowResponseOutputWithContext(ctx context.Context) MappingDataFlowResponseOutput {
	return o
}

// List of tags that can be used for describing the data flow.
func (o MappingDataFlowResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MappingDataFlowResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The description of the data flow.
func (o MappingDataFlowResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MappingDataFlowResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
func (o MappingDataFlowResponseOutput) Folder() DataFlowResponseFolderPtrOutput {
	return o.ApplyT(func(v MappingDataFlowResponse) *DataFlowResponseFolder { return v.Folder }).(DataFlowResponseFolderPtrOutput)
}

// DataFlow script.
func (o MappingDataFlowResponseOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MappingDataFlowResponse) *string { return v.Script }).(pulumi.StringPtrOutput)
}

// Data flow script lines.
func (o MappingDataFlowResponseOutput) ScriptLines() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MappingDataFlowResponse) []string { return v.ScriptLines }).(pulumi.StringArrayOutput)
}

// List of sinks in data flow.
func (o MappingDataFlowResponseOutput) Sinks() DataFlowSinkResponseArrayOutput {
	return o.ApplyT(func(v MappingDataFlowResponse) []DataFlowSinkResponse { return v.Sinks }).(DataFlowSinkResponseArrayOutput)
}

// List of sources in data flow.
func (o MappingDataFlowResponseOutput) Sources() DataFlowSourceResponseArrayOutput {
	return o.ApplyT(func(v MappingDataFlowResponse) []DataFlowSourceResponse { return v.Sources }).(DataFlowSourceResponseArrayOutput)
}

// List of transformations in data flow.
func (o MappingDataFlowResponseOutput) Transformations() TransformationResponseArrayOutput {
	return o.ApplyT(func(v MappingDataFlowResponse) []TransformationResponse { return v.Transformations }).(TransformationResponseArrayOutput)
}

// Type of data flow.
// Expected value is 'MappingDataFlow'.
func (o MappingDataFlowResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MappingDataFlowResponse) string { return v.Type }).(pulumi.StringOutput)
}

// MariaDB server linked service.
type MariaDBLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Database name for connection. Type: string.
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The version of the MariaDB driver. Type: string. V1 or empty for legacy driver, V2 for new driver. V1 can support connection string and property bag, V2 can only support connection string.
	DriverVersion interface{} `pulumi:"driverVersion"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference `pulumi:"password"`
	// The port for the connection. Type: integer.
	Port interface{} `pulumi:"port"`
	// Server name for connection. Type: string.
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	// Expected value is 'MariaDB'.
	Type string `pulumi:"type"`
	// Username for authentication. Type: string.
	Username interface{} `pulumi:"username"`
}

// MariaDBLinkedServiceInput is an input type that accepts MariaDBLinkedServiceArgs and MariaDBLinkedServiceOutput values.
// You can construct a concrete instance of `MariaDBLinkedServiceInput` via:
//
//	MariaDBLinkedServiceArgs{...}
type MariaDBLinkedServiceInput interface {
	pulumi.Input

	ToMariaDBLinkedServiceOutput() MariaDBLinkedServiceOutput
	ToMariaDBLinkedServiceOutputWithContext(context.Context) MariaDBLinkedServiceOutput
}

// MariaDB server linked service.
type MariaDBLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Database name for connection. Type: string.
	Database pulumi.Input `pulumi:"database"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The version of the MariaDB driver. Type: string. V1 or empty for legacy driver, V2 for new driver. V1 can support connection string and property bag, V2 can only support connection string.
	DriverVersion pulumi.Input `pulumi:"driverVersion"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password AzureKeyVaultSecretReferencePtrInput `pulumi:"password"`
	// The port for the connection. Type: integer.
	Port pulumi.Input `pulumi:"port"`
	// Server name for connection. Type: string.
	Server pulumi.Input `pulumi:"server"`
	// Type of linked service.
	// Expected value is 'MariaDB'.
	Type pulumi.StringInput `pulumi:"type"`
	// Username for authentication. Type: string.
	Username pulumi.Input `pulumi:"username"`
}

func (MariaDBLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MariaDBLinkedService)(nil)).Elem()
}

func (i MariaDBLinkedServiceArgs) ToMariaDBLinkedServiceOutput() MariaDBLinkedServiceOutput {
	return i.ToMariaDBLinkedServiceOutputWithContext(context.Background())
}

func (i MariaDBLinkedServiceArgs) ToMariaDBLinkedServiceOutputWithContext(ctx context.Context) MariaDBLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MariaDBLinkedServiceOutput)
}

// MariaDB server linked service.
type MariaDBLinkedServiceOutput struct{ *pulumi.OutputState }

func (MariaDBLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MariaDBLinkedService)(nil)).Elem()
}

func (o MariaDBLinkedServiceOutput) ToMariaDBLinkedServiceOutput() MariaDBLinkedServiceOutput {
	return o
}

func (o MariaDBLinkedServiceOutput) ToMariaDBLinkedServiceOutputWithContext(ctx context.Context) MariaDBLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o MariaDBLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MariaDBLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o MariaDBLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v MariaDBLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o MariaDBLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v MariaDBLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Database name for connection. Type: string.
func (o MariaDBLinkedServiceOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v MariaDBLinkedService) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Linked service description.
func (o MariaDBLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MariaDBLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The version of the MariaDB driver. Type: string. V1 or empty for legacy driver, V2 for new driver. V1 can support connection string and property bag, V2 can only support connection string.
func (o MariaDBLinkedServiceOutput) DriverVersion() pulumi.AnyOutput {
	return o.ApplyT(func(v MariaDBLinkedService) interface{} { return v.DriverVersion }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o MariaDBLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MariaDBLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o MariaDBLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v MariaDBLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o MariaDBLinkedServiceOutput) Password() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v MariaDBLinkedService) *AzureKeyVaultSecretReference { return v.Password }).(AzureKeyVaultSecretReferencePtrOutput)
}

// The port for the connection. Type: integer.
func (o MariaDBLinkedServiceOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v MariaDBLinkedService) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// Server name for connection. Type: string.
func (o MariaDBLinkedServiceOutput) Server() pulumi.AnyOutput {
	return o.ApplyT(func(v MariaDBLinkedService) interface{} { return v.Server }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'MariaDB'.
func (o MariaDBLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MariaDBLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Username for authentication. Type: string.
func (o MariaDBLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v MariaDBLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// MariaDB server linked service.
type MariaDBLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Database name for connection. Type: string.
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The version of the MariaDB driver. Type: string. V1 or empty for legacy driver, V2 for new driver. V1 can support connection string and property bag, V2 can only support connection string.
	DriverVersion interface{} `pulumi:"driverVersion"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReferenceResponse `pulumi:"password"`
	// The port for the connection. Type: integer.
	Port interface{} `pulumi:"port"`
	// Server name for connection. Type: string.
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	// Expected value is 'MariaDB'.
	Type string `pulumi:"type"`
	// Username for authentication. Type: string.
	Username interface{} `pulumi:"username"`
}

// MariaDB server linked service.
type MariaDBLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (MariaDBLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MariaDBLinkedServiceResponse)(nil)).Elem()
}

func (o MariaDBLinkedServiceResponseOutput) ToMariaDBLinkedServiceResponseOutput() MariaDBLinkedServiceResponseOutput {
	return o
}

func (o MariaDBLinkedServiceResponseOutput) ToMariaDBLinkedServiceResponseOutputWithContext(ctx context.Context) MariaDBLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o MariaDBLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MariaDBLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o MariaDBLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v MariaDBLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o MariaDBLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v MariaDBLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Database name for connection. Type: string.
func (o MariaDBLinkedServiceResponseOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v MariaDBLinkedServiceResponse) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Linked service description.
func (o MariaDBLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MariaDBLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The version of the MariaDB driver. Type: string. V1 or empty for legacy driver, V2 for new driver. V1 can support connection string and property bag, V2 can only support connection string.
func (o MariaDBLinkedServiceResponseOutput) DriverVersion() pulumi.AnyOutput {
	return o.ApplyT(func(v MariaDBLinkedServiceResponse) interface{} { return v.DriverVersion }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o MariaDBLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MariaDBLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o MariaDBLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v MariaDBLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o MariaDBLinkedServiceResponseOutput) Password() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v MariaDBLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse { return v.Password }).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// The port for the connection. Type: integer.
func (o MariaDBLinkedServiceResponseOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v MariaDBLinkedServiceResponse) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// Server name for connection. Type: string.
func (o MariaDBLinkedServiceResponseOutput) Server() pulumi.AnyOutput {
	return o.ApplyT(func(v MariaDBLinkedServiceResponse) interface{} { return v.Server }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'MariaDB'.
func (o MariaDBLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MariaDBLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Username for authentication. Type: string.
func (o MariaDBLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v MariaDBLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// A copy activity MariaDB server source.
type MariaDBSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MariaDBSource'.
	Type string `pulumi:"type"`
}

// MariaDBSourceInput is an input type that accepts MariaDBSourceArgs and MariaDBSourceOutput values.
// You can construct a concrete instance of `MariaDBSourceInput` via:
//
//	MariaDBSourceArgs{...}
type MariaDBSourceInput interface {
	pulumi.Input

	ToMariaDBSourceOutput() MariaDBSourceOutput
	ToMariaDBSourceOutputWithContext(context.Context) MariaDBSourceOutput
}

// A copy activity MariaDB server source.
type MariaDBSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MariaDBSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MariaDBSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MariaDBSource)(nil)).Elem()
}

func (i MariaDBSourceArgs) ToMariaDBSourceOutput() MariaDBSourceOutput {
	return i.ToMariaDBSourceOutputWithContext(context.Background())
}

func (i MariaDBSourceArgs) ToMariaDBSourceOutputWithContext(ctx context.Context) MariaDBSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MariaDBSourceOutput)
}

// A copy activity MariaDB server source.
type MariaDBSourceOutput struct{ *pulumi.OutputState }

func (MariaDBSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MariaDBSource)(nil)).Elem()
}

func (o MariaDBSourceOutput) ToMariaDBSourceOutput() MariaDBSourceOutput {
	return o
}

func (o MariaDBSourceOutput) ToMariaDBSourceOutputWithContext(ctx context.Context) MariaDBSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o MariaDBSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v MariaDBSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o MariaDBSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v MariaDBSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o MariaDBSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v MariaDBSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o MariaDBSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v MariaDBSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o MariaDBSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v MariaDBSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o MariaDBSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v MariaDBSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o MariaDBSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v MariaDBSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'MariaDBSource'.
func (o MariaDBSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MariaDBSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity MariaDB server source.
type MariaDBSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MariaDBSource'.
	Type string `pulumi:"type"`
}

// A copy activity MariaDB server source.
type MariaDBSourceResponseOutput struct{ *pulumi.OutputState }

func (MariaDBSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MariaDBSourceResponse)(nil)).Elem()
}

func (o MariaDBSourceResponseOutput) ToMariaDBSourceResponseOutput() MariaDBSourceResponseOutput {
	return o
}

func (o MariaDBSourceResponseOutput) ToMariaDBSourceResponseOutputWithContext(ctx context.Context) MariaDBSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o MariaDBSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v MariaDBSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o MariaDBSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v MariaDBSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o MariaDBSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v MariaDBSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o MariaDBSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v MariaDBSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o MariaDBSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v MariaDBSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o MariaDBSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v MariaDBSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o MariaDBSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v MariaDBSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'MariaDBSource'.
func (o MariaDBSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MariaDBSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// MariaDB server dataset.
type MariaDBTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'MariaDBTable'.
	Type string `pulumi:"type"`
}

// MariaDBTableDatasetInput is an input type that accepts MariaDBTableDatasetArgs and MariaDBTableDatasetOutput values.
// You can construct a concrete instance of `MariaDBTableDatasetInput` via:
//
//	MariaDBTableDatasetArgs{...}
type MariaDBTableDatasetInput interface {
	pulumi.Input

	ToMariaDBTableDatasetOutput() MariaDBTableDatasetOutput
	ToMariaDBTableDatasetOutputWithContext(context.Context) MariaDBTableDatasetOutput
}

// MariaDB server dataset.
type MariaDBTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'MariaDBTable'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MariaDBTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MariaDBTableDataset)(nil)).Elem()
}

func (i MariaDBTableDatasetArgs) ToMariaDBTableDatasetOutput() MariaDBTableDatasetOutput {
	return i.ToMariaDBTableDatasetOutputWithContext(context.Background())
}

func (i MariaDBTableDatasetArgs) ToMariaDBTableDatasetOutputWithContext(ctx context.Context) MariaDBTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MariaDBTableDatasetOutput)
}

// MariaDB server dataset.
type MariaDBTableDatasetOutput struct{ *pulumi.OutputState }

func (MariaDBTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MariaDBTableDataset)(nil)).Elem()
}

func (o MariaDBTableDatasetOutput) ToMariaDBTableDatasetOutput() MariaDBTableDatasetOutput {
	return o
}

func (o MariaDBTableDatasetOutput) ToMariaDBTableDatasetOutputWithContext(ctx context.Context) MariaDBTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o MariaDBTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MariaDBTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o MariaDBTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MariaDBTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o MariaDBTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v MariaDBTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o MariaDBTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v MariaDBTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o MariaDBTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v MariaDBTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o MariaDBTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v MariaDBTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o MariaDBTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v MariaDBTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o MariaDBTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v MariaDBTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'MariaDBTable'.
func (o MariaDBTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MariaDBTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// MariaDB server dataset.
type MariaDBTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'MariaDBTable'.
	Type string `pulumi:"type"`
}

// MariaDB server dataset.
type MariaDBTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (MariaDBTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MariaDBTableDatasetResponse)(nil)).Elem()
}

func (o MariaDBTableDatasetResponseOutput) ToMariaDBTableDatasetResponseOutput() MariaDBTableDatasetResponseOutput {
	return o
}

func (o MariaDBTableDatasetResponseOutput) ToMariaDBTableDatasetResponseOutputWithContext(ctx context.Context) MariaDBTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o MariaDBTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MariaDBTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o MariaDBTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MariaDBTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o MariaDBTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v MariaDBTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o MariaDBTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v MariaDBTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o MariaDBTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v MariaDBTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o MariaDBTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v MariaDBTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o MariaDBTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v MariaDBTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o MariaDBTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v MariaDBTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'MariaDBTable'.
func (o MariaDBTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MariaDBTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Marketo server linked service.
type MarketoLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client Id of your Marketo service.
	ClientId interface{} `pulumi:"clientId"`
	// The client secret of your Marketo service.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The endpoint of the Marketo server. (i.e. 123-ABC-321.mktorest.com)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Marketo'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// MarketoLinkedServiceInput is an input type that accepts MarketoLinkedServiceArgs and MarketoLinkedServiceOutput values.
// You can construct a concrete instance of `MarketoLinkedServiceInput` via:
//
//	MarketoLinkedServiceArgs{...}
type MarketoLinkedServiceInput interface {
	pulumi.Input

	ToMarketoLinkedServiceOutput() MarketoLinkedServiceOutput
	ToMarketoLinkedServiceOutputWithContext(context.Context) MarketoLinkedServiceOutput
}

// Marketo server linked service.
type MarketoLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The client Id of your Marketo service.
	ClientId pulumi.Input `pulumi:"clientId"`
	// The client secret of your Marketo service.
	ClientSecret pulumi.Input `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// The endpoint of the Marketo server. (i.e. 123-ABC-321.mktorest.com)
	Endpoint pulumi.Input `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Marketo'.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
}

func (MarketoLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MarketoLinkedService)(nil)).Elem()
}

func (i MarketoLinkedServiceArgs) ToMarketoLinkedServiceOutput() MarketoLinkedServiceOutput {
	return i.ToMarketoLinkedServiceOutputWithContext(context.Background())
}

func (i MarketoLinkedServiceArgs) ToMarketoLinkedServiceOutputWithContext(ctx context.Context) MarketoLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarketoLinkedServiceOutput)
}

// Marketo server linked service.
type MarketoLinkedServiceOutput struct{ *pulumi.OutputState }

func (MarketoLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MarketoLinkedService)(nil)).Elem()
}

func (o MarketoLinkedServiceOutput) ToMarketoLinkedServiceOutput() MarketoLinkedServiceOutput {
	return o
}

func (o MarketoLinkedServiceOutput) ToMarketoLinkedServiceOutputWithContext(ctx context.Context) MarketoLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o MarketoLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MarketoLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The client Id of your Marketo service.
func (o MarketoLinkedServiceOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoLinkedService) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret of your Marketo service.
func (o MarketoLinkedServiceOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoLinkedService) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o MarketoLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v MarketoLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o MarketoLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MarketoLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o MarketoLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MarketoLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The endpoint of the Marketo server. (i.e. 123-ABC-321.mktorest.com)
func (o MarketoLinkedServiceOutput) Endpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoLinkedService) interface{} { return v.Endpoint }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o MarketoLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v MarketoLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
// Expected value is 'Marketo'.
func (o MarketoLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MarketoLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o MarketoLinkedServiceOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoLinkedService) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o MarketoLinkedServiceOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoLinkedService) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o MarketoLinkedServiceOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoLinkedService) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// Marketo server linked service.
type MarketoLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client Id of your Marketo service.
	ClientId interface{} `pulumi:"clientId"`
	// The client secret of your Marketo service.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The endpoint of the Marketo server. (i.e. 123-ABC-321.mktorest.com)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Marketo'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Marketo server linked service.
type MarketoLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (MarketoLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MarketoLinkedServiceResponse)(nil)).Elem()
}

func (o MarketoLinkedServiceResponseOutput) ToMarketoLinkedServiceResponseOutput() MarketoLinkedServiceResponseOutput {
	return o
}

func (o MarketoLinkedServiceResponseOutput) ToMarketoLinkedServiceResponseOutputWithContext(ctx context.Context) MarketoLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o MarketoLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MarketoLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The client Id of your Marketo service.
func (o MarketoLinkedServiceResponseOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoLinkedServiceResponse) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret of your Marketo service.
func (o MarketoLinkedServiceResponseOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoLinkedServiceResponse) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o MarketoLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v MarketoLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o MarketoLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MarketoLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o MarketoLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MarketoLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The endpoint of the Marketo server. (i.e. 123-ABC-321.mktorest.com)
func (o MarketoLinkedServiceResponseOutput) Endpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoLinkedServiceResponse) interface{} { return v.Endpoint }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o MarketoLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v MarketoLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
// Expected value is 'Marketo'.
func (o MarketoLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MarketoLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o MarketoLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoLinkedServiceResponse) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o MarketoLinkedServiceResponseOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoLinkedServiceResponse) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o MarketoLinkedServiceResponseOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoLinkedServiceResponse) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// Marketo server dataset.
type MarketoObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'MarketoObject'.
	Type string `pulumi:"type"`
}

// MarketoObjectDatasetInput is an input type that accepts MarketoObjectDatasetArgs and MarketoObjectDatasetOutput values.
// You can construct a concrete instance of `MarketoObjectDatasetInput` via:
//
//	MarketoObjectDatasetArgs{...}
type MarketoObjectDatasetInput interface {
	pulumi.Input

	ToMarketoObjectDatasetOutput() MarketoObjectDatasetOutput
	ToMarketoObjectDatasetOutputWithContext(context.Context) MarketoObjectDatasetOutput
}

// Marketo server dataset.
type MarketoObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'MarketoObject'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MarketoObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MarketoObjectDataset)(nil)).Elem()
}

func (i MarketoObjectDatasetArgs) ToMarketoObjectDatasetOutput() MarketoObjectDatasetOutput {
	return i.ToMarketoObjectDatasetOutputWithContext(context.Background())
}

func (i MarketoObjectDatasetArgs) ToMarketoObjectDatasetOutputWithContext(ctx context.Context) MarketoObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarketoObjectDatasetOutput)
}

// Marketo server dataset.
type MarketoObjectDatasetOutput struct{ *pulumi.OutputState }

func (MarketoObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MarketoObjectDataset)(nil)).Elem()
}

func (o MarketoObjectDatasetOutput) ToMarketoObjectDatasetOutput() MarketoObjectDatasetOutput {
	return o
}

func (o MarketoObjectDatasetOutput) ToMarketoObjectDatasetOutputWithContext(ctx context.Context) MarketoObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o MarketoObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MarketoObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o MarketoObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MarketoObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o MarketoObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v MarketoObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o MarketoObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v MarketoObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o MarketoObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v MarketoObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o MarketoObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o MarketoObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o MarketoObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'MarketoObject'.
func (o MarketoObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MarketoObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Marketo server dataset.
type MarketoObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'MarketoObject'.
	Type string `pulumi:"type"`
}

// Marketo server dataset.
type MarketoObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (MarketoObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MarketoObjectDatasetResponse)(nil)).Elem()
}

func (o MarketoObjectDatasetResponseOutput) ToMarketoObjectDatasetResponseOutput() MarketoObjectDatasetResponseOutput {
	return o
}

func (o MarketoObjectDatasetResponseOutput) ToMarketoObjectDatasetResponseOutputWithContext(ctx context.Context) MarketoObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o MarketoObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MarketoObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o MarketoObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MarketoObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o MarketoObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v MarketoObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o MarketoObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v MarketoObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o MarketoObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v MarketoObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o MarketoObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o MarketoObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o MarketoObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'MarketoObject'.
func (o MarketoObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MarketoObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Marketo server source.
type MarketoSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MarketoSource'.
	Type string `pulumi:"type"`
}

// MarketoSourceInput is an input type that accepts MarketoSourceArgs and MarketoSourceOutput values.
// You can construct a concrete instance of `MarketoSourceInput` via:
//
//	MarketoSourceArgs{...}
type MarketoSourceInput interface {
	pulumi.Input

	ToMarketoSourceOutput() MarketoSourceOutput
	ToMarketoSourceOutputWithContext(context.Context) MarketoSourceOutput
}

// A copy activity Marketo server source.
type MarketoSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MarketoSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MarketoSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MarketoSource)(nil)).Elem()
}

func (i MarketoSourceArgs) ToMarketoSourceOutput() MarketoSourceOutput {
	return i.ToMarketoSourceOutputWithContext(context.Background())
}

func (i MarketoSourceArgs) ToMarketoSourceOutputWithContext(ctx context.Context) MarketoSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarketoSourceOutput)
}

// A copy activity Marketo server source.
type MarketoSourceOutput struct{ *pulumi.OutputState }

func (MarketoSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MarketoSource)(nil)).Elem()
}

func (o MarketoSourceOutput) ToMarketoSourceOutput() MarketoSourceOutput {
	return o
}

func (o MarketoSourceOutput) ToMarketoSourceOutputWithContext(ctx context.Context) MarketoSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o MarketoSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o MarketoSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o MarketoSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o MarketoSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o MarketoSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o MarketoSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o MarketoSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'MarketoSource'.
func (o MarketoSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MarketoSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Marketo server source.
type MarketoSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MarketoSource'.
	Type string `pulumi:"type"`
}

// A copy activity Marketo server source.
type MarketoSourceResponseOutput struct{ *pulumi.OutputState }

func (MarketoSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MarketoSourceResponse)(nil)).Elem()
}

func (o MarketoSourceResponseOutput) ToMarketoSourceResponseOutput() MarketoSourceResponseOutput {
	return o
}

func (o MarketoSourceResponseOutput) ToMarketoSourceResponseOutputWithContext(ctx context.Context) MarketoSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o MarketoSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o MarketoSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o MarketoSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o MarketoSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o MarketoSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o MarketoSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o MarketoSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v MarketoSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'MarketoSource'.
func (o MarketoSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MarketoSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specify the name and value of custom metadata item.
type MetadataItem struct {
	// Metadata item key name. Type: string (or Expression with resultType string).
	Name interface{} `pulumi:"name"`
	// Metadata item value. Type: string (or Expression with resultType string).
	Value interface{} `pulumi:"value"`
}

// MetadataItemInput is an input type that accepts MetadataItemArgs and MetadataItemOutput values.
// You can construct a concrete instance of `MetadataItemInput` via:
//
//	MetadataItemArgs{...}
type MetadataItemInput interface {
	pulumi.Input

	ToMetadataItemOutput() MetadataItemOutput
	ToMetadataItemOutputWithContext(context.Context) MetadataItemOutput
}

// Specify the name and value of custom metadata item.
type MetadataItemArgs struct {
	// Metadata item key name. Type: string (or Expression with resultType string).
	Name pulumi.Input `pulumi:"name"`
	// Metadata item value. Type: string (or Expression with resultType string).
	Value pulumi.Input `pulumi:"value"`
}

func (MetadataItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataItem)(nil)).Elem()
}

func (i MetadataItemArgs) ToMetadataItemOutput() MetadataItemOutput {
	return i.ToMetadataItemOutputWithContext(context.Background())
}

func (i MetadataItemArgs) ToMetadataItemOutputWithContext(ctx context.Context) MetadataItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataItemOutput)
}

// MetadataItemArrayInput is an input type that accepts MetadataItemArray and MetadataItemArrayOutput values.
// You can construct a concrete instance of `MetadataItemArrayInput` via:
//
//	MetadataItemArray{ MetadataItemArgs{...} }
type MetadataItemArrayInput interface {
	pulumi.Input

	ToMetadataItemArrayOutput() MetadataItemArrayOutput
	ToMetadataItemArrayOutputWithContext(context.Context) MetadataItemArrayOutput
}

type MetadataItemArray []MetadataItemInput

func (MetadataItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetadataItem)(nil)).Elem()
}

func (i MetadataItemArray) ToMetadataItemArrayOutput() MetadataItemArrayOutput {
	return i.ToMetadataItemArrayOutputWithContext(context.Background())
}

func (i MetadataItemArray) ToMetadataItemArrayOutputWithContext(ctx context.Context) MetadataItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataItemArrayOutput)
}

// Specify the name and value of custom metadata item.
type MetadataItemOutput struct{ *pulumi.OutputState }

func (MetadataItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataItem)(nil)).Elem()
}

func (o MetadataItemOutput) ToMetadataItemOutput() MetadataItemOutput {
	return o
}

func (o MetadataItemOutput) ToMetadataItemOutputWithContext(ctx context.Context) MetadataItemOutput {
	return o
}

// Metadata item key name. Type: string (or Expression with resultType string).
func (o MetadataItemOutput) Name() pulumi.AnyOutput {
	return o.ApplyT(func(v MetadataItem) interface{} { return v.Name }).(pulumi.AnyOutput)
}

// Metadata item value. Type: string (or Expression with resultType string).
func (o MetadataItemOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v MetadataItem) interface{} { return v.Value }).(pulumi.AnyOutput)
}

type MetadataItemArrayOutput struct{ *pulumi.OutputState }

func (MetadataItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetadataItem)(nil)).Elem()
}

func (o MetadataItemArrayOutput) ToMetadataItemArrayOutput() MetadataItemArrayOutput {
	return o
}

func (o MetadataItemArrayOutput) ToMetadataItemArrayOutputWithContext(ctx context.Context) MetadataItemArrayOutput {
	return o
}

func (o MetadataItemArrayOutput) Index(i pulumi.IntInput) MetadataItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetadataItem {
		return vs[0].([]MetadataItem)[vs[1].(int)]
	}).(MetadataItemOutput)
}

// Specify the name and value of custom metadata item.
type MetadataItemResponse struct {
	// Metadata item key name. Type: string (or Expression with resultType string).
	Name interface{} `pulumi:"name"`
	// Metadata item value. Type: string (or Expression with resultType string).
	Value interface{} `pulumi:"value"`
}

// Specify the name and value of custom metadata item.
type MetadataItemResponseOutput struct{ *pulumi.OutputState }

func (MetadataItemResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataItemResponse)(nil)).Elem()
}

func (o MetadataItemResponseOutput) ToMetadataItemResponseOutput() MetadataItemResponseOutput {
	return o
}

func (o MetadataItemResponseOutput) ToMetadataItemResponseOutputWithContext(ctx context.Context) MetadataItemResponseOutput {
	return o
}

// Metadata item key name. Type: string (or Expression with resultType string).
func (o MetadataItemResponseOutput) Name() pulumi.AnyOutput {
	return o.ApplyT(func(v MetadataItemResponse) interface{} { return v.Name }).(pulumi.AnyOutput)
}

// Metadata item value. Type: string (or Expression with resultType string).
func (o MetadataItemResponseOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v MetadataItemResponse) interface{} { return v.Value }).(pulumi.AnyOutput)
}

type MetadataItemResponseArrayOutput struct{ *pulumi.OutputState }

func (MetadataItemResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetadataItemResponse)(nil)).Elem()
}

func (o MetadataItemResponseArrayOutput) ToMetadataItemResponseArrayOutput() MetadataItemResponseArrayOutput {
	return o
}

func (o MetadataItemResponseArrayOutput) ToMetadataItemResponseArrayOutputWithContext(ctx context.Context) MetadataItemResponseArrayOutput {
	return o
}

func (o MetadataItemResponseArrayOutput) Index(i pulumi.IntInput) MetadataItemResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetadataItemResponse {
		return vs[0].([]MetadataItemResponse)[vs[1].(int)]
	}).(MetadataItemResponseOutput)
}

// Microsoft Access linked service.
type MicrosoftAccessLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication used to connect to the Microsoft Access as ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, or SecureString, or AzureKeyVaultSecretReference, or Expression with resultType string.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The access credential portion of the connection string specified in driver-specific property-value format.
	Credential interface{} `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'MicrosoftAccess'.
	Type string `pulumi:"type"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// MicrosoftAccessLinkedServiceInput is an input type that accepts MicrosoftAccessLinkedServiceArgs and MicrosoftAccessLinkedServiceOutput values.
// You can construct a concrete instance of `MicrosoftAccessLinkedServiceInput` via:
//
//	MicrosoftAccessLinkedServiceArgs{...}
type MicrosoftAccessLinkedServiceInput interface {
	pulumi.Input

	ToMicrosoftAccessLinkedServiceOutput() MicrosoftAccessLinkedServiceOutput
	ToMicrosoftAccessLinkedServiceOutputWithContext(context.Context) MicrosoftAccessLinkedServiceOutput
}

// Microsoft Access linked service.
type MicrosoftAccessLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Type of authentication used to connect to the Microsoft Access as ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
	AuthenticationType pulumi.Input `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, or SecureString, or AzureKeyVaultSecretReference, or Expression with resultType string.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// The access credential portion of the connection string specified in driver-specific property-value format.
	Credential pulumi.Input `pulumi:"credential"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password for Basic authentication.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'MicrosoftAccess'.
	Type pulumi.StringInput `pulumi:"type"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (MicrosoftAccessLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MicrosoftAccessLinkedService)(nil)).Elem()
}

func (i MicrosoftAccessLinkedServiceArgs) ToMicrosoftAccessLinkedServiceOutput() MicrosoftAccessLinkedServiceOutput {
	return i.ToMicrosoftAccessLinkedServiceOutputWithContext(context.Background())
}

func (i MicrosoftAccessLinkedServiceArgs) ToMicrosoftAccessLinkedServiceOutputWithContext(ctx context.Context) MicrosoftAccessLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MicrosoftAccessLinkedServiceOutput)
}

// Microsoft Access linked service.
type MicrosoftAccessLinkedServiceOutput struct{ *pulumi.OutputState }

func (MicrosoftAccessLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MicrosoftAccessLinkedService)(nil)).Elem()
}

func (o MicrosoftAccessLinkedServiceOutput) ToMicrosoftAccessLinkedServiceOutput() MicrosoftAccessLinkedServiceOutput {
	return o
}

func (o MicrosoftAccessLinkedServiceOutput) ToMicrosoftAccessLinkedServiceOutputWithContext(ctx context.Context) MicrosoftAccessLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o MicrosoftAccessLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MicrosoftAccessLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Type of authentication used to connect to the Microsoft Access as ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
func (o MicrosoftAccessLinkedServiceOutput) AuthenticationType() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessLinkedService) interface{} { return v.AuthenticationType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o MicrosoftAccessLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v MicrosoftAccessLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, or SecureString, or AzureKeyVaultSecretReference, or Expression with resultType string.
func (o MicrosoftAccessLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// The access credential portion of the connection string specified in driver-specific property-value format.
func (o MicrosoftAccessLinkedServiceOutput) Credential() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessLinkedService) interface{} { return v.Credential }).(pulumi.AnyOutput)
}

// Linked service description.
func (o MicrosoftAccessLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MicrosoftAccessLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o MicrosoftAccessLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MicrosoftAccessLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o MicrosoftAccessLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v MicrosoftAccessLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Password for Basic authentication.
func (o MicrosoftAccessLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'MicrosoftAccess'.
func (o MicrosoftAccessLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MicrosoftAccessLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// User name for Basic authentication. Type: string (or Expression with resultType string).
func (o MicrosoftAccessLinkedServiceOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessLinkedService) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// Microsoft Access linked service.
type MicrosoftAccessLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication used to connect to the Microsoft Access as ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, or SecureString, or AzureKeyVaultSecretReference, or Expression with resultType string.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The access credential portion of the connection string specified in driver-specific property-value format.
	Credential interface{} `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'MicrosoftAccess'.
	Type string `pulumi:"type"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// Microsoft Access linked service.
type MicrosoftAccessLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (MicrosoftAccessLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MicrosoftAccessLinkedServiceResponse)(nil)).Elem()
}

func (o MicrosoftAccessLinkedServiceResponseOutput) ToMicrosoftAccessLinkedServiceResponseOutput() MicrosoftAccessLinkedServiceResponseOutput {
	return o
}

func (o MicrosoftAccessLinkedServiceResponseOutput) ToMicrosoftAccessLinkedServiceResponseOutputWithContext(ctx context.Context) MicrosoftAccessLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o MicrosoftAccessLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MicrosoftAccessLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Type of authentication used to connect to the Microsoft Access as ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
func (o MicrosoftAccessLinkedServiceResponseOutput) AuthenticationType() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessLinkedServiceResponse) interface{} { return v.AuthenticationType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o MicrosoftAccessLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v MicrosoftAccessLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, or SecureString, or AzureKeyVaultSecretReference, or Expression with resultType string.
func (o MicrosoftAccessLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// The access credential portion of the connection string specified in driver-specific property-value format.
func (o MicrosoftAccessLinkedServiceResponseOutput) Credential() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessLinkedServiceResponse) interface{} { return v.Credential }).(pulumi.AnyOutput)
}

// Linked service description.
func (o MicrosoftAccessLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MicrosoftAccessLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o MicrosoftAccessLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MicrosoftAccessLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o MicrosoftAccessLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v MicrosoftAccessLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Password for Basic authentication.
func (o MicrosoftAccessLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'MicrosoftAccess'.
func (o MicrosoftAccessLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MicrosoftAccessLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User name for Basic authentication. Type: string (or Expression with resultType string).
func (o MicrosoftAccessLinkedServiceResponseOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessLinkedServiceResponse) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// A copy activity Microsoft Access sink.
type MicrosoftAccessSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to execute before starting the copy. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'MicrosoftAccessSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// MicrosoftAccessSinkInput is an input type that accepts MicrosoftAccessSinkArgs and MicrosoftAccessSinkOutput values.
// You can construct a concrete instance of `MicrosoftAccessSinkInput` via:
//
//	MicrosoftAccessSinkArgs{...}
type MicrosoftAccessSinkInput interface {
	pulumi.Input

	ToMicrosoftAccessSinkOutput() MicrosoftAccessSinkOutput
	ToMicrosoftAccessSinkOutputWithContext(context.Context) MicrosoftAccessSinkOutput
}

// A copy activity Microsoft Access sink.
type MicrosoftAccessSinkArgs struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// A query to execute before starting the copy. Type: string (or Expression with resultType string).
	PreCopyScript pulumi.Input `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount pulumi.Input `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait pulumi.Input `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'MicrosoftAccessSink'.
	Type pulumi.StringInput `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize pulumi.Input `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout pulumi.Input `pulumi:"writeBatchTimeout"`
}

func (MicrosoftAccessSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MicrosoftAccessSink)(nil)).Elem()
}

func (i MicrosoftAccessSinkArgs) ToMicrosoftAccessSinkOutput() MicrosoftAccessSinkOutput {
	return i.ToMicrosoftAccessSinkOutputWithContext(context.Background())
}

func (i MicrosoftAccessSinkArgs) ToMicrosoftAccessSinkOutputWithContext(ctx context.Context) MicrosoftAccessSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MicrosoftAccessSinkOutput)
}

// A copy activity Microsoft Access sink.
type MicrosoftAccessSinkOutput struct{ *pulumi.OutputState }

func (MicrosoftAccessSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MicrosoftAccessSink)(nil)).Elem()
}

func (o MicrosoftAccessSinkOutput) ToMicrosoftAccessSinkOutput() MicrosoftAccessSinkOutput {
	return o
}

func (o MicrosoftAccessSinkOutput) ToMicrosoftAccessSinkOutputWithContext(ctx context.Context) MicrosoftAccessSinkOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o MicrosoftAccessSinkOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessSink) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o MicrosoftAccessSinkOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessSink) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to execute before starting the copy. Type: string (or Expression with resultType string).
func (o MicrosoftAccessSinkOutput) PreCopyScript() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessSink) interface{} { return v.PreCopyScript }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o MicrosoftAccessSinkOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessSink) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o MicrosoftAccessSinkOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessSink) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'MicrosoftAccessSink'.
func (o MicrosoftAccessSinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MicrosoftAccessSink) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o MicrosoftAccessSinkOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessSink) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o MicrosoftAccessSinkOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessSink) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity Microsoft Access sink.
type MicrosoftAccessSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to execute before starting the copy. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'MicrosoftAccessSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Microsoft Access sink.
type MicrosoftAccessSinkResponseOutput struct{ *pulumi.OutputState }

func (MicrosoftAccessSinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MicrosoftAccessSinkResponse)(nil)).Elem()
}

func (o MicrosoftAccessSinkResponseOutput) ToMicrosoftAccessSinkResponseOutput() MicrosoftAccessSinkResponseOutput {
	return o
}

func (o MicrosoftAccessSinkResponseOutput) ToMicrosoftAccessSinkResponseOutputWithContext(ctx context.Context) MicrosoftAccessSinkResponseOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o MicrosoftAccessSinkResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessSinkResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o MicrosoftAccessSinkResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessSinkResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to execute before starting the copy. Type: string (or Expression with resultType string).
func (o MicrosoftAccessSinkResponseOutput) PreCopyScript() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessSinkResponse) interface{} { return v.PreCopyScript }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o MicrosoftAccessSinkResponseOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessSinkResponse) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o MicrosoftAccessSinkResponseOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessSinkResponse) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'MicrosoftAccessSink'.
func (o MicrosoftAccessSinkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MicrosoftAccessSinkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o MicrosoftAccessSinkResponseOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessSinkResponse) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o MicrosoftAccessSinkResponseOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessSinkResponse) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity source for Microsoft Access.
type MicrosoftAccessSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MicrosoftAccessSource'.
	Type string `pulumi:"type"`
}

// MicrosoftAccessSourceInput is an input type that accepts MicrosoftAccessSourceArgs and MicrosoftAccessSourceOutput values.
// You can construct a concrete instance of `MicrosoftAccessSourceInput` via:
//
//	MicrosoftAccessSourceArgs{...}
type MicrosoftAccessSourceInput interface {
	pulumi.Input

	ToMicrosoftAccessSourceOutput() MicrosoftAccessSourceOutput
	ToMicrosoftAccessSourceOutputWithContext(context.Context) MicrosoftAccessSourceOutput
}

// A copy activity source for Microsoft Access.
type MicrosoftAccessSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MicrosoftAccessSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MicrosoftAccessSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MicrosoftAccessSource)(nil)).Elem()
}

func (i MicrosoftAccessSourceArgs) ToMicrosoftAccessSourceOutput() MicrosoftAccessSourceOutput {
	return i.ToMicrosoftAccessSourceOutputWithContext(context.Background())
}

func (i MicrosoftAccessSourceArgs) ToMicrosoftAccessSourceOutputWithContext(ctx context.Context) MicrosoftAccessSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MicrosoftAccessSourceOutput)
}

// A copy activity source for Microsoft Access.
type MicrosoftAccessSourceOutput struct{ *pulumi.OutputState }

func (MicrosoftAccessSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MicrosoftAccessSource)(nil)).Elem()
}

func (o MicrosoftAccessSourceOutput) ToMicrosoftAccessSourceOutput() MicrosoftAccessSourceOutput {
	return o
}

func (o MicrosoftAccessSourceOutput) ToMicrosoftAccessSourceOutputWithContext(ctx context.Context) MicrosoftAccessSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o MicrosoftAccessSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o MicrosoftAccessSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o MicrosoftAccessSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Database query. Type: string (or Expression with resultType string).
func (o MicrosoftAccessSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o MicrosoftAccessSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o MicrosoftAccessSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'MicrosoftAccessSource'.
func (o MicrosoftAccessSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MicrosoftAccessSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity source for Microsoft Access.
type MicrosoftAccessSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MicrosoftAccessSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for Microsoft Access.
type MicrosoftAccessSourceResponseOutput struct{ *pulumi.OutputState }

func (MicrosoftAccessSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MicrosoftAccessSourceResponse)(nil)).Elem()
}

func (o MicrosoftAccessSourceResponseOutput) ToMicrosoftAccessSourceResponseOutput() MicrosoftAccessSourceResponseOutput {
	return o
}

func (o MicrosoftAccessSourceResponseOutput) ToMicrosoftAccessSourceResponseOutputWithContext(ctx context.Context) MicrosoftAccessSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o MicrosoftAccessSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o MicrosoftAccessSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o MicrosoftAccessSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Database query. Type: string (or Expression with resultType string).
func (o MicrosoftAccessSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o MicrosoftAccessSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o MicrosoftAccessSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'MicrosoftAccessSource'.
func (o MicrosoftAccessSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MicrosoftAccessSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Microsoft Access table dataset.
type MicrosoftAccessTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The Microsoft Access table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'MicrosoftAccessTable'.
	Type string `pulumi:"type"`
}

// MicrosoftAccessTableDatasetInput is an input type that accepts MicrosoftAccessTableDatasetArgs and MicrosoftAccessTableDatasetOutput values.
// You can construct a concrete instance of `MicrosoftAccessTableDatasetInput` via:
//
//	MicrosoftAccessTableDatasetArgs{...}
type MicrosoftAccessTableDatasetInput interface {
	pulumi.Input

	ToMicrosoftAccessTableDatasetOutput() MicrosoftAccessTableDatasetOutput
	ToMicrosoftAccessTableDatasetOutputWithContext(context.Context) MicrosoftAccessTableDatasetOutput
}

// The Microsoft Access table dataset.
type MicrosoftAccessTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The Microsoft Access table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'MicrosoftAccessTable'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MicrosoftAccessTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MicrosoftAccessTableDataset)(nil)).Elem()
}

func (i MicrosoftAccessTableDatasetArgs) ToMicrosoftAccessTableDatasetOutput() MicrosoftAccessTableDatasetOutput {
	return i.ToMicrosoftAccessTableDatasetOutputWithContext(context.Background())
}

func (i MicrosoftAccessTableDatasetArgs) ToMicrosoftAccessTableDatasetOutputWithContext(ctx context.Context) MicrosoftAccessTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MicrosoftAccessTableDatasetOutput)
}

// The Microsoft Access table dataset.
type MicrosoftAccessTableDatasetOutput struct{ *pulumi.OutputState }

func (MicrosoftAccessTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MicrosoftAccessTableDataset)(nil)).Elem()
}

func (o MicrosoftAccessTableDatasetOutput) ToMicrosoftAccessTableDatasetOutput() MicrosoftAccessTableDatasetOutput {
	return o
}

func (o MicrosoftAccessTableDatasetOutput) ToMicrosoftAccessTableDatasetOutputWithContext(ctx context.Context) MicrosoftAccessTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o MicrosoftAccessTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MicrosoftAccessTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o MicrosoftAccessTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MicrosoftAccessTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o MicrosoftAccessTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v MicrosoftAccessTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o MicrosoftAccessTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v MicrosoftAccessTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o MicrosoftAccessTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v MicrosoftAccessTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o MicrosoftAccessTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o MicrosoftAccessTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The Microsoft Access table name. Type: string (or Expression with resultType string).
func (o MicrosoftAccessTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'MicrosoftAccessTable'.
func (o MicrosoftAccessTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MicrosoftAccessTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Microsoft Access table dataset.
type MicrosoftAccessTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The Microsoft Access table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'MicrosoftAccessTable'.
	Type string `pulumi:"type"`
}

// The Microsoft Access table dataset.
type MicrosoftAccessTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (MicrosoftAccessTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MicrosoftAccessTableDatasetResponse)(nil)).Elem()
}

func (o MicrosoftAccessTableDatasetResponseOutput) ToMicrosoftAccessTableDatasetResponseOutput() MicrosoftAccessTableDatasetResponseOutput {
	return o
}

func (o MicrosoftAccessTableDatasetResponseOutput) ToMicrosoftAccessTableDatasetResponseOutputWithContext(ctx context.Context) MicrosoftAccessTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o MicrosoftAccessTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MicrosoftAccessTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o MicrosoftAccessTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MicrosoftAccessTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o MicrosoftAccessTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v MicrosoftAccessTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o MicrosoftAccessTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v MicrosoftAccessTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o MicrosoftAccessTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v MicrosoftAccessTableDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o MicrosoftAccessTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o MicrosoftAccessTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The Microsoft Access table name. Type: string (or Expression with resultType string).
func (o MicrosoftAccessTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v MicrosoftAccessTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'MicrosoftAccessTable'.
func (o MicrosoftAccessTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MicrosoftAccessTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The MongoDB Atlas database dataset.
type MongoDbAtlasCollectionDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The collection name of the MongoDB Atlas database. Type: string (or Expression with resultType string).
	Collection interface{} `pulumi:"collection"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'MongoDbAtlasCollection'.
	Type string `pulumi:"type"`
}

// MongoDbAtlasCollectionDatasetInput is an input type that accepts MongoDbAtlasCollectionDatasetArgs and MongoDbAtlasCollectionDatasetOutput values.
// You can construct a concrete instance of `MongoDbAtlasCollectionDatasetInput` via:
//
//	MongoDbAtlasCollectionDatasetArgs{...}
type MongoDbAtlasCollectionDatasetInput interface {
	pulumi.Input

	ToMongoDbAtlasCollectionDatasetOutput() MongoDbAtlasCollectionDatasetOutput
	ToMongoDbAtlasCollectionDatasetOutputWithContext(context.Context) MongoDbAtlasCollectionDatasetOutput
}

// The MongoDB Atlas database dataset.
type MongoDbAtlasCollectionDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The collection name of the MongoDB Atlas database. Type: string (or Expression with resultType string).
	Collection pulumi.Input `pulumi:"collection"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'MongoDbAtlasCollection'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MongoDbAtlasCollectionDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbAtlasCollectionDataset)(nil)).Elem()
}

func (i MongoDbAtlasCollectionDatasetArgs) ToMongoDbAtlasCollectionDatasetOutput() MongoDbAtlasCollectionDatasetOutput {
	return i.ToMongoDbAtlasCollectionDatasetOutputWithContext(context.Background())
}

func (i MongoDbAtlasCollectionDatasetArgs) ToMongoDbAtlasCollectionDatasetOutputWithContext(ctx context.Context) MongoDbAtlasCollectionDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbAtlasCollectionDatasetOutput)
}

// The MongoDB Atlas database dataset.
type MongoDbAtlasCollectionDatasetOutput struct{ *pulumi.OutputState }

func (MongoDbAtlasCollectionDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbAtlasCollectionDataset)(nil)).Elem()
}

func (o MongoDbAtlasCollectionDatasetOutput) ToMongoDbAtlasCollectionDatasetOutput() MongoDbAtlasCollectionDatasetOutput {
	return o
}

func (o MongoDbAtlasCollectionDatasetOutput) ToMongoDbAtlasCollectionDatasetOutputWithContext(ctx context.Context) MongoDbAtlasCollectionDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o MongoDbAtlasCollectionDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MongoDbAtlasCollectionDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The collection name of the MongoDB Atlas database. Type: string (or Expression with resultType string).
func (o MongoDbAtlasCollectionDatasetOutput) Collection() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasCollectionDataset) interface{} { return v.Collection }).(pulumi.AnyOutput)
}

// Dataset description.
func (o MongoDbAtlasCollectionDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbAtlasCollectionDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o MongoDbAtlasCollectionDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v MongoDbAtlasCollectionDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o MongoDbAtlasCollectionDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v MongoDbAtlasCollectionDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o MongoDbAtlasCollectionDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v MongoDbAtlasCollectionDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o MongoDbAtlasCollectionDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasCollectionDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o MongoDbAtlasCollectionDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasCollectionDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'MongoDbAtlasCollection'.
func (o MongoDbAtlasCollectionDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbAtlasCollectionDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The MongoDB Atlas database dataset.
type MongoDbAtlasCollectionDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The collection name of the MongoDB Atlas database. Type: string (or Expression with resultType string).
	Collection interface{} `pulumi:"collection"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'MongoDbAtlasCollection'.
	Type string `pulumi:"type"`
}

// The MongoDB Atlas database dataset.
type MongoDbAtlasCollectionDatasetResponseOutput struct{ *pulumi.OutputState }

func (MongoDbAtlasCollectionDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbAtlasCollectionDatasetResponse)(nil)).Elem()
}

func (o MongoDbAtlasCollectionDatasetResponseOutput) ToMongoDbAtlasCollectionDatasetResponseOutput() MongoDbAtlasCollectionDatasetResponseOutput {
	return o
}

func (o MongoDbAtlasCollectionDatasetResponseOutput) ToMongoDbAtlasCollectionDatasetResponseOutputWithContext(ctx context.Context) MongoDbAtlasCollectionDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o MongoDbAtlasCollectionDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MongoDbAtlasCollectionDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The collection name of the MongoDB Atlas database. Type: string (or Expression with resultType string).
func (o MongoDbAtlasCollectionDatasetResponseOutput) Collection() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasCollectionDatasetResponse) interface{} { return v.Collection }).(pulumi.AnyOutput)
}

// Dataset description.
func (o MongoDbAtlasCollectionDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbAtlasCollectionDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o MongoDbAtlasCollectionDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v MongoDbAtlasCollectionDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o MongoDbAtlasCollectionDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v MongoDbAtlasCollectionDatasetResponse) LinkedServiceReferenceResponse {
		return v.LinkedServiceName
	}).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o MongoDbAtlasCollectionDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v MongoDbAtlasCollectionDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o MongoDbAtlasCollectionDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasCollectionDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o MongoDbAtlasCollectionDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasCollectionDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'MongoDbAtlasCollection'.
func (o MongoDbAtlasCollectionDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbAtlasCollectionDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for MongoDB Atlas data source.
type MongoDbAtlasLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The MongoDB Atlas connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The name of the MongoDB Atlas database that you want to access. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The driver version that you want to choose. Allowed value are v1 and v2. Type: string (or Expression with resultType string).
	DriverVersion interface{} `pulumi:"driverVersion"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'MongoDbAtlas'.
	Type string `pulumi:"type"`
}

// MongoDbAtlasLinkedServiceInput is an input type that accepts MongoDbAtlasLinkedServiceArgs and MongoDbAtlasLinkedServiceOutput values.
// You can construct a concrete instance of `MongoDbAtlasLinkedServiceInput` via:
//
//	MongoDbAtlasLinkedServiceArgs{...}
type MongoDbAtlasLinkedServiceInput interface {
	pulumi.Input

	ToMongoDbAtlasLinkedServiceOutput() MongoDbAtlasLinkedServiceOutput
	ToMongoDbAtlasLinkedServiceOutputWithContext(context.Context) MongoDbAtlasLinkedServiceOutput
}

// Linked service for MongoDB Atlas data source.
type MongoDbAtlasLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The MongoDB Atlas connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// The name of the MongoDB Atlas database that you want to access. Type: string (or Expression with resultType string).
	Database pulumi.Input `pulumi:"database"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The driver version that you want to choose. Allowed value are v1 and v2. Type: string (or Expression with resultType string).
	DriverVersion pulumi.Input `pulumi:"driverVersion"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'MongoDbAtlas'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MongoDbAtlasLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbAtlasLinkedService)(nil)).Elem()
}

func (i MongoDbAtlasLinkedServiceArgs) ToMongoDbAtlasLinkedServiceOutput() MongoDbAtlasLinkedServiceOutput {
	return i.ToMongoDbAtlasLinkedServiceOutputWithContext(context.Background())
}

func (i MongoDbAtlasLinkedServiceArgs) ToMongoDbAtlasLinkedServiceOutputWithContext(ctx context.Context) MongoDbAtlasLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbAtlasLinkedServiceOutput)
}

// Linked service for MongoDB Atlas data source.
type MongoDbAtlasLinkedServiceOutput struct{ *pulumi.OutputState }

func (MongoDbAtlasLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbAtlasLinkedService)(nil)).Elem()
}

func (o MongoDbAtlasLinkedServiceOutput) ToMongoDbAtlasLinkedServiceOutput() MongoDbAtlasLinkedServiceOutput {
	return o
}

func (o MongoDbAtlasLinkedServiceOutput) ToMongoDbAtlasLinkedServiceOutputWithContext(ctx context.Context) MongoDbAtlasLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o MongoDbAtlasLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MongoDbAtlasLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o MongoDbAtlasLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v MongoDbAtlasLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The MongoDB Atlas connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o MongoDbAtlasLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// The name of the MongoDB Atlas database that you want to access. Type: string (or Expression with resultType string).
func (o MongoDbAtlasLinkedServiceOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasLinkedService) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Linked service description.
func (o MongoDbAtlasLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbAtlasLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The driver version that you want to choose. Allowed value are v1 and v2. Type: string (or Expression with resultType string).
func (o MongoDbAtlasLinkedServiceOutput) DriverVersion() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasLinkedService) interface{} { return v.DriverVersion }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o MongoDbAtlasLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v MongoDbAtlasLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
// Expected value is 'MongoDbAtlas'.
func (o MongoDbAtlasLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbAtlasLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for MongoDB Atlas data source.
type MongoDbAtlasLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The MongoDB Atlas connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The name of the MongoDB Atlas database that you want to access. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The driver version that you want to choose. Allowed value are v1 and v2. Type: string (or Expression with resultType string).
	DriverVersion interface{} `pulumi:"driverVersion"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'MongoDbAtlas'.
	Type string `pulumi:"type"`
}

// Linked service for MongoDB Atlas data source.
type MongoDbAtlasLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (MongoDbAtlasLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbAtlasLinkedServiceResponse)(nil)).Elem()
}

func (o MongoDbAtlasLinkedServiceResponseOutput) ToMongoDbAtlasLinkedServiceResponseOutput() MongoDbAtlasLinkedServiceResponseOutput {
	return o
}

func (o MongoDbAtlasLinkedServiceResponseOutput) ToMongoDbAtlasLinkedServiceResponseOutputWithContext(ctx context.Context) MongoDbAtlasLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o MongoDbAtlasLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MongoDbAtlasLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o MongoDbAtlasLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v MongoDbAtlasLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The MongoDB Atlas connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o MongoDbAtlasLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// The name of the MongoDB Atlas database that you want to access. Type: string (or Expression with resultType string).
func (o MongoDbAtlasLinkedServiceResponseOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasLinkedServiceResponse) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Linked service description.
func (o MongoDbAtlasLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbAtlasLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The driver version that you want to choose. Allowed value are v1 and v2. Type: string (or Expression with resultType string).
func (o MongoDbAtlasLinkedServiceResponseOutput) DriverVersion() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasLinkedServiceResponse) interface{} { return v.DriverVersion }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o MongoDbAtlasLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v MongoDbAtlasLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
// Expected value is 'MongoDbAtlas'.
func (o MongoDbAtlasLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbAtlasLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity MongoDB Atlas sink.
type MongoDbAtlasSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'MongoDbAtlasSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Specifies whether the document with same key to be overwritten (upsert) rather than throw exception (insert). The default value is "insert". Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// MongoDbAtlasSinkInput is an input type that accepts MongoDbAtlasSinkArgs and MongoDbAtlasSinkOutput values.
// You can construct a concrete instance of `MongoDbAtlasSinkInput` via:
//
//	MongoDbAtlasSinkArgs{...}
type MongoDbAtlasSinkInput interface {
	pulumi.Input

	ToMongoDbAtlasSinkOutput() MongoDbAtlasSinkOutput
	ToMongoDbAtlasSinkOutputWithContext(context.Context) MongoDbAtlasSinkOutput
}

// A copy activity MongoDB Atlas sink.
type MongoDbAtlasSinkArgs struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount pulumi.Input `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait pulumi.Input `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'MongoDbAtlasSink'.
	Type pulumi.StringInput `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize pulumi.Input `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout pulumi.Input `pulumi:"writeBatchTimeout"`
	// Specifies whether the document with same key to be overwritten (upsert) rather than throw exception (insert). The default value is "insert". Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
	WriteBehavior pulumi.Input `pulumi:"writeBehavior"`
}

func (MongoDbAtlasSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbAtlasSink)(nil)).Elem()
}

func (i MongoDbAtlasSinkArgs) ToMongoDbAtlasSinkOutput() MongoDbAtlasSinkOutput {
	return i.ToMongoDbAtlasSinkOutputWithContext(context.Background())
}

func (i MongoDbAtlasSinkArgs) ToMongoDbAtlasSinkOutputWithContext(ctx context.Context) MongoDbAtlasSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbAtlasSinkOutput)
}

// A copy activity MongoDB Atlas sink.
type MongoDbAtlasSinkOutput struct{ *pulumi.OutputState }

func (MongoDbAtlasSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbAtlasSink)(nil)).Elem()
}

func (o MongoDbAtlasSinkOutput) ToMongoDbAtlasSinkOutput() MongoDbAtlasSinkOutput {
	return o
}

func (o MongoDbAtlasSinkOutput) ToMongoDbAtlasSinkOutputWithContext(ctx context.Context) MongoDbAtlasSinkOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o MongoDbAtlasSinkOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasSink) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o MongoDbAtlasSinkOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasSink) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o MongoDbAtlasSinkOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasSink) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o MongoDbAtlasSinkOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasSink) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'MongoDbAtlasSink'.
func (o MongoDbAtlasSinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbAtlasSink) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o MongoDbAtlasSinkOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasSink) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o MongoDbAtlasSinkOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasSink) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// Specifies whether the document with same key to be overwritten (upsert) rather than throw exception (insert). The default value is "insert". Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
func (o MongoDbAtlasSinkOutput) WriteBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasSink) interface{} { return v.WriteBehavior }).(pulumi.AnyOutput)
}

// A copy activity MongoDB Atlas sink.
type MongoDbAtlasSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'MongoDbAtlasSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Specifies whether the document with same key to be overwritten (upsert) rather than throw exception (insert). The default value is "insert". Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// A copy activity MongoDB Atlas sink.
type MongoDbAtlasSinkResponseOutput struct{ *pulumi.OutputState }

func (MongoDbAtlasSinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbAtlasSinkResponse)(nil)).Elem()
}

func (o MongoDbAtlasSinkResponseOutput) ToMongoDbAtlasSinkResponseOutput() MongoDbAtlasSinkResponseOutput {
	return o
}

func (o MongoDbAtlasSinkResponseOutput) ToMongoDbAtlasSinkResponseOutputWithContext(ctx context.Context) MongoDbAtlasSinkResponseOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o MongoDbAtlasSinkResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasSinkResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o MongoDbAtlasSinkResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasSinkResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o MongoDbAtlasSinkResponseOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasSinkResponse) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o MongoDbAtlasSinkResponseOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasSinkResponse) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'MongoDbAtlasSink'.
func (o MongoDbAtlasSinkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbAtlasSinkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o MongoDbAtlasSinkResponseOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasSinkResponse) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o MongoDbAtlasSinkResponseOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasSinkResponse) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// Specifies whether the document with same key to be overwritten (upsert) rather than throw exception (insert). The default value is "insert". Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
func (o MongoDbAtlasSinkResponseOutput) WriteBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasSinkResponse) interface{} { return v.WriteBehavior }).(pulumi.AnyOutput)
}

// A copy activity source for a MongoDB Atlas database.
type MongoDbAtlasSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// Specifies the number of documents to return in each batch of the response from MongoDB Atlas instance. In most cases, modifying the batch size will not affect the user or the application. This property's main purpose is to avoid hit the limitation of response size. Type: integer (or Expression with resultType integer).
	BatchSize interface{} `pulumi:"batchSize"`
	// Cursor methods for Mongodb query
	CursorMethods *MongoDbCursorMethodsProperties `pulumi:"cursorMethods"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies selection filter using query operators. To return all documents in a collection, omit this parameter or pass an empty document ({}). Type: string (or Expression with resultType string).
	Filter interface{} `pulumi:"filter"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MongoDbAtlasSource'.
	Type string `pulumi:"type"`
}

// MongoDbAtlasSourceInput is an input type that accepts MongoDbAtlasSourceArgs and MongoDbAtlasSourceOutput values.
// You can construct a concrete instance of `MongoDbAtlasSourceInput` via:
//
//	MongoDbAtlasSourceArgs{...}
type MongoDbAtlasSourceInput interface {
	pulumi.Input

	ToMongoDbAtlasSourceOutput() MongoDbAtlasSourceOutput
	ToMongoDbAtlasSourceOutputWithContext(context.Context) MongoDbAtlasSourceOutput
}

// A copy activity source for a MongoDB Atlas database.
type MongoDbAtlasSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// Specifies the number of documents to return in each batch of the response from MongoDB Atlas instance. In most cases, modifying the batch size will not affect the user or the application. This property's main purpose is to avoid hit the limitation of response size. Type: integer (or Expression with resultType integer).
	BatchSize pulumi.Input `pulumi:"batchSize"`
	// Cursor methods for Mongodb query
	CursorMethods MongoDbCursorMethodsPropertiesPtrInput `pulumi:"cursorMethods"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// Specifies selection filter using query operators. To return all documents in a collection, omit this parameter or pass an empty document ({}). Type: string (or Expression with resultType string).
	Filter pulumi.Input `pulumi:"filter"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MongoDbAtlasSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MongoDbAtlasSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbAtlasSource)(nil)).Elem()
}

func (i MongoDbAtlasSourceArgs) ToMongoDbAtlasSourceOutput() MongoDbAtlasSourceOutput {
	return i.ToMongoDbAtlasSourceOutputWithContext(context.Background())
}

func (i MongoDbAtlasSourceArgs) ToMongoDbAtlasSourceOutputWithContext(ctx context.Context) MongoDbAtlasSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbAtlasSourceOutput)
}

// A copy activity source for a MongoDB Atlas database.
type MongoDbAtlasSourceOutput struct{ *pulumi.OutputState }

func (MongoDbAtlasSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbAtlasSource)(nil)).Elem()
}

func (o MongoDbAtlasSourceOutput) ToMongoDbAtlasSourceOutput() MongoDbAtlasSourceOutput {
	return o
}

func (o MongoDbAtlasSourceOutput) ToMongoDbAtlasSourceOutputWithContext(ctx context.Context) MongoDbAtlasSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o MongoDbAtlasSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// Specifies the number of documents to return in each batch of the response from MongoDB Atlas instance. In most cases, modifying the batch size will not affect the user or the application. This property's main purpose is to avoid hit the limitation of response size. Type: integer (or Expression with resultType integer).
func (o MongoDbAtlasSourceOutput) BatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasSource) interface{} { return v.BatchSize }).(pulumi.AnyOutput)
}

// Cursor methods for Mongodb query
func (o MongoDbAtlasSourceOutput) CursorMethods() MongoDbCursorMethodsPropertiesPtrOutput {
	return o.ApplyT(func(v MongoDbAtlasSource) *MongoDbCursorMethodsProperties { return v.CursorMethods }).(MongoDbCursorMethodsPropertiesPtrOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o MongoDbAtlasSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Specifies selection filter using query operators. To return all documents in a collection, omit this parameter or pass an empty document ({}). Type: string (or Expression with resultType string).
func (o MongoDbAtlasSourceOutput) Filter() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasSource) interface{} { return v.Filter }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o MongoDbAtlasSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o MongoDbAtlasSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o MongoDbAtlasSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o MongoDbAtlasSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'MongoDbAtlasSource'.
func (o MongoDbAtlasSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbAtlasSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity source for a MongoDB Atlas database.
type MongoDbAtlasSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// Specifies the number of documents to return in each batch of the response from MongoDB Atlas instance. In most cases, modifying the batch size will not affect the user or the application. This property's main purpose is to avoid hit the limitation of response size. Type: integer (or Expression with resultType integer).
	BatchSize interface{} `pulumi:"batchSize"`
	// Cursor methods for Mongodb query
	CursorMethods *MongoDbCursorMethodsPropertiesResponse `pulumi:"cursorMethods"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies selection filter using query operators. To return all documents in a collection, omit this parameter or pass an empty document ({}). Type: string (or Expression with resultType string).
	Filter interface{} `pulumi:"filter"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MongoDbAtlasSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for a MongoDB Atlas database.
type MongoDbAtlasSourceResponseOutput struct{ *pulumi.OutputState }

func (MongoDbAtlasSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbAtlasSourceResponse)(nil)).Elem()
}

func (o MongoDbAtlasSourceResponseOutput) ToMongoDbAtlasSourceResponseOutput() MongoDbAtlasSourceResponseOutput {
	return o
}

func (o MongoDbAtlasSourceResponseOutput) ToMongoDbAtlasSourceResponseOutputWithContext(ctx context.Context) MongoDbAtlasSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o MongoDbAtlasSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// Specifies the number of documents to return in each batch of the response from MongoDB Atlas instance. In most cases, modifying the batch size will not affect the user or the application. This property's main purpose is to avoid hit the limitation of response size. Type: integer (or Expression with resultType integer).
func (o MongoDbAtlasSourceResponseOutput) BatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasSourceResponse) interface{} { return v.BatchSize }).(pulumi.AnyOutput)
}

// Cursor methods for Mongodb query
func (o MongoDbAtlasSourceResponseOutput) CursorMethods() MongoDbCursorMethodsPropertiesResponsePtrOutput {
	return o.ApplyT(func(v MongoDbAtlasSourceResponse) *MongoDbCursorMethodsPropertiesResponse { return v.CursorMethods }).(MongoDbCursorMethodsPropertiesResponsePtrOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o MongoDbAtlasSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Specifies selection filter using query operators. To return all documents in a collection, omit this parameter or pass an empty document ({}). Type: string (or Expression with resultType string).
func (o MongoDbAtlasSourceResponseOutput) Filter() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasSourceResponse) interface{} { return v.Filter }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o MongoDbAtlasSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o MongoDbAtlasSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o MongoDbAtlasSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o MongoDbAtlasSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbAtlasSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'MongoDbAtlasSource'.
func (o MongoDbAtlasSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbAtlasSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The MongoDB database dataset.
type MongoDbCollectionDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The table name of the MongoDB database. Type: string (or Expression with resultType string).
	CollectionName interface{} `pulumi:"collectionName"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'MongoDbCollection'.
	Type string `pulumi:"type"`
}

// MongoDbCollectionDatasetInput is an input type that accepts MongoDbCollectionDatasetArgs and MongoDbCollectionDatasetOutput values.
// You can construct a concrete instance of `MongoDbCollectionDatasetInput` via:
//
//	MongoDbCollectionDatasetArgs{...}
type MongoDbCollectionDatasetInput interface {
	pulumi.Input

	ToMongoDbCollectionDatasetOutput() MongoDbCollectionDatasetOutput
	ToMongoDbCollectionDatasetOutputWithContext(context.Context) MongoDbCollectionDatasetOutput
}

// The MongoDB database dataset.
type MongoDbCollectionDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The table name of the MongoDB database. Type: string (or Expression with resultType string).
	CollectionName pulumi.Input `pulumi:"collectionName"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'MongoDbCollection'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MongoDbCollectionDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbCollectionDataset)(nil)).Elem()
}

func (i MongoDbCollectionDatasetArgs) ToMongoDbCollectionDatasetOutput() MongoDbCollectionDatasetOutput {
	return i.ToMongoDbCollectionDatasetOutputWithContext(context.Background())
}

func (i MongoDbCollectionDatasetArgs) ToMongoDbCollectionDatasetOutputWithContext(ctx context.Context) MongoDbCollectionDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbCollectionDatasetOutput)
}

// The MongoDB database dataset.
type MongoDbCollectionDatasetOutput struct{ *pulumi.OutputState }

func (MongoDbCollectionDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbCollectionDataset)(nil)).Elem()
}

func (o MongoDbCollectionDatasetOutput) ToMongoDbCollectionDatasetOutput() MongoDbCollectionDatasetOutput {
	return o
}

func (o MongoDbCollectionDatasetOutput) ToMongoDbCollectionDatasetOutputWithContext(ctx context.Context) MongoDbCollectionDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o MongoDbCollectionDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MongoDbCollectionDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The table name of the MongoDB database. Type: string (or Expression with resultType string).
func (o MongoDbCollectionDatasetOutput) CollectionName() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbCollectionDataset) interface{} { return v.CollectionName }).(pulumi.AnyOutput)
}

// Dataset description.
func (o MongoDbCollectionDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbCollectionDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o MongoDbCollectionDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v MongoDbCollectionDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o MongoDbCollectionDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v MongoDbCollectionDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o MongoDbCollectionDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v MongoDbCollectionDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o MongoDbCollectionDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbCollectionDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o MongoDbCollectionDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbCollectionDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'MongoDbCollection'.
func (o MongoDbCollectionDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbCollectionDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The MongoDB database dataset.
type MongoDbCollectionDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The table name of the MongoDB database. Type: string (or Expression with resultType string).
	CollectionName interface{} `pulumi:"collectionName"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'MongoDbCollection'.
	Type string `pulumi:"type"`
}

// The MongoDB database dataset.
type MongoDbCollectionDatasetResponseOutput struct{ *pulumi.OutputState }

func (MongoDbCollectionDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbCollectionDatasetResponse)(nil)).Elem()
}

func (o MongoDbCollectionDatasetResponseOutput) ToMongoDbCollectionDatasetResponseOutput() MongoDbCollectionDatasetResponseOutput {
	return o
}

func (o MongoDbCollectionDatasetResponseOutput) ToMongoDbCollectionDatasetResponseOutputWithContext(ctx context.Context) MongoDbCollectionDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o MongoDbCollectionDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MongoDbCollectionDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The table name of the MongoDB database. Type: string (or Expression with resultType string).
func (o MongoDbCollectionDatasetResponseOutput) CollectionName() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbCollectionDatasetResponse) interface{} { return v.CollectionName }).(pulumi.AnyOutput)
}

// Dataset description.
func (o MongoDbCollectionDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbCollectionDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o MongoDbCollectionDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v MongoDbCollectionDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o MongoDbCollectionDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v MongoDbCollectionDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o MongoDbCollectionDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v MongoDbCollectionDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o MongoDbCollectionDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbCollectionDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o MongoDbCollectionDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbCollectionDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'MongoDbCollection'.
func (o MongoDbCollectionDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbCollectionDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Cursor methods for Mongodb query
type MongoDbCursorMethodsProperties struct {
	// Specifies the maximum number of documents the server returns. limit() is analogous to the LIMIT statement in a SQL database. Type: integer (or Expression with resultType integer).
	Limit interface{} `pulumi:"limit"`
	// Specifies the fields to return in the documents that match the query filter. To return all fields in the matching documents, omit this parameter. Type: string (or Expression with resultType string).
	Project interface{} `pulumi:"project"`
	// Specifies the how many documents skipped and where MongoDB begins returning results. This approach may be useful in implementing paginated results. Type: integer (or Expression with resultType integer).
	Skip interface{} `pulumi:"skip"`
	// Specifies the order in which the query returns matching documents. Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
	Sort interface{} `pulumi:"sort"`
}

// MongoDbCursorMethodsPropertiesInput is an input type that accepts MongoDbCursorMethodsPropertiesArgs and MongoDbCursorMethodsPropertiesOutput values.
// You can construct a concrete instance of `MongoDbCursorMethodsPropertiesInput` via:
//
//	MongoDbCursorMethodsPropertiesArgs{...}
type MongoDbCursorMethodsPropertiesInput interface {
	pulumi.Input

	ToMongoDbCursorMethodsPropertiesOutput() MongoDbCursorMethodsPropertiesOutput
	ToMongoDbCursorMethodsPropertiesOutputWithContext(context.Context) MongoDbCursorMethodsPropertiesOutput
}

// Cursor methods for Mongodb query
type MongoDbCursorMethodsPropertiesArgs struct {
	// Specifies the maximum number of documents the server returns. limit() is analogous to the LIMIT statement in a SQL database. Type: integer (or Expression with resultType integer).
	Limit pulumi.Input `pulumi:"limit"`
	// Specifies the fields to return in the documents that match the query filter. To return all fields in the matching documents, omit this parameter. Type: string (or Expression with resultType string).
	Project pulumi.Input `pulumi:"project"`
	// Specifies the how many documents skipped and where MongoDB begins returning results. This approach may be useful in implementing paginated results. Type: integer (or Expression with resultType integer).
	Skip pulumi.Input `pulumi:"skip"`
	// Specifies the order in which the query returns matching documents. Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
	Sort pulumi.Input `pulumi:"sort"`
}

func (MongoDbCursorMethodsPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbCursorMethodsProperties)(nil)).Elem()
}

func (i MongoDbCursorMethodsPropertiesArgs) ToMongoDbCursorMethodsPropertiesOutput() MongoDbCursorMethodsPropertiesOutput {
	return i.ToMongoDbCursorMethodsPropertiesOutputWithContext(context.Background())
}

func (i MongoDbCursorMethodsPropertiesArgs) ToMongoDbCursorMethodsPropertiesOutputWithContext(ctx context.Context) MongoDbCursorMethodsPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbCursorMethodsPropertiesOutput)
}

func (i MongoDbCursorMethodsPropertiesArgs) ToMongoDbCursorMethodsPropertiesPtrOutput() MongoDbCursorMethodsPropertiesPtrOutput {
	return i.ToMongoDbCursorMethodsPropertiesPtrOutputWithContext(context.Background())
}

func (i MongoDbCursorMethodsPropertiesArgs) ToMongoDbCursorMethodsPropertiesPtrOutputWithContext(ctx context.Context) MongoDbCursorMethodsPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbCursorMethodsPropertiesOutput).ToMongoDbCursorMethodsPropertiesPtrOutputWithContext(ctx)
}

// MongoDbCursorMethodsPropertiesPtrInput is an input type that accepts MongoDbCursorMethodsPropertiesArgs, MongoDbCursorMethodsPropertiesPtr and MongoDbCursorMethodsPropertiesPtrOutput values.
// You can construct a concrete instance of `MongoDbCursorMethodsPropertiesPtrInput` via:
//
//	        MongoDbCursorMethodsPropertiesArgs{...}
//
//	or:
//
//	        nil
type MongoDbCursorMethodsPropertiesPtrInput interface {
	pulumi.Input

	ToMongoDbCursorMethodsPropertiesPtrOutput() MongoDbCursorMethodsPropertiesPtrOutput
	ToMongoDbCursorMethodsPropertiesPtrOutputWithContext(context.Context) MongoDbCursorMethodsPropertiesPtrOutput
}

type mongoDbCursorMethodsPropertiesPtrType MongoDbCursorMethodsPropertiesArgs

func MongoDbCursorMethodsPropertiesPtr(v *MongoDbCursorMethodsPropertiesArgs) MongoDbCursorMethodsPropertiesPtrInput {
	return (*mongoDbCursorMethodsPropertiesPtrType)(v)
}

func (*mongoDbCursorMethodsPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbCursorMethodsProperties)(nil)).Elem()
}

func (i *mongoDbCursorMethodsPropertiesPtrType) ToMongoDbCursorMethodsPropertiesPtrOutput() MongoDbCursorMethodsPropertiesPtrOutput {
	return i.ToMongoDbCursorMethodsPropertiesPtrOutputWithContext(context.Background())
}

func (i *mongoDbCursorMethodsPropertiesPtrType) ToMongoDbCursorMethodsPropertiesPtrOutputWithContext(ctx context.Context) MongoDbCursorMethodsPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbCursorMethodsPropertiesPtrOutput)
}

// Cursor methods for Mongodb query
type MongoDbCursorMethodsPropertiesOutput struct{ *pulumi.OutputState }

func (MongoDbCursorMethodsPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbCursorMethodsProperties)(nil)).Elem()
}

func (o MongoDbCursorMethodsPropertiesOutput) ToMongoDbCursorMethodsPropertiesOutput() MongoDbCursorMethodsPropertiesOutput {
	return o
}

func (o MongoDbCursorMethodsPropertiesOutput) ToMongoDbCursorMethodsPropertiesOutputWithContext(ctx context.Context) MongoDbCursorMethodsPropertiesOutput {
	return o
}

func (o MongoDbCursorMethodsPropertiesOutput) ToMongoDbCursorMethodsPropertiesPtrOutput() MongoDbCursorMethodsPropertiesPtrOutput {
	return o.ToMongoDbCursorMethodsPropertiesPtrOutputWithContext(context.Background())
}

func (o MongoDbCursorMethodsPropertiesOutput) ToMongoDbCursorMethodsPropertiesPtrOutputWithContext(ctx context.Context) MongoDbCursorMethodsPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MongoDbCursorMethodsProperties) *MongoDbCursorMethodsProperties {
		return &v
	}).(MongoDbCursorMethodsPropertiesPtrOutput)
}

// Specifies the maximum number of documents the server returns. limit() is analogous to the LIMIT statement in a SQL database. Type: integer (or Expression with resultType integer).
func (o MongoDbCursorMethodsPropertiesOutput) Limit() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbCursorMethodsProperties) interface{} { return v.Limit }).(pulumi.AnyOutput)
}

// Specifies the fields to return in the documents that match the query filter. To return all fields in the matching documents, omit this parameter. Type: string (or Expression with resultType string).
func (o MongoDbCursorMethodsPropertiesOutput) Project() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbCursorMethodsProperties) interface{} { return v.Project }).(pulumi.AnyOutput)
}

// Specifies the how many documents skipped and where MongoDB begins returning results. This approach may be useful in implementing paginated results. Type: integer (or Expression with resultType integer).
func (o MongoDbCursorMethodsPropertiesOutput) Skip() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbCursorMethodsProperties) interface{} { return v.Skip }).(pulumi.AnyOutput)
}

// Specifies the order in which the query returns matching documents. Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
func (o MongoDbCursorMethodsPropertiesOutput) Sort() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbCursorMethodsProperties) interface{} { return v.Sort }).(pulumi.AnyOutput)
}

type MongoDbCursorMethodsPropertiesPtrOutput struct{ *pulumi.OutputState }

func (MongoDbCursorMethodsPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbCursorMethodsProperties)(nil)).Elem()
}

func (o MongoDbCursorMethodsPropertiesPtrOutput) ToMongoDbCursorMethodsPropertiesPtrOutput() MongoDbCursorMethodsPropertiesPtrOutput {
	return o
}

func (o MongoDbCursorMethodsPropertiesPtrOutput) ToMongoDbCursorMethodsPropertiesPtrOutputWithContext(ctx context.Context) MongoDbCursorMethodsPropertiesPtrOutput {
	return o
}

func (o MongoDbCursorMethodsPropertiesPtrOutput) Elem() MongoDbCursorMethodsPropertiesOutput {
	return o.ApplyT(func(v *MongoDbCursorMethodsProperties) MongoDbCursorMethodsProperties {
		if v != nil {
			return *v
		}
		var ret MongoDbCursorMethodsProperties
		return ret
	}).(MongoDbCursorMethodsPropertiesOutput)
}

// Specifies the maximum number of documents the server returns. limit() is analogous to the LIMIT statement in a SQL database. Type: integer (or Expression with resultType integer).
func (o MongoDbCursorMethodsPropertiesPtrOutput) Limit() pulumi.AnyOutput {
	return o.ApplyT(func(v *MongoDbCursorMethodsProperties) interface{} {
		if v == nil {
			return nil
		}
		return v.Limit
	}).(pulumi.AnyOutput)
}

// Specifies the fields to return in the documents that match the query filter. To return all fields in the matching documents, omit this parameter. Type: string (or Expression with resultType string).
func (o MongoDbCursorMethodsPropertiesPtrOutput) Project() pulumi.AnyOutput {
	return o.ApplyT(func(v *MongoDbCursorMethodsProperties) interface{} {
		if v == nil {
			return nil
		}
		return v.Project
	}).(pulumi.AnyOutput)
}

// Specifies the how many documents skipped and where MongoDB begins returning results. This approach may be useful in implementing paginated results. Type: integer (or Expression with resultType integer).
func (o MongoDbCursorMethodsPropertiesPtrOutput) Skip() pulumi.AnyOutput {
	return o.ApplyT(func(v *MongoDbCursorMethodsProperties) interface{} {
		if v == nil {
			return nil
		}
		return v.Skip
	}).(pulumi.AnyOutput)
}

// Specifies the order in which the query returns matching documents. Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
func (o MongoDbCursorMethodsPropertiesPtrOutput) Sort() pulumi.AnyOutput {
	return o.ApplyT(func(v *MongoDbCursorMethodsProperties) interface{} {
		if v == nil {
			return nil
		}
		return v.Sort
	}).(pulumi.AnyOutput)
}

// Cursor methods for Mongodb query
type MongoDbCursorMethodsPropertiesResponse struct {
	// Specifies the maximum number of documents the server returns. limit() is analogous to the LIMIT statement in a SQL database. Type: integer (or Expression with resultType integer).
	Limit interface{} `pulumi:"limit"`
	// Specifies the fields to return in the documents that match the query filter. To return all fields in the matching documents, omit this parameter. Type: string (or Expression with resultType string).
	Project interface{} `pulumi:"project"`
	// Specifies the how many documents skipped and where MongoDB begins returning results. This approach may be useful in implementing paginated results. Type: integer (or Expression with resultType integer).
	Skip interface{} `pulumi:"skip"`
	// Specifies the order in which the query returns matching documents. Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
	Sort interface{} `pulumi:"sort"`
}

// Cursor methods for Mongodb query
type MongoDbCursorMethodsPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MongoDbCursorMethodsPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbCursorMethodsPropertiesResponse)(nil)).Elem()
}

func (o MongoDbCursorMethodsPropertiesResponseOutput) ToMongoDbCursorMethodsPropertiesResponseOutput() MongoDbCursorMethodsPropertiesResponseOutput {
	return o
}

func (o MongoDbCursorMethodsPropertiesResponseOutput) ToMongoDbCursorMethodsPropertiesResponseOutputWithContext(ctx context.Context) MongoDbCursorMethodsPropertiesResponseOutput {
	return o
}

// Specifies the maximum number of documents the server returns. limit() is analogous to the LIMIT statement in a SQL database. Type: integer (or Expression with resultType integer).
func (o MongoDbCursorMethodsPropertiesResponseOutput) Limit() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbCursorMethodsPropertiesResponse) interface{} { return v.Limit }).(pulumi.AnyOutput)
}

// Specifies the fields to return in the documents that match the query filter. To return all fields in the matching documents, omit this parameter. Type: string (or Expression with resultType string).
func (o MongoDbCursorMethodsPropertiesResponseOutput) Project() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbCursorMethodsPropertiesResponse) interface{} { return v.Project }).(pulumi.AnyOutput)
}

// Specifies the how many documents skipped and where MongoDB begins returning results. This approach may be useful in implementing paginated results. Type: integer (or Expression with resultType integer).
func (o MongoDbCursorMethodsPropertiesResponseOutput) Skip() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbCursorMethodsPropertiesResponse) interface{} { return v.Skip }).(pulumi.AnyOutput)
}

// Specifies the order in which the query returns matching documents. Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
func (o MongoDbCursorMethodsPropertiesResponseOutput) Sort() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbCursorMethodsPropertiesResponse) interface{} { return v.Sort }).(pulumi.AnyOutput)
}

type MongoDbCursorMethodsPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (MongoDbCursorMethodsPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbCursorMethodsPropertiesResponse)(nil)).Elem()
}

func (o MongoDbCursorMethodsPropertiesResponsePtrOutput) ToMongoDbCursorMethodsPropertiesResponsePtrOutput() MongoDbCursorMethodsPropertiesResponsePtrOutput {
	return o
}

func (o MongoDbCursorMethodsPropertiesResponsePtrOutput) ToMongoDbCursorMethodsPropertiesResponsePtrOutputWithContext(ctx context.Context) MongoDbCursorMethodsPropertiesResponsePtrOutput {
	return o
}

func (o MongoDbCursorMethodsPropertiesResponsePtrOutput) Elem() MongoDbCursorMethodsPropertiesResponseOutput {
	return o.ApplyT(func(v *MongoDbCursorMethodsPropertiesResponse) MongoDbCursorMethodsPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret MongoDbCursorMethodsPropertiesResponse
		return ret
	}).(MongoDbCursorMethodsPropertiesResponseOutput)
}

// Specifies the maximum number of documents the server returns. limit() is analogous to the LIMIT statement in a SQL database. Type: integer (or Expression with resultType integer).
func (o MongoDbCursorMethodsPropertiesResponsePtrOutput) Limit() pulumi.AnyOutput {
	return o.ApplyT(func(v *MongoDbCursorMethodsPropertiesResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Limit
	}).(pulumi.AnyOutput)
}

// Specifies the fields to return in the documents that match the query filter. To return all fields in the matching documents, omit this parameter. Type: string (or Expression with resultType string).
func (o MongoDbCursorMethodsPropertiesResponsePtrOutput) Project() pulumi.AnyOutput {
	return o.ApplyT(func(v *MongoDbCursorMethodsPropertiesResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Project
	}).(pulumi.AnyOutput)
}

// Specifies the how many documents skipped and where MongoDB begins returning results. This approach may be useful in implementing paginated results. Type: integer (or Expression with resultType integer).
func (o MongoDbCursorMethodsPropertiesResponsePtrOutput) Skip() pulumi.AnyOutput {
	return o.ApplyT(func(v *MongoDbCursorMethodsPropertiesResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Skip
	}).(pulumi.AnyOutput)
}

// Specifies the order in which the query returns matching documents. Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
func (o MongoDbCursorMethodsPropertiesResponsePtrOutput) Sort() pulumi.AnyOutput {
	return o.ApplyT(func(v *MongoDbCursorMethodsPropertiesResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Sort
	}).(pulumi.AnyOutput)
}

// Linked service for MongoDb data source.
type MongoDbLinkedService struct {
	// Specifies whether to allow self-signed certificates from the server. The default value is false. Type: boolean (or Expression with resultType boolean).
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Database to verify the username and password. Type: string (or Expression with resultType string).
	AuthSource interface{} `pulumi:"authSource"`
	// The authentication type to be used to connect to the MongoDB database.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The name of the MongoDB database that you want to access. Type: string (or Expression with resultType string).
	DatabaseName interface{} `pulumi:"databaseName"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false. Type: boolean (or Expression with resultType boolean).
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// The TCP port number that the MongoDB server uses to listen for client connections. The default value is 27017. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// The IP address or server name of the MongoDB server. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	// Expected value is 'MongoDb'.
	Type string `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// MongoDbLinkedServiceInput is an input type that accepts MongoDbLinkedServiceArgs and MongoDbLinkedServiceOutput values.
// You can construct a concrete instance of `MongoDbLinkedServiceInput` via:
//
//	MongoDbLinkedServiceArgs{...}
type MongoDbLinkedServiceInput interface {
	pulumi.Input

	ToMongoDbLinkedServiceOutput() MongoDbLinkedServiceOutput
	ToMongoDbLinkedServiceOutputWithContext(context.Context) MongoDbLinkedServiceOutput
}

// Linked service for MongoDb data source.
type MongoDbLinkedServiceArgs struct {
	// Specifies whether to allow self-signed certificates from the server. The default value is false. Type: boolean (or Expression with resultType boolean).
	AllowSelfSignedServerCert pulumi.Input `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Database to verify the username and password. Type: string (or Expression with resultType string).
	AuthSource pulumi.Input `pulumi:"authSource"`
	// The authentication type to be used to connect to the MongoDB database.
	AuthenticationType pulumi.StringPtrInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The name of the MongoDB database that you want to access. Type: string (or Expression with resultType string).
	DatabaseName pulumi.Input `pulumi:"databaseName"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false. Type: boolean (or Expression with resultType boolean).
	EnableSsl pulumi.Input `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password for authentication.
	Password pulumi.Input `pulumi:"password"`
	// The TCP port number that the MongoDB server uses to listen for client connections. The default value is 27017. Type: integer (or Expression with resultType integer), minimum: 0.
	Port pulumi.Input `pulumi:"port"`
	// The IP address or server name of the MongoDB server. Type: string (or Expression with resultType string).
	Server pulumi.Input `pulumi:"server"`
	// Type of linked service.
	// Expected value is 'MongoDb'.
	Type pulumi.StringInput `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username pulumi.Input `pulumi:"username"`
}

func (MongoDbLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbLinkedService)(nil)).Elem()
}

func (i MongoDbLinkedServiceArgs) ToMongoDbLinkedServiceOutput() MongoDbLinkedServiceOutput {
	return i.ToMongoDbLinkedServiceOutputWithContext(context.Background())
}

func (i MongoDbLinkedServiceArgs) ToMongoDbLinkedServiceOutputWithContext(ctx context.Context) MongoDbLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbLinkedServiceOutput)
}

// Linked service for MongoDb data source.
type MongoDbLinkedServiceOutput struct{ *pulumi.OutputState }

func (MongoDbLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbLinkedService)(nil)).Elem()
}

func (o MongoDbLinkedServiceOutput) ToMongoDbLinkedServiceOutput() MongoDbLinkedServiceOutput {
	return o
}

func (o MongoDbLinkedServiceOutput) ToMongoDbLinkedServiceOutputWithContext(ctx context.Context) MongoDbLinkedServiceOutput {
	return o
}

// Specifies whether to allow self-signed certificates from the server. The default value is false. Type: boolean (or Expression with resultType boolean).
func (o MongoDbLinkedServiceOutput) AllowSelfSignedServerCert() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbLinkedService) interface{} { return v.AllowSelfSignedServerCert }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o MongoDbLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MongoDbLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Database to verify the username and password. Type: string (or Expression with resultType string).
func (o MongoDbLinkedServiceOutput) AuthSource() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbLinkedService) interface{} { return v.AuthSource }).(pulumi.AnyOutput)
}

// The authentication type to be used to connect to the MongoDB database.
func (o MongoDbLinkedServiceOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbLinkedService) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// The integration runtime reference.
func (o MongoDbLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v MongoDbLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The name of the MongoDB database that you want to access. Type: string (or Expression with resultType string).
func (o MongoDbLinkedServiceOutput) DatabaseName() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbLinkedService) interface{} { return v.DatabaseName }).(pulumi.AnyOutput)
}

// Linked service description.
func (o MongoDbLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies whether the connections to the server are encrypted using SSL. The default value is false. Type: boolean (or Expression with resultType boolean).
func (o MongoDbLinkedServiceOutput) EnableSsl() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbLinkedService) interface{} { return v.EnableSsl }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o MongoDbLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o MongoDbLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v MongoDbLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Password for authentication.
func (o MongoDbLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port number that the MongoDB server uses to listen for client connections. The default value is 27017. Type: integer (or Expression with resultType integer), minimum: 0.
func (o MongoDbLinkedServiceOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbLinkedService) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The IP address or server name of the MongoDB server. Type: string (or Expression with resultType string).
func (o MongoDbLinkedServiceOutput) Server() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbLinkedService) interface{} { return v.Server }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'MongoDb'.
func (o MongoDbLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Username for authentication. Type: string (or Expression with resultType string).
func (o MongoDbLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Linked service for MongoDb data source.
type MongoDbLinkedServiceResponse struct {
	// Specifies whether to allow self-signed certificates from the server. The default value is false. Type: boolean (or Expression with resultType boolean).
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Database to verify the username and password. Type: string (or Expression with resultType string).
	AuthSource interface{} `pulumi:"authSource"`
	// The authentication type to be used to connect to the MongoDB database.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The name of the MongoDB database that you want to access. Type: string (or Expression with resultType string).
	DatabaseName interface{} `pulumi:"databaseName"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false. Type: boolean (or Expression with resultType boolean).
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// The TCP port number that the MongoDB server uses to listen for client connections. The default value is 27017. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// The IP address or server name of the MongoDB server. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	// Expected value is 'MongoDb'.
	Type string `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// Linked service for MongoDb data source.
type MongoDbLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (MongoDbLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbLinkedServiceResponse)(nil)).Elem()
}

func (o MongoDbLinkedServiceResponseOutput) ToMongoDbLinkedServiceResponseOutput() MongoDbLinkedServiceResponseOutput {
	return o
}

func (o MongoDbLinkedServiceResponseOutput) ToMongoDbLinkedServiceResponseOutputWithContext(ctx context.Context) MongoDbLinkedServiceResponseOutput {
	return o
}

// Specifies whether to allow self-signed certificates from the server. The default value is false. Type: boolean (or Expression with resultType boolean).
func (o MongoDbLinkedServiceResponseOutput) AllowSelfSignedServerCert() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) interface{} { return v.AllowSelfSignedServerCert }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o MongoDbLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Database to verify the username and password. Type: string (or Expression with resultType string).
func (o MongoDbLinkedServiceResponseOutput) AuthSource() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) interface{} { return v.AuthSource }).(pulumi.AnyOutput)
}

// The authentication type to be used to connect to the MongoDB database.
func (o MongoDbLinkedServiceResponseOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// The integration runtime reference.
func (o MongoDbLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The name of the MongoDB database that you want to access. Type: string (or Expression with resultType string).
func (o MongoDbLinkedServiceResponseOutput) DatabaseName() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) interface{} { return v.DatabaseName }).(pulumi.AnyOutput)
}

// Linked service description.
func (o MongoDbLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies whether the connections to the server are encrypted using SSL. The default value is false. Type: boolean (or Expression with resultType boolean).
func (o MongoDbLinkedServiceResponseOutput) EnableSsl() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) interface{} { return v.EnableSsl }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o MongoDbLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o MongoDbLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password for authentication.
func (o MongoDbLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port number that the MongoDB server uses to listen for client connections. The default value is 27017. Type: integer (or Expression with resultType integer), minimum: 0.
func (o MongoDbLinkedServiceResponseOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The IP address or server name of the MongoDB server. Type: string (or Expression with resultType string).
func (o MongoDbLinkedServiceResponseOutput) Server() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) interface{} { return v.Server }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'MongoDb'.
func (o MongoDbLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Username for authentication. Type: string (or Expression with resultType string).
func (o MongoDbLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// A copy activity source for a MongoDB database.
type MongoDbSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Should be a SQL-92 query expression. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MongoDbSource'.
	Type string `pulumi:"type"`
}

// MongoDbSourceInput is an input type that accepts MongoDbSourceArgs and MongoDbSourceOutput values.
// You can construct a concrete instance of `MongoDbSourceInput` via:
//
//	MongoDbSourceArgs{...}
type MongoDbSourceInput interface {
	pulumi.Input

	ToMongoDbSourceOutput() MongoDbSourceOutput
	ToMongoDbSourceOutputWithContext(context.Context) MongoDbSourceOutput
}

// A copy activity source for a MongoDB database.
type MongoDbSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Database query. Should be a SQL-92 query expression. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MongoDbSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MongoDbSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbSource)(nil)).Elem()
}

func (i MongoDbSourceArgs) ToMongoDbSourceOutput() MongoDbSourceOutput {
	return i.ToMongoDbSourceOutputWithContext(context.Background())
}

func (i MongoDbSourceArgs) ToMongoDbSourceOutputWithContext(ctx context.Context) MongoDbSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbSourceOutput)
}

// A copy activity source for a MongoDB database.
type MongoDbSourceOutput struct{ *pulumi.OutputState }

func (MongoDbSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbSource)(nil)).Elem()
}

func (o MongoDbSourceOutput) ToMongoDbSourceOutput() MongoDbSourceOutput {
	return o
}

func (o MongoDbSourceOutput) ToMongoDbSourceOutputWithContext(ctx context.Context) MongoDbSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o MongoDbSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o MongoDbSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o MongoDbSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Database query. Should be a SQL-92 query expression. Type: string (or Expression with resultType string).
func (o MongoDbSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o MongoDbSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o MongoDbSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'MongoDbSource'.
func (o MongoDbSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity source for a MongoDB database.
type MongoDbSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Should be a SQL-92 query expression. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MongoDbSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for a MongoDB database.
type MongoDbSourceResponseOutput struct{ *pulumi.OutputState }

func (MongoDbSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbSourceResponse)(nil)).Elem()
}

func (o MongoDbSourceResponseOutput) ToMongoDbSourceResponseOutput() MongoDbSourceResponseOutput {
	return o
}

func (o MongoDbSourceResponseOutput) ToMongoDbSourceResponseOutputWithContext(ctx context.Context) MongoDbSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o MongoDbSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o MongoDbSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o MongoDbSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Database query. Should be a SQL-92 query expression. Type: string (or Expression with resultType string).
func (o MongoDbSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o MongoDbSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o MongoDbSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'MongoDbSource'.
func (o MongoDbSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The MongoDB database dataset.
type MongoDbV2CollectionDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The collection name of the MongoDB database. Type: string (or Expression with resultType string).
	Collection interface{} `pulumi:"collection"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'MongoDbV2Collection'.
	Type string `pulumi:"type"`
}

// MongoDbV2CollectionDatasetInput is an input type that accepts MongoDbV2CollectionDatasetArgs and MongoDbV2CollectionDatasetOutput values.
// You can construct a concrete instance of `MongoDbV2CollectionDatasetInput` via:
//
//	MongoDbV2CollectionDatasetArgs{...}
type MongoDbV2CollectionDatasetInput interface {
	pulumi.Input

	ToMongoDbV2CollectionDatasetOutput() MongoDbV2CollectionDatasetOutput
	ToMongoDbV2CollectionDatasetOutputWithContext(context.Context) MongoDbV2CollectionDatasetOutput
}

// The MongoDB database dataset.
type MongoDbV2CollectionDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The collection name of the MongoDB database. Type: string (or Expression with resultType string).
	Collection pulumi.Input `pulumi:"collection"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'MongoDbV2Collection'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MongoDbV2CollectionDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbV2CollectionDataset)(nil)).Elem()
}

func (i MongoDbV2CollectionDatasetArgs) ToMongoDbV2CollectionDatasetOutput() MongoDbV2CollectionDatasetOutput {
	return i.ToMongoDbV2CollectionDatasetOutputWithContext(context.Background())
}

func (i MongoDbV2CollectionDatasetArgs) ToMongoDbV2CollectionDatasetOutputWithContext(ctx context.Context) MongoDbV2CollectionDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbV2CollectionDatasetOutput)
}

// The MongoDB database dataset.
type MongoDbV2CollectionDatasetOutput struct{ *pulumi.OutputState }

func (MongoDbV2CollectionDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbV2CollectionDataset)(nil)).Elem()
}

func (o MongoDbV2CollectionDatasetOutput) ToMongoDbV2CollectionDatasetOutput() MongoDbV2CollectionDatasetOutput {
	return o
}

func (o MongoDbV2CollectionDatasetOutput) ToMongoDbV2CollectionDatasetOutputWithContext(ctx context.Context) MongoDbV2CollectionDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o MongoDbV2CollectionDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MongoDbV2CollectionDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The collection name of the MongoDB database. Type: string (or Expression with resultType string).
func (o MongoDbV2CollectionDatasetOutput) Collection() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2CollectionDataset) interface{} { return v.Collection }).(pulumi.AnyOutput)
}

// Dataset description.
func (o MongoDbV2CollectionDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbV2CollectionDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o MongoDbV2CollectionDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v MongoDbV2CollectionDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o MongoDbV2CollectionDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v MongoDbV2CollectionDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o MongoDbV2CollectionDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v MongoDbV2CollectionDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o MongoDbV2CollectionDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2CollectionDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o MongoDbV2CollectionDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2CollectionDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'MongoDbV2Collection'.
func (o MongoDbV2CollectionDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbV2CollectionDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The MongoDB database dataset.
type MongoDbV2CollectionDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The collection name of the MongoDB database. Type: string (or Expression with resultType string).
	Collection interface{} `pulumi:"collection"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'MongoDbV2Collection'.
	Type string `pulumi:"type"`
}

// The MongoDB database dataset.
type MongoDbV2CollectionDatasetResponseOutput struct{ *pulumi.OutputState }

func (MongoDbV2CollectionDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbV2CollectionDatasetResponse)(nil)).Elem()
}

func (o MongoDbV2CollectionDatasetResponseOutput) ToMongoDbV2CollectionDatasetResponseOutput() MongoDbV2CollectionDatasetResponseOutput {
	return o
}

func (o MongoDbV2CollectionDatasetResponseOutput) ToMongoDbV2CollectionDatasetResponseOutputWithContext(ctx context.Context) MongoDbV2CollectionDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o MongoDbV2CollectionDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MongoDbV2CollectionDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The collection name of the MongoDB database. Type: string (or Expression with resultType string).
func (o MongoDbV2CollectionDatasetResponseOutput) Collection() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2CollectionDatasetResponse) interface{} { return v.Collection }).(pulumi.AnyOutput)
}

// Dataset description.
func (o MongoDbV2CollectionDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbV2CollectionDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o MongoDbV2CollectionDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v MongoDbV2CollectionDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o MongoDbV2CollectionDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v MongoDbV2CollectionDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o MongoDbV2CollectionDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v MongoDbV2CollectionDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o MongoDbV2CollectionDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2CollectionDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o MongoDbV2CollectionDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2CollectionDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'MongoDbV2Collection'.
func (o MongoDbV2CollectionDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbV2CollectionDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for MongoDB data source.
type MongoDbV2LinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The MongoDB connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The name of the MongoDB database that you want to access. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'MongoDbV2'.
	Type string `pulumi:"type"`
}

// MongoDbV2LinkedServiceInput is an input type that accepts MongoDbV2LinkedServiceArgs and MongoDbV2LinkedServiceOutput values.
// You can construct a concrete instance of `MongoDbV2LinkedServiceInput` via:
//
//	MongoDbV2LinkedServiceArgs{...}
type MongoDbV2LinkedServiceInput interface {
	pulumi.Input

	ToMongoDbV2LinkedServiceOutput() MongoDbV2LinkedServiceOutput
	ToMongoDbV2LinkedServiceOutputWithContext(context.Context) MongoDbV2LinkedServiceOutput
}

// Linked service for MongoDB data source.
type MongoDbV2LinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The MongoDB connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// The name of the MongoDB database that you want to access. Type: string (or Expression with resultType string).
	Database pulumi.Input `pulumi:"database"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'MongoDbV2'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MongoDbV2LinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbV2LinkedService)(nil)).Elem()
}

func (i MongoDbV2LinkedServiceArgs) ToMongoDbV2LinkedServiceOutput() MongoDbV2LinkedServiceOutput {
	return i.ToMongoDbV2LinkedServiceOutputWithContext(context.Background())
}

func (i MongoDbV2LinkedServiceArgs) ToMongoDbV2LinkedServiceOutputWithContext(ctx context.Context) MongoDbV2LinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbV2LinkedServiceOutput)
}

// Linked service for MongoDB data source.
type MongoDbV2LinkedServiceOutput struct{ *pulumi.OutputState }

func (MongoDbV2LinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbV2LinkedService)(nil)).Elem()
}

func (o MongoDbV2LinkedServiceOutput) ToMongoDbV2LinkedServiceOutput() MongoDbV2LinkedServiceOutput {
	return o
}

func (o MongoDbV2LinkedServiceOutput) ToMongoDbV2LinkedServiceOutputWithContext(ctx context.Context) MongoDbV2LinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o MongoDbV2LinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MongoDbV2LinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o MongoDbV2LinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v MongoDbV2LinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The MongoDB connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o MongoDbV2LinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2LinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// The name of the MongoDB database that you want to access. Type: string (or Expression with resultType string).
func (o MongoDbV2LinkedServiceOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2LinkedService) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Linked service description.
func (o MongoDbV2LinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbV2LinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o MongoDbV2LinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v MongoDbV2LinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
// Expected value is 'MongoDbV2'.
func (o MongoDbV2LinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbV2LinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for MongoDB data source.
type MongoDbV2LinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The MongoDB connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The name of the MongoDB database that you want to access. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'MongoDbV2'.
	Type string `pulumi:"type"`
}

// Linked service for MongoDB data source.
type MongoDbV2LinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (MongoDbV2LinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbV2LinkedServiceResponse)(nil)).Elem()
}

func (o MongoDbV2LinkedServiceResponseOutput) ToMongoDbV2LinkedServiceResponseOutput() MongoDbV2LinkedServiceResponseOutput {
	return o
}

func (o MongoDbV2LinkedServiceResponseOutput) ToMongoDbV2LinkedServiceResponseOutputWithContext(ctx context.Context) MongoDbV2LinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o MongoDbV2LinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MongoDbV2LinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o MongoDbV2LinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v MongoDbV2LinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The MongoDB connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o MongoDbV2LinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2LinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// The name of the MongoDB database that you want to access. Type: string (or Expression with resultType string).
func (o MongoDbV2LinkedServiceResponseOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2LinkedServiceResponse) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Linked service description.
func (o MongoDbV2LinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MongoDbV2LinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o MongoDbV2LinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v MongoDbV2LinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
// Expected value is 'MongoDbV2'.
func (o MongoDbV2LinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbV2LinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity MongoDB sink.
type MongoDbV2Sink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'MongoDbV2Sink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Specifies whether the document with same key to be overwritten (upsert) rather than throw exception (insert). The default value is "insert". Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// MongoDbV2SinkInput is an input type that accepts MongoDbV2SinkArgs and MongoDbV2SinkOutput values.
// You can construct a concrete instance of `MongoDbV2SinkInput` via:
//
//	MongoDbV2SinkArgs{...}
type MongoDbV2SinkInput interface {
	pulumi.Input

	ToMongoDbV2SinkOutput() MongoDbV2SinkOutput
	ToMongoDbV2SinkOutputWithContext(context.Context) MongoDbV2SinkOutput
}

// A copy activity MongoDB sink.
type MongoDbV2SinkArgs struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount pulumi.Input `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait pulumi.Input `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'MongoDbV2Sink'.
	Type pulumi.StringInput `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize pulumi.Input `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout pulumi.Input `pulumi:"writeBatchTimeout"`
	// Specifies whether the document with same key to be overwritten (upsert) rather than throw exception (insert). The default value is "insert". Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
	WriteBehavior pulumi.Input `pulumi:"writeBehavior"`
}

func (MongoDbV2SinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbV2Sink)(nil)).Elem()
}

func (i MongoDbV2SinkArgs) ToMongoDbV2SinkOutput() MongoDbV2SinkOutput {
	return i.ToMongoDbV2SinkOutputWithContext(context.Background())
}

func (i MongoDbV2SinkArgs) ToMongoDbV2SinkOutputWithContext(ctx context.Context) MongoDbV2SinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbV2SinkOutput)
}

// A copy activity MongoDB sink.
type MongoDbV2SinkOutput struct{ *pulumi.OutputState }

func (MongoDbV2SinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbV2Sink)(nil)).Elem()
}

func (o MongoDbV2SinkOutput) ToMongoDbV2SinkOutput() MongoDbV2SinkOutput {
	return o
}

func (o MongoDbV2SinkOutput) ToMongoDbV2SinkOutputWithContext(ctx context.Context) MongoDbV2SinkOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o MongoDbV2SinkOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2Sink) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o MongoDbV2SinkOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2Sink) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o MongoDbV2SinkOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2Sink) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o MongoDbV2SinkOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2Sink) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'MongoDbV2Sink'.
func (o MongoDbV2SinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbV2Sink) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o MongoDbV2SinkOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2Sink) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o MongoDbV2SinkOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2Sink) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// Specifies whether the document with same key to be overwritten (upsert) rather than throw exception (insert). The default value is "insert". Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
func (o MongoDbV2SinkOutput) WriteBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2Sink) interface{} { return v.WriteBehavior }).(pulumi.AnyOutput)
}

// A copy activity MongoDB sink.
type MongoDbV2SinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'MongoDbV2Sink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Specifies whether the document with same key to be overwritten (upsert) rather than throw exception (insert). The default value is "insert". Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// A copy activity MongoDB sink.
type MongoDbV2SinkResponseOutput struct{ *pulumi.OutputState }

func (MongoDbV2SinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbV2SinkResponse)(nil)).Elem()
}

func (o MongoDbV2SinkResponseOutput) ToMongoDbV2SinkResponseOutput() MongoDbV2SinkResponseOutput {
	return o
}

func (o MongoDbV2SinkResponseOutput) ToMongoDbV2SinkResponseOutputWithContext(ctx context.Context) MongoDbV2SinkResponseOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o MongoDbV2SinkResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2SinkResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o MongoDbV2SinkResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2SinkResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o MongoDbV2SinkResponseOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2SinkResponse) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o MongoDbV2SinkResponseOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2SinkResponse) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'MongoDbV2Sink'.
func (o MongoDbV2SinkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbV2SinkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o MongoDbV2SinkResponseOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2SinkResponse) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o MongoDbV2SinkResponseOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2SinkResponse) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// Specifies whether the document with same key to be overwritten (upsert) rather than throw exception (insert). The default value is "insert". Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
func (o MongoDbV2SinkResponseOutput) WriteBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2SinkResponse) interface{} { return v.WriteBehavior }).(pulumi.AnyOutput)
}

// A copy activity source for a MongoDB database.
type MongoDbV2Source struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// Specifies the number of documents to return in each batch of the response from MongoDB instance. In most cases, modifying the batch size will not affect the user or the application. This property's main purpose is to avoid hit the limitation of response size. Type: integer (or Expression with resultType integer).
	BatchSize interface{} `pulumi:"batchSize"`
	// Cursor methods for Mongodb query
	CursorMethods *MongoDbCursorMethodsProperties `pulumi:"cursorMethods"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies selection filter using query operators. To return all documents in a collection, omit this parameter or pass an empty document ({}). Type: string (or Expression with resultType string).
	Filter interface{} `pulumi:"filter"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MongoDbV2Source'.
	Type string `pulumi:"type"`
}

// MongoDbV2SourceInput is an input type that accepts MongoDbV2SourceArgs and MongoDbV2SourceOutput values.
// You can construct a concrete instance of `MongoDbV2SourceInput` via:
//
//	MongoDbV2SourceArgs{...}
type MongoDbV2SourceInput interface {
	pulumi.Input

	ToMongoDbV2SourceOutput() MongoDbV2SourceOutput
	ToMongoDbV2SourceOutputWithContext(context.Context) MongoDbV2SourceOutput
}

// A copy activity source for a MongoDB database.
type MongoDbV2SourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// Specifies the number of documents to return in each batch of the response from MongoDB instance. In most cases, modifying the batch size will not affect the user or the application. This property's main purpose is to avoid hit the limitation of response size. Type: integer (or Expression with resultType integer).
	BatchSize pulumi.Input `pulumi:"batchSize"`
	// Cursor methods for Mongodb query
	CursorMethods MongoDbCursorMethodsPropertiesPtrInput `pulumi:"cursorMethods"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// Specifies selection filter using query operators. To return all documents in a collection, omit this parameter or pass an empty document ({}). Type: string (or Expression with resultType string).
	Filter pulumi.Input `pulumi:"filter"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MongoDbV2Source'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MongoDbV2SourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbV2Source)(nil)).Elem()
}

func (i MongoDbV2SourceArgs) ToMongoDbV2SourceOutput() MongoDbV2SourceOutput {
	return i.ToMongoDbV2SourceOutputWithContext(context.Background())
}

func (i MongoDbV2SourceArgs) ToMongoDbV2SourceOutputWithContext(ctx context.Context) MongoDbV2SourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbV2SourceOutput)
}

// A copy activity source for a MongoDB database.
type MongoDbV2SourceOutput struct{ *pulumi.OutputState }

func (MongoDbV2SourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbV2Source)(nil)).Elem()
}

func (o MongoDbV2SourceOutput) ToMongoDbV2SourceOutput() MongoDbV2SourceOutput {
	return o
}

func (o MongoDbV2SourceOutput) ToMongoDbV2SourceOutputWithContext(ctx context.Context) MongoDbV2SourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o MongoDbV2SourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2Source) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// Specifies the number of documents to return in each batch of the response from MongoDB instance. In most cases, modifying the batch size will not affect the user or the application. This property's main purpose is to avoid hit the limitation of response size. Type: integer (or Expression with resultType integer).
func (o MongoDbV2SourceOutput) BatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2Source) interface{} { return v.BatchSize }).(pulumi.AnyOutput)
}

// Cursor methods for Mongodb query
func (o MongoDbV2SourceOutput) CursorMethods() MongoDbCursorMethodsPropertiesPtrOutput {
	return o.ApplyT(func(v MongoDbV2Source) *MongoDbCursorMethodsProperties { return v.CursorMethods }).(MongoDbCursorMethodsPropertiesPtrOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o MongoDbV2SourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2Source) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Specifies selection filter using query operators. To return all documents in a collection, omit this parameter or pass an empty document ({}). Type: string (or Expression with resultType string).
func (o MongoDbV2SourceOutput) Filter() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2Source) interface{} { return v.Filter }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o MongoDbV2SourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2Source) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o MongoDbV2SourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2Source) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o MongoDbV2SourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2Source) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o MongoDbV2SourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2Source) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'MongoDbV2Source'.
func (o MongoDbV2SourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbV2Source) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity source for a MongoDB database.
type MongoDbV2SourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// Specifies the number of documents to return in each batch of the response from MongoDB instance. In most cases, modifying the batch size will not affect the user or the application. This property's main purpose is to avoid hit the limitation of response size. Type: integer (or Expression with resultType integer).
	BatchSize interface{} `pulumi:"batchSize"`
	// Cursor methods for Mongodb query
	CursorMethods *MongoDbCursorMethodsPropertiesResponse `pulumi:"cursorMethods"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies selection filter using query operators. To return all documents in a collection, omit this parameter or pass an empty document ({}). Type: string (or Expression with resultType string).
	Filter interface{} `pulumi:"filter"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MongoDbV2Source'.
	Type string `pulumi:"type"`
}

// A copy activity source for a MongoDB database.
type MongoDbV2SourceResponseOutput struct{ *pulumi.OutputState }

func (MongoDbV2SourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoDbV2SourceResponse)(nil)).Elem()
}

func (o MongoDbV2SourceResponseOutput) ToMongoDbV2SourceResponseOutput() MongoDbV2SourceResponseOutput {
	return o
}

func (o MongoDbV2SourceResponseOutput) ToMongoDbV2SourceResponseOutputWithContext(ctx context.Context) MongoDbV2SourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o MongoDbV2SourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2SourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// Specifies the number of documents to return in each batch of the response from MongoDB instance. In most cases, modifying the batch size will not affect the user or the application. This property's main purpose is to avoid hit the limitation of response size. Type: integer (or Expression with resultType integer).
func (o MongoDbV2SourceResponseOutput) BatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2SourceResponse) interface{} { return v.BatchSize }).(pulumi.AnyOutput)
}

// Cursor methods for Mongodb query
func (o MongoDbV2SourceResponseOutput) CursorMethods() MongoDbCursorMethodsPropertiesResponsePtrOutput {
	return o.ApplyT(func(v MongoDbV2SourceResponse) *MongoDbCursorMethodsPropertiesResponse { return v.CursorMethods }).(MongoDbCursorMethodsPropertiesResponsePtrOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o MongoDbV2SourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2SourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Specifies selection filter using query operators. To return all documents in a collection, omit this parameter or pass an empty document ({}). Type: string (or Expression with resultType string).
func (o MongoDbV2SourceResponseOutput) Filter() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2SourceResponse) interface{} { return v.Filter }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o MongoDbV2SourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2SourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o MongoDbV2SourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2SourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o MongoDbV2SourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2SourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o MongoDbV2SourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v MongoDbV2SourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'MongoDbV2Source'.
func (o MongoDbV2SourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MongoDbV2SourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Base class for all triggers that support one to many model for trigger to pipeline.
type MultiplePipelineTrigger struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// Pipelines that need to be started.
	Pipelines []TriggerPipelineReference `pulumi:"pipelines"`
	// Trigger type.
	// Expected value is 'MultiplePipelineTrigger'.
	Type string `pulumi:"type"`
}

// MultiplePipelineTriggerInput is an input type that accepts MultiplePipelineTriggerArgs and MultiplePipelineTriggerOutput values.
// You can construct a concrete instance of `MultiplePipelineTriggerInput` via:
//
//	MultiplePipelineTriggerArgs{...}
type MultiplePipelineTriggerInput interface {
	pulumi.Input

	ToMultiplePipelineTriggerOutput() MultiplePipelineTriggerOutput
	ToMultiplePipelineTriggerOutputWithContext(context.Context) MultiplePipelineTriggerOutput
}

// Base class for all triggers that support one to many model for trigger to pipeline.
type MultiplePipelineTriggerArgs struct {
	// List of tags that can be used for describing the trigger.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Trigger description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Pipelines that need to be started.
	Pipelines TriggerPipelineReferenceArrayInput `pulumi:"pipelines"`
	// Trigger type.
	// Expected value is 'MultiplePipelineTrigger'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MultiplePipelineTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiplePipelineTrigger)(nil)).Elem()
}

func (i MultiplePipelineTriggerArgs) ToMultiplePipelineTriggerOutput() MultiplePipelineTriggerOutput {
	return i.ToMultiplePipelineTriggerOutputWithContext(context.Background())
}

func (i MultiplePipelineTriggerArgs) ToMultiplePipelineTriggerOutputWithContext(ctx context.Context) MultiplePipelineTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiplePipelineTriggerOutput)
}

// Base class for all triggers that support one to many model for trigger to pipeline.
type MultiplePipelineTriggerOutput struct{ *pulumi.OutputState }

func (MultiplePipelineTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiplePipelineTrigger)(nil)).Elem()
}

func (o MultiplePipelineTriggerOutput) ToMultiplePipelineTriggerOutput() MultiplePipelineTriggerOutput {
	return o
}

func (o MultiplePipelineTriggerOutput) ToMultiplePipelineTriggerOutputWithContext(ctx context.Context) MultiplePipelineTriggerOutput {
	return o
}

// List of tags that can be used for describing the trigger.
func (o MultiplePipelineTriggerOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MultiplePipelineTrigger) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Trigger description.
func (o MultiplePipelineTriggerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MultiplePipelineTrigger) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Pipelines that need to be started.
func (o MultiplePipelineTriggerOutput) Pipelines() TriggerPipelineReferenceArrayOutput {
	return o.ApplyT(func(v MultiplePipelineTrigger) []TriggerPipelineReference { return v.Pipelines }).(TriggerPipelineReferenceArrayOutput)
}

// Trigger type.
// Expected value is 'MultiplePipelineTrigger'.
func (o MultiplePipelineTriggerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MultiplePipelineTrigger) string { return v.Type }).(pulumi.StringOutput)
}

// Base class for all triggers that support one to many model for trigger to pipeline.
type MultiplePipelineTriggerResponse struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// Pipelines that need to be started.
	Pipelines []TriggerPipelineReferenceResponse `pulumi:"pipelines"`
	// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState string `pulumi:"runtimeState"`
	// Trigger type.
	// Expected value is 'MultiplePipelineTrigger'.
	Type string `pulumi:"type"`
}

// Base class for all triggers that support one to many model for trigger to pipeline.
type MultiplePipelineTriggerResponseOutput struct{ *pulumi.OutputState }

func (MultiplePipelineTriggerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiplePipelineTriggerResponse)(nil)).Elem()
}

func (o MultiplePipelineTriggerResponseOutput) ToMultiplePipelineTriggerResponseOutput() MultiplePipelineTriggerResponseOutput {
	return o
}

func (o MultiplePipelineTriggerResponseOutput) ToMultiplePipelineTriggerResponseOutputWithContext(ctx context.Context) MultiplePipelineTriggerResponseOutput {
	return o
}

// List of tags that can be used for describing the trigger.
func (o MultiplePipelineTriggerResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MultiplePipelineTriggerResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Trigger description.
func (o MultiplePipelineTriggerResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MultiplePipelineTriggerResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Pipelines that need to be started.
func (o MultiplePipelineTriggerResponseOutput) Pipelines() TriggerPipelineReferenceResponseArrayOutput {
	return o.ApplyT(func(v MultiplePipelineTriggerResponse) []TriggerPipelineReferenceResponse { return v.Pipelines }).(TriggerPipelineReferenceResponseArrayOutput)
}

// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
func (o MultiplePipelineTriggerResponseOutput) RuntimeState() pulumi.StringOutput {
	return o.ApplyT(func(v MultiplePipelineTriggerResponse) string { return v.RuntimeState }).(pulumi.StringOutput)
}

// Trigger type.
// Expected value is 'MultiplePipelineTrigger'.
func (o MultiplePipelineTriggerResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MultiplePipelineTriggerResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for MySQL data source.
type MySqlLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Database name for connection. Type: string.
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The version of the MySQL driver. Type: string. V1 or empty for legacy driver, V2 for new driver. V1 can support connection string and property bag, V2 can only support connection string.
	DriverVersion interface{} `pulumi:"driverVersion"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference `pulumi:"password"`
	// The port for the connection. Type: integer.
	Port interface{} `pulumi:"port"`
	// Server name for connection. Type: string.
	Server interface{} `pulumi:"server"`
	// SSL mode for connection. Type: integer. 0: disable, 1: prefer, 2: require, 3: verify-ca, 4: verify-full.
	SslMode interface{} `pulumi:"sslMode"`
	// Type of linked service.
	// Expected value is 'MySql'.
	Type string `pulumi:"type"`
	// Use system trust store for connection. Type: integer. 0: enable, 1: disable.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
	// Username for authentication. Type: string.
	Username interface{} `pulumi:"username"`
}

// MySqlLinkedServiceInput is an input type that accepts MySqlLinkedServiceArgs and MySqlLinkedServiceOutput values.
// You can construct a concrete instance of `MySqlLinkedServiceInput` via:
//
//	MySqlLinkedServiceArgs{...}
type MySqlLinkedServiceInput interface {
	pulumi.Input

	ToMySqlLinkedServiceOutput() MySqlLinkedServiceOutput
	ToMySqlLinkedServiceOutputWithContext(context.Context) MySqlLinkedServiceOutput
}

// Linked service for MySQL data source.
type MySqlLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Database name for connection. Type: string.
	Database pulumi.Input `pulumi:"database"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The version of the MySQL driver. Type: string. V1 or empty for legacy driver, V2 for new driver. V1 can support connection string and property bag, V2 can only support connection string.
	DriverVersion pulumi.Input `pulumi:"driverVersion"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password AzureKeyVaultSecretReferencePtrInput `pulumi:"password"`
	// The port for the connection. Type: integer.
	Port pulumi.Input `pulumi:"port"`
	// Server name for connection. Type: string.
	Server pulumi.Input `pulumi:"server"`
	// SSL mode for connection. Type: integer. 0: disable, 1: prefer, 2: require, 3: verify-ca, 4: verify-full.
	SslMode pulumi.Input `pulumi:"sslMode"`
	// Type of linked service.
	// Expected value is 'MySql'.
	Type pulumi.StringInput `pulumi:"type"`
	// Use system trust store for connection. Type: integer. 0: enable, 1: disable.
	UseSystemTrustStore pulumi.Input `pulumi:"useSystemTrustStore"`
	// Username for authentication. Type: string.
	Username pulumi.Input `pulumi:"username"`
}

func (MySqlLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MySqlLinkedService)(nil)).Elem()
}

func (i MySqlLinkedServiceArgs) ToMySqlLinkedServiceOutput() MySqlLinkedServiceOutput {
	return i.ToMySqlLinkedServiceOutputWithContext(context.Background())
}

func (i MySqlLinkedServiceArgs) ToMySqlLinkedServiceOutputWithContext(ctx context.Context) MySqlLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySqlLinkedServiceOutput)
}

// Linked service for MySQL data source.
type MySqlLinkedServiceOutput struct{ *pulumi.OutputState }

func (MySqlLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MySqlLinkedService)(nil)).Elem()
}

func (o MySqlLinkedServiceOutput) ToMySqlLinkedServiceOutput() MySqlLinkedServiceOutput {
	return o
}

func (o MySqlLinkedServiceOutput) ToMySqlLinkedServiceOutputWithContext(ctx context.Context) MySqlLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o MySqlLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MySqlLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o MySqlLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v MySqlLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o MySqlLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Database name for connection. Type: string.
func (o MySqlLinkedServiceOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlLinkedService) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Linked service description.
func (o MySqlLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The version of the MySQL driver. Type: string. V1 or empty for legacy driver, V2 for new driver. V1 can support connection string and property bag, V2 can only support connection string.
func (o MySqlLinkedServiceOutput) DriverVersion() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlLinkedService) interface{} { return v.DriverVersion }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o MySqlLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o MySqlLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v MySqlLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o MySqlLinkedServiceOutput) Password() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v MySqlLinkedService) *AzureKeyVaultSecretReference { return v.Password }).(AzureKeyVaultSecretReferencePtrOutput)
}

// The port for the connection. Type: integer.
func (o MySqlLinkedServiceOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlLinkedService) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// Server name for connection. Type: string.
func (o MySqlLinkedServiceOutput) Server() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlLinkedService) interface{} { return v.Server }).(pulumi.AnyOutput)
}

// SSL mode for connection. Type: integer. 0: disable, 1: prefer, 2: require, 3: verify-ca, 4: verify-full.
func (o MySqlLinkedServiceOutput) SslMode() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlLinkedService) interface{} { return v.SslMode }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'MySql'.
func (o MySqlLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MySqlLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Use system trust store for connection. Type: integer. 0: enable, 1: disable.
func (o MySqlLinkedServiceOutput) UseSystemTrustStore() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlLinkedService) interface{} { return v.UseSystemTrustStore }).(pulumi.AnyOutput)
}

// Username for authentication. Type: string.
func (o MySqlLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Linked service for MySQL data source.
type MySqlLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Database name for connection. Type: string.
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The version of the MySQL driver. Type: string. V1 or empty for legacy driver, V2 for new driver. V1 can support connection string and property bag, V2 can only support connection string.
	DriverVersion interface{} `pulumi:"driverVersion"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReferenceResponse `pulumi:"password"`
	// The port for the connection. Type: integer.
	Port interface{} `pulumi:"port"`
	// Server name for connection. Type: string.
	Server interface{} `pulumi:"server"`
	// SSL mode for connection. Type: integer. 0: disable, 1: prefer, 2: require, 3: verify-ca, 4: verify-full.
	SslMode interface{} `pulumi:"sslMode"`
	// Type of linked service.
	// Expected value is 'MySql'.
	Type string `pulumi:"type"`
	// Use system trust store for connection. Type: integer. 0: enable, 1: disable.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
	// Username for authentication. Type: string.
	Username interface{} `pulumi:"username"`
}

// Linked service for MySQL data source.
type MySqlLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (MySqlLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MySqlLinkedServiceResponse)(nil)).Elem()
}

func (o MySqlLinkedServiceResponseOutput) ToMySqlLinkedServiceResponseOutput() MySqlLinkedServiceResponseOutput {
	return o
}

func (o MySqlLinkedServiceResponseOutput) ToMySqlLinkedServiceResponseOutputWithContext(ctx context.Context) MySqlLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o MySqlLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MySqlLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o MySqlLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v MySqlLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o MySqlLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Database name for connection. Type: string.
func (o MySqlLinkedServiceResponseOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlLinkedServiceResponse) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Linked service description.
func (o MySqlLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The version of the MySQL driver. Type: string. V1 or empty for legacy driver, V2 for new driver. V1 can support connection string and property bag, V2 can only support connection string.
func (o MySqlLinkedServiceResponseOutput) DriverVersion() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlLinkedServiceResponse) interface{} { return v.DriverVersion }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o MySqlLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o MySqlLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v MySqlLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o MySqlLinkedServiceResponseOutput) Password() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v MySqlLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse { return v.Password }).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// The port for the connection. Type: integer.
func (o MySqlLinkedServiceResponseOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlLinkedServiceResponse) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// Server name for connection. Type: string.
func (o MySqlLinkedServiceResponseOutput) Server() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlLinkedServiceResponse) interface{} { return v.Server }).(pulumi.AnyOutput)
}

// SSL mode for connection. Type: integer. 0: disable, 1: prefer, 2: require, 3: verify-ca, 4: verify-full.
func (o MySqlLinkedServiceResponseOutput) SslMode() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlLinkedServiceResponse) interface{} { return v.SslMode }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'MySql'.
func (o MySqlLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MySqlLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Use system trust store for connection. Type: integer. 0: enable, 1: disable.
func (o MySqlLinkedServiceResponseOutput) UseSystemTrustStore() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlLinkedServiceResponse) interface{} { return v.UseSystemTrustStore }).(pulumi.AnyOutput)
}

// Username for authentication. Type: string.
func (o MySqlLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// A copy activity source for MySQL databases.
type MySqlSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MySqlSource'.
	Type string `pulumi:"type"`
}

// MySqlSourceInput is an input type that accepts MySqlSourceArgs and MySqlSourceOutput values.
// You can construct a concrete instance of `MySqlSourceInput` via:
//
//	MySqlSourceArgs{...}
type MySqlSourceInput interface {
	pulumi.Input

	ToMySqlSourceOutput() MySqlSourceOutput
	ToMySqlSourceOutputWithContext(context.Context) MySqlSourceOutput
}

// A copy activity source for MySQL databases.
type MySqlSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MySqlSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MySqlSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MySqlSource)(nil)).Elem()
}

func (i MySqlSourceArgs) ToMySqlSourceOutput() MySqlSourceOutput {
	return i.ToMySqlSourceOutputWithContext(context.Background())
}

func (i MySqlSourceArgs) ToMySqlSourceOutputWithContext(ctx context.Context) MySqlSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySqlSourceOutput)
}

// A copy activity source for MySQL databases.
type MySqlSourceOutput struct{ *pulumi.OutputState }

func (MySqlSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MySqlSource)(nil)).Elem()
}

func (o MySqlSourceOutput) ToMySqlSourceOutput() MySqlSourceOutput {
	return o
}

func (o MySqlSourceOutput) ToMySqlSourceOutputWithContext(ctx context.Context) MySqlSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o MySqlSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o MySqlSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o MySqlSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Database query. Type: string (or Expression with resultType string).
func (o MySqlSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o MySqlSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o MySqlSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o MySqlSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'MySqlSource'.
func (o MySqlSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MySqlSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity source for MySQL databases.
type MySqlSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'MySqlSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for MySQL databases.
type MySqlSourceResponseOutput struct{ *pulumi.OutputState }

func (MySqlSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MySqlSourceResponse)(nil)).Elem()
}

func (o MySqlSourceResponseOutput) ToMySqlSourceResponseOutput() MySqlSourceResponseOutput {
	return o
}

func (o MySqlSourceResponseOutput) ToMySqlSourceResponseOutputWithContext(ctx context.Context) MySqlSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o MySqlSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o MySqlSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o MySqlSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Database query. Type: string (or Expression with resultType string).
func (o MySqlSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o MySqlSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o MySqlSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o MySqlSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'MySqlSource'.
func (o MySqlSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MySqlSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The MySQL table dataset.
type MySqlTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The MySQL table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'MySqlTable'.
	Type string `pulumi:"type"`
}

// MySqlTableDatasetInput is an input type that accepts MySqlTableDatasetArgs and MySqlTableDatasetOutput values.
// You can construct a concrete instance of `MySqlTableDatasetInput` via:
//
//	MySqlTableDatasetArgs{...}
type MySqlTableDatasetInput interface {
	pulumi.Input

	ToMySqlTableDatasetOutput() MySqlTableDatasetOutput
	ToMySqlTableDatasetOutputWithContext(context.Context) MySqlTableDatasetOutput
}

// The MySQL table dataset.
type MySqlTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The MySQL table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'MySqlTable'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MySqlTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MySqlTableDataset)(nil)).Elem()
}

func (i MySqlTableDatasetArgs) ToMySqlTableDatasetOutput() MySqlTableDatasetOutput {
	return i.ToMySqlTableDatasetOutputWithContext(context.Background())
}

func (i MySqlTableDatasetArgs) ToMySqlTableDatasetOutputWithContext(ctx context.Context) MySqlTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySqlTableDatasetOutput)
}

// The MySQL table dataset.
type MySqlTableDatasetOutput struct{ *pulumi.OutputState }

func (MySqlTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MySqlTableDataset)(nil)).Elem()
}

func (o MySqlTableDatasetOutput) ToMySqlTableDatasetOutput() MySqlTableDatasetOutput {
	return o
}

func (o MySqlTableDatasetOutput) ToMySqlTableDatasetOutputWithContext(ctx context.Context) MySqlTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o MySqlTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MySqlTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o MySqlTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o MySqlTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v MySqlTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o MySqlTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v MySqlTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o MySqlTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v MySqlTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o MySqlTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o MySqlTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The MySQL table name. Type: string (or Expression with resultType string).
func (o MySqlTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'MySqlTable'.
func (o MySqlTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MySqlTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The MySQL table dataset.
type MySqlTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The MySQL table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'MySqlTable'.
	Type string `pulumi:"type"`
}

// The MySQL table dataset.
type MySqlTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (MySqlTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MySqlTableDatasetResponse)(nil)).Elem()
}

func (o MySqlTableDatasetResponseOutput) ToMySqlTableDatasetResponseOutput() MySqlTableDatasetResponseOutput {
	return o
}

func (o MySqlTableDatasetResponseOutput) ToMySqlTableDatasetResponseOutputWithContext(ctx context.Context) MySqlTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o MySqlTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v MySqlTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o MySqlTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o MySqlTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v MySqlTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o MySqlTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v MySqlTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o MySqlTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v MySqlTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o MySqlTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o MySqlTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The MySQL table name. Type: string (or Expression with resultType string).
func (o MySqlTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v MySqlTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'MySqlTable'.
func (o MySqlTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MySqlTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Netezza linked service.
type NetezzaLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReference `pulumi:"pwd"`
	// Type of linked service.
	// Expected value is 'Netezza'.
	Type string `pulumi:"type"`
}

// NetezzaLinkedServiceInput is an input type that accepts NetezzaLinkedServiceArgs and NetezzaLinkedServiceOutput values.
// You can construct a concrete instance of `NetezzaLinkedServiceInput` via:
//
//	NetezzaLinkedServiceArgs{...}
type NetezzaLinkedServiceInput interface {
	pulumi.Input

	ToNetezzaLinkedServiceOutput() NetezzaLinkedServiceOutput
	ToNetezzaLinkedServiceOutputWithContext(context.Context) NetezzaLinkedServiceOutput
}

// Netezza linked service.
type NetezzaLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd AzureKeyVaultSecretReferencePtrInput `pulumi:"pwd"`
	// Type of linked service.
	// Expected value is 'Netezza'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (NetezzaLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetezzaLinkedService)(nil)).Elem()
}

func (i NetezzaLinkedServiceArgs) ToNetezzaLinkedServiceOutput() NetezzaLinkedServiceOutput {
	return i.ToNetezzaLinkedServiceOutputWithContext(context.Background())
}

func (i NetezzaLinkedServiceArgs) ToNetezzaLinkedServiceOutputWithContext(ctx context.Context) NetezzaLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetezzaLinkedServiceOutput)
}

// Netezza linked service.
type NetezzaLinkedServiceOutput struct{ *pulumi.OutputState }

func (NetezzaLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetezzaLinkedService)(nil)).Elem()
}

func (o NetezzaLinkedServiceOutput) ToNetezzaLinkedServiceOutput() NetezzaLinkedServiceOutput {
	return o
}

func (o NetezzaLinkedServiceOutput) ToNetezzaLinkedServiceOutputWithContext(ctx context.Context) NetezzaLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o NetezzaLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v NetezzaLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o NetezzaLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v NetezzaLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o NetezzaLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v NetezzaLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o NetezzaLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetezzaLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o NetezzaLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetezzaLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o NetezzaLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v NetezzaLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o NetezzaLinkedServiceOutput) Pwd() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v NetezzaLinkedService) *AzureKeyVaultSecretReference { return v.Pwd }).(AzureKeyVaultSecretReferencePtrOutput)
}

// Type of linked service.
// Expected value is 'Netezza'.
func (o NetezzaLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NetezzaLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Netezza linked service.
type NetezzaLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReferenceResponse `pulumi:"pwd"`
	// Type of linked service.
	// Expected value is 'Netezza'.
	Type string `pulumi:"type"`
}

// Netezza linked service.
type NetezzaLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (NetezzaLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetezzaLinkedServiceResponse)(nil)).Elem()
}

func (o NetezzaLinkedServiceResponseOutput) ToNetezzaLinkedServiceResponseOutput() NetezzaLinkedServiceResponseOutput {
	return o
}

func (o NetezzaLinkedServiceResponseOutput) ToNetezzaLinkedServiceResponseOutputWithContext(ctx context.Context) NetezzaLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o NetezzaLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v NetezzaLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o NetezzaLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v NetezzaLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o NetezzaLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v NetezzaLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o NetezzaLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetezzaLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o NetezzaLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetezzaLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o NetezzaLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v NetezzaLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o NetezzaLinkedServiceResponseOutput) Pwd() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v NetezzaLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse { return v.Pwd }).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// Type of linked service.
// Expected value is 'Netezza'.
func (o NetezzaLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NetezzaLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The settings that will be leveraged for Netezza source partitioning.
type NetezzaPartitionSettings struct {
	// The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionColumnName interface{} `pulumi:"partitionColumnName"`
	// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionLowerBound interface{} `pulumi:"partitionLowerBound"`
	// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionUpperBound interface{} `pulumi:"partitionUpperBound"`
}

// NetezzaPartitionSettingsInput is an input type that accepts NetezzaPartitionSettingsArgs and NetezzaPartitionSettingsOutput values.
// You can construct a concrete instance of `NetezzaPartitionSettingsInput` via:
//
//	NetezzaPartitionSettingsArgs{...}
type NetezzaPartitionSettingsInput interface {
	pulumi.Input

	ToNetezzaPartitionSettingsOutput() NetezzaPartitionSettingsOutput
	ToNetezzaPartitionSettingsOutputWithContext(context.Context) NetezzaPartitionSettingsOutput
}

// The settings that will be leveraged for Netezza source partitioning.
type NetezzaPartitionSettingsArgs struct {
	// The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionColumnName pulumi.Input `pulumi:"partitionColumnName"`
	// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionLowerBound pulumi.Input `pulumi:"partitionLowerBound"`
	// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionUpperBound pulumi.Input `pulumi:"partitionUpperBound"`
}

func (NetezzaPartitionSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetezzaPartitionSettings)(nil)).Elem()
}

func (i NetezzaPartitionSettingsArgs) ToNetezzaPartitionSettingsOutput() NetezzaPartitionSettingsOutput {
	return i.ToNetezzaPartitionSettingsOutputWithContext(context.Background())
}

func (i NetezzaPartitionSettingsArgs) ToNetezzaPartitionSettingsOutputWithContext(ctx context.Context) NetezzaPartitionSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetezzaPartitionSettingsOutput)
}

func (i NetezzaPartitionSettingsArgs) ToNetezzaPartitionSettingsPtrOutput() NetezzaPartitionSettingsPtrOutput {
	return i.ToNetezzaPartitionSettingsPtrOutputWithContext(context.Background())
}

func (i NetezzaPartitionSettingsArgs) ToNetezzaPartitionSettingsPtrOutputWithContext(ctx context.Context) NetezzaPartitionSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetezzaPartitionSettingsOutput).ToNetezzaPartitionSettingsPtrOutputWithContext(ctx)
}

// NetezzaPartitionSettingsPtrInput is an input type that accepts NetezzaPartitionSettingsArgs, NetezzaPartitionSettingsPtr and NetezzaPartitionSettingsPtrOutput values.
// You can construct a concrete instance of `NetezzaPartitionSettingsPtrInput` via:
//
//	        NetezzaPartitionSettingsArgs{...}
//
//	or:
//
//	        nil
type NetezzaPartitionSettingsPtrInput interface {
	pulumi.Input

	ToNetezzaPartitionSettingsPtrOutput() NetezzaPartitionSettingsPtrOutput
	ToNetezzaPartitionSettingsPtrOutputWithContext(context.Context) NetezzaPartitionSettingsPtrOutput
}

type netezzaPartitionSettingsPtrType NetezzaPartitionSettingsArgs

func NetezzaPartitionSettingsPtr(v *NetezzaPartitionSettingsArgs) NetezzaPartitionSettingsPtrInput {
	return (*netezzaPartitionSettingsPtrType)(v)
}

func (*netezzaPartitionSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetezzaPartitionSettings)(nil)).Elem()
}

func (i *netezzaPartitionSettingsPtrType) ToNetezzaPartitionSettingsPtrOutput() NetezzaPartitionSettingsPtrOutput {
	return i.ToNetezzaPartitionSettingsPtrOutputWithContext(context.Background())
}

func (i *netezzaPartitionSettingsPtrType) ToNetezzaPartitionSettingsPtrOutputWithContext(ctx context.Context) NetezzaPartitionSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetezzaPartitionSettingsPtrOutput)
}

// The settings that will be leveraged for Netezza source partitioning.
type NetezzaPartitionSettingsOutput struct{ *pulumi.OutputState }

func (NetezzaPartitionSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetezzaPartitionSettings)(nil)).Elem()
}

func (o NetezzaPartitionSettingsOutput) ToNetezzaPartitionSettingsOutput() NetezzaPartitionSettingsOutput {
	return o
}

func (o NetezzaPartitionSettingsOutput) ToNetezzaPartitionSettingsOutputWithContext(ctx context.Context) NetezzaPartitionSettingsOutput {
	return o
}

func (o NetezzaPartitionSettingsOutput) ToNetezzaPartitionSettingsPtrOutput() NetezzaPartitionSettingsPtrOutput {
	return o.ToNetezzaPartitionSettingsPtrOutputWithContext(context.Background())
}

func (o NetezzaPartitionSettingsOutput) ToNetezzaPartitionSettingsPtrOutputWithContext(ctx context.Context) NetezzaPartitionSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetezzaPartitionSettings) *NetezzaPartitionSettings {
		return &v
	}).(NetezzaPartitionSettingsPtrOutput)
}

// The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o NetezzaPartitionSettingsOutput) PartitionColumnName() pulumi.AnyOutput {
	return o.ApplyT(func(v NetezzaPartitionSettings) interface{} { return v.PartitionColumnName }).(pulumi.AnyOutput)
}

// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o NetezzaPartitionSettingsOutput) PartitionLowerBound() pulumi.AnyOutput {
	return o.ApplyT(func(v NetezzaPartitionSettings) interface{} { return v.PartitionLowerBound }).(pulumi.AnyOutput)
}

// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o NetezzaPartitionSettingsOutput) PartitionUpperBound() pulumi.AnyOutput {
	return o.ApplyT(func(v NetezzaPartitionSettings) interface{} { return v.PartitionUpperBound }).(pulumi.AnyOutput)
}

type NetezzaPartitionSettingsPtrOutput struct{ *pulumi.OutputState }

func (NetezzaPartitionSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetezzaPartitionSettings)(nil)).Elem()
}

func (o NetezzaPartitionSettingsPtrOutput) ToNetezzaPartitionSettingsPtrOutput() NetezzaPartitionSettingsPtrOutput {
	return o
}

func (o NetezzaPartitionSettingsPtrOutput) ToNetezzaPartitionSettingsPtrOutputWithContext(ctx context.Context) NetezzaPartitionSettingsPtrOutput {
	return o
}

func (o NetezzaPartitionSettingsPtrOutput) Elem() NetezzaPartitionSettingsOutput {
	return o.ApplyT(func(v *NetezzaPartitionSettings) NetezzaPartitionSettings {
		if v != nil {
			return *v
		}
		var ret NetezzaPartitionSettings
		return ret
	}).(NetezzaPartitionSettingsOutput)
}

// The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o NetezzaPartitionSettingsPtrOutput) PartitionColumnName() pulumi.AnyOutput {
	return o.ApplyT(func(v *NetezzaPartitionSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionColumnName
	}).(pulumi.AnyOutput)
}

// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o NetezzaPartitionSettingsPtrOutput) PartitionLowerBound() pulumi.AnyOutput {
	return o.ApplyT(func(v *NetezzaPartitionSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionLowerBound
	}).(pulumi.AnyOutput)
}

// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o NetezzaPartitionSettingsPtrOutput) PartitionUpperBound() pulumi.AnyOutput {
	return o.ApplyT(func(v *NetezzaPartitionSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionUpperBound
	}).(pulumi.AnyOutput)
}

// The settings that will be leveraged for Netezza source partitioning.
type NetezzaPartitionSettingsResponse struct {
	// The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionColumnName interface{} `pulumi:"partitionColumnName"`
	// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionLowerBound interface{} `pulumi:"partitionLowerBound"`
	// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionUpperBound interface{} `pulumi:"partitionUpperBound"`
}

// The settings that will be leveraged for Netezza source partitioning.
type NetezzaPartitionSettingsResponseOutput struct{ *pulumi.OutputState }

func (NetezzaPartitionSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetezzaPartitionSettingsResponse)(nil)).Elem()
}

func (o NetezzaPartitionSettingsResponseOutput) ToNetezzaPartitionSettingsResponseOutput() NetezzaPartitionSettingsResponseOutput {
	return o
}

func (o NetezzaPartitionSettingsResponseOutput) ToNetezzaPartitionSettingsResponseOutputWithContext(ctx context.Context) NetezzaPartitionSettingsResponseOutput {
	return o
}

// The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o NetezzaPartitionSettingsResponseOutput) PartitionColumnName() pulumi.AnyOutput {
	return o.ApplyT(func(v NetezzaPartitionSettingsResponse) interface{} { return v.PartitionColumnName }).(pulumi.AnyOutput)
}

// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o NetezzaPartitionSettingsResponseOutput) PartitionLowerBound() pulumi.AnyOutput {
	return o.ApplyT(func(v NetezzaPartitionSettingsResponse) interface{} { return v.PartitionLowerBound }).(pulumi.AnyOutput)
}

// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o NetezzaPartitionSettingsResponseOutput) PartitionUpperBound() pulumi.AnyOutput {
	return o.ApplyT(func(v NetezzaPartitionSettingsResponse) interface{} { return v.PartitionUpperBound }).(pulumi.AnyOutput)
}

type NetezzaPartitionSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (NetezzaPartitionSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetezzaPartitionSettingsResponse)(nil)).Elem()
}

func (o NetezzaPartitionSettingsResponsePtrOutput) ToNetezzaPartitionSettingsResponsePtrOutput() NetezzaPartitionSettingsResponsePtrOutput {
	return o
}

func (o NetezzaPartitionSettingsResponsePtrOutput) ToNetezzaPartitionSettingsResponsePtrOutputWithContext(ctx context.Context) NetezzaPartitionSettingsResponsePtrOutput {
	return o
}

func (o NetezzaPartitionSettingsResponsePtrOutput) Elem() NetezzaPartitionSettingsResponseOutput {
	return o.ApplyT(func(v *NetezzaPartitionSettingsResponse) NetezzaPartitionSettingsResponse {
		if v != nil {
			return *v
		}
		var ret NetezzaPartitionSettingsResponse
		return ret
	}).(NetezzaPartitionSettingsResponseOutput)
}

// The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o NetezzaPartitionSettingsResponsePtrOutput) PartitionColumnName() pulumi.AnyOutput {
	return o.ApplyT(func(v *NetezzaPartitionSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionColumnName
	}).(pulumi.AnyOutput)
}

// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o NetezzaPartitionSettingsResponsePtrOutput) PartitionLowerBound() pulumi.AnyOutput {
	return o.ApplyT(func(v *NetezzaPartitionSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionLowerBound
	}).(pulumi.AnyOutput)
}

// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o NetezzaPartitionSettingsResponsePtrOutput) PartitionUpperBound() pulumi.AnyOutput {
	return o.ApplyT(func(v *NetezzaPartitionSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionUpperBound
	}).(pulumi.AnyOutput)
}

// A copy activity Netezza source.
type NetezzaSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for Netezza read in parallel. Possible values include: "None", "DataSlice", "DynamicRange".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for Netezza source partitioning.
	PartitionSettings *NetezzaPartitionSettings `pulumi:"partitionSettings"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'NetezzaSource'.
	Type string `pulumi:"type"`
}

// NetezzaSourceInput is an input type that accepts NetezzaSourceArgs and NetezzaSourceOutput values.
// You can construct a concrete instance of `NetezzaSourceInput` via:
//
//	NetezzaSourceArgs{...}
type NetezzaSourceInput interface {
	pulumi.Input

	ToNetezzaSourceOutput() NetezzaSourceOutput
	ToNetezzaSourceOutputWithContext(context.Context) NetezzaSourceOutput
}

// A copy activity Netezza source.
type NetezzaSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for Netezza read in parallel. Possible values include: "None", "DataSlice", "DynamicRange".
	PartitionOption pulumi.Input `pulumi:"partitionOption"`
	// The settings that will be leveraged for Netezza source partitioning.
	PartitionSettings NetezzaPartitionSettingsPtrInput `pulumi:"partitionSettings"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'NetezzaSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (NetezzaSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetezzaSource)(nil)).Elem()
}

func (i NetezzaSourceArgs) ToNetezzaSourceOutput() NetezzaSourceOutput {
	return i.ToNetezzaSourceOutputWithContext(context.Background())
}

func (i NetezzaSourceArgs) ToNetezzaSourceOutputWithContext(ctx context.Context) NetezzaSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetezzaSourceOutput)
}

// A copy activity Netezza source.
type NetezzaSourceOutput struct{ *pulumi.OutputState }

func (NetezzaSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetezzaSource)(nil)).Elem()
}

func (o NetezzaSourceOutput) ToNetezzaSourceOutput() NetezzaSourceOutput {
	return o
}

func (o NetezzaSourceOutput) ToNetezzaSourceOutputWithContext(ctx context.Context) NetezzaSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o NetezzaSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v NetezzaSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o NetezzaSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v NetezzaSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o NetezzaSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v NetezzaSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The partition mechanism that will be used for Netezza read in parallel. Possible values include: "None", "DataSlice", "DynamicRange".
func (o NetezzaSourceOutput) PartitionOption() pulumi.AnyOutput {
	return o.ApplyT(func(v NetezzaSource) interface{} { return v.PartitionOption }).(pulumi.AnyOutput)
}

// The settings that will be leveraged for Netezza source partitioning.
func (o NetezzaSourceOutput) PartitionSettings() NetezzaPartitionSettingsPtrOutput {
	return o.ApplyT(func(v NetezzaSource) *NetezzaPartitionSettings { return v.PartitionSettings }).(NetezzaPartitionSettingsPtrOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o NetezzaSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v NetezzaSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o NetezzaSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v NetezzaSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o NetezzaSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v NetezzaSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o NetezzaSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v NetezzaSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'NetezzaSource'.
func (o NetezzaSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NetezzaSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Netezza source.
type NetezzaSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for Netezza read in parallel. Possible values include: "None", "DataSlice", "DynamicRange".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for Netezza source partitioning.
	PartitionSettings *NetezzaPartitionSettingsResponse `pulumi:"partitionSettings"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'NetezzaSource'.
	Type string `pulumi:"type"`
}

// A copy activity Netezza source.
type NetezzaSourceResponseOutput struct{ *pulumi.OutputState }

func (NetezzaSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetezzaSourceResponse)(nil)).Elem()
}

func (o NetezzaSourceResponseOutput) ToNetezzaSourceResponseOutput() NetezzaSourceResponseOutput {
	return o
}

func (o NetezzaSourceResponseOutput) ToNetezzaSourceResponseOutputWithContext(ctx context.Context) NetezzaSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o NetezzaSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v NetezzaSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o NetezzaSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v NetezzaSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o NetezzaSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v NetezzaSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The partition mechanism that will be used for Netezza read in parallel. Possible values include: "None", "DataSlice", "DynamicRange".
func (o NetezzaSourceResponseOutput) PartitionOption() pulumi.AnyOutput {
	return o.ApplyT(func(v NetezzaSourceResponse) interface{} { return v.PartitionOption }).(pulumi.AnyOutput)
}

// The settings that will be leveraged for Netezza source partitioning.
func (o NetezzaSourceResponseOutput) PartitionSettings() NetezzaPartitionSettingsResponsePtrOutput {
	return o.ApplyT(func(v NetezzaSourceResponse) *NetezzaPartitionSettingsResponse { return v.PartitionSettings }).(NetezzaPartitionSettingsResponsePtrOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o NetezzaSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v NetezzaSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o NetezzaSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v NetezzaSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o NetezzaSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v NetezzaSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o NetezzaSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v NetezzaSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'NetezzaSource'.
func (o NetezzaSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NetezzaSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Netezza dataset.
type NetezzaTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Netezza. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'NetezzaTable'.
	Type string `pulumi:"type"`
}

// NetezzaTableDatasetInput is an input type that accepts NetezzaTableDatasetArgs and NetezzaTableDatasetOutput values.
// You can construct a concrete instance of `NetezzaTableDatasetInput` via:
//
//	NetezzaTableDatasetArgs{...}
type NetezzaTableDatasetInput interface {
	pulumi.Input

	ToNetezzaTableDatasetOutput() NetezzaTableDatasetOutput
	ToNetezzaTableDatasetOutputWithContext(context.Context) NetezzaTableDatasetOutput
}

// Netezza dataset.
type NetezzaTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Netezza. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'NetezzaTable'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (NetezzaTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetezzaTableDataset)(nil)).Elem()
}

func (i NetezzaTableDatasetArgs) ToNetezzaTableDatasetOutput() NetezzaTableDatasetOutput {
	return i.ToNetezzaTableDatasetOutputWithContext(context.Background())
}

func (i NetezzaTableDatasetArgs) ToNetezzaTableDatasetOutputWithContext(ctx context.Context) NetezzaTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetezzaTableDatasetOutput)
}

// Netezza dataset.
type NetezzaTableDatasetOutput struct{ *pulumi.OutputState }

func (NetezzaTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetezzaTableDataset)(nil)).Elem()
}

func (o NetezzaTableDatasetOutput) ToNetezzaTableDatasetOutput() NetezzaTableDatasetOutput {
	return o
}

func (o NetezzaTableDatasetOutput) ToNetezzaTableDatasetOutputWithContext(ctx context.Context) NetezzaTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o NetezzaTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v NetezzaTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o NetezzaTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetezzaTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o NetezzaTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v NetezzaTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o NetezzaTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v NetezzaTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o NetezzaTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v NetezzaTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o NetezzaTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v NetezzaTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o NetezzaTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v NetezzaTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Netezza. Type: string (or Expression with resultType string).
func (o NetezzaTableDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v NetezzaTableDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o NetezzaTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v NetezzaTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'NetezzaTable'.
func (o NetezzaTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NetezzaTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Netezza dataset.
type NetezzaTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Netezza. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'NetezzaTable'.
	Type string `pulumi:"type"`
}

// Netezza dataset.
type NetezzaTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (NetezzaTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetezzaTableDatasetResponse)(nil)).Elem()
}

func (o NetezzaTableDatasetResponseOutput) ToNetezzaTableDatasetResponseOutput() NetezzaTableDatasetResponseOutput {
	return o
}

func (o NetezzaTableDatasetResponseOutput) ToNetezzaTableDatasetResponseOutputWithContext(ctx context.Context) NetezzaTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o NetezzaTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v NetezzaTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o NetezzaTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetezzaTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o NetezzaTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v NetezzaTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o NetezzaTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v NetezzaTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o NetezzaTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v NetezzaTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o NetezzaTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v NetezzaTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o NetezzaTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v NetezzaTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Netezza. Type: string (or Expression with resultType string).
func (o NetezzaTableDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v NetezzaTableDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o NetezzaTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v NetezzaTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'NetezzaTable'.
func (o NetezzaTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NetezzaTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Notebook parameter.
type NotebookParameter struct {
	// Notebook parameter type.
	Type *string `pulumi:"type"`
	// Notebook parameter value. Type: string (or Expression with resultType string).
	Value interface{} `pulumi:"value"`
}

// NotebookParameterInput is an input type that accepts NotebookParameterArgs and NotebookParameterOutput values.
// You can construct a concrete instance of `NotebookParameterInput` via:
//
//	NotebookParameterArgs{...}
type NotebookParameterInput interface {
	pulumi.Input

	ToNotebookParameterOutput() NotebookParameterOutput
	ToNotebookParameterOutputWithContext(context.Context) NotebookParameterOutput
}

// Notebook parameter.
type NotebookParameterArgs struct {
	// Notebook parameter type.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Notebook parameter value. Type: string (or Expression with resultType string).
	Value pulumi.Input `pulumi:"value"`
}

func (NotebookParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotebookParameter)(nil)).Elem()
}

func (i NotebookParameterArgs) ToNotebookParameterOutput() NotebookParameterOutput {
	return i.ToNotebookParameterOutputWithContext(context.Background())
}

func (i NotebookParameterArgs) ToNotebookParameterOutputWithContext(ctx context.Context) NotebookParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotebookParameterOutput)
}

// NotebookParameterMapInput is an input type that accepts NotebookParameterMap and NotebookParameterMapOutput values.
// You can construct a concrete instance of `NotebookParameterMapInput` via:
//
//	NotebookParameterMap{ "key": NotebookParameterArgs{...} }
type NotebookParameterMapInput interface {
	pulumi.Input

	ToNotebookParameterMapOutput() NotebookParameterMapOutput
	ToNotebookParameterMapOutputWithContext(context.Context) NotebookParameterMapOutput
}

type NotebookParameterMap map[string]NotebookParameterInput

func (NotebookParameterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NotebookParameter)(nil)).Elem()
}

func (i NotebookParameterMap) ToNotebookParameterMapOutput() NotebookParameterMapOutput {
	return i.ToNotebookParameterMapOutputWithContext(context.Background())
}

func (i NotebookParameterMap) ToNotebookParameterMapOutputWithContext(ctx context.Context) NotebookParameterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotebookParameterMapOutput)
}

// Notebook parameter.
type NotebookParameterOutput struct{ *pulumi.OutputState }

func (NotebookParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotebookParameter)(nil)).Elem()
}

func (o NotebookParameterOutput) ToNotebookParameterOutput() NotebookParameterOutput {
	return o
}

func (o NotebookParameterOutput) ToNotebookParameterOutputWithContext(ctx context.Context) NotebookParameterOutput {
	return o
}

// Notebook parameter type.
func (o NotebookParameterOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotebookParameter) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Notebook parameter value. Type: string (or Expression with resultType string).
func (o NotebookParameterOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v NotebookParameter) interface{} { return v.Value }).(pulumi.AnyOutput)
}

type NotebookParameterMapOutput struct{ *pulumi.OutputState }

func (NotebookParameterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NotebookParameter)(nil)).Elem()
}

func (o NotebookParameterMapOutput) ToNotebookParameterMapOutput() NotebookParameterMapOutput {
	return o
}

func (o NotebookParameterMapOutput) ToNotebookParameterMapOutputWithContext(ctx context.Context) NotebookParameterMapOutput {
	return o
}

func (o NotebookParameterMapOutput) MapIndex(k pulumi.StringInput) NotebookParameterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NotebookParameter {
		return vs[0].(map[string]NotebookParameter)[vs[1].(string)]
	}).(NotebookParameterOutput)
}

// Notebook parameter.
type NotebookParameterResponse struct {
	// Notebook parameter type.
	Type *string `pulumi:"type"`
	// Notebook parameter value. Type: string (or Expression with resultType string).
	Value interface{} `pulumi:"value"`
}

// Notebook parameter.
type NotebookParameterResponseOutput struct{ *pulumi.OutputState }

func (NotebookParameterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotebookParameterResponse)(nil)).Elem()
}

func (o NotebookParameterResponseOutput) ToNotebookParameterResponseOutput() NotebookParameterResponseOutput {
	return o
}

func (o NotebookParameterResponseOutput) ToNotebookParameterResponseOutputWithContext(ctx context.Context) NotebookParameterResponseOutput {
	return o
}

// Notebook parameter type.
func (o NotebookParameterResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotebookParameterResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Notebook parameter value. Type: string (or Expression with resultType string).
func (o NotebookParameterResponseOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v NotebookParameterResponse) interface{} { return v.Value }).(pulumi.AnyOutput)
}

type NotebookParameterResponseMapOutput struct{ *pulumi.OutputState }

func (NotebookParameterResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NotebookParameterResponse)(nil)).Elem()
}

func (o NotebookParameterResponseMapOutput) ToNotebookParameterResponseMapOutput() NotebookParameterResponseMapOutput {
	return o
}

func (o NotebookParameterResponseMapOutput) ToNotebookParameterResponseMapOutputWithContext(ctx context.Context) NotebookParameterResponseMapOutput {
	return o
}

func (o NotebookParameterResponseMapOutput) MapIndex(k pulumi.StringInput) NotebookParameterResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NotebookParameterResponse {
		return vs[0].(map[string]NotebookParameterResponse)[vs[1].(string)]
	}).(NotebookParameterResponseOutput)
}

// Open Data Protocol (OData) linked service.
type ODataLinkedService struct {
	// Specify the resource you are requesting authorization to use Directory. Type: string (or Expression with resultType string).
	AadResourceId interface{} `pulumi:"aadResourceId"`
	// Specify the credential type (key or cert) is used for service principal.
	AadServicePrincipalCredentialType *string `pulumi:"aadServicePrincipalCredentialType"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The additional HTTP headers in the request to RESTful API used for authorization. Type: key value pairs (value should be string type).
	AuthHeaders interface{} `pulumi:"authHeaders"`
	// Type of authentication used to connect to the OData service.
	AuthenticationType *string `pulumi:"authenticationType"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password of the OData service.
	Password interface{} `pulumi:"password"`
	// Specify the base64 encoded certificate of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
	ServicePrincipalEmbeddedCert interface{} `pulumi:"servicePrincipalEmbeddedCert"`
	// Specify the password of your certificate if your certificate has a password and you are using AadServicePrincipal authentication. Type: string (or Expression with resultType string).
	ServicePrincipalEmbeddedCertPassword interface{} `pulumi:"servicePrincipalEmbeddedCertPassword"`
	// Specify the application id of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// Specify the secret of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Specify the tenant information (domain name or tenant ID) under which your application resides. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'OData'.
	Type string `pulumi:"type"`
	// The URL of the OData service endpoint. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// User name of the OData service. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// ODataLinkedServiceInput is an input type that accepts ODataLinkedServiceArgs and ODataLinkedServiceOutput values.
// You can construct a concrete instance of `ODataLinkedServiceInput` via:
//
//	ODataLinkedServiceArgs{...}
type ODataLinkedServiceInput interface {
	pulumi.Input

	ToODataLinkedServiceOutput() ODataLinkedServiceOutput
	ToODataLinkedServiceOutputWithContext(context.Context) ODataLinkedServiceOutput
}

// Open Data Protocol (OData) linked service.
type ODataLinkedServiceArgs struct {
	// Specify the resource you are requesting authorization to use Directory. Type: string (or Expression with resultType string).
	AadResourceId pulumi.Input `pulumi:"aadResourceId"`
	// Specify the credential type (key or cert) is used for service principal.
	AadServicePrincipalCredentialType pulumi.StringPtrInput `pulumi:"aadServicePrincipalCredentialType"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The additional HTTP headers in the request to RESTful API used for authorization. Type: key value pairs (value should be string type).
	AuthHeaders pulumi.Input `pulumi:"authHeaders"`
	// Type of authentication used to connect to the OData service.
	AuthenticationType pulumi.StringPtrInput `pulumi:"authenticationType"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType pulumi.Input `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password of the OData service.
	Password pulumi.Input `pulumi:"password"`
	// Specify the base64 encoded certificate of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
	ServicePrincipalEmbeddedCert pulumi.Input `pulumi:"servicePrincipalEmbeddedCert"`
	// Specify the password of your certificate if your certificate has a password and you are using AadServicePrincipal authentication. Type: string (or Expression with resultType string).
	ServicePrincipalEmbeddedCertPassword pulumi.Input `pulumi:"servicePrincipalEmbeddedCertPassword"`
	// Specify the application id of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// Specify the secret of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// Specify the tenant information (domain name or tenant ID) under which your application resides. Type: string (or Expression with resultType string).
	Tenant pulumi.Input `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'OData'.
	Type pulumi.StringInput `pulumi:"type"`
	// The URL of the OData service endpoint. Type: string (or Expression with resultType string).
	Url pulumi.Input `pulumi:"url"`
	// User name of the OData service. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (ODataLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ODataLinkedService)(nil)).Elem()
}

func (i ODataLinkedServiceArgs) ToODataLinkedServiceOutput() ODataLinkedServiceOutput {
	return i.ToODataLinkedServiceOutputWithContext(context.Background())
}

func (i ODataLinkedServiceArgs) ToODataLinkedServiceOutputWithContext(ctx context.Context) ODataLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ODataLinkedServiceOutput)
}

// Open Data Protocol (OData) linked service.
type ODataLinkedServiceOutput struct{ *pulumi.OutputState }

func (ODataLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ODataLinkedService)(nil)).Elem()
}

func (o ODataLinkedServiceOutput) ToODataLinkedServiceOutput() ODataLinkedServiceOutput {
	return o
}

func (o ODataLinkedServiceOutput) ToODataLinkedServiceOutputWithContext(ctx context.Context) ODataLinkedServiceOutput {
	return o
}

// Specify the resource you are requesting authorization to use Directory. Type: string (or Expression with resultType string).
func (o ODataLinkedServiceOutput) AadResourceId() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedService) interface{} { return v.AadResourceId }).(pulumi.AnyOutput)
}

// Specify the credential type (key or cert) is used for service principal.
func (o ODataLinkedServiceOutput) AadServicePrincipalCredentialType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ODataLinkedService) *string { return v.AadServicePrincipalCredentialType }).(pulumi.StringPtrOutput)
}

// List of tags that can be used for describing the linked service.
func (o ODataLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ODataLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The additional HTTP headers in the request to RESTful API used for authorization. Type: key value pairs (value should be string type).
func (o ODataLinkedServiceOutput) AuthHeaders() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedService) interface{} { return v.AuthHeaders }).(pulumi.AnyOutput)
}

// Type of authentication used to connect to the OData service.
func (o ODataLinkedServiceOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ODataLinkedService) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
func (o ODataLinkedServiceOutput) AzureCloudType() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedService) interface{} { return v.AzureCloudType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o ODataLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v ODataLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o ODataLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ODataLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o ODataLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ODataLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o ODataLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v ODataLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Password of the OData service.
func (o ODataLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Specify the base64 encoded certificate of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
func (o ODataLinkedServiceOutput) ServicePrincipalEmbeddedCert() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedService) interface{} { return v.ServicePrincipalEmbeddedCert }).(pulumi.AnyOutput)
}

// Specify the password of your certificate if your certificate has a password and you are using AadServicePrincipal authentication. Type: string (or Expression with resultType string).
func (o ODataLinkedServiceOutput) ServicePrincipalEmbeddedCertPassword() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedService) interface{} { return v.ServicePrincipalEmbeddedCertPassword }).(pulumi.AnyOutput)
}

// Specify the application id of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
func (o ODataLinkedServiceOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedService) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// Specify the secret of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
func (o ODataLinkedServiceOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedService) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// Specify the tenant information (domain name or tenant ID) under which your application resides. Type: string (or Expression with resultType string).
func (o ODataLinkedServiceOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedService) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'OData'.
func (o ODataLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ODataLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The URL of the OData service endpoint. Type: string (or Expression with resultType string).
func (o ODataLinkedServiceOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedService) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// User name of the OData service. Type: string (or Expression with resultType string).
func (o ODataLinkedServiceOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedService) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// Open Data Protocol (OData) linked service.
type ODataLinkedServiceResponse struct {
	// Specify the resource you are requesting authorization to use Directory. Type: string (or Expression with resultType string).
	AadResourceId interface{} `pulumi:"aadResourceId"`
	// Specify the credential type (key or cert) is used for service principal.
	AadServicePrincipalCredentialType *string `pulumi:"aadServicePrincipalCredentialType"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The additional HTTP headers in the request to RESTful API used for authorization. Type: key value pairs (value should be string type).
	AuthHeaders interface{} `pulumi:"authHeaders"`
	// Type of authentication used to connect to the OData service.
	AuthenticationType *string `pulumi:"authenticationType"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password of the OData service.
	Password interface{} `pulumi:"password"`
	// Specify the base64 encoded certificate of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
	ServicePrincipalEmbeddedCert interface{} `pulumi:"servicePrincipalEmbeddedCert"`
	// Specify the password of your certificate if your certificate has a password and you are using AadServicePrincipal authentication. Type: string (or Expression with resultType string).
	ServicePrincipalEmbeddedCertPassword interface{} `pulumi:"servicePrincipalEmbeddedCertPassword"`
	// Specify the application id of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// Specify the secret of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Specify the tenant information (domain name or tenant ID) under which your application resides. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'OData'.
	Type string `pulumi:"type"`
	// The URL of the OData service endpoint. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// User name of the OData service. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// Open Data Protocol (OData) linked service.
type ODataLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (ODataLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ODataLinkedServiceResponse)(nil)).Elem()
}

func (o ODataLinkedServiceResponseOutput) ToODataLinkedServiceResponseOutput() ODataLinkedServiceResponseOutput {
	return o
}

func (o ODataLinkedServiceResponseOutput) ToODataLinkedServiceResponseOutputWithContext(ctx context.Context) ODataLinkedServiceResponseOutput {
	return o
}

// Specify the resource you are requesting authorization to use Directory. Type: string (or Expression with resultType string).
func (o ODataLinkedServiceResponseOutput) AadResourceId() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) interface{} { return v.AadResourceId }).(pulumi.AnyOutput)
}

// Specify the credential type (key or cert) is used for service principal.
func (o ODataLinkedServiceResponseOutput) AadServicePrincipalCredentialType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) *string { return v.AadServicePrincipalCredentialType }).(pulumi.StringPtrOutput)
}

// List of tags that can be used for describing the linked service.
func (o ODataLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The additional HTTP headers in the request to RESTful API used for authorization. Type: key value pairs (value should be string type).
func (o ODataLinkedServiceResponseOutput) AuthHeaders() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) interface{} { return v.AuthHeaders }).(pulumi.AnyOutput)
}

// Type of authentication used to connect to the OData service.
func (o ODataLinkedServiceResponseOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
func (o ODataLinkedServiceResponseOutput) AzureCloudType() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) interface{} { return v.AzureCloudType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o ODataLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o ODataLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o ODataLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o ODataLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password of the OData service.
func (o ODataLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Specify the base64 encoded certificate of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
func (o ODataLinkedServiceResponseOutput) ServicePrincipalEmbeddedCert() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) interface{} { return v.ServicePrincipalEmbeddedCert }).(pulumi.AnyOutput)
}

// Specify the password of your certificate if your certificate has a password and you are using AadServicePrincipal authentication. Type: string (or Expression with resultType string).
func (o ODataLinkedServiceResponseOutput) ServicePrincipalEmbeddedCertPassword() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) interface{} { return v.ServicePrincipalEmbeddedCertPassword }).(pulumi.AnyOutput)
}

// Specify the application id of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
func (o ODataLinkedServiceResponseOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// Specify the secret of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
func (o ODataLinkedServiceResponseOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// Specify the tenant information (domain name or tenant ID) under which your application resides. Type: string (or Expression with resultType string).
func (o ODataLinkedServiceResponseOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'OData'.
func (o ODataLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The URL of the OData service endpoint. Type: string (or Expression with resultType string).
func (o ODataLinkedServiceResponseOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// User name of the OData service. Type: string (or Expression with resultType string).
func (o ODataLinkedServiceResponseOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataLinkedServiceResponse) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// The Open Data Protocol (OData) resource dataset.
type ODataResourceDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The OData resource path. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'ODataResource'.
	Type string `pulumi:"type"`
}

// ODataResourceDatasetInput is an input type that accepts ODataResourceDatasetArgs and ODataResourceDatasetOutput values.
// You can construct a concrete instance of `ODataResourceDatasetInput` via:
//
//	ODataResourceDatasetArgs{...}
type ODataResourceDatasetInput interface {
	pulumi.Input

	ToODataResourceDatasetOutput() ODataResourceDatasetOutput
	ToODataResourceDatasetOutputWithContext(context.Context) ODataResourceDatasetOutput
}

// The Open Data Protocol (OData) resource dataset.
type ODataResourceDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The OData resource path. Type: string (or Expression with resultType string).
	Path pulumi.Input `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'ODataResource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ODataResourceDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ODataResourceDataset)(nil)).Elem()
}

func (i ODataResourceDatasetArgs) ToODataResourceDatasetOutput() ODataResourceDatasetOutput {
	return i.ToODataResourceDatasetOutputWithContext(context.Background())
}

func (i ODataResourceDatasetArgs) ToODataResourceDatasetOutputWithContext(ctx context.Context) ODataResourceDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ODataResourceDatasetOutput)
}

// The Open Data Protocol (OData) resource dataset.
type ODataResourceDatasetOutput struct{ *pulumi.OutputState }

func (ODataResourceDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ODataResourceDataset)(nil)).Elem()
}

func (o ODataResourceDatasetOutput) ToODataResourceDatasetOutput() ODataResourceDatasetOutput {
	return o
}

func (o ODataResourceDatasetOutput) ToODataResourceDatasetOutputWithContext(ctx context.Context) ODataResourceDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ODataResourceDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ODataResourceDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o ODataResourceDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ODataResourceDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o ODataResourceDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v ODataResourceDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o ODataResourceDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v ODataResourceDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o ODataResourceDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v ODataResourceDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The OData resource path. Type: string (or Expression with resultType string).
func (o ODataResourceDatasetOutput) Path() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataResourceDataset) interface{} { return v.Path }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o ODataResourceDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataResourceDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ODataResourceDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataResourceDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'ODataResource'.
func (o ODataResourceDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ODataResourceDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Open Data Protocol (OData) resource dataset.
type ODataResourceDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The OData resource path. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'ODataResource'.
	Type string `pulumi:"type"`
}

// The Open Data Protocol (OData) resource dataset.
type ODataResourceDatasetResponseOutput struct{ *pulumi.OutputState }

func (ODataResourceDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ODataResourceDatasetResponse)(nil)).Elem()
}

func (o ODataResourceDatasetResponseOutput) ToODataResourceDatasetResponseOutput() ODataResourceDatasetResponseOutput {
	return o
}

func (o ODataResourceDatasetResponseOutput) ToODataResourceDatasetResponseOutputWithContext(ctx context.Context) ODataResourceDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ODataResourceDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ODataResourceDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o ODataResourceDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ODataResourceDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o ODataResourceDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v ODataResourceDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o ODataResourceDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v ODataResourceDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o ODataResourceDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ODataResourceDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The OData resource path. Type: string (or Expression with resultType string).
func (o ODataResourceDatasetResponseOutput) Path() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataResourceDatasetResponse) interface{} { return v.Path }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o ODataResourceDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataResourceDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ODataResourceDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataResourceDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'ODataResource'.
func (o ODataResourceDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ODataResourceDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity source for OData source.
type ODataSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// OData query. For example, "$top=1". Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ODataSource'.
	Type string `pulumi:"type"`
}

// ODataSourceInput is an input type that accepts ODataSourceArgs and ODataSourceOutput values.
// You can construct a concrete instance of `ODataSourceInput` via:
//
//	ODataSourceArgs{...}
type ODataSourceInput interface {
	pulumi.Input

	ToODataSourceOutput() ODataSourceOutput
	ToODataSourceOutputWithContext(context.Context) ODataSourceOutput
}

// A copy activity source for OData source.
type ODataSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout pulumi.Input `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// OData query. For example, "$top=1". Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ODataSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ODataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ODataSource)(nil)).Elem()
}

func (i ODataSourceArgs) ToODataSourceOutput() ODataSourceOutput {
	return i.ToODataSourceOutputWithContext(context.Background())
}

func (i ODataSourceArgs) ToODataSourceOutputWithContext(ctx context.Context) ODataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ODataSourceOutput)
}

// A copy activity source for OData source.
type ODataSourceOutput struct{ *pulumi.OutputState }

func (ODataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ODataSource)(nil)).Elem()
}

func (o ODataSourceOutput) ToODataSourceOutput() ODataSourceOutput {
	return o
}

func (o ODataSourceOutput) ToODataSourceOutputWithContext(ctx context.Context) ODataSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o ODataSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o ODataSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ODataSourceOutput) HttpRequestTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataSource) interface{} { return v.HttpRequestTimeout }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o ODataSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// OData query. For example, "$top=1". Type: string (or Expression with resultType string).
func (o ODataSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o ODataSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ODataSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'ODataSource'.
func (o ODataSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ODataSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity source for OData source.
type ODataSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// OData query. For example, "$top=1". Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ODataSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for OData source.
type ODataSourceResponseOutput struct{ *pulumi.OutputState }

func (ODataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ODataSourceResponse)(nil)).Elem()
}

func (o ODataSourceResponseOutput) ToODataSourceResponseOutput() ODataSourceResponseOutput {
	return o
}

func (o ODataSourceResponseOutput) ToODataSourceResponseOutputWithContext(ctx context.Context) ODataSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o ODataSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o ODataSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ODataSourceResponseOutput) HttpRequestTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataSourceResponse) interface{} { return v.HttpRequestTimeout }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o ODataSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// OData query. For example, "$top=1". Type: string (or Expression with resultType string).
func (o ODataSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o ODataSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ODataSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v ODataSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'ODataSource'.
func (o ODataSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ODataSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Open Database Connectivity (ODBC) linked service.
type OdbcLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication used to connect to the ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, or SecureString, or AzureKeyVaultSecretReference, or Expression with resultType string.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The access credential portion of the connection string specified in driver-specific property-value format.
	Credential interface{} `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Odbc'.
	Type string `pulumi:"type"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// OdbcLinkedServiceInput is an input type that accepts OdbcLinkedServiceArgs and OdbcLinkedServiceOutput values.
// You can construct a concrete instance of `OdbcLinkedServiceInput` via:
//
//	OdbcLinkedServiceArgs{...}
type OdbcLinkedServiceInput interface {
	pulumi.Input

	ToOdbcLinkedServiceOutput() OdbcLinkedServiceOutput
	ToOdbcLinkedServiceOutputWithContext(context.Context) OdbcLinkedServiceOutput
}

// Open Database Connectivity (ODBC) linked service.
type OdbcLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Type of authentication used to connect to the ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
	AuthenticationType pulumi.Input `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, or SecureString, or AzureKeyVaultSecretReference, or Expression with resultType string.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// The access credential portion of the connection string specified in driver-specific property-value format.
	Credential pulumi.Input `pulumi:"credential"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password for Basic authentication.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Odbc'.
	Type pulumi.StringInput `pulumi:"type"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (OdbcLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OdbcLinkedService)(nil)).Elem()
}

func (i OdbcLinkedServiceArgs) ToOdbcLinkedServiceOutput() OdbcLinkedServiceOutput {
	return i.ToOdbcLinkedServiceOutputWithContext(context.Background())
}

func (i OdbcLinkedServiceArgs) ToOdbcLinkedServiceOutputWithContext(ctx context.Context) OdbcLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OdbcLinkedServiceOutput)
}

// Open Database Connectivity (ODBC) linked service.
type OdbcLinkedServiceOutput struct{ *pulumi.OutputState }

func (OdbcLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OdbcLinkedService)(nil)).Elem()
}

func (o OdbcLinkedServiceOutput) ToOdbcLinkedServiceOutput() OdbcLinkedServiceOutput {
	return o
}

func (o OdbcLinkedServiceOutput) ToOdbcLinkedServiceOutputWithContext(ctx context.Context) OdbcLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o OdbcLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v OdbcLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Type of authentication used to connect to the ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
func (o OdbcLinkedServiceOutput) AuthenticationType() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcLinkedService) interface{} { return v.AuthenticationType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o OdbcLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v OdbcLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, or SecureString, or AzureKeyVaultSecretReference, or Expression with resultType string.
func (o OdbcLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// The access credential portion of the connection string specified in driver-specific property-value format.
func (o OdbcLinkedServiceOutput) Credential() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcLinkedService) interface{} { return v.Credential }).(pulumi.AnyOutput)
}

// Linked service description.
func (o OdbcLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OdbcLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o OdbcLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OdbcLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o OdbcLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v OdbcLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Password for Basic authentication.
func (o OdbcLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Odbc'.
func (o OdbcLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OdbcLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// User name for Basic authentication. Type: string (or Expression with resultType string).
func (o OdbcLinkedServiceOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcLinkedService) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// Open Database Connectivity (ODBC) linked service.
type OdbcLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication used to connect to the ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, or SecureString, or AzureKeyVaultSecretReference, or Expression with resultType string.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The access credential portion of the connection string specified in driver-specific property-value format.
	Credential interface{} `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Odbc'.
	Type string `pulumi:"type"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// Open Database Connectivity (ODBC) linked service.
type OdbcLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (OdbcLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OdbcLinkedServiceResponse)(nil)).Elem()
}

func (o OdbcLinkedServiceResponseOutput) ToOdbcLinkedServiceResponseOutput() OdbcLinkedServiceResponseOutput {
	return o
}

func (o OdbcLinkedServiceResponseOutput) ToOdbcLinkedServiceResponseOutputWithContext(ctx context.Context) OdbcLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o OdbcLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v OdbcLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Type of authentication used to connect to the ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string).
func (o OdbcLinkedServiceResponseOutput) AuthenticationType() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcLinkedServiceResponse) interface{} { return v.AuthenticationType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o OdbcLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v OdbcLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, or SecureString, or AzureKeyVaultSecretReference, or Expression with resultType string.
func (o OdbcLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// The access credential portion of the connection string specified in driver-specific property-value format.
func (o OdbcLinkedServiceResponseOutput) Credential() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcLinkedServiceResponse) interface{} { return v.Credential }).(pulumi.AnyOutput)
}

// Linked service description.
func (o OdbcLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OdbcLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o OdbcLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OdbcLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o OdbcLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v OdbcLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password for Basic authentication.
func (o OdbcLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Odbc'.
func (o OdbcLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OdbcLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User name for Basic authentication. Type: string (or Expression with resultType string).
func (o OdbcLinkedServiceResponseOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcLinkedServiceResponse) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// A copy activity ODBC sink.
type OdbcSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to execute before starting the copy. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'OdbcSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// OdbcSinkInput is an input type that accepts OdbcSinkArgs and OdbcSinkOutput values.
// You can construct a concrete instance of `OdbcSinkInput` via:
//
//	OdbcSinkArgs{...}
type OdbcSinkInput interface {
	pulumi.Input

	ToOdbcSinkOutput() OdbcSinkOutput
	ToOdbcSinkOutputWithContext(context.Context) OdbcSinkOutput
}

// A copy activity ODBC sink.
type OdbcSinkArgs struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// A query to execute before starting the copy. Type: string (or Expression with resultType string).
	PreCopyScript pulumi.Input `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount pulumi.Input `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait pulumi.Input `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'OdbcSink'.
	Type pulumi.StringInput `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize pulumi.Input `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout pulumi.Input `pulumi:"writeBatchTimeout"`
}

func (OdbcSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OdbcSink)(nil)).Elem()
}

func (i OdbcSinkArgs) ToOdbcSinkOutput() OdbcSinkOutput {
	return i.ToOdbcSinkOutputWithContext(context.Background())
}

func (i OdbcSinkArgs) ToOdbcSinkOutputWithContext(ctx context.Context) OdbcSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OdbcSinkOutput)
}

// A copy activity ODBC sink.
type OdbcSinkOutput struct{ *pulumi.OutputState }

func (OdbcSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OdbcSink)(nil)).Elem()
}

func (o OdbcSinkOutput) ToOdbcSinkOutput() OdbcSinkOutput {
	return o
}

func (o OdbcSinkOutput) ToOdbcSinkOutputWithContext(ctx context.Context) OdbcSinkOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o OdbcSinkOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcSink) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o OdbcSinkOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcSink) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to execute before starting the copy. Type: string (or Expression with resultType string).
func (o OdbcSinkOutput) PreCopyScript() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcSink) interface{} { return v.PreCopyScript }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o OdbcSinkOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcSink) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o OdbcSinkOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcSink) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'OdbcSink'.
func (o OdbcSinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OdbcSink) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o OdbcSinkOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcSink) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o OdbcSinkOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcSink) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity ODBC sink.
type OdbcSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to execute before starting the copy. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'OdbcSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity ODBC sink.
type OdbcSinkResponseOutput struct{ *pulumi.OutputState }

func (OdbcSinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OdbcSinkResponse)(nil)).Elem()
}

func (o OdbcSinkResponseOutput) ToOdbcSinkResponseOutput() OdbcSinkResponseOutput {
	return o
}

func (o OdbcSinkResponseOutput) ToOdbcSinkResponseOutputWithContext(ctx context.Context) OdbcSinkResponseOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o OdbcSinkResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcSinkResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o OdbcSinkResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcSinkResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to execute before starting the copy. Type: string (or Expression with resultType string).
func (o OdbcSinkResponseOutput) PreCopyScript() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcSinkResponse) interface{} { return v.PreCopyScript }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o OdbcSinkResponseOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcSinkResponse) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o OdbcSinkResponseOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcSinkResponse) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'OdbcSink'.
func (o OdbcSinkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OdbcSinkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o OdbcSinkResponseOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcSinkResponse) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o OdbcSinkResponseOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcSinkResponse) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity source for ODBC databases.
type OdbcSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'OdbcSource'.
	Type string `pulumi:"type"`
}

// OdbcSourceInput is an input type that accepts OdbcSourceArgs and OdbcSourceOutput values.
// You can construct a concrete instance of `OdbcSourceInput` via:
//
//	OdbcSourceArgs{...}
type OdbcSourceInput interface {
	pulumi.Input

	ToOdbcSourceOutput() OdbcSourceOutput
	ToOdbcSourceOutputWithContext(context.Context) OdbcSourceOutput
}

// A copy activity source for ODBC databases.
type OdbcSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'OdbcSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (OdbcSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OdbcSource)(nil)).Elem()
}

func (i OdbcSourceArgs) ToOdbcSourceOutput() OdbcSourceOutput {
	return i.ToOdbcSourceOutputWithContext(context.Background())
}

func (i OdbcSourceArgs) ToOdbcSourceOutputWithContext(ctx context.Context) OdbcSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OdbcSourceOutput)
}

// A copy activity source for ODBC databases.
type OdbcSourceOutput struct{ *pulumi.OutputState }

func (OdbcSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OdbcSource)(nil)).Elem()
}

func (o OdbcSourceOutput) ToOdbcSourceOutput() OdbcSourceOutput {
	return o
}

func (o OdbcSourceOutput) ToOdbcSourceOutputWithContext(ctx context.Context) OdbcSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o OdbcSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o OdbcSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o OdbcSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Database query. Type: string (or Expression with resultType string).
func (o OdbcSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o OdbcSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o OdbcSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o OdbcSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'OdbcSource'.
func (o OdbcSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OdbcSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity source for ODBC databases.
type OdbcSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'OdbcSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for ODBC databases.
type OdbcSourceResponseOutput struct{ *pulumi.OutputState }

func (OdbcSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OdbcSourceResponse)(nil)).Elem()
}

func (o OdbcSourceResponseOutput) ToOdbcSourceResponseOutput() OdbcSourceResponseOutput {
	return o
}

func (o OdbcSourceResponseOutput) ToOdbcSourceResponseOutputWithContext(ctx context.Context) OdbcSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o OdbcSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o OdbcSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o OdbcSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Database query. Type: string (or Expression with resultType string).
func (o OdbcSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o OdbcSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o OdbcSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o OdbcSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'OdbcSource'.
func (o OdbcSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OdbcSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The ODBC table dataset.
type OdbcTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The ODBC table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'OdbcTable'.
	Type string `pulumi:"type"`
}

// OdbcTableDatasetInput is an input type that accepts OdbcTableDatasetArgs and OdbcTableDatasetOutput values.
// You can construct a concrete instance of `OdbcTableDatasetInput` via:
//
//	OdbcTableDatasetArgs{...}
type OdbcTableDatasetInput interface {
	pulumi.Input

	ToOdbcTableDatasetOutput() OdbcTableDatasetOutput
	ToOdbcTableDatasetOutputWithContext(context.Context) OdbcTableDatasetOutput
}

// The ODBC table dataset.
type OdbcTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The ODBC table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'OdbcTable'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (OdbcTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OdbcTableDataset)(nil)).Elem()
}

func (i OdbcTableDatasetArgs) ToOdbcTableDatasetOutput() OdbcTableDatasetOutput {
	return i.ToOdbcTableDatasetOutputWithContext(context.Background())
}

func (i OdbcTableDatasetArgs) ToOdbcTableDatasetOutputWithContext(ctx context.Context) OdbcTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OdbcTableDatasetOutput)
}

// The ODBC table dataset.
type OdbcTableDatasetOutput struct{ *pulumi.OutputState }

func (OdbcTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OdbcTableDataset)(nil)).Elem()
}

func (o OdbcTableDatasetOutput) ToOdbcTableDatasetOutput() OdbcTableDatasetOutput {
	return o
}

func (o OdbcTableDatasetOutput) ToOdbcTableDatasetOutputWithContext(ctx context.Context) OdbcTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o OdbcTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v OdbcTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o OdbcTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OdbcTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o OdbcTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v OdbcTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o OdbcTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v OdbcTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o OdbcTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v OdbcTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o OdbcTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o OdbcTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The ODBC table name. Type: string (or Expression with resultType string).
func (o OdbcTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'OdbcTable'.
func (o OdbcTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OdbcTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The ODBC table dataset.
type OdbcTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The ODBC table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'OdbcTable'.
	Type string `pulumi:"type"`
}

// The ODBC table dataset.
type OdbcTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (OdbcTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OdbcTableDatasetResponse)(nil)).Elem()
}

func (o OdbcTableDatasetResponseOutput) ToOdbcTableDatasetResponseOutput() OdbcTableDatasetResponseOutput {
	return o
}

func (o OdbcTableDatasetResponseOutput) ToOdbcTableDatasetResponseOutputWithContext(ctx context.Context) OdbcTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o OdbcTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v OdbcTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o OdbcTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OdbcTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o OdbcTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v OdbcTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o OdbcTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v OdbcTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o OdbcTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v OdbcTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o OdbcTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o OdbcTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The ODBC table name. Type: string (or Expression with resultType string).
func (o OdbcTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v OdbcTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'OdbcTable'.
func (o OdbcTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OdbcTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Office365 account.
type Office365Dataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// A predicate expression that can be used to filter the specific rows to extract from Office 365. Type: string (or Expression with resultType string).
	Predicate interface{} `pulumi:"predicate"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Name of the dataset to extract from Office 365. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'Office365Table'.
	Type string `pulumi:"type"`
}

// Office365DatasetInput is an input type that accepts Office365DatasetArgs and Office365DatasetOutput values.
// You can construct a concrete instance of `Office365DatasetInput` via:
//
//	Office365DatasetArgs{...}
type Office365DatasetInput interface {
	pulumi.Input

	ToOffice365DatasetOutput() Office365DatasetOutput
	ToOffice365DatasetOutputWithContext(context.Context) Office365DatasetOutput
}

// The Office365 account.
type Office365DatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// A predicate expression that can be used to filter the specific rows to extract from Office 365. Type: string (or Expression with resultType string).
	Predicate pulumi.Input `pulumi:"predicate"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Name of the dataset to extract from Office 365. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'Office365Table'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (Office365DatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Office365Dataset)(nil)).Elem()
}

func (i Office365DatasetArgs) ToOffice365DatasetOutput() Office365DatasetOutput {
	return i.ToOffice365DatasetOutputWithContext(context.Background())
}

func (i Office365DatasetArgs) ToOffice365DatasetOutputWithContext(ctx context.Context) Office365DatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Office365DatasetOutput)
}

// The Office365 account.
type Office365DatasetOutput struct{ *pulumi.OutputState }

func (Office365DatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Office365Dataset)(nil)).Elem()
}

func (o Office365DatasetOutput) ToOffice365DatasetOutput() Office365DatasetOutput {
	return o
}

func (o Office365DatasetOutput) ToOffice365DatasetOutputWithContext(ctx context.Context) Office365DatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o Office365DatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v Office365Dataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o Office365DatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Office365Dataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o Office365DatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v Office365Dataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o Office365DatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v Office365Dataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o Office365DatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v Office365Dataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// A predicate expression that can be used to filter the specific rows to extract from Office 365. Type: string (or Expression with resultType string).
func (o Office365DatasetOutput) Predicate() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365Dataset) interface{} { return v.Predicate }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o Office365DatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365Dataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o Office365DatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365Dataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Name of the dataset to extract from Office 365. Type: string (or Expression with resultType string).
func (o Office365DatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365Dataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'Office365Table'.
func (o Office365DatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Office365Dataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Office365 account.
type Office365DatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// A predicate expression that can be used to filter the specific rows to extract from Office 365. Type: string (or Expression with resultType string).
	Predicate interface{} `pulumi:"predicate"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Name of the dataset to extract from Office 365. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'Office365Table'.
	Type string `pulumi:"type"`
}

// The Office365 account.
type Office365DatasetResponseOutput struct{ *pulumi.OutputState }

func (Office365DatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Office365DatasetResponse)(nil)).Elem()
}

func (o Office365DatasetResponseOutput) ToOffice365DatasetResponseOutput() Office365DatasetResponseOutput {
	return o
}

func (o Office365DatasetResponseOutput) ToOffice365DatasetResponseOutputWithContext(ctx context.Context) Office365DatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o Office365DatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v Office365DatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o Office365DatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Office365DatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o Office365DatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v Office365DatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o Office365DatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v Office365DatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o Office365DatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v Office365DatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// A predicate expression that can be used to filter the specific rows to extract from Office 365. Type: string (or Expression with resultType string).
func (o Office365DatasetResponseOutput) Predicate() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365DatasetResponse) interface{} { return v.Predicate }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o Office365DatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365DatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o Office365DatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365DatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Name of the dataset to extract from Office 365. Type: string (or Expression with resultType string).
func (o Office365DatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365DatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'Office365Table'.
func (o Office365DatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Office365DatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Office365 linked service.
type Office365LinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Azure tenant ID to which the Office 365 account belongs. Type: string (or Expression with resultType string).
	Office365TenantId interface{} `pulumi:"office365TenantId"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Specify the application's client ID. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// Specify the application's key.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Specify the tenant information under which your Azure AD web application resides. Type: string (or Expression with resultType string).
	ServicePrincipalTenantId interface{} `pulumi:"servicePrincipalTenantId"`
	// Type of linked service.
	// Expected value is 'Office365'.
	Type string `pulumi:"type"`
}

// Office365LinkedServiceInput is an input type that accepts Office365LinkedServiceArgs and Office365LinkedServiceOutput values.
// You can construct a concrete instance of `Office365LinkedServiceInput` via:
//
//	Office365LinkedServiceArgs{...}
type Office365LinkedServiceInput interface {
	pulumi.Input

	ToOffice365LinkedServiceOutput() Office365LinkedServiceOutput
	ToOffice365LinkedServiceOutputWithContext(context.Context) Office365LinkedServiceOutput
}

// Office365 linked service.
type Office365LinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Azure tenant ID to which the Office 365 account belongs. Type: string (or Expression with resultType string).
	Office365TenantId pulumi.Input `pulumi:"office365TenantId"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Specify the application's client ID. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// Specify the application's key.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// Specify the tenant information under which your Azure AD web application resides. Type: string (or Expression with resultType string).
	ServicePrincipalTenantId pulumi.Input `pulumi:"servicePrincipalTenantId"`
	// Type of linked service.
	// Expected value is 'Office365'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (Office365LinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Office365LinkedService)(nil)).Elem()
}

func (i Office365LinkedServiceArgs) ToOffice365LinkedServiceOutput() Office365LinkedServiceOutput {
	return i.ToOffice365LinkedServiceOutputWithContext(context.Background())
}

func (i Office365LinkedServiceArgs) ToOffice365LinkedServiceOutputWithContext(ctx context.Context) Office365LinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Office365LinkedServiceOutput)
}

// Office365 linked service.
type Office365LinkedServiceOutput struct{ *pulumi.OutputState }

func (Office365LinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Office365LinkedService)(nil)).Elem()
}

func (o Office365LinkedServiceOutput) ToOffice365LinkedServiceOutput() Office365LinkedServiceOutput {
	return o
}

func (o Office365LinkedServiceOutput) ToOffice365LinkedServiceOutputWithContext(ctx context.Context) Office365LinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o Office365LinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v Office365LinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o Office365LinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v Office365LinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o Office365LinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Office365LinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o Office365LinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Office365LinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Azure tenant ID to which the Office 365 account belongs. Type: string (or Expression with resultType string).
func (o Office365LinkedServiceOutput) Office365TenantId() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365LinkedService) interface{} { return v.Office365TenantId }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o Office365LinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v Office365LinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Specify the application's client ID. Type: string (or Expression with resultType string).
func (o Office365LinkedServiceOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365LinkedService) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// Specify the application's key.
func (o Office365LinkedServiceOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365LinkedService) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// Specify the tenant information under which your Azure AD web application resides. Type: string (or Expression with resultType string).
func (o Office365LinkedServiceOutput) ServicePrincipalTenantId() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365LinkedService) interface{} { return v.ServicePrincipalTenantId }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Office365'.
func (o Office365LinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Office365LinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Office365 linked service.
type Office365LinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Azure tenant ID to which the Office 365 account belongs. Type: string (or Expression with resultType string).
	Office365TenantId interface{} `pulumi:"office365TenantId"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Specify the application's client ID. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// Specify the application's key.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Specify the tenant information under which your Azure AD web application resides. Type: string (or Expression with resultType string).
	ServicePrincipalTenantId interface{} `pulumi:"servicePrincipalTenantId"`
	// Type of linked service.
	// Expected value is 'Office365'.
	Type string `pulumi:"type"`
}

// Office365 linked service.
type Office365LinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (Office365LinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Office365LinkedServiceResponse)(nil)).Elem()
}

func (o Office365LinkedServiceResponseOutput) ToOffice365LinkedServiceResponseOutput() Office365LinkedServiceResponseOutput {
	return o
}

func (o Office365LinkedServiceResponseOutput) ToOffice365LinkedServiceResponseOutputWithContext(ctx context.Context) Office365LinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o Office365LinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v Office365LinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o Office365LinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v Office365LinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o Office365LinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Office365LinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o Office365LinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Office365LinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Azure tenant ID to which the Office 365 account belongs. Type: string (or Expression with resultType string).
func (o Office365LinkedServiceResponseOutput) Office365TenantId() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365LinkedServiceResponse) interface{} { return v.Office365TenantId }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o Office365LinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v Office365LinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Specify the application's client ID. Type: string (or Expression with resultType string).
func (o Office365LinkedServiceResponseOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365LinkedServiceResponse) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// Specify the application's key.
func (o Office365LinkedServiceResponseOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365LinkedServiceResponse) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// Specify the tenant information under which your Azure AD web application resides. Type: string (or Expression with resultType string).
func (o Office365LinkedServiceResponseOutput) ServicePrincipalTenantId() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365LinkedServiceResponse) interface{} { return v.ServicePrincipalTenantId }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Office365'.
func (o Office365LinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Office365LinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity source for an Office 365 service.
type Office365Source struct {
	// The groups containing all the users. Type: array of strings (or Expression with resultType array of strings).
	AllowedGroups interface{} `pulumi:"allowedGroups"`
	// The Column to apply the <paramref name="StartTime"/> and <paramref name="EndTime"/>. Type: string (or Expression with resultType string).
	DateFilterColumn interface{} `pulumi:"dateFilterColumn"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// End time of the requested range for this dataset. Type: string (or Expression with resultType string).
	EndTime interface{} `pulumi:"endTime"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The columns to be read out from the Office 365 table. Type: array of objects (or Expression with resultType array of objects). itemType: OutputColumn. Example: [ { "name": "Id" }, { "name": "CreatedDateTime" } ]
	OutputColumns interface{} `pulumi:"outputColumns"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Start time of the requested range for this dataset. Type: string (or Expression with resultType string).
	StartTime interface{} `pulumi:"startTime"`
	// Copy source type.
	// Expected value is 'Office365Source'.
	Type string `pulumi:"type"`
	// The user scope uri. Type: string (or Expression with resultType string).
	UserScopeFilterUri interface{} `pulumi:"userScopeFilterUri"`
}

// Office365SourceInput is an input type that accepts Office365SourceArgs and Office365SourceOutput values.
// You can construct a concrete instance of `Office365SourceInput` via:
//
//	Office365SourceArgs{...}
type Office365SourceInput interface {
	pulumi.Input

	ToOffice365SourceOutput() Office365SourceOutput
	ToOffice365SourceOutputWithContext(context.Context) Office365SourceOutput
}

// A copy activity source for an Office 365 service.
type Office365SourceArgs struct {
	// The groups containing all the users. Type: array of strings (or Expression with resultType array of strings).
	AllowedGroups pulumi.Input `pulumi:"allowedGroups"`
	// The Column to apply the <paramref name="StartTime"/> and <paramref name="EndTime"/>. Type: string (or Expression with resultType string).
	DateFilterColumn pulumi.Input `pulumi:"dateFilterColumn"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// End time of the requested range for this dataset. Type: string (or Expression with resultType string).
	EndTime pulumi.Input `pulumi:"endTime"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// The columns to be read out from the Office 365 table. Type: array of objects (or Expression with resultType array of objects). itemType: OutputColumn. Example: [ { "name": "Id" }, { "name": "CreatedDateTime" } ]
	OutputColumns pulumi.Input `pulumi:"outputColumns"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Start time of the requested range for this dataset. Type: string (or Expression with resultType string).
	StartTime pulumi.Input `pulumi:"startTime"`
	// Copy source type.
	// Expected value is 'Office365Source'.
	Type pulumi.StringInput `pulumi:"type"`
	// The user scope uri. Type: string (or Expression with resultType string).
	UserScopeFilterUri pulumi.Input `pulumi:"userScopeFilterUri"`
}

func (Office365SourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Office365Source)(nil)).Elem()
}

func (i Office365SourceArgs) ToOffice365SourceOutput() Office365SourceOutput {
	return i.ToOffice365SourceOutputWithContext(context.Background())
}

func (i Office365SourceArgs) ToOffice365SourceOutputWithContext(ctx context.Context) Office365SourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Office365SourceOutput)
}

// A copy activity source for an Office 365 service.
type Office365SourceOutput struct{ *pulumi.OutputState }

func (Office365SourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Office365Source)(nil)).Elem()
}

func (o Office365SourceOutput) ToOffice365SourceOutput() Office365SourceOutput {
	return o
}

func (o Office365SourceOutput) ToOffice365SourceOutputWithContext(ctx context.Context) Office365SourceOutput {
	return o
}

// The groups containing all the users. Type: array of strings (or Expression with resultType array of strings).
func (o Office365SourceOutput) AllowedGroups() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365Source) interface{} { return v.AllowedGroups }).(pulumi.AnyOutput)
}

// The Column to apply the <paramref name="StartTime"/> and <paramref name="EndTime"/>. Type: string (or Expression with resultType string).
func (o Office365SourceOutput) DateFilterColumn() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365Source) interface{} { return v.DateFilterColumn }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o Office365SourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365Source) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// End time of the requested range for this dataset. Type: string (or Expression with resultType string).
func (o Office365SourceOutput) EndTime() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365Source) interface{} { return v.EndTime }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o Office365SourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365Source) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The columns to be read out from the Office 365 table. Type: array of objects (or Expression with resultType array of objects). itemType: OutputColumn. Example: [ { "name": "Id" }, { "name": "CreatedDateTime" } ]
func (o Office365SourceOutput) OutputColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365Source) interface{} { return v.OutputColumns }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o Office365SourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365Source) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o Office365SourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365Source) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Start time of the requested range for this dataset. Type: string (or Expression with resultType string).
func (o Office365SourceOutput) StartTime() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365Source) interface{} { return v.StartTime }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'Office365Source'.
func (o Office365SourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Office365Source) string { return v.Type }).(pulumi.StringOutput)
}

// The user scope uri. Type: string (or Expression with resultType string).
func (o Office365SourceOutput) UserScopeFilterUri() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365Source) interface{} { return v.UserScopeFilterUri }).(pulumi.AnyOutput)
}

// A copy activity source for an Office 365 service.
type Office365SourceResponse struct {
	// The groups containing all the users. Type: array of strings (or Expression with resultType array of strings).
	AllowedGroups interface{} `pulumi:"allowedGroups"`
	// The Column to apply the <paramref name="StartTime"/> and <paramref name="EndTime"/>. Type: string (or Expression with resultType string).
	DateFilterColumn interface{} `pulumi:"dateFilterColumn"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// End time of the requested range for this dataset. Type: string (or Expression with resultType string).
	EndTime interface{} `pulumi:"endTime"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The columns to be read out from the Office 365 table. Type: array of objects (or Expression with resultType array of objects). itemType: OutputColumn. Example: [ { "name": "Id" }, { "name": "CreatedDateTime" } ]
	OutputColumns interface{} `pulumi:"outputColumns"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Start time of the requested range for this dataset. Type: string (or Expression with resultType string).
	StartTime interface{} `pulumi:"startTime"`
	// Copy source type.
	// Expected value is 'Office365Source'.
	Type string `pulumi:"type"`
	// The user scope uri. Type: string (or Expression with resultType string).
	UserScopeFilterUri interface{} `pulumi:"userScopeFilterUri"`
}

// A copy activity source for an Office 365 service.
type Office365SourceResponseOutput struct{ *pulumi.OutputState }

func (Office365SourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Office365SourceResponse)(nil)).Elem()
}

func (o Office365SourceResponseOutput) ToOffice365SourceResponseOutput() Office365SourceResponseOutput {
	return o
}

func (o Office365SourceResponseOutput) ToOffice365SourceResponseOutputWithContext(ctx context.Context) Office365SourceResponseOutput {
	return o
}

// The groups containing all the users. Type: array of strings (or Expression with resultType array of strings).
func (o Office365SourceResponseOutput) AllowedGroups() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365SourceResponse) interface{} { return v.AllowedGroups }).(pulumi.AnyOutput)
}

// The Column to apply the <paramref name="StartTime"/> and <paramref name="EndTime"/>. Type: string (or Expression with resultType string).
func (o Office365SourceResponseOutput) DateFilterColumn() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365SourceResponse) interface{} { return v.DateFilterColumn }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o Office365SourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365SourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// End time of the requested range for this dataset. Type: string (or Expression with resultType string).
func (o Office365SourceResponseOutput) EndTime() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365SourceResponse) interface{} { return v.EndTime }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o Office365SourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365SourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The columns to be read out from the Office 365 table. Type: array of objects (or Expression with resultType array of objects). itemType: OutputColumn. Example: [ { "name": "Id" }, { "name": "CreatedDateTime" } ]
func (o Office365SourceResponseOutput) OutputColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365SourceResponse) interface{} { return v.OutputColumns }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o Office365SourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365SourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o Office365SourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365SourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Start time of the requested range for this dataset. Type: string (or Expression with resultType string).
func (o Office365SourceResponseOutput) StartTime() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365SourceResponse) interface{} { return v.StartTime }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'Office365Source'.
func (o Office365SourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Office365SourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The user scope uri. Type: string (or Expression with resultType string).
func (o Office365SourceResponseOutput) UserScopeFilterUri() pulumi.AnyOutput {
	return o.ApplyT(func(v Office365SourceResponse) interface{} { return v.UserScopeFilterUri }).(pulumi.AnyOutput)
}

// Linked service for Oracle Cloud Storage.
type OracleCloudStorageLinkedService struct {
	// The access key identifier of the Oracle Cloud Storage Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
	AccessKeyId interface{} `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The secret access key of the Oracle Cloud Storage Identity and Access Management (IAM) user.
	SecretAccessKey interface{} `pulumi:"secretAccessKey"`
	// This value specifies the endpoint to access with the Oracle Cloud Storage Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
	ServiceUrl interface{} `pulumi:"serviceUrl"`
	// Type of linked service.
	// Expected value is 'OracleCloudStorage'.
	Type string `pulumi:"type"`
}

// OracleCloudStorageLinkedServiceInput is an input type that accepts OracleCloudStorageLinkedServiceArgs and OracleCloudStorageLinkedServiceOutput values.
// You can construct a concrete instance of `OracleCloudStorageLinkedServiceInput` via:
//
//	OracleCloudStorageLinkedServiceArgs{...}
type OracleCloudStorageLinkedServiceInput interface {
	pulumi.Input

	ToOracleCloudStorageLinkedServiceOutput() OracleCloudStorageLinkedServiceOutput
	ToOracleCloudStorageLinkedServiceOutputWithContext(context.Context) OracleCloudStorageLinkedServiceOutput
}

// Linked service for Oracle Cloud Storage.
type OracleCloudStorageLinkedServiceArgs struct {
	// The access key identifier of the Oracle Cloud Storage Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
	AccessKeyId pulumi.Input `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The secret access key of the Oracle Cloud Storage Identity and Access Management (IAM) user.
	SecretAccessKey pulumi.Input `pulumi:"secretAccessKey"`
	// This value specifies the endpoint to access with the Oracle Cloud Storage Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
	ServiceUrl pulumi.Input `pulumi:"serviceUrl"`
	// Type of linked service.
	// Expected value is 'OracleCloudStorage'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (OracleCloudStorageLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleCloudStorageLinkedService)(nil)).Elem()
}

func (i OracleCloudStorageLinkedServiceArgs) ToOracleCloudStorageLinkedServiceOutput() OracleCloudStorageLinkedServiceOutput {
	return i.ToOracleCloudStorageLinkedServiceOutputWithContext(context.Background())
}

func (i OracleCloudStorageLinkedServiceArgs) ToOracleCloudStorageLinkedServiceOutputWithContext(ctx context.Context) OracleCloudStorageLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleCloudStorageLinkedServiceOutput)
}

// Linked service for Oracle Cloud Storage.
type OracleCloudStorageLinkedServiceOutput struct{ *pulumi.OutputState }

func (OracleCloudStorageLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleCloudStorageLinkedService)(nil)).Elem()
}

func (o OracleCloudStorageLinkedServiceOutput) ToOracleCloudStorageLinkedServiceOutput() OracleCloudStorageLinkedServiceOutput {
	return o
}

func (o OracleCloudStorageLinkedServiceOutput) ToOracleCloudStorageLinkedServiceOutputWithContext(ctx context.Context) OracleCloudStorageLinkedServiceOutput {
	return o
}

// The access key identifier of the Oracle Cloud Storage Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
func (o OracleCloudStorageLinkedServiceOutput) AccessKeyId() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleCloudStorageLinkedService) interface{} { return v.AccessKeyId }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o OracleCloudStorageLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v OracleCloudStorageLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o OracleCloudStorageLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v OracleCloudStorageLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o OracleCloudStorageLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleCloudStorageLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o OracleCloudStorageLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleCloudStorageLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o OracleCloudStorageLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v OracleCloudStorageLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The secret access key of the Oracle Cloud Storage Identity and Access Management (IAM) user.
func (o OracleCloudStorageLinkedServiceOutput) SecretAccessKey() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleCloudStorageLinkedService) interface{} { return v.SecretAccessKey }).(pulumi.AnyOutput)
}

// This value specifies the endpoint to access with the Oracle Cloud Storage Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
func (o OracleCloudStorageLinkedServiceOutput) ServiceUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleCloudStorageLinkedService) interface{} { return v.ServiceUrl }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'OracleCloudStorage'.
func (o OracleCloudStorageLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OracleCloudStorageLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for Oracle Cloud Storage.
type OracleCloudStorageLinkedServiceResponse struct {
	// The access key identifier of the Oracle Cloud Storage Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
	AccessKeyId interface{} `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The secret access key of the Oracle Cloud Storage Identity and Access Management (IAM) user.
	SecretAccessKey interface{} `pulumi:"secretAccessKey"`
	// This value specifies the endpoint to access with the Oracle Cloud Storage Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
	ServiceUrl interface{} `pulumi:"serviceUrl"`
	// Type of linked service.
	// Expected value is 'OracleCloudStorage'.
	Type string `pulumi:"type"`
}

// Linked service for Oracle Cloud Storage.
type OracleCloudStorageLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (OracleCloudStorageLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleCloudStorageLinkedServiceResponse)(nil)).Elem()
}

func (o OracleCloudStorageLinkedServiceResponseOutput) ToOracleCloudStorageLinkedServiceResponseOutput() OracleCloudStorageLinkedServiceResponseOutput {
	return o
}

func (o OracleCloudStorageLinkedServiceResponseOutput) ToOracleCloudStorageLinkedServiceResponseOutputWithContext(ctx context.Context) OracleCloudStorageLinkedServiceResponseOutput {
	return o
}

// The access key identifier of the Oracle Cloud Storage Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
func (o OracleCloudStorageLinkedServiceResponseOutput) AccessKeyId() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleCloudStorageLinkedServiceResponse) interface{} { return v.AccessKeyId }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o OracleCloudStorageLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v OracleCloudStorageLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o OracleCloudStorageLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v OracleCloudStorageLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o OracleCloudStorageLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleCloudStorageLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o OracleCloudStorageLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleCloudStorageLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o OracleCloudStorageLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v OracleCloudStorageLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The secret access key of the Oracle Cloud Storage Identity and Access Management (IAM) user.
func (o OracleCloudStorageLinkedServiceResponseOutput) SecretAccessKey() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleCloudStorageLinkedServiceResponse) interface{} { return v.SecretAccessKey }).(pulumi.AnyOutput)
}

// This value specifies the endpoint to access with the Oracle Cloud Storage Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
func (o OracleCloudStorageLinkedServiceResponseOutput) ServiceUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleCloudStorageLinkedServiceResponse) interface{} { return v.ServiceUrl }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'OracleCloudStorage'.
func (o OracleCloudStorageLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OracleCloudStorageLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The location of Oracle Cloud Storage dataset.
type OracleCloudStorageLocation struct {
	// Specify the bucketName of Oracle Cloud Storage. Type: string (or Expression with resultType string)
	BucketName interface{} `pulumi:"bucketName"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'OracleCloudStorageLocation'.
	Type string `pulumi:"type"`
	// Specify the version of Oracle Cloud Storage. Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
}

// OracleCloudStorageLocationInput is an input type that accepts OracleCloudStorageLocationArgs and OracleCloudStorageLocationOutput values.
// You can construct a concrete instance of `OracleCloudStorageLocationInput` via:
//
//	OracleCloudStorageLocationArgs{...}
type OracleCloudStorageLocationInput interface {
	pulumi.Input

	ToOracleCloudStorageLocationOutput() OracleCloudStorageLocationOutput
	ToOracleCloudStorageLocationOutputWithContext(context.Context) OracleCloudStorageLocationOutput
}

// The location of Oracle Cloud Storage dataset.
type OracleCloudStorageLocationArgs struct {
	// Specify the bucketName of Oracle Cloud Storage. Type: string (or Expression with resultType string)
	BucketName pulumi.Input `pulumi:"bucketName"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'OracleCloudStorageLocation'.
	Type pulumi.StringInput `pulumi:"type"`
	// Specify the version of Oracle Cloud Storage. Type: string (or Expression with resultType string).
	Version pulumi.Input `pulumi:"version"`
}

func (OracleCloudStorageLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleCloudStorageLocation)(nil)).Elem()
}

func (i OracleCloudStorageLocationArgs) ToOracleCloudStorageLocationOutput() OracleCloudStorageLocationOutput {
	return i.ToOracleCloudStorageLocationOutputWithContext(context.Background())
}

func (i OracleCloudStorageLocationArgs) ToOracleCloudStorageLocationOutputWithContext(ctx context.Context) OracleCloudStorageLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleCloudStorageLocationOutput)
}

// The location of Oracle Cloud Storage dataset.
type OracleCloudStorageLocationOutput struct{ *pulumi.OutputState }

func (OracleCloudStorageLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleCloudStorageLocation)(nil)).Elem()
}

func (o OracleCloudStorageLocationOutput) ToOracleCloudStorageLocationOutput() OracleCloudStorageLocationOutput {
	return o
}

func (o OracleCloudStorageLocationOutput) ToOracleCloudStorageLocationOutputWithContext(ctx context.Context) OracleCloudStorageLocationOutput {
	return o
}

// Specify the bucketName of Oracle Cloud Storage. Type: string (or Expression with resultType string)
func (o OracleCloudStorageLocationOutput) BucketName() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleCloudStorageLocation) interface{} { return v.BucketName }).(pulumi.AnyOutput)
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o OracleCloudStorageLocationOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleCloudStorageLocation) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o OracleCloudStorageLocationOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleCloudStorageLocation) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
// Expected value is 'OracleCloudStorageLocation'.
func (o OracleCloudStorageLocationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OracleCloudStorageLocation) string { return v.Type }).(pulumi.StringOutput)
}

// Specify the version of Oracle Cloud Storage. Type: string (or Expression with resultType string).
func (o OracleCloudStorageLocationOutput) Version() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleCloudStorageLocation) interface{} { return v.Version }).(pulumi.AnyOutput)
}

// The location of Oracle Cloud Storage dataset.
type OracleCloudStorageLocationResponse struct {
	// Specify the bucketName of Oracle Cloud Storage. Type: string (or Expression with resultType string)
	BucketName interface{} `pulumi:"bucketName"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'OracleCloudStorageLocation'.
	Type string `pulumi:"type"`
	// Specify the version of Oracle Cloud Storage. Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
}

// The location of Oracle Cloud Storage dataset.
type OracleCloudStorageLocationResponseOutput struct{ *pulumi.OutputState }

func (OracleCloudStorageLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleCloudStorageLocationResponse)(nil)).Elem()
}

func (o OracleCloudStorageLocationResponseOutput) ToOracleCloudStorageLocationResponseOutput() OracleCloudStorageLocationResponseOutput {
	return o
}

func (o OracleCloudStorageLocationResponseOutput) ToOracleCloudStorageLocationResponseOutputWithContext(ctx context.Context) OracleCloudStorageLocationResponseOutput {
	return o
}

// Specify the bucketName of Oracle Cloud Storage. Type: string (or Expression with resultType string)
func (o OracleCloudStorageLocationResponseOutput) BucketName() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleCloudStorageLocationResponse) interface{} { return v.BucketName }).(pulumi.AnyOutput)
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o OracleCloudStorageLocationResponseOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleCloudStorageLocationResponse) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o OracleCloudStorageLocationResponseOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleCloudStorageLocationResponse) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
// Expected value is 'OracleCloudStorageLocation'.
func (o OracleCloudStorageLocationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OracleCloudStorageLocationResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specify the version of Oracle Cloud Storage. Type: string (or Expression with resultType string).
func (o OracleCloudStorageLocationResponseOutput) Version() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleCloudStorageLocationResponse) interface{} { return v.Version }).(pulumi.AnyOutput)
}

// Oracle Cloud Storage read settings.
type OracleCloudStorageReadSettings struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery interface{} `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// The prefix filter for the Oracle Cloud Storage object name. Type: string (or Expression with resultType string).
	Prefix interface{} `pulumi:"prefix"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'OracleCloudStorageReadSettings'.
	Type string `pulumi:"type"`
	// Oracle Cloud Storage wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Oracle Cloud Storage wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// OracleCloudStorageReadSettingsInput is an input type that accepts OracleCloudStorageReadSettingsArgs and OracleCloudStorageReadSettingsOutput values.
// You can construct a concrete instance of `OracleCloudStorageReadSettingsInput` via:
//
//	OracleCloudStorageReadSettingsArgs{...}
type OracleCloudStorageReadSettingsInput interface {
	pulumi.Input

	ToOracleCloudStorageReadSettingsOutput() OracleCloudStorageReadSettingsOutput
	ToOracleCloudStorageReadSettingsOutputWithContext(context.Context) OracleCloudStorageReadSettingsOutput
}

// Oracle Cloud Storage read settings.
type OracleCloudStorageReadSettingsArgs struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion pulumi.Input `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery pulumi.Input `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath pulumi.Input `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd pulumi.Input `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart pulumi.Input `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath pulumi.Input `pulumi:"partitionRootPath"`
	// The prefix filter for the Oracle Cloud Storage object name. Type: string (or Expression with resultType string).
	Prefix pulumi.Input `pulumi:"prefix"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive pulumi.Input `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'OracleCloudStorageReadSettings'.
	Type pulumi.StringInput `pulumi:"type"`
	// Oracle Cloud Storage wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName pulumi.Input `pulumi:"wildcardFileName"`
	// Oracle Cloud Storage wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath pulumi.Input `pulumi:"wildcardFolderPath"`
}

func (OracleCloudStorageReadSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleCloudStorageReadSettings)(nil)).Elem()
}

func (i OracleCloudStorageReadSettingsArgs) ToOracleCloudStorageReadSettingsOutput() OracleCloudStorageReadSettingsOutput {
	return i.ToOracleCloudStorageReadSettingsOutputWithContext(context.Background())
}

func (i OracleCloudStorageReadSettingsArgs) ToOracleCloudStorageReadSettingsOutputWithContext(ctx context.Context) OracleCloudStorageReadSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleCloudStorageReadSettingsOutput)
}

func (i OracleCloudStorageReadSettingsArgs) ToOracleCloudStorageReadSettingsPtrOutput() OracleCloudStorageReadSettingsPtrOutput {
	return i.ToOracleCloudStorageReadSettingsPtrOutputWithContext(context.Background())
}

func (i OracleCloudStorageReadSettingsArgs) ToOracleCloudStorageReadSettingsPtrOutputWithContext(ctx context.Context) OracleCloudStorageReadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleCloudStorageReadSettingsOutput).ToOracleCloudStorageReadSettingsPtrOutputWithContext(ctx)
}

// OracleCloudStorageReadSettingsPtrInput is an input type that accepts OracleCloudStorageReadSettingsArgs, OracleCloudStorageReadSettingsPtr and OracleCloudStorageReadSettingsPtrOutput values.
// You can construct a concrete instance of `OracleCloudStorageReadSettingsPtrInput` via:
//
//	        OracleCloudStorageReadSettingsArgs{...}
//
//	or:
//
//	        nil
type OracleCloudStorageReadSettingsPtrInput interface {
	pulumi.Input

	ToOracleCloudStorageReadSettingsPtrOutput() OracleCloudStorageReadSettingsPtrOutput
	ToOracleCloudStorageReadSettingsPtrOutputWithContext(context.Context) OracleCloudStorageReadSettingsPtrOutput
}

type oracleCloudStorageReadSettingsPtrType OracleCloudStorageReadSettingsArgs

func OracleCloudStorageReadSettingsPtr(v *OracleCloudStorageReadSettingsArgs) OracleCloudStorageReadSettingsPtrInput {
	return (*oracleCloudStorageReadSettingsPtrType)(v)
}

func (*oracleCloudStorageReadSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OracleCloudStorageReadSettings)(nil)).Elem()
}

func (i *oracleCloudStorageReadSettingsPtrType) ToOracleCloudStorageReadSettingsPtrOutput() OracleCloudStorageReadSettingsPtrOutput {
	return i.ToOracleCloudStorageReadSettingsPtrOutputWithContext(context.Background())
}

func (i *oracleCloudStorageReadSettingsPtrType) ToOracleCloudStorageReadSettingsPtrOutputWithContext(ctx context.Context) OracleCloudStorageReadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleCloudStorageReadSettingsPtrOutput)
}

// Oracle Cloud Storage read settings.
type OracleCloudStorageReadSettingsOutput struct{ *pulumi.OutputState }

func (OracleCloudStorageReadSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleCloudStorageReadSettings)(nil)).Elem()
}

func (o OracleCloudStorageReadSettingsOutput) ToOracleCloudStorageReadSettingsOutput() OracleCloudStorageReadSettingsOutput {
	return o
}

func (o OracleCloudStorageReadSettingsOutput) ToOracleCloudStorageReadSettingsOutputWithContext(ctx context.Context) OracleCloudStorageReadSettingsOutput {
	return o
}

func (o OracleCloudStorageReadSettingsOutput) ToOracleCloudStorageReadSettingsPtrOutput() OracleCloudStorageReadSettingsPtrOutput {
	return o.ToOracleCloudStorageReadSettingsPtrOutputWithContext(context.Background())
}

func (o OracleCloudStorageReadSettingsOutput) ToOracleCloudStorageReadSettingsPtrOutputWithContext(ctx context.Context) OracleCloudStorageReadSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OracleCloudStorageReadSettings) *OracleCloudStorageReadSettings {
		return &v
	}).(OracleCloudStorageReadSettingsPtrOutput)
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o OracleCloudStorageReadSettingsOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleCloudStorageReadSettings) interface{} { return v.DeleteFilesAfterCompletion }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o OracleCloudStorageReadSettingsOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleCloudStorageReadSettings) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o OracleCloudStorageReadSettingsOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleCloudStorageReadSettings) interface{} { return v.EnablePartitionDiscovery }).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o OracleCloudStorageReadSettingsOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleCloudStorageReadSettings) interface{} { return v.FileListPath }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o OracleCloudStorageReadSettingsOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleCloudStorageReadSettings) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o OracleCloudStorageReadSettingsOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleCloudStorageReadSettings) interface{} { return v.ModifiedDatetimeEnd }).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o OracleCloudStorageReadSettingsOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleCloudStorageReadSettings) interface{} { return v.ModifiedDatetimeStart }).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o OracleCloudStorageReadSettingsOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleCloudStorageReadSettings) interface{} { return v.PartitionRootPath }).(pulumi.AnyOutput)
}

// The prefix filter for the Oracle Cloud Storage object name. Type: string (or Expression with resultType string).
func (o OracleCloudStorageReadSettingsOutput) Prefix() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleCloudStorageReadSettings) interface{} { return v.Prefix }).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o OracleCloudStorageReadSettingsOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleCloudStorageReadSettings) interface{} { return v.Recursive }).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'OracleCloudStorageReadSettings'.
func (o OracleCloudStorageReadSettingsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OracleCloudStorageReadSettings) string { return v.Type }).(pulumi.StringOutput)
}

// Oracle Cloud Storage wildcardFileName. Type: string (or Expression with resultType string).
func (o OracleCloudStorageReadSettingsOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleCloudStorageReadSettings) interface{} { return v.WildcardFileName }).(pulumi.AnyOutput)
}

// Oracle Cloud Storage wildcardFolderPath. Type: string (or Expression with resultType string).
func (o OracleCloudStorageReadSettingsOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleCloudStorageReadSettings) interface{} { return v.WildcardFolderPath }).(pulumi.AnyOutput)
}

type OracleCloudStorageReadSettingsPtrOutput struct{ *pulumi.OutputState }

func (OracleCloudStorageReadSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OracleCloudStorageReadSettings)(nil)).Elem()
}

func (o OracleCloudStorageReadSettingsPtrOutput) ToOracleCloudStorageReadSettingsPtrOutput() OracleCloudStorageReadSettingsPtrOutput {
	return o
}

func (o OracleCloudStorageReadSettingsPtrOutput) ToOracleCloudStorageReadSettingsPtrOutputWithContext(ctx context.Context) OracleCloudStorageReadSettingsPtrOutput {
	return o
}

func (o OracleCloudStorageReadSettingsPtrOutput) Elem() OracleCloudStorageReadSettingsOutput {
	return o.ApplyT(func(v *OracleCloudStorageReadSettings) OracleCloudStorageReadSettings {
		if v != nil {
			return *v
		}
		var ret OracleCloudStorageReadSettings
		return ret
	}).(OracleCloudStorageReadSettingsOutput)
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o OracleCloudStorageReadSettingsPtrOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v *OracleCloudStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.DeleteFilesAfterCompletion
	}).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o OracleCloudStorageReadSettingsPtrOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v *OracleCloudStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableMetricsCollection
	}).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o OracleCloudStorageReadSettingsPtrOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v *OracleCloudStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.EnablePartitionDiscovery
	}).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o OracleCloudStorageReadSettingsPtrOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *OracleCloudStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.FileListPath
	}).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o OracleCloudStorageReadSettingsPtrOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v *OracleCloudStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentConnections
	}).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o OracleCloudStorageReadSettingsPtrOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v *OracleCloudStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeEnd
	}).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o OracleCloudStorageReadSettingsPtrOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v *OracleCloudStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeStart
	}).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o OracleCloudStorageReadSettingsPtrOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *OracleCloudStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionRootPath
	}).(pulumi.AnyOutput)
}

// The prefix filter for the Oracle Cloud Storage object name. Type: string (or Expression with resultType string).
func (o OracleCloudStorageReadSettingsPtrOutput) Prefix() pulumi.AnyOutput {
	return o.ApplyT(func(v *OracleCloudStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.Prefix
	}).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o OracleCloudStorageReadSettingsPtrOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v *OracleCloudStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.Recursive
	}).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'OracleCloudStorageReadSettings'.
func (o OracleCloudStorageReadSettingsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OracleCloudStorageReadSettings) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Oracle Cloud Storage wildcardFileName. Type: string (or Expression with resultType string).
func (o OracleCloudStorageReadSettingsPtrOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v *OracleCloudStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFileName
	}).(pulumi.AnyOutput)
}

// Oracle Cloud Storage wildcardFolderPath. Type: string (or Expression with resultType string).
func (o OracleCloudStorageReadSettingsPtrOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *OracleCloudStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFolderPath
	}).(pulumi.AnyOutput)
}

// Oracle Cloud Storage read settings.
type OracleCloudStorageReadSettingsResponse struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery interface{} `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// The prefix filter for the Oracle Cloud Storage object name. Type: string (or Expression with resultType string).
	Prefix interface{} `pulumi:"prefix"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'OracleCloudStorageReadSettings'.
	Type string `pulumi:"type"`
	// Oracle Cloud Storage wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Oracle Cloud Storage wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// Oracle Cloud Storage read settings.
type OracleCloudStorageReadSettingsResponseOutput struct{ *pulumi.OutputState }

func (OracleCloudStorageReadSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleCloudStorageReadSettingsResponse)(nil)).Elem()
}

func (o OracleCloudStorageReadSettingsResponseOutput) ToOracleCloudStorageReadSettingsResponseOutput() OracleCloudStorageReadSettingsResponseOutput {
	return o
}

func (o OracleCloudStorageReadSettingsResponseOutput) ToOracleCloudStorageReadSettingsResponseOutputWithContext(ctx context.Context) OracleCloudStorageReadSettingsResponseOutput {
	return o
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o OracleCloudStorageReadSettingsResponseOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleCloudStorageReadSettingsResponse) interface{} { return v.DeleteFilesAfterCompletion }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o OracleCloudStorageReadSettingsResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleCloudStorageReadSettingsResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o OracleCloudStorageReadSettingsResponseOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleCloudStorageReadSettingsResponse) interface{} { return v.EnablePartitionDiscovery }).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o OracleCloudStorageReadSettingsResponseOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleCloudStorageReadSettingsResponse) interface{} { return v.FileListPath }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o OracleCloudStorageReadSettingsResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleCloudStorageReadSettingsResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o OracleCloudStorageReadSettingsResponseOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleCloudStorageReadSettingsResponse) interface{} { return v.ModifiedDatetimeEnd }).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o OracleCloudStorageReadSettingsResponseOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleCloudStorageReadSettingsResponse) interface{} { return v.ModifiedDatetimeStart }).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o OracleCloudStorageReadSettingsResponseOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleCloudStorageReadSettingsResponse) interface{} { return v.PartitionRootPath }).(pulumi.AnyOutput)
}

// The prefix filter for the Oracle Cloud Storage object name. Type: string (or Expression with resultType string).
func (o OracleCloudStorageReadSettingsResponseOutput) Prefix() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleCloudStorageReadSettingsResponse) interface{} { return v.Prefix }).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o OracleCloudStorageReadSettingsResponseOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleCloudStorageReadSettingsResponse) interface{} { return v.Recursive }).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'OracleCloudStorageReadSettings'.
func (o OracleCloudStorageReadSettingsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OracleCloudStorageReadSettingsResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Oracle Cloud Storage wildcardFileName. Type: string (or Expression with resultType string).
func (o OracleCloudStorageReadSettingsResponseOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleCloudStorageReadSettingsResponse) interface{} { return v.WildcardFileName }).(pulumi.AnyOutput)
}

// Oracle Cloud Storage wildcardFolderPath. Type: string (or Expression with resultType string).
func (o OracleCloudStorageReadSettingsResponseOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleCloudStorageReadSettingsResponse) interface{} { return v.WildcardFolderPath }).(pulumi.AnyOutput)
}

type OracleCloudStorageReadSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (OracleCloudStorageReadSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OracleCloudStorageReadSettingsResponse)(nil)).Elem()
}

func (o OracleCloudStorageReadSettingsResponsePtrOutput) ToOracleCloudStorageReadSettingsResponsePtrOutput() OracleCloudStorageReadSettingsResponsePtrOutput {
	return o
}

func (o OracleCloudStorageReadSettingsResponsePtrOutput) ToOracleCloudStorageReadSettingsResponsePtrOutputWithContext(ctx context.Context) OracleCloudStorageReadSettingsResponsePtrOutput {
	return o
}

func (o OracleCloudStorageReadSettingsResponsePtrOutput) Elem() OracleCloudStorageReadSettingsResponseOutput {
	return o.ApplyT(func(v *OracleCloudStorageReadSettingsResponse) OracleCloudStorageReadSettingsResponse {
		if v != nil {
			return *v
		}
		var ret OracleCloudStorageReadSettingsResponse
		return ret
	}).(OracleCloudStorageReadSettingsResponseOutput)
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o OracleCloudStorageReadSettingsResponsePtrOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v *OracleCloudStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.DeleteFilesAfterCompletion
	}).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o OracleCloudStorageReadSettingsResponsePtrOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v *OracleCloudStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableMetricsCollection
	}).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o OracleCloudStorageReadSettingsResponsePtrOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v *OracleCloudStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.EnablePartitionDiscovery
	}).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o OracleCloudStorageReadSettingsResponsePtrOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *OracleCloudStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.FileListPath
	}).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o OracleCloudStorageReadSettingsResponsePtrOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v *OracleCloudStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentConnections
	}).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o OracleCloudStorageReadSettingsResponsePtrOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v *OracleCloudStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeEnd
	}).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o OracleCloudStorageReadSettingsResponsePtrOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v *OracleCloudStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeStart
	}).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o OracleCloudStorageReadSettingsResponsePtrOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *OracleCloudStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionRootPath
	}).(pulumi.AnyOutput)
}

// The prefix filter for the Oracle Cloud Storage object name. Type: string (or Expression with resultType string).
func (o OracleCloudStorageReadSettingsResponsePtrOutput) Prefix() pulumi.AnyOutput {
	return o.ApplyT(func(v *OracleCloudStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Prefix
	}).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o OracleCloudStorageReadSettingsResponsePtrOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v *OracleCloudStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Recursive
	}).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'OracleCloudStorageReadSettings'.
func (o OracleCloudStorageReadSettingsResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OracleCloudStorageReadSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Oracle Cloud Storage wildcardFileName. Type: string (or Expression with resultType string).
func (o OracleCloudStorageReadSettingsResponsePtrOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v *OracleCloudStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFileName
	}).(pulumi.AnyOutput)
}

// Oracle Cloud Storage wildcardFolderPath. Type: string (or Expression with resultType string).
func (o OracleCloudStorageReadSettingsResponsePtrOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *OracleCloudStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFolderPath
	}).(pulumi.AnyOutput)
}

// Oracle database.
type OracleLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Oracle'.
	Type string `pulumi:"type"`
}

// OracleLinkedServiceInput is an input type that accepts OracleLinkedServiceArgs and OracleLinkedServiceOutput values.
// You can construct a concrete instance of `OracleLinkedServiceInput` via:
//
//	OracleLinkedServiceArgs{...}
type OracleLinkedServiceInput interface {
	pulumi.Input

	ToOracleLinkedServiceOutput() OracleLinkedServiceOutput
	ToOracleLinkedServiceOutputWithContext(context.Context) OracleLinkedServiceOutput
}

// Oracle database.
type OracleLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password AzureKeyVaultSecretReferencePtrInput `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Oracle'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (OracleLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleLinkedService)(nil)).Elem()
}

func (i OracleLinkedServiceArgs) ToOracleLinkedServiceOutput() OracleLinkedServiceOutput {
	return i.ToOracleLinkedServiceOutputWithContext(context.Background())
}

func (i OracleLinkedServiceArgs) ToOracleLinkedServiceOutputWithContext(ctx context.Context) OracleLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleLinkedServiceOutput)
}

// Oracle database.
type OracleLinkedServiceOutput struct{ *pulumi.OutputState }

func (OracleLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleLinkedService)(nil)).Elem()
}

func (o OracleLinkedServiceOutput) ToOracleLinkedServiceOutput() OracleLinkedServiceOutput {
	return o
}

func (o OracleLinkedServiceOutput) ToOracleLinkedServiceOutputWithContext(ctx context.Context) OracleLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o OracleLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v OracleLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o OracleLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v OracleLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o OracleLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o OracleLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o OracleLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o OracleLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v OracleLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o OracleLinkedServiceOutput) Password() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v OracleLinkedService) *AzureKeyVaultSecretReference { return v.Password }).(AzureKeyVaultSecretReferencePtrOutput)
}

// Type of linked service.
// Expected value is 'Oracle'.
func (o OracleLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OracleLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Oracle database.
type OracleLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReferenceResponse `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Oracle'.
	Type string `pulumi:"type"`
}

// Oracle database.
type OracleLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (OracleLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleLinkedServiceResponse)(nil)).Elem()
}

func (o OracleLinkedServiceResponseOutput) ToOracleLinkedServiceResponseOutput() OracleLinkedServiceResponseOutput {
	return o
}

func (o OracleLinkedServiceResponseOutput) ToOracleLinkedServiceResponseOutputWithContext(ctx context.Context) OracleLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o OracleLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v OracleLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o OracleLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v OracleLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o OracleLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o OracleLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o OracleLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o OracleLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v OracleLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o OracleLinkedServiceResponseOutput) Password() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v OracleLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse { return v.Password }).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// Type of linked service.
// Expected value is 'Oracle'.
func (o OracleLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OracleLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The settings that will be leveraged for Oracle source partitioning.
type OraclePartitionSettings struct {
	// The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionColumnName interface{} `pulumi:"partitionColumnName"`
	// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionLowerBound interface{} `pulumi:"partitionLowerBound"`
	// Names of the physical partitions of Oracle table.
	PartitionNames []interface{} `pulumi:"partitionNames"`
	// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionUpperBound interface{} `pulumi:"partitionUpperBound"`
}

// OraclePartitionSettingsInput is an input type that accepts OraclePartitionSettingsArgs and OraclePartitionSettingsOutput values.
// You can construct a concrete instance of `OraclePartitionSettingsInput` via:
//
//	OraclePartitionSettingsArgs{...}
type OraclePartitionSettingsInput interface {
	pulumi.Input

	ToOraclePartitionSettingsOutput() OraclePartitionSettingsOutput
	ToOraclePartitionSettingsOutputWithContext(context.Context) OraclePartitionSettingsOutput
}

// The settings that will be leveraged for Oracle source partitioning.
type OraclePartitionSettingsArgs struct {
	// The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionColumnName pulumi.Input `pulumi:"partitionColumnName"`
	// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionLowerBound pulumi.Input `pulumi:"partitionLowerBound"`
	// Names of the physical partitions of Oracle table.
	PartitionNames pulumi.ArrayInput `pulumi:"partitionNames"`
	// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionUpperBound pulumi.Input `pulumi:"partitionUpperBound"`
}

func (OraclePartitionSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OraclePartitionSettings)(nil)).Elem()
}

func (i OraclePartitionSettingsArgs) ToOraclePartitionSettingsOutput() OraclePartitionSettingsOutput {
	return i.ToOraclePartitionSettingsOutputWithContext(context.Background())
}

func (i OraclePartitionSettingsArgs) ToOraclePartitionSettingsOutputWithContext(ctx context.Context) OraclePartitionSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OraclePartitionSettingsOutput)
}

func (i OraclePartitionSettingsArgs) ToOraclePartitionSettingsPtrOutput() OraclePartitionSettingsPtrOutput {
	return i.ToOraclePartitionSettingsPtrOutputWithContext(context.Background())
}

func (i OraclePartitionSettingsArgs) ToOraclePartitionSettingsPtrOutputWithContext(ctx context.Context) OraclePartitionSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OraclePartitionSettingsOutput).ToOraclePartitionSettingsPtrOutputWithContext(ctx)
}

// OraclePartitionSettingsPtrInput is an input type that accepts OraclePartitionSettingsArgs, OraclePartitionSettingsPtr and OraclePartitionSettingsPtrOutput values.
// You can construct a concrete instance of `OraclePartitionSettingsPtrInput` via:
//
//	        OraclePartitionSettingsArgs{...}
//
//	or:
//
//	        nil
type OraclePartitionSettingsPtrInput interface {
	pulumi.Input

	ToOraclePartitionSettingsPtrOutput() OraclePartitionSettingsPtrOutput
	ToOraclePartitionSettingsPtrOutputWithContext(context.Context) OraclePartitionSettingsPtrOutput
}

type oraclePartitionSettingsPtrType OraclePartitionSettingsArgs

func OraclePartitionSettingsPtr(v *OraclePartitionSettingsArgs) OraclePartitionSettingsPtrInput {
	return (*oraclePartitionSettingsPtrType)(v)
}

func (*oraclePartitionSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OraclePartitionSettings)(nil)).Elem()
}

func (i *oraclePartitionSettingsPtrType) ToOraclePartitionSettingsPtrOutput() OraclePartitionSettingsPtrOutput {
	return i.ToOraclePartitionSettingsPtrOutputWithContext(context.Background())
}

func (i *oraclePartitionSettingsPtrType) ToOraclePartitionSettingsPtrOutputWithContext(ctx context.Context) OraclePartitionSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OraclePartitionSettingsPtrOutput)
}

// The settings that will be leveraged for Oracle source partitioning.
type OraclePartitionSettingsOutput struct{ *pulumi.OutputState }

func (OraclePartitionSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OraclePartitionSettings)(nil)).Elem()
}

func (o OraclePartitionSettingsOutput) ToOraclePartitionSettingsOutput() OraclePartitionSettingsOutput {
	return o
}

func (o OraclePartitionSettingsOutput) ToOraclePartitionSettingsOutputWithContext(ctx context.Context) OraclePartitionSettingsOutput {
	return o
}

func (o OraclePartitionSettingsOutput) ToOraclePartitionSettingsPtrOutput() OraclePartitionSettingsPtrOutput {
	return o.ToOraclePartitionSettingsPtrOutputWithContext(context.Background())
}

func (o OraclePartitionSettingsOutput) ToOraclePartitionSettingsPtrOutputWithContext(ctx context.Context) OraclePartitionSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OraclePartitionSettings) *OraclePartitionSettings {
		return &v
	}).(OraclePartitionSettingsPtrOutput)
}

// The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o OraclePartitionSettingsOutput) PartitionColumnName() pulumi.AnyOutput {
	return o.ApplyT(func(v OraclePartitionSettings) interface{} { return v.PartitionColumnName }).(pulumi.AnyOutput)
}

// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o OraclePartitionSettingsOutput) PartitionLowerBound() pulumi.AnyOutput {
	return o.ApplyT(func(v OraclePartitionSettings) interface{} { return v.PartitionLowerBound }).(pulumi.AnyOutput)
}

// Names of the physical partitions of Oracle table.
func (o OraclePartitionSettingsOutput) PartitionNames() pulumi.ArrayOutput {
	return o.ApplyT(func(v OraclePartitionSettings) []interface{} { return v.PartitionNames }).(pulumi.ArrayOutput)
}

// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o OraclePartitionSettingsOutput) PartitionUpperBound() pulumi.AnyOutput {
	return o.ApplyT(func(v OraclePartitionSettings) interface{} { return v.PartitionUpperBound }).(pulumi.AnyOutput)
}

type OraclePartitionSettingsPtrOutput struct{ *pulumi.OutputState }

func (OraclePartitionSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OraclePartitionSettings)(nil)).Elem()
}

func (o OraclePartitionSettingsPtrOutput) ToOraclePartitionSettingsPtrOutput() OraclePartitionSettingsPtrOutput {
	return o
}

func (o OraclePartitionSettingsPtrOutput) ToOraclePartitionSettingsPtrOutputWithContext(ctx context.Context) OraclePartitionSettingsPtrOutput {
	return o
}

func (o OraclePartitionSettingsPtrOutput) Elem() OraclePartitionSettingsOutput {
	return o.ApplyT(func(v *OraclePartitionSettings) OraclePartitionSettings {
		if v != nil {
			return *v
		}
		var ret OraclePartitionSettings
		return ret
	}).(OraclePartitionSettingsOutput)
}

// The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o OraclePartitionSettingsPtrOutput) PartitionColumnName() pulumi.AnyOutput {
	return o.ApplyT(func(v *OraclePartitionSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionColumnName
	}).(pulumi.AnyOutput)
}

// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o OraclePartitionSettingsPtrOutput) PartitionLowerBound() pulumi.AnyOutput {
	return o.ApplyT(func(v *OraclePartitionSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionLowerBound
	}).(pulumi.AnyOutput)
}

// Names of the physical partitions of Oracle table.
func (o OraclePartitionSettingsPtrOutput) PartitionNames() pulumi.ArrayOutput {
	return o.ApplyT(func(v *OraclePartitionSettings) []interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionNames
	}).(pulumi.ArrayOutput)
}

// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o OraclePartitionSettingsPtrOutput) PartitionUpperBound() pulumi.AnyOutput {
	return o.ApplyT(func(v *OraclePartitionSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionUpperBound
	}).(pulumi.AnyOutput)
}

// The settings that will be leveraged for Oracle source partitioning.
type OraclePartitionSettingsResponse struct {
	// The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionColumnName interface{} `pulumi:"partitionColumnName"`
	// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionLowerBound interface{} `pulumi:"partitionLowerBound"`
	// Names of the physical partitions of Oracle table.
	PartitionNames []interface{} `pulumi:"partitionNames"`
	// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionUpperBound interface{} `pulumi:"partitionUpperBound"`
}

// The settings that will be leveraged for Oracle source partitioning.
type OraclePartitionSettingsResponseOutput struct{ *pulumi.OutputState }

func (OraclePartitionSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OraclePartitionSettingsResponse)(nil)).Elem()
}

func (o OraclePartitionSettingsResponseOutput) ToOraclePartitionSettingsResponseOutput() OraclePartitionSettingsResponseOutput {
	return o
}

func (o OraclePartitionSettingsResponseOutput) ToOraclePartitionSettingsResponseOutputWithContext(ctx context.Context) OraclePartitionSettingsResponseOutput {
	return o
}

// The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o OraclePartitionSettingsResponseOutput) PartitionColumnName() pulumi.AnyOutput {
	return o.ApplyT(func(v OraclePartitionSettingsResponse) interface{} { return v.PartitionColumnName }).(pulumi.AnyOutput)
}

// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o OraclePartitionSettingsResponseOutput) PartitionLowerBound() pulumi.AnyOutput {
	return o.ApplyT(func(v OraclePartitionSettingsResponse) interface{} { return v.PartitionLowerBound }).(pulumi.AnyOutput)
}

// Names of the physical partitions of Oracle table.
func (o OraclePartitionSettingsResponseOutput) PartitionNames() pulumi.ArrayOutput {
	return o.ApplyT(func(v OraclePartitionSettingsResponse) []interface{} { return v.PartitionNames }).(pulumi.ArrayOutput)
}

// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o OraclePartitionSettingsResponseOutput) PartitionUpperBound() pulumi.AnyOutput {
	return o.ApplyT(func(v OraclePartitionSettingsResponse) interface{} { return v.PartitionUpperBound }).(pulumi.AnyOutput)
}

type OraclePartitionSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (OraclePartitionSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OraclePartitionSettingsResponse)(nil)).Elem()
}

func (o OraclePartitionSettingsResponsePtrOutput) ToOraclePartitionSettingsResponsePtrOutput() OraclePartitionSettingsResponsePtrOutput {
	return o
}

func (o OraclePartitionSettingsResponsePtrOutput) ToOraclePartitionSettingsResponsePtrOutputWithContext(ctx context.Context) OraclePartitionSettingsResponsePtrOutput {
	return o
}

func (o OraclePartitionSettingsResponsePtrOutput) Elem() OraclePartitionSettingsResponseOutput {
	return o.ApplyT(func(v *OraclePartitionSettingsResponse) OraclePartitionSettingsResponse {
		if v != nil {
			return *v
		}
		var ret OraclePartitionSettingsResponse
		return ret
	}).(OraclePartitionSettingsResponseOutput)
}

// The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o OraclePartitionSettingsResponsePtrOutput) PartitionColumnName() pulumi.AnyOutput {
	return o.ApplyT(func(v *OraclePartitionSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionColumnName
	}).(pulumi.AnyOutput)
}

// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o OraclePartitionSettingsResponsePtrOutput) PartitionLowerBound() pulumi.AnyOutput {
	return o.ApplyT(func(v *OraclePartitionSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionLowerBound
	}).(pulumi.AnyOutput)
}

// Names of the physical partitions of Oracle table.
func (o OraclePartitionSettingsResponsePtrOutput) PartitionNames() pulumi.ArrayOutput {
	return o.ApplyT(func(v *OraclePartitionSettingsResponse) []interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionNames
	}).(pulumi.ArrayOutput)
}

// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o OraclePartitionSettingsResponsePtrOutput) PartitionUpperBound() pulumi.AnyOutput {
	return o.ApplyT(func(v *OraclePartitionSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionUpperBound
	}).(pulumi.AnyOutput)
}

// Oracle Service Cloud linked service.
type OracleServiceCloudLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The URL of the Oracle Service Cloud instance.
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the username key.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'OracleServiceCloud'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
	// The user name that you use to access Oracle Service Cloud server.
	Username interface{} `pulumi:"username"`
}

// OracleServiceCloudLinkedServiceInput is an input type that accepts OracleServiceCloudLinkedServiceArgs and OracleServiceCloudLinkedServiceOutput values.
// You can construct a concrete instance of `OracleServiceCloudLinkedServiceInput` via:
//
//	OracleServiceCloudLinkedServiceArgs{...}
type OracleServiceCloudLinkedServiceInput interface {
	pulumi.Input

	ToOracleServiceCloudLinkedServiceOutput() OracleServiceCloudLinkedServiceOutput
	ToOracleServiceCloudLinkedServiceOutputWithContext(context.Context) OracleServiceCloudLinkedServiceOutput
}

// Oracle Service Cloud linked service.
type OracleServiceCloudLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// The URL of the Oracle Service Cloud instance.
	Host pulumi.Input `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the username key.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'OracleServiceCloud'.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
	// The user name that you use to access Oracle Service Cloud server.
	Username pulumi.Input `pulumi:"username"`
}

func (OracleServiceCloudLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleServiceCloudLinkedService)(nil)).Elem()
}

func (i OracleServiceCloudLinkedServiceArgs) ToOracleServiceCloudLinkedServiceOutput() OracleServiceCloudLinkedServiceOutput {
	return i.ToOracleServiceCloudLinkedServiceOutputWithContext(context.Background())
}

func (i OracleServiceCloudLinkedServiceArgs) ToOracleServiceCloudLinkedServiceOutputWithContext(ctx context.Context) OracleServiceCloudLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleServiceCloudLinkedServiceOutput)
}

// Oracle Service Cloud linked service.
type OracleServiceCloudLinkedServiceOutput struct{ *pulumi.OutputState }

func (OracleServiceCloudLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleServiceCloudLinkedService)(nil)).Elem()
}

func (o OracleServiceCloudLinkedServiceOutput) ToOracleServiceCloudLinkedServiceOutput() OracleServiceCloudLinkedServiceOutput {
	return o
}

func (o OracleServiceCloudLinkedServiceOutput) ToOracleServiceCloudLinkedServiceOutputWithContext(ctx context.Context) OracleServiceCloudLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o OracleServiceCloudLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o OracleServiceCloudLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o OracleServiceCloudLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o OracleServiceCloudLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The URL of the Oracle Service Cloud instance.
func (o OracleServiceCloudLinkedServiceOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedService) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o OracleServiceCloudLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The password corresponding to the user name that you provided in the username key.
func (o OracleServiceCloudLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'OracleServiceCloud'.
func (o OracleServiceCloudLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o OracleServiceCloudLinkedServiceOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedService) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o OracleServiceCloudLinkedServiceOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedService) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o OracleServiceCloudLinkedServiceOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedService) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// The user name that you use to access Oracle Service Cloud server.
func (o OracleServiceCloudLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Oracle Service Cloud linked service.
type OracleServiceCloudLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The URL of the Oracle Service Cloud instance.
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the username key.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'OracleServiceCloud'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
	// The user name that you use to access Oracle Service Cloud server.
	Username interface{} `pulumi:"username"`
}

// Oracle Service Cloud linked service.
type OracleServiceCloudLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (OracleServiceCloudLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleServiceCloudLinkedServiceResponse)(nil)).Elem()
}

func (o OracleServiceCloudLinkedServiceResponseOutput) ToOracleServiceCloudLinkedServiceResponseOutput() OracleServiceCloudLinkedServiceResponseOutput {
	return o
}

func (o OracleServiceCloudLinkedServiceResponseOutput) ToOracleServiceCloudLinkedServiceResponseOutputWithContext(ctx context.Context) OracleServiceCloudLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o OracleServiceCloudLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o OracleServiceCloudLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o OracleServiceCloudLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o OracleServiceCloudLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The URL of the Oracle Service Cloud instance.
func (o OracleServiceCloudLinkedServiceResponseOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedServiceResponse) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o OracleServiceCloudLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The password corresponding to the user name that you provided in the username key.
func (o OracleServiceCloudLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'OracleServiceCloud'.
func (o OracleServiceCloudLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o OracleServiceCloudLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedServiceResponse) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o OracleServiceCloudLinkedServiceResponseOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedServiceResponse) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o OracleServiceCloudLinkedServiceResponseOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedServiceResponse) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// The user name that you use to access Oracle Service Cloud server.
func (o OracleServiceCloudLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Oracle Service Cloud dataset.
type OracleServiceCloudObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'OracleServiceCloudObject'.
	Type string `pulumi:"type"`
}

// OracleServiceCloudObjectDatasetInput is an input type that accepts OracleServiceCloudObjectDatasetArgs and OracleServiceCloudObjectDatasetOutput values.
// You can construct a concrete instance of `OracleServiceCloudObjectDatasetInput` via:
//
//	OracleServiceCloudObjectDatasetArgs{...}
type OracleServiceCloudObjectDatasetInput interface {
	pulumi.Input

	ToOracleServiceCloudObjectDatasetOutput() OracleServiceCloudObjectDatasetOutput
	ToOracleServiceCloudObjectDatasetOutputWithContext(context.Context) OracleServiceCloudObjectDatasetOutput
}

// Oracle Service Cloud dataset.
type OracleServiceCloudObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'OracleServiceCloudObject'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (OracleServiceCloudObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleServiceCloudObjectDataset)(nil)).Elem()
}

func (i OracleServiceCloudObjectDatasetArgs) ToOracleServiceCloudObjectDatasetOutput() OracleServiceCloudObjectDatasetOutput {
	return i.ToOracleServiceCloudObjectDatasetOutputWithContext(context.Background())
}

func (i OracleServiceCloudObjectDatasetArgs) ToOracleServiceCloudObjectDatasetOutputWithContext(ctx context.Context) OracleServiceCloudObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleServiceCloudObjectDatasetOutput)
}

// Oracle Service Cloud dataset.
type OracleServiceCloudObjectDatasetOutput struct{ *pulumi.OutputState }

func (OracleServiceCloudObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleServiceCloudObjectDataset)(nil)).Elem()
}

func (o OracleServiceCloudObjectDatasetOutput) ToOracleServiceCloudObjectDatasetOutput() OracleServiceCloudObjectDatasetOutput {
	return o
}

func (o OracleServiceCloudObjectDatasetOutput) ToOracleServiceCloudObjectDatasetOutputWithContext(ctx context.Context) OracleServiceCloudObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o OracleServiceCloudObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v OracleServiceCloudObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o OracleServiceCloudObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleServiceCloudObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o OracleServiceCloudObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v OracleServiceCloudObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o OracleServiceCloudObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v OracleServiceCloudObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o OracleServiceCloudObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v OracleServiceCloudObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o OracleServiceCloudObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o OracleServiceCloudObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o OracleServiceCloudObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'OracleServiceCloudObject'.
func (o OracleServiceCloudObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OracleServiceCloudObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Oracle Service Cloud dataset.
type OracleServiceCloudObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'OracleServiceCloudObject'.
	Type string `pulumi:"type"`
}

// Oracle Service Cloud dataset.
type OracleServiceCloudObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (OracleServiceCloudObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleServiceCloudObjectDatasetResponse)(nil)).Elem()
}

func (o OracleServiceCloudObjectDatasetResponseOutput) ToOracleServiceCloudObjectDatasetResponseOutput() OracleServiceCloudObjectDatasetResponseOutput {
	return o
}

func (o OracleServiceCloudObjectDatasetResponseOutput) ToOracleServiceCloudObjectDatasetResponseOutputWithContext(ctx context.Context) OracleServiceCloudObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o OracleServiceCloudObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v OracleServiceCloudObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o OracleServiceCloudObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleServiceCloudObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o OracleServiceCloudObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v OracleServiceCloudObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o OracleServiceCloudObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v OracleServiceCloudObjectDatasetResponse) LinkedServiceReferenceResponse {
		return v.LinkedServiceName
	}).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o OracleServiceCloudObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v OracleServiceCloudObjectDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o OracleServiceCloudObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o OracleServiceCloudObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o OracleServiceCloudObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'OracleServiceCloudObject'.
func (o OracleServiceCloudObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OracleServiceCloudObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Oracle Service Cloud source.
type OracleServiceCloudSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'OracleServiceCloudSource'.
	Type string `pulumi:"type"`
}

// OracleServiceCloudSourceInput is an input type that accepts OracleServiceCloudSourceArgs and OracleServiceCloudSourceOutput values.
// You can construct a concrete instance of `OracleServiceCloudSourceInput` via:
//
//	OracleServiceCloudSourceArgs{...}
type OracleServiceCloudSourceInput interface {
	pulumi.Input

	ToOracleServiceCloudSourceOutput() OracleServiceCloudSourceOutput
	ToOracleServiceCloudSourceOutputWithContext(context.Context) OracleServiceCloudSourceOutput
}

// A copy activity Oracle Service Cloud source.
type OracleServiceCloudSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'OracleServiceCloudSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (OracleServiceCloudSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleServiceCloudSource)(nil)).Elem()
}

func (i OracleServiceCloudSourceArgs) ToOracleServiceCloudSourceOutput() OracleServiceCloudSourceOutput {
	return i.ToOracleServiceCloudSourceOutputWithContext(context.Background())
}

func (i OracleServiceCloudSourceArgs) ToOracleServiceCloudSourceOutputWithContext(ctx context.Context) OracleServiceCloudSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleServiceCloudSourceOutput)
}

// A copy activity Oracle Service Cloud source.
type OracleServiceCloudSourceOutput struct{ *pulumi.OutputState }

func (OracleServiceCloudSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleServiceCloudSource)(nil)).Elem()
}

func (o OracleServiceCloudSourceOutput) ToOracleServiceCloudSourceOutput() OracleServiceCloudSourceOutput {
	return o
}

func (o OracleServiceCloudSourceOutput) ToOracleServiceCloudSourceOutputWithContext(ctx context.Context) OracleServiceCloudSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o OracleServiceCloudSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o OracleServiceCloudSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o OracleServiceCloudSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o OracleServiceCloudSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o OracleServiceCloudSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o OracleServiceCloudSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o OracleServiceCloudSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'OracleServiceCloudSource'.
func (o OracleServiceCloudSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OracleServiceCloudSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Oracle Service Cloud source.
type OracleServiceCloudSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'OracleServiceCloudSource'.
	Type string `pulumi:"type"`
}

// A copy activity Oracle Service Cloud source.
type OracleServiceCloudSourceResponseOutput struct{ *pulumi.OutputState }

func (OracleServiceCloudSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleServiceCloudSourceResponse)(nil)).Elem()
}

func (o OracleServiceCloudSourceResponseOutput) ToOracleServiceCloudSourceResponseOutput() OracleServiceCloudSourceResponseOutput {
	return o
}

func (o OracleServiceCloudSourceResponseOutput) ToOracleServiceCloudSourceResponseOutputWithContext(ctx context.Context) OracleServiceCloudSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o OracleServiceCloudSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o OracleServiceCloudSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o OracleServiceCloudSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o OracleServiceCloudSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o OracleServiceCloudSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o OracleServiceCloudSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o OracleServiceCloudSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleServiceCloudSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'OracleServiceCloudSource'.
func (o OracleServiceCloudSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OracleServiceCloudSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Oracle sink.
type OracleSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'OracleSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// OracleSinkInput is an input type that accepts OracleSinkArgs and OracleSinkOutput values.
// You can construct a concrete instance of `OracleSinkInput` via:
//
//	OracleSinkArgs{...}
type OracleSinkInput interface {
	pulumi.Input

	ToOracleSinkOutput() OracleSinkOutput
	ToOracleSinkOutputWithContext(context.Context) OracleSinkOutput
}

// A copy activity Oracle sink.
type OracleSinkArgs struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript pulumi.Input `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount pulumi.Input `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait pulumi.Input `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'OracleSink'.
	Type pulumi.StringInput `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize pulumi.Input `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout pulumi.Input `pulumi:"writeBatchTimeout"`
}

func (OracleSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleSink)(nil)).Elem()
}

func (i OracleSinkArgs) ToOracleSinkOutput() OracleSinkOutput {
	return i.ToOracleSinkOutputWithContext(context.Background())
}

func (i OracleSinkArgs) ToOracleSinkOutputWithContext(ctx context.Context) OracleSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleSinkOutput)
}

// A copy activity Oracle sink.
type OracleSinkOutput struct{ *pulumi.OutputState }

func (OracleSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleSink)(nil)).Elem()
}

func (o OracleSinkOutput) ToOracleSinkOutput() OracleSinkOutput {
	return o
}

func (o OracleSinkOutput) ToOracleSinkOutputWithContext(ctx context.Context) OracleSinkOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o OracleSinkOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleSink) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o OracleSinkOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleSink) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// SQL pre-copy script. Type: string (or Expression with resultType string).
func (o OracleSinkOutput) PreCopyScript() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleSink) interface{} { return v.PreCopyScript }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o OracleSinkOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleSink) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o OracleSinkOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleSink) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'OracleSink'.
func (o OracleSinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OracleSink) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o OracleSinkOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleSink) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o OracleSinkOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleSink) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity Oracle sink.
type OracleSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'OracleSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Oracle sink.
type OracleSinkResponseOutput struct{ *pulumi.OutputState }

func (OracleSinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleSinkResponse)(nil)).Elem()
}

func (o OracleSinkResponseOutput) ToOracleSinkResponseOutput() OracleSinkResponseOutput {
	return o
}

func (o OracleSinkResponseOutput) ToOracleSinkResponseOutputWithContext(ctx context.Context) OracleSinkResponseOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o OracleSinkResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleSinkResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o OracleSinkResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleSinkResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// SQL pre-copy script. Type: string (or Expression with resultType string).
func (o OracleSinkResponseOutput) PreCopyScript() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleSinkResponse) interface{} { return v.PreCopyScript }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o OracleSinkResponseOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleSinkResponse) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o OracleSinkResponseOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleSinkResponse) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'OracleSink'.
func (o OracleSinkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OracleSinkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o OracleSinkResponseOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleSinkResponse) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o OracleSinkResponseOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleSinkResponse) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity Oracle source.
type OracleSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Oracle reader query. Type: string (or Expression with resultType string).
	OracleReaderQuery interface{} `pulumi:"oracleReaderQuery"`
	// The partition mechanism that will be used for Oracle read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for Oracle source partitioning.
	PartitionSettings *OraclePartitionSettings `pulumi:"partitionSettings"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'OracleSource'.
	Type string `pulumi:"type"`
}

// OracleSourceInput is an input type that accepts OracleSourceArgs and OracleSourceOutput values.
// You can construct a concrete instance of `OracleSourceInput` via:
//
//	OracleSourceArgs{...}
type OracleSourceInput interface {
	pulumi.Input

	ToOracleSourceOutput() OracleSourceOutput
	ToOracleSourceOutputWithContext(context.Context) OracleSourceOutput
}

// A copy activity Oracle source.
type OracleSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Oracle reader query. Type: string (or Expression with resultType string).
	OracleReaderQuery pulumi.Input `pulumi:"oracleReaderQuery"`
	// The partition mechanism that will be used for Oracle read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange".
	PartitionOption pulumi.Input `pulumi:"partitionOption"`
	// The settings that will be leveraged for Oracle source partitioning.
	PartitionSettings OraclePartitionSettingsPtrInput `pulumi:"partitionSettings"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'OracleSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (OracleSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleSource)(nil)).Elem()
}

func (i OracleSourceArgs) ToOracleSourceOutput() OracleSourceOutput {
	return i.ToOracleSourceOutputWithContext(context.Background())
}

func (i OracleSourceArgs) ToOracleSourceOutputWithContext(ctx context.Context) OracleSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleSourceOutput)
}

// A copy activity Oracle source.
type OracleSourceOutput struct{ *pulumi.OutputState }

func (OracleSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleSource)(nil)).Elem()
}

func (o OracleSourceOutput) ToOracleSourceOutput() OracleSourceOutput {
	return o
}

func (o OracleSourceOutput) ToOracleSourceOutputWithContext(ctx context.Context) OracleSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o OracleSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o OracleSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o OracleSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Oracle reader query. Type: string (or Expression with resultType string).
func (o OracleSourceOutput) OracleReaderQuery() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleSource) interface{} { return v.OracleReaderQuery }).(pulumi.AnyOutput)
}

// The partition mechanism that will be used for Oracle read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange".
func (o OracleSourceOutput) PartitionOption() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleSource) interface{} { return v.PartitionOption }).(pulumi.AnyOutput)
}

// The settings that will be leveraged for Oracle source partitioning.
func (o OracleSourceOutput) PartitionSettings() OraclePartitionSettingsPtrOutput {
	return o.ApplyT(func(v OracleSource) *OraclePartitionSettings { return v.PartitionSettings }).(OraclePartitionSettingsPtrOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o OracleSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o OracleSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o OracleSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'OracleSource'.
func (o OracleSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OracleSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Oracle source.
type OracleSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Oracle reader query. Type: string (or Expression with resultType string).
	OracleReaderQuery interface{} `pulumi:"oracleReaderQuery"`
	// The partition mechanism that will be used for Oracle read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for Oracle source partitioning.
	PartitionSettings *OraclePartitionSettingsResponse `pulumi:"partitionSettings"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'OracleSource'.
	Type string `pulumi:"type"`
}

// A copy activity Oracle source.
type OracleSourceResponseOutput struct{ *pulumi.OutputState }

func (OracleSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleSourceResponse)(nil)).Elem()
}

func (o OracleSourceResponseOutput) ToOracleSourceResponseOutput() OracleSourceResponseOutput {
	return o
}

func (o OracleSourceResponseOutput) ToOracleSourceResponseOutputWithContext(ctx context.Context) OracleSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o OracleSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o OracleSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o OracleSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Oracle reader query. Type: string (or Expression with resultType string).
func (o OracleSourceResponseOutput) OracleReaderQuery() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleSourceResponse) interface{} { return v.OracleReaderQuery }).(pulumi.AnyOutput)
}

// The partition mechanism that will be used for Oracle read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange".
func (o OracleSourceResponseOutput) PartitionOption() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleSourceResponse) interface{} { return v.PartitionOption }).(pulumi.AnyOutput)
}

// The settings that will be leveraged for Oracle source partitioning.
func (o OracleSourceResponseOutput) PartitionSettings() OraclePartitionSettingsResponsePtrOutput {
	return o.ApplyT(func(v OracleSourceResponse) *OraclePartitionSettingsResponse { return v.PartitionSettings }).(OraclePartitionSettingsResponsePtrOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o OracleSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o OracleSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o OracleSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'OracleSource'.
func (o OracleSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OracleSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The on-premises Oracle database dataset.
type OracleTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the on-premises Oracle database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'OracleTable'.
	Type string `pulumi:"type"`
}

// OracleTableDatasetInput is an input type that accepts OracleTableDatasetArgs and OracleTableDatasetOutput values.
// You can construct a concrete instance of `OracleTableDatasetInput` via:
//
//	OracleTableDatasetArgs{...}
type OracleTableDatasetInput interface {
	pulumi.Input

	ToOracleTableDatasetOutput() OracleTableDatasetOutput
	ToOracleTableDatasetOutputWithContext(context.Context) OracleTableDatasetOutput
}

// The on-premises Oracle database dataset.
type OracleTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the on-premises Oracle database. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'OracleTable'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (OracleTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleTableDataset)(nil)).Elem()
}

func (i OracleTableDatasetArgs) ToOracleTableDatasetOutput() OracleTableDatasetOutput {
	return i.ToOracleTableDatasetOutputWithContext(context.Background())
}

func (i OracleTableDatasetArgs) ToOracleTableDatasetOutputWithContext(ctx context.Context) OracleTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleTableDatasetOutput)
}

// The on-premises Oracle database dataset.
type OracleTableDatasetOutput struct{ *pulumi.OutputState }

func (OracleTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleTableDataset)(nil)).Elem()
}

func (o OracleTableDatasetOutput) ToOracleTableDatasetOutput() OracleTableDatasetOutput {
	return o
}

func (o OracleTableDatasetOutput) ToOracleTableDatasetOutputWithContext(ctx context.Context) OracleTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o OracleTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v OracleTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o OracleTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o OracleTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v OracleTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o OracleTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v OracleTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o OracleTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v OracleTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o OracleTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o OracleTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the on-premises Oracle database. Type: string (or Expression with resultType string).
func (o OracleTableDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleTableDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o OracleTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'OracleTable'.
func (o OracleTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OracleTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The on-premises Oracle database dataset.
type OracleTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the on-premises Oracle database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'OracleTable'.
	Type string `pulumi:"type"`
}

// The on-premises Oracle database dataset.
type OracleTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (OracleTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleTableDatasetResponse)(nil)).Elem()
}

func (o OracleTableDatasetResponseOutput) ToOracleTableDatasetResponseOutput() OracleTableDatasetResponseOutput {
	return o
}

func (o OracleTableDatasetResponseOutput) ToOracleTableDatasetResponseOutputWithContext(ctx context.Context) OracleTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o OracleTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v OracleTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o OracleTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o OracleTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v OracleTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o OracleTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v OracleTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o OracleTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v OracleTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o OracleTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o OracleTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the on-premises Oracle database. Type: string (or Expression with resultType string).
func (o OracleTableDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleTableDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o OracleTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v OracleTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'OracleTable'.
func (o OracleTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OracleTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// ORC dataset.
type OrcDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The location of the ORC data storage.
	Location interface{} `pulumi:"location"`
	// The data orcCompressionCodec. Type: string (or Expression with resultType string).
	OrcCompressionCodec interface{} `pulumi:"orcCompressionCodec"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Orc'.
	Type string `pulumi:"type"`
}

// OrcDatasetInput is an input type that accepts OrcDatasetArgs and OrcDatasetOutput values.
// You can construct a concrete instance of `OrcDatasetInput` via:
//
//	OrcDatasetArgs{...}
type OrcDatasetInput interface {
	pulumi.Input

	ToOrcDatasetOutput() OrcDatasetOutput
	ToOrcDatasetOutputWithContext(context.Context) OrcDatasetOutput
}

// ORC dataset.
type OrcDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// The location of the ORC data storage.
	Location pulumi.Input `pulumi:"location"`
	// The data orcCompressionCodec. Type: string (or Expression with resultType string).
	OrcCompressionCodec pulumi.Input `pulumi:"orcCompressionCodec"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Orc'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (OrcDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrcDataset)(nil)).Elem()
}

func (i OrcDatasetArgs) ToOrcDatasetOutput() OrcDatasetOutput {
	return i.ToOrcDatasetOutputWithContext(context.Background())
}

func (i OrcDatasetArgs) ToOrcDatasetOutputWithContext(ctx context.Context) OrcDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrcDatasetOutput)
}

// ORC dataset.
type OrcDatasetOutput struct{ *pulumi.OutputState }

func (OrcDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrcDataset)(nil)).Elem()
}

func (o OrcDatasetOutput) ToOrcDatasetOutput() OrcDatasetOutput {
	return o
}

func (o OrcDatasetOutput) ToOrcDatasetOutputWithContext(ctx context.Context) OrcDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o OrcDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v OrcDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o OrcDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrcDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o OrcDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v OrcDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o OrcDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v OrcDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// The location of the ORC data storage.
func (o OrcDatasetOutput) Location() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcDataset) interface{} { return v.Location }).(pulumi.AnyOutput)
}

// The data orcCompressionCodec. Type: string (or Expression with resultType string).
func (o OrcDatasetOutput) OrcCompressionCodec() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcDataset) interface{} { return v.OrcCompressionCodec }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o OrcDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v OrcDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o OrcDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o OrcDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'Orc'.
func (o OrcDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OrcDataset) string { return v.Type }).(pulumi.StringOutput)
}

// ORC dataset.
type OrcDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The location of the ORC data storage.
	Location interface{} `pulumi:"location"`
	// The data orcCompressionCodec. Type: string (or Expression with resultType string).
	OrcCompressionCodec interface{} `pulumi:"orcCompressionCodec"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Orc'.
	Type string `pulumi:"type"`
}

// ORC dataset.
type OrcDatasetResponseOutput struct{ *pulumi.OutputState }

func (OrcDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrcDatasetResponse)(nil)).Elem()
}

func (o OrcDatasetResponseOutput) ToOrcDatasetResponseOutput() OrcDatasetResponseOutput {
	return o
}

func (o OrcDatasetResponseOutput) ToOrcDatasetResponseOutputWithContext(ctx context.Context) OrcDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o OrcDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v OrcDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o OrcDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrcDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o OrcDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v OrcDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o OrcDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v OrcDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// The location of the ORC data storage.
func (o OrcDatasetResponseOutput) Location() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcDatasetResponse) interface{} { return v.Location }).(pulumi.AnyOutput)
}

// The data orcCompressionCodec. Type: string (or Expression with resultType string).
func (o OrcDatasetResponseOutput) OrcCompressionCodec() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcDatasetResponse) interface{} { return v.OrcCompressionCodec }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o OrcDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v OrcDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o OrcDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o OrcDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'Orc'.
func (o OrcDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OrcDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The data stored in Optimized Row Columnar (ORC) format.
type OrcFormat struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer interface{} `pulumi:"deserializer"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer interface{} `pulumi:"serializer"`
	// Type of dataset storage format.
	// Expected value is 'OrcFormat'.
	Type string `pulumi:"type"`
}

// OrcFormatInput is an input type that accepts OrcFormatArgs and OrcFormatOutput values.
// You can construct a concrete instance of `OrcFormatInput` via:
//
//	OrcFormatArgs{...}
type OrcFormatInput interface {
	pulumi.Input

	ToOrcFormatOutput() OrcFormatOutput
	ToOrcFormatOutputWithContext(context.Context) OrcFormatOutput
}

// The data stored in Optimized Row Columnar (ORC) format.
type OrcFormatArgs struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer pulumi.Input `pulumi:"deserializer"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer pulumi.Input `pulumi:"serializer"`
	// Type of dataset storage format.
	// Expected value is 'OrcFormat'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (OrcFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrcFormat)(nil)).Elem()
}

func (i OrcFormatArgs) ToOrcFormatOutput() OrcFormatOutput {
	return i.ToOrcFormatOutputWithContext(context.Background())
}

func (i OrcFormatArgs) ToOrcFormatOutputWithContext(ctx context.Context) OrcFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrcFormatOutput)
}

func (i OrcFormatArgs) ToOrcFormatPtrOutput() OrcFormatPtrOutput {
	return i.ToOrcFormatPtrOutputWithContext(context.Background())
}

func (i OrcFormatArgs) ToOrcFormatPtrOutputWithContext(ctx context.Context) OrcFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrcFormatOutput).ToOrcFormatPtrOutputWithContext(ctx)
}

// OrcFormatPtrInput is an input type that accepts OrcFormatArgs, OrcFormatPtr and OrcFormatPtrOutput values.
// You can construct a concrete instance of `OrcFormatPtrInput` via:
//
//	        OrcFormatArgs{...}
//
//	or:
//
//	        nil
type OrcFormatPtrInput interface {
	pulumi.Input

	ToOrcFormatPtrOutput() OrcFormatPtrOutput
	ToOrcFormatPtrOutputWithContext(context.Context) OrcFormatPtrOutput
}

type orcFormatPtrType OrcFormatArgs

func OrcFormatPtr(v *OrcFormatArgs) OrcFormatPtrInput {
	return (*orcFormatPtrType)(v)
}

func (*orcFormatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OrcFormat)(nil)).Elem()
}

func (i *orcFormatPtrType) ToOrcFormatPtrOutput() OrcFormatPtrOutput {
	return i.ToOrcFormatPtrOutputWithContext(context.Background())
}

func (i *orcFormatPtrType) ToOrcFormatPtrOutputWithContext(ctx context.Context) OrcFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrcFormatPtrOutput)
}

// The data stored in Optimized Row Columnar (ORC) format.
type OrcFormatOutput struct{ *pulumi.OutputState }

func (OrcFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrcFormat)(nil)).Elem()
}

func (o OrcFormatOutput) ToOrcFormatOutput() OrcFormatOutput {
	return o
}

func (o OrcFormatOutput) ToOrcFormatOutputWithContext(ctx context.Context) OrcFormatOutput {
	return o
}

func (o OrcFormatOutput) ToOrcFormatPtrOutput() OrcFormatPtrOutput {
	return o.ToOrcFormatPtrOutputWithContext(context.Background())
}

func (o OrcFormatOutput) ToOrcFormatPtrOutputWithContext(ctx context.Context) OrcFormatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OrcFormat) *OrcFormat {
		return &v
	}).(OrcFormatPtrOutput)
}

// Deserializer. Type: string (or Expression with resultType string).
func (o OrcFormatOutput) Deserializer() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcFormat) interface{} { return v.Deserializer }).(pulumi.AnyOutput)
}

// Serializer. Type: string (or Expression with resultType string).
func (o OrcFormatOutput) Serializer() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcFormat) interface{} { return v.Serializer }).(pulumi.AnyOutput)
}

// Type of dataset storage format.
// Expected value is 'OrcFormat'.
func (o OrcFormatOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OrcFormat) string { return v.Type }).(pulumi.StringOutput)
}

type OrcFormatPtrOutput struct{ *pulumi.OutputState }

func (OrcFormatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrcFormat)(nil)).Elem()
}

func (o OrcFormatPtrOutput) ToOrcFormatPtrOutput() OrcFormatPtrOutput {
	return o
}

func (o OrcFormatPtrOutput) ToOrcFormatPtrOutputWithContext(ctx context.Context) OrcFormatPtrOutput {
	return o
}

func (o OrcFormatPtrOutput) Elem() OrcFormatOutput {
	return o.ApplyT(func(v *OrcFormat) OrcFormat {
		if v != nil {
			return *v
		}
		var ret OrcFormat
		return ret
	}).(OrcFormatOutput)
}

// Deserializer. Type: string (or Expression with resultType string).
func (o OrcFormatPtrOutput) Deserializer() pulumi.AnyOutput {
	return o.ApplyT(func(v *OrcFormat) interface{} {
		if v == nil {
			return nil
		}
		return v.Deserializer
	}).(pulumi.AnyOutput)
}

// Serializer. Type: string (or Expression with resultType string).
func (o OrcFormatPtrOutput) Serializer() pulumi.AnyOutput {
	return o.ApplyT(func(v *OrcFormat) interface{} {
		if v == nil {
			return nil
		}
		return v.Serializer
	}).(pulumi.AnyOutput)
}

// Type of dataset storage format.
// Expected value is 'OrcFormat'.
func (o OrcFormatPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrcFormat) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The data stored in Optimized Row Columnar (ORC) format.
type OrcFormatResponse struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer interface{} `pulumi:"deserializer"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer interface{} `pulumi:"serializer"`
	// Type of dataset storage format.
	// Expected value is 'OrcFormat'.
	Type string `pulumi:"type"`
}

// The data stored in Optimized Row Columnar (ORC) format.
type OrcFormatResponseOutput struct{ *pulumi.OutputState }

func (OrcFormatResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrcFormatResponse)(nil)).Elem()
}

func (o OrcFormatResponseOutput) ToOrcFormatResponseOutput() OrcFormatResponseOutput {
	return o
}

func (o OrcFormatResponseOutput) ToOrcFormatResponseOutputWithContext(ctx context.Context) OrcFormatResponseOutput {
	return o
}

// Deserializer. Type: string (or Expression with resultType string).
func (o OrcFormatResponseOutput) Deserializer() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcFormatResponse) interface{} { return v.Deserializer }).(pulumi.AnyOutput)
}

// Serializer. Type: string (or Expression with resultType string).
func (o OrcFormatResponseOutput) Serializer() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcFormatResponse) interface{} { return v.Serializer }).(pulumi.AnyOutput)
}

// Type of dataset storage format.
// Expected value is 'OrcFormat'.
func (o OrcFormatResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OrcFormatResponse) string { return v.Type }).(pulumi.StringOutput)
}

type OrcFormatResponsePtrOutput struct{ *pulumi.OutputState }

func (OrcFormatResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrcFormatResponse)(nil)).Elem()
}

func (o OrcFormatResponsePtrOutput) ToOrcFormatResponsePtrOutput() OrcFormatResponsePtrOutput {
	return o
}

func (o OrcFormatResponsePtrOutput) ToOrcFormatResponsePtrOutputWithContext(ctx context.Context) OrcFormatResponsePtrOutput {
	return o
}

func (o OrcFormatResponsePtrOutput) Elem() OrcFormatResponseOutput {
	return o.ApplyT(func(v *OrcFormatResponse) OrcFormatResponse {
		if v != nil {
			return *v
		}
		var ret OrcFormatResponse
		return ret
	}).(OrcFormatResponseOutput)
}

// Deserializer. Type: string (or Expression with resultType string).
func (o OrcFormatResponsePtrOutput) Deserializer() pulumi.AnyOutput {
	return o.ApplyT(func(v *OrcFormatResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Deserializer
	}).(pulumi.AnyOutput)
}

// Serializer. Type: string (or Expression with resultType string).
func (o OrcFormatResponsePtrOutput) Serializer() pulumi.AnyOutput {
	return o.ApplyT(func(v *OrcFormatResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Serializer
	}).(pulumi.AnyOutput)
}

// Type of dataset storage format.
// Expected value is 'OrcFormat'.
func (o OrcFormatResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrcFormatResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// A copy activity ORC sink.
type OrcSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// ORC format settings.
	FormatSettings *OrcWriteSettings `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// ORC store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy sink type.
	// Expected value is 'OrcSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// OrcSinkInput is an input type that accepts OrcSinkArgs and OrcSinkOutput values.
// You can construct a concrete instance of `OrcSinkInput` via:
//
//	OrcSinkArgs{...}
type OrcSinkInput interface {
	pulumi.Input

	ToOrcSinkOutput() OrcSinkOutput
	ToOrcSinkOutputWithContext(context.Context) OrcSinkOutput
}

// A copy activity ORC sink.
type OrcSinkArgs struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// ORC format settings.
	FormatSettings OrcWriteSettingsPtrInput `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount pulumi.Input `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait pulumi.Input `pulumi:"sinkRetryWait"`
	// ORC store settings.
	StoreSettings pulumi.Input `pulumi:"storeSettings"`
	// Copy sink type.
	// Expected value is 'OrcSink'.
	Type pulumi.StringInput `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize pulumi.Input `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout pulumi.Input `pulumi:"writeBatchTimeout"`
}

func (OrcSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrcSink)(nil)).Elem()
}

func (i OrcSinkArgs) ToOrcSinkOutput() OrcSinkOutput {
	return i.ToOrcSinkOutputWithContext(context.Background())
}

func (i OrcSinkArgs) ToOrcSinkOutputWithContext(ctx context.Context) OrcSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrcSinkOutput)
}

// A copy activity ORC sink.
type OrcSinkOutput struct{ *pulumi.OutputState }

func (OrcSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrcSink)(nil)).Elem()
}

func (o OrcSinkOutput) ToOrcSinkOutput() OrcSinkOutput {
	return o
}

func (o OrcSinkOutput) ToOrcSinkOutputWithContext(ctx context.Context) OrcSinkOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o OrcSinkOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcSink) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// ORC format settings.
func (o OrcSinkOutput) FormatSettings() OrcWriteSettingsPtrOutput {
	return o.ApplyT(func(v OrcSink) *OrcWriteSettings { return v.FormatSettings }).(OrcWriteSettingsPtrOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o OrcSinkOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcSink) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o OrcSinkOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcSink) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o OrcSinkOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcSink) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// ORC store settings.
func (o OrcSinkOutput) StoreSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcSink) interface{} { return v.StoreSettings }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'OrcSink'.
func (o OrcSinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OrcSink) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o OrcSinkOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcSink) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o OrcSinkOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcSink) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity ORC sink.
type OrcSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// ORC format settings.
	FormatSettings *OrcWriteSettingsResponse `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// ORC store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy sink type.
	// Expected value is 'OrcSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity ORC sink.
type OrcSinkResponseOutput struct{ *pulumi.OutputState }

func (OrcSinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrcSinkResponse)(nil)).Elem()
}

func (o OrcSinkResponseOutput) ToOrcSinkResponseOutput() OrcSinkResponseOutput {
	return o
}

func (o OrcSinkResponseOutput) ToOrcSinkResponseOutputWithContext(ctx context.Context) OrcSinkResponseOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o OrcSinkResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcSinkResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// ORC format settings.
func (o OrcSinkResponseOutput) FormatSettings() OrcWriteSettingsResponsePtrOutput {
	return o.ApplyT(func(v OrcSinkResponse) *OrcWriteSettingsResponse { return v.FormatSettings }).(OrcWriteSettingsResponsePtrOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o OrcSinkResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcSinkResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o OrcSinkResponseOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcSinkResponse) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o OrcSinkResponseOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcSinkResponse) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// ORC store settings.
func (o OrcSinkResponseOutput) StoreSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcSinkResponse) interface{} { return v.StoreSettings }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'OrcSink'.
func (o OrcSinkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OrcSinkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o OrcSinkResponseOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcSinkResponse) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o OrcSinkResponseOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcSinkResponse) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity ORC source.
type OrcSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// ORC store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'OrcSource'.
	Type string `pulumi:"type"`
}

// OrcSourceInput is an input type that accepts OrcSourceArgs and OrcSourceOutput values.
// You can construct a concrete instance of `OrcSourceInput` via:
//
//	OrcSourceArgs{...}
type OrcSourceInput interface {
	pulumi.Input

	ToOrcSourceOutput() OrcSourceOutput
	ToOrcSourceOutputWithContext(context.Context) OrcSourceOutput
}

// A copy activity ORC source.
type OrcSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// ORC store settings.
	StoreSettings pulumi.Input `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'OrcSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (OrcSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrcSource)(nil)).Elem()
}

func (i OrcSourceArgs) ToOrcSourceOutput() OrcSourceOutput {
	return i.ToOrcSourceOutputWithContext(context.Background())
}

func (i OrcSourceArgs) ToOrcSourceOutputWithContext(ctx context.Context) OrcSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrcSourceOutput)
}

// A copy activity ORC source.
type OrcSourceOutput struct{ *pulumi.OutputState }

func (OrcSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrcSource)(nil)).Elem()
}

func (o OrcSourceOutput) ToOrcSourceOutput() OrcSourceOutput {
	return o
}

func (o OrcSourceOutput) ToOrcSourceOutputWithContext(ctx context.Context) OrcSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o OrcSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o OrcSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o OrcSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o OrcSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o OrcSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// ORC store settings.
func (o OrcSourceOutput) StoreSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcSource) interface{} { return v.StoreSettings }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'OrcSource'.
func (o OrcSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OrcSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity ORC source.
type OrcSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// ORC store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'OrcSource'.
	Type string `pulumi:"type"`
}

// A copy activity ORC source.
type OrcSourceResponseOutput struct{ *pulumi.OutputState }

func (OrcSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrcSourceResponse)(nil)).Elem()
}

func (o OrcSourceResponseOutput) ToOrcSourceResponseOutput() OrcSourceResponseOutput {
	return o
}

func (o OrcSourceResponseOutput) ToOrcSourceResponseOutputWithContext(ctx context.Context) OrcSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o OrcSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o OrcSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o OrcSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o OrcSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o OrcSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// ORC store settings.
func (o OrcSourceResponseOutput) StoreSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcSourceResponse) interface{} { return v.StoreSettings }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'OrcSource'.
func (o OrcSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OrcSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Orc write settings.
type OrcWriteSettings struct {
	// Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
	FileNamePrefix interface{} `pulumi:"fileNamePrefix"`
	// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
	MaxRowsPerFile interface{} `pulumi:"maxRowsPerFile"`
	// The write setting type.
	// Expected value is 'OrcWriteSettings'.
	Type string `pulumi:"type"`
}

// OrcWriteSettingsInput is an input type that accepts OrcWriteSettingsArgs and OrcWriteSettingsOutput values.
// You can construct a concrete instance of `OrcWriteSettingsInput` via:
//
//	OrcWriteSettingsArgs{...}
type OrcWriteSettingsInput interface {
	pulumi.Input

	ToOrcWriteSettingsOutput() OrcWriteSettingsOutput
	ToOrcWriteSettingsOutputWithContext(context.Context) OrcWriteSettingsOutput
}

// Orc write settings.
type OrcWriteSettingsArgs struct {
	// Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
	FileNamePrefix pulumi.Input `pulumi:"fileNamePrefix"`
	// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
	MaxRowsPerFile pulumi.Input `pulumi:"maxRowsPerFile"`
	// The write setting type.
	// Expected value is 'OrcWriteSettings'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (OrcWriteSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrcWriteSettings)(nil)).Elem()
}

func (i OrcWriteSettingsArgs) ToOrcWriteSettingsOutput() OrcWriteSettingsOutput {
	return i.ToOrcWriteSettingsOutputWithContext(context.Background())
}

func (i OrcWriteSettingsArgs) ToOrcWriteSettingsOutputWithContext(ctx context.Context) OrcWriteSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrcWriteSettingsOutput)
}

func (i OrcWriteSettingsArgs) ToOrcWriteSettingsPtrOutput() OrcWriteSettingsPtrOutput {
	return i.ToOrcWriteSettingsPtrOutputWithContext(context.Background())
}

func (i OrcWriteSettingsArgs) ToOrcWriteSettingsPtrOutputWithContext(ctx context.Context) OrcWriteSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrcWriteSettingsOutput).ToOrcWriteSettingsPtrOutputWithContext(ctx)
}

// OrcWriteSettingsPtrInput is an input type that accepts OrcWriteSettingsArgs, OrcWriteSettingsPtr and OrcWriteSettingsPtrOutput values.
// You can construct a concrete instance of `OrcWriteSettingsPtrInput` via:
//
//	        OrcWriteSettingsArgs{...}
//
//	or:
//
//	        nil
type OrcWriteSettingsPtrInput interface {
	pulumi.Input

	ToOrcWriteSettingsPtrOutput() OrcWriteSettingsPtrOutput
	ToOrcWriteSettingsPtrOutputWithContext(context.Context) OrcWriteSettingsPtrOutput
}

type orcWriteSettingsPtrType OrcWriteSettingsArgs

func OrcWriteSettingsPtr(v *OrcWriteSettingsArgs) OrcWriteSettingsPtrInput {
	return (*orcWriteSettingsPtrType)(v)
}

func (*orcWriteSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OrcWriteSettings)(nil)).Elem()
}

func (i *orcWriteSettingsPtrType) ToOrcWriteSettingsPtrOutput() OrcWriteSettingsPtrOutput {
	return i.ToOrcWriteSettingsPtrOutputWithContext(context.Background())
}

func (i *orcWriteSettingsPtrType) ToOrcWriteSettingsPtrOutputWithContext(ctx context.Context) OrcWriteSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrcWriteSettingsPtrOutput)
}

// Orc write settings.
type OrcWriteSettingsOutput struct{ *pulumi.OutputState }

func (OrcWriteSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrcWriteSettings)(nil)).Elem()
}

func (o OrcWriteSettingsOutput) ToOrcWriteSettingsOutput() OrcWriteSettingsOutput {
	return o
}

func (o OrcWriteSettingsOutput) ToOrcWriteSettingsOutputWithContext(ctx context.Context) OrcWriteSettingsOutput {
	return o
}

func (o OrcWriteSettingsOutput) ToOrcWriteSettingsPtrOutput() OrcWriteSettingsPtrOutput {
	return o.ToOrcWriteSettingsPtrOutputWithContext(context.Background())
}

func (o OrcWriteSettingsOutput) ToOrcWriteSettingsPtrOutputWithContext(ctx context.Context) OrcWriteSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OrcWriteSettings) *OrcWriteSettings {
		return &v
	}).(OrcWriteSettingsPtrOutput)
}

// Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
func (o OrcWriteSettingsOutput) FileNamePrefix() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcWriteSettings) interface{} { return v.FileNamePrefix }).(pulumi.AnyOutput)
}

// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
func (o OrcWriteSettingsOutput) MaxRowsPerFile() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcWriteSettings) interface{} { return v.MaxRowsPerFile }).(pulumi.AnyOutput)
}

// The write setting type.
// Expected value is 'OrcWriteSettings'.
func (o OrcWriteSettingsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OrcWriteSettings) string { return v.Type }).(pulumi.StringOutput)
}

type OrcWriteSettingsPtrOutput struct{ *pulumi.OutputState }

func (OrcWriteSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrcWriteSettings)(nil)).Elem()
}

func (o OrcWriteSettingsPtrOutput) ToOrcWriteSettingsPtrOutput() OrcWriteSettingsPtrOutput {
	return o
}

func (o OrcWriteSettingsPtrOutput) ToOrcWriteSettingsPtrOutputWithContext(ctx context.Context) OrcWriteSettingsPtrOutput {
	return o
}

func (o OrcWriteSettingsPtrOutput) Elem() OrcWriteSettingsOutput {
	return o.ApplyT(func(v *OrcWriteSettings) OrcWriteSettings {
		if v != nil {
			return *v
		}
		var ret OrcWriteSettings
		return ret
	}).(OrcWriteSettingsOutput)
}

// Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
func (o OrcWriteSettingsPtrOutput) FileNamePrefix() pulumi.AnyOutput {
	return o.ApplyT(func(v *OrcWriteSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.FileNamePrefix
	}).(pulumi.AnyOutput)
}

// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
func (o OrcWriteSettingsPtrOutput) MaxRowsPerFile() pulumi.AnyOutput {
	return o.ApplyT(func(v *OrcWriteSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxRowsPerFile
	}).(pulumi.AnyOutput)
}

// The write setting type.
// Expected value is 'OrcWriteSettings'.
func (o OrcWriteSettingsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrcWriteSettings) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Orc write settings.
type OrcWriteSettingsResponse struct {
	// Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
	FileNamePrefix interface{} `pulumi:"fileNamePrefix"`
	// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
	MaxRowsPerFile interface{} `pulumi:"maxRowsPerFile"`
	// The write setting type.
	// Expected value is 'OrcWriteSettings'.
	Type string `pulumi:"type"`
}

// Orc write settings.
type OrcWriteSettingsResponseOutput struct{ *pulumi.OutputState }

func (OrcWriteSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrcWriteSettingsResponse)(nil)).Elem()
}

func (o OrcWriteSettingsResponseOutput) ToOrcWriteSettingsResponseOutput() OrcWriteSettingsResponseOutput {
	return o
}

func (o OrcWriteSettingsResponseOutput) ToOrcWriteSettingsResponseOutputWithContext(ctx context.Context) OrcWriteSettingsResponseOutput {
	return o
}

// Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
func (o OrcWriteSettingsResponseOutput) FileNamePrefix() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcWriteSettingsResponse) interface{} { return v.FileNamePrefix }).(pulumi.AnyOutput)
}

// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
func (o OrcWriteSettingsResponseOutput) MaxRowsPerFile() pulumi.AnyOutput {
	return o.ApplyT(func(v OrcWriteSettingsResponse) interface{} { return v.MaxRowsPerFile }).(pulumi.AnyOutput)
}

// The write setting type.
// Expected value is 'OrcWriteSettings'.
func (o OrcWriteSettingsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OrcWriteSettingsResponse) string { return v.Type }).(pulumi.StringOutput)
}

type OrcWriteSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (OrcWriteSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrcWriteSettingsResponse)(nil)).Elem()
}

func (o OrcWriteSettingsResponsePtrOutput) ToOrcWriteSettingsResponsePtrOutput() OrcWriteSettingsResponsePtrOutput {
	return o
}

func (o OrcWriteSettingsResponsePtrOutput) ToOrcWriteSettingsResponsePtrOutputWithContext(ctx context.Context) OrcWriteSettingsResponsePtrOutput {
	return o
}

func (o OrcWriteSettingsResponsePtrOutput) Elem() OrcWriteSettingsResponseOutput {
	return o.ApplyT(func(v *OrcWriteSettingsResponse) OrcWriteSettingsResponse {
		if v != nil {
			return *v
		}
		var ret OrcWriteSettingsResponse
		return ret
	}).(OrcWriteSettingsResponseOutput)
}

// Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
func (o OrcWriteSettingsResponsePtrOutput) FileNamePrefix() pulumi.AnyOutput {
	return o.ApplyT(func(v *OrcWriteSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.FileNamePrefix
	}).(pulumi.AnyOutput)
}

// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
func (o OrcWriteSettingsResponsePtrOutput) MaxRowsPerFile() pulumi.AnyOutput {
	return o.ApplyT(func(v *OrcWriteSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxRowsPerFile
	}).(pulumi.AnyOutput)
}

// The write setting type.
// Expected value is 'OrcWriteSettings'.
func (o OrcWriteSettingsResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrcWriteSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Package store for the SSIS integration runtime.
type PackageStore struct {
	// The name of the package store
	Name string `pulumi:"name"`
	// The package store linked service reference.
	PackageStoreLinkedService EntityReference `pulumi:"packageStoreLinkedService"`
}

// PackageStoreInput is an input type that accepts PackageStoreArgs and PackageStoreOutput values.
// You can construct a concrete instance of `PackageStoreInput` via:
//
//	PackageStoreArgs{...}
type PackageStoreInput interface {
	pulumi.Input

	ToPackageStoreOutput() PackageStoreOutput
	ToPackageStoreOutputWithContext(context.Context) PackageStoreOutput
}

// Package store for the SSIS integration runtime.
type PackageStoreArgs struct {
	// The name of the package store
	Name pulumi.StringInput `pulumi:"name"`
	// The package store linked service reference.
	PackageStoreLinkedService EntityReferenceInput `pulumi:"packageStoreLinkedService"`
}

func (PackageStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageStore)(nil)).Elem()
}

func (i PackageStoreArgs) ToPackageStoreOutput() PackageStoreOutput {
	return i.ToPackageStoreOutputWithContext(context.Background())
}

func (i PackageStoreArgs) ToPackageStoreOutputWithContext(ctx context.Context) PackageStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageStoreOutput)
}

// PackageStoreArrayInput is an input type that accepts PackageStoreArray and PackageStoreArrayOutput values.
// You can construct a concrete instance of `PackageStoreArrayInput` via:
//
//	PackageStoreArray{ PackageStoreArgs{...} }
type PackageStoreArrayInput interface {
	pulumi.Input

	ToPackageStoreArrayOutput() PackageStoreArrayOutput
	ToPackageStoreArrayOutputWithContext(context.Context) PackageStoreArrayOutput
}

type PackageStoreArray []PackageStoreInput

func (PackageStoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PackageStore)(nil)).Elem()
}

func (i PackageStoreArray) ToPackageStoreArrayOutput() PackageStoreArrayOutput {
	return i.ToPackageStoreArrayOutputWithContext(context.Background())
}

func (i PackageStoreArray) ToPackageStoreArrayOutputWithContext(ctx context.Context) PackageStoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageStoreArrayOutput)
}

// Package store for the SSIS integration runtime.
type PackageStoreOutput struct{ *pulumi.OutputState }

func (PackageStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageStore)(nil)).Elem()
}

func (o PackageStoreOutput) ToPackageStoreOutput() PackageStoreOutput {
	return o
}

func (o PackageStoreOutput) ToPackageStoreOutputWithContext(ctx context.Context) PackageStoreOutput {
	return o
}

// The name of the package store
func (o PackageStoreOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PackageStore) string { return v.Name }).(pulumi.StringOutput)
}

// The package store linked service reference.
func (o PackageStoreOutput) PackageStoreLinkedService() EntityReferenceOutput {
	return o.ApplyT(func(v PackageStore) EntityReference { return v.PackageStoreLinkedService }).(EntityReferenceOutput)
}

type PackageStoreArrayOutput struct{ *pulumi.OutputState }

func (PackageStoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PackageStore)(nil)).Elem()
}

func (o PackageStoreArrayOutput) ToPackageStoreArrayOutput() PackageStoreArrayOutput {
	return o
}

func (o PackageStoreArrayOutput) ToPackageStoreArrayOutputWithContext(ctx context.Context) PackageStoreArrayOutput {
	return o
}

func (o PackageStoreArrayOutput) Index(i pulumi.IntInput) PackageStoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PackageStore {
		return vs[0].([]PackageStore)[vs[1].(int)]
	}).(PackageStoreOutput)
}

// Package store for the SSIS integration runtime.
type PackageStoreResponse struct {
	// The name of the package store
	Name string `pulumi:"name"`
	// The package store linked service reference.
	PackageStoreLinkedService EntityReferenceResponse `pulumi:"packageStoreLinkedService"`
}

// Package store for the SSIS integration runtime.
type PackageStoreResponseOutput struct{ *pulumi.OutputState }

func (PackageStoreResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageStoreResponse)(nil)).Elem()
}

func (o PackageStoreResponseOutput) ToPackageStoreResponseOutput() PackageStoreResponseOutput {
	return o
}

func (o PackageStoreResponseOutput) ToPackageStoreResponseOutputWithContext(ctx context.Context) PackageStoreResponseOutput {
	return o
}

// The name of the package store
func (o PackageStoreResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PackageStoreResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The package store linked service reference.
func (o PackageStoreResponseOutput) PackageStoreLinkedService() EntityReferenceResponseOutput {
	return o.ApplyT(func(v PackageStoreResponse) EntityReferenceResponse { return v.PackageStoreLinkedService }).(EntityReferenceResponseOutput)
}

type PackageStoreResponseArrayOutput struct{ *pulumi.OutputState }

func (PackageStoreResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PackageStoreResponse)(nil)).Elem()
}

func (o PackageStoreResponseArrayOutput) ToPackageStoreResponseArrayOutput() PackageStoreResponseArrayOutput {
	return o
}

func (o PackageStoreResponseArrayOutput) ToPackageStoreResponseArrayOutputWithContext(ctx context.Context) PackageStoreResponseArrayOutput {
	return o
}

func (o PackageStoreResponseArrayOutput) Index(i pulumi.IntInput) PackageStoreResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PackageStoreResponse {
		return vs[0].([]PackageStoreResponse)[vs[1].(int)]
	}).(PackageStoreResponseOutput)
}

// Definition of a single parameter for an entity.
type ParameterSpecification struct {
	// Default value of parameter.
	DefaultValue interface{} `pulumi:"defaultValue"`
	// Parameter type.
	Type string `pulumi:"type"`
}

// ParameterSpecificationInput is an input type that accepts ParameterSpecificationArgs and ParameterSpecificationOutput values.
// You can construct a concrete instance of `ParameterSpecificationInput` via:
//
//	ParameterSpecificationArgs{...}
type ParameterSpecificationInput interface {
	pulumi.Input

	ToParameterSpecificationOutput() ParameterSpecificationOutput
	ToParameterSpecificationOutputWithContext(context.Context) ParameterSpecificationOutput
}

// Definition of a single parameter for an entity.
type ParameterSpecificationArgs struct {
	// Default value of parameter.
	DefaultValue pulumi.Input `pulumi:"defaultValue"`
	// Parameter type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ParameterSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterSpecification)(nil)).Elem()
}

func (i ParameterSpecificationArgs) ToParameterSpecificationOutput() ParameterSpecificationOutput {
	return i.ToParameterSpecificationOutputWithContext(context.Background())
}

func (i ParameterSpecificationArgs) ToParameterSpecificationOutputWithContext(ctx context.Context) ParameterSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterSpecificationOutput)
}

// ParameterSpecificationMapInput is an input type that accepts ParameterSpecificationMap and ParameterSpecificationMapOutput values.
// You can construct a concrete instance of `ParameterSpecificationMapInput` via:
//
//	ParameterSpecificationMap{ "key": ParameterSpecificationArgs{...} }
type ParameterSpecificationMapInput interface {
	pulumi.Input

	ToParameterSpecificationMapOutput() ParameterSpecificationMapOutput
	ToParameterSpecificationMapOutputWithContext(context.Context) ParameterSpecificationMapOutput
}

type ParameterSpecificationMap map[string]ParameterSpecificationInput

func (ParameterSpecificationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterSpecification)(nil)).Elem()
}

func (i ParameterSpecificationMap) ToParameterSpecificationMapOutput() ParameterSpecificationMapOutput {
	return i.ToParameterSpecificationMapOutputWithContext(context.Background())
}

func (i ParameterSpecificationMap) ToParameterSpecificationMapOutputWithContext(ctx context.Context) ParameterSpecificationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterSpecificationMapOutput)
}

// Definition of a single parameter for an entity.
type ParameterSpecificationOutput struct{ *pulumi.OutputState }

func (ParameterSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterSpecification)(nil)).Elem()
}

func (o ParameterSpecificationOutput) ToParameterSpecificationOutput() ParameterSpecificationOutput {
	return o
}

func (o ParameterSpecificationOutput) ToParameterSpecificationOutputWithContext(ctx context.Context) ParameterSpecificationOutput {
	return o
}

// Default value of parameter.
func (o ParameterSpecificationOutput) DefaultValue() pulumi.AnyOutput {
	return o.ApplyT(func(v ParameterSpecification) interface{} { return v.DefaultValue }).(pulumi.AnyOutput)
}

// Parameter type.
func (o ParameterSpecificationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterSpecification) string { return v.Type }).(pulumi.StringOutput)
}

type ParameterSpecificationMapOutput struct{ *pulumi.OutputState }

func (ParameterSpecificationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterSpecification)(nil)).Elem()
}

func (o ParameterSpecificationMapOutput) ToParameterSpecificationMapOutput() ParameterSpecificationMapOutput {
	return o
}

func (o ParameterSpecificationMapOutput) ToParameterSpecificationMapOutputWithContext(ctx context.Context) ParameterSpecificationMapOutput {
	return o
}

func (o ParameterSpecificationMapOutput) MapIndex(k pulumi.StringInput) ParameterSpecificationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ParameterSpecification {
		return vs[0].(map[string]ParameterSpecification)[vs[1].(string)]
	}).(ParameterSpecificationOutput)
}

// Definition of a single parameter for an entity.
type ParameterSpecificationResponse struct {
	// Default value of parameter.
	DefaultValue interface{} `pulumi:"defaultValue"`
	// Parameter type.
	Type string `pulumi:"type"`
}

// Definition of a single parameter for an entity.
type ParameterSpecificationResponseOutput struct{ *pulumi.OutputState }

func (ParameterSpecificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterSpecificationResponse)(nil)).Elem()
}

func (o ParameterSpecificationResponseOutput) ToParameterSpecificationResponseOutput() ParameterSpecificationResponseOutput {
	return o
}

func (o ParameterSpecificationResponseOutput) ToParameterSpecificationResponseOutputWithContext(ctx context.Context) ParameterSpecificationResponseOutput {
	return o
}

// Default value of parameter.
func (o ParameterSpecificationResponseOutput) DefaultValue() pulumi.AnyOutput {
	return o.ApplyT(func(v ParameterSpecificationResponse) interface{} { return v.DefaultValue }).(pulumi.AnyOutput)
}

// Parameter type.
func (o ParameterSpecificationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterSpecificationResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ParameterSpecificationResponseMapOutput struct{ *pulumi.OutputState }

func (ParameterSpecificationResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterSpecificationResponse)(nil)).Elem()
}

func (o ParameterSpecificationResponseMapOutput) ToParameterSpecificationResponseMapOutput() ParameterSpecificationResponseMapOutput {
	return o
}

func (o ParameterSpecificationResponseMapOutput) ToParameterSpecificationResponseMapOutputWithContext(ctx context.Context) ParameterSpecificationResponseMapOutput {
	return o
}

func (o ParameterSpecificationResponseMapOutput) MapIndex(k pulumi.StringInput) ParameterSpecificationResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ParameterSpecificationResponse {
		return vs[0].(map[string]ParameterSpecificationResponse)[vs[1].(string)]
	}).(ParameterSpecificationResponseOutput)
}

// Parquet dataset.
type ParquetDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compressionCodec. Type: string (or Expression with resultType string).
	CompressionCodec interface{} `pulumi:"compressionCodec"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The location of the parquet storage.
	Location interface{} `pulumi:"location"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Parquet'.
	Type string `pulumi:"type"`
}

// ParquetDatasetInput is an input type that accepts ParquetDatasetArgs and ParquetDatasetOutput values.
// You can construct a concrete instance of `ParquetDatasetInput` via:
//
//	ParquetDatasetArgs{...}
type ParquetDatasetInput interface {
	pulumi.Input

	ToParquetDatasetOutput() ParquetDatasetOutput
	ToParquetDatasetOutputWithContext(context.Context) ParquetDatasetOutput
}

// Parquet dataset.
type ParquetDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The data compressionCodec. Type: string (or Expression with resultType string).
	CompressionCodec pulumi.Input `pulumi:"compressionCodec"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// The location of the parquet storage.
	Location pulumi.Input `pulumi:"location"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Parquet'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ParquetDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParquetDataset)(nil)).Elem()
}

func (i ParquetDatasetArgs) ToParquetDatasetOutput() ParquetDatasetOutput {
	return i.ToParquetDatasetOutputWithContext(context.Background())
}

func (i ParquetDatasetArgs) ToParquetDatasetOutputWithContext(ctx context.Context) ParquetDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParquetDatasetOutput)
}

// Parquet dataset.
type ParquetDatasetOutput struct{ *pulumi.OutputState }

func (ParquetDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParquetDataset)(nil)).Elem()
}

func (o ParquetDatasetOutput) ToParquetDatasetOutput() ParquetDatasetOutput {
	return o
}

func (o ParquetDatasetOutput) ToParquetDatasetOutputWithContext(ctx context.Context) ParquetDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ParquetDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ParquetDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The data compressionCodec. Type: string (or Expression with resultType string).
func (o ParquetDatasetOutput) CompressionCodec() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetDataset) interface{} { return v.CompressionCodec }).(pulumi.AnyOutput)
}

// Dataset description.
func (o ParquetDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParquetDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o ParquetDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v ParquetDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o ParquetDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v ParquetDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// The location of the parquet storage.
func (o ParquetDatasetOutput) Location() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetDataset) interface{} { return v.Location }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o ParquetDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v ParquetDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o ParquetDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ParquetDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'Parquet'.
func (o ParquetDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ParquetDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Parquet dataset.
type ParquetDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compressionCodec. Type: string (or Expression with resultType string).
	CompressionCodec interface{} `pulumi:"compressionCodec"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The location of the parquet storage.
	Location interface{} `pulumi:"location"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Parquet'.
	Type string `pulumi:"type"`
}

// Parquet dataset.
type ParquetDatasetResponseOutput struct{ *pulumi.OutputState }

func (ParquetDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParquetDatasetResponse)(nil)).Elem()
}

func (o ParquetDatasetResponseOutput) ToParquetDatasetResponseOutput() ParquetDatasetResponseOutput {
	return o
}

func (o ParquetDatasetResponseOutput) ToParquetDatasetResponseOutputWithContext(ctx context.Context) ParquetDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ParquetDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ParquetDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The data compressionCodec. Type: string (or Expression with resultType string).
func (o ParquetDatasetResponseOutput) CompressionCodec() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetDatasetResponse) interface{} { return v.CompressionCodec }).(pulumi.AnyOutput)
}

// Dataset description.
func (o ParquetDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParquetDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o ParquetDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v ParquetDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o ParquetDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v ParquetDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// The location of the parquet storage.
func (o ParquetDatasetResponseOutput) Location() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetDatasetResponse) interface{} { return v.Location }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o ParquetDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ParquetDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o ParquetDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ParquetDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'Parquet'.
func (o ParquetDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ParquetDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The data stored in Parquet format.
type ParquetFormat struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer interface{} `pulumi:"deserializer"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer interface{} `pulumi:"serializer"`
	// Type of dataset storage format.
	// Expected value is 'ParquetFormat'.
	Type string `pulumi:"type"`
}

// ParquetFormatInput is an input type that accepts ParquetFormatArgs and ParquetFormatOutput values.
// You can construct a concrete instance of `ParquetFormatInput` via:
//
//	ParquetFormatArgs{...}
type ParquetFormatInput interface {
	pulumi.Input

	ToParquetFormatOutput() ParquetFormatOutput
	ToParquetFormatOutputWithContext(context.Context) ParquetFormatOutput
}

// The data stored in Parquet format.
type ParquetFormatArgs struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer pulumi.Input `pulumi:"deserializer"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer pulumi.Input `pulumi:"serializer"`
	// Type of dataset storage format.
	// Expected value is 'ParquetFormat'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ParquetFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParquetFormat)(nil)).Elem()
}

func (i ParquetFormatArgs) ToParquetFormatOutput() ParquetFormatOutput {
	return i.ToParquetFormatOutputWithContext(context.Background())
}

func (i ParquetFormatArgs) ToParquetFormatOutputWithContext(ctx context.Context) ParquetFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParquetFormatOutput)
}

func (i ParquetFormatArgs) ToParquetFormatPtrOutput() ParquetFormatPtrOutput {
	return i.ToParquetFormatPtrOutputWithContext(context.Background())
}

func (i ParquetFormatArgs) ToParquetFormatPtrOutputWithContext(ctx context.Context) ParquetFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParquetFormatOutput).ToParquetFormatPtrOutputWithContext(ctx)
}

// ParquetFormatPtrInput is an input type that accepts ParquetFormatArgs, ParquetFormatPtr and ParquetFormatPtrOutput values.
// You can construct a concrete instance of `ParquetFormatPtrInput` via:
//
//	        ParquetFormatArgs{...}
//
//	or:
//
//	        nil
type ParquetFormatPtrInput interface {
	pulumi.Input

	ToParquetFormatPtrOutput() ParquetFormatPtrOutput
	ToParquetFormatPtrOutputWithContext(context.Context) ParquetFormatPtrOutput
}

type parquetFormatPtrType ParquetFormatArgs

func ParquetFormatPtr(v *ParquetFormatArgs) ParquetFormatPtrInput {
	return (*parquetFormatPtrType)(v)
}

func (*parquetFormatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ParquetFormat)(nil)).Elem()
}

func (i *parquetFormatPtrType) ToParquetFormatPtrOutput() ParquetFormatPtrOutput {
	return i.ToParquetFormatPtrOutputWithContext(context.Background())
}

func (i *parquetFormatPtrType) ToParquetFormatPtrOutputWithContext(ctx context.Context) ParquetFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParquetFormatPtrOutput)
}

// The data stored in Parquet format.
type ParquetFormatOutput struct{ *pulumi.OutputState }

func (ParquetFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParquetFormat)(nil)).Elem()
}

func (o ParquetFormatOutput) ToParquetFormatOutput() ParquetFormatOutput {
	return o
}

func (o ParquetFormatOutput) ToParquetFormatOutputWithContext(ctx context.Context) ParquetFormatOutput {
	return o
}

func (o ParquetFormatOutput) ToParquetFormatPtrOutput() ParquetFormatPtrOutput {
	return o.ToParquetFormatPtrOutputWithContext(context.Background())
}

func (o ParquetFormatOutput) ToParquetFormatPtrOutputWithContext(ctx context.Context) ParquetFormatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ParquetFormat) *ParquetFormat {
		return &v
	}).(ParquetFormatPtrOutput)
}

// Deserializer. Type: string (or Expression with resultType string).
func (o ParquetFormatOutput) Deserializer() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetFormat) interface{} { return v.Deserializer }).(pulumi.AnyOutput)
}

// Serializer. Type: string (or Expression with resultType string).
func (o ParquetFormatOutput) Serializer() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetFormat) interface{} { return v.Serializer }).(pulumi.AnyOutput)
}

// Type of dataset storage format.
// Expected value is 'ParquetFormat'.
func (o ParquetFormatOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ParquetFormat) string { return v.Type }).(pulumi.StringOutput)
}

type ParquetFormatPtrOutput struct{ *pulumi.OutputState }

func (ParquetFormatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ParquetFormat)(nil)).Elem()
}

func (o ParquetFormatPtrOutput) ToParquetFormatPtrOutput() ParquetFormatPtrOutput {
	return o
}

func (o ParquetFormatPtrOutput) ToParquetFormatPtrOutputWithContext(ctx context.Context) ParquetFormatPtrOutput {
	return o
}

func (o ParquetFormatPtrOutput) Elem() ParquetFormatOutput {
	return o.ApplyT(func(v *ParquetFormat) ParquetFormat {
		if v != nil {
			return *v
		}
		var ret ParquetFormat
		return ret
	}).(ParquetFormatOutput)
}

// Deserializer. Type: string (or Expression with resultType string).
func (o ParquetFormatPtrOutput) Deserializer() pulumi.AnyOutput {
	return o.ApplyT(func(v *ParquetFormat) interface{} {
		if v == nil {
			return nil
		}
		return v.Deserializer
	}).(pulumi.AnyOutput)
}

// Serializer. Type: string (or Expression with resultType string).
func (o ParquetFormatPtrOutput) Serializer() pulumi.AnyOutput {
	return o.ApplyT(func(v *ParquetFormat) interface{} {
		if v == nil {
			return nil
		}
		return v.Serializer
	}).(pulumi.AnyOutput)
}

// Type of dataset storage format.
// Expected value is 'ParquetFormat'.
func (o ParquetFormatPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParquetFormat) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The data stored in Parquet format.
type ParquetFormatResponse struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer interface{} `pulumi:"deserializer"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer interface{} `pulumi:"serializer"`
	// Type of dataset storage format.
	// Expected value is 'ParquetFormat'.
	Type string `pulumi:"type"`
}

// The data stored in Parquet format.
type ParquetFormatResponseOutput struct{ *pulumi.OutputState }

func (ParquetFormatResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParquetFormatResponse)(nil)).Elem()
}

func (o ParquetFormatResponseOutput) ToParquetFormatResponseOutput() ParquetFormatResponseOutput {
	return o
}

func (o ParquetFormatResponseOutput) ToParquetFormatResponseOutputWithContext(ctx context.Context) ParquetFormatResponseOutput {
	return o
}

// Deserializer. Type: string (or Expression with resultType string).
func (o ParquetFormatResponseOutput) Deserializer() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetFormatResponse) interface{} { return v.Deserializer }).(pulumi.AnyOutput)
}

// Serializer. Type: string (or Expression with resultType string).
func (o ParquetFormatResponseOutput) Serializer() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetFormatResponse) interface{} { return v.Serializer }).(pulumi.AnyOutput)
}

// Type of dataset storage format.
// Expected value is 'ParquetFormat'.
func (o ParquetFormatResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ParquetFormatResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ParquetFormatResponsePtrOutput struct{ *pulumi.OutputState }

func (ParquetFormatResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ParquetFormatResponse)(nil)).Elem()
}

func (o ParquetFormatResponsePtrOutput) ToParquetFormatResponsePtrOutput() ParquetFormatResponsePtrOutput {
	return o
}

func (o ParquetFormatResponsePtrOutput) ToParquetFormatResponsePtrOutputWithContext(ctx context.Context) ParquetFormatResponsePtrOutput {
	return o
}

func (o ParquetFormatResponsePtrOutput) Elem() ParquetFormatResponseOutput {
	return o.ApplyT(func(v *ParquetFormatResponse) ParquetFormatResponse {
		if v != nil {
			return *v
		}
		var ret ParquetFormatResponse
		return ret
	}).(ParquetFormatResponseOutput)
}

// Deserializer. Type: string (or Expression with resultType string).
func (o ParquetFormatResponsePtrOutput) Deserializer() pulumi.AnyOutput {
	return o.ApplyT(func(v *ParquetFormatResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Deserializer
	}).(pulumi.AnyOutput)
}

// Serializer. Type: string (or Expression with resultType string).
func (o ParquetFormatResponsePtrOutput) Serializer() pulumi.AnyOutput {
	return o.ApplyT(func(v *ParquetFormatResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Serializer
	}).(pulumi.AnyOutput)
}

// Type of dataset storage format.
// Expected value is 'ParquetFormat'.
func (o ParquetFormatResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParquetFormatResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Parquet read settings.
type ParquetReadSettings struct {
	// Compression settings.
	CompressionProperties interface{} `pulumi:"compressionProperties"`
	// The read setting type.
	// Expected value is 'ParquetReadSettings'.
	Type string `pulumi:"type"`
}

// ParquetReadSettingsInput is an input type that accepts ParquetReadSettingsArgs and ParquetReadSettingsOutput values.
// You can construct a concrete instance of `ParquetReadSettingsInput` via:
//
//	ParquetReadSettingsArgs{...}
type ParquetReadSettingsInput interface {
	pulumi.Input

	ToParquetReadSettingsOutput() ParquetReadSettingsOutput
	ToParquetReadSettingsOutputWithContext(context.Context) ParquetReadSettingsOutput
}

// Parquet read settings.
type ParquetReadSettingsArgs struct {
	// Compression settings.
	CompressionProperties pulumi.Input `pulumi:"compressionProperties"`
	// The read setting type.
	// Expected value is 'ParquetReadSettings'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ParquetReadSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParquetReadSettings)(nil)).Elem()
}

func (i ParquetReadSettingsArgs) ToParquetReadSettingsOutput() ParquetReadSettingsOutput {
	return i.ToParquetReadSettingsOutputWithContext(context.Background())
}

func (i ParquetReadSettingsArgs) ToParquetReadSettingsOutputWithContext(ctx context.Context) ParquetReadSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParquetReadSettingsOutput)
}

func (i ParquetReadSettingsArgs) ToParquetReadSettingsPtrOutput() ParquetReadSettingsPtrOutput {
	return i.ToParquetReadSettingsPtrOutputWithContext(context.Background())
}

func (i ParquetReadSettingsArgs) ToParquetReadSettingsPtrOutputWithContext(ctx context.Context) ParquetReadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParquetReadSettingsOutput).ToParquetReadSettingsPtrOutputWithContext(ctx)
}

// ParquetReadSettingsPtrInput is an input type that accepts ParquetReadSettingsArgs, ParquetReadSettingsPtr and ParquetReadSettingsPtrOutput values.
// You can construct a concrete instance of `ParquetReadSettingsPtrInput` via:
//
//	        ParquetReadSettingsArgs{...}
//
//	or:
//
//	        nil
type ParquetReadSettingsPtrInput interface {
	pulumi.Input

	ToParquetReadSettingsPtrOutput() ParquetReadSettingsPtrOutput
	ToParquetReadSettingsPtrOutputWithContext(context.Context) ParquetReadSettingsPtrOutput
}

type parquetReadSettingsPtrType ParquetReadSettingsArgs

func ParquetReadSettingsPtr(v *ParquetReadSettingsArgs) ParquetReadSettingsPtrInput {
	return (*parquetReadSettingsPtrType)(v)
}

func (*parquetReadSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ParquetReadSettings)(nil)).Elem()
}

func (i *parquetReadSettingsPtrType) ToParquetReadSettingsPtrOutput() ParquetReadSettingsPtrOutput {
	return i.ToParquetReadSettingsPtrOutputWithContext(context.Background())
}

func (i *parquetReadSettingsPtrType) ToParquetReadSettingsPtrOutputWithContext(ctx context.Context) ParquetReadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParquetReadSettingsPtrOutput)
}

// Parquet read settings.
type ParquetReadSettingsOutput struct{ *pulumi.OutputState }

func (ParquetReadSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParquetReadSettings)(nil)).Elem()
}

func (o ParquetReadSettingsOutput) ToParquetReadSettingsOutput() ParquetReadSettingsOutput {
	return o
}

func (o ParquetReadSettingsOutput) ToParquetReadSettingsOutputWithContext(ctx context.Context) ParquetReadSettingsOutput {
	return o
}

func (o ParquetReadSettingsOutput) ToParquetReadSettingsPtrOutput() ParquetReadSettingsPtrOutput {
	return o.ToParquetReadSettingsPtrOutputWithContext(context.Background())
}

func (o ParquetReadSettingsOutput) ToParquetReadSettingsPtrOutputWithContext(ctx context.Context) ParquetReadSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ParquetReadSettings) *ParquetReadSettings {
		return &v
	}).(ParquetReadSettingsPtrOutput)
}

// Compression settings.
func (o ParquetReadSettingsOutput) CompressionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetReadSettings) interface{} { return v.CompressionProperties }).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'ParquetReadSettings'.
func (o ParquetReadSettingsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ParquetReadSettings) string { return v.Type }).(pulumi.StringOutput)
}

type ParquetReadSettingsPtrOutput struct{ *pulumi.OutputState }

func (ParquetReadSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ParquetReadSettings)(nil)).Elem()
}

func (o ParquetReadSettingsPtrOutput) ToParquetReadSettingsPtrOutput() ParquetReadSettingsPtrOutput {
	return o
}

func (o ParquetReadSettingsPtrOutput) ToParquetReadSettingsPtrOutputWithContext(ctx context.Context) ParquetReadSettingsPtrOutput {
	return o
}

func (o ParquetReadSettingsPtrOutput) Elem() ParquetReadSettingsOutput {
	return o.ApplyT(func(v *ParquetReadSettings) ParquetReadSettings {
		if v != nil {
			return *v
		}
		var ret ParquetReadSettings
		return ret
	}).(ParquetReadSettingsOutput)
}

// Compression settings.
func (o ParquetReadSettingsPtrOutput) CompressionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v *ParquetReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.CompressionProperties
	}).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'ParquetReadSettings'.
func (o ParquetReadSettingsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParquetReadSettings) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Parquet read settings.
type ParquetReadSettingsResponse struct {
	// Compression settings.
	CompressionProperties interface{} `pulumi:"compressionProperties"`
	// The read setting type.
	// Expected value is 'ParquetReadSettings'.
	Type string `pulumi:"type"`
}

// Parquet read settings.
type ParquetReadSettingsResponseOutput struct{ *pulumi.OutputState }

func (ParquetReadSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParquetReadSettingsResponse)(nil)).Elem()
}

func (o ParquetReadSettingsResponseOutput) ToParquetReadSettingsResponseOutput() ParquetReadSettingsResponseOutput {
	return o
}

func (o ParquetReadSettingsResponseOutput) ToParquetReadSettingsResponseOutputWithContext(ctx context.Context) ParquetReadSettingsResponseOutput {
	return o
}

// Compression settings.
func (o ParquetReadSettingsResponseOutput) CompressionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetReadSettingsResponse) interface{} { return v.CompressionProperties }).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'ParquetReadSettings'.
func (o ParquetReadSettingsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ParquetReadSettingsResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ParquetReadSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ParquetReadSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ParquetReadSettingsResponse)(nil)).Elem()
}

func (o ParquetReadSettingsResponsePtrOutput) ToParquetReadSettingsResponsePtrOutput() ParquetReadSettingsResponsePtrOutput {
	return o
}

func (o ParquetReadSettingsResponsePtrOutput) ToParquetReadSettingsResponsePtrOutputWithContext(ctx context.Context) ParquetReadSettingsResponsePtrOutput {
	return o
}

func (o ParquetReadSettingsResponsePtrOutput) Elem() ParquetReadSettingsResponseOutput {
	return o.ApplyT(func(v *ParquetReadSettingsResponse) ParquetReadSettingsResponse {
		if v != nil {
			return *v
		}
		var ret ParquetReadSettingsResponse
		return ret
	}).(ParquetReadSettingsResponseOutput)
}

// Compression settings.
func (o ParquetReadSettingsResponsePtrOutput) CompressionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v *ParquetReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.CompressionProperties
	}).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'ParquetReadSettings'.
func (o ParquetReadSettingsResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParquetReadSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// A copy activity Parquet sink.
type ParquetSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Parquet format settings.
	FormatSettings *ParquetWriteSettings `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Parquet store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy sink type.
	// Expected value is 'ParquetSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// ParquetSinkInput is an input type that accepts ParquetSinkArgs and ParquetSinkOutput values.
// You can construct a concrete instance of `ParquetSinkInput` via:
//
//	ParquetSinkArgs{...}
type ParquetSinkInput interface {
	pulumi.Input

	ToParquetSinkOutput() ParquetSinkOutput
	ToParquetSinkOutputWithContext(context.Context) ParquetSinkOutput
}

// A copy activity Parquet sink.
type ParquetSinkArgs struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// Parquet format settings.
	FormatSettings ParquetWriteSettingsPtrInput `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount pulumi.Input `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait pulumi.Input `pulumi:"sinkRetryWait"`
	// Parquet store settings.
	StoreSettings pulumi.Input `pulumi:"storeSettings"`
	// Copy sink type.
	// Expected value is 'ParquetSink'.
	Type pulumi.StringInput `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize pulumi.Input `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout pulumi.Input `pulumi:"writeBatchTimeout"`
}

func (ParquetSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParquetSink)(nil)).Elem()
}

func (i ParquetSinkArgs) ToParquetSinkOutput() ParquetSinkOutput {
	return i.ToParquetSinkOutputWithContext(context.Background())
}

func (i ParquetSinkArgs) ToParquetSinkOutputWithContext(ctx context.Context) ParquetSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParquetSinkOutput)
}

// A copy activity Parquet sink.
type ParquetSinkOutput struct{ *pulumi.OutputState }

func (ParquetSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParquetSink)(nil)).Elem()
}

func (o ParquetSinkOutput) ToParquetSinkOutput() ParquetSinkOutput {
	return o
}

func (o ParquetSinkOutput) ToParquetSinkOutputWithContext(ctx context.Context) ParquetSinkOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o ParquetSinkOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetSink) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Parquet format settings.
func (o ParquetSinkOutput) FormatSettings() ParquetWriteSettingsPtrOutput {
	return o.ApplyT(func(v ParquetSink) *ParquetWriteSettings { return v.FormatSettings }).(ParquetWriteSettingsPtrOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o ParquetSinkOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetSink) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o ParquetSinkOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetSink) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ParquetSinkOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetSink) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Parquet store settings.
func (o ParquetSinkOutput) StoreSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetSink) interface{} { return v.StoreSettings }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'ParquetSink'.
func (o ParquetSinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ParquetSink) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o ParquetSinkOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetSink) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ParquetSinkOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetSink) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity Parquet sink.
type ParquetSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Parquet format settings.
	FormatSettings *ParquetWriteSettingsResponse `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Parquet store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy sink type.
	// Expected value is 'ParquetSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Parquet sink.
type ParquetSinkResponseOutput struct{ *pulumi.OutputState }

func (ParquetSinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParquetSinkResponse)(nil)).Elem()
}

func (o ParquetSinkResponseOutput) ToParquetSinkResponseOutput() ParquetSinkResponseOutput {
	return o
}

func (o ParquetSinkResponseOutput) ToParquetSinkResponseOutputWithContext(ctx context.Context) ParquetSinkResponseOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o ParquetSinkResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetSinkResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Parquet format settings.
func (o ParquetSinkResponseOutput) FormatSettings() ParquetWriteSettingsResponsePtrOutput {
	return o.ApplyT(func(v ParquetSinkResponse) *ParquetWriteSettingsResponse { return v.FormatSettings }).(ParquetWriteSettingsResponsePtrOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o ParquetSinkResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetSinkResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o ParquetSinkResponseOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetSinkResponse) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ParquetSinkResponseOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetSinkResponse) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Parquet store settings.
func (o ParquetSinkResponseOutput) StoreSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetSinkResponse) interface{} { return v.StoreSettings }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'ParquetSink'.
func (o ParquetSinkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ParquetSinkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o ParquetSinkResponseOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetSinkResponse) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ParquetSinkResponseOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetSinkResponse) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity Parquet source.
type ParquetSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Parquet format settings.
	FormatSettings *ParquetReadSettings `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Parquet store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'ParquetSource'.
	Type string `pulumi:"type"`
}

// ParquetSourceInput is an input type that accepts ParquetSourceArgs and ParquetSourceOutput values.
// You can construct a concrete instance of `ParquetSourceInput` via:
//
//	ParquetSourceArgs{...}
type ParquetSourceInput interface {
	pulumi.Input

	ToParquetSourceOutput() ParquetSourceOutput
	ToParquetSourceOutputWithContext(context.Context) ParquetSourceOutput
}

// A copy activity Parquet source.
type ParquetSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// Parquet format settings.
	FormatSettings ParquetReadSettingsPtrInput `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Parquet store settings.
	StoreSettings pulumi.Input `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'ParquetSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ParquetSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParquetSource)(nil)).Elem()
}

func (i ParquetSourceArgs) ToParquetSourceOutput() ParquetSourceOutput {
	return i.ToParquetSourceOutputWithContext(context.Background())
}

func (i ParquetSourceArgs) ToParquetSourceOutputWithContext(ctx context.Context) ParquetSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParquetSourceOutput)
}

// A copy activity Parquet source.
type ParquetSourceOutput struct{ *pulumi.OutputState }

func (ParquetSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParquetSource)(nil)).Elem()
}

func (o ParquetSourceOutput) ToParquetSourceOutput() ParquetSourceOutput {
	return o
}

func (o ParquetSourceOutput) ToParquetSourceOutputWithContext(ctx context.Context) ParquetSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o ParquetSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o ParquetSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Parquet format settings.
func (o ParquetSourceOutput) FormatSettings() ParquetReadSettingsPtrOutput {
	return o.ApplyT(func(v ParquetSource) *ParquetReadSettings { return v.FormatSettings }).(ParquetReadSettingsPtrOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o ParquetSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o ParquetSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ParquetSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Parquet store settings.
func (o ParquetSourceOutput) StoreSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetSource) interface{} { return v.StoreSettings }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'ParquetSource'.
func (o ParquetSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ParquetSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Parquet source.
type ParquetSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Parquet format settings.
	FormatSettings *ParquetReadSettingsResponse `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Parquet store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'ParquetSource'.
	Type string `pulumi:"type"`
}

// A copy activity Parquet source.
type ParquetSourceResponseOutput struct{ *pulumi.OutputState }

func (ParquetSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParquetSourceResponse)(nil)).Elem()
}

func (o ParquetSourceResponseOutput) ToParquetSourceResponseOutput() ParquetSourceResponseOutput {
	return o
}

func (o ParquetSourceResponseOutput) ToParquetSourceResponseOutputWithContext(ctx context.Context) ParquetSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o ParquetSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o ParquetSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Parquet format settings.
func (o ParquetSourceResponseOutput) FormatSettings() ParquetReadSettingsResponsePtrOutput {
	return o.ApplyT(func(v ParquetSourceResponse) *ParquetReadSettingsResponse { return v.FormatSettings }).(ParquetReadSettingsResponsePtrOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o ParquetSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o ParquetSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ParquetSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Parquet store settings.
func (o ParquetSourceResponseOutput) StoreSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetSourceResponse) interface{} { return v.StoreSettings }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'ParquetSource'.
func (o ParquetSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ParquetSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Parquet write settings.
type ParquetWriteSettings struct {
	// Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
	FileNamePrefix interface{} `pulumi:"fileNamePrefix"`
	// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
	MaxRowsPerFile interface{} `pulumi:"maxRowsPerFile"`
	// The write setting type.
	// Expected value is 'ParquetWriteSettings'.
	Type string `pulumi:"type"`
}

// ParquetWriteSettingsInput is an input type that accepts ParquetWriteSettingsArgs and ParquetWriteSettingsOutput values.
// You can construct a concrete instance of `ParquetWriteSettingsInput` via:
//
//	ParquetWriteSettingsArgs{...}
type ParquetWriteSettingsInput interface {
	pulumi.Input

	ToParquetWriteSettingsOutput() ParquetWriteSettingsOutput
	ToParquetWriteSettingsOutputWithContext(context.Context) ParquetWriteSettingsOutput
}

// Parquet write settings.
type ParquetWriteSettingsArgs struct {
	// Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
	FileNamePrefix pulumi.Input `pulumi:"fileNamePrefix"`
	// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
	MaxRowsPerFile pulumi.Input `pulumi:"maxRowsPerFile"`
	// The write setting type.
	// Expected value is 'ParquetWriteSettings'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ParquetWriteSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParquetWriteSettings)(nil)).Elem()
}

func (i ParquetWriteSettingsArgs) ToParquetWriteSettingsOutput() ParquetWriteSettingsOutput {
	return i.ToParquetWriteSettingsOutputWithContext(context.Background())
}

func (i ParquetWriteSettingsArgs) ToParquetWriteSettingsOutputWithContext(ctx context.Context) ParquetWriteSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParquetWriteSettingsOutput)
}

func (i ParquetWriteSettingsArgs) ToParquetWriteSettingsPtrOutput() ParquetWriteSettingsPtrOutput {
	return i.ToParquetWriteSettingsPtrOutputWithContext(context.Background())
}

func (i ParquetWriteSettingsArgs) ToParquetWriteSettingsPtrOutputWithContext(ctx context.Context) ParquetWriteSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParquetWriteSettingsOutput).ToParquetWriteSettingsPtrOutputWithContext(ctx)
}

// ParquetWriteSettingsPtrInput is an input type that accepts ParquetWriteSettingsArgs, ParquetWriteSettingsPtr and ParquetWriteSettingsPtrOutput values.
// You can construct a concrete instance of `ParquetWriteSettingsPtrInput` via:
//
//	        ParquetWriteSettingsArgs{...}
//
//	or:
//
//	        nil
type ParquetWriteSettingsPtrInput interface {
	pulumi.Input

	ToParquetWriteSettingsPtrOutput() ParquetWriteSettingsPtrOutput
	ToParquetWriteSettingsPtrOutputWithContext(context.Context) ParquetWriteSettingsPtrOutput
}

type parquetWriteSettingsPtrType ParquetWriteSettingsArgs

func ParquetWriteSettingsPtr(v *ParquetWriteSettingsArgs) ParquetWriteSettingsPtrInput {
	return (*parquetWriteSettingsPtrType)(v)
}

func (*parquetWriteSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ParquetWriteSettings)(nil)).Elem()
}

func (i *parquetWriteSettingsPtrType) ToParquetWriteSettingsPtrOutput() ParquetWriteSettingsPtrOutput {
	return i.ToParquetWriteSettingsPtrOutputWithContext(context.Background())
}

func (i *parquetWriteSettingsPtrType) ToParquetWriteSettingsPtrOutputWithContext(ctx context.Context) ParquetWriteSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParquetWriteSettingsPtrOutput)
}

// Parquet write settings.
type ParquetWriteSettingsOutput struct{ *pulumi.OutputState }

func (ParquetWriteSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParquetWriteSettings)(nil)).Elem()
}

func (o ParquetWriteSettingsOutput) ToParquetWriteSettingsOutput() ParquetWriteSettingsOutput {
	return o
}

func (o ParquetWriteSettingsOutput) ToParquetWriteSettingsOutputWithContext(ctx context.Context) ParquetWriteSettingsOutput {
	return o
}

func (o ParquetWriteSettingsOutput) ToParquetWriteSettingsPtrOutput() ParquetWriteSettingsPtrOutput {
	return o.ToParquetWriteSettingsPtrOutputWithContext(context.Background())
}

func (o ParquetWriteSettingsOutput) ToParquetWriteSettingsPtrOutputWithContext(ctx context.Context) ParquetWriteSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ParquetWriteSettings) *ParquetWriteSettings {
		return &v
	}).(ParquetWriteSettingsPtrOutput)
}

// Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
func (o ParquetWriteSettingsOutput) FileNamePrefix() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetWriteSettings) interface{} { return v.FileNamePrefix }).(pulumi.AnyOutput)
}

// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
func (o ParquetWriteSettingsOutput) MaxRowsPerFile() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetWriteSettings) interface{} { return v.MaxRowsPerFile }).(pulumi.AnyOutput)
}

// The write setting type.
// Expected value is 'ParquetWriteSettings'.
func (o ParquetWriteSettingsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ParquetWriteSettings) string { return v.Type }).(pulumi.StringOutput)
}

type ParquetWriteSettingsPtrOutput struct{ *pulumi.OutputState }

func (ParquetWriteSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ParquetWriteSettings)(nil)).Elem()
}

func (o ParquetWriteSettingsPtrOutput) ToParquetWriteSettingsPtrOutput() ParquetWriteSettingsPtrOutput {
	return o
}

func (o ParquetWriteSettingsPtrOutput) ToParquetWriteSettingsPtrOutputWithContext(ctx context.Context) ParquetWriteSettingsPtrOutput {
	return o
}

func (o ParquetWriteSettingsPtrOutput) Elem() ParquetWriteSettingsOutput {
	return o.ApplyT(func(v *ParquetWriteSettings) ParquetWriteSettings {
		if v != nil {
			return *v
		}
		var ret ParquetWriteSettings
		return ret
	}).(ParquetWriteSettingsOutput)
}

// Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
func (o ParquetWriteSettingsPtrOutput) FileNamePrefix() pulumi.AnyOutput {
	return o.ApplyT(func(v *ParquetWriteSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.FileNamePrefix
	}).(pulumi.AnyOutput)
}

// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
func (o ParquetWriteSettingsPtrOutput) MaxRowsPerFile() pulumi.AnyOutput {
	return o.ApplyT(func(v *ParquetWriteSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxRowsPerFile
	}).(pulumi.AnyOutput)
}

// The write setting type.
// Expected value is 'ParquetWriteSettings'.
func (o ParquetWriteSettingsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParquetWriteSettings) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Parquet write settings.
type ParquetWriteSettingsResponse struct {
	// Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
	FileNamePrefix interface{} `pulumi:"fileNamePrefix"`
	// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
	MaxRowsPerFile interface{} `pulumi:"maxRowsPerFile"`
	// The write setting type.
	// Expected value is 'ParquetWriteSettings'.
	Type string `pulumi:"type"`
}

// Parquet write settings.
type ParquetWriteSettingsResponseOutput struct{ *pulumi.OutputState }

func (ParquetWriteSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParquetWriteSettingsResponse)(nil)).Elem()
}

func (o ParquetWriteSettingsResponseOutput) ToParquetWriteSettingsResponseOutput() ParquetWriteSettingsResponseOutput {
	return o
}

func (o ParquetWriteSettingsResponseOutput) ToParquetWriteSettingsResponseOutputWithContext(ctx context.Context) ParquetWriteSettingsResponseOutput {
	return o
}

// Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
func (o ParquetWriteSettingsResponseOutput) FileNamePrefix() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetWriteSettingsResponse) interface{} { return v.FileNamePrefix }).(pulumi.AnyOutput)
}

// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
func (o ParquetWriteSettingsResponseOutput) MaxRowsPerFile() pulumi.AnyOutput {
	return o.ApplyT(func(v ParquetWriteSettingsResponse) interface{} { return v.MaxRowsPerFile }).(pulumi.AnyOutput)
}

// The write setting type.
// Expected value is 'ParquetWriteSettings'.
func (o ParquetWriteSettingsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ParquetWriteSettingsResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ParquetWriteSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ParquetWriteSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ParquetWriteSettingsResponse)(nil)).Elem()
}

func (o ParquetWriteSettingsResponsePtrOutput) ToParquetWriteSettingsResponsePtrOutput() ParquetWriteSettingsResponsePtrOutput {
	return o
}

func (o ParquetWriteSettingsResponsePtrOutput) ToParquetWriteSettingsResponsePtrOutputWithContext(ctx context.Context) ParquetWriteSettingsResponsePtrOutput {
	return o
}

func (o ParquetWriteSettingsResponsePtrOutput) Elem() ParquetWriteSettingsResponseOutput {
	return o.ApplyT(func(v *ParquetWriteSettingsResponse) ParquetWriteSettingsResponse {
		if v != nil {
			return *v
		}
		var ret ParquetWriteSettingsResponse
		return ret
	}).(ParquetWriteSettingsResponseOutput)
}

// Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
func (o ParquetWriteSettingsResponsePtrOutput) FileNamePrefix() pulumi.AnyOutput {
	return o.ApplyT(func(v *ParquetWriteSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.FileNamePrefix
	}).(pulumi.AnyOutput)
}

// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
func (o ParquetWriteSettingsResponsePtrOutput) MaxRowsPerFile() pulumi.AnyOutput {
	return o.ApplyT(func(v *ParquetWriteSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxRowsPerFile
	}).(pulumi.AnyOutput)
}

// The write setting type.
// Expected value is 'ParquetWriteSettings'.
func (o ParquetWriteSettingsResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParquetWriteSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Paypal Service linked service.
type PaypalLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client ID associated with your PayPal application.
	ClientId interface{} `pulumi:"clientId"`
	// The client secret associated with your PayPal application.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The URL of the PayPal instance. (i.e. api.sandbox.paypal.com)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Paypal'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// PaypalLinkedServiceInput is an input type that accepts PaypalLinkedServiceArgs and PaypalLinkedServiceOutput values.
// You can construct a concrete instance of `PaypalLinkedServiceInput` via:
//
//	PaypalLinkedServiceArgs{...}
type PaypalLinkedServiceInput interface {
	pulumi.Input

	ToPaypalLinkedServiceOutput() PaypalLinkedServiceOutput
	ToPaypalLinkedServiceOutputWithContext(context.Context) PaypalLinkedServiceOutput
}

// Paypal Service linked service.
type PaypalLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The client ID associated with your PayPal application.
	ClientId pulumi.Input `pulumi:"clientId"`
	// The client secret associated with your PayPal application.
	ClientSecret pulumi.Input `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// The URL of the PayPal instance. (i.e. api.sandbox.paypal.com)
	Host pulumi.Input `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Paypal'.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
}

func (PaypalLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PaypalLinkedService)(nil)).Elem()
}

func (i PaypalLinkedServiceArgs) ToPaypalLinkedServiceOutput() PaypalLinkedServiceOutput {
	return i.ToPaypalLinkedServiceOutputWithContext(context.Background())
}

func (i PaypalLinkedServiceArgs) ToPaypalLinkedServiceOutputWithContext(ctx context.Context) PaypalLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PaypalLinkedServiceOutput)
}

// Paypal Service linked service.
type PaypalLinkedServiceOutput struct{ *pulumi.OutputState }

func (PaypalLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PaypalLinkedService)(nil)).Elem()
}

func (o PaypalLinkedServiceOutput) ToPaypalLinkedServiceOutput() PaypalLinkedServiceOutput {
	return o
}

func (o PaypalLinkedServiceOutput) ToPaypalLinkedServiceOutputWithContext(ctx context.Context) PaypalLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o PaypalLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v PaypalLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The client ID associated with your PayPal application.
func (o PaypalLinkedServiceOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalLinkedService) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret associated with your PayPal application.
func (o PaypalLinkedServiceOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalLinkedService) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o PaypalLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v PaypalLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o PaypalLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PaypalLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o PaypalLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PaypalLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The URL of the PayPal instance. (i.e. api.sandbox.paypal.com)
func (o PaypalLinkedServiceOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalLinkedService) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o PaypalLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v PaypalLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
// Expected value is 'Paypal'.
func (o PaypalLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PaypalLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o PaypalLinkedServiceOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalLinkedService) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o PaypalLinkedServiceOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalLinkedService) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o PaypalLinkedServiceOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalLinkedService) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// Paypal Service linked service.
type PaypalLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client ID associated with your PayPal application.
	ClientId interface{} `pulumi:"clientId"`
	// The client secret associated with your PayPal application.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The URL of the PayPal instance. (i.e. api.sandbox.paypal.com)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Paypal'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Paypal Service linked service.
type PaypalLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (PaypalLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PaypalLinkedServiceResponse)(nil)).Elem()
}

func (o PaypalLinkedServiceResponseOutput) ToPaypalLinkedServiceResponseOutput() PaypalLinkedServiceResponseOutput {
	return o
}

func (o PaypalLinkedServiceResponseOutput) ToPaypalLinkedServiceResponseOutputWithContext(ctx context.Context) PaypalLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o PaypalLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v PaypalLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The client ID associated with your PayPal application.
func (o PaypalLinkedServiceResponseOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalLinkedServiceResponse) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret associated with your PayPal application.
func (o PaypalLinkedServiceResponseOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalLinkedServiceResponse) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o PaypalLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v PaypalLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o PaypalLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PaypalLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o PaypalLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PaypalLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The URL of the PayPal instance. (i.e. api.sandbox.paypal.com)
func (o PaypalLinkedServiceResponseOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalLinkedServiceResponse) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o PaypalLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v PaypalLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
// Expected value is 'Paypal'.
func (o PaypalLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PaypalLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o PaypalLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalLinkedServiceResponse) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o PaypalLinkedServiceResponseOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalLinkedServiceResponse) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o PaypalLinkedServiceResponseOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalLinkedServiceResponse) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// Paypal Service dataset.
type PaypalObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'PaypalObject'.
	Type string `pulumi:"type"`
}

// PaypalObjectDatasetInput is an input type that accepts PaypalObjectDatasetArgs and PaypalObjectDatasetOutput values.
// You can construct a concrete instance of `PaypalObjectDatasetInput` via:
//
//	PaypalObjectDatasetArgs{...}
type PaypalObjectDatasetInput interface {
	pulumi.Input

	ToPaypalObjectDatasetOutput() PaypalObjectDatasetOutput
	ToPaypalObjectDatasetOutputWithContext(context.Context) PaypalObjectDatasetOutput
}

// Paypal Service dataset.
type PaypalObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'PaypalObject'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PaypalObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PaypalObjectDataset)(nil)).Elem()
}

func (i PaypalObjectDatasetArgs) ToPaypalObjectDatasetOutput() PaypalObjectDatasetOutput {
	return i.ToPaypalObjectDatasetOutputWithContext(context.Background())
}

func (i PaypalObjectDatasetArgs) ToPaypalObjectDatasetOutputWithContext(ctx context.Context) PaypalObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PaypalObjectDatasetOutput)
}

// Paypal Service dataset.
type PaypalObjectDatasetOutput struct{ *pulumi.OutputState }

func (PaypalObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PaypalObjectDataset)(nil)).Elem()
}

func (o PaypalObjectDatasetOutput) ToPaypalObjectDatasetOutput() PaypalObjectDatasetOutput {
	return o
}

func (o PaypalObjectDatasetOutput) ToPaypalObjectDatasetOutputWithContext(ctx context.Context) PaypalObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o PaypalObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v PaypalObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o PaypalObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PaypalObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o PaypalObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v PaypalObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o PaypalObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v PaypalObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o PaypalObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v PaypalObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o PaypalObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o PaypalObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o PaypalObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'PaypalObject'.
func (o PaypalObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PaypalObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Paypal Service dataset.
type PaypalObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'PaypalObject'.
	Type string `pulumi:"type"`
}

// Paypal Service dataset.
type PaypalObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (PaypalObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PaypalObjectDatasetResponse)(nil)).Elem()
}

func (o PaypalObjectDatasetResponseOutput) ToPaypalObjectDatasetResponseOutput() PaypalObjectDatasetResponseOutput {
	return o
}

func (o PaypalObjectDatasetResponseOutput) ToPaypalObjectDatasetResponseOutputWithContext(ctx context.Context) PaypalObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o PaypalObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v PaypalObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o PaypalObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PaypalObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o PaypalObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v PaypalObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o PaypalObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v PaypalObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o PaypalObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v PaypalObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o PaypalObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o PaypalObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o PaypalObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'PaypalObject'.
func (o PaypalObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PaypalObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Paypal Service source.
type PaypalSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'PaypalSource'.
	Type string `pulumi:"type"`
}

// PaypalSourceInput is an input type that accepts PaypalSourceArgs and PaypalSourceOutput values.
// You can construct a concrete instance of `PaypalSourceInput` via:
//
//	PaypalSourceArgs{...}
type PaypalSourceInput interface {
	pulumi.Input

	ToPaypalSourceOutput() PaypalSourceOutput
	ToPaypalSourceOutputWithContext(context.Context) PaypalSourceOutput
}

// A copy activity Paypal Service source.
type PaypalSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'PaypalSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PaypalSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PaypalSource)(nil)).Elem()
}

func (i PaypalSourceArgs) ToPaypalSourceOutput() PaypalSourceOutput {
	return i.ToPaypalSourceOutputWithContext(context.Background())
}

func (i PaypalSourceArgs) ToPaypalSourceOutputWithContext(ctx context.Context) PaypalSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PaypalSourceOutput)
}

// A copy activity Paypal Service source.
type PaypalSourceOutput struct{ *pulumi.OutputState }

func (PaypalSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PaypalSource)(nil)).Elem()
}

func (o PaypalSourceOutput) ToPaypalSourceOutput() PaypalSourceOutput {
	return o
}

func (o PaypalSourceOutput) ToPaypalSourceOutputWithContext(ctx context.Context) PaypalSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o PaypalSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o PaypalSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o PaypalSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o PaypalSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o PaypalSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o PaypalSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o PaypalSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'PaypalSource'.
func (o PaypalSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PaypalSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Paypal Service source.
type PaypalSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'PaypalSource'.
	Type string `pulumi:"type"`
}

// A copy activity Paypal Service source.
type PaypalSourceResponseOutput struct{ *pulumi.OutputState }

func (PaypalSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PaypalSourceResponse)(nil)).Elem()
}

func (o PaypalSourceResponseOutput) ToPaypalSourceResponseOutput() PaypalSourceResponseOutput {
	return o
}

func (o PaypalSourceResponseOutput) ToPaypalSourceResponseOutputWithContext(ctx context.Context) PaypalSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o PaypalSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o PaypalSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o PaypalSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o PaypalSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o PaypalSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o PaypalSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o PaypalSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v PaypalSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'PaypalSource'.
func (o PaypalSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PaypalSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Phoenix server linked service.
type PhoenixLinkedService struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication mechanism used to connect to the Phoenix server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The IP address or host name of the Phoenix server. (i.e. 192.168.222.160)
	Host interface{} `pulumi:"host"`
	// The partial URL corresponding to the Phoenix server. (i.e. /gateway/sandbox/phoenix/version). The default value is hbasephoenix if using WindowsAzureHDInsightService.
	HttpPath interface{} `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password interface{} `pulumi:"password"`
	// The TCP port that the Phoenix server uses to listen for client connections. The default value is 8765.
	Port interface{} `pulumi:"port"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'Phoenix'.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
	// The user name used to connect to the Phoenix server.
	Username interface{} `pulumi:"username"`
}

// PhoenixLinkedServiceInput is an input type that accepts PhoenixLinkedServiceArgs and PhoenixLinkedServiceOutput values.
// You can construct a concrete instance of `PhoenixLinkedServiceInput` via:
//
//	PhoenixLinkedServiceArgs{...}
type PhoenixLinkedServiceInput interface {
	pulumi.Input

	ToPhoenixLinkedServiceOutput() PhoenixLinkedServiceOutput
	ToPhoenixLinkedServiceOutputWithContext(context.Context) PhoenixLinkedServiceOutput
}

// Phoenix server linked service.
type PhoenixLinkedServiceArgs struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch pulumi.Input `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert pulumi.Input `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication mechanism used to connect to the Phoenix server.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl pulumi.Input `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// The IP address or host name of the Phoenix server. (i.e. 192.168.222.160)
	Host pulumi.Input `pulumi:"host"`
	// The partial URL corresponding to the Phoenix server. (i.e. /gateway/sandbox/phoenix/version). The default value is hbasephoenix if using WindowsAzureHDInsightService.
	HttpPath pulumi.Input `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password pulumi.Input `pulumi:"password"`
	// The TCP port that the Phoenix server uses to listen for client connections. The default value is 8765.
	Port pulumi.Input `pulumi:"port"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath pulumi.Input `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'Phoenix'.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore pulumi.Input `pulumi:"useSystemTrustStore"`
	// The user name used to connect to the Phoenix server.
	Username pulumi.Input `pulumi:"username"`
}

func (PhoenixLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PhoenixLinkedService)(nil)).Elem()
}

func (i PhoenixLinkedServiceArgs) ToPhoenixLinkedServiceOutput() PhoenixLinkedServiceOutput {
	return i.ToPhoenixLinkedServiceOutputWithContext(context.Background())
}

func (i PhoenixLinkedServiceArgs) ToPhoenixLinkedServiceOutputWithContext(ctx context.Context) PhoenixLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhoenixLinkedServiceOutput)
}

// Phoenix server linked service.
type PhoenixLinkedServiceOutput struct{ *pulumi.OutputState }

func (PhoenixLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PhoenixLinkedService)(nil)).Elem()
}

func (o PhoenixLinkedServiceOutput) ToPhoenixLinkedServiceOutput() PhoenixLinkedServiceOutput {
	return o
}

func (o PhoenixLinkedServiceOutput) ToPhoenixLinkedServiceOutputWithContext(ctx context.Context) PhoenixLinkedServiceOutput {
	return o
}

// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
func (o PhoenixLinkedServiceOutput) AllowHostNameCNMismatch() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixLinkedService) interface{} { return v.AllowHostNameCNMismatch }).(pulumi.AnyOutput)
}

// Specifies whether to allow self-signed certificates from the server. The default value is false.
func (o PhoenixLinkedServiceOutput) AllowSelfSignedServerCert() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixLinkedService) interface{} { return v.AllowSelfSignedServerCert }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o PhoenixLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v PhoenixLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication mechanism used to connect to the Phoenix server.
func (o PhoenixLinkedServiceOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v PhoenixLinkedService) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The integration runtime reference.
func (o PhoenixLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v PhoenixLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o PhoenixLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PhoenixLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
func (o PhoenixLinkedServiceOutput) EnableSsl() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixLinkedService) interface{} { return v.EnableSsl }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o PhoenixLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PhoenixLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The IP address or host name of the Phoenix server. (i.e. 192.168.222.160)
func (o PhoenixLinkedServiceOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixLinkedService) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// The partial URL corresponding to the Phoenix server. (i.e. /gateway/sandbox/phoenix/version). The default value is hbasephoenix if using WindowsAzureHDInsightService.
func (o PhoenixLinkedServiceOutput) HttpPath() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixLinkedService) interface{} { return v.HttpPath }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o PhoenixLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v PhoenixLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The password corresponding to the user name.
func (o PhoenixLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port that the Phoenix server uses to listen for client connections. The default value is 8765.
func (o PhoenixLinkedServiceOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixLinkedService) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
func (o PhoenixLinkedServiceOutput) TrustedCertPath() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixLinkedService) interface{} { return v.TrustedCertPath }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Phoenix'.
func (o PhoenixLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PhoenixLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
func (o PhoenixLinkedServiceOutput) UseSystemTrustStore() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixLinkedService) interface{} { return v.UseSystemTrustStore }).(pulumi.AnyOutput)
}

// The user name used to connect to the Phoenix server.
func (o PhoenixLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Phoenix server linked service.
type PhoenixLinkedServiceResponse struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication mechanism used to connect to the Phoenix server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The IP address or host name of the Phoenix server. (i.e. 192.168.222.160)
	Host interface{} `pulumi:"host"`
	// The partial URL corresponding to the Phoenix server. (i.e. /gateway/sandbox/phoenix/version). The default value is hbasephoenix if using WindowsAzureHDInsightService.
	HttpPath interface{} `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password interface{} `pulumi:"password"`
	// The TCP port that the Phoenix server uses to listen for client connections. The default value is 8765.
	Port interface{} `pulumi:"port"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'Phoenix'.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
	// The user name used to connect to the Phoenix server.
	Username interface{} `pulumi:"username"`
}

// Phoenix server linked service.
type PhoenixLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (PhoenixLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PhoenixLinkedServiceResponse)(nil)).Elem()
}

func (o PhoenixLinkedServiceResponseOutput) ToPhoenixLinkedServiceResponseOutput() PhoenixLinkedServiceResponseOutput {
	return o
}

func (o PhoenixLinkedServiceResponseOutput) ToPhoenixLinkedServiceResponseOutputWithContext(ctx context.Context) PhoenixLinkedServiceResponseOutput {
	return o
}

// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
func (o PhoenixLinkedServiceResponseOutput) AllowHostNameCNMismatch() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) interface{} { return v.AllowHostNameCNMismatch }).(pulumi.AnyOutput)
}

// Specifies whether to allow self-signed certificates from the server. The default value is false.
func (o PhoenixLinkedServiceResponseOutput) AllowSelfSignedServerCert() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) interface{} { return v.AllowSelfSignedServerCert }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o PhoenixLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication mechanism used to connect to the Phoenix server.
func (o PhoenixLinkedServiceResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The integration runtime reference.
func (o PhoenixLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o PhoenixLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
func (o PhoenixLinkedServiceResponseOutput) EnableSsl() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) interface{} { return v.EnableSsl }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o PhoenixLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The IP address or host name of the Phoenix server. (i.e. 192.168.222.160)
func (o PhoenixLinkedServiceResponseOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// The partial URL corresponding to the Phoenix server. (i.e. /gateway/sandbox/phoenix/version). The default value is hbasephoenix if using WindowsAzureHDInsightService.
func (o PhoenixLinkedServiceResponseOutput) HttpPath() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) interface{} { return v.HttpPath }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o PhoenixLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The password corresponding to the user name.
func (o PhoenixLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port that the Phoenix server uses to listen for client connections. The default value is 8765.
func (o PhoenixLinkedServiceResponseOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
func (o PhoenixLinkedServiceResponseOutput) TrustedCertPath() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) interface{} { return v.TrustedCertPath }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Phoenix'.
func (o PhoenixLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
func (o PhoenixLinkedServiceResponseOutput) UseSystemTrustStore() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) interface{} { return v.UseSystemTrustStore }).(pulumi.AnyOutput)
}

// The user name used to connect to the Phoenix server.
func (o PhoenixLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Phoenix server dataset.
type PhoenixObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Phoenix. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'PhoenixObject'.
	Type string `pulumi:"type"`
}

// PhoenixObjectDatasetInput is an input type that accepts PhoenixObjectDatasetArgs and PhoenixObjectDatasetOutput values.
// You can construct a concrete instance of `PhoenixObjectDatasetInput` via:
//
//	PhoenixObjectDatasetArgs{...}
type PhoenixObjectDatasetInput interface {
	pulumi.Input

	ToPhoenixObjectDatasetOutput() PhoenixObjectDatasetOutput
	ToPhoenixObjectDatasetOutputWithContext(context.Context) PhoenixObjectDatasetOutput
}

// Phoenix server dataset.
type PhoenixObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Phoenix. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'PhoenixObject'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PhoenixObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PhoenixObjectDataset)(nil)).Elem()
}

func (i PhoenixObjectDatasetArgs) ToPhoenixObjectDatasetOutput() PhoenixObjectDatasetOutput {
	return i.ToPhoenixObjectDatasetOutputWithContext(context.Background())
}

func (i PhoenixObjectDatasetArgs) ToPhoenixObjectDatasetOutputWithContext(ctx context.Context) PhoenixObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhoenixObjectDatasetOutput)
}

// Phoenix server dataset.
type PhoenixObjectDatasetOutput struct{ *pulumi.OutputState }

func (PhoenixObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PhoenixObjectDataset)(nil)).Elem()
}

func (o PhoenixObjectDatasetOutput) ToPhoenixObjectDatasetOutput() PhoenixObjectDatasetOutput {
	return o
}

func (o PhoenixObjectDatasetOutput) ToPhoenixObjectDatasetOutputWithContext(ctx context.Context) PhoenixObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o PhoenixObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v PhoenixObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o PhoenixObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PhoenixObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o PhoenixObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v PhoenixObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o PhoenixObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v PhoenixObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o PhoenixObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v PhoenixObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o PhoenixObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o PhoenixObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Phoenix. Type: string (or Expression with resultType string).
func (o PhoenixObjectDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixObjectDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o PhoenixObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'PhoenixObject'.
func (o PhoenixObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PhoenixObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Phoenix server dataset.
type PhoenixObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Phoenix. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'PhoenixObject'.
	Type string `pulumi:"type"`
}

// Phoenix server dataset.
type PhoenixObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (PhoenixObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PhoenixObjectDatasetResponse)(nil)).Elem()
}

func (o PhoenixObjectDatasetResponseOutput) ToPhoenixObjectDatasetResponseOutput() PhoenixObjectDatasetResponseOutput {
	return o
}

func (o PhoenixObjectDatasetResponseOutput) ToPhoenixObjectDatasetResponseOutputWithContext(ctx context.Context) PhoenixObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o PhoenixObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v PhoenixObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o PhoenixObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PhoenixObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o PhoenixObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v PhoenixObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o PhoenixObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v PhoenixObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o PhoenixObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v PhoenixObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o PhoenixObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o PhoenixObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Phoenix. Type: string (or Expression with resultType string).
func (o PhoenixObjectDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixObjectDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o PhoenixObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'PhoenixObject'.
func (o PhoenixObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PhoenixObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Phoenix server source.
type PhoenixSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'PhoenixSource'.
	Type string `pulumi:"type"`
}

// PhoenixSourceInput is an input type that accepts PhoenixSourceArgs and PhoenixSourceOutput values.
// You can construct a concrete instance of `PhoenixSourceInput` via:
//
//	PhoenixSourceArgs{...}
type PhoenixSourceInput interface {
	pulumi.Input

	ToPhoenixSourceOutput() PhoenixSourceOutput
	ToPhoenixSourceOutputWithContext(context.Context) PhoenixSourceOutput
}

// A copy activity Phoenix server source.
type PhoenixSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'PhoenixSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PhoenixSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PhoenixSource)(nil)).Elem()
}

func (i PhoenixSourceArgs) ToPhoenixSourceOutput() PhoenixSourceOutput {
	return i.ToPhoenixSourceOutputWithContext(context.Background())
}

func (i PhoenixSourceArgs) ToPhoenixSourceOutputWithContext(ctx context.Context) PhoenixSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhoenixSourceOutput)
}

// A copy activity Phoenix server source.
type PhoenixSourceOutput struct{ *pulumi.OutputState }

func (PhoenixSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PhoenixSource)(nil)).Elem()
}

func (o PhoenixSourceOutput) ToPhoenixSourceOutput() PhoenixSourceOutput {
	return o
}

func (o PhoenixSourceOutput) ToPhoenixSourceOutputWithContext(ctx context.Context) PhoenixSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o PhoenixSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o PhoenixSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o PhoenixSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o PhoenixSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o PhoenixSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o PhoenixSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o PhoenixSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'PhoenixSource'.
func (o PhoenixSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PhoenixSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Phoenix server source.
type PhoenixSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'PhoenixSource'.
	Type string `pulumi:"type"`
}

// A copy activity Phoenix server source.
type PhoenixSourceResponseOutput struct{ *pulumi.OutputState }

func (PhoenixSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PhoenixSourceResponse)(nil)).Elem()
}

func (o PhoenixSourceResponseOutput) ToPhoenixSourceResponseOutput() PhoenixSourceResponseOutput {
	return o
}

func (o PhoenixSourceResponseOutput) ToPhoenixSourceResponseOutputWithContext(ctx context.Context) PhoenixSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o PhoenixSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o PhoenixSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o PhoenixSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o PhoenixSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o PhoenixSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o PhoenixSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o PhoenixSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v PhoenixSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'PhoenixSource'.
func (o PhoenixSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PhoenixSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Pipeline ElapsedTime Metric Policy.
type PipelineElapsedTimeMetricPolicy struct {
	// TimeSpan value, after which an Azure Monitoring Metric is fired.
	Duration interface{} `pulumi:"duration"`
}

// PipelineElapsedTimeMetricPolicyInput is an input type that accepts PipelineElapsedTimeMetricPolicyArgs and PipelineElapsedTimeMetricPolicyOutput values.
// You can construct a concrete instance of `PipelineElapsedTimeMetricPolicyInput` via:
//
//	PipelineElapsedTimeMetricPolicyArgs{...}
type PipelineElapsedTimeMetricPolicyInput interface {
	pulumi.Input

	ToPipelineElapsedTimeMetricPolicyOutput() PipelineElapsedTimeMetricPolicyOutput
	ToPipelineElapsedTimeMetricPolicyOutputWithContext(context.Context) PipelineElapsedTimeMetricPolicyOutput
}

// Pipeline ElapsedTime Metric Policy.
type PipelineElapsedTimeMetricPolicyArgs struct {
	// TimeSpan value, after which an Azure Monitoring Metric is fired.
	Duration pulumi.Input `pulumi:"duration"`
}

func (PipelineElapsedTimeMetricPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineElapsedTimeMetricPolicy)(nil)).Elem()
}

func (i PipelineElapsedTimeMetricPolicyArgs) ToPipelineElapsedTimeMetricPolicyOutput() PipelineElapsedTimeMetricPolicyOutput {
	return i.ToPipelineElapsedTimeMetricPolicyOutputWithContext(context.Background())
}

func (i PipelineElapsedTimeMetricPolicyArgs) ToPipelineElapsedTimeMetricPolicyOutputWithContext(ctx context.Context) PipelineElapsedTimeMetricPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineElapsedTimeMetricPolicyOutput)
}

func (i PipelineElapsedTimeMetricPolicyArgs) ToPipelineElapsedTimeMetricPolicyPtrOutput() PipelineElapsedTimeMetricPolicyPtrOutput {
	return i.ToPipelineElapsedTimeMetricPolicyPtrOutputWithContext(context.Background())
}

func (i PipelineElapsedTimeMetricPolicyArgs) ToPipelineElapsedTimeMetricPolicyPtrOutputWithContext(ctx context.Context) PipelineElapsedTimeMetricPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineElapsedTimeMetricPolicyOutput).ToPipelineElapsedTimeMetricPolicyPtrOutputWithContext(ctx)
}

// PipelineElapsedTimeMetricPolicyPtrInput is an input type that accepts PipelineElapsedTimeMetricPolicyArgs, PipelineElapsedTimeMetricPolicyPtr and PipelineElapsedTimeMetricPolicyPtrOutput values.
// You can construct a concrete instance of `PipelineElapsedTimeMetricPolicyPtrInput` via:
//
//	        PipelineElapsedTimeMetricPolicyArgs{...}
//
//	or:
//
//	        nil
type PipelineElapsedTimeMetricPolicyPtrInput interface {
	pulumi.Input

	ToPipelineElapsedTimeMetricPolicyPtrOutput() PipelineElapsedTimeMetricPolicyPtrOutput
	ToPipelineElapsedTimeMetricPolicyPtrOutputWithContext(context.Context) PipelineElapsedTimeMetricPolicyPtrOutput
}

type pipelineElapsedTimeMetricPolicyPtrType PipelineElapsedTimeMetricPolicyArgs

func PipelineElapsedTimeMetricPolicyPtr(v *PipelineElapsedTimeMetricPolicyArgs) PipelineElapsedTimeMetricPolicyPtrInput {
	return (*pipelineElapsedTimeMetricPolicyPtrType)(v)
}

func (*pipelineElapsedTimeMetricPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineElapsedTimeMetricPolicy)(nil)).Elem()
}

func (i *pipelineElapsedTimeMetricPolicyPtrType) ToPipelineElapsedTimeMetricPolicyPtrOutput() PipelineElapsedTimeMetricPolicyPtrOutput {
	return i.ToPipelineElapsedTimeMetricPolicyPtrOutputWithContext(context.Background())
}

func (i *pipelineElapsedTimeMetricPolicyPtrType) ToPipelineElapsedTimeMetricPolicyPtrOutputWithContext(ctx context.Context) PipelineElapsedTimeMetricPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineElapsedTimeMetricPolicyPtrOutput)
}

// Pipeline ElapsedTime Metric Policy.
type PipelineElapsedTimeMetricPolicyOutput struct{ *pulumi.OutputState }

func (PipelineElapsedTimeMetricPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineElapsedTimeMetricPolicy)(nil)).Elem()
}

func (o PipelineElapsedTimeMetricPolicyOutput) ToPipelineElapsedTimeMetricPolicyOutput() PipelineElapsedTimeMetricPolicyOutput {
	return o
}

func (o PipelineElapsedTimeMetricPolicyOutput) ToPipelineElapsedTimeMetricPolicyOutputWithContext(ctx context.Context) PipelineElapsedTimeMetricPolicyOutput {
	return o
}

func (o PipelineElapsedTimeMetricPolicyOutput) ToPipelineElapsedTimeMetricPolicyPtrOutput() PipelineElapsedTimeMetricPolicyPtrOutput {
	return o.ToPipelineElapsedTimeMetricPolicyPtrOutputWithContext(context.Background())
}

func (o PipelineElapsedTimeMetricPolicyOutput) ToPipelineElapsedTimeMetricPolicyPtrOutputWithContext(ctx context.Context) PipelineElapsedTimeMetricPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipelineElapsedTimeMetricPolicy) *PipelineElapsedTimeMetricPolicy {
		return &v
	}).(PipelineElapsedTimeMetricPolicyPtrOutput)
}

// TimeSpan value, after which an Azure Monitoring Metric is fired.
func (o PipelineElapsedTimeMetricPolicyOutput) Duration() pulumi.AnyOutput {
	return o.ApplyT(func(v PipelineElapsedTimeMetricPolicy) interface{} { return v.Duration }).(pulumi.AnyOutput)
}

type PipelineElapsedTimeMetricPolicyPtrOutput struct{ *pulumi.OutputState }

func (PipelineElapsedTimeMetricPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineElapsedTimeMetricPolicy)(nil)).Elem()
}

func (o PipelineElapsedTimeMetricPolicyPtrOutput) ToPipelineElapsedTimeMetricPolicyPtrOutput() PipelineElapsedTimeMetricPolicyPtrOutput {
	return o
}

func (o PipelineElapsedTimeMetricPolicyPtrOutput) ToPipelineElapsedTimeMetricPolicyPtrOutputWithContext(ctx context.Context) PipelineElapsedTimeMetricPolicyPtrOutput {
	return o
}

func (o PipelineElapsedTimeMetricPolicyPtrOutput) Elem() PipelineElapsedTimeMetricPolicyOutput {
	return o.ApplyT(func(v *PipelineElapsedTimeMetricPolicy) PipelineElapsedTimeMetricPolicy {
		if v != nil {
			return *v
		}
		var ret PipelineElapsedTimeMetricPolicy
		return ret
	}).(PipelineElapsedTimeMetricPolicyOutput)
}

// TimeSpan value, after which an Azure Monitoring Metric is fired.
func (o PipelineElapsedTimeMetricPolicyPtrOutput) Duration() pulumi.AnyOutput {
	return o.ApplyT(func(v *PipelineElapsedTimeMetricPolicy) interface{} {
		if v == nil {
			return nil
		}
		return v.Duration
	}).(pulumi.AnyOutput)
}

// Pipeline ElapsedTime Metric Policy.
type PipelineElapsedTimeMetricPolicyResponse struct {
	// TimeSpan value, after which an Azure Monitoring Metric is fired.
	Duration interface{} `pulumi:"duration"`
}

// Pipeline ElapsedTime Metric Policy.
type PipelineElapsedTimeMetricPolicyResponseOutput struct{ *pulumi.OutputState }

func (PipelineElapsedTimeMetricPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineElapsedTimeMetricPolicyResponse)(nil)).Elem()
}

func (o PipelineElapsedTimeMetricPolicyResponseOutput) ToPipelineElapsedTimeMetricPolicyResponseOutput() PipelineElapsedTimeMetricPolicyResponseOutput {
	return o
}

func (o PipelineElapsedTimeMetricPolicyResponseOutput) ToPipelineElapsedTimeMetricPolicyResponseOutputWithContext(ctx context.Context) PipelineElapsedTimeMetricPolicyResponseOutput {
	return o
}

// TimeSpan value, after which an Azure Monitoring Metric is fired.
func (o PipelineElapsedTimeMetricPolicyResponseOutput) Duration() pulumi.AnyOutput {
	return o.ApplyT(func(v PipelineElapsedTimeMetricPolicyResponse) interface{} { return v.Duration }).(pulumi.AnyOutput)
}

type PipelineElapsedTimeMetricPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (PipelineElapsedTimeMetricPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineElapsedTimeMetricPolicyResponse)(nil)).Elem()
}

func (o PipelineElapsedTimeMetricPolicyResponsePtrOutput) ToPipelineElapsedTimeMetricPolicyResponsePtrOutput() PipelineElapsedTimeMetricPolicyResponsePtrOutput {
	return o
}

func (o PipelineElapsedTimeMetricPolicyResponsePtrOutput) ToPipelineElapsedTimeMetricPolicyResponsePtrOutputWithContext(ctx context.Context) PipelineElapsedTimeMetricPolicyResponsePtrOutput {
	return o
}

func (o PipelineElapsedTimeMetricPolicyResponsePtrOutput) Elem() PipelineElapsedTimeMetricPolicyResponseOutput {
	return o.ApplyT(func(v *PipelineElapsedTimeMetricPolicyResponse) PipelineElapsedTimeMetricPolicyResponse {
		if v != nil {
			return *v
		}
		var ret PipelineElapsedTimeMetricPolicyResponse
		return ret
	}).(PipelineElapsedTimeMetricPolicyResponseOutput)
}

// TimeSpan value, after which an Azure Monitoring Metric is fired.
func (o PipelineElapsedTimeMetricPolicyResponsePtrOutput) Duration() pulumi.AnyOutput {
	return o.ApplyT(func(v *PipelineElapsedTimeMetricPolicyResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Duration
	}).(pulumi.AnyOutput)
}

// PipelineExternalComputeScale properties for managed integration runtime.
type PipelineExternalComputeScaleProperties struct {
	// Number of the the external nodes, which should be greater than 0 and less than 11.
	NumberOfExternalNodes *int `pulumi:"numberOfExternalNodes"`
	// Number of the pipeline nodes, which should be greater than 0 and less than 11.
	NumberOfPipelineNodes *int `pulumi:"numberOfPipelineNodes"`
	// Time to live (in minutes) setting of integration runtime which will execute pipeline and external activity.
	TimeToLive *int `pulumi:"timeToLive"`
}

// PipelineExternalComputeScalePropertiesInput is an input type that accepts PipelineExternalComputeScalePropertiesArgs and PipelineExternalComputeScalePropertiesOutput values.
// You can construct a concrete instance of `PipelineExternalComputeScalePropertiesInput` via:
//
//	PipelineExternalComputeScalePropertiesArgs{...}
type PipelineExternalComputeScalePropertiesInput interface {
	pulumi.Input

	ToPipelineExternalComputeScalePropertiesOutput() PipelineExternalComputeScalePropertiesOutput
	ToPipelineExternalComputeScalePropertiesOutputWithContext(context.Context) PipelineExternalComputeScalePropertiesOutput
}

// PipelineExternalComputeScale properties for managed integration runtime.
type PipelineExternalComputeScalePropertiesArgs struct {
	// Number of the the external nodes, which should be greater than 0 and less than 11.
	NumberOfExternalNodes pulumi.IntPtrInput `pulumi:"numberOfExternalNodes"`
	// Number of the pipeline nodes, which should be greater than 0 and less than 11.
	NumberOfPipelineNodes pulumi.IntPtrInput `pulumi:"numberOfPipelineNodes"`
	// Time to live (in minutes) setting of integration runtime which will execute pipeline and external activity.
	TimeToLive pulumi.IntPtrInput `pulumi:"timeToLive"`
}

func (PipelineExternalComputeScalePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineExternalComputeScaleProperties)(nil)).Elem()
}

func (i PipelineExternalComputeScalePropertiesArgs) ToPipelineExternalComputeScalePropertiesOutput() PipelineExternalComputeScalePropertiesOutput {
	return i.ToPipelineExternalComputeScalePropertiesOutputWithContext(context.Background())
}

func (i PipelineExternalComputeScalePropertiesArgs) ToPipelineExternalComputeScalePropertiesOutputWithContext(ctx context.Context) PipelineExternalComputeScalePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineExternalComputeScalePropertiesOutput)
}

func (i PipelineExternalComputeScalePropertiesArgs) ToPipelineExternalComputeScalePropertiesPtrOutput() PipelineExternalComputeScalePropertiesPtrOutput {
	return i.ToPipelineExternalComputeScalePropertiesPtrOutputWithContext(context.Background())
}

func (i PipelineExternalComputeScalePropertiesArgs) ToPipelineExternalComputeScalePropertiesPtrOutputWithContext(ctx context.Context) PipelineExternalComputeScalePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineExternalComputeScalePropertiesOutput).ToPipelineExternalComputeScalePropertiesPtrOutputWithContext(ctx)
}

// PipelineExternalComputeScalePropertiesPtrInput is an input type that accepts PipelineExternalComputeScalePropertiesArgs, PipelineExternalComputeScalePropertiesPtr and PipelineExternalComputeScalePropertiesPtrOutput values.
// You can construct a concrete instance of `PipelineExternalComputeScalePropertiesPtrInput` via:
//
//	        PipelineExternalComputeScalePropertiesArgs{...}
//
//	or:
//
//	        nil
type PipelineExternalComputeScalePropertiesPtrInput interface {
	pulumi.Input

	ToPipelineExternalComputeScalePropertiesPtrOutput() PipelineExternalComputeScalePropertiesPtrOutput
	ToPipelineExternalComputeScalePropertiesPtrOutputWithContext(context.Context) PipelineExternalComputeScalePropertiesPtrOutput
}

type pipelineExternalComputeScalePropertiesPtrType PipelineExternalComputeScalePropertiesArgs

func PipelineExternalComputeScalePropertiesPtr(v *PipelineExternalComputeScalePropertiesArgs) PipelineExternalComputeScalePropertiesPtrInput {
	return (*pipelineExternalComputeScalePropertiesPtrType)(v)
}

func (*pipelineExternalComputeScalePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineExternalComputeScaleProperties)(nil)).Elem()
}

func (i *pipelineExternalComputeScalePropertiesPtrType) ToPipelineExternalComputeScalePropertiesPtrOutput() PipelineExternalComputeScalePropertiesPtrOutput {
	return i.ToPipelineExternalComputeScalePropertiesPtrOutputWithContext(context.Background())
}

func (i *pipelineExternalComputeScalePropertiesPtrType) ToPipelineExternalComputeScalePropertiesPtrOutputWithContext(ctx context.Context) PipelineExternalComputeScalePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineExternalComputeScalePropertiesPtrOutput)
}

// PipelineExternalComputeScale properties for managed integration runtime.
type PipelineExternalComputeScalePropertiesOutput struct{ *pulumi.OutputState }

func (PipelineExternalComputeScalePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineExternalComputeScaleProperties)(nil)).Elem()
}

func (o PipelineExternalComputeScalePropertiesOutput) ToPipelineExternalComputeScalePropertiesOutput() PipelineExternalComputeScalePropertiesOutput {
	return o
}

func (o PipelineExternalComputeScalePropertiesOutput) ToPipelineExternalComputeScalePropertiesOutputWithContext(ctx context.Context) PipelineExternalComputeScalePropertiesOutput {
	return o
}

func (o PipelineExternalComputeScalePropertiesOutput) ToPipelineExternalComputeScalePropertiesPtrOutput() PipelineExternalComputeScalePropertiesPtrOutput {
	return o.ToPipelineExternalComputeScalePropertiesPtrOutputWithContext(context.Background())
}

func (o PipelineExternalComputeScalePropertiesOutput) ToPipelineExternalComputeScalePropertiesPtrOutputWithContext(ctx context.Context) PipelineExternalComputeScalePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipelineExternalComputeScaleProperties) *PipelineExternalComputeScaleProperties {
		return &v
	}).(PipelineExternalComputeScalePropertiesPtrOutput)
}

// Number of the the external nodes, which should be greater than 0 and less than 11.
func (o PipelineExternalComputeScalePropertiesOutput) NumberOfExternalNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipelineExternalComputeScaleProperties) *int { return v.NumberOfExternalNodes }).(pulumi.IntPtrOutput)
}

// Number of the pipeline nodes, which should be greater than 0 and less than 11.
func (o PipelineExternalComputeScalePropertiesOutput) NumberOfPipelineNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipelineExternalComputeScaleProperties) *int { return v.NumberOfPipelineNodes }).(pulumi.IntPtrOutput)
}

// Time to live (in minutes) setting of integration runtime which will execute pipeline and external activity.
func (o PipelineExternalComputeScalePropertiesOutput) TimeToLive() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipelineExternalComputeScaleProperties) *int { return v.TimeToLive }).(pulumi.IntPtrOutput)
}

type PipelineExternalComputeScalePropertiesPtrOutput struct{ *pulumi.OutputState }

func (PipelineExternalComputeScalePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineExternalComputeScaleProperties)(nil)).Elem()
}

func (o PipelineExternalComputeScalePropertiesPtrOutput) ToPipelineExternalComputeScalePropertiesPtrOutput() PipelineExternalComputeScalePropertiesPtrOutput {
	return o
}

func (o PipelineExternalComputeScalePropertiesPtrOutput) ToPipelineExternalComputeScalePropertiesPtrOutputWithContext(ctx context.Context) PipelineExternalComputeScalePropertiesPtrOutput {
	return o
}

func (o PipelineExternalComputeScalePropertiesPtrOutput) Elem() PipelineExternalComputeScalePropertiesOutput {
	return o.ApplyT(func(v *PipelineExternalComputeScaleProperties) PipelineExternalComputeScaleProperties {
		if v != nil {
			return *v
		}
		var ret PipelineExternalComputeScaleProperties
		return ret
	}).(PipelineExternalComputeScalePropertiesOutput)
}

// Number of the the external nodes, which should be greater than 0 and less than 11.
func (o PipelineExternalComputeScalePropertiesPtrOutput) NumberOfExternalNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipelineExternalComputeScaleProperties) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfExternalNodes
	}).(pulumi.IntPtrOutput)
}

// Number of the pipeline nodes, which should be greater than 0 and less than 11.
func (o PipelineExternalComputeScalePropertiesPtrOutput) NumberOfPipelineNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipelineExternalComputeScaleProperties) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfPipelineNodes
	}).(pulumi.IntPtrOutput)
}

// Time to live (in minutes) setting of integration runtime which will execute pipeline and external activity.
func (o PipelineExternalComputeScalePropertiesPtrOutput) TimeToLive() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipelineExternalComputeScaleProperties) *int {
		if v == nil {
			return nil
		}
		return v.TimeToLive
	}).(pulumi.IntPtrOutput)
}

// PipelineExternalComputeScale properties for managed integration runtime.
type PipelineExternalComputeScalePropertiesResponse struct {
	// Number of the the external nodes, which should be greater than 0 and less than 11.
	NumberOfExternalNodes *int `pulumi:"numberOfExternalNodes"`
	// Number of the pipeline nodes, which should be greater than 0 and less than 11.
	NumberOfPipelineNodes *int `pulumi:"numberOfPipelineNodes"`
	// Time to live (in minutes) setting of integration runtime which will execute pipeline and external activity.
	TimeToLive *int `pulumi:"timeToLive"`
}

// PipelineExternalComputeScale properties for managed integration runtime.
type PipelineExternalComputeScalePropertiesResponseOutput struct{ *pulumi.OutputState }

func (PipelineExternalComputeScalePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineExternalComputeScalePropertiesResponse)(nil)).Elem()
}

func (o PipelineExternalComputeScalePropertiesResponseOutput) ToPipelineExternalComputeScalePropertiesResponseOutput() PipelineExternalComputeScalePropertiesResponseOutput {
	return o
}

func (o PipelineExternalComputeScalePropertiesResponseOutput) ToPipelineExternalComputeScalePropertiesResponseOutputWithContext(ctx context.Context) PipelineExternalComputeScalePropertiesResponseOutput {
	return o
}

// Number of the the external nodes, which should be greater than 0 and less than 11.
func (o PipelineExternalComputeScalePropertiesResponseOutput) NumberOfExternalNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipelineExternalComputeScalePropertiesResponse) *int { return v.NumberOfExternalNodes }).(pulumi.IntPtrOutput)
}

// Number of the pipeline nodes, which should be greater than 0 and less than 11.
func (o PipelineExternalComputeScalePropertiesResponseOutput) NumberOfPipelineNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipelineExternalComputeScalePropertiesResponse) *int { return v.NumberOfPipelineNodes }).(pulumi.IntPtrOutput)
}

// Time to live (in minutes) setting of integration runtime which will execute pipeline and external activity.
func (o PipelineExternalComputeScalePropertiesResponseOutput) TimeToLive() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipelineExternalComputeScalePropertiesResponse) *int { return v.TimeToLive }).(pulumi.IntPtrOutput)
}

type PipelineExternalComputeScalePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (PipelineExternalComputeScalePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineExternalComputeScalePropertiesResponse)(nil)).Elem()
}

func (o PipelineExternalComputeScalePropertiesResponsePtrOutput) ToPipelineExternalComputeScalePropertiesResponsePtrOutput() PipelineExternalComputeScalePropertiesResponsePtrOutput {
	return o
}

func (o PipelineExternalComputeScalePropertiesResponsePtrOutput) ToPipelineExternalComputeScalePropertiesResponsePtrOutputWithContext(ctx context.Context) PipelineExternalComputeScalePropertiesResponsePtrOutput {
	return o
}

func (o PipelineExternalComputeScalePropertiesResponsePtrOutput) Elem() PipelineExternalComputeScalePropertiesResponseOutput {
	return o.ApplyT(func(v *PipelineExternalComputeScalePropertiesResponse) PipelineExternalComputeScalePropertiesResponse {
		if v != nil {
			return *v
		}
		var ret PipelineExternalComputeScalePropertiesResponse
		return ret
	}).(PipelineExternalComputeScalePropertiesResponseOutput)
}

// Number of the the external nodes, which should be greater than 0 and less than 11.
func (o PipelineExternalComputeScalePropertiesResponsePtrOutput) NumberOfExternalNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipelineExternalComputeScalePropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfExternalNodes
	}).(pulumi.IntPtrOutput)
}

// Number of the pipeline nodes, which should be greater than 0 and less than 11.
func (o PipelineExternalComputeScalePropertiesResponsePtrOutput) NumberOfPipelineNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipelineExternalComputeScalePropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfPipelineNodes
	}).(pulumi.IntPtrOutput)
}

// Time to live (in minutes) setting of integration runtime which will execute pipeline and external activity.
func (o PipelineExternalComputeScalePropertiesResponsePtrOutput) TimeToLive() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipelineExternalComputeScalePropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.TimeToLive
	}).(pulumi.IntPtrOutput)
}

// The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
type PipelineFolder struct {
	// The name of the folder that this Pipeline is in.
	Name *string `pulumi:"name"`
}

// PipelineFolderInput is an input type that accepts PipelineFolderArgs and PipelineFolderOutput values.
// You can construct a concrete instance of `PipelineFolderInput` via:
//
//	PipelineFolderArgs{...}
type PipelineFolderInput interface {
	pulumi.Input

	ToPipelineFolderOutput() PipelineFolderOutput
	ToPipelineFolderOutputWithContext(context.Context) PipelineFolderOutput
}

// The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
type PipelineFolderArgs struct {
	// The name of the folder that this Pipeline is in.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (PipelineFolderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineFolder)(nil)).Elem()
}

func (i PipelineFolderArgs) ToPipelineFolderOutput() PipelineFolderOutput {
	return i.ToPipelineFolderOutputWithContext(context.Background())
}

func (i PipelineFolderArgs) ToPipelineFolderOutputWithContext(ctx context.Context) PipelineFolderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineFolderOutput)
}

func (i PipelineFolderArgs) ToPipelineFolderPtrOutput() PipelineFolderPtrOutput {
	return i.ToPipelineFolderPtrOutputWithContext(context.Background())
}

func (i PipelineFolderArgs) ToPipelineFolderPtrOutputWithContext(ctx context.Context) PipelineFolderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineFolderOutput).ToPipelineFolderPtrOutputWithContext(ctx)
}

// PipelineFolderPtrInput is an input type that accepts PipelineFolderArgs, PipelineFolderPtr and PipelineFolderPtrOutput values.
// You can construct a concrete instance of `PipelineFolderPtrInput` via:
//
//	        PipelineFolderArgs{...}
//
//	or:
//
//	        nil
type PipelineFolderPtrInput interface {
	pulumi.Input

	ToPipelineFolderPtrOutput() PipelineFolderPtrOutput
	ToPipelineFolderPtrOutputWithContext(context.Context) PipelineFolderPtrOutput
}

type pipelineFolderPtrType PipelineFolderArgs

func PipelineFolderPtr(v *PipelineFolderArgs) PipelineFolderPtrInput {
	return (*pipelineFolderPtrType)(v)
}

func (*pipelineFolderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineFolder)(nil)).Elem()
}

func (i *pipelineFolderPtrType) ToPipelineFolderPtrOutput() PipelineFolderPtrOutput {
	return i.ToPipelineFolderPtrOutputWithContext(context.Background())
}

func (i *pipelineFolderPtrType) ToPipelineFolderPtrOutputWithContext(ctx context.Context) PipelineFolderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineFolderPtrOutput)
}

// The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
type PipelineFolderOutput struct{ *pulumi.OutputState }

func (PipelineFolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineFolder)(nil)).Elem()
}

func (o PipelineFolderOutput) ToPipelineFolderOutput() PipelineFolderOutput {
	return o
}

func (o PipelineFolderOutput) ToPipelineFolderOutputWithContext(ctx context.Context) PipelineFolderOutput {
	return o
}

func (o PipelineFolderOutput) ToPipelineFolderPtrOutput() PipelineFolderPtrOutput {
	return o.ToPipelineFolderPtrOutputWithContext(context.Background())
}

func (o PipelineFolderOutput) ToPipelineFolderPtrOutputWithContext(ctx context.Context) PipelineFolderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipelineFolder) *PipelineFolder {
		return &v
	}).(PipelineFolderPtrOutput)
}

// The name of the folder that this Pipeline is in.
func (o PipelineFolderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineFolder) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type PipelineFolderPtrOutput struct{ *pulumi.OutputState }

func (PipelineFolderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineFolder)(nil)).Elem()
}

func (o PipelineFolderPtrOutput) ToPipelineFolderPtrOutput() PipelineFolderPtrOutput {
	return o
}

func (o PipelineFolderPtrOutput) ToPipelineFolderPtrOutputWithContext(ctx context.Context) PipelineFolderPtrOutput {
	return o
}

func (o PipelineFolderPtrOutput) Elem() PipelineFolderOutput {
	return o.ApplyT(func(v *PipelineFolder) PipelineFolder {
		if v != nil {
			return *v
		}
		var ret PipelineFolder
		return ret
	}).(PipelineFolderOutput)
}

// The name of the folder that this Pipeline is in.
func (o PipelineFolderPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineFolder) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Pipeline Policy.
type PipelinePolicy struct {
	// Pipeline ElapsedTime Metric Policy.
	ElapsedTimeMetric *PipelineElapsedTimeMetricPolicy `pulumi:"elapsedTimeMetric"`
}

// PipelinePolicyInput is an input type that accepts PipelinePolicyArgs and PipelinePolicyOutput values.
// You can construct a concrete instance of `PipelinePolicyInput` via:
//
//	PipelinePolicyArgs{...}
type PipelinePolicyInput interface {
	pulumi.Input

	ToPipelinePolicyOutput() PipelinePolicyOutput
	ToPipelinePolicyOutputWithContext(context.Context) PipelinePolicyOutput
}

// Pipeline Policy.
type PipelinePolicyArgs struct {
	// Pipeline ElapsedTime Metric Policy.
	ElapsedTimeMetric PipelineElapsedTimeMetricPolicyPtrInput `pulumi:"elapsedTimeMetric"`
}

func (PipelinePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelinePolicy)(nil)).Elem()
}

func (i PipelinePolicyArgs) ToPipelinePolicyOutput() PipelinePolicyOutput {
	return i.ToPipelinePolicyOutputWithContext(context.Background())
}

func (i PipelinePolicyArgs) ToPipelinePolicyOutputWithContext(ctx context.Context) PipelinePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelinePolicyOutput)
}

func (i PipelinePolicyArgs) ToPipelinePolicyPtrOutput() PipelinePolicyPtrOutput {
	return i.ToPipelinePolicyPtrOutputWithContext(context.Background())
}

func (i PipelinePolicyArgs) ToPipelinePolicyPtrOutputWithContext(ctx context.Context) PipelinePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelinePolicyOutput).ToPipelinePolicyPtrOutputWithContext(ctx)
}

// PipelinePolicyPtrInput is an input type that accepts PipelinePolicyArgs, PipelinePolicyPtr and PipelinePolicyPtrOutput values.
// You can construct a concrete instance of `PipelinePolicyPtrInput` via:
//
//	        PipelinePolicyArgs{...}
//
//	or:
//
//	        nil
type PipelinePolicyPtrInput interface {
	pulumi.Input

	ToPipelinePolicyPtrOutput() PipelinePolicyPtrOutput
	ToPipelinePolicyPtrOutputWithContext(context.Context) PipelinePolicyPtrOutput
}

type pipelinePolicyPtrType PipelinePolicyArgs

func PipelinePolicyPtr(v *PipelinePolicyArgs) PipelinePolicyPtrInput {
	return (*pipelinePolicyPtrType)(v)
}

func (*pipelinePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelinePolicy)(nil)).Elem()
}

func (i *pipelinePolicyPtrType) ToPipelinePolicyPtrOutput() PipelinePolicyPtrOutput {
	return i.ToPipelinePolicyPtrOutputWithContext(context.Background())
}

func (i *pipelinePolicyPtrType) ToPipelinePolicyPtrOutputWithContext(ctx context.Context) PipelinePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelinePolicyPtrOutput)
}

// Pipeline Policy.
type PipelinePolicyOutput struct{ *pulumi.OutputState }

func (PipelinePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelinePolicy)(nil)).Elem()
}

func (o PipelinePolicyOutput) ToPipelinePolicyOutput() PipelinePolicyOutput {
	return o
}

func (o PipelinePolicyOutput) ToPipelinePolicyOutputWithContext(ctx context.Context) PipelinePolicyOutput {
	return o
}

func (o PipelinePolicyOutput) ToPipelinePolicyPtrOutput() PipelinePolicyPtrOutput {
	return o.ToPipelinePolicyPtrOutputWithContext(context.Background())
}

func (o PipelinePolicyOutput) ToPipelinePolicyPtrOutputWithContext(ctx context.Context) PipelinePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipelinePolicy) *PipelinePolicy {
		return &v
	}).(PipelinePolicyPtrOutput)
}

// Pipeline ElapsedTime Metric Policy.
func (o PipelinePolicyOutput) ElapsedTimeMetric() PipelineElapsedTimeMetricPolicyPtrOutput {
	return o.ApplyT(func(v PipelinePolicy) *PipelineElapsedTimeMetricPolicy { return v.ElapsedTimeMetric }).(PipelineElapsedTimeMetricPolicyPtrOutput)
}

type PipelinePolicyPtrOutput struct{ *pulumi.OutputState }

func (PipelinePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelinePolicy)(nil)).Elem()
}

func (o PipelinePolicyPtrOutput) ToPipelinePolicyPtrOutput() PipelinePolicyPtrOutput {
	return o
}

func (o PipelinePolicyPtrOutput) ToPipelinePolicyPtrOutputWithContext(ctx context.Context) PipelinePolicyPtrOutput {
	return o
}

func (o PipelinePolicyPtrOutput) Elem() PipelinePolicyOutput {
	return o.ApplyT(func(v *PipelinePolicy) PipelinePolicy {
		if v != nil {
			return *v
		}
		var ret PipelinePolicy
		return ret
	}).(PipelinePolicyOutput)
}

// Pipeline ElapsedTime Metric Policy.
func (o PipelinePolicyPtrOutput) ElapsedTimeMetric() PipelineElapsedTimeMetricPolicyPtrOutput {
	return o.ApplyT(func(v *PipelinePolicy) *PipelineElapsedTimeMetricPolicy {
		if v == nil {
			return nil
		}
		return v.ElapsedTimeMetric
	}).(PipelineElapsedTimeMetricPolicyPtrOutput)
}

// Pipeline Policy.
type PipelinePolicyResponse struct {
	// Pipeline ElapsedTime Metric Policy.
	ElapsedTimeMetric *PipelineElapsedTimeMetricPolicyResponse `pulumi:"elapsedTimeMetric"`
}

// Pipeline Policy.
type PipelinePolicyResponseOutput struct{ *pulumi.OutputState }

func (PipelinePolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelinePolicyResponse)(nil)).Elem()
}

func (o PipelinePolicyResponseOutput) ToPipelinePolicyResponseOutput() PipelinePolicyResponseOutput {
	return o
}

func (o PipelinePolicyResponseOutput) ToPipelinePolicyResponseOutputWithContext(ctx context.Context) PipelinePolicyResponseOutput {
	return o
}

// Pipeline ElapsedTime Metric Policy.
func (o PipelinePolicyResponseOutput) ElapsedTimeMetric() PipelineElapsedTimeMetricPolicyResponsePtrOutput {
	return o.ApplyT(func(v PipelinePolicyResponse) *PipelineElapsedTimeMetricPolicyResponse { return v.ElapsedTimeMetric }).(PipelineElapsedTimeMetricPolicyResponsePtrOutput)
}

type PipelinePolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (PipelinePolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelinePolicyResponse)(nil)).Elem()
}

func (o PipelinePolicyResponsePtrOutput) ToPipelinePolicyResponsePtrOutput() PipelinePolicyResponsePtrOutput {
	return o
}

func (o PipelinePolicyResponsePtrOutput) ToPipelinePolicyResponsePtrOutputWithContext(ctx context.Context) PipelinePolicyResponsePtrOutput {
	return o
}

func (o PipelinePolicyResponsePtrOutput) Elem() PipelinePolicyResponseOutput {
	return o.ApplyT(func(v *PipelinePolicyResponse) PipelinePolicyResponse {
		if v != nil {
			return *v
		}
		var ret PipelinePolicyResponse
		return ret
	}).(PipelinePolicyResponseOutput)
}

// Pipeline ElapsedTime Metric Policy.
func (o PipelinePolicyResponsePtrOutput) ElapsedTimeMetric() PipelineElapsedTimeMetricPolicyResponsePtrOutput {
	return o.ApplyT(func(v *PipelinePolicyResponse) *PipelineElapsedTimeMetricPolicyResponse {
		if v == nil {
			return nil
		}
		return v.ElapsedTimeMetric
	}).(PipelineElapsedTimeMetricPolicyResponsePtrOutput)
}

// Pipeline reference type.
type PipelineReference struct {
	// Reference name.
	Name *string `pulumi:"name"`
	// Reference pipeline name.
	ReferenceName string `pulumi:"referenceName"`
	// Pipeline reference type.
	Type string `pulumi:"type"`
}

// PipelineReferenceInput is an input type that accepts PipelineReferenceArgs and PipelineReferenceOutput values.
// You can construct a concrete instance of `PipelineReferenceInput` via:
//
//	PipelineReferenceArgs{...}
type PipelineReferenceInput interface {
	pulumi.Input

	ToPipelineReferenceOutput() PipelineReferenceOutput
	ToPipelineReferenceOutputWithContext(context.Context) PipelineReferenceOutput
}

// Pipeline reference type.
type PipelineReferenceArgs struct {
	// Reference name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Reference pipeline name.
	ReferenceName pulumi.StringInput `pulumi:"referenceName"`
	// Pipeline reference type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PipelineReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineReference)(nil)).Elem()
}

func (i PipelineReferenceArgs) ToPipelineReferenceOutput() PipelineReferenceOutput {
	return i.ToPipelineReferenceOutputWithContext(context.Background())
}

func (i PipelineReferenceArgs) ToPipelineReferenceOutputWithContext(ctx context.Context) PipelineReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineReferenceOutput)
}

func (i PipelineReferenceArgs) ToPipelineReferencePtrOutput() PipelineReferencePtrOutput {
	return i.ToPipelineReferencePtrOutputWithContext(context.Background())
}

func (i PipelineReferenceArgs) ToPipelineReferencePtrOutputWithContext(ctx context.Context) PipelineReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineReferenceOutput).ToPipelineReferencePtrOutputWithContext(ctx)
}

// PipelineReferencePtrInput is an input type that accepts PipelineReferenceArgs, PipelineReferencePtr and PipelineReferencePtrOutput values.
// You can construct a concrete instance of `PipelineReferencePtrInput` via:
//
//	        PipelineReferenceArgs{...}
//
//	or:
//
//	        nil
type PipelineReferencePtrInput interface {
	pulumi.Input

	ToPipelineReferencePtrOutput() PipelineReferencePtrOutput
	ToPipelineReferencePtrOutputWithContext(context.Context) PipelineReferencePtrOutput
}

type pipelineReferencePtrType PipelineReferenceArgs

func PipelineReferencePtr(v *PipelineReferenceArgs) PipelineReferencePtrInput {
	return (*pipelineReferencePtrType)(v)
}

func (*pipelineReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineReference)(nil)).Elem()
}

func (i *pipelineReferencePtrType) ToPipelineReferencePtrOutput() PipelineReferencePtrOutput {
	return i.ToPipelineReferencePtrOutputWithContext(context.Background())
}

func (i *pipelineReferencePtrType) ToPipelineReferencePtrOutputWithContext(ctx context.Context) PipelineReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineReferencePtrOutput)
}

// PipelineReferenceArrayInput is an input type that accepts PipelineReferenceArray and PipelineReferenceArrayOutput values.
// You can construct a concrete instance of `PipelineReferenceArrayInput` via:
//
//	PipelineReferenceArray{ PipelineReferenceArgs{...} }
type PipelineReferenceArrayInput interface {
	pulumi.Input

	ToPipelineReferenceArrayOutput() PipelineReferenceArrayOutput
	ToPipelineReferenceArrayOutputWithContext(context.Context) PipelineReferenceArrayOutput
}

type PipelineReferenceArray []PipelineReferenceInput

func (PipelineReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineReference)(nil)).Elem()
}

func (i PipelineReferenceArray) ToPipelineReferenceArrayOutput() PipelineReferenceArrayOutput {
	return i.ToPipelineReferenceArrayOutputWithContext(context.Background())
}

func (i PipelineReferenceArray) ToPipelineReferenceArrayOutputWithContext(ctx context.Context) PipelineReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineReferenceArrayOutput)
}

// Pipeline reference type.
type PipelineReferenceOutput struct{ *pulumi.OutputState }

func (PipelineReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineReference)(nil)).Elem()
}

func (o PipelineReferenceOutput) ToPipelineReferenceOutput() PipelineReferenceOutput {
	return o
}

func (o PipelineReferenceOutput) ToPipelineReferenceOutputWithContext(ctx context.Context) PipelineReferenceOutput {
	return o
}

func (o PipelineReferenceOutput) ToPipelineReferencePtrOutput() PipelineReferencePtrOutput {
	return o.ToPipelineReferencePtrOutputWithContext(context.Background())
}

func (o PipelineReferenceOutput) ToPipelineReferencePtrOutputWithContext(ctx context.Context) PipelineReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipelineReference) *PipelineReference {
		return &v
	}).(PipelineReferencePtrOutput)
}

// Reference name.
func (o PipelineReferenceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineReference) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Reference pipeline name.
func (o PipelineReferenceOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineReference) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Pipeline reference type.
func (o PipelineReferenceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineReference) string { return v.Type }).(pulumi.StringOutput)
}

type PipelineReferencePtrOutput struct{ *pulumi.OutputState }

func (PipelineReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineReference)(nil)).Elem()
}

func (o PipelineReferencePtrOutput) ToPipelineReferencePtrOutput() PipelineReferencePtrOutput {
	return o
}

func (o PipelineReferencePtrOutput) ToPipelineReferencePtrOutputWithContext(ctx context.Context) PipelineReferencePtrOutput {
	return o
}

func (o PipelineReferencePtrOutput) Elem() PipelineReferenceOutput {
	return o.ApplyT(func(v *PipelineReference) PipelineReference {
		if v != nil {
			return *v
		}
		var ret PipelineReference
		return ret
	}).(PipelineReferenceOutput)
}

// Reference name.
func (o PipelineReferencePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineReference) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Reference pipeline name.
func (o PipelineReferencePtrOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineReference) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceName
	}).(pulumi.StringPtrOutput)
}

// Pipeline reference type.
func (o PipelineReferencePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineReference) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type PipelineReferenceArrayOutput struct{ *pulumi.OutputState }

func (PipelineReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineReference)(nil)).Elem()
}

func (o PipelineReferenceArrayOutput) ToPipelineReferenceArrayOutput() PipelineReferenceArrayOutput {
	return o
}

func (o PipelineReferenceArrayOutput) ToPipelineReferenceArrayOutputWithContext(ctx context.Context) PipelineReferenceArrayOutput {
	return o
}

func (o PipelineReferenceArrayOutput) Index(i pulumi.IntInput) PipelineReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipelineReference {
		return vs[0].([]PipelineReference)[vs[1].(int)]
	}).(PipelineReferenceOutput)
}

// Pipeline reference type.
type PipelineReferenceResponse struct {
	// Reference name.
	Name *string `pulumi:"name"`
	// Reference pipeline name.
	ReferenceName string `pulumi:"referenceName"`
	// Pipeline reference type.
	Type string `pulumi:"type"`
}

// Pipeline reference type.
type PipelineReferenceResponseOutput struct{ *pulumi.OutputState }

func (PipelineReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineReferenceResponse)(nil)).Elem()
}

func (o PipelineReferenceResponseOutput) ToPipelineReferenceResponseOutput() PipelineReferenceResponseOutput {
	return o
}

func (o PipelineReferenceResponseOutput) ToPipelineReferenceResponseOutputWithContext(ctx context.Context) PipelineReferenceResponseOutput {
	return o
}

// Reference name.
func (o PipelineReferenceResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineReferenceResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Reference pipeline name.
func (o PipelineReferenceResponseOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineReferenceResponse) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Pipeline reference type.
func (o PipelineReferenceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineReferenceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type PipelineReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (PipelineReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineReferenceResponse)(nil)).Elem()
}

func (o PipelineReferenceResponsePtrOutput) ToPipelineReferenceResponsePtrOutput() PipelineReferenceResponsePtrOutput {
	return o
}

func (o PipelineReferenceResponsePtrOutput) ToPipelineReferenceResponsePtrOutputWithContext(ctx context.Context) PipelineReferenceResponsePtrOutput {
	return o
}

func (o PipelineReferenceResponsePtrOutput) Elem() PipelineReferenceResponseOutput {
	return o.ApplyT(func(v *PipelineReferenceResponse) PipelineReferenceResponse {
		if v != nil {
			return *v
		}
		var ret PipelineReferenceResponse
		return ret
	}).(PipelineReferenceResponseOutput)
}

// Reference name.
func (o PipelineReferenceResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Reference pipeline name.
func (o PipelineReferenceResponsePtrOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceName
	}).(pulumi.StringPtrOutput)
}

// Pipeline reference type.
func (o PipelineReferenceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type PipelineReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (PipelineReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineReferenceResponse)(nil)).Elem()
}

func (o PipelineReferenceResponseArrayOutput) ToPipelineReferenceResponseArrayOutput() PipelineReferenceResponseArrayOutput {
	return o
}

func (o PipelineReferenceResponseArrayOutput) ToPipelineReferenceResponseArrayOutputWithContext(ctx context.Context) PipelineReferenceResponseArrayOutput {
	return o
}

func (o PipelineReferenceResponseArrayOutput) Index(i pulumi.IntInput) PipelineReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipelineReferenceResponse {
		return vs[0].([]PipelineReferenceResponse)[vs[1].(int)]
	}).(PipelineReferenceResponseOutput)
}

// The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
type PipelineResponseFolder struct {
	// The name of the folder that this Pipeline is in.
	Name *string `pulumi:"name"`
}

// The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
type PipelineResponseFolderOutput struct{ *pulumi.OutputState }

func (PipelineResponseFolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineResponseFolder)(nil)).Elem()
}

func (o PipelineResponseFolderOutput) ToPipelineResponseFolderOutput() PipelineResponseFolderOutput {
	return o
}

func (o PipelineResponseFolderOutput) ToPipelineResponseFolderOutputWithContext(ctx context.Context) PipelineResponseFolderOutput {
	return o
}

// The name of the folder that this Pipeline is in.
func (o PipelineResponseFolderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineResponseFolder) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type PipelineResponseFolderPtrOutput struct{ *pulumi.OutputState }

func (PipelineResponseFolderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineResponseFolder)(nil)).Elem()
}

func (o PipelineResponseFolderPtrOutput) ToPipelineResponseFolderPtrOutput() PipelineResponseFolderPtrOutput {
	return o
}

func (o PipelineResponseFolderPtrOutput) ToPipelineResponseFolderPtrOutputWithContext(ctx context.Context) PipelineResponseFolderPtrOutput {
	return o
}

func (o PipelineResponseFolderPtrOutput) Elem() PipelineResponseFolderOutput {
	return o.ApplyT(func(v *PipelineResponseFolder) PipelineResponseFolder {
		if v != nil {
			return *v
		}
		var ret PipelineResponseFolder
		return ret
	}).(PipelineResponseFolderOutput)
}

// The name of the folder that this Pipeline is in.
func (o PipelineResponseFolderPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineResponseFolder) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// PolyBase settings.
type PolybaseSettings struct {
	// Determines the number of rows to attempt to retrieve before the PolyBase recalculates the percentage of rejected rows. Type: integer (or Expression with resultType integer), minimum: 0.
	RejectSampleValue interface{} `pulumi:"rejectSampleValue"`
	// Reject type.
	RejectType *string `pulumi:"rejectType"`
	// Specifies the value or the percentage of rows that can be rejected before the query fails. Type: number (or Expression with resultType number), minimum: 0.
	RejectValue interface{} `pulumi:"rejectValue"`
	// Specifies how to handle missing values in delimited text files when PolyBase retrieves data from the text file. Type: boolean (or Expression with resultType boolean).
	UseTypeDefault interface{} `pulumi:"useTypeDefault"`
}

// PolybaseSettingsInput is an input type that accepts PolybaseSettingsArgs and PolybaseSettingsOutput values.
// You can construct a concrete instance of `PolybaseSettingsInput` via:
//
//	PolybaseSettingsArgs{...}
type PolybaseSettingsInput interface {
	pulumi.Input

	ToPolybaseSettingsOutput() PolybaseSettingsOutput
	ToPolybaseSettingsOutputWithContext(context.Context) PolybaseSettingsOutput
}

// PolyBase settings.
type PolybaseSettingsArgs struct {
	// Determines the number of rows to attempt to retrieve before the PolyBase recalculates the percentage of rejected rows. Type: integer (or Expression with resultType integer), minimum: 0.
	RejectSampleValue pulumi.Input `pulumi:"rejectSampleValue"`
	// Reject type.
	RejectType pulumi.StringPtrInput `pulumi:"rejectType"`
	// Specifies the value or the percentage of rows that can be rejected before the query fails. Type: number (or Expression with resultType number), minimum: 0.
	RejectValue pulumi.Input `pulumi:"rejectValue"`
	// Specifies how to handle missing values in delimited text files when PolyBase retrieves data from the text file. Type: boolean (or Expression with resultType boolean).
	UseTypeDefault pulumi.Input `pulumi:"useTypeDefault"`
}

func (PolybaseSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolybaseSettings)(nil)).Elem()
}

func (i PolybaseSettingsArgs) ToPolybaseSettingsOutput() PolybaseSettingsOutput {
	return i.ToPolybaseSettingsOutputWithContext(context.Background())
}

func (i PolybaseSettingsArgs) ToPolybaseSettingsOutputWithContext(ctx context.Context) PolybaseSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolybaseSettingsOutput)
}

func (i PolybaseSettingsArgs) ToPolybaseSettingsPtrOutput() PolybaseSettingsPtrOutput {
	return i.ToPolybaseSettingsPtrOutputWithContext(context.Background())
}

func (i PolybaseSettingsArgs) ToPolybaseSettingsPtrOutputWithContext(ctx context.Context) PolybaseSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolybaseSettingsOutput).ToPolybaseSettingsPtrOutputWithContext(ctx)
}

// PolybaseSettingsPtrInput is an input type that accepts PolybaseSettingsArgs, PolybaseSettingsPtr and PolybaseSettingsPtrOutput values.
// You can construct a concrete instance of `PolybaseSettingsPtrInput` via:
//
//	        PolybaseSettingsArgs{...}
//
//	or:
//
//	        nil
type PolybaseSettingsPtrInput interface {
	pulumi.Input

	ToPolybaseSettingsPtrOutput() PolybaseSettingsPtrOutput
	ToPolybaseSettingsPtrOutputWithContext(context.Context) PolybaseSettingsPtrOutput
}

type polybaseSettingsPtrType PolybaseSettingsArgs

func PolybaseSettingsPtr(v *PolybaseSettingsArgs) PolybaseSettingsPtrInput {
	return (*polybaseSettingsPtrType)(v)
}

func (*polybaseSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolybaseSettings)(nil)).Elem()
}

func (i *polybaseSettingsPtrType) ToPolybaseSettingsPtrOutput() PolybaseSettingsPtrOutput {
	return i.ToPolybaseSettingsPtrOutputWithContext(context.Background())
}

func (i *polybaseSettingsPtrType) ToPolybaseSettingsPtrOutputWithContext(ctx context.Context) PolybaseSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolybaseSettingsPtrOutput)
}

// PolyBase settings.
type PolybaseSettingsOutput struct{ *pulumi.OutputState }

func (PolybaseSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolybaseSettings)(nil)).Elem()
}

func (o PolybaseSettingsOutput) ToPolybaseSettingsOutput() PolybaseSettingsOutput {
	return o
}

func (o PolybaseSettingsOutput) ToPolybaseSettingsOutputWithContext(ctx context.Context) PolybaseSettingsOutput {
	return o
}

func (o PolybaseSettingsOutput) ToPolybaseSettingsPtrOutput() PolybaseSettingsPtrOutput {
	return o.ToPolybaseSettingsPtrOutputWithContext(context.Background())
}

func (o PolybaseSettingsOutput) ToPolybaseSettingsPtrOutputWithContext(ctx context.Context) PolybaseSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolybaseSettings) *PolybaseSettings {
		return &v
	}).(PolybaseSettingsPtrOutput)
}

// Determines the number of rows to attempt to retrieve before the PolyBase recalculates the percentage of rejected rows. Type: integer (or Expression with resultType integer), minimum: 0.
func (o PolybaseSettingsOutput) RejectSampleValue() pulumi.AnyOutput {
	return o.ApplyT(func(v PolybaseSettings) interface{} { return v.RejectSampleValue }).(pulumi.AnyOutput)
}

// Reject type.
func (o PolybaseSettingsOutput) RejectType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolybaseSettings) *string { return v.RejectType }).(pulumi.StringPtrOutput)
}

// Specifies the value or the percentage of rows that can be rejected before the query fails. Type: number (or Expression with resultType number), minimum: 0.
func (o PolybaseSettingsOutput) RejectValue() pulumi.AnyOutput {
	return o.ApplyT(func(v PolybaseSettings) interface{} { return v.RejectValue }).(pulumi.AnyOutput)
}

// Specifies how to handle missing values in delimited text files when PolyBase retrieves data from the text file. Type: boolean (or Expression with resultType boolean).
func (o PolybaseSettingsOutput) UseTypeDefault() pulumi.AnyOutput {
	return o.ApplyT(func(v PolybaseSettings) interface{} { return v.UseTypeDefault }).(pulumi.AnyOutput)
}

type PolybaseSettingsPtrOutput struct{ *pulumi.OutputState }

func (PolybaseSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolybaseSettings)(nil)).Elem()
}

func (o PolybaseSettingsPtrOutput) ToPolybaseSettingsPtrOutput() PolybaseSettingsPtrOutput {
	return o
}

func (o PolybaseSettingsPtrOutput) ToPolybaseSettingsPtrOutputWithContext(ctx context.Context) PolybaseSettingsPtrOutput {
	return o
}

func (o PolybaseSettingsPtrOutput) Elem() PolybaseSettingsOutput {
	return o.ApplyT(func(v *PolybaseSettings) PolybaseSettings {
		if v != nil {
			return *v
		}
		var ret PolybaseSettings
		return ret
	}).(PolybaseSettingsOutput)
}

// Determines the number of rows to attempt to retrieve before the PolyBase recalculates the percentage of rejected rows. Type: integer (or Expression with resultType integer), minimum: 0.
func (o PolybaseSettingsPtrOutput) RejectSampleValue() pulumi.AnyOutput {
	return o.ApplyT(func(v *PolybaseSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.RejectSampleValue
	}).(pulumi.AnyOutput)
}

// Reject type.
func (o PolybaseSettingsPtrOutput) RejectType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolybaseSettings) *string {
		if v == nil {
			return nil
		}
		return v.RejectType
	}).(pulumi.StringPtrOutput)
}

// Specifies the value or the percentage of rows that can be rejected before the query fails. Type: number (or Expression with resultType number), minimum: 0.
func (o PolybaseSettingsPtrOutput) RejectValue() pulumi.AnyOutput {
	return o.ApplyT(func(v *PolybaseSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.RejectValue
	}).(pulumi.AnyOutput)
}

// Specifies how to handle missing values in delimited text files when PolyBase retrieves data from the text file. Type: boolean (or Expression with resultType boolean).
func (o PolybaseSettingsPtrOutput) UseTypeDefault() pulumi.AnyOutput {
	return o.ApplyT(func(v *PolybaseSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.UseTypeDefault
	}).(pulumi.AnyOutput)
}

// PolyBase settings.
type PolybaseSettingsResponse struct {
	// Determines the number of rows to attempt to retrieve before the PolyBase recalculates the percentage of rejected rows. Type: integer (or Expression with resultType integer), minimum: 0.
	RejectSampleValue interface{} `pulumi:"rejectSampleValue"`
	// Reject type.
	RejectType *string `pulumi:"rejectType"`
	// Specifies the value or the percentage of rows that can be rejected before the query fails. Type: number (or Expression with resultType number), minimum: 0.
	RejectValue interface{} `pulumi:"rejectValue"`
	// Specifies how to handle missing values in delimited text files when PolyBase retrieves data from the text file. Type: boolean (or Expression with resultType boolean).
	UseTypeDefault interface{} `pulumi:"useTypeDefault"`
}

// PolyBase settings.
type PolybaseSettingsResponseOutput struct{ *pulumi.OutputState }

func (PolybaseSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolybaseSettingsResponse)(nil)).Elem()
}

func (o PolybaseSettingsResponseOutput) ToPolybaseSettingsResponseOutput() PolybaseSettingsResponseOutput {
	return o
}

func (o PolybaseSettingsResponseOutput) ToPolybaseSettingsResponseOutputWithContext(ctx context.Context) PolybaseSettingsResponseOutput {
	return o
}

// Determines the number of rows to attempt to retrieve before the PolyBase recalculates the percentage of rejected rows. Type: integer (or Expression with resultType integer), minimum: 0.
func (o PolybaseSettingsResponseOutput) RejectSampleValue() pulumi.AnyOutput {
	return o.ApplyT(func(v PolybaseSettingsResponse) interface{} { return v.RejectSampleValue }).(pulumi.AnyOutput)
}

// Reject type.
func (o PolybaseSettingsResponseOutput) RejectType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolybaseSettingsResponse) *string { return v.RejectType }).(pulumi.StringPtrOutput)
}

// Specifies the value or the percentage of rows that can be rejected before the query fails. Type: number (or Expression with resultType number), minimum: 0.
func (o PolybaseSettingsResponseOutput) RejectValue() pulumi.AnyOutput {
	return o.ApplyT(func(v PolybaseSettingsResponse) interface{} { return v.RejectValue }).(pulumi.AnyOutput)
}

// Specifies how to handle missing values in delimited text files when PolyBase retrieves data from the text file. Type: boolean (or Expression with resultType boolean).
func (o PolybaseSettingsResponseOutput) UseTypeDefault() pulumi.AnyOutput {
	return o.ApplyT(func(v PolybaseSettingsResponse) interface{} { return v.UseTypeDefault }).(pulumi.AnyOutput)
}

type PolybaseSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (PolybaseSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolybaseSettingsResponse)(nil)).Elem()
}

func (o PolybaseSettingsResponsePtrOutput) ToPolybaseSettingsResponsePtrOutput() PolybaseSettingsResponsePtrOutput {
	return o
}

func (o PolybaseSettingsResponsePtrOutput) ToPolybaseSettingsResponsePtrOutputWithContext(ctx context.Context) PolybaseSettingsResponsePtrOutput {
	return o
}

func (o PolybaseSettingsResponsePtrOutput) Elem() PolybaseSettingsResponseOutput {
	return o.ApplyT(func(v *PolybaseSettingsResponse) PolybaseSettingsResponse {
		if v != nil {
			return *v
		}
		var ret PolybaseSettingsResponse
		return ret
	}).(PolybaseSettingsResponseOutput)
}

// Determines the number of rows to attempt to retrieve before the PolyBase recalculates the percentage of rejected rows. Type: integer (or Expression with resultType integer), minimum: 0.
func (o PolybaseSettingsResponsePtrOutput) RejectSampleValue() pulumi.AnyOutput {
	return o.ApplyT(func(v *PolybaseSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.RejectSampleValue
	}).(pulumi.AnyOutput)
}

// Reject type.
func (o PolybaseSettingsResponsePtrOutput) RejectType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolybaseSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.RejectType
	}).(pulumi.StringPtrOutput)
}

// Specifies the value or the percentage of rows that can be rejected before the query fails. Type: number (or Expression with resultType number), minimum: 0.
func (o PolybaseSettingsResponsePtrOutput) RejectValue() pulumi.AnyOutput {
	return o.ApplyT(func(v *PolybaseSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.RejectValue
	}).(pulumi.AnyOutput)
}

// Specifies how to handle missing values in delimited text files when PolyBase retrieves data from the text file. Type: boolean (or Expression with resultType boolean).
func (o PolybaseSettingsResponsePtrOutput) UseTypeDefault() pulumi.AnyOutput {
	return o.ApplyT(func(v *PolybaseSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.UseTypeDefault
	}).(pulumi.AnyOutput)
}

// Linked service for PostgreSQL data source.
type PostgreSqlLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'PostgreSql'.
	Type string `pulumi:"type"`
}

// PostgreSqlLinkedServiceInput is an input type that accepts PostgreSqlLinkedServiceArgs and PostgreSqlLinkedServiceOutput values.
// You can construct a concrete instance of `PostgreSqlLinkedServiceInput` via:
//
//	PostgreSqlLinkedServiceArgs{...}
type PostgreSqlLinkedServiceInput interface {
	pulumi.Input

	ToPostgreSqlLinkedServiceOutput() PostgreSqlLinkedServiceOutput
	ToPostgreSqlLinkedServiceOutputWithContext(context.Context) PostgreSqlLinkedServiceOutput
}

// Linked service for PostgreSQL data source.
type PostgreSqlLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password AzureKeyVaultSecretReferencePtrInput `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'PostgreSql'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PostgreSqlLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSqlLinkedService)(nil)).Elem()
}

func (i PostgreSqlLinkedServiceArgs) ToPostgreSqlLinkedServiceOutput() PostgreSqlLinkedServiceOutput {
	return i.ToPostgreSqlLinkedServiceOutputWithContext(context.Background())
}

func (i PostgreSqlLinkedServiceArgs) ToPostgreSqlLinkedServiceOutputWithContext(ctx context.Context) PostgreSqlLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSqlLinkedServiceOutput)
}

// Linked service for PostgreSQL data source.
type PostgreSqlLinkedServiceOutput struct{ *pulumi.OutputState }

func (PostgreSqlLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSqlLinkedService)(nil)).Elem()
}

func (o PostgreSqlLinkedServiceOutput) ToPostgreSqlLinkedServiceOutput() PostgreSqlLinkedServiceOutput {
	return o
}

func (o PostgreSqlLinkedServiceOutput) ToPostgreSqlLinkedServiceOutputWithContext(ctx context.Context) PostgreSqlLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o PostgreSqlLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v PostgreSqlLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o PostgreSqlLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v PostgreSqlLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o PostgreSqlLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v PostgreSqlLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o PostgreSqlLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSqlLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o PostgreSqlLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSqlLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o PostgreSqlLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v PostgreSqlLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o PostgreSqlLinkedServiceOutput) Password() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v PostgreSqlLinkedService) *AzureKeyVaultSecretReference { return v.Password }).(AzureKeyVaultSecretReferencePtrOutput)
}

// Type of linked service.
// Expected value is 'PostgreSql'.
func (o PostgreSqlLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PostgreSqlLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for PostgreSQL data source.
type PostgreSqlLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReferenceResponse `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'PostgreSql'.
	Type string `pulumi:"type"`
}

// Linked service for PostgreSQL data source.
type PostgreSqlLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (PostgreSqlLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSqlLinkedServiceResponse)(nil)).Elem()
}

func (o PostgreSqlLinkedServiceResponseOutput) ToPostgreSqlLinkedServiceResponseOutput() PostgreSqlLinkedServiceResponseOutput {
	return o
}

func (o PostgreSqlLinkedServiceResponseOutput) ToPostgreSqlLinkedServiceResponseOutputWithContext(ctx context.Context) PostgreSqlLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o PostgreSqlLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v PostgreSqlLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o PostgreSqlLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v PostgreSqlLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o PostgreSqlLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v PostgreSqlLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o PostgreSqlLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSqlLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o PostgreSqlLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSqlLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o PostgreSqlLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v PostgreSqlLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o PostgreSqlLinkedServiceResponseOutput) Password() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v PostgreSqlLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse { return v.Password }).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// Type of linked service.
// Expected value is 'PostgreSql'.
func (o PostgreSqlLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PostgreSqlLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity source for PostgreSQL databases.
type PostgreSqlSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'PostgreSqlSource'.
	Type string `pulumi:"type"`
}

// PostgreSqlSourceInput is an input type that accepts PostgreSqlSourceArgs and PostgreSqlSourceOutput values.
// You can construct a concrete instance of `PostgreSqlSourceInput` via:
//
//	PostgreSqlSourceArgs{...}
type PostgreSqlSourceInput interface {
	pulumi.Input

	ToPostgreSqlSourceOutput() PostgreSqlSourceOutput
	ToPostgreSqlSourceOutputWithContext(context.Context) PostgreSqlSourceOutput
}

// A copy activity source for PostgreSQL databases.
type PostgreSqlSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'PostgreSqlSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PostgreSqlSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSqlSource)(nil)).Elem()
}

func (i PostgreSqlSourceArgs) ToPostgreSqlSourceOutput() PostgreSqlSourceOutput {
	return i.ToPostgreSqlSourceOutputWithContext(context.Background())
}

func (i PostgreSqlSourceArgs) ToPostgreSqlSourceOutputWithContext(ctx context.Context) PostgreSqlSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSqlSourceOutput)
}

// A copy activity source for PostgreSQL databases.
type PostgreSqlSourceOutput struct{ *pulumi.OutputState }

func (PostgreSqlSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSqlSource)(nil)).Elem()
}

func (o PostgreSqlSourceOutput) ToPostgreSqlSourceOutput() PostgreSqlSourceOutput {
	return o
}

func (o PostgreSqlSourceOutput) ToPostgreSqlSourceOutputWithContext(ctx context.Context) PostgreSqlSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o PostgreSqlSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v PostgreSqlSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o PostgreSqlSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v PostgreSqlSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o PostgreSqlSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v PostgreSqlSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Database query. Type: string (or Expression with resultType string).
func (o PostgreSqlSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v PostgreSqlSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o PostgreSqlSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v PostgreSqlSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o PostgreSqlSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v PostgreSqlSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o PostgreSqlSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v PostgreSqlSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'PostgreSqlSource'.
func (o PostgreSqlSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PostgreSqlSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity source for PostgreSQL databases.
type PostgreSqlSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'PostgreSqlSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for PostgreSQL databases.
type PostgreSqlSourceResponseOutput struct{ *pulumi.OutputState }

func (PostgreSqlSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSqlSourceResponse)(nil)).Elem()
}

func (o PostgreSqlSourceResponseOutput) ToPostgreSqlSourceResponseOutput() PostgreSqlSourceResponseOutput {
	return o
}

func (o PostgreSqlSourceResponseOutput) ToPostgreSqlSourceResponseOutputWithContext(ctx context.Context) PostgreSqlSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o PostgreSqlSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v PostgreSqlSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o PostgreSqlSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v PostgreSqlSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o PostgreSqlSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v PostgreSqlSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Database query. Type: string (or Expression with resultType string).
func (o PostgreSqlSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v PostgreSqlSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o PostgreSqlSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v PostgreSqlSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o PostgreSqlSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v PostgreSqlSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o PostgreSqlSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v PostgreSqlSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'PostgreSqlSource'.
func (o PostgreSqlSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PostgreSqlSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The PostgreSQL table dataset.
type PostgreSqlTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The PostgreSQL table name. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'PostgreSqlTable'.
	Type string `pulumi:"type"`
}

// PostgreSqlTableDatasetInput is an input type that accepts PostgreSqlTableDatasetArgs and PostgreSqlTableDatasetOutput values.
// You can construct a concrete instance of `PostgreSqlTableDatasetInput` via:
//
//	PostgreSqlTableDatasetArgs{...}
type PostgreSqlTableDatasetInput interface {
	pulumi.Input

	ToPostgreSqlTableDatasetOutput() PostgreSqlTableDatasetOutput
	ToPostgreSqlTableDatasetOutputWithContext(context.Context) PostgreSqlTableDatasetOutput
}

// The PostgreSQL table dataset.
type PostgreSqlTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The PostgreSQL table name. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'PostgreSqlTable'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PostgreSqlTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSqlTableDataset)(nil)).Elem()
}

func (i PostgreSqlTableDatasetArgs) ToPostgreSqlTableDatasetOutput() PostgreSqlTableDatasetOutput {
	return i.ToPostgreSqlTableDatasetOutputWithContext(context.Background())
}

func (i PostgreSqlTableDatasetArgs) ToPostgreSqlTableDatasetOutputWithContext(ctx context.Context) PostgreSqlTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgreSqlTableDatasetOutput)
}

// The PostgreSQL table dataset.
type PostgreSqlTableDatasetOutput struct{ *pulumi.OutputState }

func (PostgreSqlTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSqlTableDataset)(nil)).Elem()
}

func (o PostgreSqlTableDatasetOutput) ToPostgreSqlTableDatasetOutput() PostgreSqlTableDatasetOutput {
	return o
}

func (o PostgreSqlTableDatasetOutput) ToPostgreSqlTableDatasetOutputWithContext(ctx context.Context) PostgreSqlTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o PostgreSqlTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v PostgreSqlTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o PostgreSqlTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSqlTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o PostgreSqlTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v PostgreSqlTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o PostgreSqlTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v PostgreSqlTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o PostgreSqlTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v PostgreSqlTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o PostgreSqlTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v PostgreSqlTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o PostgreSqlTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v PostgreSqlTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The PostgreSQL table name. Type: string (or Expression with resultType string).
func (o PostgreSqlTableDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v PostgreSqlTableDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o PostgreSqlTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v PostgreSqlTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'PostgreSqlTable'.
func (o PostgreSqlTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PostgreSqlTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The PostgreSQL table dataset.
type PostgreSqlTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The PostgreSQL table name. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'PostgreSqlTable'.
	Type string `pulumi:"type"`
}

// The PostgreSQL table dataset.
type PostgreSqlTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (PostgreSqlTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgreSqlTableDatasetResponse)(nil)).Elem()
}

func (o PostgreSqlTableDatasetResponseOutput) ToPostgreSqlTableDatasetResponseOutput() PostgreSqlTableDatasetResponseOutput {
	return o
}

func (o PostgreSqlTableDatasetResponseOutput) ToPostgreSqlTableDatasetResponseOutputWithContext(ctx context.Context) PostgreSqlTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o PostgreSqlTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v PostgreSqlTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o PostgreSqlTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgreSqlTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o PostgreSqlTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v PostgreSqlTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o PostgreSqlTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v PostgreSqlTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o PostgreSqlTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v PostgreSqlTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o PostgreSqlTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v PostgreSqlTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o PostgreSqlTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v PostgreSqlTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The PostgreSQL table name. Type: string (or Expression with resultType string).
func (o PostgreSqlTableDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v PostgreSqlTableDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o PostgreSqlTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v PostgreSqlTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'PostgreSqlTable'.
func (o PostgreSqlTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PostgreSqlTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Power query sink.
type PowerQuerySink struct {
	// Dataset reference.
	Dataset *DatasetReference `pulumi:"dataset"`
	// Transformation description.
	Description *string `pulumi:"description"`
	// Flowlet Reference
	Flowlet *DataFlowReference `pulumi:"flowlet"`
	// Linked service reference.
	LinkedService *LinkedServiceReference `pulumi:"linkedService"`
	// Transformation name.
	Name string `pulumi:"name"`
	// Rejected data linked service reference.
	RejectedDataLinkedService *LinkedServiceReference `pulumi:"rejectedDataLinkedService"`
	// Schema linked service reference.
	SchemaLinkedService *LinkedServiceReference `pulumi:"schemaLinkedService"`
	// sink script.
	Script *string `pulumi:"script"`
}

// PowerQuerySinkInput is an input type that accepts PowerQuerySinkArgs and PowerQuerySinkOutput values.
// You can construct a concrete instance of `PowerQuerySinkInput` via:
//
//	PowerQuerySinkArgs{...}
type PowerQuerySinkInput interface {
	pulumi.Input

	ToPowerQuerySinkOutput() PowerQuerySinkOutput
	ToPowerQuerySinkOutputWithContext(context.Context) PowerQuerySinkOutput
}

// Power query sink.
type PowerQuerySinkArgs struct {
	// Dataset reference.
	Dataset DatasetReferencePtrInput `pulumi:"dataset"`
	// Transformation description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Flowlet Reference
	Flowlet DataFlowReferencePtrInput `pulumi:"flowlet"`
	// Linked service reference.
	LinkedService LinkedServiceReferencePtrInput `pulumi:"linkedService"`
	// Transformation name.
	Name pulumi.StringInput `pulumi:"name"`
	// Rejected data linked service reference.
	RejectedDataLinkedService LinkedServiceReferencePtrInput `pulumi:"rejectedDataLinkedService"`
	// Schema linked service reference.
	SchemaLinkedService LinkedServiceReferencePtrInput `pulumi:"schemaLinkedService"`
	// sink script.
	Script pulumi.StringPtrInput `pulumi:"script"`
}

func (PowerQuerySinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PowerQuerySink)(nil)).Elem()
}

func (i PowerQuerySinkArgs) ToPowerQuerySinkOutput() PowerQuerySinkOutput {
	return i.ToPowerQuerySinkOutputWithContext(context.Background())
}

func (i PowerQuerySinkArgs) ToPowerQuerySinkOutputWithContext(ctx context.Context) PowerQuerySinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PowerQuerySinkOutput)
}

// PowerQuerySinkArrayInput is an input type that accepts PowerQuerySinkArray and PowerQuerySinkArrayOutput values.
// You can construct a concrete instance of `PowerQuerySinkArrayInput` via:
//
//	PowerQuerySinkArray{ PowerQuerySinkArgs{...} }
type PowerQuerySinkArrayInput interface {
	pulumi.Input

	ToPowerQuerySinkArrayOutput() PowerQuerySinkArrayOutput
	ToPowerQuerySinkArrayOutputWithContext(context.Context) PowerQuerySinkArrayOutput
}

type PowerQuerySinkArray []PowerQuerySinkInput

func (PowerQuerySinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PowerQuerySink)(nil)).Elem()
}

func (i PowerQuerySinkArray) ToPowerQuerySinkArrayOutput() PowerQuerySinkArrayOutput {
	return i.ToPowerQuerySinkArrayOutputWithContext(context.Background())
}

func (i PowerQuerySinkArray) ToPowerQuerySinkArrayOutputWithContext(ctx context.Context) PowerQuerySinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PowerQuerySinkArrayOutput)
}

// PowerQuerySinkMapInput is an input type that accepts PowerQuerySinkMap and PowerQuerySinkMapOutput values.
// You can construct a concrete instance of `PowerQuerySinkMapInput` via:
//
//	PowerQuerySinkMap{ "key": PowerQuerySinkArgs{...} }
type PowerQuerySinkMapInput interface {
	pulumi.Input

	ToPowerQuerySinkMapOutput() PowerQuerySinkMapOutput
	ToPowerQuerySinkMapOutputWithContext(context.Context) PowerQuerySinkMapOutput
}

type PowerQuerySinkMap map[string]PowerQuerySinkInput

func (PowerQuerySinkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]PowerQuerySink)(nil)).Elem()
}

func (i PowerQuerySinkMap) ToPowerQuerySinkMapOutput() PowerQuerySinkMapOutput {
	return i.ToPowerQuerySinkMapOutputWithContext(context.Background())
}

func (i PowerQuerySinkMap) ToPowerQuerySinkMapOutputWithContext(ctx context.Context) PowerQuerySinkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PowerQuerySinkMapOutput)
}

// Power query sink.
type PowerQuerySinkOutput struct{ *pulumi.OutputState }

func (PowerQuerySinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PowerQuerySink)(nil)).Elem()
}

func (o PowerQuerySinkOutput) ToPowerQuerySinkOutput() PowerQuerySinkOutput {
	return o
}

func (o PowerQuerySinkOutput) ToPowerQuerySinkOutputWithContext(ctx context.Context) PowerQuerySinkOutput {
	return o
}

// Dataset reference.
func (o PowerQuerySinkOutput) Dataset() DatasetReferencePtrOutput {
	return o.ApplyT(func(v PowerQuerySink) *DatasetReference { return v.Dataset }).(DatasetReferencePtrOutput)
}

// Transformation description.
func (o PowerQuerySinkOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PowerQuerySink) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Flowlet Reference
func (o PowerQuerySinkOutput) Flowlet() DataFlowReferencePtrOutput {
	return o.ApplyT(func(v PowerQuerySink) *DataFlowReference { return v.Flowlet }).(DataFlowReferencePtrOutput)
}

// Linked service reference.
func (o PowerQuerySinkOutput) LinkedService() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v PowerQuerySink) *LinkedServiceReference { return v.LinkedService }).(LinkedServiceReferencePtrOutput)
}

// Transformation name.
func (o PowerQuerySinkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PowerQuerySink) string { return v.Name }).(pulumi.StringOutput)
}

// Rejected data linked service reference.
func (o PowerQuerySinkOutput) RejectedDataLinkedService() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v PowerQuerySink) *LinkedServiceReference { return v.RejectedDataLinkedService }).(LinkedServiceReferencePtrOutput)
}

// Schema linked service reference.
func (o PowerQuerySinkOutput) SchemaLinkedService() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v PowerQuerySink) *LinkedServiceReference { return v.SchemaLinkedService }).(LinkedServiceReferencePtrOutput)
}

// sink script.
func (o PowerQuerySinkOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PowerQuerySink) *string { return v.Script }).(pulumi.StringPtrOutput)
}

type PowerQuerySinkArrayOutput struct{ *pulumi.OutputState }

func (PowerQuerySinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PowerQuerySink)(nil)).Elem()
}

func (o PowerQuerySinkArrayOutput) ToPowerQuerySinkArrayOutput() PowerQuerySinkArrayOutput {
	return o
}

func (o PowerQuerySinkArrayOutput) ToPowerQuerySinkArrayOutputWithContext(ctx context.Context) PowerQuerySinkArrayOutput {
	return o
}

func (o PowerQuerySinkArrayOutput) Index(i pulumi.IntInput) PowerQuerySinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PowerQuerySink {
		return vs[0].([]PowerQuerySink)[vs[1].(int)]
	}).(PowerQuerySinkOutput)
}

type PowerQuerySinkMapOutput struct{ *pulumi.OutputState }

func (PowerQuerySinkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]PowerQuerySink)(nil)).Elem()
}

func (o PowerQuerySinkMapOutput) ToPowerQuerySinkMapOutput() PowerQuerySinkMapOutput {
	return o
}

func (o PowerQuerySinkMapOutput) ToPowerQuerySinkMapOutputWithContext(ctx context.Context) PowerQuerySinkMapOutput {
	return o
}

func (o PowerQuerySinkMapOutput) MapIndex(k pulumi.StringInput) PowerQuerySinkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) PowerQuerySink {
		return vs[0].(map[string]PowerQuerySink)[vs[1].(string)]
	}).(PowerQuerySinkOutput)
}

// Map Power Query mashup query to sink dataset(s).
type PowerQuerySinkMapping struct {
	// List of sinks mapped to Power Query mashup query.
	DataflowSinks []PowerQuerySink `pulumi:"dataflowSinks"`
	// Name of the query in Power Query mashup document.
	QueryName *string `pulumi:"queryName"`
}

// PowerQuerySinkMappingInput is an input type that accepts PowerQuerySinkMappingArgs and PowerQuerySinkMappingOutput values.
// You can construct a concrete instance of `PowerQuerySinkMappingInput` via:
//
//	PowerQuerySinkMappingArgs{...}
type PowerQuerySinkMappingInput interface {
	pulumi.Input

	ToPowerQuerySinkMappingOutput() PowerQuerySinkMappingOutput
	ToPowerQuerySinkMappingOutputWithContext(context.Context) PowerQuerySinkMappingOutput
}

// Map Power Query mashup query to sink dataset(s).
type PowerQuerySinkMappingArgs struct {
	// List of sinks mapped to Power Query mashup query.
	DataflowSinks PowerQuerySinkArrayInput `pulumi:"dataflowSinks"`
	// Name of the query in Power Query mashup document.
	QueryName pulumi.StringPtrInput `pulumi:"queryName"`
}

func (PowerQuerySinkMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PowerQuerySinkMapping)(nil)).Elem()
}

func (i PowerQuerySinkMappingArgs) ToPowerQuerySinkMappingOutput() PowerQuerySinkMappingOutput {
	return i.ToPowerQuerySinkMappingOutputWithContext(context.Background())
}

func (i PowerQuerySinkMappingArgs) ToPowerQuerySinkMappingOutputWithContext(ctx context.Context) PowerQuerySinkMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PowerQuerySinkMappingOutput)
}

// PowerQuerySinkMappingArrayInput is an input type that accepts PowerQuerySinkMappingArray and PowerQuerySinkMappingArrayOutput values.
// You can construct a concrete instance of `PowerQuerySinkMappingArrayInput` via:
//
//	PowerQuerySinkMappingArray{ PowerQuerySinkMappingArgs{...} }
type PowerQuerySinkMappingArrayInput interface {
	pulumi.Input

	ToPowerQuerySinkMappingArrayOutput() PowerQuerySinkMappingArrayOutput
	ToPowerQuerySinkMappingArrayOutputWithContext(context.Context) PowerQuerySinkMappingArrayOutput
}

type PowerQuerySinkMappingArray []PowerQuerySinkMappingInput

func (PowerQuerySinkMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PowerQuerySinkMapping)(nil)).Elem()
}

func (i PowerQuerySinkMappingArray) ToPowerQuerySinkMappingArrayOutput() PowerQuerySinkMappingArrayOutput {
	return i.ToPowerQuerySinkMappingArrayOutputWithContext(context.Background())
}

func (i PowerQuerySinkMappingArray) ToPowerQuerySinkMappingArrayOutputWithContext(ctx context.Context) PowerQuerySinkMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PowerQuerySinkMappingArrayOutput)
}

// Map Power Query mashup query to sink dataset(s).
type PowerQuerySinkMappingOutput struct{ *pulumi.OutputState }

func (PowerQuerySinkMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PowerQuerySinkMapping)(nil)).Elem()
}

func (o PowerQuerySinkMappingOutput) ToPowerQuerySinkMappingOutput() PowerQuerySinkMappingOutput {
	return o
}

func (o PowerQuerySinkMappingOutput) ToPowerQuerySinkMappingOutputWithContext(ctx context.Context) PowerQuerySinkMappingOutput {
	return o
}

// List of sinks mapped to Power Query mashup query.
func (o PowerQuerySinkMappingOutput) DataflowSinks() PowerQuerySinkArrayOutput {
	return o.ApplyT(func(v PowerQuerySinkMapping) []PowerQuerySink { return v.DataflowSinks }).(PowerQuerySinkArrayOutput)
}

// Name of the query in Power Query mashup document.
func (o PowerQuerySinkMappingOutput) QueryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PowerQuerySinkMapping) *string { return v.QueryName }).(pulumi.StringPtrOutput)
}

type PowerQuerySinkMappingArrayOutput struct{ *pulumi.OutputState }

func (PowerQuerySinkMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PowerQuerySinkMapping)(nil)).Elem()
}

func (o PowerQuerySinkMappingArrayOutput) ToPowerQuerySinkMappingArrayOutput() PowerQuerySinkMappingArrayOutput {
	return o
}

func (o PowerQuerySinkMappingArrayOutput) ToPowerQuerySinkMappingArrayOutputWithContext(ctx context.Context) PowerQuerySinkMappingArrayOutput {
	return o
}

func (o PowerQuerySinkMappingArrayOutput) Index(i pulumi.IntInput) PowerQuerySinkMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PowerQuerySinkMapping {
		return vs[0].([]PowerQuerySinkMapping)[vs[1].(int)]
	}).(PowerQuerySinkMappingOutput)
}

// Map Power Query mashup query to sink dataset(s).
type PowerQuerySinkMappingResponse struct {
	// List of sinks mapped to Power Query mashup query.
	DataflowSinks []PowerQuerySinkResponse `pulumi:"dataflowSinks"`
	// Name of the query in Power Query mashup document.
	QueryName *string `pulumi:"queryName"`
}

// Map Power Query mashup query to sink dataset(s).
type PowerQuerySinkMappingResponseOutput struct{ *pulumi.OutputState }

func (PowerQuerySinkMappingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PowerQuerySinkMappingResponse)(nil)).Elem()
}

func (o PowerQuerySinkMappingResponseOutput) ToPowerQuerySinkMappingResponseOutput() PowerQuerySinkMappingResponseOutput {
	return o
}

func (o PowerQuerySinkMappingResponseOutput) ToPowerQuerySinkMappingResponseOutputWithContext(ctx context.Context) PowerQuerySinkMappingResponseOutput {
	return o
}

// List of sinks mapped to Power Query mashup query.
func (o PowerQuerySinkMappingResponseOutput) DataflowSinks() PowerQuerySinkResponseArrayOutput {
	return o.ApplyT(func(v PowerQuerySinkMappingResponse) []PowerQuerySinkResponse { return v.DataflowSinks }).(PowerQuerySinkResponseArrayOutput)
}

// Name of the query in Power Query mashup document.
func (o PowerQuerySinkMappingResponseOutput) QueryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PowerQuerySinkMappingResponse) *string { return v.QueryName }).(pulumi.StringPtrOutput)
}

type PowerQuerySinkMappingResponseArrayOutput struct{ *pulumi.OutputState }

func (PowerQuerySinkMappingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PowerQuerySinkMappingResponse)(nil)).Elem()
}

func (o PowerQuerySinkMappingResponseArrayOutput) ToPowerQuerySinkMappingResponseArrayOutput() PowerQuerySinkMappingResponseArrayOutput {
	return o
}

func (o PowerQuerySinkMappingResponseArrayOutput) ToPowerQuerySinkMappingResponseArrayOutputWithContext(ctx context.Context) PowerQuerySinkMappingResponseArrayOutput {
	return o
}

func (o PowerQuerySinkMappingResponseArrayOutput) Index(i pulumi.IntInput) PowerQuerySinkMappingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PowerQuerySinkMappingResponse {
		return vs[0].([]PowerQuerySinkMappingResponse)[vs[1].(int)]
	}).(PowerQuerySinkMappingResponseOutput)
}

// Power query sink.
type PowerQuerySinkResponse struct {
	// Dataset reference.
	Dataset *DatasetReferenceResponse `pulumi:"dataset"`
	// Transformation description.
	Description *string `pulumi:"description"`
	// Flowlet Reference
	Flowlet *DataFlowReferenceResponse `pulumi:"flowlet"`
	// Linked service reference.
	LinkedService *LinkedServiceReferenceResponse `pulumi:"linkedService"`
	// Transformation name.
	Name string `pulumi:"name"`
	// Rejected data linked service reference.
	RejectedDataLinkedService *LinkedServiceReferenceResponse `pulumi:"rejectedDataLinkedService"`
	// Schema linked service reference.
	SchemaLinkedService *LinkedServiceReferenceResponse `pulumi:"schemaLinkedService"`
	// sink script.
	Script *string `pulumi:"script"`
}

// Power query sink.
type PowerQuerySinkResponseOutput struct{ *pulumi.OutputState }

func (PowerQuerySinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PowerQuerySinkResponse)(nil)).Elem()
}

func (o PowerQuerySinkResponseOutput) ToPowerQuerySinkResponseOutput() PowerQuerySinkResponseOutput {
	return o
}

func (o PowerQuerySinkResponseOutput) ToPowerQuerySinkResponseOutputWithContext(ctx context.Context) PowerQuerySinkResponseOutput {
	return o
}

// Dataset reference.
func (o PowerQuerySinkResponseOutput) Dataset() DatasetReferenceResponsePtrOutput {
	return o.ApplyT(func(v PowerQuerySinkResponse) *DatasetReferenceResponse { return v.Dataset }).(DatasetReferenceResponsePtrOutput)
}

// Transformation description.
func (o PowerQuerySinkResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PowerQuerySinkResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Flowlet Reference
func (o PowerQuerySinkResponseOutput) Flowlet() DataFlowReferenceResponsePtrOutput {
	return o.ApplyT(func(v PowerQuerySinkResponse) *DataFlowReferenceResponse { return v.Flowlet }).(DataFlowReferenceResponsePtrOutput)
}

// Linked service reference.
func (o PowerQuerySinkResponseOutput) LinkedService() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v PowerQuerySinkResponse) *LinkedServiceReferenceResponse { return v.LinkedService }).(LinkedServiceReferenceResponsePtrOutput)
}

// Transformation name.
func (o PowerQuerySinkResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PowerQuerySinkResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Rejected data linked service reference.
func (o PowerQuerySinkResponseOutput) RejectedDataLinkedService() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v PowerQuerySinkResponse) *LinkedServiceReferenceResponse { return v.RejectedDataLinkedService }).(LinkedServiceReferenceResponsePtrOutput)
}

// Schema linked service reference.
func (o PowerQuerySinkResponseOutput) SchemaLinkedService() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v PowerQuerySinkResponse) *LinkedServiceReferenceResponse { return v.SchemaLinkedService }).(LinkedServiceReferenceResponsePtrOutput)
}

// sink script.
func (o PowerQuerySinkResponseOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PowerQuerySinkResponse) *string { return v.Script }).(pulumi.StringPtrOutput)
}

type PowerQuerySinkResponseArrayOutput struct{ *pulumi.OutputState }

func (PowerQuerySinkResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PowerQuerySinkResponse)(nil)).Elem()
}

func (o PowerQuerySinkResponseArrayOutput) ToPowerQuerySinkResponseArrayOutput() PowerQuerySinkResponseArrayOutput {
	return o
}

func (o PowerQuerySinkResponseArrayOutput) ToPowerQuerySinkResponseArrayOutputWithContext(ctx context.Context) PowerQuerySinkResponseArrayOutput {
	return o
}

func (o PowerQuerySinkResponseArrayOutput) Index(i pulumi.IntInput) PowerQuerySinkResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PowerQuerySinkResponse {
		return vs[0].([]PowerQuerySinkResponse)[vs[1].(int)]
	}).(PowerQuerySinkResponseOutput)
}

type PowerQuerySinkResponseMapOutput struct{ *pulumi.OutputState }

func (PowerQuerySinkResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]PowerQuerySinkResponse)(nil)).Elem()
}

func (o PowerQuerySinkResponseMapOutput) ToPowerQuerySinkResponseMapOutput() PowerQuerySinkResponseMapOutput {
	return o
}

func (o PowerQuerySinkResponseMapOutput) ToPowerQuerySinkResponseMapOutputWithContext(ctx context.Context) PowerQuerySinkResponseMapOutput {
	return o
}

func (o PowerQuerySinkResponseMapOutput) MapIndex(k pulumi.StringInput) PowerQuerySinkResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) PowerQuerySinkResponse {
		return vs[0].(map[string]PowerQuerySinkResponse)[vs[1].(string)]
	}).(PowerQuerySinkResponseOutput)
}

// Power query source.
type PowerQuerySource struct {
	// Dataset reference.
	Dataset *DatasetReference `pulumi:"dataset"`
	// Transformation description.
	Description *string `pulumi:"description"`
	// Flowlet Reference
	Flowlet *DataFlowReference `pulumi:"flowlet"`
	// Linked service reference.
	LinkedService *LinkedServiceReference `pulumi:"linkedService"`
	// Transformation name.
	Name string `pulumi:"name"`
	// Schema linked service reference.
	SchemaLinkedService *LinkedServiceReference `pulumi:"schemaLinkedService"`
	// source script.
	Script *string `pulumi:"script"`
}

// PowerQuerySourceInput is an input type that accepts PowerQuerySourceArgs and PowerQuerySourceOutput values.
// You can construct a concrete instance of `PowerQuerySourceInput` via:
//
//	PowerQuerySourceArgs{...}
type PowerQuerySourceInput interface {
	pulumi.Input

	ToPowerQuerySourceOutput() PowerQuerySourceOutput
	ToPowerQuerySourceOutputWithContext(context.Context) PowerQuerySourceOutput
}

// Power query source.
type PowerQuerySourceArgs struct {
	// Dataset reference.
	Dataset DatasetReferencePtrInput `pulumi:"dataset"`
	// Transformation description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Flowlet Reference
	Flowlet DataFlowReferencePtrInput `pulumi:"flowlet"`
	// Linked service reference.
	LinkedService LinkedServiceReferencePtrInput `pulumi:"linkedService"`
	// Transformation name.
	Name pulumi.StringInput `pulumi:"name"`
	// Schema linked service reference.
	SchemaLinkedService LinkedServiceReferencePtrInput `pulumi:"schemaLinkedService"`
	// source script.
	Script pulumi.StringPtrInput `pulumi:"script"`
}

func (PowerQuerySourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PowerQuerySource)(nil)).Elem()
}

func (i PowerQuerySourceArgs) ToPowerQuerySourceOutput() PowerQuerySourceOutput {
	return i.ToPowerQuerySourceOutputWithContext(context.Background())
}

func (i PowerQuerySourceArgs) ToPowerQuerySourceOutputWithContext(ctx context.Context) PowerQuerySourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PowerQuerySourceOutput)
}

// PowerQuerySourceArrayInput is an input type that accepts PowerQuerySourceArray and PowerQuerySourceArrayOutput values.
// You can construct a concrete instance of `PowerQuerySourceArrayInput` via:
//
//	PowerQuerySourceArray{ PowerQuerySourceArgs{...} }
type PowerQuerySourceArrayInput interface {
	pulumi.Input

	ToPowerQuerySourceArrayOutput() PowerQuerySourceArrayOutput
	ToPowerQuerySourceArrayOutputWithContext(context.Context) PowerQuerySourceArrayOutput
}

type PowerQuerySourceArray []PowerQuerySourceInput

func (PowerQuerySourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PowerQuerySource)(nil)).Elem()
}

func (i PowerQuerySourceArray) ToPowerQuerySourceArrayOutput() PowerQuerySourceArrayOutput {
	return i.ToPowerQuerySourceArrayOutputWithContext(context.Background())
}

func (i PowerQuerySourceArray) ToPowerQuerySourceArrayOutputWithContext(ctx context.Context) PowerQuerySourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PowerQuerySourceArrayOutput)
}

// Power query source.
type PowerQuerySourceOutput struct{ *pulumi.OutputState }

func (PowerQuerySourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PowerQuerySource)(nil)).Elem()
}

func (o PowerQuerySourceOutput) ToPowerQuerySourceOutput() PowerQuerySourceOutput {
	return o
}

func (o PowerQuerySourceOutput) ToPowerQuerySourceOutputWithContext(ctx context.Context) PowerQuerySourceOutput {
	return o
}

// Dataset reference.
func (o PowerQuerySourceOutput) Dataset() DatasetReferencePtrOutput {
	return o.ApplyT(func(v PowerQuerySource) *DatasetReference { return v.Dataset }).(DatasetReferencePtrOutput)
}

// Transformation description.
func (o PowerQuerySourceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PowerQuerySource) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Flowlet Reference
func (o PowerQuerySourceOutput) Flowlet() DataFlowReferencePtrOutput {
	return o.ApplyT(func(v PowerQuerySource) *DataFlowReference { return v.Flowlet }).(DataFlowReferencePtrOutput)
}

// Linked service reference.
func (o PowerQuerySourceOutput) LinkedService() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v PowerQuerySource) *LinkedServiceReference { return v.LinkedService }).(LinkedServiceReferencePtrOutput)
}

// Transformation name.
func (o PowerQuerySourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PowerQuerySource) string { return v.Name }).(pulumi.StringOutput)
}

// Schema linked service reference.
func (o PowerQuerySourceOutput) SchemaLinkedService() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v PowerQuerySource) *LinkedServiceReference { return v.SchemaLinkedService }).(LinkedServiceReferencePtrOutput)
}

// source script.
func (o PowerQuerySourceOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PowerQuerySource) *string { return v.Script }).(pulumi.StringPtrOutput)
}

type PowerQuerySourceArrayOutput struct{ *pulumi.OutputState }

func (PowerQuerySourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PowerQuerySource)(nil)).Elem()
}

func (o PowerQuerySourceArrayOutput) ToPowerQuerySourceArrayOutput() PowerQuerySourceArrayOutput {
	return o
}

func (o PowerQuerySourceArrayOutput) ToPowerQuerySourceArrayOutputWithContext(ctx context.Context) PowerQuerySourceArrayOutput {
	return o
}

func (o PowerQuerySourceArrayOutput) Index(i pulumi.IntInput) PowerQuerySourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PowerQuerySource {
		return vs[0].([]PowerQuerySource)[vs[1].(int)]
	}).(PowerQuerySourceOutput)
}

// Power query source.
type PowerQuerySourceResponse struct {
	// Dataset reference.
	Dataset *DatasetReferenceResponse `pulumi:"dataset"`
	// Transformation description.
	Description *string `pulumi:"description"`
	// Flowlet Reference
	Flowlet *DataFlowReferenceResponse `pulumi:"flowlet"`
	// Linked service reference.
	LinkedService *LinkedServiceReferenceResponse `pulumi:"linkedService"`
	// Transformation name.
	Name string `pulumi:"name"`
	// Schema linked service reference.
	SchemaLinkedService *LinkedServiceReferenceResponse `pulumi:"schemaLinkedService"`
	// source script.
	Script *string `pulumi:"script"`
}

// Power query source.
type PowerQuerySourceResponseOutput struct{ *pulumi.OutputState }

func (PowerQuerySourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PowerQuerySourceResponse)(nil)).Elem()
}

func (o PowerQuerySourceResponseOutput) ToPowerQuerySourceResponseOutput() PowerQuerySourceResponseOutput {
	return o
}

func (o PowerQuerySourceResponseOutput) ToPowerQuerySourceResponseOutputWithContext(ctx context.Context) PowerQuerySourceResponseOutput {
	return o
}

// Dataset reference.
func (o PowerQuerySourceResponseOutput) Dataset() DatasetReferenceResponsePtrOutput {
	return o.ApplyT(func(v PowerQuerySourceResponse) *DatasetReferenceResponse { return v.Dataset }).(DatasetReferenceResponsePtrOutput)
}

// Transformation description.
func (o PowerQuerySourceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PowerQuerySourceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Flowlet Reference
func (o PowerQuerySourceResponseOutput) Flowlet() DataFlowReferenceResponsePtrOutput {
	return o.ApplyT(func(v PowerQuerySourceResponse) *DataFlowReferenceResponse { return v.Flowlet }).(DataFlowReferenceResponsePtrOutput)
}

// Linked service reference.
func (o PowerQuerySourceResponseOutput) LinkedService() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v PowerQuerySourceResponse) *LinkedServiceReferenceResponse { return v.LinkedService }).(LinkedServiceReferenceResponsePtrOutput)
}

// Transformation name.
func (o PowerQuerySourceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PowerQuerySourceResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Schema linked service reference.
func (o PowerQuerySourceResponseOutput) SchemaLinkedService() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v PowerQuerySourceResponse) *LinkedServiceReferenceResponse { return v.SchemaLinkedService }).(LinkedServiceReferenceResponsePtrOutput)
}

// source script.
func (o PowerQuerySourceResponseOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PowerQuerySourceResponse) *string { return v.Script }).(pulumi.StringPtrOutput)
}

type PowerQuerySourceResponseArrayOutput struct{ *pulumi.OutputState }

func (PowerQuerySourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PowerQuerySourceResponse)(nil)).Elem()
}

func (o PowerQuerySourceResponseArrayOutput) ToPowerQuerySourceResponseArrayOutput() PowerQuerySourceResponseArrayOutput {
	return o
}

func (o PowerQuerySourceResponseArrayOutput) ToPowerQuerySourceResponseArrayOutputWithContext(ctx context.Context) PowerQuerySourceResponseArrayOutput {
	return o
}

func (o PowerQuerySourceResponseArrayOutput) Index(i pulumi.IntInput) PowerQuerySourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PowerQuerySourceResponse {
		return vs[0].([]PowerQuerySourceResponse)[vs[1].(int)]
	}).(PowerQuerySourceResponseOutput)
}

// Presto server linked service.
type PrestoLinkedService struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication mechanism used to connect to the Presto server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The catalog context for all request against the server.
	Catalog interface{} `pulumi:"catalog"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The IP address or host name of the Presto server. (i.e. 192.168.222.160)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password interface{} `pulumi:"password"`
	// The TCP port that the Presto server uses to listen for client connections. The default value is 8080.
	Port interface{} `pulumi:"port"`
	// The version of the Presto server. (i.e. 0.148-t)
	ServerVersion interface{} `pulumi:"serverVersion"`
	// The local time zone used by the connection. Valid values for this option are specified in the IANA Time Zone Database. The default value is the system time zone.
	TimeZoneID interface{} `pulumi:"timeZoneID"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'Presto'.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
	// The user name used to connect to the Presto server.
	Username interface{} `pulumi:"username"`
}

// PrestoLinkedServiceInput is an input type that accepts PrestoLinkedServiceArgs and PrestoLinkedServiceOutput values.
// You can construct a concrete instance of `PrestoLinkedServiceInput` via:
//
//	PrestoLinkedServiceArgs{...}
type PrestoLinkedServiceInput interface {
	pulumi.Input

	ToPrestoLinkedServiceOutput() PrestoLinkedServiceOutput
	ToPrestoLinkedServiceOutputWithContext(context.Context) PrestoLinkedServiceOutput
}

// Presto server linked service.
type PrestoLinkedServiceArgs struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch pulumi.Input `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert pulumi.Input `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication mechanism used to connect to the Presto server.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The catalog context for all request against the server.
	Catalog pulumi.Input `pulumi:"catalog"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl pulumi.Input `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// The IP address or host name of the Presto server. (i.e. 192.168.222.160)
	Host pulumi.Input `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password pulumi.Input `pulumi:"password"`
	// The TCP port that the Presto server uses to listen for client connections. The default value is 8080.
	Port pulumi.Input `pulumi:"port"`
	// The version of the Presto server. (i.e. 0.148-t)
	ServerVersion pulumi.Input `pulumi:"serverVersion"`
	// The local time zone used by the connection. Valid values for this option are specified in the IANA Time Zone Database. The default value is the system time zone.
	TimeZoneID pulumi.Input `pulumi:"timeZoneID"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath pulumi.Input `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'Presto'.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore pulumi.Input `pulumi:"useSystemTrustStore"`
	// The user name used to connect to the Presto server.
	Username pulumi.Input `pulumi:"username"`
}

func (PrestoLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrestoLinkedService)(nil)).Elem()
}

func (i PrestoLinkedServiceArgs) ToPrestoLinkedServiceOutput() PrestoLinkedServiceOutput {
	return i.ToPrestoLinkedServiceOutputWithContext(context.Background())
}

func (i PrestoLinkedServiceArgs) ToPrestoLinkedServiceOutputWithContext(ctx context.Context) PrestoLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrestoLinkedServiceOutput)
}

// Presto server linked service.
type PrestoLinkedServiceOutput struct{ *pulumi.OutputState }

func (PrestoLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrestoLinkedService)(nil)).Elem()
}

func (o PrestoLinkedServiceOutput) ToPrestoLinkedServiceOutput() PrestoLinkedServiceOutput {
	return o
}

func (o PrestoLinkedServiceOutput) ToPrestoLinkedServiceOutputWithContext(ctx context.Context) PrestoLinkedServiceOutput {
	return o
}

// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
func (o PrestoLinkedServiceOutput) AllowHostNameCNMismatch() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedService) interface{} { return v.AllowHostNameCNMismatch }).(pulumi.AnyOutput)
}

// Specifies whether to allow self-signed certificates from the server. The default value is false.
func (o PrestoLinkedServiceOutput) AllowSelfSignedServerCert() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedService) interface{} { return v.AllowSelfSignedServerCert }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o PrestoLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v PrestoLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication mechanism used to connect to the Presto server.
func (o PrestoLinkedServiceOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v PrestoLinkedService) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The catalog context for all request against the server.
func (o PrestoLinkedServiceOutput) Catalog() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedService) interface{} { return v.Catalog }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o PrestoLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v PrestoLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o PrestoLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrestoLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
func (o PrestoLinkedServiceOutput) EnableSsl() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedService) interface{} { return v.EnableSsl }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o PrestoLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrestoLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The IP address or host name of the Presto server. (i.e. 192.168.222.160)
func (o PrestoLinkedServiceOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedService) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o PrestoLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v PrestoLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The password corresponding to the user name.
func (o PrestoLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port that the Presto server uses to listen for client connections. The default value is 8080.
func (o PrestoLinkedServiceOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedService) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The version of the Presto server. (i.e. 0.148-t)
func (o PrestoLinkedServiceOutput) ServerVersion() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedService) interface{} { return v.ServerVersion }).(pulumi.AnyOutput)
}

// The local time zone used by the connection. Valid values for this option are specified in the IANA Time Zone Database. The default value is the system time zone.
func (o PrestoLinkedServiceOutput) TimeZoneID() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedService) interface{} { return v.TimeZoneID }).(pulumi.AnyOutput)
}

// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
func (o PrestoLinkedServiceOutput) TrustedCertPath() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedService) interface{} { return v.TrustedCertPath }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Presto'.
func (o PrestoLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PrestoLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
func (o PrestoLinkedServiceOutput) UseSystemTrustStore() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedService) interface{} { return v.UseSystemTrustStore }).(pulumi.AnyOutput)
}

// The user name used to connect to the Presto server.
func (o PrestoLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Presto server linked service.
type PrestoLinkedServiceResponse struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication mechanism used to connect to the Presto server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The catalog context for all request against the server.
	Catalog interface{} `pulumi:"catalog"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The IP address or host name of the Presto server. (i.e. 192.168.222.160)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password interface{} `pulumi:"password"`
	// The TCP port that the Presto server uses to listen for client connections. The default value is 8080.
	Port interface{} `pulumi:"port"`
	// The version of the Presto server. (i.e. 0.148-t)
	ServerVersion interface{} `pulumi:"serverVersion"`
	// The local time zone used by the connection. Valid values for this option are specified in the IANA Time Zone Database. The default value is the system time zone.
	TimeZoneID interface{} `pulumi:"timeZoneID"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'Presto'.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
	// The user name used to connect to the Presto server.
	Username interface{} `pulumi:"username"`
}

// Presto server linked service.
type PrestoLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (PrestoLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrestoLinkedServiceResponse)(nil)).Elem()
}

func (o PrestoLinkedServiceResponseOutput) ToPrestoLinkedServiceResponseOutput() PrestoLinkedServiceResponseOutput {
	return o
}

func (o PrestoLinkedServiceResponseOutput) ToPrestoLinkedServiceResponseOutputWithContext(ctx context.Context) PrestoLinkedServiceResponseOutput {
	return o
}

// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
func (o PrestoLinkedServiceResponseOutput) AllowHostNameCNMismatch() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) interface{} { return v.AllowHostNameCNMismatch }).(pulumi.AnyOutput)
}

// Specifies whether to allow self-signed certificates from the server. The default value is false.
func (o PrestoLinkedServiceResponseOutput) AllowSelfSignedServerCert() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) interface{} { return v.AllowSelfSignedServerCert }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o PrestoLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication mechanism used to connect to the Presto server.
func (o PrestoLinkedServiceResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The catalog context for all request against the server.
func (o PrestoLinkedServiceResponseOutput) Catalog() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) interface{} { return v.Catalog }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o PrestoLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o PrestoLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
func (o PrestoLinkedServiceResponseOutput) EnableSsl() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) interface{} { return v.EnableSsl }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o PrestoLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The IP address or host name of the Presto server. (i.e. 192.168.222.160)
func (o PrestoLinkedServiceResponseOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o PrestoLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The password corresponding to the user name.
func (o PrestoLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port that the Presto server uses to listen for client connections. The default value is 8080.
func (o PrestoLinkedServiceResponseOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The version of the Presto server. (i.e. 0.148-t)
func (o PrestoLinkedServiceResponseOutput) ServerVersion() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) interface{} { return v.ServerVersion }).(pulumi.AnyOutput)
}

// The local time zone used by the connection. Valid values for this option are specified in the IANA Time Zone Database. The default value is the system time zone.
func (o PrestoLinkedServiceResponseOutput) TimeZoneID() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) interface{} { return v.TimeZoneID }).(pulumi.AnyOutput)
}

// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
func (o PrestoLinkedServiceResponseOutput) TrustedCertPath() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) interface{} { return v.TrustedCertPath }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Presto'.
func (o PrestoLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
func (o PrestoLinkedServiceResponseOutput) UseSystemTrustStore() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) interface{} { return v.UseSystemTrustStore }).(pulumi.AnyOutput)
}

// The user name used to connect to the Presto server.
func (o PrestoLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Presto server dataset.
type PrestoObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Presto. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'PrestoObject'.
	Type string `pulumi:"type"`
}

// PrestoObjectDatasetInput is an input type that accepts PrestoObjectDatasetArgs and PrestoObjectDatasetOutput values.
// You can construct a concrete instance of `PrestoObjectDatasetInput` via:
//
//	PrestoObjectDatasetArgs{...}
type PrestoObjectDatasetInput interface {
	pulumi.Input

	ToPrestoObjectDatasetOutput() PrestoObjectDatasetOutput
	ToPrestoObjectDatasetOutputWithContext(context.Context) PrestoObjectDatasetOutput
}

// Presto server dataset.
type PrestoObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Presto. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'PrestoObject'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PrestoObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrestoObjectDataset)(nil)).Elem()
}

func (i PrestoObjectDatasetArgs) ToPrestoObjectDatasetOutput() PrestoObjectDatasetOutput {
	return i.ToPrestoObjectDatasetOutputWithContext(context.Background())
}

func (i PrestoObjectDatasetArgs) ToPrestoObjectDatasetOutputWithContext(ctx context.Context) PrestoObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrestoObjectDatasetOutput)
}

// Presto server dataset.
type PrestoObjectDatasetOutput struct{ *pulumi.OutputState }

func (PrestoObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrestoObjectDataset)(nil)).Elem()
}

func (o PrestoObjectDatasetOutput) ToPrestoObjectDatasetOutput() PrestoObjectDatasetOutput {
	return o
}

func (o PrestoObjectDatasetOutput) ToPrestoObjectDatasetOutputWithContext(ctx context.Context) PrestoObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o PrestoObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v PrestoObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o PrestoObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrestoObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o PrestoObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v PrestoObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o PrestoObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v PrestoObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o PrestoObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v PrestoObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o PrestoObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o PrestoObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Presto. Type: string (or Expression with resultType string).
func (o PrestoObjectDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoObjectDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o PrestoObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'PrestoObject'.
func (o PrestoObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PrestoObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Presto server dataset.
type PrestoObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Presto. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'PrestoObject'.
	Type string `pulumi:"type"`
}

// Presto server dataset.
type PrestoObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (PrestoObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrestoObjectDatasetResponse)(nil)).Elem()
}

func (o PrestoObjectDatasetResponseOutput) ToPrestoObjectDatasetResponseOutput() PrestoObjectDatasetResponseOutput {
	return o
}

func (o PrestoObjectDatasetResponseOutput) ToPrestoObjectDatasetResponseOutputWithContext(ctx context.Context) PrestoObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o PrestoObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v PrestoObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o PrestoObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrestoObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o PrestoObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v PrestoObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o PrestoObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v PrestoObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o PrestoObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v PrestoObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o PrestoObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o PrestoObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Presto. Type: string (or Expression with resultType string).
func (o PrestoObjectDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoObjectDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o PrestoObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'PrestoObject'.
func (o PrestoObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PrestoObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Presto server source.
type PrestoSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'PrestoSource'.
	Type string `pulumi:"type"`
}

// PrestoSourceInput is an input type that accepts PrestoSourceArgs and PrestoSourceOutput values.
// You can construct a concrete instance of `PrestoSourceInput` via:
//
//	PrestoSourceArgs{...}
type PrestoSourceInput interface {
	pulumi.Input

	ToPrestoSourceOutput() PrestoSourceOutput
	ToPrestoSourceOutputWithContext(context.Context) PrestoSourceOutput
}

// A copy activity Presto server source.
type PrestoSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'PrestoSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PrestoSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrestoSource)(nil)).Elem()
}

func (i PrestoSourceArgs) ToPrestoSourceOutput() PrestoSourceOutput {
	return i.ToPrestoSourceOutputWithContext(context.Background())
}

func (i PrestoSourceArgs) ToPrestoSourceOutputWithContext(ctx context.Context) PrestoSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrestoSourceOutput)
}

// A copy activity Presto server source.
type PrestoSourceOutput struct{ *pulumi.OutputState }

func (PrestoSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrestoSource)(nil)).Elem()
}

func (o PrestoSourceOutput) ToPrestoSourceOutput() PrestoSourceOutput {
	return o
}

func (o PrestoSourceOutput) ToPrestoSourceOutputWithContext(ctx context.Context) PrestoSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o PrestoSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o PrestoSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o PrestoSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o PrestoSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o PrestoSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o PrestoSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o PrestoSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'PrestoSource'.
func (o PrestoSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PrestoSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Presto server source.
type PrestoSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'PrestoSource'.
	Type string `pulumi:"type"`
}

// A copy activity Presto server source.
type PrestoSourceResponseOutput struct{ *pulumi.OutputState }

func (PrestoSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrestoSourceResponse)(nil)).Elem()
}

func (o PrestoSourceResponseOutput) ToPrestoSourceResponseOutput() PrestoSourceResponseOutput {
	return o
}

func (o PrestoSourceResponseOutput) ToPrestoSourceResponseOutputWithContext(ctx context.Context) PrestoSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o PrestoSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o PrestoSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o PrestoSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o PrestoSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o PrestoSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o PrestoSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o PrestoSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v PrestoSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'PrestoSource'.
func (o PrestoSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PrestoSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Private endpoint which a connection belongs to.
type PrivateEndpoint struct {
	// The resource Id for private endpoint
	Id *string `pulumi:"id"`
}

// PrivateEndpointInput is an input type that accepts PrivateEndpointArgs and PrivateEndpointOutput values.
// You can construct a concrete instance of `PrivateEndpointInput` via:
//
//	PrivateEndpointArgs{...}
type PrivateEndpointInput interface {
	pulumi.Input

	ToPrivateEndpointOutput() PrivateEndpointOutput
	ToPrivateEndpointOutputWithContext(context.Context) PrivateEndpointOutput
}

// Private endpoint which a connection belongs to.
type PrivateEndpointArgs struct {
	// The resource Id for private endpoint
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (PrivateEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpoint)(nil)).Elem()
}

func (i PrivateEndpointArgs) ToPrivateEndpointOutput() PrivateEndpointOutput {
	return i.ToPrivateEndpointOutputWithContext(context.Background())
}

func (i PrivateEndpointArgs) ToPrivateEndpointOutputWithContext(ctx context.Context) PrivateEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointOutput)
}

func (i PrivateEndpointArgs) ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput {
	return i.ToPrivateEndpointPtrOutputWithContext(context.Background())
}

func (i PrivateEndpointArgs) ToPrivateEndpointPtrOutputWithContext(ctx context.Context) PrivateEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointOutput).ToPrivateEndpointPtrOutputWithContext(ctx)
}

// PrivateEndpointPtrInput is an input type that accepts PrivateEndpointArgs, PrivateEndpointPtr and PrivateEndpointPtrOutput values.
// You can construct a concrete instance of `PrivateEndpointPtrInput` via:
//
//	        PrivateEndpointArgs{...}
//
//	or:
//
//	        nil
type PrivateEndpointPtrInput interface {
	pulumi.Input

	ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput
	ToPrivateEndpointPtrOutputWithContext(context.Context) PrivateEndpointPtrOutput
}

type privateEndpointPtrType PrivateEndpointArgs

func PrivateEndpointPtr(v *PrivateEndpointArgs) PrivateEndpointPtrInput {
	return (*privateEndpointPtrType)(v)
}

func (*privateEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpoint)(nil)).Elem()
}

func (i *privateEndpointPtrType) ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput {
	return i.ToPrivateEndpointPtrOutputWithContext(context.Background())
}

func (i *privateEndpointPtrType) ToPrivateEndpointPtrOutputWithContext(ctx context.Context) PrivateEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointPtrOutput)
}

// Private endpoint which a connection belongs to.
type PrivateEndpointOutput struct{ *pulumi.OutputState }

func (PrivateEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpoint)(nil)).Elem()
}

func (o PrivateEndpointOutput) ToPrivateEndpointOutput() PrivateEndpointOutput {
	return o
}

func (o PrivateEndpointOutput) ToPrivateEndpointOutputWithContext(ctx context.Context) PrivateEndpointOutput {
	return o
}

func (o PrivateEndpointOutput) ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput {
	return o.ToPrivateEndpointPtrOutputWithContext(context.Background())
}

func (o PrivateEndpointOutput) ToPrivateEndpointPtrOutputWithContext(ctx context.Context) PrivateEndpointPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateEndpoint) *PrivateEndpoint {
		return &v
	}).(PrivateEndpointPtrOutput)
}

// The resource Id for private endpoint
func (o PrivateEndpointOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpoint) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type PrivateEndpointPtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpoint)(nil)).Elem()
}

func (o PrivateEndpointPtrOutput) ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput {
	return o
}

func (o PrivateEndpointPtrOutput) ToPrivateEndpointPtrOutputWithContext(ctx context.Context) PrivateEndpointPtrOutput {
	return o
}

func (o PrivateEndpointPtrOutput) Elem() PrivateEndpointOutput {
	return o.ApplyT(func(v *PrivateEndpoint) PrivateEndpoint {
		if v != nil {
			return *v
		}
		var ret PrivateEndpoint
		return ret
	}).(PrivateEndpointOutput)
}

// The resource Id for private endpoint
func (o PrivateEndpointPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// A request to approve or reject a private endpoint connection
type PrivateLinkConnectionApprovalRequest struct {
	// The resource of private endpoint.
	PrivateEndpoint *PrivateEndpoint `pulumi:"privateEndpoint"`
	// The state of a private link connection
	PrivateLinkServiceConnectionState *PrivateLinkConnectionState `pulumi:"privateLinkServiceConnectionState"`
}

// PrivateLinkConnectionApprovalRequestInput is an input type that accepts PrivateLinkConnectionApprovalRequestArgs and PrivateLinkConnectionApprovalRequestOutput values.
// You can construct a concrete instance of `PrivateLinkConnectionApprovalRequestInput` via:
//
//	PrivateLinkConnectionApprovalRequestArgs{...}
type PrivateLinkConnectionApprovalRequestInput interface {
	pulumi.Input

	ToPrivateLinkConnectionApprovalRequestOutput() PrivateLinkConnectionApprovalRequestOutput
	ToPrivateLinkConnectionApprovalRequestOutputWithContext(context.Context) PrivateLinkConnectionApprovalRequestOutput
}

// A request to approve or reject a private endpoint connection
type PrivateLinkConnectionApprovalRequestArgs struct {
	// The resource of private endpoint.
	PrivateEndpoint PrivateEndpointPtrInput `pulumi:"privateEndpoint"`
	// The state of a private link connection
	PrivateLinkServiceConnectionState PrivateLinkConnectionStatePtrInput `pulumi:"privateLinkServiceConnectionState"`
}

func (PrivateLinkConnectionApprovalRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkConnectionApprovalRequest)(nil)).Elem()
}

func (i PrivateLinkConnectionApprovalRequestArgs) ToPrivateLinkConnectionApprovalRequestOutput() PrivateLinkConnectionApprovalRequestOutput {
	return i.ToPrivateLinkConnectionApprovalRequestOutputWithContext(context.Background())
}

func (i PrivateLinkConnectionApprovalRequestArgs) ToPrivateLinkConnectionApprovalRequestOutputWithContext(ctx context.Context) PrivateLinkConnectionApprovalRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkConnectionApprovalRequestOutput)
}

func (i PrivateLinkConnectionApprovalRequestArgs) ToPrivateLinkConnectionApprovalRequestPtrOutput() PrivateLinkConnectionApprovalRequestPtrOutput {
	return i.ToPrivateLinkConnectionApprovalRequestPtrOutputWithContext(context.Background())
}

func (i PrivateLinkConnectionApprovalRequestArgs) ToPrivateLinkConnectionApprovalRequestPtrOutputWithContext(ctx context.Context) PrivateLinkConnectionApprovalRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkConnectionApprovalRequestOutput).ToPrivateLinkConnectionApprovalRequestPtrOutputWithContext(ctx)
}

// PrivateLinkConnectionApprovalRequestPtrInput is an input type that accepts PrivateLinkConnectionApprovalRequestArgs, PrivateLinkConnectionApprovalRequestPtr and PrivateLinkConnectionApprovalRequestPtrOutput values.
// You can construct a concrete instance of `PrivateLinkConnectionApprovalRequestPtrInput` via:
//
//	        PrivateLinkConnectionApprovalRequestArgs{...}
//
//	or:
//
//	        nil
type PrivateLinkConnectionApprovalRequestPtrInput interface {
	pulumi.Input

	ToPrivateLinkConnectionApprovalRequestPtrOutput() PrivateLinkConnectionApprovalRequestPtrOutput
	ToPrivateLinkConnectionApprovalRequestPtrOutputWithContext(context.Context) PrivateLinkConnectionApprovalRequestPtrOutput
}

type privateLinkConnectionApprovalRequestPtrType PrivateLinkConnectionApprovalRequestArgs

func PrivateLinkConnectionApprovalRequestPtr(v *PrivateLinkConnectionApprovalRequestArgs) PrivateLinkConnectionApprovalRequestPtrInput {
	return (*privateLinkConnectionApprovalRequestPtrType)(v)
}

func (*privateLinkConnectionApprovalRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkConnectionApprovalRequest)(nil)).Elem()
}

func (i *privateLinkConnectionApprovalRequestPtrType) ToPrivateLinkConnectionApprovalRequestPtrOutput() PrivateLinkConnectionApprovalRequestPtrOutput {
	return i.ToPrivateLinkConnectionApprovalRequestPtrOutputWithContext(context.Background())
}

func (i *privateLinkConnectionApprovalRequestPtrType) ToPrivateLinkConnectionApprovalRequestPtrOutputWithContext(ctx context.Context) PrivateLinkConnectionApprovalRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkConnectionApprovalRequestPtrOutput)
}

// A request to approve or reject a private endpoint connection
type PrivateLinkConnectionApprovalRequestOutput struct{ *pulumi.OutputState }

func (PrivateLinkConnectionApprovalRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkConnectionApprovalRequest)(nil)).Elem()
}

func (o PrivateLinkConnectionApprovalRequestOutput) ToPrivateLinkConnectionApprovalRequestOutput() PrivateLinkConnectionApprovalRequestOutput {
	return o
}

func (o PrivateLinkConnectionApprovalRequestOutput) ToPrivateLinkConnectionApprovalRequestOutputWithContext(ctx context.Context) PrivateLinkConnectionApprovalRequestOutput {
	return o
}

func (o PrivateLinkConnectionApprovalRequestOutput) ToPrivateLinkConnectionApprovalRequestPtrOutput() PrivateLinkConnectionApprovalRequestPtrOutput {
	return o.ToPrivateLinkConnectionApprovalRequestPtrOutputWithContext(context.Background())
}

func (o PrivateLinkConnectionApprovalRequestOutput) ToPrivateLinkConnectionApprovalRequestPtrOutputWithContext(ctx context.Context) PrivateLinkConnectionApprovalRequestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateLinkConnectionApprovalRequest) *PrivateLinkConnectionApprovalRequest {
		return &v
	}).(PrivateLinkConnectionApprovalRequestPtrOutput)
}

// The resource of private endpoint.
func (o PrivateLinkConnectionApprovalRequestOutput) PrivateEndpoint() PrivateEndpointPtrOutput {
	return o.ApplyT(func(v PrivateLinkConnectionApprovalRequest) *PrivateEndpoint { return v.PrivateEndpoint }).(PrivateEndpointPtrOutput)
}

// The state of a private link connection
func (o PrivateLinkConnectionApprovalRequestOutput) PrivateLinkServiceConnectionState() PrivateLinkConnectionStatePtrOutput {
	return o.ApplyT(func(v PrivateLinkConnectionApprovalRequest) *PrivateLinkConnectionState {
		return v.PrivateLinkServiceConnectionState
	}).(PrivateLinkConnectionStatePtrOutput)
}

type PrivateLinkConnectionApprovalRequestPtrOutput struct{ *pulumi.OutputState }

func (PrivateLinkConnectionApprovalRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkConnectionApprovalRequest)(nil)).Elem()
}

func (o PrivateLinkConnectionApprovalRequestPtrOutput) ToPrivateLinkConnectionApprovalRequestPtrOutput() PrivateLinkConnectionApprovalRequestPtrOutput {
	return o
}

func (o PrivateLinkConnectionApprovalRequestPtrOutput) ToPrivateLinkConnectionApprovalRequestPtrOutputWithContext(ctx context.Context) PrivateLinkConnectionApprovalRequestPtrOutput {
	return o
}

func (o PrivateLinkConnectionApprovalRequestPtrOutput) Elem() PrivateLinkConnectionApprovalRequestOutput {
	return o.ApplyT(func(v *PrivateLinkConnectionApprovalRequest) PrivateLinkConnectionApprovalRequest {
		if v != nil {
			return *v
		}
		var ret PrivateLinkConnectionApprovalRequest
		return ret
	}).(PrivateLinkConnectionApprovalRequestOutput)
}

// The resource of private endpoint.
func (o PrivateLinkConnectionApprovalRequestPtrOutput) PrivateEndpoint() PrivateEndpointPtrOutput {
	return o.ApplyT(func(v *PrivateLinkConnectionApprovalRequest) *PrivateEndpoint {
		if v == nil {
			return nil
		}
		return v.PrivateEndpoint
	}).(PrivateEndpointPtrOutput)
}

// The state of a private link connection
func (o PrivateLinkConnectionApprovalRequestPtrOutput) PrivateLinkServiceConnectionState() PrivateLinkConnectionStatePtrOutput {
	return o.ApplyT(func(v *PrivateLinkConnectionApprovalRequest) *PrivateLinkConnectionState {
		if v == nil {
			return nil
		}
		return v.PrivateLinkServiceConnectionState
	}).(PrivateLinkConnectionStatePtrOutput)
}

// The state of a private link connection
type PrivateLinkConnectionState struct {
	// ActionsRequired for a private link connection
	ActionsRequired *string `pulumi:"actionsRequired"`
	// Description of a private link connection
	Description *string `pulumi:"description"`
	// Status of a private link connection
	Status *string `pulumi:"status"`
}

// PrivateLinkConnectionStateInput is an input type that accepts PrivateLinkConnectionStateArgs and PrivateLinkConnectionStateOutput values.
// You can construct a concrete instance of `PrivateLinkConnectionStateInput` via:
//
//	PrivateLinkConnectionStateArgs{...}
type PrivateLinkConnectionStateInput interface {
	pulumi.Input

	ToPrivateLinkConnectionStateOutput() PrivateLinkConnectionStateOutput
	ToPrivateLinkConnectionStateOutputWithContext(context.Context) PrivateLinkConnectionStateOutput
}

// The state of a private link connection
type PrivateLinkConnectionStateArgs struct {
	// ActionsRequired for a private link connection
	ActionsRequired pulumi.StringPtrInput `pulumi:"actionsRequired"`
	// Description of a private link connection
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Status of a private link connection
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (PrivateLinkConnectionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkConnectionState)(nil)).Elem()
}

func (i PrivateLinkConnectionStateArgs) ToPrivateLinkConnectionStateOutput() PrivateLinkConnectionStateOutput {
	return i.ToPrivateLinkConnectionStateOutputWithContext(context.Background())
}

func (i PrivateLinkConnectionStateArgs) ToPrivateLinkConnectionStateOutputWithContext(ctx context.Context) PrivateLinkConnectionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkConnectionStateOutput)
}

func (i PrivateLinkConnectionStateArgs) ToPrivateLinkConnectionStatePtrOutput() PrivateLinkConnectionStatePtrOutput {
	return i.ToPrivateLinkConnectionStatePtrOutputWithContext(context.Background())
}

func (i PrivateLinkConnectionStateArgs) ToPrivateLinkConnectionStatePtrOutputWithContext(ctx context.Context) PrivateLinkConnectionStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkConnectionStateOutput).ToPrivateLinkConnectionStatePtrOutputWithContext(ctx)
}

// PrivateLinkConnectionStatePtrInput is an input type that accepts PrivateLinkConnectionStateArgs, PrivateLinkConnectionStatePtr and PrivateLinkConnectionStatePtrOutput values.
// You can construct a concrete instance of `PrivateLinkConnectionStatePtrInput` via:
//
//	        PrivateLinkConnectionStateArgs{...}
//
//	or:
//
//	        nil
type PrivateLinkConnectionStatePtrInput interface {
	pulumi.Input

	ToPrivateLinkConnectionStatePtrOutput() PrivateLinkConnectionStatePtrOutput
	ToPrivateLinkConnectionStatePtrOutputWithContext(context.Context) PrivateLinkConnectionStatePtrOutput
}

type privateLinkConnectionStatePtrType PrivateLinkConnectionStateArgs

func PrivateLinkConnectionStatePtr(v *PrivateLinkConnectionStateArgs) PrivateLinkConnectionStatePtrInput {
	return (*privateLinkConnectionStatePtrType)(v)
}

func (*privateLinkConnectionStatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkConnectionState)(nil)).Elem()
}

func (i *privateLinkConnectionStatePtrType) ToPrivateLinkConnectionStatePtrOutput() PrivateLinkConnectionStatePtrOutput {
	return i.ToPrivateLinkConnectionStatePtrOutputWithContext(context.Background())
}

func (i *privateLinkConnectionStatePtrType) ToPrivateLinkConnectionStatePtrOutputWithContext(ctx context.Context) PrivateLinkConnectionStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkConnectionStatePtrOutput)
}

// The state of a private link connection
type PrivateLinkConnectionStateOutput struct{ *pulumi.OutputState }

func (PrivateLinkConnectionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkConnectionState)(nil)).Elem()
}

func (o PrivateLinkConnectionStateOutput) ToPrivateLinkConnectionStateOutput() PrivateLinkConnectionStateOutput {
	return o
}

func (o PrivateLinkConnectionStateOutput) ToPrivateLinkConnectionStateOutputWithContext(ctx context.Context) PrivateLinkConnectionStateOutput {
	return o
}

func (o PrivateLinkConnectionStateOutput) ToPrivateLinkConnectionStatePtrOutput() PrivateLinkConnectionStatePtrOutput {
	return o.ToPrivateLinkConnectionStatePtrOutputWithContext(context.Background())
}

func (o PrivateLinkConnectionStateOutput) ToPrivateLinkConnectionStatePtrOutputWithContext(ctx context.Context) PrivateLinkConnectionStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateLinkConnectionState) *PrivateLinkConnectionState {
		return &v
	}).(PrivateLinkConnectionStatePtrOutput)
}

// ActionsRequired for a private link connection
func (o PrivateLinkConnectionStateOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkConnectionState) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// Description of a private link connection
func (o PrivateLinkConnectionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkConnectionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Status of a private link connection
func (o PrivateLinkConnectionStateOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkConnectionState) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type PrivateLinkConnectionStatePtrOutput struct{ *pulumi.OutputState }

func (PrivateLinkConnectionStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkConnectionState)(nil)).Elem()
}

func (o PrivateLinkConnectionStatePtrOutput) ToPrivateLinkConnectionStatePtrOutput() PrivateLinkConnectionStatePtrOutput {
	return o
}

func (o PrivateLinkConnectionStatePtrOutput) ToPrivateLinkConnectionStatePtrOutputWithContext(ctx context.Context) PrivateLinkConnectionStatePtrOutput {
	return o
}

func (o PrivateLinkConnectionStatePtrOutput) Elem() PrivateLinkConnectionStateOutput {
	return o.ApplyT(func(v *PrivateLinkConnectionState) PrivateLinkConnectionState {
		if v != nil {
			return *v
		}
		var ret PrivateLinkConnectionState
		return ret
	}).(PrivateLinkConnectionStateOutput)
}

// ActionsRequired for a private link connection
func (o PrivateLinkConnectionStatePtrOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkConnectionState) *string {
		if v == nil {
			return nil
		}
		return v.ActionsRequired
	}).(pulumi.StringPtrOutput)
}

// Description of a private link connection
func (o PrivateLinkConnectionStatePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkConnectionState) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Status of a private link connection
func (o PrivateLinkConnectionStatePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkConnectionState) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// The state of a private link connection
type PrivateLinkConnectionStateResponse struct {
	// ActionsRequired for a private link connection
	ActionsRequired *string `pulumi:"actionsRequired"`
	// Description of a private link connection
	Description *string `pulumi:"description"`
	// Status of a private link connection
	Status *string `pulumi:"status"`
}

// The state of a private link connection
type PrivateLinkConnectionStateResponseOutput struct{ *pulumi.OutputState }

func (PrivateLinkConnectionStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkConnectionStateResponse)(nil)).Elem()
}

func (o PrivateLinkConnectionStateResponseOutput) ToPrivateLinkConnectionStateResponseOutput() PrivateLinkConnectionStateResponseOutput {
	return o
}

func (o PrivateLinkConnectionStateResponseOutput) ToPrivateLinkConnectionStateResponseOutputWithContext(ctx context.Context) PrivateLinkConnectionStateResponseOutput {
	return o
}

// ActionsRequired for a private link connection
func (o PrivateLinkConnectionStateResponseOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkConnectionStateResponse) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// Description of a private link connection
func (o PrivateLinkConnectionStateResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkConnectionStateResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Status of a private link connection
func (o PrivateLinkConnectionStateResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkConnectionStateResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type PrivateLinkConnectionStateResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateLinkConnectionStateResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkConnectionStateResponse)(nil)).Elem()
}

func (o PrivateLinkConnectionStateResponsePtrOutput) ToPrivateLinkConnectionStateResponsePtrOutput() PrivateLinkConnectionStateResponsePtrOutput {
	return o
}

func (o PrivateLinkConnectionStateResponsePtrOutput) ToPrivateLinkConnectionStateResponsePtrOutputWithContext(ctx context.Context) PrivateLinkConnectionStateResponsePtrOutput {
	return o
}

func (o PrivateLinkConnectionStateResponsePtrOutput) Elem() PrivateLinkConnectionStateResponseOutput {
	return o.ApplyT(func(v *PrivateLinkConnectionStateResponse) PrivateLinkConnectionStateResponse {
		if v != nil {
			return *v
		}
		var ret PrivateLinkConnectionStateResponse
		return ret
	}).(PrivateLinkConnectionStateResponseOutput)
}

// ActionsRequired for a private link connection
func (o PrivateLinkConnectionStateResponsePtrOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.ActionsRequired
	}).(pulumi.StringPtrOutput)
}

// Description of a private link connection
func (o PrivateLinkConnectionStateResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Status of a private link connection
func (o PrivateLinkConnectionStateResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Purview configuration.
type PurviewConfiguration struct {
	// Purview resource id.
	PurviewResourceId *string `pulumi:"purviewResourceId"`
}

// PurviewConfigurationInput is an input type that accepts PurviewConfigurationArgs and PurviewConfigurationOutput values.
// You can construct a concrete instance of `PurviewConfigurationInput` via:
//
//	PurviewConfigurationArgs{...}
type PurviewConfigurationInput interface {
	pulumi.Input

	ToPurviewConfigurationOutput() PurviewConfigurationOutput
	ToPurviewConfigurationOutputWithContext(context.Context) PurviewConfigurationOutput
}

// Purview configuration.
type PurviewConfigurationArgs struct {
	// Purview resource id.
	PurviewResourceId pulumi.StringPtrInput `pulumi:"purviewResourceId"`
}

func (PurviewConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PurviewConfiguration)(nil)).Elem()
}

func (i PurviewConfigurationArgs) ToPurviewConfigurationOutput() PurviewConfigurationOutput {
	return i.ToPurviewConfigurationOutputWithContext(context.Background())
}

func (i PurviewConfigurationArgs) ToPurviewConfigurationOutputWithContext(ctx context.Context) PurviewConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PurviewConfigurationOutput)
}

func (i PurviewConfigurationArgs) ToPurviewConfigurationPtrOutput() PurviewConfigurationPtrOutput {
	return i.ToPurviewConfigurationPtrOutputWithContext(context.Background())
}

func (i PurviewConfigurationArgs) ToPurviewConfigurationPtrOutputWithContext(ctx context.Context) PurviewConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PurviewConfigurationOutput).ToPurviewConfigurationPtrOutputWithContext(ctx)
}

// PurviewConfigurationPtrInput is an input type that accepts PurviewConfigurationArgs, PurviewConfigurationPtr and PurviewConfigurationPtrOutput values.
// You can construct a concrete instance of `PurviewConfigurationPtrInput` via:
//
//	        PurviewConfigurationArgs{...}
//
//	or:
//
//	        nil
type PurviewConfigurationPtrInput interface {
	pulumi.Input

	ToPurviewConfigurationPtrOutput() PurviewConfigurationPtrOutput
	ToPurviewConfigurationPtrOutputWithContext(context.Context) PurviewConfigurationPtrOutput
}

type purviewConfigurationPtrType PurviewConfigurationArgs

func PurviewConfigurationPtr(v *PurviewConfigurationArgs) PurviewConfigurationPtrInput {
	return (*purviewConfigurationPtrType)(v)
}

func (*purviewConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PurviewConfiguration)(nil)).Elem()
}

func (i *purviewConfigurationPtrType) ToPurviewConfigurationPtrOutput() PurviewConfigurationPtrOutput {
	return i.ToPurviewConfigurationPtrOutputWithContext(context.Background())
}

func (i *purviewConfigurationPtrType) ToPurviewConfigurationPtrOutputWithContext(ctx context.Context) PurviewConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PurviewConfigurationPtrOutput)
}

// Purview configuration.
type PurviewConfigurationOutput struct{ *pulumi.OutputState }

func (PurviewConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PurviewConfiguration)(nil)).Elem()
}

func (o PurviewConfigurationOutput) ToPurviewConfigurationOutput() PurviewConfigurationOutput {
	return o
}

func (o PurviewConfigurationOutput) ToPurviewConfigurationOutputWithContext(ctx context.Context) PurviewConfigurationOutput {
	return o
}

func (o PurviewConfigurationOutput) ToPurviewConfigurationPtrOutput() PurviewConfigurationPtrOutput {
	return o.ToPurviewConfigurationPtrOutputWithContext(context.Background())
}

func (o PurviewConfigurationOutput) ToPurviewConfigurationPtrOutputWithContext(ctx context.Context) PurviewConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PurviewConfiguration) *PurviewConfiguration {
		return &v
	}).(PurviewConfigurationPtrOutput)
}

// Purview resource id.
func (o PurviewConfigurationOutput) PurviewResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PurviewConfiguration) *string { return v.PurviewResourceId }).(pulumi.StringPtrOutput)
}

type PurviewConfigurationPtrOutput struct{ *pulumi.OutputState }

func (PurviewConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PurviewConfiguration)(nil)).Elem()
}

func (o PurviewConfigurationPtrOutput) ToPurviewConfigurationPtrOutput() PurviewConfigurationPtrOutput {
	return o
}

func (o PurviewConfigurationPtrOutput) ToPurviewConfigurationPtrOutputWithContext(ctx context.Context) PurviewConfigurationPtrOutput {
	return o
}

func (o PurviewConfigurationPtrOutput) Elem() PurviewConfigurationOutput {
	return o.ApplyT(func(v *PurviewConfiguration) PurviewConfiguration {
		if v != nil {
			return *v
		}
		var ret PurviewConfiguration
		return ret
	}).(PurviewConfigurationOutput)
}

// Purview resource id.
func (o PurviewConfigurationPtrOutput) PurviewResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PurviewConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.PurviewResourceId
	}).(pulumi.StringPtrOutput)
}

// Purview configuration.
type PurviewConfigurationResponse struct {
	// Purview resource id.
	PurviewResourceId *string `pulumi:"purviewResourceId"`
}

// Purview configuration.
type PurviewConfigurationResponseOutput struct{ *pulumi.OutputState }

func (PurviewConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PurviewConfigurationResponse)(nil)).Elem()
}

func (o PurviewConfigurationResponseOutput) ToPurviewConfigurationResponseOutput() PurviewConfigurationResponseOutput {
	return o
}

func (o PurviewConfigurationResponseOutput) ToPurviewConfigurationResponseOutputWithContext(ctx context.Context) PurviewConfigurationResponseOutput {
	return o
}

// Purview resource id.
func (o PurviewConfigurationResponseOutput) PurviewResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PurviewConfigurationResponse) *string { return v.PurviewResourceId }).(pulumi.StringPtrOutput)
}

type PurviewConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (PurviewConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PurviewConfigurationResponse)(nil)).Elem()
}

func (o PurviewConfigurationResponsePtrOutput) ToPurviewConfigurationResponsePtrOutput() PurviewConfigurationResponsePtrOutput {
	return o
}

func (o PurviewConfigurationResponsePtrOutput) ToPurviewConfigurationResponsePtrOutputWithContext(ctx context.Context) PurviewConfigurationResponsePtrOutput {
	return o
}

func (o PurviewConfigurationResponsePtrOutput) Elem() PurviewConfigurationResponseOutput {
	return o.ApplyT(func(v *PurviewConfigurationResponse) PurviewConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret PurviewConfigurationResponse
		return ret
	}).(PurviewConfigurationResponseOutput)
}

// Purview resource id.
func (o PurviewConfigurationResponsePtrOutput) PurviewResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PurviewConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.PurviewResourceId
	}).(pulumi.StringPtrOutput)
}

// QuickBooks server linked service.
type QuickBooksLinkedService struct {
	// The access token for OAuth 1.0 authentication.
	AccessToken interface{} `pulumi:"accessToken"`
	// The access token secret for OAuth 1.0 authentication.
	AccessTokenSecret interface{} `pulumi:"accessTokenSecret"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The company ID of the QuickBooks company to authorize.
	CompanyId interface{} `pulumi:"companyId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Properties used to connect to QuickBooks. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// The consumer key for OAuth 1.0 authentication.
	ConsumerKey interface{} `pulumi:"consumerKey"`
	// The consumer secret for OAuth 1.0 authentication.
	ConsumerSecret interface{} `pulumi:"consumerSecret"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The endpoint of the QuickBooks server. (i.e. quickbooks.api.intuit.com)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'QuickBooks'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
}

// QuickBooksLinkedServiceInput is an input type that accepts QuickBooksLinkedServiceArgs and QuickBooksLinkedServiceOutput values.
// You can construct a concrete instance of `QuickBooksLinkedServiceInput` via:
//
//	QuickBooksLinkedServiceArgs{...}
type QuickBooksLinkedServiceInput interface {
	pulumi.Input

	ToQuickBooksLinkedServiceOutput() QuickBooksLinkedServiceOutput
	ToQuickBooksLinkedServiceOutputWithContext(context.Context) QuickBooksLinkedServiceOutput
}

// QuickBooks server linked service.
type QuickBooksLinkedServiceArgs struct {
	// The access token for OAuth 1.0 authentication.
	AccessToken pulumi.Input `pulumi:"accessToken"`
	// The access token secret for OAuth 1.0 authentication.
	AccessTokenSecret pulumi.Input `pulumi:"accessTokenSecret"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The company ID of the QuickBooks company to authorize.
	CompanyId pulumi.Input `pulumi:"companyId"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Properties used to connect to QuickBooks. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties pulumi.Input `pulumi:"connectionProperties"`
	// The consumer key for OAuth 1.0 authentication.
	ConsumerKey pulumi.Input `pulumi:"consumerKey"`
	// The consumer secret for OAuth 1.0 authentication.
	ConsumerSecret pulumi.Input `pulumi:"consumerSecret"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// The endpoint of the QuickBooks server. (i.e. quickbooks.api.intuit.com)
	Endpoint pulumi.Input `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'QuickBooks'.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
}

func (QuickBooksLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QuickBooksLinkedService)(nil)).Elem()
}

func (i QuickBooksLinkedServiceArgs) ToQuickBooksLinkedServiceOutput() QuickBooksLinkedServiceOutput {
	return i.ToQuickBooksLinkedServiceOutputWithContext(context.Background())
}

func (i QuickBooksLinkedServiceArgs) ToQuickBooksLinkedServiceOutputWithContext(ctx context.Context) QuickBooksLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuickBooksLinkedServiceOutput)
}

// QuickBooks server linked service.
type QuickBooksLinkedServiceOutput struct{ *pulumi.OutputState }

func (QuickBooksLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuickBooksLinkedService)(nil)).Elem()
}

func (o QuickBooksLinkedServiceOutput) ToQuickBooksLinkedServiceOutput() QuickBooksLinkedServiceOutput {
	return o
}

func (o QuickBooksLinkedServiceOutput) ToQuickBooksLinkedServiceOutputWithContext(ctx context.Context) QuickBooksLinkedServiceOutput {
	return o
}

// The access token for OAuth 1.0 authentication.
func (o QuickBooksLinkedServiceOutput) AccessToken() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksLinkedService) interface{} { return v.AccessToken }).(pulumi.AnyOutput)
}

// The access token secret for OAuth 1.0 authentication.
func (o QuickBooksLinkedServiceOutput) AccessTokenSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksLinkedService) interface{} { return v.AccessTokenSecret }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o QuickBooksLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v QuickBooksLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The company ID of the QuickBooks company to authorize.
func (o QuickBooksLinkedServiceOutput) CompanyId() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksLinkedService) interface{} { return v.CompanyId }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o QuickBooksLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v QuickBooksLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Properties used to connect to QuickBooks. It is mutually exclusive with any other properties in the linked service. Type: object.
func (o QuickBooksLinkedServiceOutput) ConnectionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksLinkedService) interface{} { return v.ConnectionProperties }).(pulumi.AnyOutput)
}

// The consumer key for OAuth 1.0 authentication.
func (o QuickBooksLinkedServiceOutput) ConsumerKey() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksLinkedService) interface{} { return v.ConsumerKey }).(pulumi.AnyOutput)
}

// The consumer secret for OAuth 1.0 authentication.
func (o QuickBooksLinkedServiceOutput) ConsumerSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksLinkedService) interface{} { return v.ConsumerSecret }).(pulumi.AnyOutput)
}

// Linked service description.
func (o QuickBooksLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuickBooksLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o QuickBooksLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuickBooksLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The endpoint of the QuickBooks server. (i.e. quickbooks.api.intuit.com)
func (o QuickBooksLinkedServiceOutput) Endpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksLinkedService) interface{} { return v.Endpoint }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o QuickBooksLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v QuickBooksLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
// Expected value is 'QuickBooks'.
func (o QuickBooksLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v QuickBooksLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o QuickBooksLinkedServiceOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksLinkedService) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// QuickBooks server linked service.
type QuickBooksLinkedServiceResponse struct {
	// The access token for OAuth 1.0 authentication.
	AccessToken interface{} `pulumi:"accessToken"`
	// The access token secret for OAuth 1.0 authentication.
	AccessTokenSecret interface{} `pulumi:"accessTokenSecret"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The company ID of the QuickBooks company to authorize.
	CompanyId interface{} `pulumi:"companyId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Properties used to connect to QuickBooks. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// The consumer key for OAuth 1.0 authentication.
	ConsumerKey interface{} `pulumi:"consumerKey"`
	// The consumer secret for OAuth 1.0 authentication.
	ConsumerSecret interface{} `pulumi:"consumerSecret"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The endpoint of the QuickBooks server. (i.e. quickbooks.api.intuit.com)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'QuickBooks'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
}

// QuickBooks server linked service.
type QuickBooksLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (QuickBooksLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuickBooksLinkedServiceResponse)(nil)).Elem()
}

func (o QuickBooksLinkedServiceResponseOutput) ToQuickBooksLinkedServiceResponseOutput() QuickBooksLinkedServiceResponseOutput {
	return o
}

func (o QuickBooksLinkedServiceResponseOutput) ToQuickBooksLinkedServiceResponseOutputWithContext(ctx context.Context) QuickBooksLinkedServiceResponseOutput {
	return o
}

// The access token for OAuth 1.0 authentication.
func (o QuickBooksLinkedServiceResponseOutput) AccessToken() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksLinkedServiceResponse) interface{} { return v.AccessToken }).(pulumi.AnyOutput)
}

// The access token secret for OAuth 1.0 authentication.
func (o QuickBooksLinkedServiceResponseOutput) AccessTokenSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksLinkedServiceResponse) interface{} { return v.AccessTokenSecret }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o QuickBooksLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v QuickBooksLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The company ID of the QuickBooks company to authorize.
func (o QuickBooksLinkedServiceResponseOutput) CompanyId() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksLinkedServiceResponse) interface{} { return v.CompanyId }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o QuickBooksLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v QuickBooksLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Properties used to connect to QuickBooks. It is mutually exclusive with any other properties in the linked service. Type: object.
func (o QuickBooksLinkedServiceResponseOutput) ConnectionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksLinkedServiceResponse) interface{} { return v.ConnectionProperties }).(pulumi.AnyOutput)
}

// The consumer key for OAuth 1.0 authentication.
func (o QuickBooksLinkedServiceResponseOutput) ConsumerKey() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksLinkedServiceResponse) interface{} { return v.ConsumerKey }).(pulumi.AnyOutput)
}

// The consumer secret for OAuth 1.0 authentication.
func (o QuickBooksLinkedServiceResponseOutput) ConsumerSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksLinkedServiceResponse) interface{} { return v.ConsumerSecret }).(pulumi.AnyOutput)
}

// Linked service description.
func (o QuickBooksLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuickBooksLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o QuickBooksLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuickBooksLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The endpoint of the QuickBooks server. (i.e. quickbooks.api.intuit.com)
func (o QuickBooksLinkedServiceResponseOutput) Endpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksLinkedServiceResponse) interface{} { return v.Endpoint }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o QuickBooksLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v QuickBooksLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
// Expected value is 'QuickBooks'.
func (o QuickBooksLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v QuickBooksLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o QuickBooksLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksLinkedServiceResponse) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// QuickBooks server dataset.
type QuickBooksObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'QuickBooksObject'.
	Type string `pulumi:"type"`
}

// QuickBooksObjectDatasetInput is an input type that accepts QuickBooksObjectDatasetArgs and QuickBooksObjectDatasetOutput values.
// You can construct a concrete instance of `QuickBooksObjectDatasetInput` via:
//
//	QuickBooksObjectDatasetArgs{...}
type QuickBooksObjectDatasetInput interface {
	pulumi.Input

	ToQuickBooksObjectDatasetOutput() QuickBooksObjectDatasetOutput
	ToQuickBooksObjectDatasetOutputWithContext(context.Context) QuickBooksObjectDatasetOutput
}

// QuickBooks server dataset.
type QuickBooksObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'QuickBooksObject'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (QuickBooksObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QuickBooksObjectDataset)(nil)).Elem()
}

func (i QuickBooksObjectDatasetArgs) ToQuickBooksObjectDatasetOutput() QuickBooksObjectDatasetOutput {
	return i.ToQuickBooksObjectDatasetOutputWithContext(context.Background())
}

func (i QuickBooksObjectDatasetArgs) ToQuickBooksObjectDatasetOutputWithContext(ctx context.Context) QuickBooksObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuickBooksObjectDatasetOutput)
}

// QuickBooks server dataset.
type QuickBooksObjectDatasetOutput struct{ *pulumi.OutputState }

func (QuickBooksObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuickBooksObjectDataset)(nil)).Elem()
}

func (o QuickBooksObjectDatasetOutput) ToQuickBooksObjectDatasetOutput() QuickBooksObjectDatasetOutput {
	return o
}

func (o QuickBooksObjectDatasetOutput) ToQuickBooksObjectDatasetOutputWithContext(ctx context.Context) QuickBooksObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o QuickBooksObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v QuickBooksObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o QuickBooksObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuickBooksObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o QuickBooksObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v QuickBooksObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o QuickBooksObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v QuickBooksObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o QuickBooksObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v QuickBooksObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o QuickBooksObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o QuickBooksObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o QuickBooksObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'QuickBooksObject'.
func (o QuickBooksObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v QuickBooksObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// QuickBooks server dataset.
type QuickBooksObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'QuickBooksObject'.
	Type string `pulumi:"type"`
}

// QuickBooks server dataset.
type QuickBooksObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (QuickBooksObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuickBooksObjectDatasetResponse)(nil)).Elem()
}

func (o QuickBooksObjectDatasetResponseOutput) ToQuickBooksObjectDatasetResponseOutput() QuickBooksObjectDatasetResponseOutput {
	return o
}

func (o QuickBooksObjectDatasetResponseOutput) ToQuickBooksObjectDatasetResponseOutputWithContext(ctx context.Context) QuickBooksObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o QuickBooksObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v QuickBooksObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o QuickBooksObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuickBooksObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o QuickBooksObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v QuickBooksObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o QuickBooksObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v QuickBooksObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o QuickBooksObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v QuickBooksObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o QuickBooksObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o QuickBooksObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o QuickBooksObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'QuickBooksObject'.
func (o QuickBooksObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v QuickBooksObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity QuickBooks server source.
type QuickBooksSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'QuickBooksSource'.
	Type string `pulumi:"type"`
}

// QuickBooksSourceInput is an input type that accepts QuickBooksSourceArgs and QuickBooksSourceOutput values.
// You can construct a concrete instance of `QuickBooksSourceInput` via:
//
//	QuickBooksSourceArgs{...}
type QuickBooksSourceInput interface {
	pulumi.Input

	ToQuickBooksSourceOutput() QuickBooksSourceOutput
	ToQuickBooksSourceOutputWithContext(context.Context) QuickBooksSourceOutput
}

// A copy activity QuickBooks server source.
type QuickBooksSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'QuickBooksSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (QuickBooksSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QuickBooksSource)(nil)).Elem()
}

func (i QuickBooksSourceArgs) ToQuickBooksSourceOutput() QuickBooksSourceOutput {
	return i.ToQuickBooksSourceOutputWithContext(context.Background())
}

func (i QuickBooksSourceArgs) ToQuickBooksSourceOutputWithContext(ctx context.Context) QuickBooksSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuickBooksSourceOutput)
}

// A copy activity QuickBooks server source.
type QuickBooksSourceOutput struct{ *pulumi.OutputState }

func (QuickBooksSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuickBooksSource)(nil)).Elem()
}

func (o QuickBooksSourceOutput) ToQuickBooksSourceOutput() QuickBooksSourceOutput {
	return o
}

func (o QuickBooksSourceOutput) ToQuickBooksSourceOutputWithContext(ctx context.Context) QuickBooksSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o QuickBooksSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o QuickBooksSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o QuickBooksSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o QuickBooksSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o QuickBooksSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o QuickBooksSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o QuickBooksSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'QuickBooksSource'.
func (o QuickBooksSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v QuickBooksSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity QuickBooks server source.
type QuickBooksSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'QuickBooksSource'.
	Type string `pulumi:"type"`
}

// A copy activity QuickBooks server source.
type QuickBooksSourceResponseOutput struct{ *pulumi.OutputState }

func (QuickBooksSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuickBooksSourceResponse)(nil)).Elem()
}

func (o QuickBooksSourceResponseOutput) ToQuickBooksSourceResponseOutput() QuickBooksSourceResponseOutput {
	return o
}

func (o QuickBooksSourceResponseOutput) ToQuickBooksSourceResponseOutputWithContext(ctx context.Context) QuickBooksSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o QuickBooksSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o QuickBooksSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o QuickBooksSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o QuickBooksSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o QuickBooksSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o QuickBooksSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o QuickBooksSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickBooksSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'QuickBooksSource'.
func (o QuickBooksSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v QuickBooksSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for Quickbase.
type QuickbaseLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Quickbase'.
	Type string `pulumi:"type"`
	// The url to connect Quickbase source. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// The user token for the Quickbase source.
	UserToken interface{} `pulumi:"userToken"`
}

// QuickbaseLinkedServiceInput is an input type that accepts QuickbaseLinkedServiceArgs and QuickbaseLinkedServiceOutput values.
// You can construct a concrete instance of `QuickbaseLinkedServiceInput` via:
//
//	QuickbaseLinkedServiceArgs{...}
type QuickbaseLinkedServiceInput interface {
	pulumi.Input

	ToQuickbaseLinkedServiceOutput() QuickbaseLinkedServiceOutput
	ToQuickbaseLinkedServiceOutputWithContext(context.Context) QuickbaseLinkedServiceOutput
}

// Linked service for Quickbase.
type QuickbaseLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Quickbase'.
	Type pulumi.StringInput `pulumi:"type"`
	// The url to connect Quickbase source. Type: string (or Expression with resultType string).
	Url pulumi.Input `pulumi:"url"`
	// The user token for the Quickbase source.
	UserToken pulumi.Input `pulumi:"userToken"`
}

func (QuickbaseLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QuickbaseLinkedService)(nil)).Elem()
}

func (i QuickbaseLinkedServiceArgs) ToQuickbaseLinkedServiceOutput() QuickbaseLinkedServiceOutput {
	return i.ToQuickbaseLinkedServiceOutputWithContext(context.Background())
}

func (i QuickbaseLinkedServiceArgs) ToQuickbaseLinkedServiceOutputWithContext(ctx context.Context) QuickbaseLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuickbaseLinkedServiceOutput)
}

// Linked service for Quickbase.
type QuickbaseLinkedServiceOutput struct{ *pulumi.OutputState }

func (QuickbaseLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuickbaseLinkedService)(nil)).Elem()
}

func (o QuickbaseLinkedServiceOutput) ToQuickbaseLinkedServiceOutput() QuickbaseLinkedServiceOutput {
	return o
}

func (o QuickbaseLinkedServiceOutput) ToQuickbaseLinkedServiceOutputWithContext(ctx context.Context) QuickbaseLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o QuickbaseLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v QuickbaseLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o QuickbaseLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v QuickbaseLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o QuickbaseLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuickbaseLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o QuickbaseLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuickbaseLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o QuickbaseLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v QuickbaseLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
// Expected value is 'Quickbase'.
func (o QuickbaseLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v QuickbaseLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The url to connect Quickbase source. Type: string (or Expression with resultType string).
func (o QuickbaseLinkedServiceOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickbaseLinkedService) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// The user token for the Quickbase source.
func (o QuickbaseLinkedServiceOutput) UserToken() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickbaseLinkedService) interface{} { return v.UserToken }).(pulumi.AnyOutput)
}

// Linked service for Quickbase.
type QuickbaseLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Quickbase'.
	Type string `pulumi:"type"`
	// The url to connect Quickbase source. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// The user token for the Quickbase source.
	UserToken interface{} `pulumi:"userToken"`
}

// Linked service for Quickbase.
type QuickbaseLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (QuickbaseLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuickbaseLinkedServiceResponse)(nil)).Elem()
}

func (o QuickbaseLinkedServiceResponseOutput) ToQuickbaseLinkedServiceResponseOutput() QuickbaseLinkedServiceResponseOutput {
	return o
}

func (o QuickbaseLinkedServiceResponseOutput) ToQuickbaseLinkedServiceResponseOutputWithContext(ctx context.Context) QuickbaseLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o QuickbaseLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v QuickbaseLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o QuickbaseLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v QuickbaseLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o QuickbaseLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuickbaseLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o QuickbaseLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuickbaseLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o QuickbaseLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v QuickbaseLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
// Expected value is 'Quickbase'.
func (o QuickbaseLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v QuickbaseLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The url to connect Quickbase source. Type: string (or Expression with resultType string).
func (o QuickbaseLinkedServiceResponseOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickbaseLinkedServiceResponse) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// The user token for the Quickbase source.
func (o QuickbaseLinkedServiceResponseOutput) UserToken() pulumi.AnyOutput {
	return o.ApplyT(func(v QuickbaseLinkedServiceResponse) interface{} { return v.UserToken }).(pulumi.AnyOutput)
}

// The recurrence schedule.
type RecurrenceSchedule struct {
	// The hours.
	Hours []int `pulumi:"hours"`
	// The minutes.
	Minutes []int `pulumi:"minutes"`
	// The month days.
	MonthDays []int `pulumi:"monthDays"`
	// The monthly occurrences.
	MonthlyOccurrences []RecurrenceScheduleOccurrence `pulumi:"monthlyOccurrences"`
	// The days of the week.
	WeekDays []DaysOfWeek `pulumi:"weekDays"`
}

// RecurrenceScheduleInput is an input type that accepts RecurrenceScheduleArgs and RecurrenceScheduleOutput values.
// You can construct a concrete instance of `RecurrenceScheduleInput` via:
//
//	RecurrenceScheduleArgs{...}
type RecurrenceScheduleInput interface {
	pulumi.Input

	ToRecurrenceScheduleOutput() RecurrenceScheduleOutput
	ToRecurrenceScheduleOutputWithContext(context.Context) RecurrenceScheduleOutput
}

// The recurrence schedule.
type RecurrenceScheduleArgs struct {
	// The hours.
	Hours pulumi.IntArrayInput `pulumi:"hours"`
	// The minutes.
	Minutes pulumi.IntArrayInput `pulumi:"minutes"`
	// The month days.
	MonthDays pulumi.IntArrayInput `pulumi:"monthDays"`
	// The monthly occurrences.
	MonthlyOccurrences RecurrenceScheduleOccurrenceArrayInput `pulumi:"monthlyOccurrences"`
	// The days of the week.
	WeekDays DaysOfWeekArrayInput `pulumi:"weekDays"`
}

func (RecurrenceScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceSchedule)(nil)).Elem()
}

func (i RecurrenceScheduleArgs) ToRecurrenceScheduleOutput() RecurrenceScheduleOutput {
	return i.ToRecurrenceScheduleOutputWithContext(context.Background())
}

func (i RecurrenceScheduleArgs) ToRecurrenceScheduleOutputWithContext(ctx context.Context) RecurrenceScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrenceScheduleOutput)
}

func (i RecurrenceScheduleArgs) ToRecurrenceSchedulePtrOutput() RecurrenceSchedulePtrOutput {
	return i.ToRecurrenceSchedulePtrOutputWithContext(context.Background())
}

func (i RecurrenceScheduleArgs) ToRecurrenceSchedulePtrOutputWithContext(ctx context.Context) RecurrenceSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrenceScheduleOutput).ToRecurrenceSchedulePtrOutputWithContext(ctx)
}

// RecurrenceSchedulePtrInput is an input type that accepts RecurrenceScheduleArgs, RecurrenceSchedulePtr and RecurrenceSchedulePtrOutput values.
// You can construct a concrete instance of `RecurrenceSchedulePtrInput` via:
//
//	        RecurrenceScheduleArgs{...}
//
//	or:
//
//	        nil
type RecurrenceSchedulePtrInput interface {
	pulumi.Input

	ToRecurrenceSchedulePtrOutput() RecurrenceSchedulePtrOutput
	ToRecurrenceSchedulePtrOutputWithContext(context.Context) RecurrenceSchedulePtrOutput
}

type recurrenceSchedulePtrType RecurrenceScheduleArgs

func RecurrenceSchedulePtr(v *RecurrenceScheduleArgs) RecurrenceSchedulePtrInput {
	return (*recurrenceSchedulePtrType)(v)
}

func (*recurrenceSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrenceSchedule)(nil)).Elem()
}

func (i *recurrenceSchedulePtrType) ToRecurrenceSchedulePtrOutput() RecurrenceSchedulePtrOutput {
	return i.ToRecurrenceSchedulePtrOutputWithContext(context.Background())
}

func (i *recurrenceSchedulePtrType) ToRecurrenceSchedulePtrOutputWithContext(ctx context.Context) RecurrenceSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrenceSchedulePtrOutput)
}

// The recurrence schedule.
type RecurrenceScheduleOutput struct{ *pulumi.OutputState }

func (RecurrenceScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceSchedule)(nil)).Elem()
}

func (o RecurrenceScheduleOutput) ToRecurrenceScheduleOutput() RecurrenceScheduleOutput {
	return o
}

func (o RecurrenceScheduleOutput) ToRecurrenceScheduleOutputWithContext(ctx context.Context) RecurrenceScheduleOutput {
	return o
}

func (o RecurrenceScheduleOutput) ToRecurrenceSchedulePtrOutput() RecurrenceSchedulePtrOutput {
	return o.ToRecurrenceSchedulePtrOutputWithContext(context.Background())
}

func (o RecurrenceScheduleOutput) ToRecurrenceSchedulePtrOutputWithContext(ctx context.Context) RecurrenceSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecurrenceSchedule) *RecurrenceSchedule {
		return &v
	}).(RecurrenceSchedulePtrOutput)
}

// The hours.
func (o RecurrenceScheduleOutput) Hours() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RecurrenceSchedule) []int { return v.Hours }).(pulumi.IntArrayOutput)
}

// The minutes.
func (o RecurrenceScheduleOutput) Minutes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RecurrenceSchedule) []int { return v.Minutes }).(pulumi.IntArrayOutput)
}

// The month days.
func (o RecurrenceScheduleOutput) MonthDays() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RecurrenceSchedule) []int { return v.MonthDays }).(pulumi.IntArrayOutput)
}

// The monthly occurrences.
func (o RecurrenceScheduleOutput) MonthlyOccurrences() RecurrenceScheduleOccurrenceArrayOutput {
	return o.ApplyT(func(v RecurrenceSchedule) []RecurrenceScheduleOccurrence { return v.MonthlyOccurrences }).(RecurrenceScheduleOccurrenceArrayOutput)
}

// The days of the week.
func (o RecurrenceScheduleOutput) WeekDays() DaysOfWeekArrayOutput {
	return o.ApplyT(func(v RecurrenceSchedule) []DaysOfWeek { return v.WeekDays }).(DaysOfWeekArrayOutput)
}

type RecurrenceSchedulePtrOutput struct{ *pulumi.OutputState }

func (RecurrenceSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrenceSchedule)(nil)).Elem()
}

func (o RecurrenceSchedulePtrOutput) ToRecurrenceSchedulePtrOutput() RecurrenceSchedulePtrOutput {
	return o
}

func (o RecurrenceSchedulePtrOutput) ToRecurrenceSchedulePtrOutputWithContext(ctx context.Context) RecurrenceSchedulePtrOutput {
	return o
}

func (o RecurrenceSchedulePtrOutput) Elem() RecurrenceScheduleOutput {
	return o.ApplyT(func(v *RecurrenceSchedule) RecurrenceSchedule {
		if v != nil {
			return *v
		}
		var ret RecurrenceSchedule
		return ret
	}).(RecurrenceScheduleOutput)
}

// The hours.
func (o RecurrenceSchedulePtrOutput) Hours() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RecurrenceSchedule) []int {
		if v == nil {
			return nil
		}
		return v.Hours
	}).(pulumi.IntArrayOutput)
}

// The minutes.
func (o RecurrenceSchedulePtrOutput) Minutes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RecurrenceSchedule) []int {
		if v == nil {
			return nil
		}
		return v.Minutes
	}).(pulumi.IntArrayOutput)
}

// The month days.
func (o RecurrenceSchedulePtrOutput) MonthDays() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RecurrenceSchedule) []int {
		if v == nil {
			return nil
		}
		return v.MonthDays
	}).(pulumi.IntArrayOutput)
}

// The monthly occurrences.
func (o RecurrenceSchedulePtrOutput) MonthlyOccurrences() RecurrenceScheduleOccurrenceArrayOutput {
	return o.ApplyT(func(v *RecurrenceSchedule) []RecurrenceScheduleOccurrence {
		if v == nil {
			return nil
		}
		return v.MonthlyOccurrences
	}).(RecurrenceScheduleOccurrenceArrayOutput)
}

// The days of the week.
func (o RecurrenceSchedulePtrOutput) WeekDays() DaysOfWeekArrayOutput {
	return o.ApplyT(func(v *RecurrenceSchedule) []DaysOfWeek {
		if v == nil {
			return nil
		}
		return v.WeekDays
	}).(DaysOfWeekArrayOutput)
}

// The recurrence schedule occurrence.
type RecurrenceScheduleOccurrence struct {
	// The day of the week.
	Day *DayOfWeek `pulumi:"day"`
	// The occurrence.
	Occurrence *int `pulumi:"occurrence"`
}

// RecurrenceScheduleOccurrenceInput is an input type that accepts RecurrenceScheduleOccurrenceArgs and RecurrenceScheduleOccurrenceOutput values.
// You can construct a concrete instance of `RecurrenceScheduleOccurrenceInput` via:
//
//	RecurrenceScheduleOccurrenceArgs{...}
type RecurrenceScheduleOccurrenceInput interface {
	pulumi.Input

	ToRecurrenceScheduleOccurrenceOutput() RecurrenceScheduleOccurrenceOutput
	ToRecurrenceScheduleOccurrenceOutputWithContext(context.Context) RecurrenceScheduleOccurrenceOutput
}

// The recurrence schedule occurrence.
type RecurrenceScheduleOccurrenceArgs struct {
	// The day of the week.
	Day DayOfWeekPtrInput `pulumi:"day"`
	// The occurrence.
	Occurrence pulumi.IntPtrInput `pulumi:"occurrence"`
}

func (RecurrenceScheduleOccurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceScheduleOccurrence)(nil)).Elem()
}

func (i RecurrenceScheduleOccurrenceArgs) ToRecurrenceScheduleOccurrenceOutput() RecurrenceScheduleOccurrenceOutput {
	return i.ToRecurrenceScheduleOccurrenceOutputWithContext(context.Background())
}

func (i RecurrenceScheduleOccurrenceArgs) ToRecurrenceScheduleOccurrenceOutputWithContext(ctx context.Context) RecurrenceScheduleOccurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrenceScheduleOccurrenceOutput)
}

// RecurrenceScheduleOccurrenceArrayInput is an input type that accepts RecurrenceScheduleOccurrenceArray and RecurrenceScheduleOccurrenceArrayOutput values.
// You can construct a concrete instance of `RecurrenceScheduleOccurrenceArrayInput` via:
//
//	RecurrenceScheduleOccurrenceArray{ RecurrenceScheduleOccurrenceArgs{...} }
type RecurrenceScheduleOccurrenceArrayInput interface {
	pulumi.Input

	ToRecurrenceScheduleOccurrenceArrayOutput() RecurrenceScheduleOccurrenceArrayOutput
	ToRecurrenceScheduleOccurrenceArrayOutputWithContext(context.Context) RecurrenceScheduleOccurrenceArrayOutput
}

type RecurrenceScheduleOccurrenceArray []RecurrenceScheduleOccurrenceInput

func (RecurrenceScheduleOccurrenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecurrenceScheduleOccurrence)(nil)).Elem()
}

func (i RecurrenceScheduleOccurrenceArray) ToRecurrenceScheduleOccurrenceArrayOutput() RecurrenceScheduleOccurrenceArrayOutput {
	return i.ToRecurrenceScheduleOccurrenceArrayOutputWithContext(context.Background())
}

func (i RecurrenceScheduleOccurrenceArray) ToRecurrenceScheduleOccurrenceArrayOutputWithContext(ctx context.Context) RecurrenceScheduleOccurrenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrenceScheduleOccurrenceArrayOutput)
}

// The recurrence schedule occurrence.
type RecurrenceScheduleOccurrenceOutput struct{ *pulumi.OutputState }

func (RecurrenceScheduleOccurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceScheduleOccurrence)(nil)).Elem()
}

func (o RecurrenceScheduleOccurrenceOutput) ToRecurrenceScheduleOccurrenceOutput() RecurrenceScheduleOccurrenceOutput {
	return o
}

func (o RecurrenceScheduleOccurrenceOutput) ToRecurrenceScheduleOccurrenceOutputWithContext(ctx context.Context) RecurrenceScheduleOccurrenceOutput {
	return o
}

// The day of the week.
func (o RecurrenceScheduleOccurrenceOutput) Day() DayOfWeekPtrOutput {
	return o.ApplyT(func(v RecurrenceScheduleOccurrence) *DayOfWeek { return v.Day }).(DayOfWeekPtrOutput)
}

// The occurrence.
func (o RecurrenceScheduleOccurrenceOutput) Occurrence() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RecurrenceScheduleOccurrence) *int { return v.Occurrence }).(pulumi.IntPtrOutput)
}

type RecurrenceScheduleOccurrenceArrayOutput struct{ *pulumi.OutputState }

func (RecurrenceScheduleOccurrenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecurrenceScheduleOccurrence)(nil)).Elem()
}

func (o RecurrenceScheduleOccurrenceArrayOutput) ToRecurrenceScheduleOccurrenceArrayOutput() RecurrenceScheduleOccurrenceArrayOutput {
	return o
}

func (o RecurrenceScheduleOccurrenceArrayOutput) ToRecurrenceScheduleOccurrenceArrayOutputWithContext(ctx context.Context) RecurrenceScheduleOccurrenceArrayOutput {
	return o
}

func (o RecurrenceScheduleOccurrenceArrayOutput) Index(i pulumi.IntInput) RecurrenceScheduleOccurrenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecurrenceScheduleOccurrence {
		return vs[0].([]RecurrenceScheduleOccurrence)[vs[1].(int)]
	}).(RecurrenceScheduleOccurrenceOutput)
}

// The recurrence schedule occurrence.
type RecurrenceScheduleOccurrenceResponse struct {
	// The day of the week.
	Day *string `pulumi:"day"`
	// The occurrence.
	Occurrence *int `pulumi:"occurrence"`
}

// The recurrence schedule occurrence.
type RecurrenceScheduleOccurrenceResponseOutput struct{ *pulumi.OutputState }

func (RecurrenceScheduleOccurrenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceScheduleOccurrenceResponse)(nil)).Elem()
}

func (o RecurrenceScheduleOccurrenceResponseOutput) ToRecurrenceScheduleOccurrenceResponseOutput() RecurrenceScheduleOccurrenceResponseOutput {
	return o
}

func (o RecurrenceScheduleOccurrenceResponseOutput) ToRecurrenceScheduleOccurrenceResponseOutputWithContext(ctx context.Context) RecurrenceScheduleOccurrenceResponseOutput {
	return o
}

// The day of the week.
func (o RecurrenceScheduleOccurrenceResponseOutput) Day() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurrenceScheduleOccurrenceResponse) *string { return v.Day }).(pulumi.StringPtrOutput)
}

// The occurrence.
func (o RecurrenceScheduleOccurrenceResponseOutput) Occurrence() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RecurrenceScheduleOccurrenceResponse) *int { return v.Occurrence }).(pulumi.IntPtrOutput)
}

type RecurrenceScheduleOccurrenceResponseArrayOutput struct{ *pulumi.OutputState }

func (RecurrenceScheduleOccurrenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecurrenceScheduleOccurrenceResponse)(nil)).Elem()
}

func (o RecurrenceScheduleOccurrenceResponseArrayOutput) ToRecurrenceScheduleOccurrenceResponseArrayOutput() RecurrenceScheduleOccurrenceResponseArrayOutput {
	return o
}

func (o RecurrenceScheduleOccurrenceResponseArrayOutput) ToRecurrenceScheduleOccurrenceResponseArrayOutputWithContext(ctx context.Context) RecurrenceScheduleOccurrenceResponseArrayOutput {
	return o
}

func (o RecurrenceScheduleOccurrenceResponseArrayOutput) Index(i pulumi.IntInput) RecurrenceScheduleOccurrenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecurrenceScheduleOccurrenceResponse {
		return vs[0].([]RecurrenceScheduleOccurrenceResponse)[vs[1].(int)]
	}).(RecurrenceScheduleOccurrenceResponseOutput)
}

// The recurrence schedule.
type RecurrenceScheduleResponse struct {
	// The hours.
	Hours []int `pulumi:"hours"`
	// The minutes.
	Minutes []int `pulumi:"minutes"`
	// The month days.
	MonthDays []int `pulumi:"monthDays"`
	// The monthly occurrences.
	MonthlyOccurrences []RecurrenceScheduleOccurrenceResponse `pulumi:"monthlyOccurrences"`
	// The days of the week.
	WeekDays []string `pulumi:"weekDays"`
}

// The recurrence schedule.
type RecurrenceScheduleResponseOutput struct{ *pulumi.OutputState }

func (RecurrenceScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceScheduleResponse)(nil)).Elem()
}

func (o RecurrenceScheduleResponseOutput) ToRecurrenceScheduleResponseOutput() RecurrenceScheduleResponseOutput {
	return o
}

func (o RecurrenceScheduleResponseOutput) ToRecurrenceScheduleResponseOutputWithContext(ctx context.Context) RecurrenceScheduleResponseOutput {
	return o
}

// The hours.
func (o RecurrenceScheduleResponseOutput) Hours() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RecurrenceScheduleResponse) []int { return v.Hours }).(pulumi.IntArrayOutput)
}

// The minutes.
func (o RecurrenceScheduleResponseOutput) Minutes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RecurrenceScheduleResponse) []int { return v.Minutes }).(pulumi.IntArrayOutput)
}

// The month days.
func (o RecurrenceScheduleResponseOutput) MonthDays() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RecurrenceScheduleResponse) []int { return v.MonthDays }).(pulumi.IntArrayOutput)
}

// The monthly occurrences.
func (o RecurrenceScheduleResponseOutput) MonthlyOccurrences() RecurrenceScheduleOccurrenceResponseArrayOutput {
	return o.ApplyT(func(v RecurrenceScheduleResponse) []RecurrenceScheduleOccurrenceResponse { return v.MonthlyOccurrences }).(RecurrenceScheduleOccurrenceResponseArrayOutput)
}

// The days of the week.
func (o RecurrenceScheduleResponseOutput) WeekDays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RecurrenceScheduleResponse) []string { return v.WeekDays }).(pulumi.StringArrayOutput)
}

type RecurrenceScheduleResponsePtrOutput struct{ *pulumi.OutputState }

func (RecurrenceScheduleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrenceScheduleResponse)(nil)).Elem()
}

func (o RecurrenceScheduleResponsePtrOutput) ToRecurrenceScheduleResponsePtrOutput() RecurrenceScheduleResponsePtrOutput {
	return o
}

func (o RecurrenceScheduleResponsePtrOutput) ToRecurrenceScheduleResponsePtrOutputWithContext(ctx context.Context) RecurrenceScheduleResponsePtrOutput {
	return o
}

func (o RecurrenceScheduleResponsePtrOutput) Elem() RecurrenceScheduleResponseOutput {
	return o.ApplyT(func(v *RecurrenceScheduleResponse) RecurrenceScheduleResponse {
		if v != nil {
			return *v
		}
		var ret RecurrenceScheduleResponse
		return ret
	}).(RecurrenceScheduleResponseOutput)
}

// The hours.
func (o RecurrenceScheduleResponsePtrOutput) Hours() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RecurrenceScheduleResponse) []int {
		if v == nil {
			return nil
		}
		return v.Hours
	}).(pulumi.IntArrayOutput)
}

// The minutes.
func (o RecurrenceScheduleResponsePtrOutput) Minutes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RecurrenceScheduleResponse) []int {
		if v == nil {
			return nil
		}
		return v.Minutes
	}).(pulumi.IntArrayOutput)
}

// The month days.
func (o RecurrenceScheduleResponsePtrOutput) MonthDays() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RecurrenceScheduleResponse) []int {
		if v == nil {
			return nil
		}
		return v.MonthDays
	}).(pulumi.IntArrayOutput)
}

// The monthly occurrences.
func (o RecurrenceScheduleResponsePtrOutput) MonthlyOccurrences() RecurrenceScheduleOccurrenceResponseArrayOutput {
	return o.ApplyT(func(v *RecurrenceScheduleResponse) []RecurrenceScheduleOccurrenceResponse {
		if v == nil {
			return nil
		}
		return v.MonthlyOccurrences
	}).(RecurrenceScheduleOccurrenceResponseArrayOutput)
}

// The days of the week.
func (o RecurrenceScheduleResponsePtrOutput) WeekDays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RecurrenceScheduleResponse) []string {
		if v == nil {
			return nil
		}
		return v.WeekDays
	}).(pulumi.StringArrayOutput)
}

// Redirect incompatible row settings
type RedirectIncompatibleRowSettings struct {
	// Name of the Azure Storage, Storage SAS, or Azure Data Lake Store linked service used for redirecting incompatible row. Must be specified if redirectIncompatibleRowSettings is specified. Type: string (or Expression with resultType string).
	LinkedServiceName interface{} `pulumi:"linkedServiceName"`
	// The path for storing the redirect incompatible row data. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
}

// RedirectIncompatibleRowSettingsInput is an input type that accepts RedirectIncompatibleRowSettingsArgs and RedirectIncompatibleRowSettingsOutput values.
// You can construct a concrete instance of `RedirectIncompatibleRowSettingsInput` via:
//
//	RedirectIncompatibleRowSettingsArgs{...}
type RedirectIncompatibleRowSettingsInput interface {
	pulumi.Input

	ToRedirectIncompatibleRowSettingsOutput() RedirectIncompatibleRowSettingsOutput
	ToRedirectIncompatibleRowSettingsOutputWithContext(context.Context) RedirectIncompatibleRowSettingsOutput
}

// Redirect incompatible row settings
type RedirectIncompatibleRowSettingsArgs struct {
	// Name of the Azure Storage, Storage SAS, or Azure Data Lake Store linked service used for redirecting incompatible row. Must be specified if redirectIncompatibleRowSettings is specified. Type: string (or Expression with resultType string).
	LinkedServiceName pulumi.Input `pulumi:"linkedServiceName"`
	// The path for storing the redirect incompatible row data. Type: string (or Expression with resultType string).
	Path pulumi.Input `pulumi:"path"`
}

func (RedirectIncompatibleRowSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedirectIncompatibleRowSettings)(nil)).Elem()
}

func (i RedirectIncompatibleRowSettingsArgs) ToRedirectIncompatibleRowSettingsOutput() RedirectIncompatibleRowSettingsOutput {
	return i.ToRedirectIncompatibleRowSettingsOutputWithContext(context.Background())
}

func (i RedirectIncompatibleRowSettingsArgs) ToRedirectIncompatibleRowSettingsOutputWithContext(ctx context.Context) RedirectIncompatibleRowSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedirectIncompatibleRowSettingsOutput)
}

func (i RedirectIncompatibleRowSettingsArgs) ToRedirectIncompatibleRowSettingsPtrOutput() RedirectIncompatibleRowSettingsPtrOutput {
	return i.ToRedirectIncompatibleRowSettingsPtrOutputWithContext(context.Background())
}

func (i RedirectIncompatibleRowSettingsArgs) ToRedirectIncompatibleRowSettingsPtrOutputWithContext(ctx context.Context) RedirectIncompatibleRowSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedirectIncompatibleRowSettingsOutput).ToRedirectIncompatibleRowSettingsPtrOutputWithContext(ctx)
}

// RedirectIncompatibleRowSettingsPtrInput is an input type that accepts RedirectIncompatibleRowSettingsArgs, RedirectIncompatibleRowSettingsPtr and RedirectIncompatibleRowSettingsPtrOutput values.
// You can construct a concrete instance of `RedirectIncompatibleRowSettingsPtrInput` via:
//
//	        RedirectIncompatibleRowSettingsArgs{...}
//
//	or:
//
//	        nil
type RedirectIncompatibleRowSettingsPtrInput interface {
	pulumi.Input

	ToRedirectIncompatibleRowSettingsPtrOutput() RedirectIncompatibleRowSettingsPtrOutput
	ToRedirectIncompatibleRowSettingsPtrOutputWithContext(context.Context) RedirectIncompatibleRowSettingsPtrOutput
}

type redirectIncompatibleRowSettingsPtrType RedirectIncompatibleRowSettingsArgs

func RedirectIncompatibleRowSettingsPtr(v *RedirectIncompatibleRowSettingsArgs) RedirectIncompatibleRowSettingsPtrInput {
	return (*redirectIncompatibleRowSettingsPtrType)(v)
}

func (*redirectIncompatibleRowSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedirectIncompatibleRowSettings)(nil)).Elem()
}

func (i *redirectIncompatibleRowSettingsPtrType) ToRedirectIncompatibleRowSettingsPtrOutput() RedirectIncompatibleRowSettingsPtrOutput {
	return i.ToRedirectIncompatibleRowSettingsPtrOutputWithContext(context.Background())
}

func (i *redirectIncompatibleRowSettingsPtrType) ToRedirectIncompatibleRowSettingsPtrOutputWithContext(ctx context.Context) RedirectIncompatibleRowSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedirectIncompatibleRowSettingsPtrOutput)
}

// Redirect incompatible row settings
type RedirectIncompatibleRowSettingsOutput struct{ *pulumi.OutputState }

func (RedirectIncompatibleRowSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedirectIncompatibleRowSettings)(nil)).Elem()
}

func (o RedirectIncompatibleRowSettingsOutput) ToRedirectIncompatibleRowSettingsOutput() RedirectIncompatibleRowSettingsOutput {
	return o
}

func (o RedirectIncompatibleRowSettingsOutput) ToRedirectIncompatibleRowSettingsOutputWithContext(ctx context.Context) RedirectIncompatibleRowSettingsOutput {
	return o
}

func (o RedirectIncompatibleRowSettingsOutput) ToRedirectIncompatibleRowSettingsPtrOutput() RedirectIncompatibleRowSettingsPtrOutput {
	return o.ToRedirectIncompatibleRowSettingsPtrOutputWithContext(context.Background())
}

func (o RedirectIncompatibleRowSettingsOutput) ToRedirectIncompatibleRowSettingsPtrOutputWithContext(ctx context.Context) RedirectIncompatibleRowSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedirectIncompatibleRowSettings) *RedirectIncompatibleRowSettings {
		return &v
	}).(RedirectIncompatibleRowSettingsPtrOutput)
}

// Name of the Azure Storage, Storage SAS, or Azure Data Lake Store linked service used for redirecting incompatible row. Must be specified if redirectIncompatibleRowSettings is specified. Type: string (or Expression with resultType string).
func (o RedirectIncompatibleRowSettingsOutput) LinkedServiceName() pulumi.AnyOutput {
	return o.ApplyT(func(v RedirectIncompatibleRowSettings) interface{} { return v.LinkedServiceName }).(pulumi.AnyOutput)
}

// The path for storing the redirect incompatible row data. Type: string (or Expression with resultType string).
func (o RedirectIncompatibleRowSettingsOutput) Path() pulumi.AnyOutput {
	return o.ApplyT(func(v RedirectIncompatibleRowSettings) interface{} { return v.Path }).(pulumi.AnyOutput)
}

type RedirectIncompatibleRowSettingsPtrOutput struct{ *pulumi.OutputState }

func (RedirectIncompatibleRowSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedirectIncompatibleRowSettings)(nil)).Elem()
}

func (o RedirectIncompatibleRowSettingsPtrOutput) ToRedirectIncompatibleRowSettingsPtrOutput() RedirectIncompatibleRowSettingsPtrOutput {
	return o
}

func (o RedirectIncompatibleRowSettingsPtrOutput) ToRedirectIncompatibleRowSettingsPtrOutputWithContext(ctx context.Context) RedirectIncompatibleRowSettingsPtrOutput {
	return o
}

func (o RedirectIncompatibleRowSettingsPtrOutput) Elem() RedirectIncompatibleRowSettingsOutput {
	return o.ApplyT(func(v *RedirectIncompatibleRowSettings) RedirectIncompatibleRowSettings {
		if v != nil {
			return *v
		}
		var ret RedirectIncompatibleRowSettings
		return ret
	}).(RedirectIncompatibleRowSettingsOutput)
}

// Name of the Azure Storage, Storage SAS, or Azure Data Lake Store linked service used for redirecting incompatible row. Must be specified if redirectIncompatibleRowSettings is specified. Type: string (or Expression with resultType string).
func (o RedirectIncompatibleRowSettingsPtrOutput) LinkedServiceName() pulumi.AnyOutput {
	return o.ApplyT(func(v *RedirectIncompatibleRowSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.LinkedServiceName
	}).(pulumi.AnyOutput)
}

// The path for storing the redirect incompatible row data. Type: string (or Expression with resultType string).
func (o RedirectIncompatibleRowSettingsPtrOutput) Path() pulumi.AnyOutput {
	return o.ApplyT(func(v *RedirectIncompatibleRowSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.AnyOutput)
}

// Redirect incompatible row settings
type RedirectIncompatibleRowSettingsResponse struct {
	// Name of the Azure Storage, Storage SAS, or Azure Data Lake Store linked service used for redirecting incompatible row. Must be specified if redirectIncompatibleRowSettings is specified. Type: string (or Expression with resultType string).
	LinkedServiceName interface{} `pulumi:"linkedServiceName"`
	// The path for storing the redirect incompatible row data. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
}

// Redirect incompatible row settings
type RedirectIncompatibleRowSettingsResponseOutput struct{ *pulumi.OutputState }

func (RedirectIncompatibleRowSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedirectIncompatibleRowSettingsResponse)(nil)).Elem()
}

func (o RedirectIncompatibleRowSettingsResponseOutput) ToRedirectIncompatibleRowSettingsResponseOutput() RedirectIncompatibleRowSettingsResponseOutput {
	return o
}

func (o RedirectIncompatibleRowSettingsResponseOutput) ToRedirectIncompatibleRowSettingsResponseOutputWithContext(ctx context.Context) RedirectIncompatibleRowSettingsResponseOutput {
	return o
}

// Name of the Azure Storage, Storage SAS, or Azure Data Lake Store linked service used for redirecting incompatible row. Must be specified if redirectIncompatibleRowSettings is specified. Type: string (or Expression with resultType string).
func (o RedirectIncompatibleRowSettingsResponseOutput) LinkedServiceName() pulumi.AnyOutput {
	return o.ApplyT(func(v RedirectIncompatibleRowSettingsResponse) interface{} { return v.LinkedServiceName }).(pulumi.AnyOutput)
}

// The path for storing the redirect incompatible row data. Type: string (or Expression with resultType string).
func (o RedirectIncompatibleRowSettingsResponseOutput) Path() pulumi.AnyOutput {
	return o.ApplyT(func(v RedirectIncompatibleRowSettingsResponse) interface{} { return v.Path }).(pulumi.AnyOutput)
}

type RedirectIncompatibleRowSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (RedirectIncompatibleRowSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedirectIncompatibleRowSettingsResponse)(nil)).Elem()
}

func (o RedirectIncompatibleRowSettingsResponsePtrOutput) ToRedirectIncompatibleRowSettingsResponsePtrOutput() RedirectIncompatibleRowSettingsResponsePtrOutput {
	return o
}

func (o RedirectIncompatibleRowSettingsResponsePtrOutput) ToRedirectIncompatibleRowSettingsResponsePtrOutputWithContext(ctx context.Context) RedirectIncompatibleRowSettingsResponsePtrOutput {
	return o
}

func (o RedirectIncompatibleRowSettingsResponsePtrOutput) Elem() RedirectIncompatibleRowSettingsResponseOutput {
	return o.ApplyT(func(v *RedirectIncompatibleRowSettingsResponse) RedirectIncompatibleRowSettingsResponse {
		if v != nil {
			return *v
		}
		var ret RedirectIncompatibleRowSettingsResponse
		return ret
	}).(RedirectIncompatibleRowSettingsResponseOutput)
}

// Name of the Azure Storage, Storage SAS, or Azure Data Lake Store linked service used for redirecting incompatible row. Must be specified if redirectIncompatibleRowSettings is specified. Type: string (or Expression with resultType string).
func (o RedirectIncompatibleRowSettingsResponsePtrOutput) LinkedServiceName() pulumi.AnyOutput {
	return o.ApplyT(func(v *RedirectIncompatibleRowSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.LinkedServiceName
	}).(pulumi.AnyOutput)
}

// The path for storing the redirect incompatible row data. Type: string (or Expression with resultType string).
func (o RedirectIncompatibleRowSettingsResponsePtrOutput) Path() pulumi.AnyOutput {
	return o.ApplyT(func(v *RedirectIncompatibleRowSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.AnyOutput)
}

// The Amazon S3 settings needed for the interim Amazon S3 when copying from Amazon Redshift with unload. With this, data from Amazon Redshift source will be unloaded into S3 first and then copied into the targeted sink from the interim S3.
type RedshiftUnloadSettings struct {
	// The bucket of the interim Amazon S3 which will be used to store the unloaded data from Amazon Redshift source. The bucket must be in the same region as the Amazon Redshift source. Type: string (or Expression with resultType string).
	BucketName interface{} `pulumi:"bucketName"`
	// The name of the Amazon S3 linked service which will be used for the unload operation when copying from the Amazon Redshift source.
	S3LinkedServiceName LinkedServiceReference `pulumi:"s3LinkedServiceName"`
}

// RedshiftUnloadSettingsInput is an input type that accepts RedshiftUnloadSettingsArgs and RedshiftUnloadSettingsOutput values.
// You can construct a concrete instance of `RedshiftUnloadSettingsInput` via:
//
//	RedshiftUnloadSettingsArgs{...}
type RedshiftUnloadSettingsInput interface {
	pulumi.Input

	ToRedshiftUnloadSettingsOutput() RedshiftUnloadSettingsOutput
	ToRedshiftUnloadSettingsOutputWithContext(context.Context) RedshiftUnloadSettingsOutput
}

// The Amazon S3 settings needed for the interim Amazon S3 when copying from Amazon Redshift with unload. With this, data from Amazon Redshift source will be unloaded into S3 first and then copied into the targeted sink from the interim S3.
type RedshiftUnloadSettingsArgs struct {
	// The bucket of the interim Amazon S3 which will be used to store the unloaded data from Amazon Redshift source. The bucket must be in the same region as the Amazon Redshift source. Type: string (or Expression with resultType string).
	BucketName pulumi.Input `pulumi:"bucketName"`
	// The name of the Amazon S3 linked service which will be used for the unload operation when copying from the Amazon Redshift source.
	S3LinkedServiceName LinkedServiceReferenceInput `pulumi:"s3LinkedServiceName"`
}

func (RedshiftUnloadSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedshiftUnloadSettings)(nil)).Elem()
}

func (i RedshiftUnloadSettingsArgs) ToRedshiftUnloadSettingsOutput() RedshiftUnloadSettingsOutput {
	return i.ToRedshiftUnloadSettingsOutputWithContext(context.Background())
}

func (i RedshiftUnloadSettingsArgs) ToRedshiftUnloadSettingsOutputWithContext(ctx context.Context) RedshiftUnloadSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedshiftUnloadSettingsOutput)
}

func (i RedshiftUnloadSettingsArgs) ToRedshiftUnloadSettingsPtrOutput() RedshiftUnloadSettingsPtrOutput {
	return i.ToRedshiftUnloadSettingsPtrOutputWithContext(context.Background())
}

func (i RedshiftUnloadSettingsArgs) ToRedshiftUnloadSettingsPtrOutputWithContext(ctx context.Context) RedshiftUnloadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedshiftUnloadSettingsOutput).ToRedshiftUnloadSettingsPtrOutputWithContext(ctx)
}

// RedshiftUnloadSettingsPtrInput is an input type that accepts RedshiftUnloadSettingsArgs, RedshiftUnloadSettingsPtr and RedshiftUnloadSettingsPtrOutput values.
// You can construct a concrete instance of `RedshiftUnloadSettingsPtrInput` via:
//
//	        RedshiftUnloadSettingsArgs{...}
//
//	or:
//
//	        nil
type RedshiftUnloadSettingsPtrInput interface {
	pulumi.Input

	ToRedshiftUnloadSettingsPtrOutput() RedshiftUnloadSettingsPtrOutput
	ToRedshiftUnloadSettingsPtrOutputWithContext(context.Context) RedshiftUnloadSettingsPtrOutput
}

type redshiftUnloadSettingsPtrType RedshiftUnloadSettingsArgs

func RedshiftUnloadSettingsPtr(v *RedshiftUnloadSettingsArgs) RedshiftUnloadSettingsPtrInput {
	return (*redshiftUnloadSettingsPtrType)(v)
}

func (*redshiftUnloadSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedshiftUnloadSettings)(nil)).Elem()
}

func (i *redshiftUnloadSettingsPtrType) ToRedshiftUnloadSettingsPtrOutput() RedshiftUnloadSettingsPtrOutput {
	return i.ToRedshiftUnloadSettingsPtrOutputWithContext(context.Background())
}

func (i *redshiftUnloadSettingsPtrType) ToRedshiftUnloadSettingsPtrOutputWithContext(ctx context.Context) RedshiftUnloadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedshiftUnloadSettingsPtrOutput)
}

// The Amazon S3 settings needed for the interim Amazon S3 when copying from Amazon Redshift with unload. With this, data from Amazon Redshift source will be unloaded into S3 first and then copied into the targeted sink from the interim S3.
type RedshiftUnloadSettingsOutput struct{ *pulumi.OutputState }

func (RedshiftUnloadSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedshiftUnloadSettings)(nil)).Elem()
}

func (o RedshiftUnloadSettingsOutput) ToRedshiftUnloadSettingsOutput() RedshiftUnloadSettingsOutput {
	return o
}

func (o RedshiftUnloadSettingsOutput) ToRedshiftUnloadSettingsOutputWithContext(ctx context.Context) RedshiftUnloadSettingsOutput {
	return o
}

func (o RedshiftUnloadSettingsOutput) ToRedshiftUnloadSettingsPtrOutput() RedshiftUnloadSettingsPtrOutput {
	return o.ToRedshiftUnloadSettingsPtrOutputWithContext(context.Background())
}

func (o RedshiftUnloadSettingsOutput) ToRedshiftUnloadSettingsPtrOutputWithContext(ctx context.Context) RedshiftUnloadSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedshiftUnloadSettings) *RedshiftUnloadSettings {
		return &v
	}).(RedshiftUnloadSettingsPtrOutput)
}

// The bucket of the interim Amazon S3 which will be used to store the unloaded data from Amazon Redshift source. The bucket must be in the same region as the Amazon Redshift source. Type: string (or Expression with resultType string).
func (o RedshiftUnloadSettingsOutput) BucketName() pulumi.AnyOutput {
	return o.ApplyT(func(v RedshiftUnloadSettings) interface{} { return v.BucketName }).(pulumi.AnyOutput)
}

// The name of the Amazon S3 linked service which will be used for the unload operation when copying from the Amazon Redshift source.
func (o RedshiftUnloadSettingsOutput) S3LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v RedshiftUnloadSettings) LinkedServiceReference { return v.S3LinkedServiceName }).(LinkedServiceReferenceOutput)
}

type RedshiftUnloadSettingsPtrOutput struct{ *pulumi.OutputState }

func (RedshiftUnloadSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedshiftUnloadSettings)(nil)).Elem()
}

func (o RedshiftUnloadSettingsPtrOutput) ToRedshiftUnloadSettingsPtrOutput() RedshiftUnloadSettingsPtrOutput {
	return o
}

func (o RedshiftUnloadSettingsPtrOutput) ToRedshiftUnloadSettingsPtrOutputWithContext(ctx context.Context) RedshiftUnloadSettingsPtrOutput {
	return o
}

func (o RedshiftUnloadSettingsPtrOutput) Elem() RedshiftUnloadSettingsOutput {
	return o.ApplyT(func(v *RedshiftUnloadSettings) RedshiftUnloadSettings {
		if v != nil {
			return *v
		}
		var ret RedshiftUnloadSettings
		return ret
	}).(RedshiftUnloadSettingsOutput)
}

// The bucket of the interim Amazon S3 which will be used to store the unloaded data from Amazon Redshift source. The bucket must be in the same region as the Amazon Redshift source. Type: string (or Expression with resultType string).
func (o RedshiftUnloadSettingsPtrOutput) BucketName() pulumi.AnyOutput {
	return o.ApplyT(func(v *RedshiftUnloadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.BucketName
	}).(pulumi.AnyOutput)
}

// The name of the Amazon S3 linked service which will be used for the unload operation when copying from the Amazon Redshift source.
func (o RedshiftUnloadSettingsPtrOutput) S3LinkedServiceName() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v *RedshiftUnloadSettings) *LinkedServiceReference {
		if v == nil {
			return nil
		}
		return &v.S3LinkedServiceName
	}).(LinkedServiceReferencePtrOutput)
}

// The Amazon S3 settings needed for the interim Amazon S3 when copying from Amazon Redshift with unload. With this, data from Amazon Redshift source will be unloaded into S3 first and then copied into the targeted sink from the interim S3.
type RedshiftUnloadSettingsResponse struct {
	// The bucket of the interim Amazon S3 which will be used to store the unloaded data from Amazon Redshift source. The bucket must be in the same region as the Amazon Redshift source. Type: string (or Expression with resultType string).
	BucketName interface{} `pulumi:"bucketName"`
	// The name of the Amazon S3 linked service which will be used for the unload operation when copying from the Amazon Redshift source.
	S3LinkedServiceName LinkedServiceReferenceResponse `pulumi:"s3LinkedServiceName"`
}

// The Amazon S3 settings needed for the interim Amazon S3 when copying from Amazon Redshift with unload. With this, data from Amazon Redshift source will be unloaded into S3 first and then copied into the targeted sink from the interim S3.
type RedshiftUnloadSettingsResponseOutput struct{ *pulumi.OutputState }

func (RedshiftUnloadSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedshiftUnloadSettingsResponse)(nil)).Elem()
}

func (o RedshiftUnloadSettingsResponseOutput) ToRedshiftUnloadSettingsResponseOutput() RedshiftUnloadSettingsResponseOutput {
	return o
}

func (o RedshiftUnloadSettingsResponseOutput) ToRedshiftUnloadSettingsResponseOutputWithContext(ctx context.Context) RedshiftUnloadSettingsResponseOutput {
	return o
}

// The bucket of the interim Amazon S3 which will be used to store the unloaded data from Amazon Redshift source. The bucket must be in the same region as the Amazon Redshift source. Type: string (or Expression with resultType string).
func (o RedshiftUnloadSettingsResponseOutput) BucketName() pulumi.AnyOutput {
	return o.ApplyT(func(v RedshiftUnloadSettingsResponse) interface{} { return v.BucketName }).(pulumi.AnyOutput)
}

// The name of the Amazon S3 linked service which will be used for the unload operation when copying from the Amazon Redshift source.
func (o RedshiftUnloadSettingsResponseOutput) S3LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v RedshiftUnloadSettingsResponse) LinkedServiceReferenceResponse { return v.S3LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

type RedshiftUnloadSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (RedshiftUnloadSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedshiftUnloadSettingsResponse)(nil)).Elem()
}

func (o RedshiftUnloadSettingsResponsePtrOutput) ToRedshiftUnloadSettingsResponsePtrOutput() RedshiftUnloadSettingsResponsePtrOutput {
	return o
}

func (o RedshiftUnloadSettingsResponsePtrOutput) ToRedshiftUnloadSettingsResponsePtrOutputWithContext(ctx context.Context) RedshiftUnloadSettingsResponsePtrOutput {
	return o
}

func (o RedshiftUnloadSettingsResponsePtrOutput) Elem() RedshiftUnloadSettingsResponseOutput {
	return o.ApplyT(func(v *RedshiftUnloadSettingsResponse) RedshiftUnloadSettingsResponse {
		if v != nil {
			return *v
		}
		var ret RedshiftUnloadSettingsResponse
		return ret
	}).(RedshiftUnloadSettingsResponseOutput)
}

// The bucket of the interim Amazon S3 which will be used to store the unloaded data from Amazon Redshift source. The bucket must be in the same region as the Amazon Redshift source. Type: string (or Expression with resultType string).
func (o RedshiftUnloadSettingsResponsePtrOutput) BucketName() pulumi.AnyOutput {
	return o.ApplyT(func(v *RedshiftUnloadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.BucketName
	}).(pulumi.AnyOutput)
}

// The name of the Amazon S3 linked service which will be used for the unload operation when copying from the Amazon Redshift source.
func (o RedshiftUnloadSettingsResponsePtrOutput) S3LinkedServiceName() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v *RedshiftUnloadSettingsResponse) *LinkedServiceReferenceResponse {
		if v == nil {
			return nil
		}
		return &v.S3LinkedServiceName
	}).(LinkedServiceReferenceResponsePtrOutput)
}

// A copy activity source for various relational databases.
type RelationalSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'RelationalSource'.
	Type string `pulumi:"type"`
}

// RelationalSourceInput is an input type that accepts RelationalSourceArgs and RelationalSourceOutput values.
// You can construct a concrete instance of `RelationalSourceInput` via:
//
//	RelationalSourceArgs{...}
type RelationalSourceInput interface {
	pulumi.Input

	ToRelationalSourceOutput() RelationalSourceOutput
	ToRelationalSourceOutputWithContext(context.Context) RelationalSourceOutput
}

// A copy activity source for various relational databases.
type RelationalSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'RelationalSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (RelationalSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationalSource)(nil)).Elem()
}

func (i RelationalSourceArgs) ToRelationalSourceOutput() RelationalSourceOutput {
	return i.ToRelationalSourceOutputWithContext(context.Background())
}

func (i RelationalSourceArgs) ToRelationalSourceOutputWithContext(ctx context.Context) RelationalSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelationalSourceOutput)
}

// A copy activity source for various relational databases.
type RelationalSourceOutput struct{ *pulumi.OutputState }

func (RelationalSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationalSource)(nil)).Elem()
}

func (o RelationalSourceOutput) ToRelationalSourceOutput() RelationalSourceOutput {
	return o
}

func (o RelationalSourceOutput) ToRelationalSourceOutputWithContext(ctx context.Context) RelationalSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o RelationalSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v RelationalSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o RelationalSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v RelationalSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o RelationalSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v RelationalSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Database query. Type: string (or Expression with resultType string).
func (o RelationalSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v RelationalSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o RelationalSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v RelationalSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o RelationalSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v RelationalSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'RelationalSource'.
func (o RelationalSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RelationalSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity source for various relational databases.
type RelationalSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'RelationalSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for various relational databases.
type RelationalSourceResponseOutput struct{ *pulumi.OutputState }

func (RelationalSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationalSourceResponse)(nil)).Elem()
}

func (o RelationalSourceResponseOutput) ToRelationalSourceResponseOutput() RelationalSourceResponseOutput {
	return o
}

func (o RelationalSourceResponseOutput) ToRelationalSourceResponseOutputWithContext(ctx context.Context) RelationalSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o RelationalSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v RelationalSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o RelationalSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v RelationalSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o RelationalSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v RelationalSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Database query. Type: string (or Expression with resultType string).
func (o RelationalSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v RelationalSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o RelationalSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v RelationalSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o RelationalSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v RelationalSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'RelationalSource'.
func (o RelationalSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RelationalSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The relational table dataset.
type RelationalTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The relational table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'RelationalTable'.
	Type string `pulumi:"type"`
}

// RelationalTableDatasetInput is an input type that accepts RelationalTableDatasetArgs and RelationalTableDatasetOutput values.
// You can construct a concrete instance of `RelationalTableDatasetInput` via:
//
//	RelationalTableDatasetArgs{...}
type RelationalTableDatasetInput interface {
	pulumi.Input

	ToRelationalTableDatasetOutput() RelationalTableDatasetOutput
	ToRelationalTableDatasetOutputWithContext(context.Context) RelationalTableDatasetOutput
}

// The relational table dataset.
type RelationalTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The relational table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'RelationalTable'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (RelationalTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationalTableDataset)(nil)).Elem()
}

func (i RelationalTableDatasetArgs) ToRelationalTableDatasetOutput() RelationalTableDatasetOutput {
	return i.ToRelationalTableDatasetOutputWithContext(context.Background())
}

func (i RelationalTableDatasetArgs) ToRelationalTableDatasetOutputWithContext(ctx context.Context) RelationalTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelationalTableDatasetOutput)
}

// The relational table dataset.
type RelationalTableDatasetOutput struct{ *pulumi.OutputState }

func (RelationalTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationalTableDataset)(nil)).Elem()
}

func (o RelationalTableDatasetOutput) ToRelationalTableDatasetOutput() RelationalTableDatasetOutput {
	return o
}

func (o RelationalTableDatasetOutput) ToRelationalTableDatasetOutputWithContext(ctx context.Context) RelationalTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o RelationalTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v RelationalTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o RelationalTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RelationalTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o RelationalTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v RelationalTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o RelationalTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v RelationalTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o RelationalTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v RelationalTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o RelationalTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v RelationalTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o RelationalTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v RelationalTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The relational table name. Type: string (or Expression with resultType string).
func (o RelationalTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v RelationalTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'RelationalTable'.
func (o RelationalTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RelationalTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The relational table dataset.
type RelationalTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The relational table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'RelationalTable'.
	Type string `pulumi:"type"`
}

// The relational table dataset.
type RelationalTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (RelationalTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationalTableDatasetResponse)(nil)).Elem()
}

func (o RelationalTableDatasetResponseOutput) ToRelationalTableDatasetResponseOutput() RelationalTableDatasetResponseOutput {
	return o
}

func (o RelationalTableDatasetResponseOutput) ToRelationalTableDatasetResponseOutputWithContext(ctx context.Context) RelationalTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o RelationalTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v RelationalTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o RelationalTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RelationalTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o RelationalTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v RelationalTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o RelationalTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v RelationalTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o RelationalTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v RelationalTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o RelationalTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v RelationalTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o RelationalTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v RelationalTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The relational table name. Type: string (or Expression with resultType string).
func (o RelationalTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v RelationalTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'RelationalTable'.
func (o RelationalTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RelationalTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A remote private endpoint connection
type RemotePrivateEndpointConnectionResponse struct {
	// PrivateEndpoint of a remote private endpoint connection
	PrivateEndpoint *ArmIdWrapperResponse `pulumi:"privateEndpoint"`
	// The state of a private link connection
	PrivateLinkServiceConnectionState *PrivateLinkConnectionStateResponse `pulumi:"privateLinkServiceConnectionState"`
	ProvisioningState                 string                              `pulumi:"provisioningState"`
}

// A remote private endpoint connection
type RemotePrivateEndpointConnectionResponseOutput struct{ *pulumi.OutputState }

func (RemotePrivateEndpointConnectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemotePrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o RemotePrivateEndpointConnectionResponseOutput) ToRemotePrivateEndpointConnectionResponseOutput() RemotePrivateEndpointConnectionResponseOutput {
	return o
}

func (o RemotePrivateEndpointConnectionResponseOutput) ToRemotePrivateEndpointConnectionResponseOutputWithContext(ctx context.Context) RemotePrivateEndpointConnectionResponseOutput {
	return o
}

// PrivateEndpoint of a remote private endpoint connection
func (o RemotePrivateEndpointConnectionResponseOutput) PrivateEndpoint() ArmIdWrapperResponsePtrOutput {
	return o.ApplyT(func(v RemotePrivateEndpointConnectionResponse) *ArmIdWrapperResponse { return v.PrivateEndpoint }).(ArmIdWrapperResponsePtrOutput)
}

// The state of a private link connection
func (o RemotePrivateEndpointConnectionResponseOutput) PrivateLinkServiceConnectionState() PrivateLinkConnectionStateResponsePtrOutput {
	return o.ApplyT(func(v RemotePrivateEndpointConnectionResponse) *PrivateLinkConnectionStateResponse {
		return v.PrivateLinkServiceConnectionState
	}).(PrivateLinkConnectionStateResponsePtrOutput)
}

func (o RemotePrivateEndpointConnectionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v RemotePrivateEndpointConnectionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Trigger that schedules pipeline reruns for all fixed time interval windows from a requested start time to requested end time.
type RerunTumblingWindowTrigger struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// The parent trigger reference.
	ParentTrigger interface{} `pulumi:"parentTrigger"`
	// The end time for the time period for which restatement is initiated. Only UTC time is currently supported.
	RequestedEndTime string `pulumi:"requestedEndTime"`
	// The start time for the time period for which restatement is initiated. Only UTC time is currently supported.
	RequestedStartTime string `pulumi:"requestedStartTime"`
	// The max number of parallel time windows (ready for execution) for which a rerun is triggered.
	RerunConcurrency int `pulumi:"rerunConcurrency"`
	// Trigger type.
	// Expected value is 'RerunTumblingWindowTrigger'.
	Type string `pulumi:"type"`
}

// RerunTumblingWindowTriggerInput is an input type that accepts RerunTumblingWindowTriggerArgs and RerunTumblingWindowTriggerOutput values.
// You can construct a concrete instance of `RerunTumblingWindowTriggerInput` via:
//
//	RerunTumblingWindowTriggerArgs{...}
type RerunTumblingWindowTriggerInput interface {
	pulumi.Input

	ToRerunTumblingWindowTriggerOutput() RerunTumblingWindowTriggerOutput
	ToRerunTumblingWindowTriggerOutputWithContext(context.Context) RerunTumblingWindowTriggerOutput
}

// Trigger that schedules pipeline reruns for all fixed time interval windows from a requested start time to requested end time.
type RerunTumblingWindowTriggerArgs struct {
	// List of tags that can be used for describing the trigger.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Trigger description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The parent trigger reference.
	ParentTrigger pulumi.Input `pulumi:"parentTrigger"`
	// The end time for the time period for which restatement is initiated. Only UTC time is currently supported.
	RequestedEndTime pulumi.StringInput `pulumi:"requestedEndTime"`
	// The start time for the time period for which restatement is initiated. Only UTC time is currently supported.
	RequestedStartTime pulumi.StringInput `pulumi:"requestedStartTime"`
	// The max number of parallel time windows (ready for execution) for which a rerun is triggered.
	RerunConcurrency pulumi.IntInput `pulumi:"rerunConcurrency"`
	// Trigger type.
	// Expected value is 'RerunTumblingWindowTrigger'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (RerunTumblingWindowTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RerunTumblingWindowTrigger)(nil)).Elem()
}

func (i RerunTumblingWindowTriggerArgs) ToRerunTumblingWindowTriggerOutput() RerunTumblingWindowTriggerOutput {
	return i.ToRerunTumblingWindowTriggerOutputWithContext(context.Background())
}

func (i RerunTumblingWindowTriggerArgs) ToRerunTumblingWindowTriggerOutputWithContext(ctx context.Context) RerunTumblingWindowTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RerunTumblingWindowTriggerOutput)
}

// Trigger that schedules pipeline reruns for all fixed time interval windows from a requested start time to requested end time.
type RerunTumblingWindowTriggerOutput struct{ *pulumi.OutputState }

func (RerunTumblingWindowTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RerunTumblingWindowTrigger)(nil)).Elem()
}

func (o RerunTumblingWindowTriggerOutput) ToRerunTumblingWindowTriggerOutput() RerunTumblingWindowTriggerOutput {
	return o
}

func (o RerunTumblingWindowTriggerOutput) ToRerunTumblingWindowTriggerOutputWithContext(ctx context.Context) RerunTumblingWindowTriggerOutput {
	return o
}

// List of tags that can be used for describing the trigger.
func (o RerunTumblingWindowTriggerOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v RerunTumblingWindowTrigger) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Trigger description.
func (o RerunTumblingWindowTriggerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RerunTumblingWindowTrigger) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The parent trigger reference.
func (o RerunTumblingWindowTriggerOutput) ParentTrigger() pulumi.AnyOutput {
	return o.ApplyT(func(v RerunTumblingWindowTrigger) interface{} { return v.ParentTrigger }).(pulumi.AnyOutput)
}

// The end time for the time period for which restatement is initiated. Only UTC time is currently supported.
func (o RerunTumblingWindowTriggerOutput) RequestedEndTime() pulumi.StringOutput {
	return o.ApplyT(func(v RerunTumblingWindowTrigger) string { return v.RequestedEndTime }).(pulumi.StringOutput)
}

// The start time for the time period for which restatement is initiated. Only UTC time is currently supported.
func (o RerunTumblingWindowTriggerOutput) RequestedStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v RerunTumblingWindowTrigger) string { return v.RequestedStartTime }).(pulumi.StringOutput)
}

// The max number of parallel time windows (ready for execution) for which a rerun is triggered.
func (o RerunTumblingWindowTriggerOutput) RerunConcurrency() pulumi.IntOutput {
	return o.ApplyT(func(v RerunTumblingWindowTrigger) int { return v.RerunConcurrency }).(pulumi.IntOutput)
}

// Trigger type.
// Expected value is 'RerunTumblingWindowTrigger'.
func (o RerunTumblingWindowTriggerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RerunTumblingWindowTrigger) string { return v.Type }).(pulumi.StringOutput)
}

// Trigger that schedules pipeline reruns for all fixed time interval windows from a requested start time to requested end time.
type RerunTumblingWindowTriggerResponse struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// The parent trigger reference.
	ParentTrigger interface{} `pulumi:"parentTrigger"`
	// The end time for the time period for which restatement is initiated. Only UTC time is currently supported.
	RequestedEndTime string `pulumi:"requestedEndTime"`
	// The start time for the time period for which restatement is initiated. Only UTC time is currently supported.
	RequestedStartTime string `pulumi:"requestedStartTime"`
	// The max number of parallel time windows (ready for execution) for which a rerun is triggered.
	RerunConcurrency int `pulumi:"rerunConcurrency"`
	// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState string `pulumi:"runtimeState"`
	// Trigger type.
	// Expected value is 'RerunTumblingWindowTrigger'.
	Type string `pulumi:"type"`
}

// Trigger that schedules pipeline reruns for all fixed time interval windows from a requested start time to requested end time.
type RerunTumblingWindowTriggerResponseOutput struct{ *pulumi.OutputState }

func (RerunTumblingWindowTriggerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RerunTumblingWindowTriggerResponse)(nil)).Elem()
}

func (o RerunTumblingWindowTriggerResponseOutput) ToRerunTumblingWindowTriggerResponseOutput() RerunTumblingWindowTriggerResponseOutput {
	return o
}

func (o RerunTumblingWindowTriggerResponseOutput) ToRerunTumblingWindowTriggerResponseOutputWithContext(ctx context.Context) RerunTumblingWindowTriggerResponseOutput {
	return o
}

// List of tags that can be used for describing the trigger.
func (o RerunTumblingWindowTriggerResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v RerunTumblingWindowTriggerResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Trigger description.
func (o RerunTumblingWindowTriggerResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RerunTumblingWindowTriggerResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The parent trigger reference.
func (o RerunTumblingWindowTriggerResponseOutput) ParentTrigger() pulumi.AnyOutput {
	return o.ApplyT(func(v RerunTumblingWindowTriggerResponse) interface{} { return v.ParentTrigger }).(pulumi.AnyOutput)
}

// The end time for the time period for which restatement is initiated. Only UTC time is currently supported.
func (o RerunTumblingWindowTriggerResponseOutput) RequestedEndTime() pulumi.StringOutput {
	return o.ApplyT(func(v RerunTumblingWindowTriggerResponse) string { return v.RequestedEndTime }).(pulumi.StringOutput)
}

// The start time for the time period for which restatement is initiated. Only UTC time is currently supported.
func (o RerunTumblingWindowTriggerResponseOutput) RequestedStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v RerunTumblingWindowTriggerResponse) string { return v.RequestedStartTime }).(pulumi.StringOutput)
}

// The max number of parallel time windows (ready for execution) for which a rerun is triggered.
func (o RerunTumblingWindowTriggerResponseOutput) RerunConcurrency() pulumi.IntOutput {
	return o.ApplyT(func(v RerunTumblingWindowTriggerResponse) int { return v.RerunConcurrency }).(pulumi.IntOutput)
}

// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
func (o RerunTumblingWindowTriggerResponseOutput) RuntimeState() pulumi.StringOutput {
	return o.ApplyT(func(v RerunTumblingWindowTriggerResponse) string { return v.RuntimeState }).(pulumi.StringOutput)
}

// Trigger type.
// Expected value is 'RerunTumblingWindowTrigger'.
func (o RerunTumblingWindowTriggerResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RerunTumblingWindowTriggerResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Responsys linked service.
type ResponsysLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client ID associated with the Responsys application. Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The client secret associated with the Responsys application. Type: string (or Expression with resultType string).
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The endpoint of the Responsys server.
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Responsys'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// ResponsysLinkedServiceInput is an input type that accepts ResponsysLinkedServiceArgs and ResponsysLinkedServiceOutput values.
// You can construct a concrete instance of `ResponsysLinkedServiceInput` via:
//
//	ResponsysLinkedServiceArgs{...}
type ResponsysLinkedServiceInput interface {
	pulumi.Input

	ToResponsysLinkedServiceOutput() ResponsysLinkedServiceOutput
	ToResponsysLinkedServiceOutputWithContext(context.Context) ResponsysLinkedServiceOutput
}

// Responsys linked service.
type ResponsysLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The client ID associated with the Responsys application. Type: string (or Expression with resultType string).
	ClientId pulumi.Input `pulumi:"clientId"`
	// The client secret associated with the Responsys application. Type: string (or Expression with resultType string).
	ClientSecret pulumi.Input `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// The endpoint of the Responsys server.
	Endpoint pulumi.Input `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Responsys'.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
}

func (ResponsysLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsysLinkedService)(nil)).Elem()
}

func (i ResponsysLinkedServiceArgs) ToResponsysLinkedServiceOutput() ResponsysLinkedServiceOutput {
	return i.ToResponsysLinkedServiceOutputWithContext(context.Background())
}

func (i ResponsysLinkedServiceArgs) ToResponsysLinkedServiceOutputWithContext(ctx context.Context) ResponsysLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsysLinkedServiceOutput)
}

// Responsys linked service.
type ResponsysLinkedServiceOutput struct{ *pulumi.OutputState }

func (ResponsysLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsysLinkedService)(nil)).Elem()
}

func (o ResponsysLinkedServiceOutput) ToResponsysLinkedServiceOutput() ResponsysLinkedServiceOutput {
	return o
}

func (o ResponsysLinkedServiceOutput) ToResponsysLinkedServiceOutputWithContext(ctx context.Context) ResponsysLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o ResponsysLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ResponsysLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The client ID associated with the Responsys application. Type: string (or Expression with resultType string).
func (o ResponsysLinkedServiceOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysLinkedService) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret associated with the Responsys application. Type: string (or Expression with resultType string).
func (o ResponsysLinkedServiceOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysLinkedService) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o ResponsysLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v ResponsysLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o ResponsysLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResponsysLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o ResponsysLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResponsysLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The endpoint of the Responsys server.
func (o ResponsysLinkedServiceOutput) Endpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysLinkedService) interface{} { return v.Endpoint }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o ResponsysLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v ResponsysLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
// Expected value is 'Responsys'.
func (o ResponsysLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ResponsysLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o ResponsysLinkedServiceOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysLinkedService) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o ResponsysLinkedServiceOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysLinkedService) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o ResponsysLinkedServiceOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysLinkedService) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// Responsys linked service.
type ResponsysLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client ID associated with the Responsys application. Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The client secret associated with the Responsys application. Type: string (or Expression with resultType string).
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The endpoint of the Responsys server.
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Responsys'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Responsys linked service.
type ResponsysLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (ResponsysLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsysLinkedServiceResponse)(nil)).Elem()
}

func (o ResponsysLinkedServiceResponseOutput) ToResponsysLinkedServiceResponseOutput() ResponsysLinkedServiceResponseOutput {
	return o
}

func (o ResponsysLinkedServiceResponseOutput) ToResponsysLinkedServiceResponseOutputWithContext(ctx context.Context) ResponsysLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o ResponsysLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ResponsysLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The client ID associated with the Responsys application. Type: string (or Expression with resultType string).
func (o ResponsysLinkedServiceResponseOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysLinkedServiceResponse) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret associated with the Responsys application. Type: string (or Expression with resultType string).
func (o ResponsysLinkedServiceResponseOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysLinkedServiceResponse) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o ResponsysLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v ResponsysLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o ResponsysLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResponsysLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o ResponsysLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResponsysLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The endpoint of the Responsys server.
func (o ResponsysLinkedServiceResponseOutput) Endpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysLinkedServiceResponse) interface{} { return v.Endpoint }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o ResponsysLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ResponsysLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
// Expected value is 'Responsys'.
func (o ResponsysLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ResponsysLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o ResponsysLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysLinkedServiceResponse) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o ResponsysLinkedServiceResponseOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysLinkedServiceResponse) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o ResponsysLinkedServiceResponseOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysLinkedServiceResponse) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// Responsys dataset.
type ResponsysObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'ResponsysObject'.
	Type string `pulumi:"type"`
}

// ResponsysObjectDatasetInput is an input type that accepts ResponsysObjectDatasetArgs and ResponsysObjectDatasetOutput values.
// You can construct a concrete instance of `ResponsysObjectDatasetInput` via:
//
//	ResponsysObjectDatasetArgs{...}
type ResponsysObjectDatasetInput interface {
	pulumi.Input

	ToResponsysObjectDatasetOutput() ResponsysObjectDatasetOutput
	ToResponsysObjectDatasetOutputWithContext(context.Context) ResponsysObjectDatasetOutput
}

// Responsys dataset.
type ResponsysObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'ResponsysObject'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ResponsysObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsysObjectDataset)(nil)).Elem()
}

func (i ResponsysObjectDatasetArgs) ToResponsysObjectDatasetOutput() ResponsysObjectDatasetOutput {
	return i.ToResponsysObjectDatasetOutputWithContext(context.Background())
}

func (i ResponsysObjectDatasetArgs) ToResponsysObjectDatasetOutputWithContext(ctx context.Context) ResponsysObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsysObjectDatasetOutput)
}

// Responsys dataset.
type ResponsysObjectDatasetOutput struct{ *pulumi.OutputState }

func (ResponsysObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsysObjectDataset)(nil)).Elem()
}

func (o ResponsysObjectDatasetOutput) ToResponsysObjectDatasetOutput() ResponsysObjectDatasetOutput {
	return o
}

func (o ResponsysObjectDatasetOutput) ToResponsysObjectDatasetOutputWithContext(ctx context.Context) ResponsysObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ResponsysObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ResponsysObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o ResponsysObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResponsysObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o ResponsysObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v ResponsysObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o ResponsysObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v ResponsysObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o ResponsysObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v ResponsysObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o ResponsysObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ResponsysObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o ResponsysObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'ResponsysObject'.
func (o ResponsysObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ResponsysObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Responsys dataset.
type ResponsysObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'ResponsysObject'.
	Type string `pulumi:"type"`
}

// Responsys dataset.
type ResponsysObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (ResponsysObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsysObjectDatasetResponse)(nil)).Elem()
}

func (o ResponsysObjectDatasetResponseOutput) ToResponsysObjectDatasetResponseOutput() ResponsysObjectDatasetResponseOutput {
	return o
}

func (o ResponsysObjectDatasetResponseOutput) ToResponsysObjectDatasetResponseOutputWithContext(ctx context.Context) ResponsysObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ResponsysObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ResponsysObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o ResponsysObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResponsysObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o ResponsysObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v ResponsysObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o ResponsysObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v ResponsysObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o ResponsysObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ResponsysObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o ResponsysObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ResponsysObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o ResponsysObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'ResponsysObject'.
func (o ResponsysObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ResponsysObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Responsys source.
type ResponsysSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ResponsysSource'.
	Type string `pulumi:"type"`
}

// ResponsysSourceInput is an input type that accepts ResponsysSourceArgs and ResponsysSourceOutput values.
// You can construct a concrete instance of `ResponsysSourceInput` via:
//
//	ResponsysSourceArgs{...}
type ResponsysSourceInput interface {
	pulumi.Input

	ToResponsysSourceOutput() ResponsysSourceOutput
	ToResponsysSourceOutputWithContext(context.Context) ResponsysSourceOutput
}

// A copy activity Responsys source.
type ResponsysSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ResponsysSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ResponsysSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsysSource)(nil)).Elem()
}

func (i ResponsysSourceArgs) ToResponsysSourceOutput() ResponsysSourceOutput {
	return i.ToResponsysSourceOutputWithContext(context.Background())
}

func (i ResponsysSourceArgs) ToResponsysSourceOutputWithContext(ctx context.Context) ResponsysSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResponsysSourceOutput)
}

// A copy activity Responsys source.
type ResponsysSourceOutput struct{ *pulumi.OutputState }

func (ResponsysSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsysSource)(nil)).Elem()
}

func (o ResponsysSourceOutput) ToResponsysSourceOutput() ResponsysSourceOutput {
	return o
}

func (o ResponsysSourceOutput) ToResponsysSourceOutputWithContext(ctx context.Context) ResponsysSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o ResponsysSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o ResponsysSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o ResponsysSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o ResponsysSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ResponsysSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o ResponsysSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ResponsysSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'ResponsysSource'.
func (o ResponsysSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ResponsysSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Responsys source.
type ResponsysSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ResponsysSource'.
	Type string `pulumi:"type"`
}

// A copy activity Responsys source.
type ResponsysSourceResponseOutput struct{ *pulumi.OutputState }

func (ResponsysSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponsysSourceResponse)(nil)).Elem()
}

func (o ResponsysSourceResponseOutput) ToResponsysSourceResponseOutput() ResponsysSourceResponseOutput {
	return o
}

func (o ResponsysSourceResponseOutput) ToResponsysSourceResponseOutputWithContext(ctx context.Context) ResponsysSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o ResponsysSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o ResponsysSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o ResponsysSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o ResponsysSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ResponsysSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o ResponsysSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ResponsysSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v ResponsysSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'ResponsysSource'.
func (o ResponsysSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ResponsysSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A Rest service dataset.
type RestResourceDataset struct {
	// The additional HTTP headers in the request to the RESTful API.
	AdditionalHeaders map[string]interface{} `pulumi:"additionalHeaders"`
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The pagination rules to compose next page requests.
	PaginationRules map[string]interface{} `pulumi:"paginationRules"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The relative URL to the resource that the RESTful API provides. Type: string (or Expression with resultType string).
	RelativeUrl interface{} `pulumi:"relativeUrl"`
	// The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string).
	RequestBody interface{} `pulumi:"requestBody"`
	// The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string).
	RequestMethod interface{} `pulumi:"requestMethod"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'RestResource'.
	Type string `pulumi:"type"`
}

// RestResourceDatasetInput is an input type that accepts RestResourceDatasetArgs and RestResourceDatasetOutput values.
// You can construct a concrete instance of `RestResourceDatasetInput` via:
//
//	RestResourceDatasetArgs{...}
type RestResourceDatasetInput interface {
	pulumi.Input

	ToRestResourceDatasetOutput() RestResourceDatasetOutput
	ToRestResourceDatasetOutputWithContext(context.Context) RestResourceDatasetOutput
}

// A Rest service dataset.
type RestResourceDatasetArgs struct {
	// The additional HTTP headers in the request to the RESTful API.
	AdditionalHeaders pulumi.MapInput `pulumi:"additionalHeaders"`
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// The pagination rules to compose next page requests.
	PaginationRules pulumi.MapInput `pulumi:"paginationRules"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The relative URL to the resource that the RESTful API provides. Type: string (or Expression with resultType string).
	RelativeUrl pulumi.Input `pulumi:"relativeUrl"`
	// The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string).
	RequestBody pulumi.Input `pulumi:"requestBody"`
	// The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string).
	RequestMethod pulumi.Input `pulumi:"requestMethod"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'RestResource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (RestResourceDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RestResourceDataset)(nil)).Elem()
}

func (i RestResourceDatasetArgs) ToRestResourceDatasetOutput() RestResourceDatasetOutput {
	return i.ToRestResourceDatasetOutputWithContext(context.Background())
}

func (i RestResourceDatasetArgs) ToRestResourceDatasetOutputWithContext(ctx context.Context) RestResourceDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestResourceDatasetOutput)
}

// A Rest service dataset.
type RestResourceDatasetOutput struct{ *pulumi.OutputState }

func (RestResourceDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestResourceDataset)(nil)).Elem()
}

func (o RestResourceDatasetOutput) ToRestResourceDatasetOutput() RestResourceDatasetOutput {
	return o
}

func (o RestResourceDatasetOutput) ToRestResourceDatasetOutputWithContext(ctx context.Context) RestResourceDatasetOutput {
	return o
}

// The additional HTTP headers in the request to the RESTful API.
func (o RestResourceDatasetOutput) AdditionalHeaders() pulumi.MapOutput {
	return o.ApplyT(func(v RestResourceDataset) map[string]interface{} { return v.AdditionalHeaders }).(pulumi.MapOutput)
}

// List of tags that can be used for describing the Dataset.
func (o RestResourceDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v RestResourceDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o RestResourceDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RestResourceDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o RestResourceDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v RestResourceDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o RestResourceDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v RestResourceDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// The pagination rules to compose next page requests.
func (o RestResourceDatasetOutput) PaginationRules() pulumi.MapOutput {
	return o.ApplyT(func(v RestResourceDataset) map[string]interface{} { return v.PaginationRules }).(pulumi.MapOutput)
}

// Parameters for dataset.
func (o RestResourceDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v RestResourceDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The relative URL to the resource that the RESTful API provides. Type: string (or Expression with resultType string).
func (o RestResourceDatasetOutput) RelativeUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v RestResourceDataset) interface{} { return v.RelativeUrl }).(pulumi.AnyOutput)
}

// The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string).
func (o RestResourceDatasetOutput) RequestBody() pulumi.AnyOutput {
	return o.ApplyT(func(v RestResourceDataset) interface{} { return v.RequestBody }).(pulumi.AnyOutput)
}

// The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string).
func (o RestResourceDatasetOutput) RequestMethod() pulumi.AnyOutput {
	return o.ApplyT(func(v RestResourceDataset) interface{} { return v.RequestMethod }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o RestResourceDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v RestResourceDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o RestResourceDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v RestResourceDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'RestResource'.
func (o RestResourceDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RestResourceDataset) string { return v.Type }).(pulumi.StringOutput)
}

// A Rest service dataset.
type RestResourceDatasetResponse struct {
	// The additional HTTP headers in the request to the RESTful API.
	AdditionalHeaders map[string]interface{} `pulumi:"additionalHeaders"`
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The pagination rules to compose next page requests.
	PaginationRules map[string]interface{} `pulumi:"paginationRules"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The relative URL to the resource that the RESTful API provides. Type: string (or Expression with resultType string).
	RelativeUrl interface{} `pulumi:"relativeUrl"`
	// The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string).
	RequestBody interface{} `pulumi:"requestBody"`
	// The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string).
	RequestMethod interface{} `pulumi:"requestMethod"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'RestResource'.
	Type string `pulumi:"type"`
}

// A Rest service dataset.
type RestResourceDatasetResponseOutput struct{ *pulumi.OutputState }

func (RestResourceDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestResourceDatasetResponse)(nil)).Elem()
}

func (o RestResourceDatasetResponseOutput) ToRestResourceDatasetResponseOutput() RestResourceDatasetResponseOutput {
	return o
}

func (o RestResourceDatasetResponseOutput) ToRestResourceDatasetResponseOutputWithContext(ctx context.Context) RestResourceDatasetResponseOutput {
	return o
}

// The additional HTTP headers in the request to the RESTful API.
func (o RestResourceDatasetResponseOutput) AdditionalHeaders() pulumi.MapOutput {
	return o.ApplyT(func(v RestResourceDatasetResponse) map[string]interface{} { return v.AdditionalHeaders }).(pulumi.MapOutput)
}

// List of tags that can be used for describing the Dataset.
func (o RestResourceDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v RestResourceDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o RestResourceDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RestResourceDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o RestResourceDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v RestResourceDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o RestResourceDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v RestResourceDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// The pagination rules to compose next page requests.
func (o RestResourceDatasetResponseOutput) PaginationRules() pulumi.MapOutput {
	return o.ApplyT(func(v RestResourceDatasetResponse) map[string]interface{} { return v.PaginationRules }).(pulumi.MapOutput)
}

// Parameters for dataset.
func (o RestResourceDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v RestResourceDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The relative URL to the resource that the RESTful API provides. Type: string (or Expression with resultType string).
func (o RestResourceDatasetResponseOutput) RelativeUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v RestResourceDatasetResponse) interface{} { return v.RelativeUrl }).(pulumi.AnyOutput)
}

// The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string).
func (o RestResourceDatasetResponseOutput) RequestBody() pulumi.AnyOutput {
	return o.ApplyT(func(v RestResourceDatasetResponse) interface{} { return v.RequestBody }).(pulumi.AnyOutput)
}

// The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string).
func (o RestResourceDatasetResponseOutput) RequestMethod() pulumi.AnyOutput {
	return o.ApplyT(func(v RestResourceDatasetResponse) interface{} { return v.RequestMethod }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o RestResourceDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v RestResourceDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o RestResourceDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v RestResourceDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'RestResource'.
func (o RestResourceDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RestResourceDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Rest Service linked service.
type RestServiceLinkedService struct {
	// The resource you are requesting authorization to use. Type: string (or Expression with resultType string).
	AadResourceId interface{} `pulumi:"aadResourceId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The additional HTTP headers in the request to RESTful API used for authorization. Type: object (or Expression with resultType object).
	AuthHeaders interface{} `pulumi:"authHeaders"`
	// Type of authentication used to connect to the REST service.
	AuthenticationType string `pulumi:"authenticationType"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The client ID associated with your application. Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The client secret associated with your application.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Whether to validate server side SSL certificate when connecting to the endpoint.The default value is true. Type: boolean (or Expression with resultType boolean).
	EnableServerCertificateValidation interface{} `pulumi:"enableServerCertificateValidation"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password used in Basic authentication type.
	Password interface{} `pulumi:"password"`
	// The target service or resource to which the access will be requested. Type: string (or Expression with resultType string).
	Resource interface{} `pulumi:"resource"`
	// The scope of the access required. It describes what kind of access will be requested. Type: string (or Expression with resultType string).
	Scope interface{} `pulumi:"scope"`
	// The application's client ID used in AadServicePrincipal authentication type. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The application's key used in AadServicePrincipal authentication type.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The tenant information (domain name or tenant ID) used in AadServicePrincipal authentication type under which your application resides. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// The token endpoint of the authorization server to acquire access token. Type: string (or Expression with resultType string).
	TokenEndpoint interface{} `pulumi:"tokenEndpoint"`
	// Type of linked service.
	// Expected value is 'RestService'.
	Type string `pulumi:"type"`
	// The base URL of the REST service. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// The user name used in Basic authentication type. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// RestServiceLinkedServiceInput is an input type that accepts RestServiceLinkedServiceArgs and RestServiceLinkedServiceOutput values.
// You can construct a concrete instance of `RestServiceLinkedServiceInput` via:
//
//	RestServiceLinkedServiceArgs{...}
type RestServiceLinkedServiceInput interface {
	pulumi.Input

	ToRestServiceLinkedServiceOutput() RestServiceLinkedServiceOutput
	ToRestServiceLinkedServiceOutputWithContext(context.Context) RestServiceLinkedServiceOutput
}

// Rest Service linked service.
type RestServiceLinkedServiceArgs struct {
	// The resource you are requesting authorization to use. Type: string (or Expression with resultType string).
	AadResourceId pulumi.Input `pulumi:"aadResourceId"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The additional HTTP headers in the request to RESTful API used for authorization. Type: object (or Expression with resultType object).
	AuthHeaders pulumi.Input `pulumi:"authHeaders"`
	// Type of authentication used to connect to the REST service.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType pulumi.Input `pulumi:"azureCloudType"`
	// The client ID associated with your application. Type: string (or Expression with resultType string).
	ClientId pulumi.Input `pulumi:"clientId"`
	// The client secret associated with your application.
	ClientSecret pulumi.Input `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential CredentialReferencePtrInput `pulumi:"credential"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Whether to validate server side SSL certificate when connecting to the endpoint.The default value is true. Type: boolean (or Expression with resultType boolean).
	EnableServerCertificateValidation pulumi.Input `pulumi:"enableServerCertificateValidation"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password used in Basic authentication type.
	Password pulumi.Input `pulumi:"password"`
	// The target service or resource to which the access will be requested. Type: string (or Expression with resultType string).
	Resource pulumi.Input `pulumi:"resource"`
	// The scope of the access required. It describes what kind of access will be requested. Type: string (or Expression with resultType string).
	Scope pulumi.Input `pulumi:"scope"`
	// The application's client ID used in AadServicePrincipal authentication type. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The application's key used in AadServicePrincipal authentication type.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// The tenant information (domain name or tenant ID) used in AadServicePrincipal authentication type under which your application resides. Type: string (or Expression with resultType string).
	Tenant pulumi.Input `pulumi:"tenant"`
	// The token endpoint of the authorization server to acquire access token. Type: string (or Expression with resultType string).
	TokenEndpoint pulumi.Input `pulumi:"tokenEndpoint"`
	// Type of linked service.
	// Expected value is 'RestService'.
	Type pulumi.StringInput `pulumi:"type"`
	// The base URL of the REST service. Type: string (or Expression with resultType string).
	Url pulumi.Input `pulumi:"url"`
	// The user name used in Basic authentication type. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (RestServiceLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RestServiceLinkedService)(nil)).Elem()
}

func (i RestServiceLinkedServiceArgs) ToRestServiceLinkedServiceOutput() RestServiceLinkedServiceOutput {
	return i.ToRestServiceLinkedServiceOutputWithContext(context.Background())
}

func (i RestServiceLinkedServiceArgs) ToRestServiceLinkedServiceOutputWithContext(ctx context.Context) RestServiceLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestServiceLinkedServiceOutput)
}

// Rest Service linked service.
type RestServiceLinkedServiceOutput struct{ *pulumi.OutputState }

func (RestServiceLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestServiceLinkedService)(nil)).Elem()
}

func (o RestServiceLinkedServiceOutput) ToRestServiceLinkedServiceOutput() RestServiceLinkedServiceOutput {
	return o
}

func (o RestServiceLinkedServiceOutput) ToRestServiceLinkedServiceOutputWithContext(ctx context.Context) RestServiceLinkedServiceOutput {
	return o
}

// The resource you are requesting authorization to use. Type: string (or Expression with resultType string).
func (o RestServiceLinkedServiceOutput) AadResourceId() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedService) interface{} { return v.AadResourceId }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o RestServiceLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v RestServiceLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The additional HTTP headers in the request to RESTful API used for authorization. Type: object (or Expression with resultType object).
func (o RestServiceLinkedServiceOutput) AuthHeaders() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedService) interface{} { return v.AuthHeaders }).(pulumi.AnyOutput)
}

// Type of authentication used to connect to the REST service.
func (o RestServiceLinkedServiceOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v RestServiceLinkedService) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
func (o RestServiceLinkedServiceOutput) AzureCloudType() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedService) interface{} { return v.AzureCloudType }).(pulumi.AnyOutput)
}

// The client ID associated with your application. Type: string (or Expression with resultType string).
func (o RestServiceLinkedServiceOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedService) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret associated with your application.
func (o RestServiceLinkedServiceOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedService) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o RestServiceLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v RestServiceLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The credential reference containing authentication information.
func (o RestServiceLinkedServiceOutput) Credential() CredentialReferencePtrOutput {
	return o.ApplyT(func(v RestServiceLinkedService) *CredentialReference { return v.Credential }).(CredentialReferencePtrOutput)
}

// Linked service description.
func (o RestServiceLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RestServiceLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether to validate server side SSL certificate when connecting to the endpoint.The default value is true. Type: boolean (or Expression with resultType boolean).
func (o RestServiceLinkedServiceOutput) EnableServerCertificateValidation() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedService) interface{} { return v.EnableServerCertificateValidation }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o RestServiceLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RestServiceLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o RestServiceLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v RestServiceLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The password used in Basic authentication type.
func (o RestServiceLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The target service or resource to which the access will be requested. Type: string (or Expression with resultType string).
func (o RestServiceLinkedServiceOutput) Resource() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedService) interface{} { return v.Resource }).(pulumi.AnyOutput)
}

// The scope of the access required. It describes what kind of access will be requested. Type: string (or Expression with resultType string).
func (o RestServiceLinkedServiceOutput) Scope() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedService) interface{} { return v.Scope }).(pulumi.AnyOutput)
}

// The application's client ID used in AadServicePrincipal authentication type. Type: string (or Expression with resultType string).
func (o RestServiceLinkedServiceOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedService) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The application's key used in AadServicePrincipal authentication type.
func (o RestServiceLinkedServiceOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedService) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The tenant information (domain name or tenant ID) used in AadServicePrincipal authentication type under which your application resides. Type: string (or Expression with resultType string).
func (o RestServiceLinkedServiceOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedService) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// The token endpoint of the authorization server to acquire access token. Type: string (or Expression with resultType string).
func (o RestServiceLinkedServiceOutput) TokenEndpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedService) interface{} { return v.TokenEndpoint }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'RestService'.
func (o RestServiceLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RestServiceLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The base URL of the REST service. Type: string (or Expression with resultType string).
func (o RestServiceLinkedServiceOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedService) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// The user name used in Basic authentication type. Type: string (or Expression with resultType string).
func (o RestServiceLinkedServiceOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedService) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// Rest Service linked service.
type RestServiceLinkedServiceResponse struct {
	// The resource you are requesting authorization to use. Type: string (or Expression with resultType string).
	AadResourceId interface{} `pulumi:"aadResourceId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The additional HTTP headers in the request to RESTful API used for authorization. Type: object (or Expression with resultType object).
	AuthHeaders interface{} `pulumi:"authHeaders"`
	// Type of authentication used to connect to the REST service.
	AuthenticationType string `pulumi:"authenticationType"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The client ID associated with your application. Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The client secret associated with your application.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Whether to validate server side SSL certificate when connecting to the endpoint.The default value is true. Type: boolean (or Expression with resultType boolean).
	EnableServerCertificateValidation interface{} `pulumi:"enableServerCertificateValidation"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password used in Basic authentication type.
	Password interface{} `pulumi:"password"`
	// The target service or resource to which the access will be requested. Type: string (or Expression with resultType string).
	Resource interface{} `pulumi:"resource"`
	// The scope of the access required. It describes what kind of access will be requested. Type: string (or Expression with resultType string).
	Scope interface{} `pulumi:"scope"`
	// The application's client ID used in AadServicePrincipal authentication type. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The application's key used in AadServicePrincipal authentication type.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The tenant information (domain name or tenant ID) used in AadServicePrincipal authentication type under which your application resides. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// The token endpoint of the authorization server to acquire access token. Type: string (or Expression with resultType string).
	TokenEndpoint interface{} `pulumi:"tokenEndpoint"`
	// Type of linked service.
	// Expected value is 'RestService'.
	Type string `pulumi:"type"`
	// The base URL of the REST service. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// The user name used in Basic authentication type. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// Rest Service linked service.
type RestServiceLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (RestServiceLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestServiceLinkedServiceResponse)(nil)).Elem()
}

func (o RestServiceLinkedServiceResponseOutput) ToRestServiceLinkedServiceResponseOutput() RestServiceLinkedServiceResponseOutput {
	return o
}

func (o RestServiceLinkedServiceResponseOutput) ToRestServiceLinkedServiceResponseOutputWithContext(ctx context.Context) RestServiceLinkedServiceResponseOutput {
	return o
}

// The resource you are requesting authorization to use. Type: string (or Expression with resultType string).
func (o RestServiceLinkedServiceResponseOutput) AadResourceId() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedServiceResponse) interface{} { return v.AadResourceId }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o RestServiceLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v RestServiceLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The additional HTTP headers in the request to RESTful API used for authorization. Type: object (or Expression with resultType object).
func (o RestServiceLinkedServiceResponseOutput) AuthHeaders() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedServiceResponse) interface{} { return v.AuthHeaders }).(pulumi.AnyOutput)
}

// Type of authentication used to connect to the REST service.
func (o RestServiceLinkedServiceResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v RestServiceLinkedServiceResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
func (o RestServiceLinkedServiceResponseOutput) AzureCloudType() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedServiceResponse) interface{} { return v.AzureCloudType }).(pulumi.AnyOutput)
}

// The client ID associated with your application. Type: string (or Expression with resultType string).
func (o RestServiceLinkedServiceResponseOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedServiceResponse) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret associated with your application.
func (o RestServiceLinkedServiceResponseOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedServiceResponse) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o RestServiceLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v RestServiceLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The credential reference containing authentication information.
func (o RestServiceLinkedServiceResponseOutput) Credential() CredentialReferenceResponsePtrOutput {
	return o.ApplyT(func(v RestServiceLinkedServiceResponse) *CredentialReferenceResponse { return v.Credential }).(CredentialReferenceResponsePtrOutput)
}

// Linked service description.
func (o RestServiceLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RestServiceLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether to validate server side SSL certificate when connecting to the endpoint.The default value is true. Type: boolean (or Expression with resultType boolean).
func (o RestServiceLinkedServiceResponseOutput) EnableServerCertificateValidation() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedServiceResponse) interface{} { return v.EnableServerCertificateValidation }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o RestServiceLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RestServiceLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o RestServiceLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v RestServiceLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The password used in Basic authentication type.
func (o RestServiceLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The target service or resource to which the access will be requested. Type: string (or Expression with resultType string).
func (o RestServiceLinkedServiceResponseOutput) Resource() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedServiceResponse) interface{} { return v.Resource }).(pulumi.AnyOutput)
}

// The scope of the access required. It describes what kind of access will be requested. Type: string (or Expression with resultType string).
func (o RestServiceLinkedServiceResponseOutput) Scope() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedServiceResponse) interface{} { return v.Scope }).(pulumi.AnyOutput)
}

// The application's client ID used in AadServicePrincipal authentication type. Type: string (or Expression with resultType string).
func (o RestServiceLinkedServiceResponseOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedServiceResponse) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The application's key used in AadServicePrincipal authentication type.
func (o RestServiceLinkedServiceResponseOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedServiceResponse) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The tenant information (domain name or tenant ID) used in AadServicePrincipal authentication type under which your application resides. Type: string (or Expression with resultType string).
func (o RestServiceLinkedServiceResponseOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedServiceResponse) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// The token endpoint of the authorization server to acquire access token. Type: string (or Expression with resultType string).
func (o RestServiceLinkedServiceResponseOutput) TokenEndpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedServiceResponse) interface{} { return v.TokenEndpoint }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'RestService'.
func (o RestServiceLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RestServiceLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The base URL of the REST service. Type: string (or Expression with resultType string).
func (o RestServiceLinkedServiceResponseOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedServiceResponse) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// The user name used in Basic authentication type. Type: string (or Expression with resultType string).
func (o RestServiceLinkedServiceResponseOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v RestServiceLinkedServiceResponse) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// A copy activity Rest service Sink.
type RestSink struct {
	// The additional HTTP headers in the request to the RESTful API. Type: key value pairs (value should be string type).
	AdditionalHeaders interface{} `pulumi:"additionalHeaders"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Http Compression Type to Send data in compressed format with Optimal Compression Level, Default is None. And The Only Supported option is Gzip. Type: string (or Expression with resultType string).
	HttpCompressionType interface{} `pulumi:"httpCompressionType"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:01:40. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The time to await before sending next request, in milliseconds
	RequestInterval interface{} `pulumi:"requestInterval"`
	// The HTTP method used to call the RESTful API. The default is POST. Type: string (or Expression with resultType string).
	RequestMethod interface{} `pulumi:"requestMethod"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'RestSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// RestSinkInput is an input type that accepts RestSinkArgs and RestSinkOutput values.
// You can construct a concrete instance of `RestSinkInput` via:
//
//	RestSinkArgs{...}
type RestSinkInput interface {
	pulumi.Input

	ToRestSinkOutput() RestSinkOutput
	ToRestSinkOutputWithContext(context.Context) RestSinkOutput
}

// A copy activity Rest service Sink.
type RestSinkArgs struct {
	// The additional HTTP headers in the request to the RESTful API. Type: key value pairs (value should be string type).
	AdditionalHeaders pulumi.Input `pulumi:"additionalHeaders"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// Http Compression Type to Send data in compressed format with Optimal Compression Level, Default is None. And The Only Supported option is Gzip. Type: string (or Expression with resultType string).
	HttpCompressionType pulumi.Input `pulumi:"httpCompressionType"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:01:40. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout pulumi.Input `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// The time to await before sending next request, in milliseconds
	RequestInterval pulumi.Input `pulumi:"requestInterval"`
	// The HTTP method used to call the RESTful API. The default is POST. Type: string (or Expression with resultType string).
	RequestMethod pulumi.Input `pulumi:"requestMethod"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount pulumi.Input `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait pulumi.Input `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'RestSink'.
	Type pulumi.StringInput `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize pulumi.Input `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout pulumi.Input `pulumi:"writeBatchTimeout"`
}

func (RestSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RestSink)(nil)).Elem()
}

func (i RestSinkArgs) ToRestSinkOutput() RestSinkOutput {
	return i.ToRestSinkOutputWithContext(context.Background())
}

func (i RestSinkArgs) ToRestSinkOutputWithContext(ctx context.Context) RestSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestSinkOutput)
}

// A copy activity Rest service Sink.
type RestSinkOutput struct{ *pulumi.OutputState }

func (RestSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestSink)(nil)).Elem()
}

func (o RestSinkOutput) ToRestSinkOutput() RestSinkOutput {
	return o
}

func (o RestSinkOutput) ToRestSinkOutputWithContext(ctx context.Context) RestSinkOutput {
	return o
}

// The additional HTTP headers in the request to the RESTful API. Type: key value pairs (value should be string type).
func (o RestSinkOutput) AdditionalHeaders() pulumi.AnyOutput {
	return o.ApplyT(func(v RestSink) interface{} { return v.AdditionalHeaders }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o RestSinkOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v RestSink) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Http Compression Type to Send data in compressed format with Optimal Compression Level, Default is None. And The Only Supported option is Gzip. Type: string (or Expression with resultType string).
func (o RestSinkOutput) HttpCompressionType() pulumi.AnyOutput {
	return o.ApplyT(func(v RestSink) interface{} { return v.HttpCompressionType }).(pulumi.AnyOutput)
}

// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:01:40. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o RestSinkOutput) HttpRequestTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v RestSink) interface{} { return v.HttpRequestTimeout }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o RestSinkOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v RestSink) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The time to await before sending next request, in milliseconds
func (o RestSinkOutput) RequestInterval() pulumi.AnyOutput {
	return o.ApplyT(func(v RestSink) interface{} { return v.RequestInterval }).(pulumi.AnyOutput)
}

// The HTTP method used to call the RESTful API. The default is POST. Type: string (or Expression with resultType string).
func (o RestSinkOutput) RequestMethod() pulumi.AnyOutput {
	return o.ApplyT(func(v RestSink) interface{} { return v.RequestMethod }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o RestSinkOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v RestSink) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o RestSinkOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v RestSink) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'RestSink'.
func (o RestSinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RestSink) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o RestSinkOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v RestSink) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o RestSinkOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v RestSink) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity Rest service Sink.
type RestSinkResponse struct {
	// The additional HTTP headers in the request to the RESTful API. Type: key value pairs (value should be string type).
	AdditionalHeaders interface{} `pulumi:"additionalHeaders"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Http Compression Type to Send data in compressed format with Optimal Compression Level, Default is None. And The Only Supported option is Gzip. Type: string (or Expression with resultType string).
	HttpCompressionType interface{} `pulumi:"httpCompressionType"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:01:40. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The time to await before sending next request, in milliseconds
	RequestInterval interface{} `pulumi:"requestInterval"`
	// The HTTP method used to call the RESTful API. The default is POST. Type: string (or Expression with resultType string).
	RequestMethod interface{} `pulumi:"requestMethod"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'RestSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Rest service Sink.
type RestSinkResponseOutput struct{ *pulumi.OutputState }

func (RestSinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestSinkResponse)(nil)).Elem()
}

func (o RestSinkResponseOutput) ToRestSinkResponseOutput() RestSinkResponseOutput {
	return o
}

func (o RestSinkResponseOutput) ToRestSinkResponseOutputWithContext(ctx context.Context) RestSinkResponseOutput {
	return o
}

// The additional HTTP headers in the request to the RESTful API. Type: key value pairs (value should be string type).
func (o RestSinkResponseOutput) AdditionalHeaders() pulumi.AnyOutput {
	return o.ApplyT(func(v RestSinkResponse) interface{} { return v.AdditionalHeaders }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o RestSinkResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v RestSinkResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Http Compression Type to Send data in compressed format with Optimal Compression Level, Default is None. And The Only Supported option is Gzip. Type: string (or Expression with resultType string).
func (o RestSinkResponseOutput) HttpCompressionType() pulumi.AnyOutput {
	return o.ApplyT(func(v RestSinkResponse) interface{} { return v.HttpCompressionType }).(pulumi.AnyOutput)
}

// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:01:40. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o RestSinkResponseOutput) HttpRequestTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v RestSinkResponse) interface{} { return v.HttpRequestTimeout }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o RestSinkResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v RestSinkResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The time to await before sending next request, in milliseconds
func (o RestSinkResponseOutput) RequestInterval() pulumi.AnyOutput {
	return o.ApplyT(func(v RestSinkResponse) interface{} { return v.RequestInterval }).(pulumi.AnyOutput)
}

// The HTTP method used to call the RESTful API. The default is POST. Type: string (or Expression with resultType string).
func (o RestSinkResponseOutput) RequestMethod() pulumi.AnyOutput {
	return o.ApplyT(func(v RestSinkResponse) interface{} { return v.RequestMethod }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o RestSinkResponseOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v RestSinkResponse) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o RestSinkResponseOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v RestSinkResponse) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'RestSink'.
func (o RestSinkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RestSinkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o RestSinkResponseOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v RestSinkResponse) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o RestSinkResponseOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v RestSinkResponse) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity Rest service source.
type RestSource struct {
	// Specifies the additional columns to be added to source data. Type: key value pairs (value should be string type).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string).
	AdditionalHeaders interface{} `pulumi:"additionalHeaders"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:01:40. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The pagination rules to compose next page requests. Type: string (or Expression with resultType string).
	PaginationRules interface{} `pulumi:"paginationRules"`
	// The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string).
	RequestBody interface{} `pulumi:"requestBody"`
	// The time to await before sending next page request.
	RequestInterval interface{} `pulumi:"requestInterval"`
	// The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string).
	RequestMethod interface{} `pulumi:"requestMethod"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'RestSource'.
	Type string `pulumi:"type"`
}

// RestSourceInput is an input type that accepts RestSourceArgs and RestSourceOutput values.
// You can construct a concrete instance of `RestSourceInput` via:
//
//	RestSourceArgs{...}
type RestSourceInput interface {
	pulumi.Input

	ToRestSourceOutput() RestSourceOutput
	ToRestSourceOutputWithContext(context.Context) RestSourceOutput
}

// A copy activity Rest service source.
type RestSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: key value pairs (value should be string type).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string).
	AdditionalHeaders pulumi.Input `pulumi:"additionalHeaders"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:01:40. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout pulumi.Input `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// The pagination rules to compose next page requests. Type: string (or Expression with resultType string).
	PaginationRules pulumi.Input `pulumi:"paginationRules"`
	// The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string).
	RequestBody pulumi.Input `pulumi:"requestBody"`
	// The time to await before sending next page request.
	RequestInterval pulumi.Input `pulumi:"requestInterval"`
	// The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string).
	RequestMethod pulumi.Input `pulumi:"requestMethod"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'RestSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (RestSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RestSource)(nil)).Elem()
}

func (i RestSourceArgs) ToRestSourceOutput() RestSourceOutput {
	return i.ToRestSourceOutputWithContext(context.Background())
}

func (i RestSourceArgs) ToRestSourceOutputWithContext(ctx context.Context) RestSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestSourceOutput)
}

// A copy activity Rest service source.
type RestSourceOutput struct{ *pulumi.OutputState }

func (RestSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestSource)(nil)).Elem()
}

func (o RestSourceOutput) ToRestSourceOutput() RestSourceOutput {
	return o
}

func (o RestSourceOutput) ToRestSourceOutputWithContext(ctx context.Context) RestSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: key value pairs (value should be string type).
func (o RestSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v RestSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string).
func (o RestSourceOutput) AdditionalHeaders() pulumi.AnyOutput {
	return o.ApplyT(func(v RestSource) interface{} { return v.AdditionalHeaders }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o RestSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v RestSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:01:40. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o RestSourceOutput) HttpRequestTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v RestSource) interface{} { return v.HttpRequestTimeout }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o RestSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v RestSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The pagination rules to compose next page requests. Type: string (or Expression with resultType string).
func (o RestSourceOutput) PaginationRules() pulumi.AnyOutput {
	return o.ApplyT(func(v RestSource) interface{} { return v.PaginationRules }).(pulumi.AnyOutput)
}

// The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string).
func (o RestSourceOutput) RequestBody() pulumi.AnyOutput {
	return o.ApplyT(func(v RestSource) interface{} { return v.RequestBody }).(pulumi.AnyOutput)
}

// The time to await before sending next page request.
func (o RestSourceOutput) RequestInterval() pulumi.AnyOutput {
	return o.ApplyT(func(v RestSource) interface{} { return v.RequestInterval }).(pulumi.AnyOutput)
}

// The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string).
func (o RestSourceOutput) RequestMethod() pulumi.AnyOutput {
	return o.ApplyT(func(v RestSource) interface{} { return v.RequestMethod }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o RestSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v RestSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o RestSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v RestSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'RestSource'.
func (o RestSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RestSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Rest service source.
type RestSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: key value pairs (value should be string type).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string).
	AdditionalHeaders interface{} `pulumi:"additionalHeaders"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:01:40. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The pagination rules to compose next page requests. Type: string (or Expression with resultType string).
	PaginationRules interface{} `pulumi:"paginationRules"`
	// The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string).
	RequestBody interface{} `pulumi:"requestBody"`
	// The time to await before sending next page request.
	RequestInterval interface{} `pulumi:"requestInterval"`
	// The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string).
	RequestMethod interface{} `pulumi:"requestMethod"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'RestSource'.
	Type string `pulumi:"type"`
}

// A copy activity Rest service source.
type RestSourceResponseOutput struct{ *pulumi.OutputState }

func (RestSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestSourceResponse)(nil)).Elem()
}

func (o RestSourceResponseOutput) ToRestSourceResponseOutput() RestSourceResponseOutput {
	return o
}

func (o RestSourceResponseOutput) ToRestSourceResponseOutputWithContext(ctx context.Context) RestSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: key value pairs (value should be string type).
func (o RestSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v RestSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string).
func (o RestSourceResponseOutput) AdditionalHeaders() pulumi.AnyOutput {
	return o.ApplyT(func(v RestSourceResponse) interface{} { return v.AdditionalHeaders }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o RestSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v RestSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:01:40. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o RestSourceResponseOutput) HttpRequestTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v RestSourceResponse) interface{} { return v.HttpRequestTimeout }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o RestSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v RestSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The pagination rules to compose next page requests. Type: string (or Expression with resultType string).
func (o RestSourceResponseOutput) PaginationRules() pulumi.AnyOutput {
	return o.ApplyT(func(v RestSourceResponse) interface{} { return v.PaginationRules }).(pulumi.AnyOutput)
}

// The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string).
func (o RestSourceResponseOutput) RequestBody() pulumi.AnyOutput {
	return o.ApplyT(func(v RestSourceResponse) interface{} { return v.RequestBody }).(pulumi.AnyOutput)
}

// The time to await before sending next page request.
func (o RestSourceResponseOutput) RequestInterval() pulumi.AnyOutput {
	return o.ApplyT(func(v RestSourceResponse) interface{} { return v.RequestInterval }).(pulumi.AnyOutput)
}

// The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string).
func (o RestSourceResponseOutput) RequestMethod() pulumi.AnyOutput {
	return o.ApplyT(func(v RestSourceResponse) interface{} { return v.RequestMethod }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o RestSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v RestSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o RestSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v RestSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'RestSource'.
func (o RestSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RestSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Execution policy for an activity.
type RetryPolicy struct {
	// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
	Count interface{} `pulumi:"count"`
	// Interval between retries in seconds. Default is 30.
	IntervalInSeconds *int `pulumi:"intervalInSeconds"`
}

// RetryPolicyInput is an input type that accepts RetryPolicyArgs and RetryPolicyOutput values.
// You can construct a concrete instance of `RetryPolicyInput` via:
//
//	RetryPolicyArgs{...}
type RetryPolicyInput interface {
	pulumi.Input

	ToRetryPolicyOutput() RetryPolicyOutput
	ToRetryPolicyOutputWithContext(context.Context) RetryPolicyOutput
}

// Execution policy for an activity.
type RetryPolicyArgs struct {
	// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
	Count pulumi.Input `pulumi:"count"`
	// Interval between retries in seconds. Default is 30.
	IntervalInSeconds pulumi.IntPtrInput `pulumi:"intervalInSeconds"`
}

func (RetryPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RetryPolicy)(nil)).Elem()
}

func (i RetryPolicyArgs) ToRetryPolicyOutput() RetryPolicyOutput {
	return i.ToRetryPolicyOutputWithContext(context.Background())
}

func (i RetryPolicyArgs) ToRetryPolicyOutputWithContext(ctx context.Context) RetryPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryPolicyOutput)
}

func (i RetryPolicyArgs) ToRetryPolicyPtrOutput() RetryPolicyPtrOutput {
	return i.ToRetryPolicyPtrOutputWithContext(context.Background())
}

func (i RetryPolicyArgs) ToRetryPolicyPtrOutputWithContext(ctx context.Context) RetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryPolicyOutput).ToRetryPolicyPtrOutputWithContext(ctx)
}

// RetryPolicyPtrInput is an input type that accepts RetryPolicyArgs, RetryPolicyPtr and RetryPolicyPtrOutput values.
// You can construct a concrete instance of `RetryPolicyPtrInput` via:
//
//	        RetryPolicyArgs{...}
//
//	or:
//
//	        nil
type RetryPolicyPtrInput interface {
	pulumi.Input

	ToRetryPolicyPtrOutput() RetryPolicyPtrOutput
	ToRetryPolicyPtrOutputWithContext(context.Context) RetryPolicyPtrOutput
}

type retryPolicyPtrType RetryPolicyArgs

func RetryPolicyPtr(v *RetryPolicyArgs) RetryPolicyPtrInput {
	return (*retryPolicyPtrType)(v)
}

func (*retryPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RetryPolicy)(nil)).Elem()
}

func (i *retryPolicyPtrType) ToRetryPolicyPtrOutput() RetryPolicyPtrOutput {
	return i.ToRetryPolicyPtrOutputWithContext(context.Background())
}

func (i *retryPolicyPtrType) ToRetryPolicyPtrOutputWithContext(ctx context.Context) RetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryPolicyPtrOutput)
}

// Execution policy for an activity.
type RetryPolicyOutput struct{ *pulumi.OutputState }

func (RetryPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RetryPolicy)(nil)).Elem()
}

func (o RetryPolicyOutput) ToRetryPolicyOutput() RetryPolicyOutput {
	return o
}

func (o RetryPolicyOutput) ToRetryPolicyOutputWithContext(ctx context.Context) RetryPolicyOutput {
	return o
}

func (o RetryPolicyOutput) ToRetryPolicyPtrOutput() RetryPolicyPtrOutput {
	return o.ToRetryPolicyPtrOutputWithContext(context.Background())
}

func (o RetryPolicyOutput) ToRetryPolicyPtrOutputWithContext(ctx context.Context) RetryPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RetryPolicy) *RetryPolicy {
		return &v
	}).(RetryPolicyPtrOutput)
}

// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
func (o RetryPolicyOutput) Count() pulumi.AnyOutput {
	return o.ApplyT(func(v RetryPolicy) interface{} { return v.Count }).(pulumi.AnyOutput)
}

// Interval between retries in seconds. Default is 30.
func (o RetryPolicyOutput) IntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RetryPolicy) *int { return v.IntervalInSeconds }).(pulumi.IntPtrOutput)
}

type RetryPolicyPtrOutput struct{ *pulumi.OutputState }

func (RetryPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RetryPolicy)(nil)).Elem()
}

func (o RetryPolicyPtrOutput) ToRetryPolicyPtrOutput() RetryPolicyPtrOutput {
	return o
}

func (o RetryPolicyPtrOutput) ToRetryPolicyPtrOutputWithContext(ctx context.Context) RetryPolicyPtrOutput {
	return o
}

func (o RetryPolicyPtrOutput) Elem() RetryPolicyOutput {
	return o.ApplyT(func(v *RetryPolicy) RetryPolicy {
		if v != nil {
			return *v
		}
		var ret RetryPolicy
		return ret
	}).(RetryPolicyOutput)
}

// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
func (o RetryPolicyPtrOutput) Count() pulumi.AnyOutput {
	return o.ApplyT(func(v *RetryPolicy) interface{} {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.AnyOutput)
}

// Interval between retries in seconds. Default is 30.
func (o RetryPolicyPtrOutput) IntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetryPolicy) *int {
		if v == nil {
			return nil
		}
		return v.IntervalInSeconds
	}).(pulumi.IntPtrOutput)
}

// Execution policy for an activity.
type RetryPolicyResponse struct {
	// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
	Count interface{} `pulumi:"count"`
	// Interval between retries in seconds. Default is 30.
	IntervalInSeconds *int `pulumi:"intervalInSeconds"`
}

// Execution policy for an activity.
type RetryPolicyResponseOutput struct{ *pulumi.OutputState }

func (RetryPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RetryPolicyResponse)(nil)).Elem()
}

func (o RetryPolicyResponseOutput) ToRetryPolicyResponseOutput() RetryPolicyResponseOutput {
	return o
}

func (o RetryPolicyResponseOutput) ToRetryPolicyResponseOutputWithContext(ctx context.Context) RetryPolicyResponseOutput {
	return o
}

// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
func (o RetryPolicyResponseOutput) Count() pulumi.AnyOutput {
	return o.ApplyT(func(v RetryPolicyResponse) interface{} { return v.Count }).(pulumi.AnyOutput)
}

// Interval between retries in seconds. Default is 30.
func (o RetryPolicyResponseOutput) IntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RetryPolicyResponse) *int { return v.IntervalInSeconds }).(pulumi.IntPtrOutput)
}

type RetryPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (RetryPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RetryPolicyResponse)(nil)).Elem()
}

func (o RetryPolicyResponsePtrOutput) ToRetryPolicyResponsePtrOutput() RetryPolicyResponsePtrOutput {
	return o
}

func (o RetryPolicyResponsePtrOutput) ToRetryPolicyResponsePtrOutputWithContext(ctx context.Context) RetryPolicyResponsePtrOutput {
	return o
}

func (o RetryPolicyResponsePtrOutput) Elem() RetryPolicyResponseOutput {
	return o.ApplyT(func(v *RetryPolicyResponse) RetryPolicyResponse {
		if v != nil {
			return *v
		}
		var ret RetryPolicyResponse
		return ret
	}).(RetryPolicyResponseOutput)
}

// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
func (o RetryPolicyResponsePtrOutput) Count() pulumi.AnyOutput {
	return o.ApplyT(func(v *RetryPolicyResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.AnyOutput)
}

// Interval between retries in seconds. Default is 30.
func (o RetryPolicyResponsePtrOutput) IntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetryPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.IntervalInSeconds
	}).(pulumi.IntPtrOutput)
}

// SSIS access credential.
type SSISAccessCredential struct {
	// Domain for windows authentication. Type: string (or Expression with resultType string).
	Domain interface{} `pulumi:"domain"`
	// Password for windows authentication.
	Password interface{} `pulumi:"password"`
	// UseName for windows authentication. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// SSISAccessCredentialInput is an input type that accepts SSISAccessCredentialArgs and SSISAccessCredentialOutput values.
// You can construct a concrete instance of `SSISAccessCredentialInput` via:
//
//	SSISAccessCredentialArgs{...}
type SSISAccessCredentialInput interface {
	pulumi.Input

	ToSSISAccessCredentialOutput() SSISAccessCredentialOutput
	ToSSISAccessCredentialOutputWithContext(context.Context) SSISAccessCredentialOutput
}

// SSIS access credential.
type SSISAccessCredentialArgs struct {
	// Domain for windows authentication. Type: string (or Expression with resultType string).
	Domain pulumi.Input `pulumi:"domain"`
	// Password for windows authentication.
	Password pulumi.Input `pulumi:"password"`
	// UseName for windows authentication. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (SSISAccessCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SSISAccessCredential)(nil)).Elem()
}

func (i SSISAccessCredentialArgs) ToSSISAccessCredentialOutput() SSISAccessCredentialOutput {
	return i.ToSSISAccessCredentialOutputWithContext(context.Background())
}

func (i SSISAccessCredentialArgs) ToSSISAccessCredentialOutputWithContext(ctx context.Context) SSISAccessCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SSISAccessCredentialOutput)
}

func (i SSISAccessCredentialArgs) ToSSISAccessCredentialPtrOutput() SSISAccessCredentialPtrOutput {
	return i.ToSSISAccessCredentialPtrOutputWithContext(context.Background())
}

func (i SSISAccessCredentialArgs) ToSSISAccessCredentialPtrOutputWithContext(ctx context.Context) SSISAccessCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SSISAccessCredentialOutput).ToSSISAccessCredentialPtrOutputWithContext(ctx)
}

// SSISAccessCredentialPtrInput is an input type that accepts SSISAccessCredentialArgs, SSISAccessCredentialPtr and SSISAccessCredentialPtrOutput values.
// You can construct a concrete instance of `SSISAccessCredentialPtrInput` via:
//
//	        SSISAccessCredentialArgs{...}
//
//	or:
//
//	        nil
type SSISAccessCredentialPtrInput interface {
	pulumi.Input

	ToSSISAccessCredentialPtrOutput() SSISAccessCredentialPtrOutput
	ToSSISAccessCredentialPtrOutputWithContext(context.Context) SSISAccessCredentialPtrOutput
}

type ssisaccessCredentialPtrType SSISAccessCredentialArgs

func SSISAccessCredentialPtr(v *SSISAccessCredentialArgs) SSISAccessCredentialPtrInput {
	return (*ssisaccessCredentialPtrType)(v)
}

func (*ssisaccessCredentialPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SSISAccessCredential)(nil)).Elem()
}

func (i *ssisaccessCredentialPtrType) ToSSISAccessCredentialPtrOutput() SSISAccessCredentialPtrOutput {
	return i.ToSSISAccessCredentialPtrOutputWithContext(context.Background())
}

func (i *ssisaccessCredentialPtrType) ToSSISAccessCredentialPtrOutputWithContext(ctx context.Context) SSISAccessCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SSISAccessCredentialPtrOutput)
}

// SSIS access credential.
type SSISAccessCredentialOutput struct{ *pulumi.OutputState }

func (SSISAccessCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SSISAccessCredential)(nil)).Elem()
}

func (o SSISAccessCredentialOutput) ToSSISAccessCredentialOutput() SSISAccessCredentialOutput {
	return o
}

func (o SSISAccessCredentialOutput) ToSSISAccessCredentialOutputWithContext(ctx context.Context) SSISAccessCredentialOutput {
	return o
}

func (o SSISAccessCredentialOutput) ToSSISAccessCredentialPtrOutput() SSISAccessCredentialPtrOutput {
	return o.ToSSISAccessCredentialPtrOutputWithContext(context.Background())
}

func (o SSISAccessCredentialOutput) ToSSISAccessCredentialPtrOutputWithContext(ctx context.Context) SSISAccessCredentialPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SSISAccessCredential) *SSISAccessCredential {
		return &v
	}).(SSISAccessCredentialPtrOutput)
}

// Domain for windows authentication. Type: string (or Expression with resultType string).
func (o SSISAccessCredentialOutput) Domain() pulumi.AnyOutput {
	return o.ApplyT(func(v SSISAccessCredential) interface{} { return v.Domain }).(pulumi.AnyOutput)
}

// Password for windows authentication.
func (o SSISAccessCredentialOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SSISAccessCredential) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// UseName for windows authentication. Type: string (or Expression with resultType string).
func (o SSISAccessCredentialOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v SSISAccessCredential) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

type SSISAccessCredentialPtrOutput struct{ *pulumi.OutputState }

func (SSISAccessCredentialPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SSISAccessCredential)(nil)).Elem()
}

func (o SSISAccessCredentialPtrOutput) ToSSISAccessCredentialPtrOutput() SSISAccessCredentialPtrOutput {
	return o
}

func (o SSISAccessCredentialPtrOutput) ToSSISAccessCredentialPtrOutputWithContext(ctx context.Context) SSISAccessCredentialPtrOutput {
	return o
}

func (o SSISAccessCredentialPtrOutput) Elem() SSISAccessCredentialOutput {
	return o.ApplyT(func(v *SSISAccessCredential) SSISAccessCredential {
		if v != nil {
			return *v
		}
		var ret SSISAccessCredential
		return ret
	}).(SSISAccessCredentialOutput)
}

// Domain for windows authentication. Type: string (or Expression with resultType string).
func (o SSISAccessCredentialPtrOutput) Domain() pulumi.AnyOutput {
	return o.ApplyT(func(v *SSISAccessCredential) interface{} {
		if v == nil {
			return nil
		}
		return v.Domain
	}).(pulumi.AnyOutput)
}

// Password for windows authentication.
func (o SSISAccessCredentialPtrOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v *SSISAccessCredential) interface{} {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.AnyOutput)
}

// UseName for windows authentication. Type: string (or Expression with resultType string).
func (o SSISAccessCredentialPtrOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v *SSISAccessCredential) interface{} {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.AnyOutput)
}

// SSIS access credential.
type SSISAccessCredentialResponse struct {
	// Domain for windows authentication. Type: string (or Expression with resultType string).
	Domain interface{} `pulumi:"domain"`
	// Password for windows authentication.
	Password interface{} `pulumi:"password"`
	// UseName for windows authentication. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// SSIS access credential.
type SSISAccessCredentialResponseOutput struct{ *pulumi.OutputState }

func (SSISAccessCredentialResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SSISAccessCredentialResponse)(nil)).Elem()
}

func (o SSISAccessCredentialResponseOutput) ToSSISAccessCredentialResponseOutput() SSISAccessCredentialResponseOutput {
	return o
}

func (o SSISAccessCredentialResponseOutput) ToSSISAccessCredentialResponseOutputWithContext(ctx context.Context) SSISAccessCredentialResponseOutput {
	return o
}

// Domain for windows authentication. Type: string (or Expression with resultType string).
func (o SSISAccessCredentialResponseOutput) Domain() pulumi.AnyOutput {
	return o.ApplyT(func(v SSISAccessCredentialResponse) interface{} { return v.Domain }).(pulumi.AnyOutput)
}

// Password for windows authentication.
func (o SSISAccessCredentialResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SSISAccessCredentialResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// UseName for windows authentication. Type: string (or Expression with resultType string).
func (o SSISAccessCredentialResponseOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v SSISAccessCredentialResponse) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

type SSISAccessCredentialResponsePtrOutput struct{ *pulumi.OutputState }

func (SSISAccessCredentialResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SSISAccessCredentialResponse)(nil)).Elem()
}

func (o SSISAccessCredentialResponsePtrOutput) ToSSISAccessCredentialResponsePtrOutput() SSISAccessCredentialResponsePtrOutput {
	return o
}

func (o SSISAccessCredentialResponsePtrOutput) ToSSISAccessCredentialResponsePtrOutputWithContext(ctx context.Context) SSISAccessCredentialResponsePtrOutput {
	return o
}

func (o SSISAccessCredentialResponsePtrOutput) Elem() SSISAccessCredentialResponseOutput {
	return o.ApplyT(func(v *SSISAccessCredentialResponse) SSISAccessCredentialResponse {
		if v != nil {
			return *v
		}
		var ret SSISAccessCredentialResponse
		return ret
	}).(SSISAccessCredentialResponseOutput)
}

// Domain for windows authentication. Type: string (or Expression with resultType string).
func (o SSISAccessCredentialResponsePtrOutput) Domain() pulumi.AnyOutput {
	return o.ApplyT(func(v *SSISAccessCredentialResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Domain
	}).(pulumi.AnyOutput)
}

// Password for windows authentication.
func (o SSISAccessCredentialResponsePtrOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v *SSISAccessCredentialResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.AnyOutput)
}

// UseName for windows authentication. Type: string (or Expression with resultType string).
func (o SSISAccessCredentialResponsePtrOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v *SSISAccessCredentialResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.AnyOutput)
}

// SSIS embedded child package.
type SSISChildPackage struct {
	// Content for embedded child package. Type: string (or Expression with resultType string).
	PackageContent interface{} `pulumi:"packageContent"`
	// Last modified date for embedded child package.
	PackageLastModifiedDate *string `pulumi:"packageLastModifiedDate"`
	// Name for embedded child package.
	PackageName *string `pulumi:"packageName"`
	// Path for embedded child package. Type: string (or Expression with resultType string).
	PackagePath interface{} `pulumi:"packagePath"`
}

// SSISChildPackageInput is an input type that accepts SSISChildPackageArgs and SSISChildPackageOutput values.
// You can construct a concrete instance of `SSISChildPackageInput` via:
//
//	SSISChildPackageArgs{...}
type SSISChildPackageInput interface {
	pulumi.Input

	ToSSISChildPackageOutput() SSISChildPackageOutput
	ToSSISChildPackageOutputWithContext(context.Context) SSISChildPackageOutput
}

// SSIS embedded child package.
type SSISChildPackageArgs struct {
	// Content for embedded child package. Type: string (or Expression with resultType string).
	PackageContent pulumi.Input `pulumi:"packageContent"`
	// Last modified date for embedded child package.
	PackageLastModifiedDate pulumi.StringPtrInput `pulumi:"packageLastModifiedDate"`
	// Name for embedded child package.
	PackageName pulumi.StringPtrInput `pulumi:"packageName"`
	// Path for embedded child package. Type: string (or Expression with resultType string).
	PackagePath pulumi.Input `pulumi:"packagePath"`
}

func (SSISChildPackageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SSISChildPackage)(nil)).Elem()
}

func (i SSISChildPackageArgs) ToSSISChildPackageOutput() SSISChildPackageOutput {
	return i.ToSSISChildPackageOutputWithContext(context.Background())
}

func (i SSISChildPackageArgs) ToSSISChildPackageOutputWithContext(ctx context.Context) SSISChildPackageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SSISChildPackageOutput)
}

// SSISChildPackageArrayInput is an input type that accepts SSISChildPackageArray and SSISChildPackageArrayOutput values.
// You can construct a concrete instance of `SSISChildPackageArrayInput` via:
//
//	SSISChildPackageArray{ SSISChildPackageArgs{...} }
type SSISChildPackageArrayInput interface {
	pulumi.Input

	ToSSISChildPackageArrayOutput() SSISChildPackageArrayOutput
	ToSSISChildPackageArrayOutputWithContext(context.Context) SSISChildPackageArrayOutput
}

type SSISChildPackageArray []SSISChildPackageInput

func (SSISChildPackageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SSISChildPackage)(nil)).Elem()
}

func (i SSISChildPackageArray) ToSSISChildPackageArrayOutput() SSISChildPackageArrayOutput {
	return i.ToSSISChildPackageArrayOutputWithContext(context.Background())
}

func (i SSISChildPackageArray) ToSSISChildPackageArrayOutputWithContext(ctx context.Context) SSISChildPackageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SSISChildPackageArrayOutput)
}

// SSIS embedded child package.
type SSISChildPackageOutput struct{ *pulumi.OutputState }

func (SSISChildPackageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SSISChildPackage)(nil)).Elem()
}

func (o SSISChildPackageOutput) ToSSISChildPackageOutput() SSISChildPackageOutput {
	return o
}

func (o SSISChildPackageOutput) ToSSISChildPackageOutputWithContext(ctx context.Context) SSISChildPackageOutput {
	return o
}

// Content for embedded child package. Type: string (or Expression with resultType string).
func (o SSISChildPackageOutput) PackageContent() pulumi.AnyOutput {
	return o.ApplyT(func(v SSISChildPackage) interface{} { return v.PackageContent }).(pulumi.AnyOutput)
}

// Last modified date for embedded child package.
func (o SSISChildPackageOutput) PackageLastModifiedDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SSISChildPackage) *string { return v.PackageLastModifiedDate }).(pulumi.StringPtrOutput)
}

// Name for embedded child package.
func (o SSISChildPackageOutput) PackageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SSISChildPackage) *string { return v.PackageName }).(pulumi.StringPtrOutput)
}

// Path for embedded child package. Type: string (or Expression with resultType string).
func (o SSISChildPackageOutput) PackagePath() pulumi.AnyOutput {
	return o.ApplyT(func(v SSISChildPackage) interface{} { return v.PackagePath }).(pulumi.AnyOutput)
}

type SSISChildPackageArrayOutput struct{ *pulumi.OutputState }

func (SSISChildPackageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SSISChildPackage)(nil)).Elem()
}

func (o SSISChildPackageArrayOutput) ToSSISChildPackageArrayOutput() SSISChildPackageArrayOutput {
	return o
}

func (o SSISChildPackageArrayOutput) ToSSISChildPackageArrayOutputWithContext(ctx context.Context) SSISChildPackageArrayOutput {
	return o
}

func (o SSISChildPackageArrayOutput) Index(i pulumi.IntInput) SSISChildPackageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SSISChildPackage {
		return vs[0].([]SSISChildPackage)[vs[1].(int)]
	}).(SSISChildPackageOutput)
}

// SSIS embedded child package.
type SSISChildPackageResponse struct {
	// Content for embedded child package. Type: string (or Expression with resultType string).
	PackageContent interface{} `pulumi:"packageContent"`
	// Last modified date for embedded child package.
	PackageLastModifiedDate *string `pulumi:"packageLastModifiedDate"`
	// Name for embedded child package.
	PackageName *string `pulumi:"packageName"`
	// Path for embedded child package. Type: string (or Expression with resultType string).
	PackagePath interface{} `pulumi:"packagePath"`
}

// SSIS embedded child package.
type SSISChildPackageResponseOutput struct{ *pulumi.OutputState }

func (SSISChildPackageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SSISChildPackageResponse)(nil)).Elem()
}

func (o SSISChildPackageResponseOutput) ToSSISChildPackageResponseOutput() SSISChildPackageResponseOutput {
	return o
}

func (o SSISChildPackageResponseOutput) ToSSISChildPackageResponseOutputWithContext(ctx context.Context) SSISChildPackageResponseOutput {
	return o
}

// Content for embedded child package. Type: string (or Expression with resultType string).
func (o SSISChildPackageResponseOutput) PackageContent() pulumi.AnyOutput {
	return o.ApplyT(func(v SSISChildPackageResponse) interface{} { return v.PackageContent }).(pulumi.AnyOutput)
}

// Last modified date for embedded child package.
func (o SSISChildPackageResponseOutput) PackageLastModifiedDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SSISChildPackageResponse) *string { return v.PackageLastModifiedDate }).(pulumi.StringPtrOutput)
}

// Name for embedded child package.
func (o SSISChildPackageResponseOutput) PackageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SSISChildPackageResponse) *string { return v.PackageName }).(pulumi.StringPtrOutput)
}

// Path for embedded child package. Type: string (or Expression with resultType string).
func (o SSISChildPackageResponseOutput) PackagePath() pulumi.AnyOutput {
	return o.ApplyT(func(v SSISChildPackageResponse) interface{} { return v.PackagePath }).(pulumi.AnyOutput)
}

type SSISChildPackageResponseArrayOutput struct{ *pulumi.OutputState }

func (SSISChildPackageResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SSISChildPackageResponse)(nil)).Elem()
}

func (o SSISChildPackageResponseArrayOutput) ToSSISChildPackageResponseArrayOutput() SSISChildPackageResponseArrayOutput {
	return o
}

func (o SSISChildPackageResponseArrayOutput) ToSSISChildPackageResponseArrayOutputWithContext(ctx context.Context) SSISChildPackageResponseArrayOutput {
	return o
}

func (o SSISChildPackageResponseArrayOutput) Index(i pulumi.IntInput) SSISChildPackageResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SSISChildPackageResponse {
		return vs[0].([]SSISChildPackageResponse)[vs[1].(int)]
	}).(SSISChildPackageResponseOutput)
}

// SSIS package execution credential.
type SSISExecutionCredential struct {
	// Domain for windows authentication. Type: string (or Expression with resultType string).
	Domain interface{} `pulumi:"domain"`
	// Password for windows authentication.
	Password SecureString `pulumi:"password"`
	// UseName for windows authentication. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// SSISExecutionCredentialInput is an input type that accepts SSISExecutionCredentialArgs and SSISExecutionCredentialOutput values.
// You can construct a concrete instance of `SSISExecutionCredentialInput` via:
//
//	SSISExecutionCredentialArgs{...}
type SSISExecutionCredentialInput interface {
	pulumi.Input

	ToSSISExecutionCredentialOutput() SSISExecutionCredentialOutput
	ToSSISExecutionCredentialOutputWithContext(context.Context) SSISExecutionCredentialOutput
}

// SSIS package execution credential.
type SSISExecutionCredentialArgs struct {
	// Domain for windows authentication. Type: string (or Expression with resultType string).
	Domain pulumi.Input `pulumi:"domain"`
	// Password for windows authentication.
	Password SecureStringInput `pulumi:"password"`
	// UseName for windows authentication. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (SSISExecutionCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SSISExecutionCredential)(nil)).Elem()
}

func (i SSISExecutionCredentialArgs) ToSSISExecutionCredentialOutput() SSISExecutionCredentialOutput {
	return i.ToSSISExecutionCredentialOutputWithContext(context.Background())
}

func (i SSISExecutionCredentialArgs) ToSSISExecutionCredentialOutputWithContext(ctx context.Context) SSISExecutionCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SSISExecutionCredentialOutput)
}

func (i SSISExecutionCredentialArgs) ToSSISExecutionCredentialPtrOutput() SSISExecutionCredentialPtrOutput {
	return i.ToSSISExecutionCredentialPtrOutputWithContext(context.Background())
}

func (i SSISExecutionCredentialArgs) ToSSISExecutionCredentialPtrOutputWithContext(ctx context.Context) SSISExecutionCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SSISExecutionCredentialOutput).ToSSISExecutionCredentialPtrOutputWithContext(ctx)
}

// SSISExecutionCredentialPtrInput is an input type that accepts SSISExecutionCredentialArgs, SSISExecutionCredentialPtr and SSISExecutionCredentialPtrOutput values.
// You can construct a concrete instance of `SSISExecutionCredentialPtrInput` via:
//
//	        SSISExecutionCredentialArgs{...}
//
//	or:
//
//	        nil
type SSISExecutionCredentialPtrInput interface {
	pulumi.Input

	ToSSISExecutionCredentialPtrOutput() SSISExecutionCredentialPtrOutput
	ToSSISExecutionCredentialPtrOutputWithContext(context.Context) SSISExecutionCredentialPtrOutput
}

type ssisexecutionCredentialPtrType SSISExecutionCredentialArgs

func SSISExecutionCredentialPtr(v *SSISExecutionCredentialArgs) SSISExecutionCredentialPtrInput {
	return (*ssisexecutionCredentialPtrType)(v)
}

func (*ssisexecutionCredentialPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SSISExecutionCredential)(nil)).Elem()
}

func (i *ssisexecutionCredentialPtrType) ToSSISExecutionCredentialPtrOutput() SSISExecutionCredentialPtrOutput {
	return i.ToSSISExecutionCredentialPtrOutputWithContext(context.Background())
}

func (i *ssisexecutionCredentialPtrType) ToSSISExecutionCredentialPtrOutputWithContext(ctx context.Context) SSISExecutionCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SSISExecutionCredentialPtrOutput)
}

// SSIS package execution credential.
type SSISExecutionCredentialOutput struct{ *pulumi.OutputState }

func (SSISExecutionCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SSISExecutionCredential)(nil)).Elem()
}

func (o SSISExecutionCredentialOutput) ToSSISExecutionCredentialOutput() SSISExecutionCredentialOutput {
	return o
}

func (o SSISExecutionCredentialOutput) ToSSISExecutionCredentialOutputWithContext(ctx context.Context) SSISExecutionCredentialOutput {
	return o
}

func (o SSISExecutionCredentialOutput) ToSSISExecutionCredentialPtrOutput() SSISExecutionCredentialPtrOutput {
	return o.ToSSISExecutionCredentialPtrOutputWithContext(context.Background())
}

func (o SSISExecutionCredentialOutput) ToSSISExecutionCredentialPtrOutputWithContext(ctx context.Context) SSISExecutionCredentialPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SSISExecutionCredential) *SSISExecutionCredential {
		return &v
	}).(SSISExecutionCredentialPtrOutput)
}

// Domain for windows authentication. Type: string (or Expression with resultType string).
func (o SSISExecutionCredentialOutput) Domain() pulumi.AnyOutput {
	return o.ApplyT(func(v SSISExecutionCredential) interface{} { return v.Domain }).(pulumi.AnyOutput)
}

// Password for windows authentication.
func (o SSISExecutionCredentialOutput) Password() SecureStringOutput {
	return o.ApplyT(func(v SSISExecutionCredential) SecureString { return v.Password }).(SecureStringOutput)
}

// UseName for windows authentication. Type: string (or Expression with resultType string).
func (o SSISExecutionCredentialOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v SSISExecutionCredential) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

type SSISExecutionCredentialPtrOutput struct{ *pulumi.OutputState }

func (SSISExecutionCredentialPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SSISExecutionCredential)(nil)).Elem()
}

func (o SSISExecutionCredentialPtrOutput) ToSSISExecutionCredentialPtrOutput() SSISExecutionCredentialPtrOutput {
	return o
}

func (o SSISExecutionCredentialPtrOutput) ToSSISExecutionCredentialPtrOutputWithContext(ctx context.Context) SSISExecutionCredentialPtrOutput {
	return o
}

func (o SSISExecutionCredentialPtrOutput) Elem() SSISExecutionCredentialOutput {
	return o.ApplyT(func(v *SSISExecutionCredential) SSISExecutionCredential {
		if v != nil {
			return *v
		}
		var ret SSISExecutionCredential
		return ret
	}).(SSISExecutionCredentialOutput)
}

// Domain for windows authentication. Type: string (or Expression with resultType string).
func (o SSISExecutionCredentialPtrOutput) Domain() pulumi.AnyOutput {
	return o.ApplyT(func(v *SSISExecutionCredential) interface{} {
		if v == nil {
			return nil
		}
		return v.Domain
	}).(pulumi.AnyOutput)
}

// Password for windows authentication.
func (o SSISExecutionCredentialPtrOutput) Password() SecureStringPtrOutput {
	return o.ApplyT(func(v *SSISExecutionCredential) *SecureString {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(SecureStringPtrOutput)
}

// UseName for windows authentication. Type: string (or Expression with resultType string).
func (o SSISExecutionCredentialPtrOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v *SSISExecutionCredential) interface{} {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.AnyOutput)
}

// SSIS package execution credential.
type SSISExecutionCredentialResponse struct {
	// Domain for windows authentication. Type: string (or Expression with resultType string).
	Domain interface{} `pulumi:"domain"`
	// Password for windows authentication.
	Password SecureStringResponse `pulumi:"password"`
	// UseName for windows authentication. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// SSIS package execution credential.
type SSISExecutionCredentialResponseOutput struct{ *pulumi.OutputState }

func (SSISExecutionCredentialResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SSISExecutionCredentialResponse)(nil)).Elem()
}

func (o SSISExecutionCredentialResponseOutput) ToSSISExecutionCredentialResponseOutput() SSISExecutionCredentialResponseOutput {
	return o
}

func (o SSISExecutionCredentialResponseOutput) ToSSISExecutionCredentialResponseOutputWithContext(ctx context.Context) SSISExecutionCredentialResponseOutput {
	return o
}

// Domain for windows authentication. Type: string (or Expression with resultType string).
func (o SSISExecutionCredentialResponseOutput) Domain() pulumi.AnyOutput {
	return o.ApplyT(func(v SSISExecutionCredentialResponse) interface{} { return v.Domain }).(pulumi.AnyOutput)
}

// Password for windows authentication.
func (o SSISExecutionCredentialResponseOutput) Password() SecureStringResponseOutput {
	return o.ApplyT(func(v SSISExecutionCredentialResponse) SecureStringResponse { return v.Password }).(SecureStringResponseOutput)
}

// UseName for windows authentication. Type: string (or Expression with resultType string).
func (o SSISExecutionCredentialResponseOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v SSISExecutionCredentialResponse) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

type SSISExecutionCredentialResponsePtrOutput struct{ *pulumi.OutputState }

func (SSISExecutionCredentialResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SSISExecutionCredentialResponse)(nil)).Elem()
}

func (o SSISExecutionCredentialResponsePtrOutput) ToSSISExecutionCredentialResponsePtrOutput() SSISExecutionCredentialResponsePtrOutput {
	return o
}

func (o SSISExecutionCredentialResponsePtrOutput) ToSSISExecutionCredentialResponsePtrOutputWithContext(ctx context.Context) SSISExecutionCredentialResponsePtrOutput {
	return o
}

func (o SSISExecutionCredentialResponsePtrOutput) Elem() SSISExecutionCredentialResponseOutput {
	return o.ApplyT(func(v *SSISExecutionCredentialResponse) SSISExecutionCredentialResponse {
		if v != nil {
			return *v
		}
		var ret SSISExecutionCredentialResponse
		return ret
	}).(SSISExecutionCredentialResponseOutput)
}

// Domain for windows authentication. Type: string (or Expression with resultType string).
func (o SSISExecutionCredentialResponsePtrOutput) Domain() pulumi.AnyOutput {
	return o.ApplyT(func(v *SSISExecutionCredentialResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Domain
	}).(pulumi.AnyOutput)
}

// Password for windows authentication.
func (o SSISExecutionCredentialResponsePtrOutput) Password() SecureStringResponsePtrOutput {
	return o.ApplyT(func(v *SSISExecutionCredentialResponse) *SecureStringResponse {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(SecureStringResponsePtrOutput)
}

// UseName for windows authentication. Type: string (or Expression with resultType string).
func (o SSISExecutionCredentialResponsePtrOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v *SSISExecutionCredentialResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.AnyOutput)
}

// SSIS execution parameter.
type SSISExecutionParameter struct {
	// SSIS package execution parameter value. Type: string (or Expression with resultType string).
	Value interface{} `pulumi:"value"`
}

// SSISExecutionParameterInput is an input type that accepts SSISExecutionParameterArgs and SSISExecutionParameterOutput values.
// You can construct a concrete instance of `SSISExecutionParameterInput` via:
//
//	SSISExecutionParameterArgs{...}
type SSISExecutionParameterInput interface {
	pulumi.Input

	ToSSISExecutionParameterOutput() SSISExecutionParameterOutput
	ToSSISExecutionParameterOutputWithContext(context.Context) SSISExecutionParameterOutput
}

// SSIS execution parameter.
type SSISExecutionParameterArgs struct {
	// SSIS package execution parameter value. Type: string (or Expression with resultType string).
	Value pulumi.Input `pulumi:"value"`
}

func (SSISExecutionParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SSISExecutionParameter)(nil)).Elem()
}

func (i SSISExecutionParameterArgs) ToSSISExecutionParameterOutput() SSISExecutionParameterOutput {
	return i.ToSSISExecutionParameterOutputWithContext(context.Background())
}

func (i SSISExecutionParameterArgs) ToSSISExecutionParameterOutputWithContext(ctx context.Context) SSISExecutionParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SSISExecutionParameterOutput)
}

// SSISExecutionParameterMapInput is an input type that accepts SSISExecutionParameterMap and SSISExecutionParameterMapOutput values.
// You can construct a concrete instance of `SSISExecutionParameterMapInput` via:
//
//	SSISExecutionParameterMap{ "key": SSISExecutionParameterArgs{...} }
type SSISExecutionParameterMapInput interface {
	pulumi.Input

	ToSSISExecutionParameterMapOutput() SSISExecutionParameterMapOutput
	ToSSISExecutionParameterMapOutputWithContext(context.Context) SSISExecutionParameterMapOutput
}

type SSISExecutionParameterMap map[string]SSISExecutionParameterInput

func (SSISExecutionParameterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SSISExecutionParameter)(nil)).Elem()
}

func (i SSISExecutionParameterMap) ToSSISExecutionParameterMapOutput() SSISExecutionParameterMapOutput {
	return i.ToSSISExecutionParameterMapOutputWithContext(context.Background())
}

func (i SSISExecutionParameterMap) ToSSISExecutionParameterMapOutputWithContext(ctx context.Context) SSISExecutionParameterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SSISExecutionParameterMapOutput)
}

// SSIS execution parameter.
type SSISExecutionParameterOutput struct{ *pulumi.OutputState }

func (SSISExecutionParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SSISExecutionParameter)(nil)).Elem()
}

func (o SSISExecutionParameterOutput) ToSSISExecutionParameterOutput() SSISExecutionParameterOutput {
	return o
}

func (o SSISExecutionParameterOutput) ToSSISExecutionParameterOutputWithContext(ctx context.Context) SSISExecutionParameterOutput {
	return o
}

// SSIS package execution parameter value. Type: string (or Expression with resultType string).
func (o SSISExecutionParameterOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v SSISExecutionParameter) interface{} { return v.Value }).(pulumi.AnyOutput)
}

type SSISExecutionParameterMapOutput struct{ *pulumi.OutputState }

func (SSISExecutionParameterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SSISExecutionParameter)(nil)).Elem()
}

func (o SSISExecutionParameterMapOutput) ToSSISExecutionParameterMapOutput() SSISExecutionParameterMapOutput {
	return o
}

func (o SSISExecutionParameterMapOutput) ToSSISExecutionParameterMapOutputWithContext(ctx context.Context) SSISExecutionParameterMapOutput {
	return o
}

func (o SSISExecutionParameterMapOutput) MapIndex(k pulumi.StringInput) SSISExecutionParameterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SSISExecutionParameter {
		return vs[0].(map[string]SSISExecutionParameter)[vs[1].(string)]
	}).(SSISExecutionParameterOutput)
}

// SSIS execution parameter.
type SSISExecutionParameterResponse struct {
	// SSIS package execution parameter value. Type: string (or Expression with resultType string).
	Value interface{} `pulumi:"value"`
}

// SSIS execution parameter.
type SSISExecutionParameterResponseOutput struct{ *pulumi.OutputState }

func (SSISExecutionParameterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SSISExecutionParameterResponse)(nil)).Elem()
}

func (o SSISExecutionParameterResponseOutput) ToSSISExecutionParameterResponseOutput() SSISExecutionParameterResponseOutput {
	return o
}

func (o SSISExecutionParameterResponseOutput) ToSSISExecutionParameterResponseOutputWithContext(ctx context.Context) SSISExecutionParameterResponseOutput {
	return o
}

// SSIS package execution parameter value. Type: string (or Expression with resultType string).
func (o SSISExecutionParameterResponseOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v SSISExecutionParameterResponse) interface{} { return v.Value }).(pulumi.AnyOutput)
}

type SSISExecutionParameterResponseMapOutput struct{ *pulumi.OutputState }

func (SSISExecutionParameterResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SSISExecutionParameterResponse)(nil)).Elem()
}

func (o SSISExecutionParameterResponseMapOutput) ToSSISExecutionParameterResponseMapOutput() SSISExecutionParameterResponseMapOutput {
	return o
}

func (o SSISExecutionParameterResponseMapOutput) ToSSISExecutionParameterResponseMapOutputWithContext(ctx context.Context) SSISExecutionParameterResponseMapOutput {
	return o
}

func (o SSISExecutionParameterResponseMapOutput) MapIndex(k pulumi.StringInput) SSISExecutionParameterResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SSISExecutionParameterResponse {
		return vs[0].(map[string]SSISExecutionParameterResponse)[vs[1].(string)]
	}).(SSISExecutionParameterResponseOutput)
}

// SSIS package execution log location
type SSISLogLocation struct {
	// The package execution log access credential.
	AccessCredential *SSISAccessCredential `pulumi:"accessCredential"`
	// The SSIS package execution log path. Type: string (or Expression with resultType string).
	LogPath interface{} `pulumi:"logPath"`
	// Specifies the interval to refresh log. The default interval is 5 minutes. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	LogRefreshInterval interface{} `pulumi:"logRefreshInterval"`
	// The type of SSIS log location.
	Type string `pulumi:"type"`
}

// SSISLogLocationInput is an input type that accepts SSISLogLocationArgs and SSISLogLocationOutput values.
// You can construct a concrete instance of `SSISLogLocationInput` via:
//
//	SSISLogLocationArgs{...}
type SSISLogLocationInput interface {
	pulumi.Input

	ToSSISLogLocationOutput() SSISLogLocationOutput
	ToSSISLogLocationOutputWithContext(context.Context) SSISLogLocationOutput
}

// SSIS package execution log location
type SSISLogLocationArgs struct {
	// The package execution log access credential.
	AccessCredential SSISAccessCredentialPtrInput `pulumi:"accessCredential"`
	// The SSIS package execution log path. Type: string (or Expression with resultType string).
	LogPath pulumi.Input `pulumi:"logPath"`
	// Specifies the interval to refresh log. The default interval is 5 minutes. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	LogRefreshInterval pulumi.Input `pulumi:"logRefreshInterval"`
	// The type of SSIS log location.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SSISLogLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SSISLogLocation)(nil)).Elem()
}

func (i SSISLogLocationArgs) ToSSISLogLocationOutput() SSISLogLocationOutput {
	return i.ToSSISLogLocationOutputWithContext(context.Background())
}

func (i SSISLogLocationArgs) ToSSISLogLocationOutputWithContext(ctx context.Context) SSISLogLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SSISLogLocationOutput)
}

func (i SSISLogLocationArgs) ToSSISLogLocationPtrOutput() SSISLogLocationPtrOutput {
	return i.ToSSISLogLocationPtrOutputWithContext(context.Background())
}

func (i SSISLogLocationArgs) ToSSISLogLocationPtrOutputWithContext(ctx context.Context) SSISLogLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SSISLogLocationOutput).ToSSISLogLocationPtrOutputWithContext(ctx)
}

// SSISLogLocationPtrInput is an input type that accepts SSISLogLocationArgs, SSISLogLocationPtr and SSISLogLocationPtrOutput values.
// You can construct a concrete instance of `SSISLogLocationPtrInput` via:
//
//	        SSISLogLocationArgs{...}
//
//	or:
//
//	        nil
type SSISLogLocationPtrInput interface {
	pulumi.Input

	ToSSISLogLocationPtrOutput() SSISLogLocationPtrOutput
	ToSSISLogLocationPtrOutputWithContext(context.Context) SSISLogLocationPtrOutput
}

type ssislogLocationPtrType SSISLogLocationArgs

func SSISLogLocationPtr(v *SSISLogLocationArgs) SSISLogLocationPtrInput {
	return (*ssislogLocationPtrType)(v)
}

func (*ssislogLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SSISLogLocation)(nil)).Elem()
}

func (i *ssislogLocationPtrType) ToSSISLogLocationPtrOutput() SSISLogLocationPtrOutput {
	return i.ToSSISLogLocationPtrOutputWithContext(context.Background())
}

func (i *ssislogLocationPtrType) ToSSISLogLocationPtrOutputWithContext(ctx context.Context) SSISLogLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SSISLogLocationPtrOutput)
}

// SSIS package execution log location
type SSISLogLocationOutput struct{ *pulumi.OutputState }

func (SSISLogLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SSISLogLocation)(nil)).Elem()
}

func (o SSISLogLocationOutput) ToSSISLogLocationOutput() SSISLogLocationOutput {
	return o
}

func (o SSISLogLocationOutput) ToSSISLogLocationOutputWithContext(ctx context.Context) SSISLogLocationOutput {
	return o
}

func (o SSISLogLocationOutput) ToSSISLogLocationPtrOutput() SSISLogLocationPtrOutput {
	return o.ToSSISLogLocationPtrOutputWithContext(context.Background())
}

func (o SSISLogLocationOutput) ToSSISLogLocationPtrOutputWithContext(ctx context.Context) SSISLogLocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SSISLogLocation) *SSISLogLocation {
		return &v
	}).(SSISLogLocationPtrOutput)
}

// The package execution log access credential.
func (o SSISLogLocationOutput) AccessCredential() SSISAccessCredentialPtrOutput {
	return o.ApplyT(func(v SSISLogLocation) *SSISAccessCredential { return v.AccessCredential }).(SSISAccessCredentialPtrOutput)
}

// The SSIS package execution log path. Type: string (or Expression with resultType string).
func (o SSISLogLocationOutput) LogPath() pulumi.AnyOutput {
	return o.ApplyT(func(v SSISLogLocation) interface{} { return v.LogPath }).(pulumi.AnyOutput)
}

// Specifies the interval to refresh log. The default interval is 5 minutes. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SSISLogLocationOutput) LogRefreshInterval() pulumi.AnyOutput {
	return o.ApplyT(func(v SSISLogLocation) interface{} { return v.LogRefreshInterval }).(pulumi.AnyOutput)
}

// The type of SSIS log location.
func (o SSISLogLocationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SSISLogLocation) string { return v.Type }).(pulumi.StringOutput)
}

type SSISLogLocationPtrOutput struct{ *pulumi.OutputState }

func (SSISLogLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SSISLogLocation)(nil)).Elem()
}

func (o SSISLogLocationPtrOutput) ToSSISLogLocationPtrOutput() SSISLogLocationPtrOutput {
	return o
}

func (o SSISLogLocationPtrOutput) ToSSISLogLocationPtrOutputWithContext(ctx context.Context) SSISLogLocationPtrOutput {
	return o
}

func (o SSISLogLocationPtrOutput) Elem() SSISLogLocationOutput {
	return o.ApplyT(func(v *SSISLogLocation) SSISLogLocation {
		if v != nil {
			return *v
		}
		var ret SSISLogLocation
		return ret
	}).(SSISLogLocationOutput)
}

// The package execution log access credential.
func (o SSISLogLocationPtrOutput) AccessCredential() SSISAccessCredentialPtrOutput {
	return o.ApplyT(func(v *SSISLogLocation) *SSISAccessCredential {
		if v == nil {
			return nil
		}
		return v.AccessCredential
	}).(SSISAccessCredentialPtrOutput)
}

// The SSIS package execution log path. Type: string (or Expression with resultType string).
func (o SSISLogLocationPtrOutput) LogPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *SSISLogLocation) interface{} {
		if v == nil {
			return nil
		}
		return v.LogPath
	}).(pulumi.AnyOutput)
}

// Specifies the interval to refresh log. The default interval is 5 minutes. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SSISLogLocationPtrOutput) LogRefreshInterval() pulumi.AnyOutput {
	return o.ApplyT(func(v *SSISLogLocation) interface{} {
		if v == nil {
			return nil
		}
		return v.LogRefreshInterval
	}).(pulumi.AnyOutput)
}

// The type of SSIS log location.
func (o SSISLogLocationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SSISLogLocation) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// SSIS package execution log location
type SSISLogLocationResponse struct {
	// The package execution log access credential.
	AccessCredential *SSISAccessCredentialResponse `pulumi:"accessCredential"`
	// The SSIS package execution log path. Type: string (or Expression with resultType string).
	LogPath interface{} `pulumi:"logPath"`
	// Specifies the interval to refresh log. The default interval is 5 minutes. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	LogRefreshInterval interface{} `pulumi:"logRefreshInterval"`
	// The type of SSIS log location.
	Type string `pulumi:"type"`
}

// SSIS package execution log location
type SSISLogLocationResponseOutput struct{ *pulumi.OutputState }

func (SSISLogLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SSISLogLocationResponse)(nil)).Elem()
}

func (o SSISLogLocationResponseOutput) ToSSISLogLocationResponseOutput() SSISLogLocationResponseOutput {
	return o
}

func (o SSISLogLocationResponseOutput) ToSSISLogLocationResponseOutputWithContext(ctx context.Context) SSISLogLocationResponseOutput {
	return o
}

// The package execution log access credential.
func (o SSISLogLocationResponseOutput) AccessCredential() SSISAccessCredentialResponsePtrOutput {
	return o.ApplyT(func(v SSISLogLocationResponse) *SSISAccessCredentialResponse { return v.AccessCredential }).(SSISAccessCredentialResponsePtrOutput)
}

// The SSIS package execution log path. Type: string (or Expression with resultType string).
func (o SSISLogLocationResponseOutput) LogPath() pulumi.AnyOutput {
	return o.ApplyT(func(v SSISLogLocationResponse) interface{} { return v.LogPath }).(pulumi.AnyOutput)
}

// Specifies the interval to refresh log. The default interval is 5 minutes. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SSISLogLocationResponseOutput) LogRefreshInterval() pulumi.AnyOutput {
	return o.ApplyT(func(v SSISLogLocationResponse) interface{} { return v.LogRefreshInterval }).(pulumi.AnyOutput)
}

// The type of SSIS log location.
func (o SSISLogLocationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SSISLogLocationResponse) string { return v.Type }).(pulumi.StringOutput)
}

type SSISLogLocationResponsePtrOutput struct{ *pulumi.OutputState }

func (SSISLogLocationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SSISLogLocationResponse)(nil)).Elem()
}

func (o SSISLogLocationResponsePtrOutput) ToSSISLogLocationResponsePtrOutput() SSISLogLocationResponsePtrOutput {
	return o
}

func (o SSISLogLocationResponsePtrOutput) ToSSISLogLocationResponsePtrOutputWithContext(ctx context.Context) SSISLogLocationResponsePtrOutput {
	return o
}

func (o SSISLogLocationResponsePtrOutput) Elem() SSISLogLocationResponseOutput {
	return o.ApplyT(func(v *SSISLogLocationResponse) SSISLogLocationResponse {
		if v != nil {
			return *v
		}
		var ret SSISLogLocationResponse
		return ret
	}).(SSISLogLocationResponseOutput)
}

// The package execution log access credential.
func (o SSISLogLocationResponsePtrOutput) AccessCredential() SSISAccessCredentialResponsePtrOutput {
	return o.ApplyT(func(v *SSISLogLocationResponse) *SSISAccessCredentialResponse {
		if v == nil {
			return nil
		}
		return v.AccessCredential
	}).(SSISAccessCredentialResponsePtrOutput)
}

// The SSIS package execution log path. Type: string (or Expression with resultType string).
func (o SSISLogLocationResponsePtrOutput) LogPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *SSISLogLocationResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.LogPath
	}).(pulumi.AnyOutput)
}

// Specifies the interval to refresh log. The default interval is 5 minutes. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SSISLogLocationResponsePtrOutput) LogRefreshInterval() pulumi.AnyOutput {
	return o.ApplyT(func(v *SSISLogLocationResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.LogRefreshInterval
	}).(pulumi.AnyOutput)
}

// The type of SSIS log location.
func (o SSISLogLocationResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SSISLogLocationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// SSIS package location.
type SSISPackageLocation struct {
	// The package access credential.
	AccessCredential *SSISAccessCredential `pulumi:"accessCredential"`
	// The embedded child package list.
	ChildPackages []SSISChildPackage `pulumi:"childPackages"`
	// The configuration file access credential.
	ConfigurationAccessCredential *SSISAccessCredential `pulumi:"configurationAccessCredential"`
	// The configuration file of the package execution. Type: string (or Expression with resultType string).
	ConfigurationPath interface{} `pulumi:"configurationPath"`
	// The embedded package content. Type: string (or Expression with resultType string).
	PackageContent interface{} `pulumi:"packageContent"`
	// The embedded package last modified date.
	PackageLastModifiedDate *string `pulumi:"packageLastModifiedDate"`
	// The package name.
	PackageName *string `pulumi:"packageName"`
	// Password of the package.
	PackagePassword interface{} `pulumi:"packagePassword"`
	// The SSIS package path. Type: string (or Expression with resultType string).
	PackagePath interface{} `pulumi:"packagePath"`
	// The type of SSIS package location.
	Type *string `pulumi:"type"`
}

// SSISPackageLocationInput is an input type that accepts SSISPackageLocationArgs and SSISPackageLocationOutput values.
// You can construct a concrete instance of `SSISPackageLocationInput` via:
//
//	SSISPackageLocationArgs{...}
type SSISPackageLocationInput interface {
	pulumi.Input

	ToSSISPackageLocationOutput() SSISPackageLocationOutput
	ToSSISPackageLocationOutputWithContext(context.Context) SSISPackageLocationOutput
}

// SSIS package location.
type SSISPackageLocationArgs struct {
	// The package access credential.
	AccessCredential SSISAccessCredentialPtrInput `pulumi:"accessCredential"`
	// The embedded child package list.
	ChildPackages SSISChildPackageArrayInput `pulumi:"childPackages"`
	// The configuration file access credential.
	ConfigurationAccessCredential SSISAccessCredentialPtrInput `pulumi:"configurationAccessCredential"`
	// The configuration file of the package execution. Type: string (or Expression with resultType string).
	ConfigurationPath pulumi.Input `pulumi:"configurationPath"`
	// The embedded package content. Type: string (or Expression with resultType string).
	PackageContent pulumi.Input `pulumi:"packageContent"`
	// The embedded package last modified date.
	PackageLastModifiedDate pulumi.StringPtrInput `pulumi:"packageLastModifiedDate"`
	// The package name.
	PackageName pulumi.StringPtrInput `pulumi:"packageName"`
	// Password of the package.
	PackagePassword pulumi.Input `pulumi:"packagePassword"`
	// The SSIS package path. Type: string (or Expression with resultType string).
	PackagePath pulumi.Input `pulumi:"packagePath"`
	// The type of SSIS package location.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (SSISPackageLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SSISPackageLocation)(nil)).Elem()
}

func (i SSISPackageLocationArgs) ToSSISPackageLocationOutput() SSISPackageLocationOutput {
	return i.ToSSISPackageLocationOutputWithContext(context.Background())
}

func (i SSISPackageLocationArgs) ToSSISPackageLocationOutputWithContext(ctx context.Context) SSISPackageLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SSISPackageLocationOutput)
}

// SSIS package location.
type SSISPackageLocationOutput struct{ *pulumi.OutputState }

func (SSISPackageLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SSISPackageLocation)(nil)).Elem()
}

func (o SSISPackageLocationOutput) ToSSISPackageLocationOutput() SSISPackageLocationOutput {
	return o
}

func (o SSISPackageLocationOutput) ToSSISPackageLocationOutputWithContext(ctx context.Context) SSISPackageLocationOutput {
	return o
}

// The package access credential.
func (o SSISPackageLocationOutput) AccessCredential() SSISAccessCredentialPtrOutput {
	return o.ApplyT(func(v SSISPackageLocation) *SSISAccessCredential { return v.AccessCredential }).(SSISAccessCredentialPtrOutput)
}

// The embedded child package list.
func (o SSISPackageLocationOutput) ChildPackages() SSISChildPackageArrayOutput {
	return o.ApplyT(func(v SSISPackageLocation) []SSISChildPackage { return v.ChildPackages }).(SSISChildPackageArrayOutput)
}

// The configuration file access credential.
func (o SSISPackageLocationOutput) ConfigurationAccessCredential() SSISAccessCredentialPtrOutput {
	return o.ApplyT(func(v SSISPackageLocation) *SSISAccessCredential { return v.ConfigurationAccessCredential }).(SSISAccessCredentialPtrOutput)
}

// The configuration file of the package execution. Type: string (or Expression with resultType string).
func (o SSISPackageLocationOutput) ConfigurationPath() pulumi.AnyOutput {
	return o.ApplyT(func(v SSISPackageLocation) interface{} { return v.ConfigurationPath }).(pulumi.AnyOutput)
}

// The embedded package content. Type: string (or Expression with resultType string).
func (o SSISPackageLocationOutput) PackageContent() pulumi.AnyOutput {
	return o.ApplyT(func(v SSISPackageLocation) interface{} { return v.PackageContent }).(pulumi.AnyOutput)
}

// The embedded package last modified date.
func (o SSISPackageLocationOutput) PackageLastModifiedDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SSISPackageLocation) *string { return v.PackageLastModifiedDate }).(pulumi.StringPtrOutput)
}

// The package name.
func (o SSISPackageLocationOutput) PackageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SSISPackageLocation) *string { return v.PackageName }).(pulumi.StringPtrOutput)
}

// Password of the package.
func (o SSISPackageLocationOutput) PackagePassword() pulumi.AnyOutput {
	return o.ApplyT(func(v SSISPackageLocation) interface{} { return v.PackagePassword }).(pulumi.AnyOutput)
}

// The SSIS package path. Type: string (or Expression with resultType string).
func (o SSISPackageLocationOutput) PackagePath() pulumi.AnyOutput {
	return o.ApplyT(func(v SSISPackageLocation) interface{} { return v.PackagePath }).(pulumi.AnyOutput)
}

// The type of SSIS package location.
func (o SSISPackageLocationOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SSISPackageLocation) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// SSIS package location.
type SSISPackageLocationResponse struct {
	// The package access credential.
	AccessCredential *SSISAccessCredentialResponse `pulumi:"accessCredential"`
	// The embedded child package list.
	ChildPackages []SSISChildPackageResponse `pulumi:"childPackages"`
	// The configuration file access credential.
	ConfigurationAccessCredential *SSISAccessCredentialResponse `pulumi:"configurationAccessCredential"`
	// The configuration file of the package execution. Type: string (or Expression with resultType string).
	ConfigurationPath interface{} `pulumi:"configurationPath"`
	// The embedded package content. Type: string (or Expression with resultType string).
	PackageContent interface{} `pulumi:"packageContent"`
	// The embedded package last modified date.
	PackageLastModifiedDate *string `pulumi:"packageLastModifiedDate"`
	// The package name.
	PackageName *string `pulumi:"packageName"`
	// Password of the package.
	PackagePassword interface{} `pulumi:"packagePassword"`
	// The SSIS package path. Type: string (or Expression with resultType string).
	PackagePath interface{} `pulumi:"packagePath"`
	// The type of SSIS package location.
	Type *string `pulumi:"type"`
}

// SSIS package location.
type SSISPackageLocationResponseOutput struct{ *pulumi.OutputState }

func (SSISPackageLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SSISPackageLocationResponse)(nil)).Elem()
}

func (o SSISPackageLocationResponseOutput) ToSSISPackageLocationResponseOutput() SSISPackageLocationResponseOutput {
	return o
}

func (o SSISPackageLocationResponseOutput) ToSSISPackageLocationResponseOutputWithContext(ctx context.Context) SSISPackageLocationResponseOutput {
	return o
}

// The package access credential.
func (o SSISPackageLocationResponseOutput) AccessCredential() SSISAccessCredentialResponsePtrOutput {
	return o.ApplyT(func(v SSISPackageLocationResponse) *SSISAccessCredentialResponse { return v.AccessCredential }).(SSISAccessCredentialResponsePtrOutput)
}

// The embedded child package list.
func (o SSISPackageLocationResponseOutput) ChildPackages() SSISChildPackageResponseArrayOutput {
	return o.ApplyT(func(v SSISPackageLocationResponse) []SSISChildPackageResponse { return v.ChildPackages }).(SSISChildPackageResponseArrayOutput)
}

// The configuration file access credential.
func (o SSISPackageLocationResponseOutput) ConfigurationAccessCredential() SSISAccessCredentialResponsePtrOutput {
	return o.ApplyT(func(v SSISPackageLocationResponse) *SSISAccessCredentialResponse {
		return v.ConfigurationAccessCredential
	}).(SSISAccessCredentialResponsePtrOutput)
}

// The configuration file of the package execution. Type: string (or Expression with resultType string).
func (o SSISPackageLocationResponseOutput) ConfigurationPath() pulumi.AnyOutput {
	return o.ApplyT(func(v SSISPackageLocationResponse) interface{} { return v.ConfigurationPath }).(pulumi.AnyOutput)
}

// The embedded package content. Type: string (or Expression with resultType string).
func (o SSISPackageLocationResponseOutput) PackageContent() pulumi.AnyOutput {
	return o.ApplyT(func(v SSISPackageLocationResponse) interface{} { return v.PackageContent }).(pulumi.AnyOutput)
}

// The embedded package last modified date.
func (o SSISPackageLocationResponseOutput) PackageLastModifiedDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SSISPackageLocationResponse) *string { return v.PackageLastModifiedDate }).(pulumi.StringPtrOutput)
}

// The package name.
func (o SSISPackageLocationResponseOutput) PackageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SSISPackageLocationResponse) *string { return v.PackageName }).(pulumi.StringPtrOutput)
}

// Password of the package.
func (o SSISPackageLocationResponseOutput) PackagePassword() pulumi.AnyOutput {
	return o.ApplyT(func(v SSISPackageLocationResponse) interface{} { return v.PackagePassword }).(pulumi.AnyOutput)
}

// The SSIS package path. Type: string (or Expression with resultType string).
func (o SSISPackageLocationResponseOutput) PackagePath() pulumi.AnyOutput {
	return o.ApplyT(func(v SSISPackageLocationResponse) interface{} { return v.PackagePath }).(pulumi.AnyOutput)
}

// The type of SSIS package location.
func (o SSISPackageLocationResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SSISPackageLocationResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// SSIS property override.
type SSISPropertyOverride struct {
	// Whether SSIS package property override value is sensitive data. Value will be encrypted in SSISDB if it is true
	IsSensitive *bool `pulumi:"isSensitive"`
	// SSIS package property override value. Type: string (or Expression with resultType string).
	Value interface{} `pulumi:"value"`
}

// SSISPropertyOverrideInput is an input type that accepts SSISPropertyOverrideArgs and SSISPropertyOverrideOutput values.
// You can construct a concrete instance of `SSISPropertyOverrideInput` via:
//
//	SSISPropertyOverrideArgs{...}
type SSISPropertyOverrideInput interface {
	pulumi.Input

	ToSSISPropertyOverrideOutput() SSISPropertyOverrideOutput
	ToSSISPropertyOverrideOutputWithContext(context.Context) SSISPropertyOverrideOutput
}

// SSIS property override.
type SSISPropertyOverrideArgs struct {
	// Whether SSIS package property override value is sensitive data. Value will be encrypted in SSISDB if it is true
	IsSensitive pulumi.BoolPtrInput `pulumi:"isSensitive"`
	// SSIS package property override value. Type: string (or Expression with resultType string).
	Value pulumi.Input `pulumi:"value"`
}

func (SSISPropertyOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SSISPropertyOverride)(nil)).Elem()
}

func (i SSISPropertyOverrideArgs) ToSSISPropertyOverrideOutput() SSISPropertyOverrideOutput {
	return i.ToSSISPropertyOverrideOutputWithContext(context.Background())
}

func (i SSISPropertyOverrideArgs) ToSSISPropertyOverrideOutputWithContext(ctx context.Context) SSISPropertyOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SSISPropertyOverrideOutput)
}

// SSISPropertyOverrideMapInput is an input type that accepts SSISPropertyOverrideMap and SSISPropertyOverrideMapOutput values.
// You can construct a concrete instance of `SSISPropertyOverrideMapInput` via:
//
//	SSISPropertyOverrideMap{ "key": SSISPropertyOverrideArgs{...} }
type SSISPropertyOverrideMapInput interface {
	pulumi.Input

	ToSSISPropertyOverrideMapOutput() SSISPropertyOverrideMapOutput
	ToSSISPropertyOverrideMapOutputWithContext(context.Context) SSISPropertyOverrideMapOutput
}

type SSISPropertyOverrideMap map[string]SSISPropertyOverrideInput

func (SSISPropertyOverrideMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SSISPropertyOverride)(nil)).Elem()
}

func (i SSISPropertyOverrideMap) ToSSISPropertyOverrideMapOutput() SSISPropertyOverrideMapOutput {
	return i.ToSSISPropertyOverrideMapOutputWithContext(context.Background())
}

func (i SSISPropertyOverrideMap) ToSSISPropertyOverrideMapOutputWithContext(ctx context.Context) SSISPropertyOverrideMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SSISPropertyOverrideMapOutput)
}

// SSIS property override.
type SSISPropertyOverrideOutput struct{ *pulumi.OutputState }

func (SSISPropertyOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SSISPropertyOverride)(nil)).Elem()
}

func (o SSISPropertyOverrideOutput) ToSSISPropertyOverrideOutput() SSISPropertyOverrideOutput {
	return o
}

func (o SSISPropertyOverrideOutput) ToSSISPropertyOverrideOutputWithContext(ctx context.Context) SSISPropertyOverrideOutput {
	return o
}

// Whether SSIS package property override value is sensitive data. Value will be encrypted in SSISDB if it is true
func (o SSISPropertyOverrideOutput) IsSensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SSISPropertyOverride) *bool { return v.IsSensitive }).(pulumi.BoolPtrOutput)
}

// SSIS package property override value. Type: string (or Expression with resultType string).
func (o SSISPropertyOverrideOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v SSISPropertyOverride) interface{} { return v.Value }).(pulumi.AnyOutput)
}

type SSISPropertyOverrideMapOutput struct{ *pulumi.OutputState }

func (SSISPropertyOverrideMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SSISPropertyOverride)(nil)).Elem()
}

func (o SSISPropertyOverrideMapOutput) ToSSISPropertyOverrideMapOutput() SSISPropertyOverrideMapOutput {
	return o
}

func (o SSISPropertyOverrideMapOutput) ToSSISPropertyOverrideMapOutputWithContext(ctx context.Context) SSISPropertyOverrideMapOutput {
	return o
}

func (o SSISPropertyOverrideMapOutput) MapIndex(k pulumi.StringInput) SSISPropertyOverrideOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SSISPropertyOverride {
		return vs[0].(map[string]SSISPropertyOverride)[vs[1].(string)]
	}).(SSISPropertyOverrideOutput)
}

// SSIS property override.
type SSISPropertyOverrideResponse struct {
	// Whether SSIS package property override value is sensitive data. Value will be encrypted in SSISDB if it is true
	IsSensitive *bool `pulumi:"isSensitive"`
	// SSIS package property override value. Type: string (or Expression with resultType string).
	Value interface{} `pulumi:"value"`
}

// SSIS property override.
type SSISPropertyOverrideResponseOutput struct{ *pulumi.OutputState }

func (SSISPropertyOverrideResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SSISPropertyOverrideResponse)(nil)).Elem()
}

func (o SSISPropertyOverrideResponseOutput) ToSSISPropertyOverrideResponseOutput() SSISPropertyOverrideResponseOutput {
	return o
}

func (o SSISPropertyOverrideResponseOutput) ToSSISPropertyOverrideResponseOutputWithContext(ctx context.Context) SSISPropertyOverrideResponseOutput {
	return o
}

// Whether SSIS package property override value is sensitive data. Value will be encrypted in SSISDB if it is true
func (o SSISPropertyOverrideResponseOutput) IsSensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SSISPropertyOverrideResponse) *bool { return v.IsSensitive }).(pulumi.BoolPtrOutput)
}

// SSIS package property override value. Type: string (or Expression with resultType string).
func (o SSISPropertyOverrideResponseOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v SSISPropertyOverrideResponse) interface{} { return v.Value }).(pulumi.AnyOutput)
}

type SSISPropertyOverrideResponseMapOutput struct{ *pulumi.OutputState }

func (SSISPropertyOverrideResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SSISPropertyOverrideResponse)(nil)).Elem()
}

func (o SSISPropertyOverrideResponseMapOutput) ToSSISPropertyOverrideResponseMapOutput() SSISPropertyOverrideResponseMapOutput {
	return o
}

func (o SSISPropertyOverrideResponseMapOutput) ToSSISPropertyOverrideResponseMapOutputWithContext(ctx context.Context) SSISPropertyOverrideResponseMapOutput {
	return o
}

func (o SSISPropertyOverrideResponseMapOutput) MapIndex(k pulumi.StringInput) SSISPropertyOverrideResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SSISPropertyOverrideResponse {
		return vs[0].(map[string]SSISPropertyOverrideResponse)[vs[1].(string)]
	}).(SSISPropertyOverrideResponseOutput)
}

// Linked service for Salesforce.
type SalesforceLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The Salesforce API version used in ADF. Type: string (or Expression with resultType string).
	ApiVersion interface{} `pulumi:"apiVersion"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The URL of Salesforce instance. Default is 'https://login.salesforce.com'. To copy data from sandbox, specify 'https://test.salesforce.com'. To copy data from custom domain, specify, for example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
	EnvironmentUrl interface{} `pulumi:"environmentUrl"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password for Basic authentication of the Salesforce instance.
	Password interface{} `pulumi:"password"`
	// The security token is optional to remotely access Salesforce instance.
	SecurityToken interface{} `pulumi:"securityToken"`
	// Type of linked service.
	// Expected value is 'Salesforce'.
	Type string `pulumi:"type"`
	// The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// SalesforceLinkedServiceInput is an input type that accepts SalesforceLinkedServiceArgs and SalesforceLinkedServiceOutput values.
// You can construct a concrete instance of `SalesforceLinkedServiceInput` via:
//
//	SalesforceLinkedServiceArgs{...}
type SalesforceLinkedServiceInput interface {
	pulumi.Input

	ToSalesforceLinkedServiceOutput() SalesforceLinkedServiceOutput
	ToSalesforceLinkedServiceOutputWithContext(context.Context) SalesforceLinkedServiceOutput
}

// Linked service for Salesforce.
type SalesforceLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The Salesforce API version used in ADF. Type: string (or Expression with resultType string).
	ApiVersion pulumi.Input `pulumi:"apiVersion"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// The URL of Salesforce instance. Default is 'https://login.salesforce.com'. To copy data from sandbox, specify 'https://test.salesforce.com'. To copy data from custom domain, specify, for example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
	EnvironmentUrl pulumi.Input `pulumi:"environmentUrl"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password for Basic authentication of the Salesforce instance.
	Password pulumi.Input `pulumi:"password"`
	// The security token is optional to remotely access Salesforce instance.
	SecurityToken pulumi.Input `pulumi:"securityToken"`
	// Type of linked service.
	// Expected value is 'Salesforce'.
	Type pulumi.StringInput `pulumi:"type"`
	// The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string).
	Username pulumi.Input `pulumi:"username"`
}

func (SalesforceLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceLinkedService)(nil)).Elem()
}

func (i SalesforceLinkedServiceArgs) ToSalesforceLinkedServiceOutput() SalesforceLinkedServiceOutput {
	return i.ToSalesforceLinkedServiceOutputWithContext(context.Background())
}

func (i SalesforceLinkedServiceArgs) ToSalesforceLinkedServiceOutputWithContext(ctx context.Context) SalesforceLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SalesforceLinkedServiceOutput)
}

// Linked service for Salesforce.
type SalesforceLinkedServiceOutput struct{ *pulumi.OutputState }

func (SalesforceLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceLinkedService)(nil)).Elem()
}

func (o SalesforceLinkedServiceOutput) ToSalesforceLinkedServiceOutput() SalesforceLinkedServiceOutput {
	return o
}

func (o SalesforceLinkedServiceOutput) ToSalesforceLinkedServiceOutputWithContext(ctx context.Context) SalesforceLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SalesforceLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SalesforceLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The Salesforce API version used in ADF. Type: string (or Expression with resultType string).
func (o SalesforceLinkedServiceOutput) ApiVersion() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceLinkedService) interface{} { return v.ApiVersion }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o SalesforceLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v SalesforceLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o SalesforceLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o SalesforceLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The URL of Salesforce instance. Default is 'https://login.salesforce.com'. To copy data from sandbox, specify 'https://test.salesforce.com'. To copy data from custom domain, specify, for example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
func (o SalesforceLinkedServiceOutput) EnvironmentUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceLinkedService) interface{} { return v.EnvironmentUrl }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SalesforceLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SalesforceLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The password for Basic authentication of the Salesforce instance.
func (o SalesforceLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The security token is optional to remotely access Salesforce instance.
func (o SalesforceLinkedServiceOutput) SecurityToken() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceLinkedService) interface{} { return v.SecurityToken }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Salesforce'.
func (o SalesforceLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string).
func (o SalesforceLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Linked service for Salesforce.
type SalesforceLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The Salesforce API version used in ADF. Type: string (or Expression with resultType string).
	ApiVersion interface{} `pulumi:"apiVersion"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The URL of Salesforce instance. Default is 'https://login.salesforce.com'. To copy data from sandbox, specify 'https://test.salesforce.com'. To copy data from custom domain, specify, for example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
	EnvironmentUrl interface{} `pulumi:"environmentUrl"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password for Basic authentication of the Salesforce instance.
	Password interface{} `pulumi:"password"`
	// The security token is optional to remotely access Salesforce instance.
	SecurityToken interface{} `pulumi:"securityToken"`
	// Type of linked service.
	// Expected value is 'Salesforce'.
	Type string `pulumi:"type"`
	// The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// Linked service for Salesforce.
type SalesforceLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SalesforceLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceLinkedServiceResponse)(nil)).Elem()
}

func (o SalesforceLinkedServiceResponseOutput) ToSalesforceLinkedServiceResponseOutput() SalesforceLinkedServiceResponseOutput {
	return o
}

func (o SalesforceLinkedServiceResponseOutput) ToSalesforceLinkedServiceResponseOutputWithContext(ctx context.Context) SalesforceLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SalesforceLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SalesforceLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The Salesforce API version used in ADF. Type: string (or Expression with resultType string).
func (o SalesforceLinkedServiceResponseOutput) ApiVersion() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceLinkedServiceResponse) interface{} { return v.ApiVersion }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o SalesforceLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SalesforceLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o SalesforceLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o SalesforceLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The URL of Salesforce instance. Default is 'https://login.salesforce.com'. To copy data from sandbox, specify 'https://test.salesforce.com'. To copy data from custom domain, specify, for example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
func (o SalesforceLinkedServiceResponseOutput) EnvironmentUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceLinkedServiceResponse) interface{} { return v.EnvironmentUrl }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SalesforceLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SalesforceLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The password for Basic authentication of the Salesforce instance.
func (o SalesforceLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The security token is optional to remotely access Salesforce instance.
func (o SalesforceLinkedServiceResponseOutput) SecurityToken() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceLinkedServiceResponse) interface{} { return v.SecurityToken }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Salesforce'.
func (o SalesforceLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string).
func (o SalesforceLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Salesforce Marketing Cloud linked service.
type SalesforceMarketingCloudLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client ID associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The client secret associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string).
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Properties used to connect to Salesforce Marketing Cloud. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'SalesforceMarketingCloud'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// SalesforceMarketingCloudLinkedServiceInput is an input type that accepts SalesforceMarketingCloudLinkedServiceArgs and SalesforceMarketingCloudLinkedServiceOutput values.
// You can construct a concrete instance of `SalesforceMarketingCloudLinkedServiceInput` via:
//
//	SalesforceMarketingCloudLinkedServiceArgs{...}
type SalesforceMarketingCloudLinkedServiceInput interface {
	pulumi.Input

	ToSalesforceMarketingCloudLinkedServiceOutput() SalesforceMarketingCloudLinkedServiceOutput
	ToSalesforceMarketingCloudLinkedServiceOutputWithContext(context.Context) SalesforceMarketingCloudLinkedServiceOutput
}

// Salesforce Marketing Cloud linked service.
type SalesforceMarketingCloudLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The client ID associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string).
	ClientId pulumi.Input `pulumi:"clientId"`
	// The client secret associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string).
	ClientSecret pulumi.Input `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Properties used to connect to Salesforce Marketing Cloud. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties pulumi.Input `pulumi:"connectionProperties"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'SalesforceMarketingCloud'.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
}

func (SalesforceMarketingCloudLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceMarketingCloudLinkedService)(nil)).Elem()
}

func (i SalesforceMarketingCloudLinkedServiceArgs) ToSalesforceMarketingCloudLinkedServiceOutput() SalesforceMarketingCloudLinkedServiceOutput {
	return i.ToSalesforceMarketingCloudLinkedServiceOutputWithContext(context.Background())
}

func (i SalesforceMarketingCloudLinkedServiceArgs) ToSalesforceMarketingCloudLinkedServiceOutputWithContext(ctx context.Context) SalesforceMarketingCloudLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SalesforceMarketingCloudLinkedServiceOutput)
}

// Salesforce Marketing Cloud linked service.
type SalesforceMarketingCloudLinkedServiceOutput struct{ *pulumi.OutputState }

func (SalesforceMarketingCloudLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceMarketingCloudLinkedService)(nil)).Elem()
}

func (o SalesforceMarketingCloudLinkedServiceOutput) ToSalesforceMarketingCloudLinkedServiceOutput() SalesforceMarketingCloudLinkedServiceOutput {
	return o
}

func (o SalesforceMarketingCloudLinkedServiceOutput) ToSalesforceMarketingCloudLinkedServiceOutputWithContext(ctx context.Context) SalesforceMarketingCloudLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SalesforceMarketingCloudLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The client ID associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string).
func (o SalesforceMarketingCloudLinkedServiceOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedService) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string).
func (o SalesforceMarketingCloudLinkedServiceOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedService) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o SalesforceMarketingCloudLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Properties used to connect to Salesforce Marketing Cloud. It is mutually exclusive with any other properties in the linked service. Type: object.
func (o SalesforceMarketingCloudLinkedServiceOutput) ConnectionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedService) interface{} { return v.ConnectionProperties }).(pulumi.AnyOutput)
}

// Linked service description.
func (o SalesforceMarketingCloudLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o SalesforceMarketingCloudLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o SalesforceMarketingCloudLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
// Expected value is 'SalesforceMarketingCloud'.
func (o SalesforceMarketingCloudLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o SalesforceMarketingCloudLinkedServiceOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedService) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o SalesforceMarketingCloudLinkedServiceOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedService) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o SalesforceMarketingCloudLinkedServiceOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedService) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// Salesforce Marketing Cloud linked service.
type SalesforceMarketingCloudLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client ID associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The client secret associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string).
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Properties used to connect to Salesforce Marketing Cloud. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'SalesforceMarketingCloud'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Salesforce Marketing Cloud linked service.
type SalesforceMarketingCloudLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SalesforceMarketingCloudLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceMarketingCloudLinkedServiceResponse)(nil)).Elem()
}

func (o SalesforceMarketingCloudLinkedServiceResponseOutput) ToSalesforceMarketingCloudLinkedServiceResponseOutput() SalesforceMarketingCloudLinkedServiceResponseOutput {
	return o
}

func (o SalesforceMarketingCloudLinkedServiceResponseOutput) ToSalesforceMarketingCloudLinkedServiceResponseOutputWithContext(ctx context.Context) SalesforceMarketingCloudLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SalesforceMarketingCloudLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The client ID associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string).
func (o SalesforceMarketingCloudLinkedServiceResponseOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedServiceResponse) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string).
func (o SalesforceMarketingCloudLinkedServiceResponseOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedServiceResponse) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o SalesforceMarketingCloudLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Properties used to connect to Salesforce Marketing Cloud. It is mutually exclusive with any other properties in the linked service. Type: object.
func (o SalesforceMarketingCloudLinkedServiceResponseOutput) ConnectionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedServiceResponse) interface{} { return v.ConnectionProperties }).(pulumi.AnyOutput)
}

// Linked service description.
func (o SalesforceMarketingCloudLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o SalesforceMarketingCloudLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o SalesforceMarketingCloudLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
// Expected value is 'SalesforceMarketingCloud'.
func (o SalesforceMarketingCloudLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o SalesforceMarketingCloudLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedServiceResponse) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o SalesforceMarketingCloudLinkedServiceResponseOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedServiceResponse) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o SalesforceMarketingCloudLinkedServiceResponseOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudLinkedServiceResponse) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// Salesforce Marketing Cloud dataset.
type SalesforceMarketingCloudObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'SalesforceMarketingCloudObject'.
	Type string `pulumi:"type"`
}

// SalesforceMarketingCloudObjectDatasetInput is an input type that accepts SalesforceMarketingCloudObjectDatasetArgs and SalesforceMarketingCloudObjectDatasetOutput values.
// You can construct a concrete instance of `SalesforceMarketingCloudObjectDatasetInput` via:
//
//	SalesforceMarketingCloudObjectDatasetArgs{...}
type SalesforceMarketingCloudObjectDatasetInput interface {
	pulumi.Input

	ToSalesforceMarketingCloudObjectDatasetOutput() SalesforceMarketingCloudObjectDatasetOutput
	ToSalesforceMarketingCloudObjectDatasetOutputWithContext(context.Context) SalesforceMarketingCloudObjectDatasetOutput
}

// Salesforce Marketing Cloud dataset.
type SalesforceMarketingCloudObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'SalesforceMarketingCloudObject'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SalesforceMarketingCloudObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceMarketingCloudObjectDataset)(nil)).Elem()
}

func (i SalesforceMarketingCloudObjectDatasetArgs) ToSalesforceMarketingCloudObjectDatasetOutput() SalesforceMarketingCloudObjectDatasetOutput {
	return i.ToSalesforceMarketingCloudObjectDatasetOutputWithContext(context.Background())
}

func (i SalesforceMarketingCloudObjectDatasetArgs) ToSalesforceMarketingCloudObjectDatasetOutputWithContext(ctx context.Context) SalesforceMarketingCloudObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SalesforceMarketingCloudObjectDatasetOutput)
}

// Salesforce Marketing Cloud dataset.
type SalesforceMarketingCloudObjectDatasetOutput struct{ *pulumi.OutputState }

func (SalesforceMarketingCloudObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceMarketingCloudObjectDataset)(nil)).Elem()
}

func (o SalesforceMarketingCloudObjectDatasetOutput) ToSalesforceMarketingCloudObjectDatasetOutput() SalesforceMarketingCloudObjectDatasetOutput {
	return o
}

func (o SalesforceMarketingCloudObjectDatasetOutput) ToSalesforceMarketingCloudObjectDatasetOutputWithContext(ctx context.Context) SalesforceMarketingCloudObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SalesforceMarketingCloudObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SalesforceMarketingCloudObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SalesforceMarketingCloudObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o SalesforceMarketingCloudObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o SalesforceMarketingCloudObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SalesforceMarketingCloudObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SalesforceMarketingCloudObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o SalesforceMarketingCloudObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'SalesforceMarketingCloudObject'.
func (o SalesforceMarketingCloudObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Salesforce Marketing Cloud dataset.
type SalesforceMarketingCloudObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'SalesforceMarketingCloudObject'.
	Type string `pulumi:"type"`
}

// Salesforce Marketing Cloud dataset.
type SalesforceMarketingCloudObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (SalesforceMarketingCloudObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceMarketingCloudObjectDatasetResponse)(nil)).Elem()
}

func (o SalesforceMarketingCloudObjectDatasetResponseOutput) ToSalesforceMarketingCloudObjectDatasetResponseOutput() SalesforceMarketingCloudObjectDatasetResponseOutput {
	return o
}

func (o SalesforceMarketingCloudObjectDatasetResponseOutput) ToSalesforceMarketingCloudObjectDatasetResponseOutputWithContext(ctx context.Context) SalesforceMarketingCloudObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SalesforceMarketingCloudObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SalesforceMarketingCloudObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SalesforceMarketingCloudObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o SalesforceMarketingCloudObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudObjectDatasetResponse) LinkedServiceReferenceResponse {
		return v.LinkedServiceName
	}).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o SalesforceMarketingCloudObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudObjectDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SalesforceMarketingCloudObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SalesforceMarketingCloudObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o SalesforceMarketingCloudObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'SalesforceMarketingCloudObject'.
func (o SalesforceMarketingCloudObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Salesforce Marketing Cloud source.
type SalesforceMarketingCloudSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SalesforceMarketingCloudSource'.
	Type string `pulumi:"type"`
}

// SalesforceMarketingCloudSourceInput is an input type that accepts SalesforceMarketingCloudSourceArgs and SalesforceMarketingCloudSourceOutput values.
// You can construct a concrete instance of `SalesforceMarketingCloudSourceInput` via:
//
//	SalesforceMarketingCloudSourceArgs{...}
type SalesforceMarketingCloudSourceInput interface {
	pulumi.Input

	ToSalesforceMarketingCloudSourceOutput() SalesforceMarketingCloudSourceOutput
	ToSalesforceMarketingCloudSourceOutputWithContext(context.Context) SalesforceMarketingCloudSourceOutput
}

// A copy activity Salesforce Marketing Cloud source.
type SalesforceMarketingCloudSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SalesforceMarketingCloudSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SalesforceMarketingCloudSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceMarketingCloudSource)(nil)).Elem()
}

func (i SalesforceMarketingCloudSourceArgs) ToSalesforceMarketingCloudSourceOutput() SalesforceMarketingCloudSourceOutput {
	return i.ToSalesforceMarketingCloudSourceOutputWithContext(context.Background())
}

func (i SalesforceMarketingCloudSourceArgs) ToSalesforceMarketingCloudSourceOutputWithContext(ctx context.Context) SalesforceMarketingCloudSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SalesforceMarketingCloudSourceOutput)
}

// A copy activity Salesforce Marketing Cloud source.
type SalesforceMarketingCloudSourceOutput struct{ *pulumi.OutputState }

func (SalesforceMarketingCloudSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceMarketingCloudSource)(nil)).Elem()
}

func (o SalesforceMarketingCloudSourceOutput) ToSalesforceMarketingCloudSourceOutput() SalesforceMarketingCloudSourceOutput {
	return o
}

func (o SalesforceMarketingCloudSourceOutput) ToSalesforceMarketingCloudSourceOutputWithContext(ctx context.Context) SalesforceMarketingCloudSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o SalesforceMarketingCloudSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SalesforceMarketingCloudSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SalesforceMarketingCloudSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o SalesforceMarketingCloudSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SalesforceMarketingCloudSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o SalesforceMarketingCloudSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SalesforceMarketingCloudSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'SalesforceMarketingCloudSource'.
func (o SalesforceMarketingCloudSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Salesforce Marketing Cloud source.
type SalesforceMarketingCloudSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SalesforceMarketingCloudSource'.
	Type string `pulumi:"type"`
}

// A copy activity Salesforce Marketing Cloud source.
type SalesforceMarketingCloudSourceResponseOutput struct{ *pulumi.OutputState }

func (SalesforceMarketingCloudSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceMarketingCloudSourceResponse)(nil)).Elem()
}

func (o SalesforceMarketingCloudSourceResponseOutput) ToSalesforceMarketingCloudSourceResponseOutput() SalesforceMarketingCloudSourceResponseOutput {
	return o
}

func (o SalesforceMarketingCloudSourceResponseOutput) ToSalesforceMarketingCloudSourceResponseOutputWithContext(ctx context.Context) SalesforceMarketingCloudSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o SalesforceMarketingCloudSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SalesforceMarketingCloudSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SalesforceMarketingCloudSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o SalesforceMarketingCloudSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SalesforceMarketingCloudSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o SalesforceMarketingCloudSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SalesforceMarketingCloudSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'SalesforceMarketingCloudSource'.
func (o SalesforceMarketingCloudSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceMarketingCloudSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Salesforce object dataset.
type SalesforceObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The Salesforce object API name. Type: string (or Expression with resultType string).
	ObjectApiName interface{} `pulumi:"objectApiName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SalesforceObject'.
	Type string `pulumi:"type"`
}

// SalesforceObjectDatasetInput is an input type that accepts SalesforceObjectDatasetArgs and SalesforceObjectDatasetOutput values.
// You can construct a concrete instance of `SalesforceObjectDatasetInput` via:
//
//	SalesforceObjectDatasetArgs{...}
type SalesforceObjectDatasetInput interface {
	pulumi.Input

	ToSalesforceObjectDatasetOutput() SalesforceObjectDatasetOutput
	ToSalesforceObjectDatasetOutputWithContext(context.Context) SalesforceObjectDatasetOutput
}

// The Salesforce object dataset.
type SalesforceObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// The Salesforce object API name. Type: string (or Expression with resultType string).
	ObjectApiName pulumi.Input `pulumi:"objectApiName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SalesforceObject'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SalesforceObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceObjectDataset)(nil)).Elem()
}

func (i SalesforceObjectDatasetArgs) ToSalesforceObjectDatasetOutput() SalesforceObjectDatasetOutput {
	return i.ToSalesforceObjectDatasetOutputWithContext(context.Background())
}

func (i SalesforceObjectDatasetArgs) ToSalesforceObjectDatasetOutputWithContext(ctx context.Context) SalesforceObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SalesforceObjectDatasetOutput)
}

// The Salesforce object dataset.
type SalesforceObjectDatasetOutput struct{ *pulumi.OutputState }

func (SalesforceObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceObjectDataset)(nil)).Elem()
}

func (o SalesforceObjectDatasetOutput) ToSalesforceObjectDatasetOutput() SalesforceObjectDatasetOutput {
	return o
}

func (o SalesforceObjectDatasetOutput) ToSalesforceObjectDatasetOutputWithContext(ctx context.Context) SalesforceObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SalesforceObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SalesforceObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SalesforceObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SalesforceObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v SalesforceObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o SalesforceObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v SalesforceObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// The Salesforce object API name. Type: string (or Expression with resultType string).
func (o SalesforceObjectDatasetOutput) ObjectApiName() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceObjectDataset) interface{} { return v.ObjectApiName }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o SalesforceObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SalesforceObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SalesforceObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SalesforceObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'SalesforceObject'.
func (o SalesforceObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Salesforce object dataset.
type SalesforceObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The Salesforce object API name. Type: string (or Expression with resultType string).
	ObjectApiName interface{} `pulumi:"objectApiName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SalesforceObject'.
	Type string `pulumi:"type"`
}

// The Salesforce object dataset.
type SalesforceObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (SalesforceObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceObjectDatasetResponse)(nil)).Elem()
}

func (o SalesforceObjectDatasetResponseOutput) ToSalesforceObjectDatasetResponseOutput() SalesforceObjectDatasetResponseOutput {
	return o
}

func (o SalesforceObjectDatasetResponseOutput) ToSalesforceObjectDatasetResponseOutputWithContext(ctx context.Context) SalesforceObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SalesforceObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SalesforceObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SalesforceObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SalesforceObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v SalesforceObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o SalesforceObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v SalesforceObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// The Salesforce object API name. Type: string (or Expression with resultType string).
func (o SalesforceObjectDatasetResponseOutput) ObjectApiName() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceObjectDatasetResponse) interface{} { return v.ObjectApiName }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o SalesforceObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SalesforceObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SalesforceObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SalesforceObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'SalesforceObject'.
func (o SalesforceObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for Salesforce Service Cloud.
type SalesforceServiceCloudLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The Salesforce API version used in ADF. Type: string (or Expression with resultType string).
	ApiVersion interface{} `pulumi:"apiVersion"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The URL of Salesforce Service Cloud instance. Default is 'https://login.salesforce.com'. To copy data from sandbox, specify 'https://test.salesforce.com'. To copy data from custom domain, specify, for example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
	EnvironmentUrl interface{} `pulumi:"environmentUrl"`
	// Extended properties appended to the connection string. Type: string (or Expression with resultType string).
	ExtendedProperties interface{} `pulumi:"extendedProperties"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password for Basic authentication of the Salesforce instance.
	Password interface{} `pulumi:"password"`
	// The security token is optional to remotely access Salesforce instance.
	SecurityToken interface{} `pulumi:"securityToken"`
	// Type of linked service.
	// Expected value is 'SalesforceServiceCloud'.
	Type string `pulumi:"type"`
	// The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// SalesforceServiceCloudLinkedServiceInput is an input type that accepts SalesforceServiceCloudLinkedServiceArgs and SalesforceServiceCloudLinkedServiceOutput values.
// You can construct a concrete instance of `SalesforceServiceCloudLinkedServiceInput` via:
//
//	SalesforceServiceCloudLinkedServiceArgs{...}
type SalesforceServiceCloudLinkedServiceInput interface {
	pulumi.Input

	ToSalesforceServiceCloudLinkedServiceOutput() SalesforceServiceCloudLinkedServiceOutput
	ToSalesforceServiceCloudLinkedServiceOutputWithContext(context.Context) SalesforceServiceCloudLinkedServiceOutput
}

// Linked service for Salesforce Service Cloud.
type SalesforceServiceCloudLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The Salesforce API version used in ADF. Type: string (or Expression with resultType string).
	ApiVersion pulumi.Input `pulumi:"apiVersion"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// The URL of Salesforce Service Cloud instance. Default is 'https://login.salesforce.com'. To copy data from sandbox, specify 'https://test.salesforce.com'. To copy data from custom domain, specify, for example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
	EnvironmentUrl pulumi.Input `pulumi:"environmentUrl"`
	// Extended properties appended to the connection string. Type: string (or Expression with resultType string).
	ExtendedProperties pulumi.Input `pulumi:"extendedProperties"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password for Basic authentication of the Salesforce instance.
	Password pulumi.Input `pulumi:"password"`
	// The security token is optional to remotely access Salesforce instance.
	SecurityToken pulumi.Input `pulumi:"securityToken"`
	// Type of linked service.
	// Expected value is 'SalesforceServiceCloud'.
	Type pulumi.StringInput `pulumi:"type"`
	// The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string).
	Username pulumi.Input `pulumi:"username"`
}

func (SalesforceServiceCloudLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceServiceCloudLinkedService)(nil)).Elem()
}

func (i SalesforceServiceCloudLinkedServiceArgs) ToSalesforceServiceCloudLinkedServiceOutput() SalesforceServiceCloudLinkedServiceOutput {
	return i.ToSalesforceServiceCloudLinkedServiceOutputWithContext(context.Background())
}

func (i SalesforceServiceCloudLinkedServiceArgs) ToSalesforceServiceCloudLinkedServiceOutputWithContext(ctx context.Context) SalesforceServiceCloudLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SalesforceServiceCloudLinkedServiceOutput)
}

// Linked service for Salesforce Service Cloud.
type SalesforceServiceCloudLinkedServiceOutput struct{ *pulumi.OutputState }

func (SalesforceServiceCloudLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceServiceCloudLinkedService)(nil)).Elem()
}

func (o SalesforceServiceCloudLinkedServiceOutput) ToSalesforceServiceCloudLinkedServiceOutput() SalesforceServiceCloudLinkedServiceOutput {
	return o
}

func (o SalesforceServiceCloudLinkedServiceOutput) ToSalesforceServiceCloudLinkedServiceOutputWithContext(ctx context.Context) SalesforceServiceCloudLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SalesforceServiceCloudLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The Salesforce API version used in ADF. Type: string (or Expression with resultType string).
func (o SalesforceServiceCloudLinkedServiceOutput) ApiVersion() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedService) interface{} { return v.ApiVersion }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o SalesforceServiceCloudLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o SalesforceServiceCloudLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o SalesforceServiceCloudLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The URL of Salesforce Service Cloud instance. Default is 'https://login.salesforce.com'. To copy data from sandbox, specify 'https://test.salesforce.com'. To copy data from custom domain, specify, for example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
func (o SalesforceServiceCloudLinkedServiceOutput) EnvironmentUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedService) interface{} { return v.EnvironmentUrl }).(pulumi.AnyOutput)
}

// Extended properties appended to the connection string. Type: string (or Expression with resultType string).
func (o SalesforceServiceCloudLinkedServiceOutput) ExtendedProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedService) interface{} { return v.ExtendedProperties }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SalesforceServiceCloudLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The password for Basic authentication of the Salesforce instance.
func (o SalesforceServiceCloudLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The security token is optional to remotely access Salesforce instance.
func (o SalesforceServiceCloudLinkedServiceOutput) SecurityToken() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedService) interface{} { return v.SecurityToken }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'SalesforceServiceCloud'.
func (o SalesforceServiceCloudLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string).
func (o SalesforceServiceCloudLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Linked service for Salesforce Service Cloud.
type SalesforceServiceCloudLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The Salesforce API version used in ADF. Type: string (or Expression with resultType string).
	ApiVersion interface{} `pulumi:"apiVersion"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The URL of Salesforce Service Cloud instance. Default is 'https://login.salesforce.com'. To copy data from sandbox, specify 'https://test.salesforce.com'. To copy data from custom domain, specify, for example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
	EnvironmentUrl interface{} `pulumi:"environmentUrl"`
	// Extended properties appended to the connection string. Type: string (or Expression with resultType string).
	ExtendedProperties interface{} `pulumi:"extendedProperties"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password for Basic authentication of the Salesforce instance.
	Password interface{} `pulumi:"password"`
	// The security token is optional to remotely access Salesforce instance.
	SecurityToken interface{} `pulumi:"securityToken"`
	// Type of linked service.
	// Expected value is 'SalesforceServiceCloud'.
	Type string `pulumi:"type"`
	// The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// Linked service for Salesforce Service Cloud.
type SalesforceServiceCloudLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SalesforceServiceCloudLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceServiceCloudLinkedServiceResponse)(nil)).Elem()
}

func (o SalesforceServiceCloudLinkedServiceResponseOutput) ToSalesforceServiceCloudLinkedServiceResponseOutput() SalesforceServiceCloudLinkedServiceResponseOutput {
	return o
}

func (o SalesforceServiceCloudLinkedServiceResponseOutput) ToSalesforceServiceCloudLinkedServiceResponseOutputWithContext(ctx context.Context) SalesforceServiceCloudLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SalesforceServiceCloudLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The Salesforce API version used in ADF. Type: string (or Expression with resultType string).
func (o SalesforceServiceCloudLinkedServiceResponseOutput) ApiVersion() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedServiceResponse) interface{} { return v.ApiVersion }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o SalesforceServiceCloudLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o SalesforceServiceCloudLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o SalesforceServiceCloudLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The URL of Salesforce Service Cloud instance. Default is 'https://login.salesforce.com'. To copy data from sandbox, specify 'https://test.salesforce.com'. To copy data from custom domain, specify, for example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
func (o SalesforceServiceCloudLinkedServiceResponseOutput) EnvironmentUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedServiceResponse) interface{} { return v.EnvironmentUrl }).(pulumi.AnyOutput)
}

// Extended properties appended to the connection string. Type: string (or Expression with resultType string).
func (o SalesforceServiceCloudLinkedServiceResponseOutput) ExtendedProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedServiceResponse) interface{} { return v.ExtendedProperties }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SalesforceServiceCloudLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The password for Basic authentication of the Salesforce instance.
func (o SalesforceServiceCloudLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The security token is optional to remotely access Salesforce instance.
func (o SalesforceServiceCloudLinkedServiceResponseOutput) SecurityToken() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedServiceResponse) interface{} { return v.SecurityToken }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'SalesforceServiceCloud'.
func (o SalesforceServiceCloudLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string).
func (o SalesforceServiceCloudLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// The Salesforce Service Cloud object dataset.
type SalesforceServiceCloudObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The Salesforce Service Cloud object API name. Type: string (or Expression with resultType string).
	ObjectApiName interface{} `pulumi:"objectApiName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SalesforceServiceCloudObject'.
	Type string `pulumi:"type"`
}

// SalesforceServiceCloudObjectDatasetInput is an input type that accepts SalesforceServiceCloudObjectDatasetArgs and SalesforceServiceCloudObjectDatasetOutput values.
// You can construct a concrete instance of `SalesforceServiceCloudObjectDatasetInput` via:
//
//	SalesforceServiceCloudObjectDatasetArgs{...}
type SalesforceServiceCloudObjectDatasetInput interface {
	pulumi.Input

	ToSalesforceServiceCloudObjectDatasetOutput() SalesforceServiceCloudObjectDatasetOutput
	ToSalesforceServiceCloudObjectDatasetOutputWithContext(context.Context) SalesforceServiceCloudObjectDatasetOutput
}

// The Salesforce Service Cloud object dataset.
type SalesforceServiceCloudObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// The Salesforce Service Cloud object API name. Type: string (or Expression with resultType string).
	ObjectApiName pulumi.Input `pulumi:"objectApiName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SalesforceServiceCloudObject'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SalesforceServiceCloudObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceServiceCloudObjectDataset)(nil)).Elem()
}

func (i SalesforceServiceCloudObjectDatasetArgs) ToSalesforceServiceCloudObjectDatasetOutput() SalesforceServiceCloudObjectDatasetOutput {
	return i.ToSalesforceServiceCloudObjectDatasetOutputWithContext(context.Background())
}

func (i SalesforceServiceCloudObjectDatasetArgs) ToSalesforceServiceCloudObjectDatasetOutputWithContext(ctx context.Context) SalesforceServiceCloudObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SalesforceServiceCloudObjectDatasetOutput)
}

// The Salesforce Service Cloud object dataset.
type SalesforceServiceCloudObjectDatasetOutput struct{ *pulumi.OutputState }

func (SalesforceServiceCloudObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceServiceCloudObjectDataset)(nil)).Elem()
}

func (o SalesforceServiceCloudObjectDatasetOutput) ToSalesforceServiceCloudObjectDatasetOutput() SalesforceServiceCloudObjectDatasetOutput {
	return o
}

func (o SalesforceServiceCloudObjectDatasetOutput) ToSalesforceServiceCloudObjectDatasetOutputWithContext(ctx context.Context) SalesforceServiceCloudObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SalesforceServiceCloudObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SalesforceServiceCloudObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SalesforceServiceCloudObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceServiceCloudObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SalesforceServiceCloudObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v SalesforceServiceCloudObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o SalesforceServiceCloudObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v SalesforceServiceCloudObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// The Salesforce Service Cloud object API name. Type: string (or Expression with resultType string).
func (o SalesforceServiceCloudObjectDatasetOutput) ObjectApiName() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudObjectDataset) interface{} { return v.ObjectApiName }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o SalesforceServiceCloudObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SalesforceServiceCloudObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SalesforceServiceCloudObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SalesforceServiceCloudObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'SalesforceServiceCloudObject'.
func (o SalesforceServiceCloudObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceServiceCloudObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Salesforce Service Cloud object dataset.
type SalesforceServiceCloudObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The Salesforce Service Cloud object API name. Type: string (or Expression with resultType string).
	ObjectApiName interface{} `pulumi:"objectApiName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SalesforceServiceCloudObject'.
	Type string `pulumi:"type"`
}

// The Salesforce Service Cloud object dataset.
type SalesforceServiceCloudObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (SalesforceServiceCloudObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceServiceCloudObjectDatasetResponse)(nil)).Elem()
}

func (o SalesforceServiceCloudObjectDatasetResponseOutput) ToSalesforceServiceCloudObjectDatasetResponseOutput() SalesforceServiceCloudObjectDatasetResponseOutput {
	return o
}

func (o SalesforceServiceCloudObjectDatasetResponseOutput) ToSalesforceServiceCloudObjectDatasetResponseOutputWithContext(ctx context.Context) SalesforceServiceCloudObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SalesforceServiceCloudObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SalesforceServiceCloudObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SalesforceServiceCloudObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceServiceCloudObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SalesforceServiceCloudObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v SalesforceServiceCloudObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o SalesforceServiceCloudObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v SalesforceServiceCloudObjectDatasetResponse) LinkedServiceReferenceResponse {
		return v.LinkedServiceName
	}).(LinkedServiceReferenceResponseOutput)
}

// The Salesforce Service Cloud object API name. Type: string (or Expression with resultType string).
func (o SalesforceServiceCloudObjectDatasetResponseOutput) ObjectApiName() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudObjectDatasetResponse) interface{} { return v.ObjectApiName }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o SalesforceServiceCloudObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SalesforceServiceCloudObjectDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SalesforceServiceCloudObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SalesforceServiceCloudObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'SalesforceServiceCloudObject'.
func (o SalesforceServiceCloudObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceServiceCloudObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Salesforce Service Cloud sink.
type SalesforceServiceCloudSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The name of the external ID field for upsert operation. Default value is 'Id' column. Type: string (or Expression with resultType string).
	ExternalIdFieldName interface{} `pulumi:"externalIdFieldName"`
	// The flag indicating whether or not to ignore null values from input dataset (except key fields) during write operation. Default value is false. If set it to true, it means ADF will leave the data in the destination object unchanged when doing upsert/update operation and insert defined default value when doing insert operation, versus ADF will update the data in the destination object to NULL when doing upsert/update operation and insert NULL value when doing insert operation. Type: boolean (or Expression with resultType boolean).
	IgnoreNullValues interface{} `pulumi:"ignoreNullValues"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'SalesforceServiceCloudSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation. Default is Insert.
	WriteBehavior *string `pulumi:"writeBehavior"`
}

// SalesforceServiceCloudSinkInput is an input type that accepts SalesforceServiceCloudSinkArgs and SalesforceServiceCloudSinkOutput values.
// You can construct a concrete instance of `SalesforceServiceCloudSinkInput` via:
//
//	SalesforceServiceCloudSinkArgs{...}
type SalesforceServiceCloudSinkInput interface {
	pulumi.Input

	ToSalesforceServiceCloudSinkOutput() SalesforceServiceCloudSinkOutput
	ToSalesforceServiceCloudSinkOutputWithContext(context.Context) SalesforceServiceCloudSinkOutput
}

// A copy activity Salesforce Service Cloud sink.
type SalesforceServiceCloudSinkArgs struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The name of the external ID field for upsert operation. Default value is 'Id' column. Type: string (or Expression with resultType string).
	ExternalIdFieldName pulumi.Input `pulumi:"externalIdFieldName"`
	// The flag indicating whether or not to ignore null values from input dataset (except key fields) during write operation. Default value is false. If set it to true, it means ADF will leave the data in the destination object unchanged when doing upsert/update operation and insert defined default value when doing insert operation, versus ADF will update the data in the destination object to NULL when doing upsert/update operation and insert NULL value when doing insert operation. Type: boolean (or Expression with resultType boolean).
	IgnoreNullValues pulumi.Input `pulumi:"ignoreNullValues"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount pulumi.Input `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait pulumi.Input `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'SalesforceServiceCloudSink'.
	Type pulumi.StringInput `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize pulumi.Input `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout pulumi.Input `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation. Default is Insert.
	WriteBehavior pulumi.StringPtrInput `pulumi:"writeBehavior"`
}

func (SalesforceServiceCloudSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceServiceCloudSink)(nil)).Elem()
}

func (i SalesforceServiceCloudSinkArgs) ToSalesforceServiceCloudSinkOutput() SalesforceServiceCloudSinkOutput {
	return i.ToSalesforceServiceCloudSinkOutputWithContext(context.Background())
}

func (i SalesforceServiceCloudSinkArgs) ToSalesforceServiceCloudSinkOutputWithContext(ctx context.Context) SalesforceServiceCloudSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SalesforceServiceCloudSinkOutput)
}

// A copy activity Salesforce Service Cloud sink.
type SalesforceServiceCloudSinkOutput struct{ *pulumi.OutputState }

func (SalesforceServiceCloudSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceServiceCloudSink)(nil)).Elem()
}

func (o SalesforceServiceCloudSinkOutput) ToSalesforceServiceCloudSinkOutput() SalesforceServiceCloudSinkOutput {
	return o
}

func (o SalesforceServiceCloudSinkOutput) ToSalesforceServiceCloudSinkOutputWithContext(ctx context.Context) SalesforceServiceCloudSinkOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SalesforceServiceCloudSinkOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudSink) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The name of the external ID field for upsert operation. Default value is 'Id' column. Type: string (or Expression with resultType string).
func (o SalesforceServiceCloudSinkOutput) ExternalIdFieldName() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudSink) interface{} { return v.ExternalIdFieldName }).(pulumi.AnyOutput)
}

// The flag indicating whether or not to ignore null values from input dataset (except key fields) during write operation. Default value is false. If set it to true, it means ADF will leave the data in the destination object unchanged when doing upsert/update operation and insert defined default value when doing insert operation, versus ADF will update the data in the destination object to NULL when doing upsert/update operation and insert NULL value when doing insert operation. Type: boolean (or Expression with resultType boolean).
func (o SalesforceServiceCloudSinkOutput) IgnoreNullValues() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudSink) interface{} { return v.IgnoreNullValues }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o SalesforceServiceCloudSinkOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudSink) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o SalesforceServiceCloudSinkOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudSink) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SalesforceServiceCloudSinkOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudSink) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'SalesforceServiceCloudSink'.
func (o SalesforceServiceCloudSinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceServiceCloudSink) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o SalesforceServiceCloudSinkOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudSink) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SalesforceServiceCloudSinkOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudSink) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// The write behavior for the operation. Default is Insert.
func (o SalesforceServiceCloudSinkOutput) WriteBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceServiceCloudSink) *string { return v.WriteBehavior }).(pulumi.StringPtrOutput)
}

// A copy activity Salesforce Service Cloud sink.
type SalesforceServiceCloudSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The name of the external ID field for upsert operation. Default value is 'Id' column. Type: string (or Expression with resultType string).
	ExternalIdFieldName interface{} `pulumi:"externalIdFieldName"`
	// The flag indicating whether or not to ignore null values from input dataset (except key fields) during write operation. Default value is false. If set it to true, it means ADF will leave the data in the destination object unchanged when doing upsert/update operation and insert defined default value when doing insert operation, versus ADF will update the data in the destination object to NULL when doing upsert/update operation and insert NULL value when doing insert operation. Type: boolean (or Expression with resultType boolean).
	IgnoreNullValues interface{} `pulumi:"ignoreNullValues"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'SalesforceServiceCloudSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation. Default is Insert.
	WriteBehavior *string `pulumi:"writeBehavior"`
}

// A copy activity Salesforce Service Cloud sink.
type SalesforceServiceCloudSinkResponseOutput struct{ *pulumi.OutputState }

func (SalesforceServiceCloudSinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceServiceCloudSinkResponse)(nil)).Elem()
}

func (o SalesforceServiceCloudSinkResponseOutput) ToSalesforceServiceCloudSinkResponseOutput() SalesforceServiceCloudSinkResponseOutput {
	return o
}

func (o SalesforceServiceCloudSinkResponseOutput) ToSalesforceServiceCloudSinkResponseOutputWithContext(ctx context.Context) SalesforceServiceCloudSinkResponseOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SalesforceServiceCloudSinkResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudSinkResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The name of the external ID field for upsert operation. Default value is 'Id' column. Type: string (or Expression with resultType string).
func (o SalesforceServiceCloudSinkResponseOutput) ExternalIdFieldName() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudSinkResponse) interface{} { return v.ExternalIdFieldName }).(pulumi.AnyOutput)
}

// The flag indicating whether or not to ignore null values from input dataset (except key fields) during write operation. Default value is false. If set it to true, it means ADF will leave the data in the destination object unchanged when doing upsert/update operation and insert defined default value when doing insert operation, versus ADF will update the data in the destination object to NULL when doing upsert/update operation and insert NULL value when doing insert operation. Type: boolean (or Expression with resultType boolean).
func (o SalesforceServiceCloudSinkResponseOutput) IgnoreNullValues() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudSinkResponse) interface{} { return v.IgnoreNullValues }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o SalesforceServiceCloudSinkResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudSinkResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o SalesforceServiceCloudSinkResponseOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudSinkResponse) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SalesforceServiceCloudSinkResponseOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudSinkResponse) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'SalesforceServiceCloudSink'.
func (o SalesforceServiceCloudSinkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceServiceCloudSinkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o SalesforceServiceCloudSinkResponseOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudSinkResponse) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SalesforceServiceCloudSinkResponseOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudSinkResponse) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// The write behavior for the operation. Default is Insert.
func (o SalesforceServiceCloudSinkResponseOutput) WriteBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceServiceCloudSinkResponse) *string { return v.WriteBehavior }).(pulumi.StringPtrOutput)
}

// A copy activity Salesforce Service Cloud source.
type SalesforceServiceCloudSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// The read behavior for the operation. Default is Query. Allowed values: Query/QueryAll. Type: string (or Expression with resultType string).
	ReadBehavior interface{} `pulumi:"readBehavior"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SalesforceServiceCloudSource'.
	Type string `pulumi:"type"`
}

// SalesforceServiceCloudSourceInput is an input type that accepts SalesforceServiceCloudSourceArgs and SalesforceServiceCloudSourceOutput values.
// You can construct a concrete instance of `SalesforceServiceCloudSourceInput` via:
//
//	SalesforceServiceCloudSourceArgs{...}
type SalesforceServiceCloudSourceInput interface {
	pulumi.Input

	ToSalesforceServiceCloudSourceOutput() SalesforceServiceCloudSourceOutput
	ToSalesforceServiceCloudSourceOutputWithContext(context.Context) SalesforceServiceCloudSourceOutput
}

// A copy activity Salesforce Service Cloud source.
type SalesforceServiceCloudSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// The read behavior for the operation. Default is Query. Allowed values: Query/QueryAll. Type: string (or Expression with resultType string).
	ReadBehavior pulumi.Input `pulumi:"readBehavior"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SalesforceServiceCloudSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SalesforceServiceCloudSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceServiceCloudSource)(nil)).Elem()
}

func (i SalesforceServiceCloudSourceArgs) ToSalesforceServiceCloudSourceOutput() SalesforceServiceCloudSourceOutput {
	return i.ToSalesforceServiceCloudSourceOutputWithContext(context.Background())
}

func (i SalesforceServiceCloudSourceArgs) ToSalesforceServiceCloudSourceOutputWithContext(ctx context.Context) SalesforceServiceCloudSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SalesforceServiceCloudSourceOutput)
}

// A copy activity Salesforce Service Cloud source.
type SalesforceServiceCloudSourceOutput struct{ *pulumi.OutputState }

func (SalesforceServiceCloudSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceServiceCloudSource)(nil)).Elem()
}

func (o SalesforceServiceCloudSourceOutput) ToSalesforceServiceCloudSourceOutput() SalesforceServiceCloudSourceOutput {
	return o
}

func (o SalesforceServiceCloudSourceOutput) ToSalesforceServiceCloudSourceOutputWithContext(ctx context.Context) SalesforceServiceCloudSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o SalesforceServiceCloudSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SalesforceServiceCloudSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SalesforceServiceCloudSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Database query. Type: string (or Expression with resultType string).
func (o SalesforceServiceCloudSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// The read behavior for the operation. Default is Query. Allowed values: Query/QueryAll. Type: string (or Expression with resultType string).
func (o SalesforceServiceCloudSourceOutput) ReadBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudSource) interface{} { return v.ReadBehavior }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o SalesforceServiceCloudSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SalesforceServiceCloudSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'SalesforceServiceCloudSource'.
func (o SalesforceServiceCloudSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceServiceCloudSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Salesforce Service Cloud source.
type SalesforceServiceCloudSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// The read behavior for the operation. Default is Query. Allowed values: Query/QueryAll. Type: string (or Expression with resultType string).
	ReadBehavior interface{} `pulumi:"readBehavior"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SalesforceServiceCloudSource'.
	Type string `pulumi:"type"`
}

// A copy activity Salesforce Service Cloud source.
type SalesforceServiceCloudSourceResponseOutput struct{ *pulumi.OutputState }

func (SalesforceServiceCloudSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceServiceCloudSourceResponse)(nil)).Elem()
}

func (o SalesforceServiceCloudSourceResponseOutput) ToSalesforceServiceCloudSourceResponseOutput() SalesforceServiceCloudSourceResponseOutput {
	return o
}

func (o SalesforceServiceCloudSourceResponseOutput) ToSalesforceServiceCloudSourceResponseOutputWithContext(ctx context.Context) SalesforceServiceCloudSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o SalesforceServiceCloudSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SalesforceServiceCloudSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SalesforceServiceCloudSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Database query. Type: string (or Expression with resultType string).
func (o SalesforceServiceCloudSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// The read behavior for the operation. Default is Query. Allowed values: Query/QueryAll. Type: string (or Expression with resultType string).
func (o SalesforceServiceCloudSourceResponseOutput) ReadBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudSourceResponse) interface{} { return v.ReadBehavior }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o SalesforceServiceCloudSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SalesforceServiceCloudSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'SalesforceServiceCloudSource'.
func (o SalesforceServiceCloudSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceServiceCloudSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for Salesforce Service Cloud V2.
type SalesforceServiceCloudV2LinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The Salesforce API version used in ADF. The version must be larger than or equal to 47.0 which is required by Salesforce BULK API 2.0. Type: string (or Expression with resultType string).
	ApiVersion interface{} `pulumi:"apiVersion"`
	// The authentication type to be used to connect to the Salesforce. Currently, we only support OAuth2ClientCredentials, it is also the default value
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The client Id for OAuth 2.0 Client Credentials Flow authentication of the Salesforce instance. Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The client secret for OAuth 2.0 Client Credentials Flow authentication of the Salesforce instance.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The URL of Salesforce Service Cloud instance. For example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
	EnvironmentUrl interface{} `pulumi:"environmentUrl"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'SalesforceServiceCloudV2'.
	Type string `pulumi:"type"`
}

// SalesforceServiceCloudV2LinkedServiceInput is an input type that accepts SalesforceServiceCloudV2LinkedServiceArgs and SalesforceServiceCloudV2LinkedServiceOutput values.
// You can construct a concrete instance of `SalesforceServiceCloudV2LinkedServiceInput` via:
//
//	SalesforceServiceCloudV2LinkedServiceArgs{...}
type SalesforceServiceCloudV2LinkedServiceInput interface {
	pulumi.Input

	ToSalesforceServiceCloudV2LinkedServiceOutput() SalesforceServiceCloudV2LinkedServiceOutput
	ToSalesforceServiceCloudV2LinkedServiceOutputWithContext(context.Context) SalesforceServiceCloudV2LinkedServiceOutput
}

// Linked service for Salesforce Service Cloud V2.
type SalesforceServiceCloudV2LinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The Salesforce API version used in ADF. The version must be larger than or equal to 47.0 which is required by Salesforce BULK API 2.0. Type: string (or Expression with resultType string).
	ApiVersion pulumi.Input `pulumi:"apiVersion"`
	// The authentication type to be used to connect to the Salesforce. Currently, we only support OAuth2ClientCredentials, it is also the default value
	AuthenticationType pulumi.Input `pulumi:"authenticationType"`
	// The client Id for OAuth 2.0 Client Credentials Flow authentication of the Salesforce instance. Type: string (or Expression with resultType string).
	ClientId pulumi.Input `pulumi:"clientId"`
	// The client secret for OAuth 2.0 Client Credentials Flow authentication of the Salesforce instance.
	ClientSecret pulumi.Input `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// The URL of Salesforce Service Cloud instance. For example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
	EnvironmentUrl pulumi.Input `pulumi:"environmentUrl"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'SalesforceServiceCloudV2'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SalesforceServiceCloudV2LinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceServiceCloudV2LinkedService)(nil)).Elem()
}

func (i SalesforceServiceCloudV2LinkedServiceArgs) ToSalesforceServiceCloudV2LinkedServiceOutput() SalesforceServiceCloudV2LinkedServiceOutput {
	return i.ToSalesforceServiceCloudV2LinkedServiceOutputWithContext(context.Background())
}

func (i SalesforceServiceCloudV2LinkedServiceArgs) ToSalesforceServiceCloudV2LinkedServiceOutputWithContext(ctx context.Context) SalesforceServiceCloudV2LinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SalesforceServiceCloudV2LinkedServiceOutput)
}

// Linked service for Salesforce Service Cloud V2.
type SalesforceServiceCloudV2LinkedServiceOutput struct{ *pulumi.OutputState }

func (SalesforceServiceCloudV2LinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceServiceCloudV2LinkedService)(nil)).Elem()
}

func (o SalesforceServiceCloudV2LinkedServiceOutput) ToSalesforceServiceCloudV2LinkedServiceOutput() SalesforceServiceCloudV2LinkedServiceOutput {
	return o
}

func (o SalesforceServiceCloudV2LinkedServiceOutput) ToSalesforceServiceCloudV2LinkedServiceOutputWithContext(ctx context.Context) SalesforceServiceCloudV2LinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SalesforceServiceCloudV2LinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2LinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The Salesforce API version used in ADF. The version must be larger than or equal to 47.0 which is required by Salesforce BULK API 2.0. Type: string (or Expression with resultType string).
func (o SalesforceServiceCloudV2LinkedServiceOutput) ApiVersion() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2LinkedService) interface{} { return v.ApiVersion }).(pulumi.AnyOutput)
}

// The authentication type to be used to connect to the Salesforce. Currently, we only support OAuth2ClientCredentials, it is also the default value
func (o SalesforceServiceCloudV2LinkedServiceOutput) AuthenticationType() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2LinkedService) interface{} { return v.AuthenticationType }).(pulumi.AnyOutput)
}

// The client Id for OAuth 2.0 Client Credentials Flow authentication of the Salesforce instance. Type: string (or Expression with resultType string).
func (o SalesforceServiceCloudV2LinkedServiceOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2LinkedService) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret for OAuth 2.0 Client Credentials Flow authentication of the Salesforce instance.
func (o SalesforceServiceCloudV2LinkedServiceOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2LinkedService) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o SalesforceServiceCloudV2LinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2LinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o SalesforceServiceCloudV2LinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2LinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o SalesforceServiceCloudV2LinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2LinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The URL of Salesforce Service Cloud instance. For example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
func (o SalesforceServiceCloudV2LinkedServiceOutput) EnvironmentUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2LinkedService) interface{} { return v.EnvironmentUrl }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SalesforceServiceCloudV2LinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2LinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
// Expected value is 'SalesforceServiceCloudV2'.
func (o SalesforceServiceCloudV2LinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2LinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for Salesforce Service Cloud V2.
type SalesforceServiceCloudV2LinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The Salesforce API version used in ADF. The version must be larger than or equal to 47.0 which is required by Salesforce BULK API 2.0. Type: string (or Expression with resultType string).
	ApiVersion interface{} `pulumi:"apiVersion"`
	// The authentication type to be used to connect to the Salesforce. Currently, we only support OAuth2ClientCredentials, it is also the default value
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The client Id for OAuth 2.0 Client Credentials Flow authentication of the Salesforce instance. Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The client secret for OAuth 2.0 Client Credentials Flow authentication of the Salesforce instance.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The URL of Salesforce Service Cloud instance. For example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
	EnvironmentUrl interface{} `pulumi:"environmentUrl"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'SalesforceServiceCloudV2'.
	Type string `pulumi:"type"`
}

// Linked service for Salesforce Service Cloud V2.
type SalesforceServiceCloudV2LinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SalesforceServiceCloudV2LinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceServiceCloudV2LinkedServiceResponse)(nil)).Elem()
}

func (o SalesforceServiceCloudV2LinkedServiceResponseOutput) ToSalesforceServiceCloudV2LinkedServiceResponseOutput() SalesforceServiceCloudV2LinkedServiceResponseOutput {
	return o
}

func (o SalesforceServiceCloudV2LinkedServiceResponseOutput) ToSalesforceServiceCloudV2LinkedServiceResponseOutputWithContext(ctx context.Context) SalesforceServiceCloudV2LinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SalesforceServiceCloudV2LinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2LinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The Salesforce API version used in ADF. The version must be larger than or equal to 47.0 which is required by Salesforce BULK API 2.0. Type: string (or Expression with resultType string).
func (o SalesforceServiceCloudV2LinkedServiceResponseOutput) ApiVersion() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2LinkedServiceResponse) interface{} { return v.ApiVersion }).(pulumi.AnyOutput)
}

// The authentication type to be used to connect to the Salesforce. Currently, we only support OAuth2ClientCredentials, it is also the default value
func (o SalesforceServiceCloudV2LinkedServiceResponseOutput) AuthenticationType() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2LinkedServiceResponse) interface{} { return v.AuthenticationType }).(pulumi.AnyOutput)
}

// The client Id for OAuth 2.0 Client Credentials Flow authentication of the Salesforce instance. Type: string (or Expression with resultType string).
func (o SalesforceServiceCloudV2LinkedServiceResponseOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2LinkedServiceResponse) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret for OAuth 2.0 Client Credentials Flow authentication of the Salesforce instance.
func (o SalesforceServiceCloudV2LinkedServiceResponseOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2LinkedServiceResponse) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o SalesforceServiceCloudV2LinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2LinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o SalesforceServiceCloudV2LinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2LinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o SalesforceServiceCloudV2LinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2LinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The URL of Salesforce Service Cloud instance. For example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
func (o SalesforceServiceCloudV2LinkedServiceResponseOutput) EnvironmentUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2LinkedServiceResponse) interface{} { return v.EnvironmentUrl }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SalesforceServiceCloudV2LinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2LinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
// Expected value is 'SalesforceServiceCloudV2'.
func (o SalesforceServiceCloudV2LinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2LinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Salesforce Service Cloud V2 object dataset.
type SalesforceServiceCloudV2ObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The Salesforce Service Cloud V2 object API name. Type: string (or Expression with resultType string).
	ObjectApiName interface{} `pulumi:"objectApiName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Salesforce Service Cloud V2 reportId. Type: string (or Expression with resultType string).
	ReportId interface{} `pulumi:"reportId"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SalesforceServiceCloudV2Object'.
	Type string `pulumi:"type"`
}

// SalesforceServiceCloudV2ObjectDatasetInput is an input type that accepts SalesforceServiceCloudV2ObjectDatasetArgs and SalesforceServiceCloudV2ObjectDatasetOutput values.
// You can construct a concrete instance of `SalesforceServiceCloudV2ObjectDatasetInput` via:
//
//	SalesforceServiceCloudV2ObjectDatasetArgs{...}
type SalesforceServiceCloudV2ObjectDatasetInput interface {
	pulumi.Input

	ToSalesforceServiceCloudV2ObjectDatasetOutput() SalesforceServiceCloudV2ObjectDatasetOutput
	ToSalesforceServiceCloudV2ObjectDatasetOutputWithContext(context.Context) SalesforceServiceCloudV2ObjectDatasetOutput
}

// The Salesforce Service Cloud V2 object dataset.
type SalesforceServiceCloudV2ObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// The Salesforce Service Cloud V2 object API name. Type: string (or Expression with resultType string).
	ObjectApiName pulumi.Input `pulumi:"objectApiName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The Salesforce Service Cloud V2 reportId. Type: string (or Expression with resultType string).
	ReportId pulumi.Input `pulumi:"reportId"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SalesforceServiceCloudV2Object'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SalesforceServiceCloudV2ObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceServiceCloudV2ObjectDataset)(nil)).Elem()
}

func (i SalesforceServiceCloudV2ObjectDatasetArgs) ToSalesforceServiceCloudV2ObjectDatasetOutput() SalesforceServiceCloudV2ObjectDatasetOutput {
	return i.ToSalesforceServiceCloudV2ObjectDatasetOutputWithContext(context.Background())
}

func (i SalesforceServiceCloudV2ObjectDatasetArgs) ToSalesforceServiceCloudV2ObjectDatasetOutputWithContext(ctx context.Context) SalesforceServiceCloudV2ObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SalesforceServiceCloudV2ObjectDatasetOutput)
}

// The Salesforce Service Cloud V2 object dataset.
type SalesforceServiceCloudV2ObjectDatasetOutput struct{ *pulumi.OutputState }

func (SalesforceServiceCloudV2ObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceServiceCloudV2ObjectDataset)(nil)).Elem()
}

func (o SalesforceServiceCloudV2ObjectDatasetOutput) ToSalesforceServiceCloudV2ObjectDatasetOutput() SalesforceServiceCloudV2ObjectDatasetOutput {
	return o
}

func (o SalesforceServiceCloudV2ObjectDatasetOutput) ToSalesforceServiceCloudV2ObjectDatasetOutputWithContext(ctx context.Context) SalesforceServiceCloudV2ObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SalesforceServiceCloudV2ObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2ObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SalesforceServiceCloudV2ObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2ObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SalesforceServiceCloudV2ObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2ObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o SalesforceServiceCloudV2ObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2ObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// The Salesforce Service Cloud V2 object API name. Type: string (or Expression with resultType string).
func (o SalesforceServiceCloudV2ObjectDatasetOutput) ObjectApiName() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2ObjectDataset) interface{} { return v.ObjectApiName }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o SalesforceServiceCloudV2ObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2ObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The Salesforce Service Cloud V2 reportId. Type: string (or Expression with resultType string).
func (o SalesforceServiceCloudV2ObjectDatasetOutput) ReportId() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2ObjectDataset) interface{} { return v.ReportId }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SalesforceServiceCloudV2ObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2ObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SalesforceServiceCloudV2ObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2ObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'SalesforceServiceCloudV2Object'.
func (o SalesforceServiceCloudV2ObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2ObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Salesforce Service Cloud V2 object dataset.
type SalesforceServiceCloudV2ObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The Salesforce Service Cloud V2 object API name. Type: string (or Expression with resultType string).
	ObjectApiName interface{} `pulumi:"objectApiName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Salesforce Service Cloud V2 reportId. Type: string (or Expression with resultType string).
	ReportId interface{} `pulumi:"reportId"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SalesforceServiceCloudV2Object'.
	Type string `pulumi:"type"`
}

// The Salesforce Service Cloud V2 object dataset.
type SalesforceServiceCloudV2ObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (SalesforceServiceCloudV2ObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceServiceCloudV2ObjectDatasetResponse)(nil)).Elem()
}

func (o SalesforceServiceCloudV2ObjectDatasetResponseOutput) ToSalesforceServiceCloudV2ObjectDatasetResponseOutput() SalesforceServiceCloudV2ObjectDatasetResponseOutput {
	return o
}

func (o SalesforceServiceCloudV2ObjectDatasetResponseOutput) ToSalesforceServiceCloudV2ObjectDatasetResponseOutputWithContext(ctx context.Context) SalesforceServiceCloudV2ObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SalesforceServiceCloudV2ObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2ObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SalesforceServiceCloudV2ObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2ObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SalesforceServiceCloudV2ObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2ObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o SalesforceServiceCloudV2ObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2ObjectDatasetResponse) LinkedServiceReferenceResponse {
		return v.LinkedServiceName
	}).(LinkedServiceReferenceResponseOutput)
}

// The Salesforce Service Cloud V2 object API name. Type: string (or Expression with resultType string).
func (o SalesforceServiceCloudV2ObjectDatasetResponseOutput) ObjectApiName() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2ObjectDatasetResponse) interface{} { return v.ObjectApiName }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o SalesforceServiceCloudV2ObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2ObjectDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The Salesforce Service Cloud V2 reportId. Type: string (or Expression with resultType string).
func (o SalesforceServiceCloudV2ObjectDatasetResponseOutput) ReportId() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2ObjectDatasetResponse) interface{} { return v.ReportId }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SalesforceServiceCloudV2ObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2ObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SalesforceServiceCloudV2ObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2ObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'SalesforceServiceCloudV2Object'.
func (o SalesforceServiceCloudV2ObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2ObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Salesforce Service Cloud V2 sink.
type SalesforceServiceCloudV2Sink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The name of the external ID field for upsert operation. Default value is 'Id' column. Type: string (or Expression with resultType string).
	ExternalIdFieldName interface{} `pulumi:"externalIdFieldName"`
	// The flag indicating whether or not to ignore null values from input dataset (except key fields) during write operation. Default value is false. If set it to true, it means ADF will leave the data in the destination object unchanged when doing upsert/update operation and insert defined default value when doing insert operation, versus ADF will update the data in the destination object to NULL when doing upsert/update operation and insert NULL value when doing insert operation. Type: boolean (or Expression with resultType boolean).
	IgnoreNullValues interface{} `pulumi:"ignoreNullValues"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'SalesforceServiceCloudV2Sink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation. Default is Insert.
	WriteBehavior *string `pulumi:"writeBehavior"`
}

// SalesforceServiceCloudV2SinkInput is an input type that accepts SalesforceServiceCloudV2SinkArgs and SalesforceServiceCloudV2SinkOutput values.
// You can construct a concrete instance of `SalesforceServiceCloudV2SinkInput` via:
//
//	SalesforceServiceCloudV2SinkArgs{...}
type SalesforceServiceCloudV2SinkInput interface {
	pulumi.Input

	ToSalesforceServiceCloudV2SinkOutput() SalesforceServiceCloudV2SinkOutput
	ToSalesforceServiceCloudV2SinkOutputWithContext(context.Context) SalesforceServiceCloudV2SinkOutput
}

// A copy activity Salesforce Service Cloud V2 sink.
type SalesforceServiceCloudV2SinkArgs struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The name of the external ID field for upsert operation. Default value is 'Id' column. Type: string (or Expression with resultType string).
	ExternalIdFieldName pulumi.Input `pulumi:"externalIdFieldName"`
	// The flag indicating whether or not to ignore null values from input dataset (except key fields) during write operation. Default value is false. If set it to true, it means ADF will leave the data in the destination object unchanged when doing upsert/update operation and insert defined default value when doing insert operation, versus ADF will update the data in the destination object to NULL when doing upsert/update operation and insert NULL value when doing insert operation. Type: boolean (or Expression with resultType boolean).
	IgnoreNullValues pulumi.Input `pulumi:"ignoreNullValues"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount pulumi.Input `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait pulumi.Input `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'SalesforceServiceCloudV2Sink'.
	Type pulumi.StringInput `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize pulumi.Input `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout pulumi.Input `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation. Default is Insert.
	WriteBehavior pulumi.StringPtrInput `pulumi:"writeBehavior"`
}

func (SalesforceServiceCloudV2SinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceServiceCloudV2Sink)(nil)).Elem()
}

func (i SalesforceServiceCloudV2SinkArgs) ToSalesforceServiceCloudV2SinkOutput() SalesforceServiceCloudV2SinkOutput {
	return i.ToSalesforceServiceCloudV2SinkOutputWithContext(context.Background())
}

func (i SalesforceServiceCloudV2SinkArgs) ToSalesforceServiceCloudV2SinkOutputWithContext(ctx context.Context) SalesforceServiceCloudV2SinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SalesforceServiceCloudV2SinkOutput)
}

// A copy activity Salesforce Service Cloud V2 sink.
type SalesforceServiceCloudV2SinkOutput struct{ *pulumi.OutputState }

func (SalesforceServiceCloudV2SinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceServiceCloudV2Sink)(nil)).Elem()
}

func (o SalesforceServiceCloudV2SinkOutput) ToSalesforceServiceCloudV2SinkOutput() SalesforceServiceCloudV2SinkOutput {
	return o
}

func (o SalesforceServiceCloudV2SinkOutput) ToSalesforceServiceCloudV2SinkOutputWithContext(ctx context.Context) SalesforceServiceCloudV2SinkOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SalesforceServiceCloudV2SinkOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2Sink) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The name of the external ID field for upsert operation. Default value is 'Id' column. Type: string (or Expression with resultType string).
func (o SalesforceServiceCloudV2SinkOutput) ExternalIdFieldName() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2Sink) interface{} { return v.ExternalIdFieldName }).(pulumi.AnyOutput)
}

// The flag indicating whether or not to ignore null values from input dataset (except key fields) during write operation. Default value is false. If set it to true, it means ADF will leave the data in the destination object unchanged when doing upsert/update operation and insert defined default value when doing insert operation, versus ADF will update the data in the destination object to NULL when doing upsert/update operation and insert NULL value when doing insert operation. Type: boolean (or Expression with resultType boolean).
func (o SalesforceServiceCloudV2SinkOutput) IgnoreNullValues() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2Sink) interface{} { return v.IgnoreNullValues }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o SalesforceServiceCloudV2SinkOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2Sink) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o SalesforceServiceCloudV2SinkOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2Sink) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SalesforceServiceCloudV2SinkOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2Sink) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'SalesforceServiceCloudV2Sink'.
func (o SalesforceServiceCloudV2SinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2Sink) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o SalesforceServiceCloudV2SinkOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2Sink) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SalesforceServiceCloudV2SinkOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2Sink) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// The write behavior for the operation. Default is Insert.
func (o SalesforceServiceCloudV2SinkOutput) WriteBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2Sink) *string { return v.WriteBehavior }).(pulumi.StringPtrOutput)
}

// A copy activity Salesforce Service Cloud V2 sink.
type SalesforceServiceCloudV2SinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The name of the external ID field for upsert operation. Default value is 'Id' column. Type: string (or Expression with resultType string).
	ExternalIdFieldName interface{} `pulumi:"externalIdFieldName"`
	// The flag indicating whether or not to ignore null values from input dataset (except key fields) during write operation. Default value is false. If set it to true, it means ADF will leave the data in the destination object unchanged when doing upsert/update operation and insert defined default value when doing insert operation, versus ADF will update the data in the destination object to NULL when doing upsert/update operation and insert NULL value when doing insert operation. Type: boolean (or Expression with resultType boolean).
	IgnoreNullValues interface{} `pulumi:"ignoreNullValues"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'SalesforceServiceCloudV2Sink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation. Default is Insert.
	WriteBehavior *string `pulumi:"writeBehavior"`
}

// A copy activity Salesforce Service Cloud V2 sink.
type SalesforceServiceCloudV2SinkResponseOutput struct{ *pulumi.OutputState }

func (SalesforceServiceCloudV2SinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceServiceCloudV2SinkResponse)(nil)).Elem()
}

func (o SalesforceServiceCloudV2SinkResponseOutput) ToSalesforceServiceCloudV2SinkResponseOutput() SalesforceServiceCloudV2SinkResponseOutput {
	return o
}

func (o SalesforceServiceCloudV2SinkResponseOutput) ToSalesforceServiceCloudV2SinkResponseOutputWithContext(ctx context.Context) SalesforceServiceCloudV2SinkResponseOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SalesforceServiceCloudV2SinkResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2SinkResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The name of the external ID field for upsert operation. Default value is 'Id' column. Type: string (or Expression with resultType string).
func (o SalesforceServiceCloudV2SinkResponseOutput) ExternalIdFieldName() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2SinkResponse) interface{} { return v.ExternalIdFieldName }).(pulumi.AnyOutput)
}

// The flag indicating whether or not to ignore null values from input dataset (except key fields) during write operation. Default value is false. If set it to true, it means ADF will leave the data in the destination object unchanged when doing upsert/update operation and insert defined default value when doing insert operation, versus ADF will update the data in the destination object to NULL when doing upsert/update operation and insert NULL value when doing insert operation. Type: boolean (or Expression with resultType boolean).
func (o SalesforceServiceCloudV2SinkResponseOutput) IgnoreNullValues() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2SinkResponse) interface{} { return v.IgnoreNullValues }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o SalesforceServiceCloudV2SinkResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2SinkResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o SalesforceServiceCloudV2SinkResponseOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2SinkResponse) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SalesforceServiceCloudV2SinkResponseOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2SinkResponse) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'SalesforceServiceCloudV2Sink'.
func (o SalesforceServiceCloudV2SinkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2SinkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o SalesforceServiceCloudV2SinkResponseOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2SinkResponse) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SalesforceServiceCloudV2SinkResponseOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2SinkResponse) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// The write behavior for the operation. Default is Insert.
func (o SalesforceServiceCloudV2SinkResponseOutput) WriteBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2SinkResponse) *string { return v.WriteBehavior }).(pulumi.StringPtrOutput)
}

// A copy activity Salesforce Service Cloud V2 source.
type SalesforceServiceCloudV2Source struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// This property control whether query result contains Deleted objects. Default is false. Type: boolean (or Expression with resultType boolean).
	IncludeDeletedObjects interface{} `pulumi:"includeDeletedObjects"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	SOQLQuery interface{} `pulumi:"sOQLQuery"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SalesforceServiceCloudV2Source'.
	Type string `pulumi:"type"`
}

// SalesforceServiceCloudV2SourceInput is an input type that accepts SalesforceServiceCloudV2SourceArgs and SalesforceServiceCloudV2SourceOutput values.
// You can construct a concrete instance of `SalesforceServiceCloudV2SourceInput` via:
//
//	SalesforceServiceCloudV2SourceArgs{...}
type SalesforceServiceCloudV2SourceInput interface {
	pulumi.Input

	ToSalesforceServiceCloudV2SourceOutput() SalesforceServiceCloudV2SourceOutput
	ToSalesforceServiceCloudV2SourceOutputWithContext(context.Context) SalesforceServiceCloudV2SourceOutput
}

// A copy activity Salesforce Service Cloud V2 source.
type SalesforceServiceCloudV2SourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// This property control whether query result contains Deleted objects. Default is false. Type: boolean (or Expression with resultType boolean).
	IncludeDeletedObjects pulumi.Input `pulumi:"includeDeletedObjects"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	SOQLQuery pulumi.Input `pulumi:"sOQLQuery"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SalesforceServiceCloudV2Source'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SalesforceServiceCloudV2SourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceServiceCloudV2Source)(nil)).Elem()
}

func (i SalesforceServiceCloudV2SourceArgs) ToSalesforceServiceCloudV2SourceOutput() SalesforceServiceCloudV2SourceOutput {
	return i.ToSalesforceServiceCloudV2SourceOutputWithContext(context.Background())
}

func (i SalesforceServiceCloudV2SourceArgs) ToSalesforceServiceCloudV2SourceOutputWithContext(ctx context.Context) SalesforceServiceCloudV2SourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SalesforceServiceCloudV2SourceOutput)
}

// A copy activity Salesforce Service Cloud V2 source.
type SalesforceServiceCloudV2SourceOutput struct{ *pulumi.OutputState }

func (SalesforceServiceCloudV2SourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceServiceCloudV2Source)(nil)).Elem()
}

func (o SalesforceServiceCloudV2SourceOutput) ToSalesforceServiceCloudV2SourceOutput() SalesforceServiceCloudV2SourceOutput {
	return o
}

func (o SalesforceServiceCloudV2SourceOutput) ToSalesforceServiceCloudV2SourceOutputWithContext(ctx context.Context) SalesforceServiceCloudV2SourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o SalesforceServiceCloudV2SourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2Source) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SalesforceServiceCloudV2SourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2Source) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// This property control whether query result contains Deleted objects. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SalesforceServiceCloudV2SourceOutput) IncludeDeletedObjects() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2Source) interface{} { return v.IncludeDeletedObjects }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SalesforceServiceCloudV2SourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2Source) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Database query. Type: string (or Expression with resultType string).
func (o SalesforceServiceCloudV2SourceOutput) SOQLQuery() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2Source) interface{} { return v.SOQLQuery }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o SalesforceServiceCloudV2SourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2Source) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SalesforceServiceCloudV2SourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2Source) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'SalesforceServiceCloudV2Source'.
func (o SalesforceServiceCloudV2SourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2Source) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Salesforce Service Cloud V2 source.
type SalesforceServiceCloudV2SourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// This property control whether query result contains Deleted objects. Default is false. Type: boolean (or Expression with resultType boolean).
	IncludeDeletedObjects interface{} `pulumi:"includeDeletedObjects"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	SOQLQuery interface{} `pulumi:"sOQLQuery"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SalesforceServiceCloudV2Source'.
	Type string `pulumi:"type"`
}

// A copy activity Salesforce Service Cloud V2 source.
type SalesforceServiceCloudV2SourceResponseOutput struct{ *pulumi.OutputState }

func (SalesforceServiceCloudV2SourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceServiceCloudV2SourceResponse)(nil)).Elem()
}

func (o SalesforceServiceCloudV2SourceResponseOutput) ToSalesforceServiceCloudV2SourceResponseOutput() SalesforceServiceCloudV2SourceResponseOutput {
	return o
}

func (o SalesforceServiceCloudV2SourceResponseOutput) ToSalesforceServiceCloudV2SourceResponseOutputWithContext(ctx context.Context) SalesforceServiceCloudV2SourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o SalesforceServiceCloudV2SourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2SourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SalesforceServiceCloudV2SourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2SourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// This property control whether query result contains Deleted objects. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SalesforceServiceCloudV2SourceResponseOutput) IncludeDeletedObjects() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2SourceResponse) interface{} { return v.IncludeDeletedObjects }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SalesforceServiceCloudV2SourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2SourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Database query. Type: string (or Expression with resultType string).
func (o SalesforceServiceCloudV2SourceResponseOutput) SOQLQuery() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2SourceResponse) interface{} { return v.SOQLQuery }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o SalesforceServiceCloudV2SourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2SourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SalesforceServiceCloudV2SourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2SourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'SalesforceServiceCloudV2Source'.
func (o SalesforceServiceCloudV2SourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceServiceCloudV2SourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Salesforce sink.
type SalesforceSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The name of the external ID field for upsert operation. Default value is 'Id' column. Type: string (or Expression with resultType string).
	ExternalIdFieldName interface{} `pulumi:"externalIdFieldName"`
	// The flag indicating whether or not to ignore null values from input dataset (except key fields) during write operation. Default value is false. If set it to true, it means ADF will leave the data in the destination object unchanged when doing upsert/update operation and insert defined default value when doing insert operation, versus ADF will update the data in the destination object to NULL when doing upsert/update operation and insert NULL value when doing insert operation. Type: boolean (or Expression with resultType boolean).
	IgnoreNullValues interface{} `pulumi:"ignoreNullValues"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'SalesforceSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation. Default is Insert.
	WriteBehavior *string `pulumi:"writeBehavior"`
}

// SalesforceSinkInput is an input type that accepts SalesforceSinkArgs and SalesforceSinkOutput values.
// You can construct a concrete instance of `SalesforceSinkInput` via:
//
//	SalesforceSinkArgs{...}
type SalesforceSinkInput interface {
	pulumi.Input

	ToSalesforceSinkOutput() SalesforceSinkOutput
	ToSalesforceSinkOutputWithContext(context.Context) SalesforceSinkOutput
}

// A copy activity Salesforce sink.
type SalesforceSinkArgs struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The name of the external ID field for upsert operation. Default value is 'Id' column. Type: string (or Expression with resultType string).
	ExternalIdFieldName pulumi.Input `pulumi:"externalIdFieldName"`
	// The flag indicating whether or not to ignore null values from input dataset (except key fields) during write operation. Default value is false. If set it to true, it means ADF will leave the data in the destination object unchanged when doing upsert/update operation and insert defined default value when doing insert operation, versus ADF will update the data in the destination object to NULL when doing upsert/update operation and insert NULL value when doing insert operation. Type: boolean (or Expression with resultType boolean).
	IgnoreNullValues pulumi.Input `pulumi:"ignoreNullValues"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount pulumi.Input `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait pulumi.Input `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'SalesforceSink'.
	Type pulumi.StringInput `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize pulumi.Input `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout pulumi.Input `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation. Default is Insert.
	WriteBehavior pulumi.StringPtrInput `pulumi:"writeBehavior"`
}

func (SalesforceSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceSink)(nil)).Elem()
}

func (i SalesforceSinkArgs) ToSalesforceSinkOutput() SalesforceSinkOutput {
	return i.ToSalesforceSinkOutputWithContext(context.Background())
}

func (i SalesforceSinkArgs) ToSalesforceSinkOutputWithContext(ctx context.Context) SalesforceSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SalesforceSinkOutput)
}

// A copy activity Salesforce sink.
type SalesforceSinkOutput struct{ *pulumi.OutputState }

func (SalesforceSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceSink)(nil)).Elem()
}

func (o SalesforceSinkOutput) ToSalesforceSinkOutput() SalesforceSinkOutput {
	return o
}

func (o SalesforceSinkOutput) ToSalesforceSinkOutputWithContext(ctx context.Context) SalesforceSinkOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SalesforceSinkOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceSink) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The name of the external ID field for upsert operation. Default value is 'Id' column. Type: string (or Expression with resultType string).
func (o SalesforceSinkOutput) ExternalIdFieldName() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceSink) interface{} { return v.ExternalIdFieldName }).(pulumi.AnyOutput)
}

// The flag indicating whether or not to ignore null values from input dataset (except key fields) during write operation. Default value is false. If set it to true, it means ADF will leave the data in the destination object unchanged when doing upsert/update operation and insert defined default value when doing insert operation, versus ADF will update the data in the destination object to NULL when doing upsert/update operation and insert NULL value when doing insert operation. Type: boolean (or Expression with resultType boolean).
func (o SalesforceSinkOutput) IgnoreNullValues() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceSink) interface{} { return v.IgnoreNullValues }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o SalesforceSinkOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceSink) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o SalesforceSinkOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceSink) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SalesforceSinkOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceSink) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'SalesforceSink'.
func (o SalesforceSinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceSink) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o SalesforceSinkOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceSink) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SalesforceSinkOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceSink) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// The write behavior for the operation. Default is Insert.
func (o SalesforceSinkOutput) WriteBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceSink) *string { return v.WriteBehavior }).(pulumi.StringPtrOutput)
}

// A copy activity Salesforce sink.
type SalesforceSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The name of the external ID field for upsert operation. Default value is 'Id' column. Type: string (or Expression with resultType string).
	ExternalIdFieldName interface{} `pulumi:"externalIdFieldName"`
	// The flag indicating whether or not to ignore null values from input dataset (except key fields) during write operation. Default value is false. If set it to true, it means ADF will leave the data in the destination object unchanged when doing upsert/update operation and insert defined default value when doing insert operation, versus ADF will update the data in the destination object to NULL when doing upsert/update operation and insert NULL value when doing insert operation. Type: boolean (or Expression with resultType boolean).
	IgnoreNullValues interface{} `pulumi:"ignoreNullValues"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'SalesforceSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation. Default is Insert.
	WriteBehavior *string `pulumi:"writeBehavior"`
}

// A copy activity Salesforce sink.
type SalesforceSinkResponseOutput struct{ *pulumi.OutputState }

func (SalesforceSinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceSinkResponse)(nil)).Elem()
}

func (o SalesforceSinkResponseOutput) ToSalesforceSinkResponseOutput() SalesforceSinkResponseOutput {
	return o
}

func (o SalesforceSinkResponseOutput) ToSalesforceSinkResponseOutputWithContext(ctx context.Context) SalesforceSinkResponseOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SalesforceSinkResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceSinkResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The name of the external ID field for upsert operation. Default value is 'Id' column. Type: string (or Expression with resultType string).
func (o SalesforceSinkResponseOutput) ExternalIdFieldName() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceSinkResponse) interface{} { return v.ExternalIdFieldName }).(pulumi.AnyOutput)
}

// The flag indicating whether or not to ignore null values from input dataset (except key fields) during write operation. Default value is false. If set it to true, it means ADF will leave the data in the destination object unchanged when doing upsert/update operation and insert defined default value when doing insert operation, versus ADF will update the data in the destination object to NULL when doing upsert/update operation and insert NULL value when doing insert operation. Type: boolean (or Expression with resultType boolean).
func (o SalesforceSinkResponseOutput) IgnoreNullValues() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceSinkResponse) interface{} { return v.IgnoreNullValues }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o SalesforceSinkResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceSinkResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o SalesforceSinkResponseOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceSinkResponse) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SalesforceSinkResponseOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceSinkResponse) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'SalesforceSink'.
func (o SalesforceSinkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceSinkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o SalesforceSinkResponseOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceSinkResponse) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SalesforceSinkResponseOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceSinkResponse) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// The write behavior for the operation. Default is Insert.
func (o SalesforceSinkResponseOutput) WriteBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceSinkResponse) *string { return v.WriteBehavior }).(pulumi.StringPtrOutput)
}

// A copy activity Salesforce source.
type SalesforceSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// The read behavior for the operation. Default is Query. Allowed values: Query/QueryAll. Type: string (or Expression with resultType string).
	ReadBehavior interface{} `pulumi:"readBehavior"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SalesforceSource'.
	Type string `pulumi:"type"`
}

// SalesforceSourceInput is an input type that accepts SalesforceSourceArgs and SalesforceSourceOutput values.
// You can construct a concrete instance of `SalesforceSourceInput` via:
//
//	SalesforceSourceArgs{...}
type SalesforceSourceInput interface {
	pulumi.Input

	ToSalesforceSourceOutput() SalesforceSourceOutput
	ToSalesforceSourceOutputWithContext(context.Context) SalesforceSourceOutput
}

// A copy activity Salesforce source.
type SalesforceSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// The read behavior for the operation. Default is Query. Allowed values: Query/QueryAll. Type: string (or Expression with resultType string).
	ReadBehavior pulumi.Input `pulumi:"readBehavior"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SalesforceSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SalesforceSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceSource)(nil)).Elem()
}

func (i SalesforceSourceArgs) ToSalesforceSourceOutput() SalesforceSourceOutput {
	return i.ToSalesforceSourceOutputWithContext(context.Background())
}

func (i SalesforceSourceArgs) ToSalesforceSourceOutputWithContext(ctx context.Context) SalesforceSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SalesforceSourceOutput)
}

// A copy activity Salesforce source.
type SalesforceSourceOutput struct{ *pulumi.OutputState }

func (SalesforceSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceSource)(nil)).Elem()
}

func (o SalesforceSourceOutput) ToSalesforceSourceOutput() SalesforceSourceOutput {
	return o
}

func (o SalesforceSourceOutput) ToSalesforceSourceOutputWithContext(ctx context.Context) SalesforceSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o SalesforceSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SalesforceSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SalesforceSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Database query. Type: string (or Expression with resultType string).
func (o SalesforceSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SalesforceSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// The read behavior for the operation. Default is Query. Allowed values: Query/QueryAll. Type: string (or Expression with resultType string).
func (o SalesforceSourceOutput) ReadBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceSource) interface{} { return v.ReadBehavior }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o SalesforceSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SalesforceSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'SalesforceSource'.
func (o SalesforceSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Salesforce source.
type SalesforceSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// The read behavior for the operation. Default is Query. Allowed values: Query/QueryAll. Type: string (or Expression with resultType string).
	ReadBehavior interface{} `pulumi:"readBehavior"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SalesforceSource'.
	Type string `pulumi:"type"`
}

// A copy activity Salesforce source.
type SalesforceSourceResponseOutput struct{ *pulumi.OutputState }

func (SalesforceSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceSourceResponse)(nil)).Elem()
}

func (o SalesforceSourceResponseOutput) ToSalesforceSourceResponseOutput() SalesforceSourceResponseOutput {
	return o
}

func (o SalesforceSourceResponseOutput) ToSalesforceSourceResponseOutputWithContext(ctx context.Context) SalesforceSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o SalesforceSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SalesforceSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SalesforceSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Database query. Type: string (or Expression with resultType string).
func (o SalesforceSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SalesforceSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// The read behavior for the operation. Default is Query. Allowed values: Query/QueryAll. Type: string (or Expression with resultType string).
func (o SalesforceSourceResponseOutput) ReadBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceSourceResponse) interface{} { return v.ReadBehavior }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o SalesforceSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SalesforceSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'SalesforceSource'.
func (o SalesforceSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for Salesforce V2.
type SalesforceV2LinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The Salesforce API version used in ADF. The version must be larger than or equal to 47.0 which is required by Salesforce BULK API 2.0. Type: string (or Expression with resultType string).
	ApiVersion interface{} `pulumi:"apiVersion"`
	// The authentication type to be used to connect to the Salesforce. Currently, we only support OAuth2ClientCredentials, it is also the default value
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The client Id for OAuth 2.0 Client Credentials Flow authentication of the Salesforce instance. Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The client secret for OAuth 2.0 Client Credentials Flow authentication of the Salesforce instance.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The URL of Salesforce instance. For example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
	EnvironmentUrl interface{} `pulumi:"environmentUrl"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'SalesforceV2'.
	Type string `pulumi:"type"`
}

// SalesforceV2LinkedServiceInput is an input type that accepts SalesforceV2LinkedServiceArgs and SalesforceV2LinkedServiceOutput values.
// You can construct a concrete instance of `SalesforceV2LinkedServiceInput` via:
//
//	SalesforceV2LinkedServiceArgs{...}
type SalesforceV2LinkedServiceInput interface {
	pulumi.Input

	ToSalesforceV2LinkedServiceOutput() SalesforceV2LinkedServiceOutput
	ToSalesforceV2LinkedServiceOutputWithContext(context.Context) SalesforceV2LinkedServiceOutput
}

// Linked service for Salesforce V2.
type SalesforceV2LinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The Salesforce API version used in ADF. The version must be larger than or equal to 47.0 which is required by Salesforce BULK API 2.0. Type: string (or Expression with resultType string).
	ApiVersion pulumi.Input `pulumi:"apiVersion"`
	// The authentication type to be used to connect to the Salesforce. Currently, we only support OAuth2ClientCredentials, it is also the default value
	AuthenticationType pulumi.Input `pulumi:"authenticationType"`
	// The client Id for OAuth 2.0 Client Credentials Flow authentication of the Salesforce instance. Type: string (or Expression with resultType string).
	ClientId pulumi.Input `pulumi:"clientId"`
	// The client secret for OAuth 2.0 Client Credentials Flow authentication of the Salesforce instance.
	ClientSecret pulumi.Input `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// The URL of Salesforce instance. For example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
	EnvironmentUrl pulumi.Input `pulumi:"environmentUrl"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'SalesforceV2'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SalesforceV2LinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceV2LinkedService)(nil)).Elem()
}

func (i SalesforceV2LinkedServiceArgs) ToSalesforceV2LinkedServiceOutput() SalesforceV2LinkedServiceOutput {
	return i.ToSalesforceV2LinkedServiceOutputWithContext(context.Background())
}

func (i SalesforceV2LinkedServiceArgs) ToSalesforceV2LinkedServiceOutputWithContext(ctx context.Context) SalesforceV2LinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SalesforceV2LinkedServiceOutput)
}

// Linked service for Salesforce V2.
type SalesforceV2LinkedServiceOutput struct{ *pulumi.OutputState }

func (SalesforceV2LinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceV2LinkedService)(nil)).Elem()
}

func (o SalesforceV2LinkedServiceOutput) ToSalesforceV2LinkedServiceOutput() SalesforceV2LinkedServiceOutput {
	return o
}

func (o SalesforceV2LinkedServiceOutput) ToSalesforceV2LinkedServiceOutputWithContext(ctx context.Context) SalesforceV2LinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SalesforceV2LinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SalesforceV2LinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The Salesforce API version used in ADF. The version must be larger than or equal to 47.0 which is required by Salesforce BULK API 2.0. Type: string (or Expression with resultType string).
func (o SalesforceV2LinkedServiceOutput) ApiVersion() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2LinkedService) interface{} { return v.ApiVersion }).(pulumi.AnyOutput)
}

// The authentication type to be used to connect to the Salesforce. Currently, we only support OAuth2ClientCredentials, it is also the default value
func (o SalesforceV2LinkedServiceOutput) AuthenticationType() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2LinkedService) interface{} { return v.AuthenticationType }).(pulumi.AnyOutput)
}

// The client Id for OAuth 2.0 Client Credentials Flow authentication of the Salesforce instance. Type: string (or Expression with resultType string).
func (o SalesforceV2LinkedServiceOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2LinkedService) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret for OAuth 2.0 Client Credentials Flow authentication of the Salesforce instance.
func (o SalesforceV2LinkedServiceOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2LinkedService) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o SalesforceV2LinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v SalesforceV2LinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o SalesforceV2LinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceV2LinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o SalesforceV2LinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceV2LinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The URL of Salesforce instance. For example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
func (o SalesforceV2LinkedServiceOutput) EnvironmentUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2LinkedService) interface{} { return v.EnvironmentUrl }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SalesforceV2LinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SalesforceV2LinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
// Expected value is 'SalesforceV2'.
func (o SalesforceV2LinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceV2LinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for Salesforce V2.
type SalesforceV2LinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The Salesforce API version used in ADF. The version must be larger than or equal to 47.0 which is required by Salesforce BULK API 2.0. Type: string (or Expression with resultType string).
	ApiVersion interface{} `pulumi:"apiVersion"`
	// The authentication type to be used to connect to the Salesforce. Currently, we only support OAuth2ClientCredentials, it is also the default value
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The client Id for OAuth 2.0 Client Credentials Flow authentication of the Salesforce instance. Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The client secret for OAuth 2.0 Client Credentials Flow authentication of the Salesforce instance.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The URL of Salesforce instance. For example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
	EnvironmentUrl interface{} `pulumi:"environmentUrl"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'SalesforceV2'.
	Type string `pulumi:"type"`
}

// Linked service for Salesforce V2.
type SalesforceV2LinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SalesforceV2LinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceV2LinkedServiceResponse)(nil)).Elem()
}

func (o SalesforceV2LinkedServiceResponseOutput) ToSalesforceV2LinkedServiceResponseOutput() SalesforceV2LinkedServiceResponseOutput {
	return o
}

func (o SalesforceV2LinkedServiceResponseOutput) ToSalesforceV2LinkedServiceResponseOutputWithContext(ctx context.Context) SalesforceV2LinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SalesforceV2LinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SalesforceV2LinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The Salesforce API version used in ADF. The version must be larger than or equal to 47.0 which is required by Salesforce BULK API 2.0. Type: string (or Expression with resultType string).
func (o SalesforceV2LinkedServiceResponseOutput) ApiVersion() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2LinkedServiceResponse) interface{} { return v.ApiVersion }).(pulumi.AnyOutput)
}

// The authentication type to be used to connect to the Salesforce. Currently, we only support OAuth2ClientCredentials, it is also the default value
func (o SalesforceV2LinkedServiceResponseOutput) AuthenticationType() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2LinkedServiceResponse) interface{} { return v.AuthenticationType }).(pulumi.AnyOutput)
}

// The client Id for OAuth 2.0 Client Credentials Flow authentication of the Salesforce instance. Type: string (or Expression with resultType string).
func (o SalesforceV2LinkedServiceResponseOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2LinkedServiceResponse) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret for OAuth 2.0 Client Credentials Flow authentication of the Salesforce instance.
func (o SalesforceV2LinkedServiceResponseOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2LinkedServiceResponse) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o SalesforceV2LinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SalesforceV2LinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o SalesforceV2LinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceV2LinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o SalesforceV2LinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceV2LinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The URL of Salesforce instance. For example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
func (o SalesforceV2LinkedServiceResponseOutput) EnvironmentUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2LinkedServiceResponse) interface{} { return v.EnvironmentUrl }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SalesforceV2LinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SalesforceV2LinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
// Expected value is 'SalesforceV2'.
func (o SalesforceV2LinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceV2LinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Salesforce V2 object dataset.
type SalesforceV2ObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The Salesforce V2 object API name. Type: string (or Expression with resultType string).
	ObjectApiName interface{} `pulumi:"objectApiName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Salesforce V2 report Id. Type: string (or Expression with resultType string).
	ReportId interface{} `pulumi:"reportId"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SalesforceV2Object'.
	Type string `pulumi:"type"`
}

// SalesforceV2ObjectDatasetInput is an input type that accepts SalesforceV2ObjectDatasetArgs and SalesforceV2ObjectDatasetOutput values.
// You can construct a concrete instance of `SalesforceV2ObjectDatasetInput` via:
//
//	SalesforceV2ObjectDatasetArgs{...}
type SalesforceV2ObjectDatasetInput interface {
	pulumi.Input

	ToSalesforceV2ObjectDatasetOutput() SalesforceV2ObjectDatasetOutput
	ToSalesforceV2ObjectDatasetOutputWithContext(context.Context) SalesforceV2ObjectDatasetOutput
}

// The Salesforce V2 object dataset.
type SalesforceV2ObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// The Salesforce V2 object API name. Type: string (or Expression with resultType string).
	ObjectApiName pulumi.Input `pulumi:"objectApiName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The Salesforce V2 report Id. Type: string (or Expression with resultType string).
	ReportId pulumi.Input `pulumi:"reportId"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SalesforceV2Object'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SalesforceV2ObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceV2ObjectDataset)(nil)).Elem()
}

func (i SalesforceV2ObjectDatasetArgs) ToSalesforceV2ObjectDatasetOutput() SalesforceV2ObjectDatasetOutput {
	return i.ToSalesforceV2ObjectDatasetOutputWithContext(context.Background())
}

func (i SalesforceV2ObjectDatasetArgs) ToSalesforceV2ObjectDatasetOutputWithContext(ctx context.Context) SalesforceV2ObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SalesforceV2ObjectDatasetOutput)
}

// The Salesforce V2 object dataset.
type SalesforceV2ObjectDatasetOutput struct{ *pulumi.OutputState }

func (SalesforceV2ObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceV2ObjectDataset)(nil)).Elem()
}

func (o SalesforceV2ObjectDatasetOutput) ToSalesforceV2ObjectDatasetOutput() SalesforceV2ObjectDatasetOutput {
	return o
}

func (o SalesforceV2ObjectDatasetOutput) ToSalesforceV2ObjectDatasetOutputWithContext(ctx context.Context) SalesforceV2ObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SalesforceV2ObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SalesforceV2ObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SalesforceV2ObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceV2ObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SalesforceV2ObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v SalesforceV2ObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o SalesforceV2ObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v SalesforceV2ObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// The Salesforce V2 object API name. Type: string (or Expression with resultType string).
func (o SalesforceV2ObjectDatasetOutput) ObjectApiName() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2ObjectDataset) interface{} { return v.ObjectApiName }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o SalesforceV2ObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SalesforceV2ObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The Salesforce V2 report Id. Type: string (or Expression with resultType string).
func (o SalesforceV2ObjectDatasetOutput) ReportId() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2ObjectDataset) interface{} { return v.ReportId }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SalesforceV2ObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2ObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SalesforceV2ObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2ObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'SalesforceV2Object'.
func (o SalesforceV2ObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceV2ObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Salesforce V2 object dataset.
type SalesforceV2ObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The Salesforce V2 object API name. Type: string (or Expression with resultType string).
	ObjectApiName interface{} `pulumi:"objectApiName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Salesforce V2 report Id. Type: string (or Expression with resultType string).
	ReportId interface{} `pulumi:"reportId"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SalesforceV2Object'.
	Type string `pulumi:"type"`
}

// The Salesforce V2 object dataset.
type SalesforceV2ObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (SalesforceV2ObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceV2ObjectDatasetResponse)(nil)).Elem()
}

func (o SalesforceV2ObjectDatasetResponseOutput) ToSalesforceV2ObjectDatasetResponseOutput() SalesforceV2ObjectDatasetResponseOutput {
	return o
}

func (o SalesforceV2ObjectDatasetResponseOutput) ToSalesforceV2ObjectDatasetResponseOutputWithContext(ctx context.Context) SalesforceV2ObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SalesforceV2ObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SalesforceV2ObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SalesforceV2ObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceV2ObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SalesforceV2ObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v SalesforceV2ObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o SalesforceV2ObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v SalesforceV2ObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// The Salesforce V2 object API name. Type: string (or Expression with resultType string).
func (o SalesforceV2ObjectDatasetResponseOutput) ObjectApiName() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2ObjectDatasetResponse) interface{} { return v.ObjectApiName }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o SalesforceV2ObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SalesforceV2ObjectDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The Salesforce V2 report Id. Type: string (or Expression with resultType string).
func (o SalesforceV2ObjectDatasetResponseOutput) ReportId() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2ObjectDatasetResponse) interface{} { return v.ReportId }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SalesforceV2ObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2ObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SalesforceV2ObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2ObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'SalesforceV2Object'.
func (o SalesforceV2ObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceV2ObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Salesforce V2 sink.
type SalesforceV2Sink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The name of the external ID field for upsert operation. Default value is 'Id' column. Type: string (or Expression with resultType string).
	ExternalIdFieldName interface{} `pulumi:"externalIdFieldName"`
	// The flag indicating whether or not to ignore null values from input dataset (except key fields) during write operation. Default value is false. If set it to true, it means ADF will leave the data in the destination object unchanged when doing upsert/update operation and insert defined default value when doing insert operation, versus ADF will update the data in the destination object to NULL when doing upsert/update operation and insert NULL value when doing insert operation. Type: boolean (or Expression with resultType boolean).
	IgnoreNullValues interface{} `pulumi:"ignoreNullValues"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'SalesforceV2Sink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation. Default is Insert.
	WriteBehavior *string `pulumi:"writeBehavior"`
}

// SalesforceV2SinkInput is an input type that accepts SalesforceV2SinkArgs and SalesforceV2SinkOutput values.
// You can construct a concrete instance of `SalesforceV2SinkInput` via:
//
//	SalesforceV2SinkArgs{...}
type SalesforceV2SinkInput interface {
	pulumi.Input

	ToSalesforceV2SinkOutput() SalesforceV2SinkOutput
	ToSalesforceV2SinkOutputWithContext(context.Context) SalesforceV2SinkOutput
}

// A copy activity Salesforce V2 sink.
type SalesforceV2SinkArgs struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The name of the external ID field for upsert operation. Default value is 'Id' column. Type: string (or Expression with resultType string).
	ExternalIdFieldName pulumi.Input `pulumi:"externalIdFieldName"`
	// The flag indicating whether or not to ignore null values from input dataset (except key fields) during write operation. Default value is false. If set it to true, it means ADF will leave the data in the destination object unchanged when doing upsert/update operation and insert defined default value when doing insert operation, versus ADF will update the data in the destination object to NULL when doing upsert/update operation and insert NULL value when doing insert operation. Type: boolean (or Expression with resultType boolean).
	IgnoreNullValues pulumi.Input `pulumi:"ignoreNullValues"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount pulumi.Input `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait pulumi.Input `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'SalesforceV2Sink'.
	Type pulumi.StringInput `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize pulumi.Input `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout pulumi.Input `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation. Default is Insert.
	WriteBehavior pulumi.StringPtrInput `pulumi:"writeBehavior"`
}

func (SalesforceV2SinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceV2Sink)(nil)).Elem()
}

func (i SalesforceV2SinkArgs) ToSalesforceV2SinkOutput() SalesforceV2SinkOutput {
	return i.ToSalesforceV2SinkOutputWithContext(context.Background())
}

func (i SalesforceV2SinkArgs) ToSalesforceV2SinkOutputWithContext(ctx context.Context) SalesforceV2SinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SalesforceV2SinkOutput)
}

// A copy activity Salesforce V2 sink.
type SalesforceV2SinkOutput struct{ *pulumi.OutputState }

func (SalesforceV2SinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceV2Sink)(nil)).Elem()
}

func (o SalesforceV2SinkOutput) ToSalesforceV2SinkOutput() SalesforceV2SinkOutput {
	return o
}

func (o SalesforceV2SinkOutput) ToSalesforceV2SinkOutputWithContext(ctx context.Context) SalesforceV2SinkOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SalesforceV2SinkOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2Sink) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The name of the external ID field for upsert operation. Default value is 'Id' column. Type: string (or Expression with resultType string).
func (o SalesforceV2SinkOutput) ExternalIdFieldName() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2Sink) interface{} { return v.ExternalIdFieldName }).(pulumi.AnyOutput)
}

// The flag indicating whether or not to ignore null values from input dataset (except key fields) during write operation. Default value is false. If set it to true, it means ADF will leave the data in the destination object unchanged when doing upsert/update operation and insert defined default value when doing insert operation, versus ADF will update the data in the destination object to NULL when doing upsert/update operation and insert NULL value when doing insert operation. Type: boolean (or Expression with resultType boolean).
func (o SalesforceV2SinkOutput) IgnoreNullValues() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2Sink) interface{} { return v.IgnoreNullValues }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o SalesforceV2SinkOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2Sink) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o SalesforceV2SinkOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2Sink) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SalesforceV2SinkOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2Sink) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'SalesforceV2Sink'.
func (o SalesforceV2SinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceV2Sink) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o SalesforceV2SinkOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2Sink) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SalesforceV2SinkOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2Sink) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// The write behavior for the operation. Default is Insert.
func (o SalesforceV2SinkOutput) WriteBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceV2Sink) *string { return v.WriteBehavior }).(pulumi.StringPtrOutput)
}

// A copy activity Salesforce V2 sink.
type SalesforceV2SinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The name of the external ID field for upsert operation. Default value is 'Id' column. Type: string (or Expression with resultType string).
	ExternalIdFieldName interface{} `pulumi:"externalIdFieldName"`
	// The flag indicating whether or not to ignore null values from input dataset (except key fields) during write operation. Default value is false. If set it to true, it means ADF will leave the data in the destination object unchanged when doing upsert/update operation and insert defined default value when doing insert operation, versus ADF will update the data in the destination object to NULL when doing upsert/update operation and insert NULL value when doing insert operation. Type: boolean (or Expression with resultType boolean).
	IgnoreNullValues interface{} `pulumi:"ignoreNullValues"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'SalesforceV2Sink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation. Default is Insert.
	WriteBehavior *string `pulumi:"writeBehavior"`
}

// A copy activity Salesforce V2 sink.
type SalesforceV2SinkResponseOutput struct{ *pulumi.OutputState }

func (SalesforceV2SinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceV2SinkResponse)(nil)).Elem()
}

func (o SalesforceV2SinkResponseOutput) ToSalesforceV2SinkResponseOutput() SalesforceV2SinkResponseOutput {
	return o
}

func (o SalesforceV2SinkResponseOutput) ToSalesforceV2SinkResponseOutputWithContext(ctx context.Context) SalesforceV2SinkResponseOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SalesforceV2SinkResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2SinkResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The name of the external ID field for upsert operation. Default value is 'Id' column. Type: string (or Expression with resultType string).
func (o SalesforceV2SinkResponseOutput) ExternalIdFieldName() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2SinkResponse) interface{} { return v.ExternalIdFieldName }).(pulumi.AnyOutput)
}

// The flag indicating whether or not to ignore null values from input dataset (except key fields) during write operation. Default value is false. If set it to true, it means ADF will leave the data in the destination object unchanged when doing upsert/update operation and insert defined default value when doing insert operation, versus ADF will update the data in the destination object to NULL when doing upsert/update operation and insert NULL value when doing insert operation. Type: boolean (or Expression with resultType boolean).
func (o SalesforceV2SinkResponseOutput) IgnoreNullValues() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2SinkResponse) interface{} { return v.IgnoreNullValues }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o SalesforceV2SinkResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2SinkResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o SalesforceV2SinkResponseOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2SinkResponse) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SalesforceV2SinkResponseOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2SinkResponse) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'SalesforceV2Sink'.
func (o SalesforceV2SinkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceV2SinkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o SalesforceV2SinkResponseOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2SinkResponse) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SalesforceV2SinkResponseOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2SinkResponse) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// The write behavior for the operation. Default is Insert.
func (o SalesforceV2SinkResponseOutput) WriteBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceV2SinkResponse) *string { return v.WriteBehavior }).(pulumi.StringPtrOutput)
}

// A copy activity Salesforce V2 source.
type SalesforceV2Source struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// This property control whether query result contains Deleted objects. Default is false. Type: boolean (or Expression with resultType boolean).
	IncludeDeletedObjects interface{} `pulumi:"includeDeletedObjects"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Database query. Type: string (or Expression with resultType string).
	SOQLQuery interface{} `pulumi:"sOQLQuery"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SalesforceV2Source'.
	Type string `pulumi:"type"`
}

// SalesforceV2SourceInput is an input type that accepts SalesforceV2SourceArgs and SalesforceV2SourceOutput values.
// You can construct a concrete instance of `SalesforceV2SourceInput` via:
//
//	SalesforceV2SourceArgs{...}
type SalesforceV2SourceInput interface {
	pulumi.Input

	ToSalesforceV2SourceOutput() SalesforceV2SourceOutput
	ToSalesforceV2SourceOutputWithContext(context.Context) SalesforceV2SourceOutput
}

// A copy activity Salesforce V2 source.
type SalesforceV2SourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// This property control whether query result contains Deleted objects. Default is false. Type: boolean (or Expression with resultType boolean).
	IncludeDeletedObjects pulumi.Input `pulumi:"includeDeletedObjects"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Database query. Type: string (or Expression with resultType string).
	SOQLQuery pulumi.Input `pulumi:"sOQLQuery"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SalesforceV2Source'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SalesforceV2SourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceV2Source)(nil)).Elem()
}

func (i SalesforceV2SourceArgs) ToSalesforceV2SourceOutput() SalesforceV2SourceOutput {
	return i.ToSalesforceV2SourceOutputWithContext(context.Background())
}

func (i SalesforceV2SourceArgs) ToSalesforceV2SourceOutputWithContext(ctx context.Context) SalesforceV2SourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SalesforceV2SourceOutput)
}

// A copy activity Salesforce V2 source.
type SalesforceV2SourceOutput struct{ *pulumi.OutputState }

func (SalesforceV2SourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceV2Source)(nil)).Elem()
}

func (o SalesforceV2SourceOutput) ToSalesforceV2SourceOutput() SalesforceV2SourceOutput {
	return o
}

func (o SalesforceV2SourceOutput) ToSalesforceV2SourceOutputWithContext(ctx context.Context) SalesforceV2SourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o SalesforceV2SourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2Source) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SalesforceV2SourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2Source) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// This property control whether query result contains Deleted objects. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SalesforceV2SourceOutput) IncludeDeletedObjects() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2Source) interface{} { return v.IncludeDeletedObjects }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SalesforceV2SourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2Source) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SalesforceV2SourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2Source) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Database query. Type: string (or Expression with resultType string).
func (o SalesforceV2SourceOutput) SOQLQuery() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2Source) interface{} { return v.SOQLQuery }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o SalesforceV2SourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2Source) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SalesforceV2SourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2Source) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'SalesforceV2Source'.
func (o SalesforceV2SourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceV2Source) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Salesforce V2 source.
type SalesforceV2SourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// This property control whether query result contains Deleted objects. Default is false. Type: boolean (or Expression with resultType boolean).
	IncludeDeletedObjects interface{} `pulumi:"includeDeletedObjects"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Database query. Type: string (or Expression with resultType string).
	SOQLQuery interface{} `pulumi:"sOQLQuery"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SalesforceV2Source'.
	Type string `pulumi:"type"`
}

// A copy activity Salesforce V2 source.
type SalesforceV2SourceResponseOutput struct{ *pulumi.OutputState }

func (SalesforceV2SourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceV2SourceResponse)(nil)).Elem()
}

func (o SalesforceV2SourceResponseOutput) ToSalesforceV2SourceResponseOutput() SalesforceV2SourceResponseOutput {
	return o
}

func (o SalesforceV2SourceResponseOutput) ToSalesforceV2SourceResponseOutputWithContext(ctx context.Context) SalesforceV2SourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o SalesforceV2SourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2SourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SalesforceV2SourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2SourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// This property control whether query result contains Deleted objects. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SalesforceV2SourceResponseOutput) IncludeDeletedObjects() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2SourceResponse) interface{} { return v.IncludeDeletedObjects }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SalesforceV2SourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2SourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SalesforceV2SourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2SourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Database query. Type: string (or Expression with resultType string).
func (o SalesforceV2SourceResponseOutput) SOQLQuery() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2SourceResponse) interface{} { return v.SOQLQuery }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o SalesforceV2SourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2SourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SalesforceV2SourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SalesforceV2SourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'SalesforceV2Source'.
func (o SalesforceV2SourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceV2SourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// SAP Business Warehouse Linked Service.
type SapBWLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Client ID of the client on the BW system. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to access the SAP BW server.
	Password interface{} `pulumi:"password"`
	// Host name of the SAP BW instance. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// System number of the BW system. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
	SystemNumber interface{} `pulumi:"systemNumber"`
	// Type of linked service.
	// Expected value is 'SapBW'.
	Type string `pulumi:"type"`
	// Username to access the SAP BW server. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// SapBWLinkedServiceInput is an input type that accepts SapBWLinkedServiceArgs and SapBWLinkedServiceOutput values.
// You can construct a concrete instance of `SapBWLinkedServiceInput` via:
//
//	SapBWLinkedServiceArgs{...}
type SapBWLinkedServiceInput interface {
	pulumi.Input

	ToSapBWLinkedServiceOutput() SapBWLinkedServiceOutput
	ToSapBWLinkedServiceOutputWithContext(context.Context) SapBWLinkedServiceOutput
}

// SAP Business Warehouse Linked Service.
type SapBWLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Client ID of the client on the BW system. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
	ClientId pulumi.Input `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password to access the SAP BW server.
	Password pulumi.Input `pulumi:"password"`
	// Host name of the SAP BW instance. Type: string (or Expression with resultType string).
	Server pulumi.Input `pulumi:"server"`
	// System number of the BW system. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
	SystemNumber pulumi.Input `pulumi:"systemNumber"`
	// Type of linked service.
	// Expected value is 'SapBW'.
	Type pulumi.StringInput `pulumi:"type"`
	// Username to access the SAP BW server. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (SapBWLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapBWLinkedService)(nil)).Elem()
}

func (i SapBWLinkedServiceArgs) ToSapBWLinkedServiceOutput() SapBWLinkedServiceOutput {
	return i.ToSapBWLinkedServiceOutputWithContext(context.Background())
}

func (i SapBWLinkedServiceArgs) ToSapBWLinkedServiceOutputWithContext(ctx context.Context) SapBWLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapBWLinkedServiceOutput)
}

// SAP Business Warehouse Linked Service.
type SapBWLinkedServiceOutput struct{ *pulumi.OutputState }

func (SapBWLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapBWLinkedService)(nil)).Elem()
}

func (o SapBWLinkedServiceOutput) ToSapBWLinkedServiceOutput() SapBWLinkedServiceOutput {
	return o
}

func (o SapBWLinkedServiceOutput) ToSapBWLinkedServiceOutputWithContext(ctx context.Context) SapBWLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SapBWLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapBWLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Client ID of the client on the BW system. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
func (o SapBWLinkedServiceOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBWLinkedService) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o SapBWLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v SapBWLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o SapBWLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapBWLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o SapBWLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapBWLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o SapBWLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SapBWLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Password to access the SAP BW server.
func (o SapBWLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBWLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Host name of the SAP BW instance. Type: string (or Expression with resultType string).
func (o SapBWLinkedServiceOutput) Server() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBWLinkedService) interface{} { return v.Server }).(pulumi.AnyOutput)
}

// System number of the BW system. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
func (o SapBWLinkedServiceOutput) SystemNumber() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBWLinkedService) interface{} { return v.SystemNumber }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'SapBW'.
func (o SapBWLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapBWLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Username to access the SAP BW server. Type: string (or Expression with resultType string).
func (o SapBWLinkedServiceOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBWLinkedService) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// SAP Business Warehouse Linked Service.
type SapBWLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Client ID of the client on the BW system. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to access the SAP BW server.
	Password interface{} `pulumi:"password"`
	// Host name of the SAP BW instance. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// System number of the BW system. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
	SystemNumber interface{} `pulumi:"systemNumber"`
	// Type of linked service.
	// Expected value is 'SapBW'.
	Type string `pulumi:"type"`
	// Username to access the SAP BW server. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// SAP Business Warehouse Linked Service.
type SapBWLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SapBWLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapBWLinkedServiceResponse)(nil)).Elem()
}

func (o SapBWLinkedServiceResponseOutput) ToSapBWLinkedServiceResponseOutput() SapBWLinkedServiceResponseOutput {
	return o
}

func (o SapBWLinkedServiceResponseOutput) ToSapBWLinkedServiceResponseOutputWithContext(ctx context.Context) SapBWLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SapBWLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapBWLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Client ID of the client on the BW system. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
func (o SapBWLinkedServiceResponseOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBWLinkedServiceResponse) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o SapBWLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SapBWLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o SapBWLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapBWLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o SapBWLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapBWLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o SapBWLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SapBWLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password to access the SAP BW server.
func (o SapBWLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBWLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Host name of the SAP BW instance. Type: string (or Expression with resultType string).
func (o SapBWLinkedServiceResponseOutput) Server() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBWLinkedServiceResponse) interface{} { return v.Server }).(pulumi.AnyOutput)
}

// System number of the BW system. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
func (o SapBWLinkedServiceResponseOutput) SystemNumber() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBWLinkedServiceResponse) interface{} { return v.SystemNumber }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'SapBW'.
func (o SapBWLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapBWLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Username to access the SAP BW server. Type: string (or Expression with resultType string).
func (o SapBWLinkedServiceResponseOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBWLinkedServiceResponse) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// The SAP BW cube dataset.
type SapBwCubeDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SapBwCube'.
	Type string `pulumi:"type"`
}

// SapBwCubeDatasetInput is an input type that accepts SapBwCubeDatasetArgs and SapBwCubeDatasetOutput values.
// You can construct a concrete instance of `SapBwCubeDatasetInput` via:
//
//	SapBwCubeDatasetArgs{...}
type SapBwCubeDatasetInput interface {
	pulumi.Input

	ToSapBwCubeDatasetOutput() SapBwCubeDatasetOutput
	ToSapBwCubeDatasetOutputWithContext(context.Context) SapBwCubeDatasetOutput
}

// The SAP BW cube dataset.
type SapBwCubeDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SapBwCube'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SapBwCubeDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapBwCubeDataset)(nil)).Elem()
}

func (i SapBwCubeDatasetArgs) ToSapBwCubeDatasetOutput() SapBwCubeDatasetOutput {
	return i.ToSapBwCubeDatasetOutputWithContext(context.Background())
}

func (i SapBwCubeDatasetArgs) ToSapBwCubeDatasetOutputWithContext(ctx context.Context) SapBwCubeDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapBwCubeDatasetOutput)
}

// The SAP BW cube dataset.
type SapBwCubeDatasetOutput struct{ *pulumi.OutputState }

func (SapBwCubeDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapBwCubeDataset)(nil)).Elem()
}

func (o SapBwCubeDatasetOutput) ToSapBwCubeDatasetOutput() SapBwCubeDatasetOutput {
	return o
}

func (o SapBwCubeDatasetOutput) ToSapBwCubeDatasetOutputWithContext(ctx context.Context) SapBwCubeDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SapBwCubeDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapBwCubeDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SapBwCubeDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapBwCubeDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SapBwCubeDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v SapBwCubeDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o SapBwCubeDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v SapBwCubeDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o SapBwCubeDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SapBwCubeDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SapBwCubeDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBwCubeDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SapBwCubeDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBwCubeDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'SapBwCube'.
func (o SapBwCubeDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapBwCubeDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The SAP BW cube dataset.
type SapBwCubeDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SapBwCube'.
	Type string `pulumi:"type"`
}

// The SAP BW cube dataset.
type SapBwCubeDatasetResponseOutput struct{ *pulumi.OutputState }

func (SapBwCubeDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapBwCubeDatasetResponse)(nil)).Elem()
}

func (o SapBwCubeDatasetResponseOutput) ToSapBwCubeDatasetResponseOutput() SapBwCubeDatasetResponseOutput {
	return o
}

func (o SapBwCubeDatasetResponseOutput) ToSapBwCubeDatasetResponseOutputWithContext(ctx context.Context) SapBwCubeDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SapBwCubeDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapBwCubeDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SapBwCubeDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapBwCubeDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SapBwCubeDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v SapBwCubeDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o SapBwCubeDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v SapBwCubeDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o SapBwCubeDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SapBwCubeDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SapBwCubeDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBwCubeDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SapBwCubeDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBwCubeDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'SapBwCube'.
func (o SapBwCubeDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapBwCubeDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity source for SapBW server via MDX.
type SapBwSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// MDX query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SapBwSource'.
	Type string `pulumi:"type"`
}

// SapBwSourceInput is an input type that accepts SapBwSourceArgs and SapBwSourceOutput values.
// You can construct a concrete instance of `SapBwSourceInput` via:
//
//	SapBwSourceArgs{...}
type SapBwSourceInput interface {
	pulumi.Input

	ToSapBwSourceOutput() SapBwSourceOutput
	ToSapBwSourceOutputWithContext(context.Context) SapBwSourceOutput
}

// A copy activity source for SapBW server via MDX.
type SapBwSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// MDX query. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SapBwSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SapBwSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapBwSource)(nil)).Elem()
}

func (i SapBwSourceArgs) ToSapBwSourceOutput() SapBwSourceOutput {
	return i.ToSapBwSourceOutputWithContext(context.Background())
}

func (i SapBwSourceArgs) ToSapBwSourceOutputWithContext(ctx context.Context) SapBwSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapBwSourceOutput)
}

// A copy activity source for SapBW server via MDX.
type SapBwSourceOutput struct{ *pulumi.OutputState }

func (SapBwSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapBwSource)(nil)).Elem()
}

func (o SapBwSourceOutput) ToSapBwSourceOutput() SapBwSourceOutput {
	return o
}

func (o SapBwSourceOutput) ToSapBwSourceOutputWithContext(ctx context.Context) SapBwSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o SapBwSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBwSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SapBwSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBwSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SapBwSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBwSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// MDX query. Type: string (or Expression with resultType string).
func (o SapBwSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBwSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SapBwSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBwSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o SapBwSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBwSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SapBwSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBwSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'SapBwSource'.
func (o SapBwSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapBwSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity source for SapBW server via MDX.
type SapBwSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// MDX query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SapBwSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for SapBW server via MDX.
type SapBwSourceResponseOutput struct{ *pulumi.OutputState }

func (SapBwSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapBwSourceResponse)(nil)).Elem()
}

func (o SapBwSourceResponseOutput) ToSapBwSourceResponseOutput() SapBwSourceResponseOutput {
	return o
}

func (o SapBwSourceResponseOutput) ToSapBwSourceResponseOutputWithContext(ctx context.Context) SapBwSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o SapBwSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBwSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SapBwSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBwSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SapBwSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBwSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// MDX query. Type: string (or Expression with resultType string).
func (o SapBwSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBwSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SapBwSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBwSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o SapBwSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBwSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SapBwSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SapBwSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'SapBwSource'.
func (o SapBwSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapBwSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for SAP Cloud for Customer.
type SapCloudForCustomerLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'SapCloudForCustomer'.
	Type string `pulumi:"type"`
	// The URL of SAP Cloud for Customer OData API. For example, '[https://[tenantname].crm.ondemand.com/sap/c4c/odata/v1]'. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// The username for Basic authentication. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// SapCloudForCustomerLinkedServiceInput is an input type that accepts SapCloudForCustomerLinkedServiceArgs and SapCloudForCustomerLinkedServiceOutput values.
// You can construct a concrete instance of `SapCloudForCustomerLinkedServiceInput` via:
//
//	SapCloudForCustomerLinkedServiceArgs{...}
type SapCloudForCustomerLinkedServiceInput interface {
	pulumi.Input

	ToSapCloudForCustomerLinkedServiceOutput() SapCloudForCustomerLinkedServiceOutput
	ToSapCloudForCustomerLinkedServiceOutputWithContext(context.Context) SapCloudForCustomerLinkedServiceOutput
}

// Linked service for SAP Cloud for Customer.
type SapCloudForCustomerLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password for Basic authentication.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'SapCloudForCustomer'.
	Type pulumi.StringInput `pulumi:"type"`
	// The URL of SAP Cloud for Customer OData API. For example, '[https://[tenantname].crm.ondemand.com/sap/c4c/odata/v1]'. Type: string (or Expression with resultType string).
	Url pulumi.Input `pulumi:"url"`
	// The username for Basic authentication. Type: string (or Expression with resultType string).
	Username pulumi.Input `pulumi:"username"`
}

func (SapCloudForCustomerLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapCloudForCustomerLinkedService)(nil)).Elem()
}

func (i SapCloudForCustomerLinkedServiceArgs) ToSapCloudForCustomerLinkedServiceOutput() SapCloudForCustomerLinkedServiceOutput {
	return i.ToSapCloudForCustomerLinkedServiceOutputWithContext(context.Background())
}

func (i SapCloudForCustomerLinkedServiceArgs) ToSapCloudForCustomerLinkedServiceOutputWithContext(ctx context.Context) SapCloudForCustomerLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapCloudForCustomerLinkedServiceOutput)
}

// Linked service for SAP Cloud for Customer.
type SapCloudForCustomerLinkedServiceOutput struct{ *pulumi.OutputState }

func (SapCloudForCustomerLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapCloudForCustomerLinkedService)(nil)).Elem()
}

func (o SapCloudForCustomerLinkedServiceOutput) ToSapCloudForCustomerLinkedServiceOutput() SapCloudForCustomerLinkedServiceOutput {
	return o
}

func (o SapCloudForCustomerLinkedServiceOutput) ToSapCloudForCustomerLinkedServiceOutputWithContext(ctx context.Context) SapCloudForCustomerLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SapCloudForCustomerLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o SapCloudForCustomerLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o SapCloudForCustomerLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string.
func (o SapCloudForCustomerLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o SapCloudForCustomerLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The password for Basic authentication.
func (o SapCloudForCustomerLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'SapCloudForCustomer'.
func (o SapCloudForCustomerLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The URL of SAP Cloud for Customer OData API. For example, '[https://[tenantname].crm.ondemand.com/sap/c4c/odata/v1]'. Type: string (or Expression with resultType string).
func (o SapCloudForCustomerLinkedServiceOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedService) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// The username for Basic authentication. Type: string (or Expression with resultType string).
func (o SapCloudForCustomerLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Linked service for SAP Cloud for Customer.
type SapCloudForCustomerLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'SapCloudForCustomer'.
	Type string `pulumi:"type"`
	// The URL of SAP Cloud for Customer OData API. For example, '[https://[tenantname].crm.ondemand.com/sap/c4c/odata/v1]'. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// The username for Basic authentication. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// Linked service for SAP Cloud for Customer.
type SapCloudForCustomerLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SapCloudForCustomerLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapCloudForCustomerLinkedServiceResponse)(nil)).Elem()
}

func (o SapCloudForCustomerLinkedServiceResponseOutput) ToSapCloudForCustomerLinkedServiceResponseOutput() SapCloudForCustomerLinkedServiceResponseOutput {
	return o
}

func (o SapCloudForCustomerLinkedServiceResponseOutput) ToSapCloudForCustomerLinkedServiceResponseOutputWithContext(ctx context.Context) SapCloudForCustomerLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SapCloudForCustomerLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o SapCloudForCustomerLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o SapCloudForCustomerLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string.
func (o SapCloudForCustomerLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o SapCloudForCustomerLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The password for Basic authentication.
func (o SapCloudForCustomerLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'SapCloudForCustomer'.
func (o SapCloudForCustomerLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The URL of SAP Cloud for Customer OData API. For example, '[https://[tenantname].crm.ondemand.com/sap/c4c/odata/v1]'. Type: string (or Expression with resultType string).
func (o SapCloudForCustomerLinkedServiceResponseOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedServiceResponse) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// The username for Basic authentication. Type: string (or Expression with resultType string).
func (o SapCloudForCustomerLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// The path of the SAP Cloud for Customer OData entity.
type SapCloudForCustomerResourceDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The path of the SAP Cloud for Customer OData entity. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SapCloudForCustomerResource'.
	Type string `pulumi:"type"`
}

// SapCloudForCustomerResourceDatasetInput is an input type that accepts SapCloudForCustomerResourceDatasetArgs and SapCloudForCustomerResourceDatasetOutput values.
// You can construct a concrete instance of `SapCloudForCustomerResourceDatasetInput` via:
//
//	SapCloudForCustomerResourceDatasetArgs{...}
type SapCloudForCustomerResourceDatasetInput interface {
	pulumi.Input

	ToSapCloudForCustomerResourceDatasetOutput() SapCloudForCustomerResourceDatasetOutput
	ToSapCloudForCustomerResourceDatasetOutputWithContext(context.Context) SapCloudForCustomerResourceDatasetOutput
}

// The path of the SAP Cloud for Customer OData entity.
type SapCloudForCustomerResourceDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The path of the SAP Cloud for Customer OData entity. Type: string (or Expression with resultType string).
	Path pulumi.Input `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SapCloudForCustomerResource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SapCloudForCustomerResourceDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapCloudForCustomerResourceDataset)(nil)).Elem()
}

func (i SapCloudForCustomerResourceDatasetArgs) ToSapCloudForCustomerResourceDatasetOutput() SapCloudForCustomerResourceDatasetOutput {
	return i.ToSapCloudForCustomerResourceDatasetOutputWithContext(context.Background())
}

func (i SapCloudForCustomerResourceDatasetArgs) ToSapCloudForCustomerResourceDatasetOutputWithContext(ctx context.Context) SapCloudForCustomerResourceDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapCloudForCustomerResourceDatasetOutput)
}

// The path of the SAP Cloud for Customer OData entity.
type SapCloudForCustomerResourceDatasetOutput struct{ *pulumi.OutputState }

func (SapCloudForCustomerResourceDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapCloudForCustomerResourceDataset)(nil)).Elem()
}

func (o SapCloudForCustomerResourceDatasetOutput) ToSapCloudForCustomerResourceDatasetOutput() SapCloudForCustomerResourceDatasetOutput {
	return o
}

func (o SapCloudForCustomerResourceDatasetOutput) ToSapCloudForCustomerResourceDatasetOutputWithContext(ctx context.Context) SapCloudForCustomerResourceDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SapCloudForCustomerResourceDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapCloudForCustomerResourceDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SapCloudForCustomerResourceDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapCloudForCustomerResourceDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SapCloudForCustomerResourceDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v SapCloudForCustomerResourceDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o SapCloudForCustomerResourceDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v SapCloudForCustomerResourceDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o SapCloudForCustomerResourceDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SapCloudForCustomerResourceDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The path of the SAP Cloud for Customer OData entity. Type: string (or Expression with resultType string).
func (o SapCloudForCustomerResourceDatasetOutput) Path() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerResourceDataset) interface{} { return v.Path }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SapCloudForCustomerResourceDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerResourceDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SapCloudForCustomerResourceDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerResourceDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'SapCloudForCustomerResource'.
func (o SapCloudForCustomerResourceDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapCloudForCustomerResourceDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The path of the SAP Cloud for Customer OData entity.
type SapCloudForCustomerResourceDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The path of the SAP Cloud for Customer OData entity. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SapCloudForCustomerResource'.
	Type string `pulumi:"type"`
}

// The path of the SAP Cloud for Customer OData entity.
type SapCloudForCustomerResourceDatasetResponseOutput struct{ *pulumi.OutputState }

func (SapCloudForCustomerResourceDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapCloudForCustomerResourceDatasetResponse)(nil)).Elem()
}

func (o SapCloudForCustomerResourceDatasetResponseOutput) ToSapCloudForCustomerResourceDatasetResponseOutput() SapCloudForCustomerResourceDatasetResponseOutput {
	return o
}

func (o SapCloudForCustomerResourceDatasetResponseOutput) ToSapCloudForCustomerResourceDatasetResponseOutputWithContext(ctx context.Context) SapCloudForCustomerResourceDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SapCloudForCustomerResourceDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapCloudForCustomerResourceDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SapCloudForCustomerResourceDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapCloudForCustomerResourceDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SapCloudForCustomerResourceDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v SapCloudForCustomerResourceDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o SapCloudForCustomerResourceDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v SapCloudForCustomerResourceDatasetResponse) LinkedServiceReferenceResponse {
		return v.LinkedServiceName
	}).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o SapCloudForCustomerResourceDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SapCloudForCustomerResourceDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The path of the SAP Cloud for Customer OData entity. Type: string (or Expression with resultType string).
func (o SapCloudForCustomerResourceDatasetResponseOutput) Path() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerResourceDatasetResponse) interface{} { return v.Path }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SapCloudForCustomerResourceDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerResourceDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SapCloudForCustomerResourceDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerResourceDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'SapCloudForCustomerResource'.
func (o SapCloudForCustomerResourceDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapCloudForCustomerResourceDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity SAP Cloud for Customer sink.
type SapCloudForCustomerSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'SapCloudForCustomerSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation. Default is 'Insert'.
	WriteBehavior *string `pulumi:"writeBehavior"`
}

// SapCloudForCustomerSinkInput is an input type that accepts SapCloudForCustomerSinkArgs and SapCloudForCustomerSinkOutput values.
// You can construct a concrete instance of `SapCloudForCustomerSinkInput` via:
//
//	SapCloudForCustomerSinkArgs{...}
type SapCloudForCustomerSinkInput interface {
	pulumi.Input

	ToSapCloudForCustomerSinkOutput() SapCloudForCustomerSinkOutput
	ToSapCloudForCustomerSinkOutputWithContext(context.Context) SapCloudForCustomerSinkOutput
}

// A copy activity SAP Cloud for Customer sink.
type SapCloudForCustomerSinkArgs struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout pulumi.Input `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount pulumi.Input `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait pulumi.Input `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'SapCloudForCustomerSink'.
	Type pulumi.StringInput `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize pulumi.Input `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout pulumi.Input `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation. Default is 'Insert'.
	WriteBehavior pulumi.StringPtrInput `pulumi:"writeBehavior"`
}

func (SapCloudForCustomerSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapCloudForCustomerSink)(nil)).Elem()
}

func (i SapCloudForCustomerSinkArgs) ToSapCloudForCustomerSinkOutput() SapCloudForCustomerSinkOutput {
	return i.ToSapCloudForCustomerSinkOutputWithContext(context.Background())
}

func (i SapCloudForCustomerSinkArgs) ToSapCloudForCustomerSinkOutputWithContext(ctx context.Context) SapCloudForCustomerSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapCloudForCustomerSinkOutput)
}

// A copy activity SAP Cloud for Customer sink.
type SapCloudForCustomerSinkOutput struct{ *pulumi.OutputState }

func (SapCloudForCustomerSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapCloudForCustomerSink)(nil)).Elem()
}

func (o SapCloudForCustomerSinkOutput) ToSapCloudForCustomerSinkOutput() SapCloudForCustomerSinkOutput {
	return o
}

func (o SapCloudForCustomerSinkOutput) ToSapCloudForCustomerSinkOutputWithContext(ctx context.Context) SapCloudForCustomerSinkOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SapCloudForCustomerSinkOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerSink) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SapCloudForCustomerSinkOutput) HttpRequestTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerSink) interface{} { return v.HttpRequestTimeout }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o SapCloudForCustomerSinkOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerSink) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o SapCloudForCustomerSinkOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerSink) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SapCloudForCustomerSinkOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerSink) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'SapCloudForCustomerSink'.
func (o SapCloudForCustomerSinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapCloudForCustomerSink) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o SapCloudForCustomerSinkOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerSink) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SapCloudForCustomerSinkOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerSink) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// The write behavior for the operation. Default is 'Insert'.
func (o SapCloudForCustomerSinkOutput) WriteBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapCloudForCustomerSink) *string { return v.WriteBehavior }).(pulumi.StringPtrOutput)
}

// A copy activity SAP Cloud for Customer sink.
type SapCloudForCustomerSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'SapCloudForCustomerSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation. Default is 'Insert'.
	WriteBehavior *string `pulumi:"writeBehavior"`
}

// A copy activity SAP Cloud for Customer sink.
type SapCloudForCustomerSinkResponseOutput struct{ *pulumi.OutputState }

func (SapCloudForCustomerSinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapCloudForCustomerSinkResponse)(nil)).Elem()
}

func (o SapCloudForCustomerSinkResponseOutput) ToSapCloudForCustomerSinkResponseOutput() SapCloudForCustomerSinkResponseOutput {
	return o
}

func (o SapCloudForCustomerSinkResponseOutput) ToSapCloudForCustomerSinkResponseOutputWithContext(ctx context.Context) SapCloudForCustomerSinkResponseOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SapCloudForCustomerSinkResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerSinkResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SapCloudForCustomerSinkResponseOutput) HttpRequestTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerSinkResponse) interface{} { return v.HttpRequestTimeout }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o SapCloudForCustomerSinkResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerSinkResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o SapCloudForCustomerSinkResponseOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerSinkResponse) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SapCloudForCustomerSinkResponseOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerSinkResponse) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'SapCloudForCustomerSink'.
func (o SapCloudForCustomerSinkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapCloudForCustomerSinkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o SapCloudForCustomerSinkResponseOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerSinkResponse) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SapCloudForCustomerSinkResponseOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerSinkResponse) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// The write behavior for the operation. Default is 'Insert'.
func (o SapCloudForCustomerSinkResponseOutput) WriteBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapCloudForCustomerSinkResponse) *string { return v.WriteBehavior }).(pulumi.StringPtrOutput)
}

// A copy activity source for SAP Cloud for Customer source.
type SapCloudForCustomerSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SAP Cloud for Customer OData query. For example, "$top=1". Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SapCloudForCustomerSource'.
	Type string `pulumi:"type"`
}

// SapCloudForCustomerSourceInput is an input type that accepts SapCloudForCustomerSourceArgs and SapCloudForCustomerSourceOutput values.
// You can construct a concrete instance of `SapCloudForCustomerSourceInput` via:
//
//	SapCloudForCustomerSourceArgs{...}
type SapCloudForCustomerSourceInput interface {
	pulumi.Input

	ToSapCloudForCustomerSourceOutput() SapCloudForCustomerSourceOutput
	ToSapCloudForCustomerSourceOutputWithContext(context.Context) SapCloudForCustomerSourceOutput
}

// A copy activity source for SAP Cloud for Customer source.
type SapCloudForCustomerSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout pulumi.Input `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// SAP Cloud for Customer OData query. For example, "$top=1". Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SapCloudForCustomerSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SapCloudForCustomerSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapCloudForCustomerSource)(nil)).Elem()
}

func (i SapCloudForCustomerSourceArgs) ToSapCloudForCustomerSourceOutput() SapCloudForCustomerSourceOutput {
	return i.ToSapCloudForCustomerSourceOutputWithContext(context.Background())
}

func (i SapCloudForCustomerSourceArgs) ToSapCloudForCustomerSourceOutputWithContext(ctx context.Context) SapCloudForCustomerSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapCloudForCustomerSourceOutput)
}

// A copy activity source for SAP Cloud for Customer source.
type SapCloudForCustomerSourceOutput struct{ *pulumi.OutputState }

func (SapCloudForCustomerSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapCloudForCustomerSource)(nil)).Elem()
}

func (o SapCloudForCustomerSourceOutput) ToSapCloudForCustomerSourceOutput() SapCloudForCustomerSourceOutput {
	return o
}

func (o SapCloudForCustomerSourceOutput) ToSapCloudForCustomerSourceOutputWithContext(ctx context.Context) SapCloudForCustomerSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o SapCloudForCustomerSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SapCloudForCustomerSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SapCloudForCustomerSourceOutput) HttpRequestTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerSource) interface{} { return v.HttpRequestTimeout }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SapCloudForCustomerSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// SAP Cloud for Customer OData query. For example, "$top=1". Type: string (or Expression with resultType string).
func (o SapCloudForCustomerSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SapCloudForCustomerSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o SapCloudForCustomerSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SapCloudForCustomerSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'SapCloudForCustomerSource'.
func (o SapCloudForCustomerSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapCloudForCustomerSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity source for SAP Cloud for Customer source.
type SapCloudForCustomerSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SAP Cloud for Customer OData query. For example, "$top=1". Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SapCloudForCustomerSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for SAP Cloud for Customer source.
type SapCloudForCustomerSourceResponseOutput struct{ *pulumi.OutputState }

func (SapCloudForCustomerSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapCloudForCustomerSourceResponse)(nil)).Elem()
}

func (o SapCloudForCustomerSourceResponseOutput) ToSapCloudForCustomerSourceResponseOutput() SapCloudForCustomerSourceResponseOutput {
	return o
}

func (o SapCloudForCustomerSourceResponseOutput) ToSapCloudForCustomerSourceResponseOutputWithContext(ctx context.Context) SapCloudForCustomerSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o SapCloudForCustomerSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SapCloudForCustomerSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SapCloudForCustomerSourceResponseOutput) HttpRequestTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerSourceResponse) interface{} { return v.HttpRequestTimeout }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SapCloudForCustomerSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// SAP Cloud for Customer OData query. For example, "$top=1". Type: string (or Expression with resultType string).
func (o SapCloudForCustomerSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SapCloudForCustomerSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o SapCloudForCustomerSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SapCloudForCustomerSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SapCloudForCustomerSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'SapCloudForCustomerSource'.
func (o SapCloudForCustomerSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapCloudForCustomerSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for SAP ERP Central Component(SAP ECC).
type SapEccLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'SapEcc'.
	Type string `pulumi:"type"`
	// The URL of SAP ECC OData API. For example, '[https://hostname:port/sap/opu/odata/sap/servicename/]'. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// The username for Basic authentication. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// SapEccLinkedServiceInput is an input type that accepts SapEccLinkedServiceArgs and SapEccLinkedServiceOutput values.
// You can construct a concrete instance of `SapEccLinkedServiceInput` via:
//
//	SapEccLinkedServiceArgs{...}
type SapEccLinkedServiceInput interface {
	pulumi.Input

	ToSapEccLinkedServiceOutput() SapEccLinkedServiceOutput
	ToSapEccLinkedServiceOutputWithContext(context.Context) SapEccLinkedServiceOutput
}

// Linked service for SAP ERP Central Component(SAP ECC).
type SapEccLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password for Basic authentication.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'SapEcc'.
	Type pulumi.StringInput `pulumi:"type"`
	// The URL of SAP ECC OData API. For example, '[https://hostname:port/sap/opu/odata/sap/servicename/]'. Type: string (or Expression with resultType string).
	Url pulumi.Input `pulumi:"url"`
	// The username for Basic authentication. Type: string (or Expression with resultType string).
	Username pulumi.Input `pulumi:"username"`
}

func (SapEccLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapEccLinkedService)(nil)).Elem()
}

func (i SapEccLinkedServiceArgs) ToSapEccLinkedServiceOutput() SapEccLinkedServiceOutput {
	return i.ToSapEccLinkedServiceOutputWithContext(context.Background())
}

func (i SapEccLinkedServiceArgs) ToSapEccLinkedServiceOutputWithContext(ctx context.Context) SapEccLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapEccLinkedServiceOutput)
}

// Linked service for SAP ERP Central Component(SAP ECC).
type SapEccLinkedServiceOutput struct{ *pulumi.OutputState }

func (SapEccLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapEccLinkedService)(nil)).Elem()
}

func (o SapEccLinkedServiceOutput) ToSapEccLinkedServiceOutput() SapEccLinkedServiceOutput {
	return o
}

func (o SapEccLinkedServiceOutput) ToSapEccLinkedServiceOutputWithContext(ctx context.Context) SapEccLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SapEccLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapEccLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o SapEccLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v SapEccLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o SapEccLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapEccLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string.
func (o SapEccLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapEccLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o SapEccLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SapEccLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The password for Basic authentication.
func (o SapEccLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SapEccLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'SapEcc'.
func (o SapEccLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapEccLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The URL of SAP ECC OData API. For example, '[https://hostname:port/sap/opu/odata/sap/servicename/]'. Type: string (or Expression with resultType string).
func (o SapEccLinkedServiceOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v SapEccLinkedService) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// The username for Basic authentication. Type: string (or Expression with resultType string).
func (o SapEccLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v SapEccLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Linked service for SAP ERP Central Component(SAP ECC).
type SapEccLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'SapEcc'.
	Type string `pulumi:"type"`
	// The URL of SAP ECC OData API. For example, '[https://hostname:port/sap/opu/odata/sap/servicename/]'. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// The username for Basic authentication. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// Linked service for SAP ERP Central Component(SAP ECC).
type SapEccLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SapEccLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapEccLinkedServiceResponse)(nil)).Elem()
}

func (o SapEccLinkedServiceResponseOutput) ToSapEccLinkedServiceResponseOutput() SapEccLinkedServiceResponseOutput {
	return o
}

func (o SapEccLinkedServiceResponseOutput) ToSapEccLinkedServiceResponseOutputWithContext(ctx context.Context) SapEccLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SapEccLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapEccLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o SapEccLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SapEccLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o SapEccLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapEccLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string.
func (o SapEccLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapEccLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o SapEccLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SapEccLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The password for Basic authentication.
func (o SapEccLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SapEccLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'SapEcc'.
func (o SapEccLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapEccLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The URL of SAP ECC OData API. For example, '[https://hostname:port/sap/opu/odata/sap/servicename/]'. Type: string (or Expression with resultType string).
func (o SapEccLinkedServiceResponseOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v SapEccLinkedServiceResponse) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// The username for Basic authentication. Type: string (or Expression with resultType string).
func (o SapEccLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v SapEccLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// The path of the SAP ECC OData entity.
type SapEccResourceDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The path of the SAP ECC OData entity. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SapEccResource'.
	Type string `pulumi:"type"`
}

// SapEccResourceDatasetInput is an input type that accepts SapEccResourceDatasetArgs and SapEccResourceDatasetOutput values.
// You can construct a concrete instance of `SapEccResourceDatasetInput` via:
//
//	SapEccResourceDatasetArgs{...}
type SapEccResourceDatasetInput interface {
	pulumi.Input

	ToSapEccResourceDatasetOutput() SapEccResourceDatasetOutput
	ToSapEccResourceDatasetOutputWithContext(context.Context) SapEccResourceDatasetOutput
}

// The path of the SAP ECC OData entity.
type SapEccResourceDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The path of the SAP ECC OData entity. Type: string (or Expression with resultType string).
	Path pulumi.Input `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SapEccResource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SapEccResourceDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapEccResourceDataset)(nil)).Elem()
}

func (i SapEccResourceDatasetArgs) ToSapEccResourceDatasetOutput() SapEccResourceDatasetOutput {
	return i.ToSapEccResourceDatasetOutputWithContext(context.Background())
}

func (i SapEccResourceDatasetArgs) ToSapEccResourceDatasetOutputWithContext(ctx context.Context) SapEccResourceDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapEccResourceDatasetOutput)
}

// The path of the SAP ECC OData entity.
type SapEccResourceDatasetOutput struct{ *pulumi.OutputState }

func (SapEccResourceDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapEccResourceDataset)(nil)).Elem()
}

func (o SapEccResourceDatasetOutput) ToSapEccResourceDatasetOutput() SapEccResourceDatasetOutput {
	return o
}

func (o SapEccResourceDatasetOutput) ToSapEccResourceDatasetOutputWithContext(ctx context.Context) SapEccResourceDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SapEccResourceDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapEccResourceDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SapEccResourceDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapEccResourceDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SapEccResourceDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v SapEccResourceDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o SapEccResourceDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v SapEccResourceDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o SapEccResourceDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SapEccResourceDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The path of the SAP ECC OData entity. Type: string (or Expression with resultType string).
func (o SapEccResourceDatasetOutput) Path() pulumi.AnyOutput {
	return o.ApplyT(func(v SapEccResourceDataset) interface{} { return v.Path }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SapEccResourceDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SapEccResourceDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SapEccResourceDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SapEccResourceDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'SapEccResource'.
func (o SapEccResourceDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapEccResourceDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The path of the SAP ECC OData entity.
type SapEccResourceDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The path of the SAP ECC OData entity. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SapEccResource'.
	Type string `pulumi:"type"`
}

// The path of the SAP ECC OData entity.
type SapEccResourceDatasetResponseOutput struct{ *pulumi.OutputState }

func (SapEccResourceDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapEccResourceDatasetResponse)(nil)).Elem()
}

func (o SapEccResourceDatasetResponseOutput) ToSapEccResourceDatasetResponseOutput() SapEccResourceDatasetResponseOutput {
	return o
}

func (o SapEccResourceDatasetResponseOutput) ToSapEccResourceDatasetResponseOutputWithContext(ctx context.Context) SapEccResourceDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SapEccResourceDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapEccResourceDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SapEccResourceDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapEccResourceDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SapEccResourceDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v SapEccResourceDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o SapEccResourceDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v SapEccResourceDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o SapEccResourceDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SapEccResourceDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The path of the SAP ECC OData entity. Type: string (or Expression with resultType string).
func (o SapEccResourceDatasetResponseOutput) Path() pulumi.AnyOutput {
	return o.ApplyT(func(v SapEccResourceDatasetResponse) interface{} { return v.Path }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SapEccResourceDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SapEccResourceDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SapEccResourceDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SapEccResourceDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'SapEccResource'.
func (o SapEccResourceDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapEccResourceDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity source for SAP ECC source.
type SapEccSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SAP ECC OData query. For example, "$top=1". Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SapEccSource'.
	Type string `pulumi:"type"`
}

// SapEccSourceInput is an input type that accepts SapEccSourceArgs and SapEccSourceOutput values.
// You can construct a concrete instance of `SapEccSourceInput` via:
//
//	SapEccSourceArgs{...}
type SapEccSourceInput interface {
	pulumi.Input

	ToSapEccSourceOutput() SapEccSourceOutput
	ToSapEccSourceOutputWithContext(context.Context) SapEccSourceOutput
}

// A copy activity source for SAP ECC source.
type SapEccSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout pulumi.Input `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// SAP ECC OData query. For example, "$top=1". Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SapEccSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SapEccSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapEccSource)(nil)).Elem()
}

func (i SapEccSourceArgs) ToSapEccSourceOutput() SapEccSourceOutput {
	return i.ToSapEccSourceOutputWithContext(context.Background())
}

func (i SapEccSourceArgs) ToSapEccSourceOutputWithContext(ctx context.Context) SapEccSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapEccSourceOutput)
}

// A copy activity source for SAP ECC source.
type SapEccSourceOutput struct{ *pulumi.OutputState }

func (SapEccSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapEccSource)(nil)).Elem()
}

func (o SapEccSourceOutput) ToSapEccSourceOutput() SapEccSourceOutput {
	return o
}

func (o SapEccSourceOutput) ToSapEccSourceOutputWithContext(ctx context.Context) SapEccSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o SapEccSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v SapEccSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SapEccSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SapEccSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SapEccSourceOutput) HttpRequestTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SapEccSource) interface{} { return v.HttpRequestTimeout }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SapEccSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SapEccSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// SAP ECC OData query. For example, "$top=1". Type: string (or Expression with resultType string).
func (o SapEccSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v SapEccSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SapEccSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SapEccSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o SapEccSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SapEccSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SapEccSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SapEccSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'SapEccSource'.
func (o SapEccSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapEccSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity source for SAP ECC source.
type SapEccSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SAP ECC OData query. For example, "$top=1". Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SapEccSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for SAP ECC source.
type SapEccSourceResponseOutput struct{ *pulumi.OutputState }

func (SapEccSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapEccSourceResponse)(nil)).Elem()
}

func (o SapEccSourceResponseOutput) ToSapEccSourceResponseOutput() SapEccSourceResponseOutput {
	return o
}

func (o SapEccSourceResponseOutput) ToSapEccSourceResponseOutputWithContext(ctx context.Context) SapEccSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o SapEccSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v SapEccSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SapEccSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SapEccSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SapEccSourceResponseOutput) HttpRequestTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SapEccSourceResponse) interface{} { return v.HttpRequestTimeout }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SapEccSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SapEccSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// SAP ECC OData query. For example, "$top=1". Type: string (or Expression with resultType string).
func (o SapEccSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v SapEccSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SapEccSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SapEccSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o SapEccSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SapEccSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SapEccSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SapEccSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'SapEccSource'.
func (o SapEccSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapEccSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// SAP HANA Linked Service.
type SapHanaLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to be used to connect to the SAP HANA server.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// SAP HANA ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to access the SAP HANA server.
	Password interface{} `pulumi:"password"`
	// Host name of the SAP HANA server. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	// Expected value is 'SapHana'.
	Type string `pulumi:"type"`
	// Username to access the SAP HANA server. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// SapHanaLinkedServiceInput is an input type that accepts SapHanaLinkedServiceArgs and SapHanaLinkedServiceOutput values.
// You can construct a concrete instance of `SapHanaLinkedServiceInput` via:
//
//	SapHanaLinkedServiceArgs{...}
type SapHanaLinkedServiceInput interface {
	pulumi.Input

	ToSapHanaLinkedServiceOutput() SapHanaLinkedServiceOutput
	ToSapHanaLinkedServiceOutputWithContext(context.Context) SapHanaLinkedServiceOutput
}

// SAP HANA Linked Service.
type SapHanaLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication type to be used to connect to the SAP HANA server.
	AuthenticationType pulumi.StringPtrInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// SAP HANA ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password to access the SAP HANA server.
	Password pulumi.Input `pulumi:"password"`
	// Host name of the SAP HANA server. Type: string (or Expression with resultType string).
	Server pulumi.Input `pulumi:"server"`
	// Type of linked service.
	// Expected value is 'SapHana'.
	Type pulumi.StringInput `pulumi:"type"`
	// Username to access the SAP HANA server. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (SapHanaLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapHanaLinkedService)(nil)).Elem()
}

func (i SapHanaLinkedServiceArgs) ToSapHanaLinkedServiceOutput() SapHanaLinkedServiceOutput {
	return i.ToSapHanaLinkedServiceOutputWithContext(context.Background())
}

func (i SapHanaLinkedServiceArgs) ToSapHanaLinkedServiceOutputWithContext(ctx context.Context) SapHanaLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapHanaLinkedServiceOutput)
}

// SAP HANA Linked Service.
type SapHanaLinkedServiceOutput struct{ *pulumi.OutputState }

func (SapHanaLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapHanaLinkedService)(nil)).Elem()
}

func (o SapHanaLinkedServiceOutput) ToSapHanaLinkedServiceOutput() SapHanaLinkedServiceOutput {
	return o
}

func (o SapHanaLinkedServiceOutput) ToSapHanaLinkedServiceOutputWithContext(ctx context.Context) SapHanaLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SapHanaLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapHanaLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication type to be used to connect to the SAP HANA server.
func (o SapHanaLinkedServiceOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapHanaLinkedService) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// The integration runtime reference.
func (o SapHanaLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v SapHanaLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// SAP HANA ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o SapHanaLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o SapHanaLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapHanaLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o SapHanaLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapHanaLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o SapHanaLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SapHanaLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Password to access the SAP HANA server.
func (o SapHanaLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Host name of the SAP HANA server. Type: string (or Expression with resultType string).
func (o SapHanaLinkedServiceOutput) Server() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaLinkedService) interface{} { return v.Server }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'SapHana'.
func (o SapHanaLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapHanaLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Username to access the SAP HANA server. Type: string (or Expression with resultType string).
func (o SapHanaLinkedServiceOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaLinkedService) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// SAP HANA Linked Service.
type SapHanaLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to be used to connect to the SAP HANA server.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// SAP HANA ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to access the SAP HANA server.
	Password interface{} `pulumi:"password"`
	// Host name of the SAP HANA server. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	// Expected value is 'SapHana'.
	Type string `pulumi:"type"`
	// Username to access the SAP HANA server. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// SAP HANA Linked Service.
type SapHanaLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SapHanaLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapHanaLinkedServiceResponse)(nil)).Elem()
}

func (o SapHanaLinkedServiceResponseOutput) ToSapHanaLinkedServiceResponseOutput() SapHanaLinkedServiceResponseOutput {
	return o
}

func (o SapHanaLinkedServiceResponseOutput) ToSapHanaLinkedServiceResponseOutputWithContext(ctx context.Context) SapHanaLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SapHanaLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapHanaLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication type to be used to connect to the SAP HANA server.
func (o SapHanaLinkedServiceResponseOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapHanaLinkedServiceResponse) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// The integration runtime reference.
func (o SapHanaLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SapHanaLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// SAP HANA ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o SapHanaLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o SapHanaLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapHanaLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o SapHanaLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapHanaLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o SapHanaLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SapHanaLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password to access the SAP HANA server.
func (o SapHanaLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Host name of the SAP HANA server. Type: string (or Expression with resultType string).
func (o SapHanaLinkedServiceResponseOutput) Server() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaLinkedServiceResponse) interface{} { return v.Server }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'SapHana'.
func (o SapHanaLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapHanaLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Username to access the SAP HANA server. Type: string (or Expression with resultType string).
func (o SapHanaLinkedServiceResponseOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaLinkedServiceResponse) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// The settings that will be leveraged for SAP HANA source partitioning.
type SapHanaPartitionSettings struct {
	// The name of the column that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionColumnName interface{} `pulumi:"partitionColumnName"`
}

// SapHanaPartitionSettingsInput is an input type that accepts SapHanaPartitionSettingsArgs and SapHanaPartitionSettingsOutput values.
// You can construct a concrete instance of `SapHanaPartitionSettingsInput` via:
//
//	SapHanaPartitionSettingsArgs{...}
type SapHanaPartitionSettingsInput interface {
	pulumi.Input

	ToSapHanaPartitionSettingsOutput() SapHanaPartitionSettingsOutput
	ToSapHanaPartitionSettingsOutputWithContext(context.Context) SapHanaPartitionSettingsOutput
}

// The settings that will be leveraged for SAP HANA source partitioning.
type SapHanaPartitionSettingsArgs struct {
	// The name of the column that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionColumnName pulumi.Input `pulumi:"partitionColumnName"`
}

func (SapHanaPartitionSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapHanaPartitionSettings)(nil)).Elem()
}

func (i SapHanaPartitionSettingsArgs) ToSapHanaPartitionSettingsOutput() SapHanaPartitionSettingsOutput {
	return i.ToSapHanaPartitionSettingsOutputWithContext(context.Background())
}

func (i SapHanaPartitionSettingsArgs) ToSapHanaPartitionSettingsOutputWithContext(ctx context.Context) SapHanaPartitionSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapHanaPartitionSettingsOutput)
}

func (i SapHanaPartitionSettingsArgs) ToSapHanaPartitionSettingsPtrOutput() SapHanaPartitionSettingsPtrOutput {
	return i.ToSapHanaPartitionSettingsPtrOutputWithContext(context.Background())
}

func (i SapHanaPartitionSettingsArgs) ToSapHanaPartitionSettingsPtrOutputWithContext(ctx context.Context) SapHanaPartitionSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapHanaPartitionSettingsOutput).ToSapHanaPartitionSettingsPtrOutputWithContext(ctx)
}

// SapHanaPartitionSettingsPtrInput is an input type that accepts SapHanaPartitionSettingsArgs, SapHanaPartitionSettingsPtr and SapHanaPartitionSettingsPtrOutput values.
// You can construct a concrete instance of `SapHanaPartitionSettingsPtrInput` via:
//
//	        SapHanaPartitionSettingsArgs{...}
//
//	or:
//
//	        nil
type SapHanaPartitionSettingsPtrInput interface {
	pulumi.Input

	ToSapHanaPartitionSettingsPtrOutput() SapHanaPartitionSettingsPtrOutput
	ToSapHanaPartitionSettingsPtrOutputWithContext(context.Context) SapHanaPartitionSettingsPtrOutput
}

type sapHanaPartitionSettingsPtrType SapHanaPartitionSettingsArgs

func SapHanaPartitionSettingsPtr(v *SapHanaPartitionSettingsArgs) SapHanaPartitionSettingsPtrInput {
	return (*sapHanaPartitionSettingsPtrType)(v)
}

func (*sapHanaPartitionSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SapHanaPartitionSettings)(nil)).Elem()
}

func (i *sapHanaPartitionSettingsPtrType) ToSapHanaPartitionSettingsPtrOutput() SapHanaPartitionSettingsPtrOutput {
	return i.ToSapHanaPartitionSettingsPtrOutputWithContext(context.Background())
}

func (i *sapHanaPartitionSettingsPtrType) ToSapHanaPartitionSettingsPtrOutputWithContext(ctx context.Context) SapHanaPartitionSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapHanaPartitionSettingsPtrOutput)
}

// The settings that will be leveraged for SAP HANA source partitioning.
type SapHanaPartitionSettingsOutput struct{ *pulumi.OutputState }

func (SapHanaPartitionSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapHanaPartitionSettings)(nil)).Elem()
}

func (o SapHanaPartitionSettingsOutput) ToSapHanaPartitionSettingsOutput() SapHanaPartitionSettingsOutput {
	return o
}

func (o SapHanaPartitionSettingsOutput) ToSapHanaPartitionSettingsOutputWithContext(ctx context.Context) SapHanaPartitionSettingsOutput {
	return o
}

func (o SapHanaPartitionSettingsOutput) ToSapHanaPartitionSettingsPtrOutput() SapHanaPartitionSettingsPtrOutput {
	return o.ToSapHanaPartitionSettingsPtrOutputWithContext(context.Background())
}

func (o SapHanaPartitionSettingsOutput) ToSapHanaPartitionSettingsPtrOutputWithContext(ctx context.Context) SapHanaPartitionSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SapHanaPartitionSettings) *SapHanaPartitionSettings {
		return &v
	}).(SapHanaPartitionSettingsPtrOutput)
}

// The name of the column that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o SapHanaPartitionSettingsOutput) PartitionColumnName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaPartitionSettings) interface{} { return v.PartitionColumnName }).(pulumi.AnyOutput)
}

type SapHanaPartitionSettingsPtrOutput struct{ *pulumi.OutputState }

func (SapHanaPartitionSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SapHanaPartitionSettings)(nil)).Elem()
}

func (o SapHanaPartitionSettingsPtrOutput) ToSapHanaPartitionSettingsPtrOutput() SapHanaPartitionSettingsPtrOutput {
	return o
}

func (o SapHanaPartitionSettingsPtrOutput) ToSapHanaPartitionSettingsPtrOutputWithContext(ctx context.Context) SapHanaPartitionSettingsPtrOutput {
	return o
}

func (o SapHanaPartitionSettingsPtrOutput) Elem() SapHanaPartitionSettingsOutput {
	return o.ApplyT(func(v *SapHanaPartitionSettings) SapHanaPartitionSettings {
		if v != nil {
			return *v
		}
		var ret SapHanaPartitionSettings
		return ret
	}).(SapHanaPartitionSettingsOutput)
}

// The name of the column that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o SapHanaPartitionSettingsPtrOutput) PartitionColumnName() pulumi.AnyOutput {
	return o.ApplyT(func(v *SapHanaPartitionSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionColumnName
	}).(pulumi.AnyOutput)
}

// The settings that will be leveraged for SAP HANA source partitioning.
type SapHanaPartitionSettingsResponse struct {
	// The name of the column that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionColumnName interface{} `pulumi:"partitionColumnName"`
}

// The settings that will be leveraged for SAP HANA source partitioning.
type SapHanaPartitionSettingsResponseOutput struct{ *pulumi.OutputState }

func (SapHanaPartitionSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapHanaPartitionSettingsResponse)(nil)).Elem()
}

func (o SapHanaPartitionSettingsResponseOutput) ToSapHanaPartitionSettingsResponseOutput() SapHanaPartitionSettingsResponseOutput {
	return o
}

func (o SapHanaPartitionSettingsResponseOutput) ToSapHanaPartitionSettingsResponseOutputWithContext(ctx context.Context) SapHanaPartitionSettingsResponseOutput {
	return o
}

// The name of the column that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o SapHanaPartitionSettingsResponseOutput) PartitionColumnName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaPartitionSettingsResponse) interface{} { return v.PartitionColumnName }).(pulumi.AnyOutput)
}

type SapHanaPartitionSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (SapHanaPartitionSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SapHanaPartitionSettingsResponse)(nil)).Elem()
}

func (o SapHanaPartitionSettingsResponsePtrOutput) ToSapHanaPartitionSettingsResponsePtrOutput() SapHanaPartitionSettingsResponsePtrOutput {
	return o
}

func (o SapHanaPartitionSettingsResponsePtrOutput) ToSapHanaPartitionSettingsResponsePtrOutputWithContext(ctx context.Context) SapHanaPartitionSettingsResponsePtrOutput {
	return o
}

func (o SapHanaPartitionSettingsResponsePtrOutput) Elem() SapHanaPartitionSettingsResponseOutput {
	return o.ApplyT(func(v *SapHanaPartitionSettingsResponse) SapHanaPartitionSettingsResponse {
		if v != nil {
			return *v
		}
		var ret SapHanaPartitionSettingsResponse
		return ret
	}).(SapHanaPartitionSettingsResponseOutput)
}

// The name of the column that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o SapHanaPartitionSettingsResponsePtrOutput) PartitionColumnName() pulumi.AnyOutput {
	return o.ApplyT(func(v *SapHanaPartitionSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionColumnName
	}).(pulumi.AnyOutput)
}

// A copy activity source for SAP HANA source.
type SapHanaSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The packet size of data read from SAP HANA. Type: integer(or Expression with resultType integer).
	PacketSize interface{} `pulumi:"packetSize"`
	// The partition mechanism that will be used for SAP HANA read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "SapHanaDynamicRange".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for SAP HANA source partitioning.
	PartitionSettings *SapHanaPartitionSettings `pulumi:"partitionSettings"`
	// SAP HANA Sql query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SapHanaSource'.
	Type string `pulumi:"type"`
}

// SapHanaSourceInput is an input type that accepts SapHanaSourceArgs and SapHanaSourceOutput values.
// You can construct a concrete instance of `SapHanaSourceInput` via:
//
//	SapHanaSourceArgs{...}
type SapHanaSourceInput interface {
	pulumi.Input

	ToSapHanaSourceOutput() SapHanaSourceOutput
	ToSapHanaSourceOutputWithContext(context.Context) SapHanaSourceOutput
}

// A copy activity source for SAP HANA source.
type SapHanaSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// The packet size of data read from SAP HANA. Type: integer(or Expression with resultType integer).
	PacketSize pulumi.Input `pulumi:"packetSize"`
	// The partition mechanism that will be used for SAP HANA read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "SapHanaDynamicRange".
	PartitionOption pulumi.Input `pulumi:"partitionOption"`
	// The settings that will be leveraged for SAP HANA source partitioning.
	PartitionSettings SapHanaPartitionSettingsPtrInput `pulumi:"partitionSettings"`
	// SAP HANA Sql query. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SapHanaSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SapHanaSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapHanaSource)(nil)).Elem()
}

func (i SapHanaSourceArgs) ToSapHanaSourceOutput() SapHanaSourceOutput {
	return i.ToSapHanaSourceOutputWithContext(context.Background())
}

func (i SapHanaSourceArgs) ToSapHanaSourceOutputWithContext(ctx context.Context) SapHanaSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapHanaSourceOutput)
}

// A copy activity source for SAP HANA source.
type SapHanaSourceOutput struct{ *pulumi.OutputState }

func (SapHanaSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapHanaSource)(nil)).Elem()
}

func (o SapHanaSourceOutput) ToSapHanaSourceOutput() SapHanaSourceOutput {
	return o
}

func (o SapHanaSourceOutput) ToSapHanaSourceOutputWithContext(ctx context.Context) SapHanaSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o SapHanaSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SapHanaSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SapHanaSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The packet size of data read from SAP HANA. Type: integer(or Expression with resultType integer).
func (o SapHanaSourceOutput) PacketSize() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaSource) interface{} { return v.PacketSize }).(pulumi.AnyOutput)
}

// The partition mechanism that will be used for SAP HANA read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "SapHanaDynamicRange".
func (o SapHanaSourceOutput) PartitionOption() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaSource) interface{} { return v.PartitionOption }).(pulumi.AnyOutput)
}

// The settings that will be leveraged for SAP HANA source partitioning.
func (o SapHanaSourceOutput) PartitionSettings() SapHanaPartitionSettingsPtrOutput {
	return o.ApplyT(func(v SapHanaSource) *SapHanaPartitionSettings { return v.PartitionSettings }).(SapHanaPartitionSettingsPtrOutput)
}

// SAP HANA Sql query. Type: string (or Expression with resultType string).
func (o SapHanaSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SapHanaSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o SapHanaSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SapHanaSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'SapHanaSource'.
func (o SapHanaSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapHanaSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity source for SAP HANA source.
type SapHanaSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The packet size of data read from SAP HANA. Type: integer(or Expression with resultType integer).
	PacketSize interface{} `pulumi:"packetSize"`
	// The partition mechanism that will be used for SAP HANA read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "SapHanaDynamicRange".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for SAP HANA source partitioning.
	PartitionSettings *SapHanaPartitionSettingsResponse `pulumi:"partitionSettings"`
	// SAP HANA Sql query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SapHanaSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for SAP HANA source.
type SapHanaSourceResponseOutput struct{ *pulumi.OutputState }

func (SapHanaSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapHanaSourceResponse)(nil)).Elem()
}

func (o SapHanaSourceResponseOutput) ToSapHanaSourceResponseOutput() SapHanaSourceResponseOutput {
	return o
}

func (o SapHanaSourceResponseOutput) ToSapHanaSourceResponseOutputWithContext(ctx context.Context) SapHanaSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o SapHanaSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SapHanaSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SapHanaSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The packet size of data read from SAP HANA. Type: integer(or Expression with resultType integer).
func (o SapHanaSourceResponseOutput) PacketSize() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaSourceResponse) interface{} { return v.PacketSize }).(pulumi.AnyOutput)
}

// The partition mechanism that will be used for SAP HANA read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "SapHanaDynamicRange".
func (o SapHanaSourceResponseOutput) PartitionOption() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaSourceResponse) interface{} { return v.PartitionOption }).(pulumi.AnyOutput)
}

// The settings that will be leveraged for SAP HANA source partitioning.
func (o SapHanaSourceResponseOutput) PartitionSettings() SapHanaPartitionSettingsResponsePtrOutput {
	return o.ApplyT(func(v SapHanaSourceResponse) *SapHanaPartitionSettingsResponse { return v.PartitionSettings }).(SapHanaPartitionSettingsResponsePtrOutput)
}

// SAP HANA Sql query. Type: string (or Expression with resultType string).
func (o SapHanaSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SapHanaSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o SapHanaSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SapHanaSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'SapHanaSource'.
func (o SapHanaSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapHanaSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// SAP HANA Table properties.
type SapHanaTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of SAP HANA. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'SapHanaTable'.
	Type string `pulumi:"type"`
}

// SapHanaTableDatasetInput is an input type that accepts SapHanaTableDatasetArgs and SapHanaTableDatasetOutput values.
// You can construct a concrete instance of `SapHanaTableDatasetInput` via:
//
//	SapHanaTableDatasetArgs{...}
type SapHanaTableDatasetInput interface {
	pulumi.Input

	ToSapHanaTableDatasetOutput() SapHanaTableDatasetOutput
	ToSapHanaTableDatasetOutputWithContext(context.Context) SapHanaTableDatasetOutput
}

// SAP HANA Table properties.
type SapHanaTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of SAP HANA. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'SapHanaTable'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SapHanaTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapHanaTableDataset)(nil)).Elem()
}

func (i SapHanaTableDatasetArgs) ToSapHanaTableDatasetOutput() SapHanaTableDatasetOutput {
	return i.ToSapHanaTableDatasetOutputWithContext(context.Background())
}

func (i SapHanaTableDatasetArgs) ToSapHanaTableDatasetOutputWithContext(ctx context.Context) SapHanaTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapHanaTableDatasetOutput)
}

// SAP HANA Table properties.
type SapHanaTableDatasetOutput struct{ *pulumi.OutputState }

func (SapHanaTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapHanaTableDataset)(nil)).Elem()
}

func (o SapHanaTableDatasetOutput) ToSapHanaTableDatasetOutput() SapHanaTableDatasetOutput {
	return o
}

func (o SapHanaTableDatasetOutput) ToSapHanaTableDatasetOutputWithContext(ctx context.Context) SapHanaTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SapHanaTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapHanaTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SapHanaTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapHanaTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SapHanaTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v SapHanaTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o SapHanaTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v SapHanaTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o SapHanaTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SapHanaTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SapHanaTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SapHanaTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of SAP HANA. Type: string (or Expression with resultType string).
func (o SapHanaTableDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaTableDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'SapHanaTable'.
func (o SapHanaTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapHanaTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// SAP HANA Table properties.
type SapHanaTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of SAP HANA. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'SapHanaTable'.
	Type string `pulumi:"type"`
}

// SAP HANA Table properties.
type SapHanaTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (SapHanaTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapHanaTableDatasetResponse)(nil)).Elem()
}

func (o SapHanaTableDatasetResponseOutput) ToSapHanaTableDatasetResponseOutput() SapHanaTableDatasetResponseOutput {
	return o
}

func (o SapHanaTableDatasetResponseOutput) ToSapHanaTableDatasetResponseOutputWithContext(ctx context.Context) SapHanaTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SapHanaTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapHanaTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SapHanaTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapHanaTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SapHanaTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v SapHanaTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o SapHanaTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v SapHanaTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o SapHanaTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SapHanaTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SapHanaTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SapHanaTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of SAP HANA. Type: string (or Expression with resultType string).
func (o SapHanaTableDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v SapHanaTableDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'SapHanaTable'.
func (o SapHanaTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapHanaTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// SAP ODP Linked Service.
type SapOdpLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Client ID of the client on the SAP system where the table is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Language of the SAP system where the table is located. The default value is EN. Type: string (or Expression with resultType string).
	Language interface{} `pulumi:"language"`
	// The Logon Group for the SAP System. Type: string (or Expression with resultType string).
	LogonGroup interface{} `pulumi:"logonGroup"`
	// The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
	MessageServer interface{} `pulumi:"messageServer"`
	// The service name or port number of the Message Server. Type: string (or Expression with resultType string).
	MessageServerService interface{} `pulumi:"messageServerService"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to access the SAP server where the table is located.
	Password interface{} `pulumi:"password"`
	// Host name of the SAP instance where the table is located. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// External security product's library to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncLibraryPath interface{} `pulumi:"sncLibraryPath"`
	// SNC activation indicator to access the SAP server where the table is located. Must be either 0 (off) or 1 (on). Type: string (or Expression with resultType string).
	SncMode interface{} `pulumi:"sncMode"`
	// Initiator's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncMyName interface{} `pulumi:"sncMyName"`
	// Communication partner's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncPartnerName interface{} `pulumi:"sncPartnerName"`
	// SNC Quality of Protection. Allowed value include: 1, 2, 3, 8, 9. Type: string (or Expression with resultType string).
	SncQop interface{} `pulumi:"sncQop"`
	// The subscriber name. Type: string (or Expression with resultType string).
	SubscriberName interface{} `pulumi:"subscriberName"`
	// SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
	SystemId interface{} `pulumi:"systemId"`
	// System number of the SAP system where the table is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
	SystemNumber interface{} `pulumi:"systemNumber"`
	// Type of linked service.
	// Expected value is 'SapOdp'.
	Type string `pulumi:"type"`
	// Username to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
	// SNC X509 certificate file path. Type: string (or Expression with resultType string).
	X509CertificatePath interface{} `pulumi:"x509CertificatePath"`
}

// SapOdpLinkedServiceInput is an input type that accepts SapOdpLinkedServiceArgs and SapOdpLinkedServiceOutput values.
// You can construct a concrete instance of `SapOdpLinkedServiceInput` via:
//
//	SapOdpLinkedServiceArgs{...}
type SapOdpLinkedServiceInput interface {
	pulumi.Input

	ToSapOdpLinkedServiceOutput() SapOdpLinkedServiceOutput
	ToSapOdpLinkedServiceOutputWithContext(context.Context) SapOdpLinkedServiceOutput
}

// SAP ODP Linked Service.
type SapOdpLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Client ID of the client on the SAP system where the table is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
	ClientId pulumi.Input `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Language of the SAP system where the table is located. The default value is EN. Type: string (or Expression with resultType string).
	Language pulumi.Input `pulumi:"language"`
	// The Logon Group for the SAP System. Type: string (or Expression with resultType string).
	LogonGroup pulumi.Input `pulumi:"logonGroup"`
	// The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
	MessageServer pulumi.Input `pulumi:"messageServer"`
	// The service name or port number of the Message Server. Type: string (or Expression with resultType string).
	MessageServerService pulumi.Input `pulumi:"messageServerService"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password to access the SAP server where the table is located.
	Password pulumi.Input `pulumi:"password"`
	// Host name of the SAP instance where the table is located. Type: string (or Expression with resultType string).
	Server pulumi.Input `pulumi:"server"`
	// External security product's library to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncLibraryPath pulumi.Input `pulumi:"sncLibraryPath"`
	// SNC activation indicator to access the SAP server where the table is located. Must be either 0 (off) or 1 (on). Type: string (or Expression with resultType string).
	SncMode pulumi.Input `pulumi:"sncMode"`
	// Initiator's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncMyName pulumi.Input `pulumi:"sncMyName"`
	// Communication partner's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncPartnerName pulumi.Input `pulumi:"sncPartnerName"`
	// SNC Quality of Protection. Allowed value include: 1, 2, 3, 8, 9. Type: string (or Expression with resultType string).
	SncQop pulumi.Input `pulumi:"sncQop"`
	// The subscriber name. Type: string (or Expression with resultType string).
	SubscriberName pulumi.Input `pulumi:"subscriberName"`
	// SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
	SystemId pulumi.Input `pulumi:"systemId"`
	// System number of the SAP system where the table is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
	SystemNumber pulumi.Input `pulumi:"systemNumber"`
	// Type of linked service.
	// Expected value is 'SapOdp'.
	Type pulumi.StringInput `pulumi:"type"`
	// Username to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
	// SNC X509 certificate file path. Type: string (or Expression with resultType string).
	X509CertificatePath pulumi.Input `pulumi:"x509CertificatePath"`
}

func (SapOdpLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapOdpLinkedService)(nil)).Elem()
}

func (i SapOdpLinkedServiceArgs) ToSapOdpLinkedServiceOutput() SapOdpLinkedServiceOutput {
	return i.ToSapOdpLinkedServiceOutputWithContext(context.Background())
}

func (i SapOdpLinkedServiceArgs) ToSapOdpLinkedServiceOutputWithContext(ctx context.Context) SapOdpLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapOdpLinkedServiceOutput)
}

// SAP ODP Linked Service.
type SapOdpLinkedServiceOutput struct{ *pulumi.OutputState }

func (SapOdpLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapOdpLinkedService)(nil)).Elem()
}

func (o SapOdpLinkedServiceOutput) ToSapOdpLinkedServiceOutput() SapOdpLinkedServiceOutput {
	return o
}

func (o SapOdpLinkedServiceOutput) ToSapOdpLinkedServiceOutputWithContext(ctx context.Context) SapOdpLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SapOdpLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapOdpLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Client ID of the client on the SAP system where the table is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
func (o SapOdpLinkedServiceOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpLinkedService) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o SapOdpLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v SapOdpLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o SapOdpLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapOdpLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o SapOdpLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapOdpLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Language of the SAP system where the table is located. The default value is EN. Type: string (or Expression with resultType string).
func (o SapOdpLinkedServiceOutput) Language() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpLinkedService) interface{} { return v.Language }).(pulumi.AnyOutput)
}

// The Logon Group for the SAP System. Type: string (or Expression with resultType string).
func (o SapOdpLinkedServiceOutput) LogonGroup() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpLinkedService) interface{} { return v.LogonGroup }).(pulumi.AnyOutput)
}

// The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
func (o SapOdpLinkedServiceOutput) MessageServer() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpLinkedService) interface{} { return v.MessageServer }).(pulumi.AnyOutput)
}

// The service name or port number of the Message Server. Type: string (or Expression with resultType string).
func (o SapOdpLinkedServiceOutput) MessageServerService() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpLinkedService) interface{} { return v.MessageServerService }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SapOdpLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SapOdpLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Password to access the SAP server where the table is located.
func (o SapOdpLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Host name of the SAP instance where the table is located. Type: string (or Expression with resultType string).
func (o SapOdpLinkedServiceOutput) Server() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpLinkedService) interface{} { return v.Server }).(pulumi.AnyOutput)
}

// External security product's library to access the SAP server where the table is located. Type: string (or Expression with resultType string).
func (o SapOdpLinkedServiceOutput) SncLibraryPath() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpLinkedService) interface{} { return v.SncLibraryPath }).(pulumi.AnyOutput)
}

// SNC activation indicator to access the SAP server where the table is located. Must be either 0 (off) or 1 (on). Type: string (or Expression with resultType string).
func (o SapOdpLinkedServiceOutput) SncMode() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpLinkedService) interface{} { return v.SncMode }).(pulumi.AnyOutput)
}

// Initiator's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
func (o SapOdpLinkedServiceOutput) SncMyName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpLinkedService) interface{} { return v.SncMyName }).(pulumi.AnyOutput)
}

// Communication partner's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
func (o SapOdpLinkedServiceOutput) SncPartnerName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpLinkedService) interface{} { return v.SncPartnerName }).(pulumi.AnyOutput)
}

// SNC Quality of Protection. Allowed value include: 1, 2, 3, 8, 9. Type: string (or Expression with resultType string).
func (o SapOdpLinkedServiceOutput) SncQop() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpLinkedService) interface{} { return v.SncQop }).(pulumi.AnyOutput)
}

// The subscriber name. Type: string (or Expression with resultType string).
func (o SapOdpLinkedServiceOutput) SubscriberName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpLinkedService) interface{} { return v.SubscriberName }).(pulumi.AnyOutput)
}

// SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
func (o SapOdpLinkedServiceOutput) SystemId() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpLinkedService) interface{} { return v.SystemId }).(pulumi.AnyOutput)
}

// System number of the SAP system where the table is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
func (o SapOdpLinkedServiceOutput) SystemNumber() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpLinkedService) interface{} { return v.SystemNumber }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'SapOdp'.
func (o SapOdpLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapOdpLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Username to access the SAP server where the table is located. Type: string (or Expression with resultType string).
func (o SapOdpLinkedServiceOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpLinkedService) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// SNC X509 certificate file path. Type: string (or Expression with resultType string).
func (o SapOdpLinkedServiceOutput) X509CertificatePath() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpLinkedService) interface{} { return v.X509CertificatePath }).(pulumi.AnyOutput)
}

// SAP ODP Linked Service.
type SapOdpLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Client ID of the client on the SAP system where the table is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Language of the SAP system where the table is located. The default value is EN. Type: string (or Expression with resultType string).
	Language interface{} `pulumi:"language"`
	// The Logon Group for the SAP System. Type: string (or Expression with resultType string).
	LogonGroup interface{} `pulumi:"logonGroup"`
	// The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
	MessageServer interface{} `pulumi:"messageServer"`
	// The service name or port number of the Message Server. Type: string (or Expression with resultType string).
	MessageServerService interface{} `pulumi:"messageServerService"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to access the SAP server where the table is located.
	Password interface{} `pulumi:"password"`
	// Host name of the SAP instance where the table is located. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// External security product's library to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncLibraryPath interface{} `pulumi:"sncLibraryPath"`
	// SNC activation indicator to access the SAP server where the table is located. Must be either 0 (off) or 1 (on). Type: string (or Expression with resultType string).
	SncMode interface{} `pulumi:"sncMode"`
	// Initiator's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncMyName interface{} `pulumi:"sncMyName"`
	// Communication partner's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncPartnerName interface{} `pulumi:"sncPartnerName"`
	// SNC Quality of Protection. Allowed value include: 1, 2, 3, 8, 9. Type: string (or Expression with resultType string).
	SncQop interface{} `pulumi:"sncQop"`
	// The subscriber name. Type: string (or Expression with resultType string).
	SubscriberName interface{} `pulumi:"subscriberName"`
	// SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
	SystemId interface{} `pulumi:"systemId"`
	// System number of the SAP system where the table is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
	SystemNumber interface{} `pulumi:"systemNumber"`
	// Type of linked service.
	// Expected value is 'SapOdp'.
	Type string `pulumi:"type"`
	// Username to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
	// SNC X509 certificate file path. Type: string (or Expression with resultType string).
	X509CertificatePath interface{} `pulumi:"x509CertificatePath"`
}

// SAP ODP Linked Service.
type SapOdpLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SapOdpLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapOdpLinkedServiceResponse)(nil)).Elem()
}

func (o SapOdpLinkedServiceResponseOutput) ToSapOdpLinkedServiceResponseOutput() SapOdpLinkedServiceResponseOutput {
	return o
}

func (o SapOdpLinkedServiceResponseOutput) ToSapOdpLinkedServiceResponseOutputWithContext(ctx context.Context) SapOdpLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SapOdpLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapOdpLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Client ID of the client on the SAP system where the table is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
func (o SapOdpLinkedServiceResponseOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpLinkedServiceResponse) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o SapOdpLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SapOdpLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o SapOdpLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapOdpLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o SapOdpLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapOdpLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Language of the SAP system where the table is located. The default value is EN. Type: string (or Expression with resultType string).
func (o SapOdpLinkedServiceResponseOutput) Language() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpLinkedServiceResponse) interface{} { return v.Language }).(pulumi.AnyOutput)
}

// The Logon Group for the SAP System. Type: string (or Expression with resultType string).
func (o SapOdpLinkedServiceResponseOutput) LogonGroup() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpLinkedServiceResponse) interface{} { return v.LogonGroup }).(pulumi.AnyOutput)
}

// The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
func (o SapOdpLinkedServiceResponseOutput) MessageServer() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpLinkedServiceResponse) interface{} { return v.MessageServer }).(pulumi.AnyOutput)
}

// The service name or port number of the Message Server. Type: string (or Expression with resultType string).
func (o SapOdpLinkedServiceResponseOutput) MessageServerService() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpLinkedServiceResponse) interface{} { return v.MessageServerService }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SapOdpLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SapOdpLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password to access the SAP server where the table is located.
func (o SapOdpLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Host name of the SAP instance where the table is located. Type: string (or Expression with resultType string).
func (o SapOdpLinkedServiceResponseOutput) Server() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpLinkedServiceResponse) interface{} { return v.Server }).(pulumi.AnyOutput)
}

// External security product's library to access the SAP server where the table is located. Type: string (or Expression with resultType string).
func (o SapOdpLinkedServiceResponseOutput) SncLibraryPath() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpLinkedServiceResponse) interface{} { return v.SncLibraryPath }).(pulumi.AnyOutput)
}

// SNC activation indicator to access the SAP server where the table is located. Must be either 0 (off) or 1 (on). Type: string (or Expression with resultType string).
func (o SapOdpLinkedServiceResponseOutput) SncMode() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpLinkedServiceResponse) interface{} { return v.SncMode }).(pulumi.AnyOutput)
}

// Initiator's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
func (o SapOdpLinkedServiceResponseOutput) SncMyName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpLinkedServiceResponse) interface{} { return v.SncMyName }).(pulumi.AnyOutput)
}

// Communication partner's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
func (o SapOdpLinkedServiceResponseOutput) SncPartnerName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpLinkedServiceResponse) interface{} { return v.SncPartnerName }).(pulumi.AnyOutput)
}

// SNC Quality of Protection. Allowed value include: 1, 2, 3, 8, 9. Type: string (or Expression with resultType string).
func (o SapOdpLinkedServiceResponseOutput) SncQop() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpLinkedServiceResponse) interface{} { return v.SncQop }).(pulumi.AnyOutput)
}

// The subscriber name. Type: string (or Expression with resultType string).
func (o SapOdpLinkedServiceResponseOutput) SubscriberName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpLinkedServiceResponse) interface{} { return v.SubscriberName }).(pulumi.AnyOutput)
}

// SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
func (o SapOdpLinkedServiceResponseOutput) SystemId() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpLinkedServiceResponse) interface{} { return v.SystemId }).(pulumi.AnyOutput)
}

// System number of the SAP system where the table is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
func (o SapOdpLinkedServiceResponseOutput) SystemNumber() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpLinkedServiceResponse) interface{} { return v.SystemNumber }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'SapOdp'.
func (o SapOdpLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapOdpLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Username to access the SAP server where the table is located. Type: string (or Expression with resultType string).
func (o SapOdpLinkedServiceResponseOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpLinkedServiceResponse) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// SNC X509 certificate file path. Type: string (or Expression with resultType string).
func (o SapOdpLinkedServiceResponseOutput) X509CertificatePath() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpLinkedServiceResponse) interface{} { return v.X509CertificatePath }).(pulumi.AnyOutput)
}

// SAP ODP Resource properties.
type SapOdpResourceDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The context of the SAP ODP Object. Type: string (or Expression with resultType string).
	Context interface{} `pulumi:"context"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The name of the SAP ODP Object. Type: string (or Expression with resultType string).
	ObjectName interface{} `pulumi:"objectName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SapOdpResource'.
	Type string `pulumi:"type"`
}

// SapOdpResourceDatasetInput is an input type that accepts SapOdpResourceDatasetArgs and SapOdpResourceDatasetOutput values.
// You can construct a concrete instance of `SapOdpResourceDatasetInput` via:
//
//	SapOdpResourceDatasetArgs{...}
type SapOdpResourceDatasetInput interface {
	pulumi.Input

	ToSapOdpResourceDatasetOutput() SapOdpResourceDatasetOutput
	ToSapOdpResourceDatasetOutputWithContext(context.Context) SapOdpResourceDatasetOutput
}

// SAP ODP Resource properties.
type SapOdpResourceDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The context of the SAP ODP Object. Type: string (or Expression with resultType string).
	Context pulumi.Input `pulumi:"context"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// The name of the SAP ODP Object. Type: string (or Expression with resultType string).
	ObjectName pulumi.Input `pulumi:"objectName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SapOdpResource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SapOdpResourceDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapOdpResourceDataset)(nil)).Elem()
}

func (i SapOdpResourceDatasetArgs) ToSapOdpResourceDatasetOutput() SapOdpResourceDatasetOutput {
	return i.ToSapOdpResourceDatasetOutputWithContext(context.Background())
}

func (i SapOdpResourceDatasetArgs) ToSapOdpResourceDatasetOutputWithContext(ctx context.Context) SapOdpResourceDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapOdpResourceDatasetOutput)
}

// SAP ODP Resource properties.
type SapOdpResourceDatasetOutput struct{ *pulumi.OutputState }

func (SapOdpResourceDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapOdpResourceDataset)(nil)).Elem()
}

func (o SapOdpResourceDatasetOutput) ToSapOdpResourceDatasetOutput() SapOdpResourceDatasetOutput {
	return o
}

func (o SapOdpResourceDatasetOutput) ToSapOdpResourceDatasetOutputWithContext(ctx context.Context) SapOdpResourceDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SapOdpResourceDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapOdpResourceDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The context of the SAP ODP Object. Type: string (or Expression with resultType string).
func (o SapOdpResourceDatasetOutput) Context() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpResourceDataset) interface{} { return v.Context }).(pulumi.AnyOutput)
}

// Dataset description.
func (o SapOdpResourceDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapOdpResourceDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SapOdpResourceDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v SapOdpResourceDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o SapOdpResourceDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v SapOdpResourceDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// The name of the SAP ODP Object. Type: string (or Expression with resultType string).
func (o SapOdpResourceDatasetOutput) ObjectName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpResourceDataset) interface{} { return v.ObjectName }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o SapOdpResourceDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SapOdpResourceDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SapOdpResourceDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpResourceDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SapOdpResourceDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpResourceDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'SapOdpResource'.
func (o SapOdpResourceDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapOdpResourceDataset) string { return v.Type }).(pulumi.StringOutput)
}

// SAP ODP Resource properties.
type SapOdpResourceDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The context of the SAP ODP Object. Type: string (or Expression with resultType string).
	Context interface{} `pulumi:"context"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The name of the SAP ODP Object. Type: string (or Expression with resultType string).
	ObjectName interface{} `pulumi:"objectName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SapOdpResource'.
	Type string `pulumi:"type"`
}

// SAP ODP Resource properties.
type SapOdpResourceDatasetResponseOutput struct{ *pulumi.OutputState }

func (SapOdpResourceDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapOdpResourceDatasetResponse)(nil)).Elem()
}

func (o SapOdpResourceDatasetResponseOutput) ToSapOdpResourceDatasetResponseOutput() SapOdpResourceDatasetResponseOutput {
	return o
}

func (o SapOdpResourceDatasetResponseOutput) ToSapOdpResourceDatasetResponseOutputWithContext(ctx context.Context) SapOdpResourceDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SapOdpResourceDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapOdpResourceDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The context of the SAP ODP Object. Type: string (or Expression with resultType string).
func (o SapOdpResourceDatasetResponseOutput) Context() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpResourceDatasetResponse) interface{} { return v.Context }).(pulumi.AnyOutput)
}

// Dataset description.
func (o SapOdpResourceDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapOdpResourceDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SapOdpResourceDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v SapOdpResourceDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o SapOdpResourceDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v SapOdpResourceDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// The name of the SAP ODP Object. Type: string (or Expression with resultType string).
func (o SapOdpResourceDatasetResponseOutput) ObjectName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpResourceDatasetResponse) interface{} { return v.ObjectName }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o SapOdpResourceDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SapOdpResourceDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SapOdpResourceDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpResourceDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SapOdpResourceDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpResourceDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'SapOdpResource'.
func (o SapOdpResourceDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapOdpResourceDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity source for SAP ODP source.
type SapOdpSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The extraction mode. Allowed value include: Full, Delta and Recovery. The default value is Full. Type: string (or Expression with resultType string).
	ExtractionMode interface{} `pulumi:"extractionMode"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specifies the columns to be selected from source data. Type: array of objects(projection) (or Expression with resultType array of objects).
	Projection interface{} `pulumi:"projection"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Specifies the selection conditions from source data. Type: array of objects(selection) (or Expression with resultType array of objects).
	Selection interface{} `pulumi:"selection"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// The subscriber process to manage the delta process. Type: string (or Expression with resultType string).
	SubscriberProcess interface{} `pulumi:"subscriberProcess"`
	// Copy source type.
	// Expected value is 'SapOdpSource'.
	Type string `pulumi:"type"`
}

// SapOdpSourceInput is an input type that accepts SapOdpSourceArgs and SapOdpSourceOutput values.
// You can construct a concrete instance of `SapOdpSourceInput` via:
//
//	SapOdpSourceArgs{...}
type SapOdpSourceInput interface {
	pulumi.Input

	ToSapOdpSourceOutput() SapOdpSourceOutput
	ToSapOdpSourceOutputWithContext(context.Context) SapOdpSourceOutput
}

// A copy activity source for SAP ODP source.
type SapOdpSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The extraction mode. Allowed value include: Full, Delta and Recovery. The default value is Full. Type: string (or Expression with resultType string).
	ExtractionMode pulumi.Input `pulumi:"extractionMode"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Specifies the columns to be selected from source data. Type: array of objects(projection) (or Expression with resultType array of objects).
	Projection pulumi.Input `pulumi:"projection"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Specifies the selection conditions from source data. Type: array of objects(selection) (or Expression with resultType array of objects).
	Selection pulumi.Input `pulumi:"selection"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// The subscriber process to manage the delta process. Type: string (or Expression with resultType string).
	SubscriberProcess pulumi.Input `pulumi:"subscriberProcess"`
	// Copy source type.
	// Expected value is 'SapOdpSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SapOdpSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapOdpSource)(nil)).Elem()
}

func (i SapOdpSourceArgs) ToSapOdpSourceOutput() SapOdpSourceOutput {
	return i.ToSapOdpSourceOutputWithContext(context.Background())
}

func (i SapOdpSourceArgs) ToSapOdpSourceOutputWithContext(ctx context.Context) SapOdpSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapOdpSourceOutput)
}

// A copy activity source for SAP ODP source.
type SapOdpSourceOutput struct{ *pulumi.OutputState }

func (SapOdpSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapOdpSource)(nil)).Elem()
}

func (o SapOdpSourceOutput) ToSapOdpSourceOutput() SapOdpSourceOutput {
	return o
}

func (o SapOdpSourceOutput) ToSapOdpSourceOutputWithContext(ctx context.Context) SapOdpSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o SapOdpSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SapOdpSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The extraction mode. Allowed value include: Full, Delta and Recovery. The default value is Full. Type: string (or Expression with resultType string).
func (o SapOdpSourceOutput) ExtractionMode() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpSource) interface{} { return v.ExtractionMode }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SapOdpSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Specifies the columns to be selected from source data. Type: array of objects(projection) (or Expression with resultType array of objects).
func (o SapOdpSourceOutput) Projection() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpSource) interface{} { return v.Projection }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SapOdpSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Specifies the selection conditions from source data. Type: array of objects(selection) (or Expression with resultType array of objects).
func (o SapOdpSourceOutput) Selection() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpSource) interface{} { return v.Selection }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o SapOdpSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SapOdpSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// The subscriber process to manage the delta process. Type: string (or Expression with resultType string).
func (o SapOdpSourceOutput) SubscriberProcess() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpSource) interface{} { return v.SubscriberProcess }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'SapOdpSource'.
func (o SapOdpSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapOdpSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity source for SAP ODP source.
type SapOdpSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The extraction mode. Allowed value include: Full, Delta and Recovery. The default value is Full. Type: string (or Expression with resultType string).
	ExtractionMode interface{} `pulumi:"extractionMode"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specifies the columns to be selected from source data. Type: array of objects(projection) (or Expression with resultType array of objects).
	Projection interface{} `pulumi:"projection"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Specifies the selection conditions from source data. Type: array of objects(selection) (or Expression with resultType array of objects).
	Selection interface{} `pulumi:"selection"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// The subscriber process to manage the delta process. Type: string (or Expression with resultType string).
	SubscriberProcess interface{} `pulumi:"subscriberProcess"`
	// Copy source type.
	// Expected value is 'SapOdpSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for SAP ODP source.
type SapOdpSourceResponseOutput struct{ *pulumi.OutputState }

func (SapOdpSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapOdpSourceResponse)(nil)).Elem()
}

func (o SapOdpSourceResponseOutput) ToSapOdpSourceResponseOutput() SapOdpSourceResponseOutput {
	return o
}

func (o SapOdpSourceResponseOutput) ToSapOdpSourceResponseOutputWithContext(ctx context.Context) SapOdpSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o SapOdpSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SapOdpSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The extraction mode. Allowed value include: Full, Delta and Recovery. The default value is Full. Type: string (or Expression with resultType string).
func (o SapOdpSourceResponseOutput) ExtractionMode() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpSourceResponse) interface{} { return v.ExtractionMode }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SapOdpSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Specifies the columns to be selected from source data. Type: array of objects(projection) (or Expression with resultType array of objects).
func (o SapOdpSourceResponseOutput) Projection() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpSourceResponse) interface{} { return v.Projection }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SapOdpSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Specifies the selection conditions from source data. Type: array of objects(selection) (or Expression with resultType array of objects).
func (o SapOdpSourceResponseOutput) Selection() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpSourceResponse) interface{} { return v.Selection }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o SapOdpSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SapOdpSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// The subscriber process to manage the delta process. Type: string (or Expression with resultType string).
func (o SapOdpSourceResponseOutput) SubscriberProcess() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOdpSourceResponse) interface{} { return v.SubscriberProcess }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'SapOdpSource'.
func (o SapOdpSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapOdpSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// SAP Business Warehouse Open Hub Destination Linked Service.
type SapOpenHubLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Client ID of the client on the BW system where the open hub destination is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Language of the BW system where the open hub destination is located. The default value is EN. Type: string (or Expression with resultType string).
	Language interface{} `pulumi:"language"`
	// The Logon Group for the SAP System. Type: string (or Expression with resultType string).
	LogonGroup interface{} `pulumi:"logonGroup"`
	// The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
	MessageServer interface{} `pulumi:"messageServer"`
	// The service name or port number of the Message Server. Type: string (or Expression with resultType string).
	MessageServerService interface{} `pulumi:"messageServerService"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to access the SAP BW server where the open hub destination is located.
	Password interface{} `pulumi:"password"`
	// Host name of the SAP BW instance where the open hub destination is located. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
	SystemId interface{} `pulumi:"systemId"`
	// System number of the BW system where the open hub destination is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
	SystemNumber interface{} `pulumi:"systemNumber"`
	// Type of linked service.
	// Expected value is 'SapOpenHub'.
	Type string `pulumi:"type"`
	// Username to access the SAP BW server where the open hub destination is located. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// SapOpenHubLinkedServiceInput is an input type that accepts SapOpenHubLinkedServiceArgs and SapOpenHubLinkedServiceOutput values.
// You can construct a concrete instance of `SapOpenHubLinkedServiceInput` via:
//
//	SapOpenHubLinkedServiceArgs{...}
type SapOpenHubLinkedServiceInput interface {
	pulumi.Input

	ToSapOpenHubLinkedServiceOutput() SapOpenHubLinkedServiceOutput
	ToSapOpenHubLinkedServiceOutputWithContext(context.Context) SapOpenHubLinkedServiceOutput
}

// SAP Business Warehouse Open Hub Destination Linked Service.
type SapOpenHubLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Client ID of the client on the BW system where the open hub destination is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
	ClientId pulumi.Input `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Language of the BW system where the open hub destination is located. The default value is EN. Type: string (or Expression with resultType string).
	Language pulumi.Input `pulumi:"language"`
	// The Logon Group for the SAP System. Type: string (or Expression with resultType string).
	LogonGroup pulumi.Input `pulumi:"logonGroup"`
	// The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
	MessageServer pulumi.Input `pulumi:"messageServer"`
	// The service name or port number of the Message Server. Type: string (or Expression with resultType string).
	MessageServerService pulumi.Input `pulumi:"messageServerService"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password to access the SAP BW server where the open hub destination is located.
	Password pulumi.Input `pulumi:"password"`
	// Host name of the SAP BW instance where the open hub destination is located. Type: string (or Expression with resultType string).
	Server pulumi.Input `pulumi:"server"`
	// SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
	SystemId pulumi.Input `pulumi:"systemId"`
	// System number of the BW system where the open hub destination is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
	SystemNumber pulumi.Input `pulumi:"systemNumber"`
	// Type of linked service.
	// Expected value is 'SapOpenHub'.
	Type pulumi.StringInput `pulumi:"type"`
	// Username to access the SAP BW server where the open hub destination is located. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (SapOpenHubLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapOpenHubLinkedService)(nil)).Elem()
}

func (i SapOpenHubLinkedServiceArgs) ToSapOpenHubLinkedServiceOutput() SapOpenHubLinkedServiceOutput {
	return i.ToSapOpenHubLinkedServiceOutputWithContext(context.Background())
}

func (i SapOpenHubLinkedServiceArgs) ToSapOpenHubLinkedServiceOutputWithContext(ctx context.Context) SapOpenHubLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapOpenHubLinkedServiceOutput)
}

// SAP Business Warehouse Open Hub Destination Linked Service.
type SapOpenHubLinkedServiceOutput struct{ *pulumi.OutputState }

func (SapOpenHubLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapOpenHubLinkedService)(nil)).Elem()
}

func (o SapOpenHubLinkedServiceOutput) ToSapOpenHubLinkedServiceOutput() SapOpenHubLinkedServiceOutput {
	return o
}

func (o SapOpenHubLinkedServiceOutput) ToSapOpenHubLinkedServiceOutputWithContext(ctx context.Context) SapOpenHubLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SapOpenHubLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapOpenHubLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Client ID of the client on the BW system where the open hub destination is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
func (o SapOpenHubLinkedServiceOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubLinkedService) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o SapOpenHubLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v SapOpenHubLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o SapOpenHubLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapOpenHubLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o SapOpenHubLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapOpenHubLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Language of the BW system where the open hub destination is located. The default value is EN. Type: string (or Expression with resultType string).
func (o SapOpenHubLinkedServiceOutput) Language() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubLinkedService) interface{} { return v.Language }).(pulumi.AnyOutput)
}

// The Logon Group for the SAP System. Type: string (or Expression with resultType string).
func (o SapOpenHubLinkedServiceOutput) LogonGroup() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubLinkedService) interface{} { return v.LogonGroup }).(pulumi.AnyOutput)
}

// The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
func (o SapOpenHubLinkedServiceOutput) MessageServer() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubLinkedService) interface{} { return v.MessageServer }).(pulumi.AnyOutput)
}

// The service name or port number of the Message Server. Type: string (or Expression with resultType string).
func (o SapOpenHubLinkedServiceOutput) MessageServerService() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubLinkedService) interface{} { return v.MessageServerService }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SapOpenHubLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SapOpenHubLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Password to access the SAP BW server where the open hub destination is located.
func (o SapOpenHubLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Host name of the SAP BW instance where the open hub destination is located. Type: string (or Expression with resultType string).
func (o SapOpenHubLinkedServiceOutput) Server() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubLinkedService) interface{} { return v.Server }).(pulumi.AnyOutput)
}

// SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
func (o SapOpenHubLinkedServiceOutput) SystemId() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubLinkedService) interface{} { return v.SystemId }).(pulumi.AnyOutput)
}

// System number of the BW system where the open hub destination is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
func (o SapOpenHubLinkedServiceOutput) SystemNumber() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubLinkedService) interface{} { return v.SystemNumber }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'SapOpenHub'.
func (o SapOpenHubLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapOpenHubLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Username to access the SAP BW server where the open hub destination is located. Type: string (or Expression with resultType string).
func (o SapOpenHubLinkedServiceOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubLinkedService) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// SAP Business Warehouse Open Hub Destination Linked Service.
type SapOpenHubLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Client ID of the client on the BW system where the open hub destination is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Language of the BW system where the open hub destination is located. The default value is EN. Type: string (or Expression with resultType string).
	Language interface{} `pulumi:"language"`
	// The Logon Group for the SAP System. Type: string (or Expression with resultType string).
	LogonGroup interface{} `pulumi:"logonGroup"`
	// The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
	MessageServer interface{} `pulumi:"messageServer"`
	// The service name or port number of the Message Server. Type: string (or Expression with resultType string).
	MessageServerService interface{} `pulumi:"messageServerService"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to access the SAP BW server where the open hub destination is located.
	Password interface{} `pulumi:"password"`
	// Host name of the SAP BW instance where the open hub destination is located. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
	SystemId interface{} `pulumi:"systemId"`
	// System number of the BW system where the open hub destination is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
	SystemNumber interface{} `pulumi:"systemNumber"`
	// Type of linked service.
	// Expected value is 'SapOpenHub'.
	Type string `pulumi:"type"`
	// Username to access the SAP BW server where the open hub destination is located. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// SAP Business Warehouse Open Hub Destination Linked Service.
type SapOpenHubLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SapOpenHubLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapOpenHubLinkedServiceResponse)(nil)).Elem()
}

func (o SapOpenHubLinkedServiceResponseOutput) ToSapOpenHubLinkedServiceResponseOutput() SapOpenHubLinkedServiceResponseOutput {
	return o
}

func (o SapOpenHubLinkedServiceResponseOutput) ToSapOpenHubLinkedServiceResponseOutputWithContext(ctx context.Context) SapOpenHubLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SapOpenHubLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapOpenHubLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Client ID of the client on the BW system where the open hub destination is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
func (o SapOpenHubLinkedServiceResponseOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubLinkedServiceResponse) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o SapOpenHubLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SapOpenHubLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o SapOpenHubLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapOpenHubLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o SapOpenHubLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapOpenHubLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Language of the BW system where the open hub destination is located. The default value is EN. Type: string (or Expression with resultType string).
func (o SapOpenHubLinkedServiceResponseOutput) Language() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubLinkedServiceResponse) interface{} { return v.Language }).(pulumi.AnyOutput)
}

// The Logon Group for the SAP System. Type: string (or Expression with resultType string).
func (o SapOpenHubLinkedServiceResponseOutput) LogonGroup() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubLinkedServiceResponse) interface{} { return v.LogonGroup }).(pulumi.AnyOutput)
}

// The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
func (o SapOpenHubLinkedServiceResponseOutput) MessageServer() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubLinkedServiceResponse) interface{} { return v.MessageServer }).(pulumi.AnyOutput)
}

// The service name or port number of the Message Server. Type: string (or Expression with resultType string).
func (o SapOpenHubLinkedServiceResponseOutput) MessageServerService() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubLinkedServiceResponse) interface{} { return v.MessageServerService }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SapOpenHubLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SapOpenHubLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password to access the SAP BW server where the open hub destination is located.
func (o SapOpenHubLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Host name of the SAP BW instance where the open hub destination is located. Type: string (or Expression with resultType string).
func (o SapOpenHubLinkedServiceResponseOutput) Server() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubLinkedServiceResponse) interface{} { return v.Server }).(pulumi.AnyOutput)
}

// SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
func (o SapOpenHubLinkedServiceResponseOutput) SystemId() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubLinkedServiceResponse) interface{} { return v.SystemId }).(pulumi.AnyOutput)
}

// System number of the BW system where the open hub destination is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
func (o SapOpenHubLinkedServiceResponseOutput) SystemNumber() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubLinkedServiceResponse) interface{} { return v.SystemNumber }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'SapOpenHub'.
func (o SapOpenHubLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapOpenHubLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Username to access the SAP BW server where the open hub destination is located. Type: string (or Expression with resultType string).
func (o SapOpenHubLinkedServiceResponseOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubLinkedServiceResponse) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// A copy activity source for SAP Business Warehouse Open Hub Destination source.
type SapOpenHubSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// The ID of request for delta loading. Once it is set, only data with requestId larger than the value of this property will be retrieved. The default value is 0. Type: integer (or Expression with resultType integer ).
	BaseRequestId interface{} `pulumi:"baseRequestId"`
	// Specifies the custom RFC function module that will be used to read data from SAP Table. Type: string (or Expression with resultType string).
	CustomRfcReadTableFunctionModule interface{} `pulumi:"customRfcReadTableFunctionModule"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Whether to exclude the records of the last request. The default value is true. Type: boolean (or Expression with resultType boolean).
	ExcludeLastRequest interface{} `pulumi:"excludeLastRequest"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// The single character that will be used as delimiter passed to SAP RFC as well as splitting the output data retrieved. Type: string (or Expression with resultType string).
	SapDataColumnDelimiter interface{} `pulumi:"sapDataColumnDelimiter"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SapOpenHubSource'.
	Type string `pulumi:"type"`
}

// SapOpenHubSourceInput is an input type that accepts SapOpenHubSourceArgs and SapOpenHubSourceOutput values.
// You can construct a concrete instance of `SapOpenHubSourceInput` via:
//
//	SapOpenHubSourceArgs{...}
type SapOpenHubSourceInput interface {
	pulumi.Input

	ToSapOpenHubSourceOutput() SapOpenHubSourceOutput
	ToSapOpenHubSourceOutputWithContext(context.Context) SapOpenHubSourceOutput
}

// A copy activity source for SAP Business Warehouse Open Hub Destination source.
type SapOpenHubSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// The ID of request for delta loading. Once it is set, only data with requestId larger than the value of this property will be retrieved. The default value is 0. Type: integer (or Expression with resultType integer ).
	BaseRequestId pulumi.Input `pulumi:"baseRequestId"`
	// Specifies the custom RFC function module that will be used to read data from SAP Table. Type: string (or Expression with resultType string).
	CustomRfcReadTableFunctionModule pulumi.Input `pulumi:"customRfcReadTableFunctionModule"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// Whether to exclude the records of the last request. The default value is true. Type: boolean (or Expression with resultType boolean).
	ExcludeLastRequest pulumi.Input `pulumi:"excludeLastRequest"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// The single character that will be used as delimiter passed to SAP RFC as well as splitting the output data retrieved. Type: string (or Expression with resultType string).
	SapDataColumnDelimiter pulumi.Input `pulumi:"sapDataColumnDelimiter"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SapOpenHubSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SapOpenHubSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapOpenHubSource)(nil)).Elem()
}

func (i SapOpenHubSourceArgs) ToSapOpenHubSourceOutput() SapOpenHubSourceOutput {
	return i.ToSapOpenHubSourceOutputWithContext(context.Background())
}

func (i SapOpenHubSourceArgs) ToSapOpenHubSourceOutputWithContext(ctx context.Context) SapOpenHubSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapOpenHubSourceOutput)
}

// A copy activity source for SAP Business Warehouse Open Hub Destination source.
type SapOpenHubSourceOutput struct{ *pulumi.OutputState }

func (SapOpenHubSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapOpenHubSource)(nil)).Elem()
}

func (o SapOpenHubSourceOutput) ToSapOpenHubSourceOutput() SapOpenHubSourceOutput {
	return o
}

func (o SapOpenHubSourceOutput) ToSapOpenHubSourceOutputWithContext(ctx context.Context) SapOpenHubSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o SapOpenHubSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// The ID of request for delta loading. Once it is set, only data with requestId larger than the value of this property will be retrieved. The default value is 0. Type: integer (or Expression with resultType integer ).
func (o SapOpenHubSourceOutput) BaseRequestId() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubSource) interface{} { return v.BaseRequestId }).(pulumi.AnyOutput)
}

// Specifies the custom RFC function module that will be used to read data from SAP Table. Type: string (or Expression with resultType string).
func (o SapOpenHubSourceOutput) CustomRfcReadTableFunctionModule() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubSource) interface{} { return v.CustomRfcReadTableFunctionModule }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SapOpenHubSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Whether to exclude the records of the last request. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o SapOpenHubSourceOutput) ExcludeLastRequest() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubSource) interface{} { return v.ExcludeLastRequest }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SapOpenHubSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SapOpenHubSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// The single character that will be used as delimiter passed to SAP RFC as well as splitting the output data retrieved. Type: string (or Expression with resultType string).
func (o SapOpenHubSourceOutput) SapDataColumnDelimiter() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubSource) interface{} { return v.SapDataColumnDelimiter }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o SapOpenHubSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SapOpenHubSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'SapOpenHubSource'.
func (o SapOpenHubSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapOpenHubSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity source for SAP Business Warehouse Open Hub Destination source.
type SapOpenHubSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// The ID of request for delta loading. Once it is set, only data with requestId larger than the value of this property will be retrieved. The default value is 0. Type: integer (or Expression with resultType integer ).
	BaseRequestId interface{} `pulumi:"baseRequestId"`
	// Specifies the custom RFC function module that will be used to read data from SAP Table. Type: string (or Expression with resultType string).
	CustomRfcReadTableFunctionModule interface{} `pulumi:"customRfcReadTableFunctionModule"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Whether to exclude the records of the last request. The default value is true. Type: boolean (or Expression with resultType boolean).
	ExcludeLastRequest interface{} `pulumi:"excludeLastRequest"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// The single character that will be used as delimiter passed to SAP RFC as well as splitting the output data retrieved. Type: string (or Expression with resultType string).
	SapDataColumnDelimiter interface{} `pulumi:"sapDataColumnDelimiter"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SapOpenHubSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for SAP Business Warehouse Open Hub Destination source.
type SapOpenHubSourceResponseOutput struct{ *pulumi.OutputState }

func (SapOpenHubSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapOpenHubSourceResponse)(nil)).Elem()
}

func (o SapOpenHubSourceResponseOutput) ToSapOpenHubSourceResponseOutput() SapOpenHubSourceResponseOutput {
	return o
}

func (o SapOpenHubSourceResponseOutput) ToSapOpenHubSourceResponseOutputWithContext(ctx context.Context) SapOpenHubSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o SapOpenHubSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// The ID of request for delta loading. Once it is set, only data with requestId larger than the value of this property will be retrieved. The default value is 0. Type: integer (or Expression with resultType integer ).
func (o SapOpenHubSourceResponseOutput) BaseRequestId() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubSourceResponse) interface{} { return v.BaseRequestId }).(pulumi.AnyOutput)
}

// Specifies the custom RFC function module that will be used to read data from SAP Table. Type: string (or Expression with resultType string).
func (o SapOpenHubSourceResponseOutput) CustomRfcReadTableFunctionModule() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubSourceResponse) interface{} { return v.CustomRfcReadTableFunctionModule }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SapOpenHubSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Whether to exclude the records of the last request. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o SapOpenHubSourceResponseOutput) ExcludeLastRequest() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubSourceResponse) interface{} { return v.ExcludeLastRequest }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SapOpenHubSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SapOpenHubSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// The single character that will be used as delimiter passed to SAP RFC as well as splitting the output data retrieved. Type: string (or Expression with resultType string).
func (o SapOpenHubSourceResponseOutput) SapDataColumnDelimiter() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubSourceResponse) interface{} { return v.SapDataColumnDelimiter }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o SapOpenHubSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SapOpenHubSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'SapOpenHubSource'.
func (o SapOpenHubSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapOpenHubSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Sap Business Warehouse Open Hub Destination Table properties.
type SapOpenHubTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The ID of request for delta loading. Once it is set, only data with requestId larger than the value of this property will be retrieved. The default value is 0. Type: integer (or Expression with resultType integer ).
	BaseRequestId interface{} `pulumi:"baseRequestId"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Whether to exclude the records of the last request. The default value is true. Type: boolean (or Expression with resultType boolean).
	ExcludeLastRequest interface{} `pulumi:"excludeLastRequest"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The name of the Open Hub Destination with destination type as Database Table. Type: string (or Expression with resultType string).
	OpenHubDestinationName interface{} `pulumi:"openHubDestinationName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SapOpenHubTable'.
	Type string `pulumi:"type"`
}

// SapOpenHubTableDatasetInput is an input type that accepts SapOpenHubTableDatasetArgs and SapOpenHubTableDatasetOutput values.
// You can construct a concrete instance of `SapOpenHubTableDatasetInput` via:
//
//	SapOpenHubTableDatasetArgs{...}
type SapOpenHubTableDatasetInput interface {
	pulumi.Input

	ToSapOpenHubTableDatasetOutput() SapOpenHubTableDatasetOutput
	ToSapOpenHubTableDatasetOutputWithContext(context.Context) SapOpenHubTableDatasetOutput
}

// Sap Business Warehouse Open Hub Destination Table properties.
type SapOpenHubTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The ID of request for delta loading. Once it is set, only data with requestId larger than the value of this property will be retrieved. The default value is 0. Type: integer (or Expression with resultType integer ).
	BaseRequestId pulumi.Input `pulumi:"baseRequestId"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Whether to exclude the records of the last request. The default value is true. Type: boolean (or Expression with resultType boolean).
	ExcludeLastRequest pulumi.Input `pulumi:"excludeLastRequest"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// The name of the Open Hub Destination with destination type as Database Table. Type: string (or Expression with resultType string).
	OpenHubDestinationName pulumi.Input `pulumi:"openHubDestinationName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SapOpenHubTable'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SapOpenHubTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapOpenHubTableDataset)(nil)).Elem()
}

func (i SapOpenHubTableDatasetArgs) ToSapOpenHubTableDatasetOutput() SapOpenHubTableDatasetOutput {
	return i.ToSapOpenHubTableDatasetOutputWithContext(context.Background())
}

func (i SapOpenHubTableDatasetArgs) ToSapOpenHubTableDatasetOutputWithContext(ctx context.Context) SapOpenHubTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapOpenHubTableDatasetOutput)
}

// Sap Business Warehouse Open Hub Destination Table properties.
type SapOpenHubTableDatasetOutput struct{ *pulumi.OutputState }

func (SapOpenHubTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapOpenHubTableDataset)(nil)).Elem()
}

func (o SapOpenHubTableDatasetOutput) ToSapOpenHubTableDatasetOutput() SapOpenHubTableDatasetOutput {
	return o
}

func (o SapOpenHubTableDatasetOutput) ToSapOpenHubTableDatasetOutputWithContext(ctx context.Context) SapOpenHubTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SapOpenHubTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapOpenHubTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The ID of request for delta loading. Once it is set, only data with requestId larger than the value of this property will be retrieved. The default value is 0. Type: integer (or Expression with resultType integer ).
func (o SapOpenHubTableDatasetOutput) BaseRequestId() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubTableDataset) interface{} { return v.BaseRequestId }).(pulumi.AnyOutput)
}

// Dataset description.
func (o SapOpenHubTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapOpenHubTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether to exclude the records of the last request. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o SapOpenHubTableDatasetOutput) ExcludeLastRequest() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubTableDataset) interface{} { return v.ExcludeLastRequest }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SapOpenHubTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v SapOpenHubTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o SapOpenHubTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v SapOpenHubTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// The name of the Open Hub Destination with destination type as Database Table. Type: string (or Expression with resultType string).
func (o SapOpenHubTableDatasetOutput) OpenHubDestinationName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubTableDataset) interface{} { return v.OpenHubDestinationName }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o SapOpenHubTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SapOpenHubTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SapOpenHubTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SapOpenHubTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'SapOpenHubTable'.
func (o SapOpenHubTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapOpenHubTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Sap Business Warehouse Open Hub Destination Table properties.
type SapOpenHubTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The ID of request for delta loading. Once it is set, only data with requestId larger than the value of this property will be retrieved. The default value is 0. Type: integer (or Expression with resultType integer ).
	BaseRequestId interface{} `pulumi:"baseRequestId"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Whether to exclude the records of the last request. The default value is true. Type: boolean (or Expression with resultType boolean).
	ExcludeLastRequest interface{} `pulumi:"excludeLastRequest"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The name of the Open Hub Destination with destination type as Database Table. Type: string (or Expression with resultType string).
	OpenHubDestinationName interface{} `pulumi:"openHubDestinationName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SapOpenHubTable'.
	Type string `pulumi:"type"`
}

// Sap Business Warehouse Open Hub Destination Table properties.
type SapOpenHubTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (SapOpenHubTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapOpenHubTableDatasetResponse)(nil)).Elem()
}

func (o SapOpenHubTableDatasetResponseOutput) ToSapOpenHubTableDatasetResponseOutput() SapOpenHubTableDatasetResponseOutput {
	return o
}

func (o SapOpenHubTableDatasetResponseOutput) ToSapOpenHubTableDatasetResponseOutputWithContext(ctx context.Context) SapOpenHubTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SapOpenHubTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapOpenHubTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The ID of request for delta loading. Once it is set, only data with requestId larger than the value of this property will be retrieved. The default value is 0. Type: integer (or Expression with resultType integer ).
func (o SapOpenHubTableDatasetResponseOutput) BaseRequestId() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubTableDatasetResponse) interface{} { return v.BaseRequestId }).(pulumi.AnyOutput)
}

// Dataset description.
func (o SapOpenHubTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapOpenHubTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether to exclude the records of the last request. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o SapOpenHubTableDatasetResponseOutput) ExcludeLastRequest() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubTableDatasetResponse) interface{} { return v.ExcludeLastRequest }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SapOpenHubTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v SapOpenHubTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o SapOpenHubTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v SapOpenHubTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// The name of the Open Hub Destination with destination type as Database Table. Type: string (or Expression with resultType string).
func (o SapOpenHubTableDatasetResponseOutput) OpenHubDestinationName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubTableDatasetResponse) interface{} { return v.OpenHubDestinationName }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o SapOpenHubTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SapOpenHubTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SapOpenHubTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SapOpenHubTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SapOpenHubTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'SapOpenHubTable'.
func (o SapOpenHubTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapOpenHubTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// SAP Table Linked Service.
type SapTableLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Client ID of the client on the SAP system where the table is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Language of the SAP system where the table is located. The default value is EN. Type: string (or Expression with resultType string).
	Language interface{} `pulumi:"language"`
	// The Logon Group for the SAP System. Type: string (or Expression with resultType string).
	LogonGroup interface{} `pulumi:"logonGroup"`
	// The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
	MessageServer interface{} `pulumi:"messageServer"`
	// The service name or port number of the Message Server. Type: string (or Expression with resultType string).
	MessageServerService interface{} `pulumi:"messageServerService"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to access the SAP server where the table is located.
	Password interface{} `pulumi:"password"`
	// Host name of the SAP instance where the table is located. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// External security product's library to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncLibraryPath interface{} `pulumi:"sncLibraryPath"`
	// SNC activation indicator to access the SAP server where the table is located. Must be either 0 (off) or 1 (on). Type: string (or Expression with resultType string).
	SncMode interface{} `pulumi:"sncMode"`
	// Initiator's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncMyName interface{} `pulumi:"sncMyName"`
	// Communication partner's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncPartnerName interface{} `pulumi:"sncPartnerName"`
	// SNC Quality of Protection. Allowed value include: 1, 2, 3, 8, 9. Type: string (or Expression with resultType string).
	SncQop interface{} `pulumi:"sncQop"`
	// SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
	SystemId interface{} `pulumi:"systemId"`
	// System number of the SAP system where the table is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
	SystemNumber interface{} `pulumi:"systemNumber"`
	// Type of linked service.
	// Expected value is 'SapTable'.
	Type string `pulumi:"type"`
	// Username to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// SapTableLinkedServiceInput is an input type that accepts SapTableLinkedServiceArgs and SapTableLinkedServiceOutput values.
// You can construct a concrete instance of `SapTableLinkedServiceInput` via:
//
//	SapTableLinkedServiceArgs{...}
type SapTableLinkedServiceInput interface {
	pulumi.Input

	ToSapTableLinkedServiceOutput() SapTableLinkedServiceOutput
	ToSapTableLinkedServiceOutputWithContext(context.Context) SapTableLinkedServiceOutput
}

// SAP Table Linked Service.
type SapTableLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Client ID of the client on the SAP system where the table is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
	ClientId pulumi.Input `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Language of the SAP system where the table is located. The default value is EN. Type: string (or Expression with resultType string).
	Language pulumi.Input `pulumi:"language"`
	// The Logon Group for the SAP System. Type: string (or Expression with resultType string).
	LogonGroup pulumi.Input `pulumi:"logonGroup"`
	// The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
	MessageServer pulumi.Input `pulumi:"messageServer"`
	// The service name or port number of the Message Server. Type: string (or Expression with resultType string).
	MessageServerService pulumi.Input `pulumi:"messageServerService"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password to access the SAP server where the table is located.
	Password pulumi.Input `pulumi:"password"`
	// Host name of the SAP instance where the table is located. Type: string (or Expression with resultType string).
	Server pulumi.Input `pulumi:"server"`
	// External security product's library to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncLibraryPath pulumi.Input `pulumi:"sncLibraryPath"`
	// SNC activation indicator to access the SAP server where the table is located. Must be either 0 (off) or 1 (on). Type: string (or Expression with resultType string).
	SncMode pulumi.Input `pulumi:"sncMode"`
	// Initiator's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncMyName pulumi.Input `pulumi:"sncMyName"`
	// Communication partner's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncPartnerName pulumi.Input `pulumi:"sncPartnerName"`
	// SNC Quality of Protection. Allowed value include: 1, 2, 3, 8, 9. Type: string (or Expression with resultType string).
	SncQop pulumi.Input `pulumi:"sncQop"`
	// SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
	SystemId pulumi.Input `pulumi:"systemId"`
	// System number of the SAP system where the table is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
	SystemNumber pulumi.Input `pulumi:"systemNumber"`
	// Type of linked service.
	// Expected value is 'SapTable'.
	Type pulumi.StringInput `pulumi:"type"`
	// Username to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (SapTableLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapTableLinkedService)(nil)).Elem()
}

func (i SapTableLinkedServiceArgs) ToSapTableLinkedServiceOutput() SapTableLinkedServiceOutput {
	return i.ToSapTableLinkedServiceOutputWithContext(context.Background())
}

func (i SapTableLinkedServiceArgs) ToSapTableLinkedServiceOutputWithContext(ctx context.Context) SapTableLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapTableLinkedServiceOutput)
}

// SAP Table Linked Service.
type SapTableLinkedServiceOutput struct{ *pulumi.OutputState }

func (SapTableLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapTableLinkedService)(nil)).Elem()
}

func (o SapTableLinkedServiceOutput) ToSapTableLinkedServiceOutput() SapTableLinkedServiceOutput {
	return o
}

func (o SapTableLinkedServiceOutput) ToSapTableLinkedServiceOutputWithContext(ctx context.Context) SapTableLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SapTableLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapTableLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Client ID of the client on the SAP system where the table is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedService) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o SapTableLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v SapTableLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o SapTableLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapTableLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o SapTableLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapTableLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Language of the SAP system where the table is located. The default value is EN. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceOutput) Language() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedService) interface{} { return v.Language }).(pulumi.AnyOutput)
}

// The Logon Group for the SAP System. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceOutput) LogonGroup() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedService) interface{} { return v.LogonGroup }).(pulumi.AnyOutput)
}

// The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceOutput) MessageServer() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedService) interface{} { return v.MessageServer }).(pulumi.AnyOutput)
}

// The service name or port number of the Message Server. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceOutput) MessageServerService() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedService) interface{} { return v.MessageServerService }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SapTableLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SapTableLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Password to access the SAP server where the table is located.
func (o SapTableLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Host name of the SAP instance where the table is located. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceOutput) Server() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedService) interface{} { return v.Server }).(pulumi.AnyOutput)
}

// External security product's library to access the SAP server where the table is located. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceOutput) SncLibraryPath() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedService) interface{} { return v.SncLibraryPath }).(pulumi.AnyOutput)
}

// SNC activation indicator to access the SAP server where the table is located. Must be either 0 (off) or 1 (on). Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceOutput) SncMode() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedService) interface{} { return v.SncMode }).(pulumi.AnyOutput)
}

// Initiator's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceOutput) SncMyName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedService) interface{} { return v.SncMyName }).(pulumi.AnyOutput)
}

// Communication partner's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceOutput) SncPartnerName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedService) interface{} { return v.SncPartnerName }).(pulumi.AnyOutput)
}

// SNC Quality of Protection. Allowed value include: 1, 2, 3, 8, 9. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceOutput) SncQop() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedService) interface{} { return v.SncQop }).(pulumi.AnyOutput)
}

// SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceOutput) SystemId() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedService) interface{} { return v.SystemId }).(pulumi.AnyOutput)
}

// System number of the SAP system where the table is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceOutput) SystemNumber() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedService) interface{} { return v.SystemNumber }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'SapTable'.
func (o SapTableLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapTableLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Username to access the SAP server where the table is located. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedService) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// SAP Table Linked Service.
type SapTableLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Client ID of the client on the SAP system where the table is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Language of the SAP system where the table is located. The default value is EN. Type: string (or Expression with resultType string).
	Language interface{} `pulumi:"language"`
	// The Logon Group for the SAP System. Type: string (or Expression with resultType string).
	LogonGroup interface{} `pulumi:"logonGroup"`
	// The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
	MessageServer interface{} `pulumi:"messageServer"`
	// The service name or port number of the Message Server. Type: string (or Expression with resultType string).
	MessageServerService interface{} `pulumi:"messageServerService"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to access the SAP server where the table is located.
	Password interface{} `pulumi:"password"`
	// Host name of the SAP instance where the table is located. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// External security product's library to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncLibraryPath interface{} `pulumi:"sncLibraryPath"`
	// SNC activation indicator to access the SAP server where the table is located. Must be either 0 (off) or 1 (on). Type: string (or Expression with resultType string).
	SncMode interface{} `pulumi:"sncMode"`
	// Initiator's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncMyName interface{} `pulumi:"sncMyName"`
	// Communication partner's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncPartnerName interface{} `pulumi:"sncPartnerName"`
	// SNC Quality of Protection. Allowed value include: 1, 2, 3, 8, 9. Type: string (or Expression with resultType string).
	SncQop interface{} `pulumi:"sncQop"`
	// SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
	SystemId interface{} `pulumi:"systemId"`
	// System number of the SAP system where the table is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
	SystemNumber interface{} `pulumi:"systemNumber"`
	// Type of linked service.
	// Expected value is 'SapTable'.
	Type string `pulumi:"type"`
	// Username to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// SAP Table Linked Service.
type SapTableLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SapTableLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapTableLinkedServiceResponse)(nil)).Elem()
}

func (o SapTableLinkedServiceResponseOutput) ToSapTableLinkedServiceResponseOutput() SapTableLinkedServiceResponseOutput {
	return o
}

func (o SapTableLinkedServiceResponseOutput) ToSapTableLinkedServiceResponseOutputWithContext(ctx context.Context) SapTableLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SapTableLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapTableLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Client ID of the client on the SAP system where the table is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceResponseOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedServiceResponse) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o SapTableLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SapTableLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o SapTableLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapTableLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o SapTableLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapTableLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Language of the SAP system where the table is located. The default value is EN. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceResponseOutput) Language() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedServiceResponse) interface{} { return v.Language }).(pulumi.AnyOutput)
}

// The Logon Group for the SAP System. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceResponseOutput) LogonGroup() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedServiceResponse) interface{} { return v.LogonGroup }).(pulumi.AnyOutput)
}

// The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceResponseOutput) MessageServer() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedServiceResponse) interface{} { return v.MessageServer }).(pulumi.AnyOutput)
}

// The service name or port number of the Message Server. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceResponseOutput) MessageServerService() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedServiceResponse) interface{} { return v.MessageServerService }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SapTableLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SapTableLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password to access the SAP server where the table is located.
func (o SapTableLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Host name of the SAP instance where the table is located. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceResponseOutput) Server() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedServiceResponse) interface{} { return v.Server }).(pulumi.AnyOutput)
}

// External security product's library to access the SAP server where the table is located. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceResponseOutput) SncLibraryPath() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedServiceResponse) interface{} { return v.SncLibraryPath }).(pulumi.AnyOutput)
}

// SNC activation indicator to access the SAP server where the table is located. Must be either 0 (off) or 1 (on). Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceResponseOutput) SncMode() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedServiceResponse) interface{} { return v.SncMode }).(pulumi.AnyOutput)
}

// Initiator's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceResponseOutput) SncMyName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedServiceResponse) interface{} { return v.SncMyName }).(pulumi.AnyOutput)
}

// Communication partner's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceResponseOutput) SncPartnerName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedServiceResponse) interface{} { return v.SncPartnerName }).(pulumi.AnyOutput)
}

// SNC Quality of Protection. Allowed value include: 1, 2, 3, 8, 9. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceResponseOutput) SncQop() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedServiceResponse) interface{} { return v.SncQop }).(pulumi.AnyOutput)
}

// SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceResponseOutput) SystemId() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedServiceResponse) interface{} { return v.SystemId }).(pulumi.AnyOutput)
}

// System number of the SAP system where the table is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceResponseOutput) SystemNumber() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedServiceResponse) interface{} { return v.SystemNumber }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'SapTable'.
func (o SapTableLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapTableLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Username to access the SAP server where the table is located. Type: string (or Expression with resultType string).
func (o SapTableLinkedServiceResponseOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableLinkedServiceResponse) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// The settings that will be leveraged for SAP table source partitioning.
type SapTablePartitionSettings struct {
	// The maximum value of partitions the table will be split into. Type: integer (or Expression with resultType string).
	MaxPartitionsNumber interface{} `pulumi:"maxPartitionsNumber"`
	// The name of the column that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionColumnName interface{} `pulumi:"partitionColumnName"`
	// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionLowerBound interface{} `pulumi:"partitionLowerBound"`
	// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionUpperBound interface{} `pulumi:"partitionUpperBound"`
}

// SapTablePartitionSettingsInput is an input type that accepts SapTablePartitionSettingsArgs and SapTablePartitionSettingsOutput values.
// You can construct a concrete instance of `SapTablePartitionSettingsInput` via:
//
//	SapTablePartitionSettingsArgs{...}
type SapTablePartitionSettingsInput interface {
	pulumi.Input

	ToSapTablePartitionSettingsOutput() SapTablePartitionSettingsOutput
	ToSapTablePartitionSettingsOutputWithContext(context.Context) SapTablePartitionSettingsOutput
}

// The settings that will be leveraged for SAP table source partitioning.
type SapTablePartitionSettingsArgs struct {
	// The maximum value of partitions the table will be split into. Type: integer (or Expression with resultType string).
	MaxPartitionsNumber pulumi.Input `pulumi:"maxPartitionsNumber"`
	// The name of the column that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionColumnName pulumi.Input `pulumi:"partitionColumnName"`
	// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionLowerBound pulumi.Input `pulumi:"partitionLowerBound"`
	// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionUpperBound pulumi.Input `pulumi:"partitionUpperBound"`
}

func (SapTablePartitionSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapTablePartitionSettings)(nil)).Elem()
}

func (i SapTablePartitionSettingsArgs) ToSapTablePartitionSettingsOutput() SapTablePartitionSettingsOutput {
	return i.ToSapTablePartitionSettingsOutputWithContext(context.Background())
}

func (i SapTablePartitionSettingsArgs) ToSapTablePartitionSettingsOutputWithContext(ctx context.Context) SapTablePartitionSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapTablePartitionSettingsOutput)
}

func (i SapTablePartitionSettingsArgs) ToSapTablePartitionSettingsPtrOutput() SapTablePartitionSettingsPtrOutput {
	return i.ToSapTablePartitionSettingsPtrOutputWithContext(context.Background())
}

func (i SapTablePartitionSettingsArgs) ToSapTablePartitionSettingsPtrOutputWithContext(ctx context.Context) SapTablePartitionSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapTablePartitionSettingsOutput).ToSapTablePartitionSettingsPtrOutputWithContext(ctx)
}

// SapTablePartitionSettingsPtrInput is an input type that accepts SapTablePartitionSettingsArgs, SapTablePartitionSettingsPtr and SapTablePartitionSettingsPtrOutput values.
// You can construct a concrete instance of `SapTablePartitionSettingsPtrInput` via:
//
//	        SapTablePartitionSettingsArgs{...}
//
//	or:
//
//	        nil
type SapTablePartitionSettingsPtrInput interface {
	pulumi.Input

	ToSapTablePartitionSettingsPtrOutput() SapTablePartitionSettingsPtrOutput
	ToSapTablePartitionSettingsPtrOutputWithContext(context.Context) SapTablePartitionSettingsPtrOutput
}

type sapTablePartitionSettingsPtrType SapTablePartitionSettingsArgs

func SapTablePartitionSettingsPtr(v *SapTablePartitionSettingsArgs) SapTablePartitionSettingsPtrInput {
	return (*sapTablePartitionSettingsPtrType)(v)
}

func (*sapTablePartitionSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SapTablePartitionSettings)(nil)).Elem()
}

func (i *sapTablePartitionSettingsPtrType) ToSapTablePartitionSettingsPtrOutput() SapTablePartitionSettingsPtrOutput {
	return i.ToSapTablePartitionSettingsPtrOutputWithContext(context.Background())
}

func (i *sapTablePartitionSettingsPtrType) ToSapTablePartitionSettingsPtrOutputWithContext(ctx context.Context) SapTablePartitionSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapTablePartitionSettingsPtrOutput)
}

// The settings that will be leveraged for SAP table source partitioning.
type SapTablePartitionSettingsOutput struct{ *pulumi.OutputState }

func (SapTablePartitionSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapTablePartitionSettings)(nil)).Elem()
}

func (o SapTablePartitionSettingsOutput) ToSapTablePartitionSettingsOutput() SapTablePartitionSettingsOutput {
	return o
}

func (o SapTablePartitionSettingsOutput) ToSapTablePartitionSettingsOutputWithContext(ctx context.Context) SapTablePartitionSettingsOutput {
	return o
}

func (o SapTablePartitionSettingsOutput) ToSapTablePartitionSettingsPtrOutput() SapTablePartitionSettingsPtrOutput {
	return o.ToSapTablePartitionSettingsPtrOutputWithContext(context.Background())
}

func (o SapTablePartitionSettingsOutput) ToSapTablePartitionSettingsPtrOutputWithContext(ctx context.Context) SapTablePartitionSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SapTablePartitionSettings) *SapTablePartitionSettings {
		return &v
	}).(SapTablePartitionSettingsPtrOutput)
}

// The maximum value of partitions the table will be split into. Type: integer (or Expression with resultType string).
func (o SapTablePartitionSettingsOutput) MaxPartitionsNumber() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTablePartitionSettings) interface{} { return v.MaxPartitionsNumber }).(pulumi.AnyOutput)
}

// The name of the column that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o SapTablePartitionSettingsOutput) PartitionColumnName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTablePartitionSettings) interface{} { return v.PartitionColumnName }).(pulumi.AnyOutput)
}

// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o SapTablePartitionSettingsOutput) PartitionLowerBound() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTablePartitionSettings) interface{} { return v.PartitionLowerBound }).(pulumi.AnyOutput)
}

// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o SapTablePartitionSettingsOutput) PartitionUpperBound() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTablePartitionSettings) interface{} { return v.PartitionUpperBound }).(pulumi.AnyOutput)
}

type SapTablePartitionSettingsPtrOutput struct{ *pulumi.OutputState }

func (SapTablePartitionSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SapTablePartitionSettings)(nil)).Elem()
}

func (o SapTablePartitionSettingsPtrOutput) ToSapTablePartitionSettingsPtrOutput() SapTablePartitionSettingsPtrOutput {
	return o
}

func (o SapTablePartitionSettingsPtrOutput) ToSapTablePartitionSettingsPtrOutputWithContext(ctx context.Context) SapTablePartitionSettingsPtrOutput {
	return o
}

func (o SapTablePartitionSettingsPtrOutput) Elem() SapTablePartitionSettingsOutput {
	return o.ApplyT(func(v *SapTablePartitionSettings) SapTablePartitionSettings {
		if v != nil {
			return *v
		}
		var ret SapTablePartitionSettings
		return ret
	}).(SapTablePartitionSettingsOutput)
}

// The maximum value of partitions the table will be split into. Type: integer (or Expression with resultType string).
func (o SapTablePartitionSettingsPtrOutput) MaxPartitionsNumber() pulumi.AnyOutput {
	return o.ApplyT(func(v *SapTablePartitionSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxPartitionsNumber
	}).(pulumi.AnyOutput)
}

// The name of the column that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o SapTablePartitionSettingsPtrOutput) PartitionColumnName() pulumi.AnyOutput {
	return o.ApplyT(func(v *SapTablePartitionSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionColumnName
	}).(pulumi.AnyOutput)
}

// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o SapTablePartitionSettingsPtrOutput) PartitionLowerBound() pulumi.AnyOutput {
	return o.ApplyT(func(v *SapTablePartitionSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionLowerBound
	}).(pulumi.AnyOutput)
}

// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o SapTablePartitionSettingsPtrOutput) PartitionUpperBound() pulumi.AnyOutput {
	return o.ApplyT(func(v *SapTablePartitionSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionUpperBound
	}).(pulumi.AnyOutput)
}

// The settings that will be leveraged for SAP table source partitioning.
type SapTablePartitionSettingsResponse struct {
	// The maximum value of partitions the table will be split into. Type: integer (or Expression with resultType string).
	MaxPartitionsNumber interface{} `pulumi:"maxPartitionsNumber"`
	// The name of the column that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionColumnName interface{} `pulumi:"partitionColumnName"`
	// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionLowerBound interface{} `pulumi:"partitionLowerBound"`
	// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionUpperBound interface{} `pulumi:"partitionUpperBound"`
}

// The settings that will be leveraged for SAP table source partitioning.
type SapTablePartitionSettingsResponseOutput struct{ *pulumi.OutputState }

func (SapTablePartitionSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapTablePartitionSettingsResponse)(nil)).Elem()
}

func (o SapTablePartitionSettingsResponseOutput) ToSapTablePartitionSettingsResponseOutput() SapTablePartitionSettingsResponseOutput {
	return o
}

func (o SapTablePartitionSettingsResponseOutput) ToSapTablePartitionSettingsResponseOutputWithContext(ctx context.Context) SapTablePartitionSettingsResponseOutput {
	return o
}

// The maximum value of partitions the table will be split into. Type: integer (or Expression with resultType string).
func (o SapTablePartitionSettingsResponseOutput) MaxPartitionsNumber() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTablePartitionSettingsResponse) interface{} { return v.MaxPartitionsNumber }).(pulumi.AnyOutput)
}

// The name of the column that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o SapTablePartitionSettingsResponseOutput) PartitionColumnName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTablePartitionSettingsResponse) interface{} { return v.PartitionColumnName }).(pulumi.AnyOutput)
}

// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o SapTablePartitionSettingsResponseOutput) PartitionLowerBound() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTablePartitionSettingsResponse) interface{} { return v.PartitionLowerBound }).(pulumi.AnyOutput)
}

// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o SapTablePartitionSettingsResponseOutput) PartitionUpperBound() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTablePartitionSettingsResponse) interface{} { return v.PartitionUpperBound }).(pulumi.AnyOutput)
}

type SapTablePartitionSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (SapTablePartitionSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SapTablePartitionSettingsResponse)(nil)).Elem()
}

func (o SapTablePartitionSettingsResponsePtrOutput) ToSapTablePartitionSettingsResponsePtrOutput() SapTablePartitionSettingsResponsePtrOutput {
	return o
}

func (o SapTablePartitionSettingsResponsePtrOutput) ToSapTablePartitionSettingsResponsePtrOutputWithContext(ctx context.Context) SapTablePartitionSettingsResponsePtrOutput {
	return o
}

func (o SapTablePartitionSettingsResponsePtrOutput) Elem() SapTablePartitionSettingsResponseOutput {
	return o.ApplyT(func(v *SapTablePartitionSettingsResponse) SapTablePartitionSettingsResponse {
		if v != nil {
			return *v
		}
		var ret SapTablePartitionSettingsResponse
		return ret
	}).(SapTablePartitionSettingsResponseOutput)
}

// The maximum value of partitions the table will be split into. Type: integer (or Expression with resultType string).
func (o SapTablePartitionSettingsResponsePtrOutput) MaxPartitionsNumber() pulumi.AnyOutput {
	return o.ApplyT(func(v *SapTablePartitionSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxPartitionsNumber
	}).(pulumi.AnyOutput)
}

// The name of the column that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o SapTablePartitionSettingsResponsePtrOutput) PartitionColumnName() pulumi.AnyOutput {
	return o.ApplyT(func(v *SapTablePartitionSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionColumnName
	}).(pulumi.AnyOutput)
}

// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o SapTablePartitionSettingsResponsePtrOutput) PartitionLowerBound() pulumi.AnyOutput {
	return o.ApplyT(func(v *SapTablePartitionSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionLowerBound
	}).(pulumi.AnyOutput)
}

// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o SapTablePartitionSettingsResponsePtrOutput) PartitionUpperBound() pulumi.AnyOutput {
	return o.ApplyT(func(v *SapTablePartitionSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionUpperBound
	}).(pulumi.AnyOutput)
}

// SAP Table Resource properties.
type SapTableResourceDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The name of the SAP Table. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'SapTableResource'.
	Type string `pulumi:"type"`
}

// SapTableResourceDatasetInput is an input type that accepts SapTableResourceDatasetArgs and SapTableResourceDatasetOutput values.
// You can construct a concrete instance of `SapTableResourceDatasetInput` via:
//
//	SapTableResourceDatasetArgs{...}
type SapTableResourceDatasetInput interface {
	pulumi.Input

	ToSapTableResourceDatasetOutput() SapTableResourceDatasetOutput
	ToSapTableResourceDatasetOutputWithContext(context.Context) SapTableResourceDatasetOutput
}

// SAP Table Resource properties.
type SapTableResourceDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The name of the SAP Table. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'SapTableResource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SapTableResourceDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapTableResourceDataset)(nil)).Elem()
}

func (i SapTableResourceDatasetArgs) ToSapTableResourceDatasetOutput() SapTableResourceDatasetOutput {
	return i.ToSapTableResourceDatasetOutputWithContext(context.Background())
}

func (i SapTableResourceDatasetArgs) ToSapTableResourceDatasetOutputWithContext(ctx context.Context) SapTableResourceDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapTableResourceDatasetOutput)
}

// SAP Table Resource properties.
type SapTableResourceDatasetOutput struct{ *pulumi.OutputState }

func (SapTableResourceDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapTableResourceDataset)(nil)).Elem()
}

func (o SapTableResourceDatasetOutput) ToSapTableResourceDatasetOutput() SapTableResourceDatasetOutput {
	return o
}

func (o SapTableResourceDatasetOutput) ToSapTableResourceDatasetOutputWithContext(ctx context.Context) SapTableResourceDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SapTableResourceDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapTableResourceDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SapTableResourceDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapTableResourceDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SapTableResourceDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v SapTableResourceDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o SapTableResourceDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v SapTableResourceDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o SapTableResourceDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SapTableResourceDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SapTableResourceDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableResourceDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SapTableResourceDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableResourceDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The name of the SAP Table. Type: string (or Expression with resultType string).
func (o SapTableResourceDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableResourceDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'SapTableResource'.
func (o SapTableResourceDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapTableResourceDataset) string { return v.Type }).(pulumi.StringOutput)
}

// SAP Table Resource properties.
type SapTableResourceDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The name of the SAP Table. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'SapTableResource'.
	Type string `pulumi:"type"`
}

// SAP Table Resource properties.
type SapTableResourceDatasetResponseOutput struct{ *pulumi.OutputState }

func (SapTableResourceDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapTableResourceDatasetResponse)(nil)).Elem()
}

func (o SapTableResourceDatasetResponseOutput) ToSapTableResourceDatasetResponseOutput() SapTableResourceDatasetResponseOutput {
	return o
}

func (o SapTableResourceDatasetResponseOutput) ToSapTableResourceDatasetResponseOutputWithContext(ctx context.Context) SapTableResourceDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SapTableResourceDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SapTableResourceDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SapTableResourceDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapTableResourceDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SapTableResourceDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v SapTableResourceDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o SapTableResourceDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v SapTableResourceDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o SapTableResourceDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SapTableResourceDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SapTableResourceDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableResourceDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SapTableResourceDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableResourceDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The name of the SAP Table. Type: string (or Expression with resultType string).
func (o SapTableResourceDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableResourceDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'SapTableResource'.
func (o SapTableResourceDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapTableResourceDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity source for SAP Table source.
type SapTableSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// Specifies the maximum number of rows that will be retrieved at a time when retrieving data from SAP Table. Type: integer (or Expression with resultType integer).
	BatchSize interface{} `pulumi:"batchSize"`
	// Specifies the custom RFC function module that will be used to read data from SAP Table. Type: string (or Expression with resultType string).
	CustomRfcReadTableFunctionModule interface{} `pulumi:"customRfcReadTableFunctionModule"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for SAP table read in parallel. Possible values include: "None", "PartitionOnInt", "PartitionOnCalendarYear", "PartitionOnCalendarMonth", "PartitionOnCalendarDate", "PartitionOnTime".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for SAP table source partitioning.
	PartitionSettings *SapTablePartitionSettings `pulumi:"partitionSettings"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// The fields of the SAP table that will be retrieved. For example, column0, column1. Type: string (or Expression with resultType string).
	RfcTableFields interface{} `pulumi:"rfcTableFields"`
	// The options for the filtering of the SAP Table. For example, COLUMN0 EQ SOME VALUE. Type: string (or Expression with resultType string).
	RfcTableOptions interface{} `pulumi:"rfcTableOptions"`
	// The number of rows to be retrieved. Type: integer(or Expression with resultType integer).
	RowCount interface{} `pulumi:"rowCount"`
	// The number of rows that will be skipped. Type: integer (or Expression with resultType integer).
	RowSkips interface{} `pulumi:"rowSkips"`
	// The single character that will be used as delimiter passed to SAP RFC as well as splitting the output data retrieved. Type: string (or Expression with resultType string).
	SapDataColumnDelimiter interface{} `pulumi:"sapDataColumnDelimiter"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SapTableSource'.
	Type string `pulumi:"type"`
}

// SapTableSourceInput is an input type that accepts SapTableSourceArgs and SapTableSourceOutput values.
// You can construct a concrete instance of `SapTableSourceInput` via:
//
//	SapTableSourceArgs{...}
type SapTableSourceInput interface {
	pulumi.Input

	ToSapTableSourceOutput() SapTableSourceOutput
	ToSapTableSourceOutputWithContext(context.Context) SapTableSourceOutput
}

// A copy activity source for SAP Table source.
type SapTableSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// Specifies the maximum number of rows that will be retrieved at a time when retrieving data from SAP Table. Type: integer (or Expression with resultType integer).
	BatchSize pulumi.Input `pulumi:"batchSize"`
	// Specifies the custom RFC function module that will be used to read data from SAP Table. Type: string (or Expression with resultType string).
	CustomRfcReadTableFunctionModule pulumi.Input `pulumi:"customRfcReadTableFunctionModule"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for SAP table read in parallel. Possible values include: "None", "PartitionOnInt", "PartitionOnCalendarYear", "PartitionOnCalendarMonth", "PartitionOnCalendarDate", "PartitionOnTime".
	PartitionOption pulumi.Input `pulumi:"partitionOption"`
	// The settings that will be leveraged for SAP table source partitioning.
	PartitionSettings SapTablePartitionSettingsPtrInput `pulumi:"partitionSettings"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// The fields of the SAP table that will be retrieved. For example, column0, column1. Type: string (or Expression with resultType string).
	RfcTableFields pulumi.Input `pulumi:"rfcTableFields"`
	// The options for the filtering of the SAP Table. For example, COLUMN0 EQ SOME VALUE. Type: string (or Expression with resultType string).
	RfcTableOptions pulumi.Input `pulumi:"rfcTableOptions"`
	// The number of rows to be retrieved. Type: integer(or Expression with resultType integer).
	RowCount pulumi.Input `pulumi:"rowCount"`
	// The number of rows that will be skipped. Type: integer (or Expression with resultType integer).
	RowSkips pulumi.Input `pulumi:"rowSkips"`
	// The single character that will be used as delimiter passed to SAP RFC as well as splitting the output data retrieved. Type: string (or Expression with resultType string).
	SapDataColumnDelimiter pulumi.Input `pulumi:"sapDataColumnDelimiter"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SapTableSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SapTableSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapTableSource)(nil)).Elem()
}

func (i SapTableSourceArgs) ToSapTableSourceOutput() SapTableSourceOutput {
	return i.ToSapTableSourceOutputWithContext(context.Background())
}

func (i SapTableSourceArgs) ToSapTableSourceOutputWithContext(ctx context.Context) SapTableSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapTableSourceOutput)
}

// A copy activity source for SAP Table source.
type SapTableSourceOutput struct{ *pulumi.OutputState }

func (SapTableSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapTableSource)(nil)).Elem()
}

func (o SapTableSourceOutput) ToSapTableSourceOutput() SapTableSourceOutput {
	return o
}

func (o SapTableSourceOutput) ToSapTableSourceOutputWithContext(ctx context.Context) SapTableSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o SapTableSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// Specifies the maximum number of rows that will be retrieved at a time when retrieving data from SAP Table. Type: integer (or Expression with resultType integer).
func (o SapTableSourceOutput) BatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableSource) interface{} { return v.BatchSize }).(pulumi.AnyOutput)
}

// Specifies the custom RFC function module that will be used to read data from SAP Table. Type: string (or Expression with resultType string).
func (o SapTableSourceOutput) CustomRfcReadTableFunctionModule() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableSource) interface{} { return v.CustomRfcReadTableFunctionModule }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SapTableSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SapTableSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The partition mechanism that will be used for SAP table read in parallel. Possible values include: "None", "PartitionOnInt", "PartitionOnCalendarYear", "PartitionOnCalendarMonth", "PartitionOnCalendarDate", "PartitionOnTime".
func (o SapTableSourceOutput) PartitionOption() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableSource) interface{} { return v.PartitionOption }).(pulumi.AnyOutput)
}

// The settings that will be leveraged for SAP table source partitioning.
func (o SapTableSourceOutput) PartitionSettings() SapTablePartitionSettingsPtrOutput {
	return o.ApplyT(func(v SapTableSource) *SapTablePartitionSettings { return v.PartitionSettings }).(SapTablePartitionSettingsPtrOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SapTableSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// The fields of the SAP table that will be retrieved. For example, column0, column1. Type: string (or Expression with resultType string).
func (o SapTableSourceOutput) RfcTableFields() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableSource) interface{} { return v.RfcTableFields }).(pulumi.AnyOutput)
}

// The options for the filtering of the SAP Table. For example, COLUMN0 EQ SOME VALUE. Type: string (or Expression with resultType string).
func (o SapTableSourceOutput) RfcTableOptions() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableSource) interface{} { return v.RfcTableOptions }).(pulumi.AnyOutput)
}

// The number of rows to be retrieved. Type: integer(or Expression with resultType integer).
func (o SapTableSourceOutput) RowCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableSource) interface{} { return v.RowCount }).(pulumi.AnyOutput)
}

// The number of rows that will be skipped. Type: integer (or Expression with resultType integer).
func (o SapTableSourceOutput) RowSkips() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableSource) interface{} { return v.RowSkips }).(pulumi.AnyOutput)
}

// The single character that will be used as delimiter passed to SAP RFC as well as splitting the output data retrieved. Type: string (or Expression with resultType string).
func (o SapTableSourceOutput) SapDataColumnDelimiter() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableSource) interface{} { return v.SapDataColumnDelimiter }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o SapTableSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SapTableSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'SapTableSource'.
func (o SapTableSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapTableSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity source for SAP Table source.
type SapTableSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// Specifies the maximum number of rows that will be retrieved at a time when retrieving data from SAP Table. Type: integer (or Expression with resultType integer).
	BatchSize interface{} `pulumi:"batchSize"`
	// Specifies the custom RFC function module that will be used to read data from SAP Table. Type: string (or Expression with resultType string).
	CustomRfcReadTableFunctionModule interface{} `pulumi:"customRfcReadTableFunctionModule"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for SAP table read in parallel. Possible values include: "None", "PartitionOnInt", "PartitionOnCalendarYear", "PartitionOnCalendarMonth", "PartitionOnCalendarDate", "PartitionOnTime".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for SAP table source partitioning.
	PartitionSettings *SapTablePartitionSettingsResponse `pulumi:"partitionSettings"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// The fields of the SAP table that will be retrieved. For example, column0, column1. Type: string (or Expression with resultType string).
	RfcTableFields interface{} `pulumi:"rfcTableFields"`
	// The options for the filtering of the SAP Table. For example, COLUMN0 EQ SOME VALUE. Type: string (or Expression with resultType string).
	RfcTableOptions interface{} `pulumi:"rfcTableOptions"`
	// The number of rows to be retrieved. Type: integer(or Expression with resultType integer).
	RowCount interface{} `pulumi:"rowCount"`
	// The number of rows that will be skipped. Type: integer (or Expression with resultType integer).
	RowSkips interface{} `pulumi:"rowSkips"`
	// The single character that will be used as delimiter passed to SAP RFC as well as splitting the output data retrieved. Type: string (or Expression with resultType string).
	SapDataColumnDelimiter interface{} `pulumi:"sapDataColumnDelimiter"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SapTableSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for SAP Table source.
type SapTableSourceResponseOutput struct{ *pulumi.OutputState }

func (SapTableSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapTableSourceResponse)(nil)).Elem()
}

func (o SapTableSourceResponseOutput) ToSapTableSourceResponseOutput() SapTableSourceResponseOutput {
	return o
}

func (o SapTableSourceResponseOutput) ToSapTableSourceResponseOutputWithContext(ctx context.Context) SapTableSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o SapTableSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// Specifies the maximum number of rows that will be retrieved at a time when retrieving data from SAP Table. Type: integer (or Expression with resultType integer).
func (o SapTableSourceResponseOutput) BatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableSourceResponse) interface{} { return v.BatchSize }).(pulumi.AnyOutput)
}

// Specifies the custom RFC function module that will be used to read data from SAP Table. Type: string (or Expression with resultType string).
func (o SapTableSourceResponseOutput) CustomRfcReadTableFunctionModule() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableSourceResponse) interface{} { return v.CustomRfcReadTableFunctionModule }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SapTableSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SapTableSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The partition mechanism that will be used for SAP table read in parallel. Possible values include: "None", "PartitionOnInt", "PartitionOnCalendarYear", "PartitionOnCalendarMonth", "PartitionOnCalendarDate", "PartitionOnTime".
func (o SapTableSourceResponseOutput) PartitionOption() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableSourceResponse) interface{} { return v.PartitionOption }).(pulumi.AnyOutput)
}

// The settings that will be leveraged for SAP table source partitioning.
func (o SapTableSourceResponseOutput) PartitionSettings() SapTablePartitionSettingsResponsePtrOutput {
	return o.ApplyT(func(v SapTableSourceResponse) *SapTablePartitionSettingsResponse { return v.PartitionSettings }).(SapTablePartitionSettingsResponsePtrOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SapTableSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// The fields of the SAP table that will be retrieved. For example, column0, column1. Type: string (or Expression with resultType string).
func (o SapTableSourceResponseOutput) RfcTableFields() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableSourceResponse) interface{} { return v.RfcTableFields }).(pulumi.AnyOutput)
}

// The options for the filtering of the SAP Table. For example, COLUMN0 EQ SOME VALUE. Type: string (or Expression with resultType string).
func (o SapTableSourceResponseOutput) RfcTableOptions() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableSourceResponse) interface{} { return v.RfcTableOptions }).(pulumi.AnyOutput)
}

// The number of rows to be retrieved. Type: integer(or Expression with resultType integer).
func (o SapTableSourceResponseOutput) RowCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableSourceResponse) interface{} { return v.RowCount }).(pulumi.AnyOutput)
}

// The number of rows that will be skipped. Type: integer (or Expression with resultType integer).
func (o SapTableSourceResponseOutput) RowSkips() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableSourceResponse) interface{} { return v.RowSkips }).(pulumi.AnyOutput)
}

// The single character that will be used as delimiter passed to SAP RFC as well as splitting the output data retrieved. Type: string (or Expression with resultType string).
func (o SapTableSourceResponseOutput) SapDataColumnDelimiter() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableSourceResponse) interface{} { return v.SapDataColumnDelimiter }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o SapTableSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SapTableSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SapTableSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'SapTableSource'.
func (o SapTableSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SapTableSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Trigger that creates pipeline runs periodically, on schedule.
type ScheduleTrigger struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// Pipelines that need to be started.
	Pipelines []TriggerPipelineReference `pulumi:"pipelines"`
	// Recurrence schedule configuration.
	Recurrence ScheduleTriggerRecurrence `pulumi:"recurrence"`
	// Trigger type.
	// Expected value is 'ScheduleTrigger'.
	Type string `pulumi:"type"`
}

// ScheduleTriggerInput is an input type that accepts ScheduleTriggerArgs and ScheduleTriggerOutput values.
// You can construct a concrete instance of `ScheduleTriggerInput` via:
//
//	ScheduleTriggerArgs{...}
type ScheduleTriggerInput interface {
	pulumi.Input

	ToScheduleTriggerOutput() ScheduleTriggerOutput
	ToScheduleTriggerOutputWithContext(context.Context) ScheduleTriggerOutput
}

// Trigger that creates pipeline runs periodically, on schedule.
type ScheduleTriggerArgs struct {
	// List of tags that can be used for describing the trigger.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Trigger description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Pipelines that need to be started.
	Pipelines TriggerPipelineReferenceArrayInput `pulumi:"pipelines"`
	// Recurrence schedule configuration.
	Recurrence ScheduleTriggerRecurrenceInput `pulumi:"recurrence"`
	// Trigger type.
	// Expected value is 'ScheduleTrigger'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ScheduleTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleTrigger)(nil)).Elem()
}

func (i ScheduleTriggerArgs) ToScheduleTriggerOutput() ScheduleTriggerOutput {
	return i.ToScheduleTriggerOutputWithContext(context.Background())
}

func (i ScheduleTriggerArgs) ToScheduleTriggerOutputWithContext(ctx context.Context) ScheduleTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleTriggerOutput)
}

// Trigger that creates pipeline runs periodically, on schedule.
type ScheduleTriggerOutput struct{ *pulumi.OutputState }

func (ScheduleTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleTrigger)(nil)).Elem()
}

func (o ScheduleTriggerOutput) ToScheduleTriggerOutput() ScheduleTriggerOutput {
	return o
}

func (o ScheduleTriggerOutput) ToScheduleTriggerOutputWithContext(ctx context.Context) ScheduleTriggerOutput {
	return o
}

// List of tags that can be used for describing the trigger.
func (o ScheduleTriggerOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ScheduleTrigger) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Trigger description.
func (o ScheduleTriggerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleTrigger) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Pipelines that need to be started.
func (o ScheduleTriggerOutput) Pipelines() TriggerPipelineReferenceArrayOutput {
	return o.ApplyT(func(v ScheduleTrigger) []TriggerPipelineReference { return v.Pipelines }).(TriggerPipelineReferenceArrayOutput)
}

// Recurrence schedule configuration.
func (o ScheduleTriggerOutput) Recurrence() ScheduleTriggerRecurrenceOutput {
	return o.ApplyT(func(v ScheduleTrigger) ScheduleTriggerRecurrence { return v.Recurrence }).(ScheduleTriggerRecurrenceOutput)
}

// Trigger type.
// Expected value is 'ScheduleTrigger'.
func (o ScheduleTriggerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleTrigger) string { return v.Type }).(pulumi.StringOutput)
}

// The workflow trigger recurrence.
type ScheduleTriggerRecurrence struct {
	// The end time.
	EndTime *string `pulumi:"endTime"`
	// The frequency.
	Frequency *string `pulumi:"frequency"`
	// The interval.
	Interval *int `pulumi:"interval"`
	// The recurrence schedule.
	Schedule *RecurrenceSchedule `pulumi:"schedule"`
	// The start time.
	StartTime *string `pulumi:"startTime"`
	// The time zone.
	TimeZone *string `pulumi:"timeZone"`
}

// ScheduleTriggerRecurrenceInput is an input type that accepts ScheduleTriggerRecurrenceArgs and ScheduleTriggerRecurrenceOutput values.
// You can construct a concrete instance of `ScheduleTriggerRecurrenceInput` via:
//
//	ScheduleTriggerRecurrenceArgs{...}
type ScheduleTriggerRecurrenceInput interface {
	pulumi.Input

	ToScheduleTriggerRecurrenceOutput() ScheduleTriggerRecurrenceOutput
	ToScheduleTriggerRecurrenceOutputWithContext(context.Context) ScheduleTriggerRecurrenceOutput
}

// The workflow trigger recurrence.
type ScheduleTriggerRecurrenceArgs struct {
	// The end time.
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// The frequency.
	Frequency pulumi.StringPtrInput `pulumi:"frequency"`
	// The interval.
	Interval pulumi.IntPtrInput `pulumi:"interval"`
	// The recurrence schedule.
	Schedule RecurrenceSchedulePtrInput `pulumi:"schedule"`
	// The start time.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// The time zone.
	TimeZone pulumi.StringPtrInput `pulumi:"timeZone"`
}

func (ScheduleTriggerRecurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleTriggerRecurrence)(nil)).Elem()
}

func (i ScheduleTriggerRecurrenceArgs) ToScheduleTriggerRecurrenceOutput() ScheduleTriggerRecurrenceOutput {
	return i.ToScheduleTriggerRecurrenceOutputWithContext(context.Background())
}

func (i ScheduleTriggerRecurrenceArgs) ToScheduleTriggerRecurrenceOutputWithContext(ctx context.Context) ScheduleTriggerRecurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleTriggerRecurrenceOutput)
}

// The workflow trigger recurrence.
type ScheduleTriggerRecurrenceOutput struct{ *pulumi.OutputState }

func (ScheduleTriggerRecurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleTriggerRecurrence)(nil)).Elem()
}

func (o ScheduleTriggerRecurrenceOutput) ToScheduleTriggerRecurrenceOutput() ScheduleTriggerRecurrenceOutput {
	return o
}

func (o ScheduleTriggerRecurrenceOutput) ToScheduleTriggerRecurrenceOutputWithContext(ctx context.Context) ScheduleTriggerRecurrenceOutput {
	return o
}

// The end time.
func (o ScheduleTriggerRecurrenceOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleTriggerRecurrence) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// The frequency.
func (o ScheduleTriggerRecurrenceOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleTriggerRecurrence) *string { return v.Frequency }).(pulumi.StringPtrOutput)
}

// The interval.
func (o ScheduleTriggerRecurrenceOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScheduleTriggerRecurrence) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

// The recurrence schedule.
func (o ScheduleTriggerRecurrenceOutput) Schedule() RecurrenceSchedulePtrOutput {
	return o.ApplyT(func(v ScheduleTriggerRecurrence) *RecurrenceSchedule { return v.Schedule }).(RecurrenceSchedulePtrOutput)
}

// The start time.
func (o ScheduleTriggerRecurrenceOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleTriggerRecurrence) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// The time zone.
func (o ScheduleTriggerRecurrenceOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleTriggerRecurrence) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

// The workflow trigger recurrence.
type ScheduleTriggerRecurrenceResponse struct {
	// The end time.
	EndTime *string `pulumi:"endTime"`
	// The frequency.
	Frequency *string `pulumi:"frequency"`
	// The interval.
	Interval *int `pulumi:"interval"`
	// The recurrence schedule.
	Schedule *RecurrenceScheduleResponse `pulumi:"schedule"`
	// The start time.
	StartTime *string `pulumi:"startTime"`
	// The time zone.
	TimeZone *string `pulumi:"timeZone"`
}

// The workflow trigger recurrence.
type ScheduleTriggerRecurrenceResponseOutput struct{ *pulumi.OutputState }

func (ScheduleTriggerRecurrenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleTriggerRecurrenceResponse)(nil)).Elem()
}

func (o ScheduleTriggerRecurrenceResponseOutput) ToScheduleTriggerRecurrenceResponseOutput() ScheduleTriggerRecurrenceResponseOutput {
	return o
}

func (o ScheduleTriggerRecurrenceResponseOutput) ToScheduleTriggerRecurrenceResponseOutputWithContext(ctx context.Context) ScheduleTriggerRecurrenceResponseOutput {
	return o
}

// The end time.
func (o ScheduleTriggerRecurrenceResponseOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleTriggerRecurrenceResponse) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// The frequency.
func (o ScheduleTriggerRecurrenceResponseOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleTriggerRecurrenceResponse) *string { return v.Frequency }).(pulumi.StringPtrOutput)
}

// The interval.
func (o ScheduleTriggerRecurrenceResponseOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScheduleTriggerRecurrenceResponse) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

// The recurrence schedule.
func (o ScheduleTriggerRecurrenceResponseOutput) Schedule() RecurrenceScheduleResponsePtrOutput {
	return o.ApplyT(func(v ScheduleTriggerRecurrenceResponse) *RecurrenceScheduleResponse { return v.Schedule }).(RecurrenceScheduleResponsePtrOutput)
}

// The start time.
func (o ScheduleTriggerRecurrenceResponseOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleTriggerRecurrenceResponse) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// The time zone.
func (o ScheduleTriggerRecurrenceResponseOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleTriggerRecurrenceResponse) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

// Trigger that creates pipeline runs periodically, on schedule.
type ScheduleTriggerResponse struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// Pipelines that need to be started.
	Pipelines []TriggerPipelineReferenceResponse `pulumi:"pipelines"`
	// Recurrence schedule configuration.
	Recurrence ScheduleTriggerRecurrenceResponse `pulumi:"recurrence"`
	// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState string `pulumi:"runtimeState"`
	// Trigger type.
	// Expected value is 'ScheduleTrigger'.
	Type string `pulumi:"type"`
}

// Trigger that creates pipeline runs periodically, on schedule.
type ScheduleTriggerResponseOutput struct{ *pulumi.OutputState }

func (ScheduleTriggerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleTriggerResponse)(nil)).Elem()
}

func (o ScheduleTriggerResponseOutput) ToScheduleTriggerResponseOutput() ScheduleTriggerResponseOutput {
	return o
}

func (o ScheduleTriggerResponseOutput) ToScheduleTriggerResponseOutputWithContext(ctx context.Context) ScheduleTriggerResponseOutput {
	return o
}

// List of tags that can be used for describing the trigger.
func (o ScheduleTriggerResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ScheduleTriggerResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Trigger description.
func (o ScheduleTriggerResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleTriggerResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Pipelines that need to be started.
func (o ScheduleTriggerResponseOutput) Pipelines() TriggerPipelineReferenceResponseArrayOutput {
	return o.ApplyT(func(v ScheduleTriggerResponse) []TriggerPipelineReferenceResponse { return v.Pipelines }).(TriggerPipelineReferenceResponseArrayOutput)
}

// Recurrence schedule configuration.
func (o ScheduleTriggerResponseOutput) Recurrence() ScheduleTriggerRecurrenceResponseOutput {
	return o.ApplyT(func(v ScheduleTriggerResponse) ScheduleTriggerRecurrenceResponse { return v.Recurrence }).(ScheduleTriggerRecurrenceResponseOutput)
}

// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
func (o ScheduleTriggerResponseOutput) RuntimeState() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleTriggerResponse) string { return v.RuntimeState }).(pulumi.StringOutput)
}

// Trigger type.
// Expected value is 'ScheduleTrigger'.
func (o ScheduleTriggerResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleTriggerResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Custom script action to run on HDI ondemand cluster once it's up.
type ScriptAction struct {
	// The user provided name of the script action.
	Name string `pulumi:"name"`
	// The parameters for the script action.
	Parameters *string `pulumi:"parameters"`
	// The node types on which the script action should be executed.
	Roles interface{} `pulumi:"roles"`
	// The URI for the script action.
	Uri string `pulumi:"uri"`
}

// ScriptActionInput is an input type that accepts ScriptActionArgs and ScriptActionOutput values.
// You can construct a concrete instance of `ScriptActionInput` via:
//
//	ScriptActionArgs{...}
type ScriptActionInput interface {
	pulumi.Input

	ToScriptActionOutput() ScriptActionOutput
	ToScriptActionOutputWithContext(context.Context) ScriptActionOutput
}

// Custom script action to run on HDI ondemand cluster once it's up.
type ScriptActionArgs struct {
	// The user provided name of the script action.
	Name pulumi.StringInput `pulumi:"name"`
	// The parameters for the script action.
	Parameters pulumi.StringPtrInput `pulumi:"parameters"`
	// The node types on which the script action should be executed.
	Roles pulumi.Input `pulumi:"roles"`
	// The URI for the script action.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (ScriptActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptAction)(nil)).Elem()
}

func (i ScriptActionArgs) ToScriptActionOutput() ScriptActionOutput {
	return i.ToScriptActionOutputWithContext(context.Background())
}

func (i ScriptActionArgs) ToScriptActionOutputWithContext(ctx context.Context) ScriptActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptActionOutput)
}

// ScriptActionArrayInput is an input type that accepts ScriptActionArray and ScriptActionArrayOutput values.
// You can construct a concrete instance of `ScriptActionArrayInput` via:
//
//	ScriptActionArray{ ScriptActionArgs{...} }
type ScriptActionArrayInput interface {
	pulumi.Input

	ToScriptActionArrayOutput() ScriptActionArrayOutput
	ToScriptActionArrayOutputWithContext(context.Context) ScriptActionArrayOutput
}

type ScriptActionArray []ScriptActionInput

func (ScriptActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScriptAction)(nil)).Elem()
}

func (i ScriptActionArray) ToScriptActionArrayOutput() ScriptActionArrayOutput {
	return i.ToScriptActionArrayOutputWithContext(context.Background())
}

func (i ScriptActionArray) ToScriptActionArrayOutputWithContext(ctx context.Context) ScriptActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptActionArrayOutput)
}

// Custom script action to run on HDI ondemand cluster once it's up.
type ScriptActionOutput struct{ *pulumi.OutputState }

func (ScriptActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptAction)(nil)).Elem()
}

func (o ScriptActionOutput) ToScriptActionOutput() ScriptActionOutput {
	return o
}

func (o ScriptActionOutput) ToScriptActionOutputWithContext(ctx context.Context) ScriptActionOutput {
	return o
}

// The user provided name of the script action.
func (o ScriptActionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptAction) string { return v.Name }).(pulumi.StringOutput)
}

// The parameters for the script action.
func (o ScriptActionOutput) Parameters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScriptAction) *string { return v.Parameters }).(pulumi.StringPtrOutput)
}

// The node types on which the script action should be executed.
func (o ScriptActionOutput) Roles() pulumi.AnyOutput {
	return o.ApplyT(func(v ScriptAction) interface{} { return v.Roles }).(pulumi.AnyOutput)
}

// The URI for the script action.
func (o ScriptActionOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptAction) string { return v.Uri }).(pulumi.StringOutput)
}

type ScriptActionArrayOutput struct{ *pulumi.OutputState }

func (ScriptActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScriptAction)(nil)).Elem()
}

func (o ScriptActionArrayOutput) ToScriptActionArrayOutput() ScriptActionArrayOutput {
	return o
}

func (o ScriptActionArrayOutput) ToScriptActionArrayOutputWithContext(ctx context.Context) ScriptActionArrayOutput {
	return o
}

func (o ScriptActionArrayOutput) Index(i pulumi.IntInput) ScriptActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScriptAction {
		return vs[0].([]ScriptAction)[vs[1].(int)]
	}).(ScriptActionOutput)
}

// Custom script action to run on HDI ondemand cluster once it's up.
type ScriptActionResponse struct {
	// The user provided name of the script action.
	Name string `pulumi:"name"`
	// The parameters for the script action.
	Parameters *string `pulumi:"parameters"`
	// The node types on which the script action should be executed.
	Roles interface{} `pulumi:"roles"`
	// The URI for the script action.
	Uri string `pulumi:"uri"`
}

// Custom script action to run on HDI ondemand cluster once it's up.
type ScriptActionResponseOutput struct{ *pulumi.OutputState }

func (ScriptActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptActionResponse)(nil)).Elem()
}

func (o ScriptActionResponseOutput) ToScriptActionResponseOutput() ScriptActionResponseOutput {
	return o
}

func (o ScriptActionResponseOutput) ToScriptActionResponseOutputWithContext(ctx context.Context) ScriptActionResponseOutput {
	return o
}

// The user provided name of the script action.
func (o ScriptActionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptActionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The parameters for the script action.
func (o ScriptActionResponseOutput) Parameters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScriptActionResponse) *string { return v.Parameters }).(pulumi.StringPtrOutput)
}

// The node types on which the script action should be executed.
func (o ScriptActionResponseOutput) Roles() pulumi.AnyOutput {
	return o.ApplyT(func(v ScriptActionResponse) interface{} { return v.Roles }).(pulumi.AnyOutput)
}

// The URI for the script action.
func (o ScriptActionResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptActionResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type ScriptActionResponseArrayOutput struct{ *pulumi.OutputState }

func (ScriptActionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScriptActionResponse)(nil)).Elem()
}

func (o ScriptActionResponseArrayOutput) ToScriptActionResponseArrayOutput() ScriptActionResponseArrayOutput {
	return o
}

func (o ScriptActionResponseArrayOutput) ToScriptActionResponseArrayOutputWithContext(ctx context.Context) ScriptActionResponseArrayOutput {
	return o
}

func (o ScriptActionResponseArrayOutput) Index(i pulumi.IntInput) ScriptActionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScriptActionResponse {
		return vs[0].([]ScriptActionResponse)[vs[1].(int)]
	}).(ScriptActionResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(HBaseObjectDatasetOutput{})
	pulumi.RegisterOutputType(HBaseObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(HBaseSourceOutput{})
	pulumi.RegisterOutputType(HBaseSourceResponseOutput{})
	pulumi.RegisterOutputType(HDInsightHiveActivityOutput{})
	pulumi.RegisterOutputType(HDInsightHiveActivityResponseOutput{})
	pulumi.RegisterOutputType(HDInsightLinkedServiceOutput{})
	pulumi.RegisterOutputType(HDInsightLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(HDInsightMapReduceActivityOutput{})
	pulumi.RegisterOutputType(HDInsightMapReduceActivityResponseOutput{})
	pulumi.RegisterOutputType(HDInsightOnDemandLinkedServiceOutput{})
	pulumi.RegisterOutputType(HDInsightOnDemandLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(HDInsightPigActivityOutput{})
	pulumi.RegisterOutputType(HDInsightPigActivityResponseOutput{})
	pulumi.RegisterOutputType(HDInsightSparkActivityOutput{})
	pulumi.RegisterOutputType(HDInsightSparkActivityResponseOutput{})
	pulumi.RegisterOutputType(HDInsightStreamingActivityOutput{})
	pulumi.RegisterOutputType(HDInsightStreamingActivityResponseOutput{})
	pulumi.RegisterOutputType(HdfsLinkedServiceOutput{})
	pulumi.RegisterOutputType(HdfsLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(HdfsLocationOutput{})
	pulumi.RegisterOutputType(HdfsLocationResponseOutput{})
	pulumi.RegisterOutputType(HdfsReadSettingsOutput{})
	pulumi.RegisterOutputType(HdfsReadSettingsPtrOutput{})
	pulumi.RegisterOutputType(HdfsReadSettingsResponseOutput{})
	pulumi.RegisterOutputType(HdfsReadSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(HdfsSourceOutput{})
	pulumi.RegisterOutputType(HdfsSourceResponseOutput{})
	pulumi.RegisterOutputType(HiveLinkedServiceOutput{})
	pulumi.RegisterOutputType(HiveLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(HiveObjectDatasetOutput{})
	pulumi.RegisterOutputType(HiveObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(HiveSourceOutput{})
	pulumi.RegisterOutputType(HiveSourceResponseOutput{})
	pulumi.RegisterOutputType(HttpDatasetOutput{})
	pulumi.RegisterOutputType(HttpDatasetResponseOutput{})
	pulumi.RegisterOutputType(HttpLinkedServiceOutput{})
	pulumi.RegisterOutputType(HttpLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(HttpReadSettingsOutput{})
	pulumi.RegisterOutputType(HttpReadSettingsPtrOutput{})
	pulumi.RegisterOutputType(HttpReadSettingsResponseOutput{})
	pulumi.RegisterOutputType(HttpReadSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(HttpServerLocationOutput{})
	pulumi.RegisterOutputType(HttpServerLocationResponseOutput{})
	pulumi.RegisterOutputType(HttpSourceOutput{})
	pulumi.RegisterOutputType(HttpSourceResponseOutput{})
	pulumi.RegisterOutputType(HubspotLinkedServiceOutput{})
	pulumi.RegisterOutputType(HubspotLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(HubspotObjectDatasetOutput{})
	pulumi.RegisterOutputType(HubspotObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(HubspotSourceOutput{})
	pulumi.RegisterOutputType(HubspotSourceResponseOutput{})
	pulumi.RegisterOutputType(IfConditionActivityOutput{})
	pulumi.RegisterOutputType(IfConditionActivityResponseOutput{})
	pulumi.RegisterOutputType(ImpalaLinkedServiceOutput{})
	pulumi.RegisterOutputType(ImpalaLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(ImpalaObjectDatasetOutput{})
	pulumi.RegisterOutputType(ImpalaObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(ImpalaSourceOutput{})
	pulumi.RegisterOutputType(ImpalaSourceResponseOutput{})
	pulumi.RegisterOutputType(InformixLinkedServiceOutput{})
	pulumi.RegisterOutputType(InformixLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(InformixSinkOutput{})
	pulumi.RegisterOutputType(InformixSinkResponseOutput{})
	pulumi.RegisterOutputType(InformixSourceOutput{})
	pulumi.RegisterOutputType(InformixSourceResponseOutput{})
	pulumi.RegisterOutputType(InformixTableDatasetOutput{})
	pulumi.RegisterOutputType(InformixTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeComputePropertiesOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeComputePropertiesPtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeComputePropertiesResponseOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeComputePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeCustomSetupScriptPropertiesOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeCustomSetupScriptPropertiesPtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeCustomSetupScriptPropertiesResponseOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeCustomSetupScriptPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeCustomerVirtualNetworkOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeCustomerVirtualNetworkPtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeCustomerVirtualNetworkResponseOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeCustomerVirtualNetworkResponsePtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeDataFlowPropertiesOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeDataFlowPropertiesPtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeDataFlowPropertiesCustomPropertiesOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeDataFlowPropertiesCustomPropertiesArrayOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeDataFlowPropertiesResponseOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeDataFlowPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeDataFlowPropertiesResponseCustomPropertiesOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeDataFlowPropertiesResponseCustomPropertiesArrayOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeDataProxyPropertiesOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeDataProxyPropertiesPtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeDataProxyPropertiesResponseOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeDataProxyPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeReferenceOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeReferencePtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeReferenceResponseOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeSsisCatalogInfoOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeSsisCatalogInfoPtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeSsisCatalogInfoResponseOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeSsisCatalogInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeSsisPropertiesOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeSsisPropertiesPtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeSsisPropertiesResponseOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeSsisPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeVNetPropertiesOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeVNetPropertiesPtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeVNetPropertiesResponseOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeVNetPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(JiraLinkedServiceOutput{})
	pulumi.RegisterOutputType(JiraLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(JiraObjectDatasetOutput{})
	pulumi.RegisterOutputType(JiraObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(JiraSourceOutput{})
	pulumi.RegisterOutputType(JiraSourceResponseOutput{})
	pulumi.RegisterOutputType(JsonDatasetOutput{})
	pulumi.RegisterOutputType(JsonDatasetResponseOutput{})
	pulumi.RegisterOutputType(JsonFormatOutput{})
	pulumi.RegisterOutputType(JsonFormatPtrOutput{})
	pulumi.RegisterOutputType(JsonFormatResponseOutput{})
	pulumi.RegisterOutputType(JsonFormatResponsePtrOutput{})
	pulumi.RegisterOutputType(JsonReadSettingsOutput{})
	pulumi.RegisterOutputType(JsonReadSettingsPtrOutput{})
	pulumi.RegisterOutputType(JsonReadSettingsResponseOutput{})
	pulumi.RegisterOutputType(JsonReadSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(JsonSinkOutput{})
	pulumi.RegisterOutputType(JsonSinkResponseOutput{})
	pulumi.RegisterOutputType(JsonSourceOutput{})
	pulumi.RegisterOutputType(JsonSourceResponseOutput{})
	pulumi.RegisterOutputType(JsonWriteSettingsOutput{})
	pulumi.RegisterOutputType(JsonWriteSettingsPtrOutput{})
	pulumi.RegisterOutputType(JsonWriteSettingsResponseOutput{})
	pulumi.RegisterOutputType(JsonWriteSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(LakeHouseLinkedServiceOutput{})
	pulumi.RegisterOutputType(LakeHouseLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(LakeHouseLocationOutput{})
	pulumi.RegisterOutputType(LakeHouseLocationResponseOutput{})
	pulumi.RegisterOutputType(LakeHouseReadSettingsOutput{})
	pulumi.RegisterOutputType(LakeHouseReadSettingsPtrOutput{})
	pulumi.RegisterOutputType(LakeHouseReadSettingsResponseOutput{})
	pulumi.RegisterOutputType(LakeHouseReadSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(LakeHouseTableDatasetOutput{})
	pulumi.RegisterOutputType(LakeHouseTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(LakeHouseTableSinkOutput{})
	pulumi.RegisterOutputType(LakeHouseTableSinkResponseOutput{})
	pulumi.RegisterOutputType(LakeHouseTableSourceOutput{})
	pulumi.RegisterOutputType(LakeHouseTableSourceResponseOutput{})
	pulumi.RegisterOutputType(LakeHouseWriteSettingsOutput{})
	pulumi.RegisterOutputType(LakeHouseWriteSettingsPtrOutput{})
	pulumi.RegisterOutputType(LakeHouseWriteSettingsResponseOutput{})
	pulumi.RegisterOutputType(LakeHouseWriteSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(LinkedIntegrationRuntimeKeyAuthorizationOutput{})
	pulumi.RegisterOutputType(LinkedIntegrationRuntimeKeyAuthorizationPtrOutput{})
	pulumi.RegisterOutputType(LinkedIntegrationRuntimeKeyAuthorizationResponseOutput{})
	pulumi.RegisterOutputType(LinkedIntegrationRuntimeKeyAuthorizationResponsePtrOutput{})
	pulumi.RegisterOutputType(LinkedIntegrationRuntimeRbacAuthorizationOutput{})
	pulumi.RegisterOutputType(LinkedIntegrationRuntimeRbacAuthorizationPtrOutput{})
	pulumi.RegisterOutputType(LinkedIntegrationRuntimeRbacAuthorizationResponseOutput{})
	pulumi.RegisterOutputType(LinkedIntegrationRuntimeRbacAuthorizationResponsePtrOutput{})
	pulumi.RegisterOutputType(LinkedIntegrationRuntimeResponseOutput{})
	pulumi.RegisterOutputType(LinkedIntegrationRuntimeResponseArrayOutput{})
	pulumi.RegisterOutputType(LinkedServiceReferenceOutput{})
	pulumi.RegisterOutputType(LinkedServiceReferencePtrOutput{})
	pulumi.RegisterOutputType(LinkedServiceReferenceArrayOutput{})
	pulumi.RegisterOutputType(LinkedServiceReferenceResponseOutput{})
	pulumi.RegisterOutputType(LinkedServiceReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(LinkedServiceReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(LogLocationSettingsOutput{})
	pulumi.RegisterOutputType(LogLocationSettingsPtrOutput{})
	pulumi.RegisterOutputType(LogLocationSettingsResponseOutput{})
	pulumi.RegisterOutputType(LogLocationSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(LogSettingsOutput{})
	pulumi.RegisterOutputType(LogSettingsPtrOutput{})
	pulumi.RegisterOutputType(LogSettingsResponseOutput{})
	pulumi.RegisterOutputType(LogSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(LogStorageSettingsOutput{})
	pulumi.RegisterOutputType(LogStorageSettingsPtrOutput{})
	pulumi.RegisterOutputType(LogStorageSettingsResponseOutput{})
	pulumi.RegisterOutputType(LogStorageSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(LookupActivityOutput{})
	pulumi.RegisterOutputType(LookupActivityResponseOutput{})
	pulumi.RegisterOutputType(MagentoLinkedServiceOutput{})
	pulumi.RegisterOutputType(MagentoLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(MagentoObjectDatasetOutput{})
	pulumi.RegisterOutputType(MagentoObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(MagentoSourceOutput{})
	pulumi.RegisterOutputType(MagentoSourceResponseOutput{})
	pulumi.RegisterOutputType(ManagedIdentityCredentialOutput{})
	pulumi.RegisterOutputType(ManagedIdentityCredentialResponseOutput{})
	pulumi.RegisterOutputType(ManagedIntegrationRuntimeOutput{})
	pulumi.RegisterOutputType(ManagedIntegrationRuntimeErrorResponseOutput{})
	pulumi.RegisterOutputType(ManagedIntegrationRuntimeErrorResponseArrayOutput{})
	pulumi.RegisterOutputType(ManagedIntegrationRuntimeNodeResponseOutput{})
	pulumi.RegisterOutputType(ManagedIntegrationRuntimeNodeResponseArrayOutput{})
	pulumi.RegisterOutputType(ManagedIntegrationRuntimeOperationResultResponseOutput{})
	pulumi.RegisterOutputType(ManagedIntegrationRuntimeResponseOutput{})
	pulumi.RegisterOutputType(ManagedIntegrationRuntimeStatusResponseOutput{})
	pulumi.RegisterOutputType(ManagedPrivateEndpointTypeOutput{})
	pulumi.RegisterOutputType(ManagedPrivateEndpointResponseOutput{})
	pulumi.RegisterOutputType(ManagedVirtualNetworkReferenceOutput{})
	pulumi.RegisterOutputType(ManagedVirtualNetworkReferencePtrOutput{})
	pulumi.RegisterOutputType(ManagedVirtualNetworkReferenceResponseOutput{})
	pulumi.RegisterOutputType(ManagedVirtualNetworkReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(MapperAttributeMappingOutput{})
	pulumi.RegisterOutputType(MapperAttributeMappingArrayOutput{})
	pulumi.RegisterOutputType(MapperAttributeMappingResponseOutput{})
	pulumi.RegisterOutputType(MapperAttributeMappingResponseArrayOutput{})
	pulumi.RegisterOutputType(MapperAttributeMappingsOutput{})
	pulumi.RegisterOutputType(MapperAttributeMappingsPtrOutput{})
	pulumi.RegisterOutputType(MapperAttributeMappingsResponseOutput{})
	pulumi.RegisterOutputType(MapperAttributeMappingsResponsePtrOutput{})
	pulumi.RegisterOutputType(MapperAttributeReferenceOutput{})
	pulumi.RegisterOutputType(MapperAttributeReferencePtrOutput{})
	pulumi.RegisterOutputType(MapperAttributeReferenceArrayOutput{})
	pulumi.RegisterOutputType(MapperAttributeReferenceResponseOutput{})
	pulumi.RegisterOutputType(MapperAttributeReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(MapperAttributeReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(MapperConnectionOutput{})
	pulumi.RegisterOutputType(MapperConnectionPtrOutput{})
	pulumi.RegisterOutputType(MapperConnectionReferenceOutput{})
	pulumi.RegisterOutputType(MapperConnectionReferencePtrOutput{})
	pulumi.RegisterOutputType(MapperConnectionReferenceResponseOutput{})
	pulumi.RegisterOutputType(MapperConnectionReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(MapperConnectionResponseOutput{})
	pulumi.RegisterOutputType(MapperConnectionResponsePtrOutput{})
	pulumi.RegisterOutputType(MapperDslConnectorPropertiesOutput{})
	pulumi.RegisterOutputType(MapperDslConnectorPropertiesArrayOutput{})
	pulumi.RegisterOutputType(MapperDslConnectorPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MapperDslConnectorPropertiesResponseArrayOutput{})
	pulumi.RegisterOutputType(MapperPolicyOutput{})
	pulumi.RegisterOutputType(MapperPolicyRecurrenceOutput{})
	pulumi.RegisterOutputType(MapperPolicyRecurrencePtrOutput{})
	pulumi.RegisterOutputType(MapperPolicyRecurrenceResponseOutput{})
	pulumi.RegisterOutputType(MapperPolicyRecurrenceResponsePtrOutput{})
	pulumi.RegisterOutputType(MapperPolicyResponseOutput{})
	pulumi.RegisterOutputType(MapperSourceConnectionsInfoOutput{})
	pulumi.RegisterOutputType(MapperSourceConnectionsInfoArrayOutput{})
	pulumi.RegisterOutputType(MapperSourceConnectionsInfoResponseOutput{})
	pulumi.RegisterOutputType(MapperSourceConnectionsInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(MapperTableOutput{})
	pulumi.RegisterOutputType(MapperTableArrayOutput{})
	pulumi.RegisterOutputType(MapperTableResponseOutput{})
	pulumi.RegisterOutputType(MapperTableResponseArrayOutput{})
	pulumi.RegisterOutputType(MapperTableSchemaOutput{})
	pulumi.RegisterOutputType(MapperTableSchemaArrayOutput{})
	pulumi.RegisterOutputType(MapperTableSchemaResponseOutput{})
	pulumi.RegisterOutputType(MapperTableSchemaResponseArrayOutput{})
	pulumi.RegisterOutputType(MapperTargetConnectionsInfoOutput{})
	pulumi.RegisterOutputType(MapperTargetConnectionsInfoArrayOutput{})
	pulumi.RegisterOutputType(MapperTargetConnectionsInfoResponseOutput{})
	pulumi.RegisterOutputType(MapperTargetConnectionsInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(MappingDataFlowOutput{})
	pulumi.RegisterOutputType(MappingDataFlowResponseOutput{})
	pulumi.RegisterOutputType(MariaDBLinkedServiceOutput{})
	pulumi.RegisterOutputType(MariaDBLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(MariaDBSourceOutput{})
	pulumi.RegisterOutputType(MariaDBSourceResponseOutput{})
	pulumi.RegisterOutputType(MariaDBTableDatasetOutput{})
	pulumi.RegisterOutputType(MariaDBTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(MarketoLinkedServiceOutput{})
	pulumi.RegisterOutputType(MarketoLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(MarketoObjectDatasetOutput{})
	pulumi.RegisterOutputType(MarketoObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(MarketoSourceOutput{})
	pulumi.RegisterOutputType(MarketoSourceResponseOutput{})
	pulumi.RegisterOutputType(MetadataItemOutput{})
	pulumi.RegisterOutputType(MetadataItemArrayOutput{})
	pulumi.RegisterOutputType(MetadataItemResponseOutput{})
	pulumi.RegisterOutputType(MetadataItemResponseArrayOutput{})
	pulumi.RegisterOutputType(MicrosoftAccessLinkedServiceOutput{})
	pulumi.RegisterOutputType(MicrosoftAccessLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(MicrosoftAccessSinkOutput{})
	pulumi.RegisterOutputType(MicrosoftAccessSinkResponseOutput{})
	pulumi.RegisterOutputType(MicrosoftAccessSourceOutput{})
	pulumi.RegisterOutputType(MicrosoftAccessSourceResponseOutput{})
	pulumi.RegisterOutputType(MicrosoftAccessTableDatasetOutput{})
	pulumi.RegisterOutputType(MicrosoftAccessTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(MongoDbAtlasCollectionDatasetOutput{})
	pulumi.RegisterOutputType(MongoDbAtlasCollectionDatasetResponseOutput{})
	pulumi.RegisterOutputType(MongoDbAtlasLinkedServiceOutput{})
	pulumi.RegisterOutputType(MongoDbAtlasLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(MongoDbAtlasSinkOutput{})
	pulumi.RegisterOutputType(MongoDbAtlasSinkResponseOutput{})
	pulumi.RegisterOutputType(MongoDbAtlasSourceOutput{})
	pulumi.RegisterOutputType(MongoDbAtlasSourceResponseOutput{})
	pulumi.RegisterOutputType(MongoDbCollectionDatasetOutput{})
	pulumi.RegisterOutputType(MongoDbCollectionDatasetResponseOutput{})
	pulumi.RegisterOutputType(MongoDbCursorMethodsPropertiesOutput{})
	pulumi.RegisterOutputType(MongoDbCursorMethodsPropertiesPtrOutput{})
	pulumi.RegisterOutputType(MongoDbCursorMethodsPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MongoDbCursorMethodsPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(MongoDbLinkedServiceOutput{})
	pulumi.RegisterOutputType(MongoDbLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(MongoDbSourceOutput{})
	pulumi.RegisterOutputType(MongoDbSourceResponseOutput{})
	pulumi.RegisterOutputType(MongoDbV2CollectionDatasetOutput{})
	pulumi.RegisterOutputType(MongoDbV2CollectionDatasetResponseOutput{})
	pulumi.RegisterOutputType(MongoDbV2LinkedServiceOutput{})
	pulumi.RegisterOutputType(MongoDbV2LinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(MongoDbV2SinkOutput{})
	pulumi.RegisterOutputType(MongoDbV2SinkResponseOutput{})
	pulumi.RegisterOutputType(MongoDbV2SourceOutput{})
	pulumi.RegisterOutputType(MongoDbV2SourceResponseOutput{})
	pulumi.RegisterOutputType(MultiplePipelineTriggerOutput{})
	pulumi.RegisterOutputType(MultiplePipelineTriggerResponseOutput{})
	pulumi.RegisterOutputType(MySqlLinkedServiceOutput{})
	pulumi.RegisterOutputType(MySqlLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(MySqlSourceOutput{})
	pulumi.RegisterOutputType(MySqlSourceResponseOutput{})
	pulumi.RegisterOutputType(MySqlTableDatasetOutput{})
	pulumi.RegisterOutputType(MySqlTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(NetezzaLinkedServiceOutput{})
	pulumi.RegisterOutputType(NetezzaLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(NetezzaPartitionSettingsOutput{})
	pulumi.RegisterOutputType(NetezzaPartitionSettingsPtrOutput{})
	pulumi.RegisterOutputType(NetezzaPartitionSettingsResponseOutput{})
	pulumi.RegisterOutputType(NetezzaPartitionSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(NetezzaSourceOutput{})
	pulumi.RegisterOutputType(NetezzaSourceResponseOutput{})
	pulumi.RegisterOutputType(NetezzaTableDatasetOutput{})
	pulumi.RegisterOutputType(NetezzaTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(NotebookParameterOutput{})
	pulumi.RegisterOutputType(NotebookParameterMapOutput{})
	pulumi.RegisterOutputType(NotebookParameterResponseOutput{})
	pulumi.RegisterOutputType(NotebookParameterResponseMapOutput{})
	pulumi.RegisterOutputType(ODataLinkedServiceOutput{})
	pulumi.RegisterOutputType(ODataLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(ODataResourceDatasetOutput{})
	pulumi.RegisterOutputType(ODataResourceDatasetResponseOutput{})
	pulumi.RegisterOutputType(ODataSourceOutput{})
	pulumi.RegisterOutputType(ODataSourceResponseOutput{})
	pulumi.RegisterOutputType(OdbcLinkedServiceOutput{})
	pulumi.RegisterOutputType(OdbcLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(OdbcSinkOutput{})
	pulumi.RegisterOutputType(OdbcSinkResponseOutput{})
	pulumi.RegisterOutputType(OdbcSourceOutput{})
	pulumi.RegisterOutputType(OdbcSourceResponseOutput{})
	pulumi.RegisterOutputType(OdbcTableDatasetOutput{})
	pulumi.RegisterOutputType(OdbcTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(Office365DatasetOutput{})
	pulumi.RegisterOutputType(Office365DatasetResponseOutput{})
	pulumi.RegisterOutputType(Office365LinkedServiceOutput{})
	pulumi.RegisterOutputType(Office365LinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(Office365SourceOutput{})
	pulumi.RegisterOutputType(Office365SourceResponseOutput{})
	pulumi.RegisterOutputType(OracleCloudStorageLinkedServiceOutput{})
	pulumi.RegisterOutputType(OracleCloudStorageLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(OracleCloudStorageLocationOutput{})
	pulumi.RegisterOutputType(OracleCloudStorageLocationResponseOutput{})
	pulumi.RegisterOutputType(OracleCloudStorageReadSettingsOutput{})
	pulumi.RegisterOutputType(OracleCloudStorageReadSettingsPtrOutput{})
	pulumi.RegisterOutputType(OracleCloudStorageReadSettingsResponseOutput{})
	pulumi.RegisterOutputType(OracleCloudStorageReadSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(OracleLinkedServiceOutput{})
	pulumi.RegisterOutputType(OracleLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(OraclePartitionSettingsOutput{})
	pulumi.RegisterOutputType(OraclePartitionSettingsPtrOutput{})
	pulumi.RegisterOutputType(OraclePartitionSettingsResponseOutput{})
	pulumi.RegisterOutputType(OraclePartitionSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(OracleServiceCloudLinkedServiceOutput{})
	pulumi.RegisterOutputType(OracleServiceCloudLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(OracleServiceCloudObjectDatasetOutput{})
	pulumi.RegisterOutputType(OracleServiceCloudObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(OracleServiceCloudSourceOutput{})
	pulumi.RegisterOutputType(OracleServiceCloudSourceResponseOutput{})
	pulumi.RegisterOutputType(OracleSinkOutput{})
	pulumi.RegisterOutputType(OracleSinkResponseOutput{})
	pulumi.RegisterOutputType(OracleSourceOutput{})
	pulumi.RegisterOutputType(OracleSourceResponseOutput{})
	pulumi.RegisterOutputType(OracleTableDatasetOutput{})
	pulumi.RegisterOutputType(OracleTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(OrcDatasetOutput{})
	pulumi.RegisterOutputType(OrcDatasetResponseOutput{})
	pulumi.RegisterOutputType(OrcFormatOutput{})
	pulumi.RegisterOutputType(OrcFormatPtrOutput{})
	pulumi.RegisterOutputType(OrcFormatResponseOutput{})
	pulumi.RegisterOutputType(OrcFormatResponsePtrOutput{})
	pulumi.RegisterOutputType(OrcSinkOutput{})
	pulumi.RegisterOutputType(OrcSinkResponseOutput{})
	pulumi.RegisterOutputType(OrcSourceOutput{})
	pulumi.RegisterOutputType(OrcSourceResponseOutput{})
	pulumi.RegisterOutputType(OrcWriteSettingsOutput{})
	pulumi.RegisterOutputType(OrcWriteSettingsPtrOutput{})
	pulumi.RegisterOutputType(OrcWriteSettingsResponseOutput{})
	pulumi.RegisterOutputType(OrcWriteSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(PackageStoreOutput{})
	pulumi.RegisterOutputType(PackageStoreArrayOutput{})
	pulumi.RegisterOutputType(PackageStoreResponseOutput{})
	pulumi.RegisterOutputType(PackageStoreResponseArrayOutput{})
	pulumi.RegisterOutputType(ParameterSpecificationOutput{})
	pulumi.RegisterOutputType(ParameterSpecificationMapOutput{})
	pulumi.RegisterOutputType(ParameterSpecificationResponseOutput{})
	pulumi.RegisterOutputType(ParameterSpecificationResponseMapOutput{})
	pulumi.RegisterOutputType(ParquetDatasetOutput{})
	pulumi.RegisterOutputType(ParquetDatasetResponseOutput{})
	pulumi.RegisterOutputType(ParquetFormatOutput{})
	pulumi.RegisterOutputType(ParquetFormatPtrOutput{})
	pulumi.RegisterOutputType(ParquetFormatResponseOutput{})
	pulumi.RegisterOutputType(ParquetFormatResponsePtrOutput{})
	pulumi.RegisterOutputType(ParquetReadSettingsOutput{})
	pulumi.RegisterOutputType(ParquetReadSettingsPtrOutput{})
	pulumi.RegisterOutputType(ParquetReadSettingsResponseOutput{})
	pulumi.RegisterOutputType(ParquetReadSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ParquetSinkOutput{})
	pulumi.RegisterOutputType(ParquetSinkResponseOutput{})
	pulumi.RegisterOutputType(ParquetSourceOutput{})
	pulumi.RegisterOutputType(ParquetSourceResponseOutput{})
	pulumi.RegisterOutputType(ParquetWriteSettingsOutput{})
	pulumi.RegisterOutputType(ParquetWriteSettingsPtrOutput{})
	pulumi.RegisterOutputType(ParquetWriteSettingsResponseOutput{})
	pulumi.RegisterOutputType(ParquetWriteSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(PaypalLinkedServiceOutput{})
	pulumi.RegisterOutputType(PaypalLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(PaypalObjectDatasetOutput{})
	pulumi.RegisterOutputType(PaypalObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(PaypalSourceOutput{})
	pulumi.RegisterOutputType(PaypalSourceResponseOutput{})
	pulumi.RegisterOutputType(PhoenixLinkedServiceOutput{})
	pulumi.RegisterOutputType(PhoenixLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(PhoenixObjectDatasetOutput{})
	pulumi.RegisterOutputType(PhoenixObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(PhoenixSourceOutput{})
	pulumi.RegisterOutputType(PhoenixSourceResponseOutput{})
	pulumi.RegisterOutputType(PipelineElapsedTimeMetricPolicyOutput{})
	pulumi.RegisterOutputType(PipelineElapsedTimeMetricPolicyPtrOutput{})
	pulumi.RegisterOutputType(PipelineElapsedTimeMetricPolicyResponseOutput{})
	pulumi.RegisterOutputType(PipelineElapsedTimeMetricPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(PipelineExternalComputeScalePropertiesOutput{})
	pulumi.RegisterOutputType(PipelineExternalComputeScalePropertiesPtrOutput{})
	pulumi.RegisterOutputType(PipelineExternalComputeScalePropertiesResponseOutput{})
	pulumi.RegisterOutputType(PipelineExternalComputeScalePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(PipelineFolderOutput{})
	pulumi.RegisterOutputType(PipelineFolderPtrOutput{})
	pulumi.RegisterOutputType(PipelinePolicyOutput{})
	pulumi.RegisterOutputType(PipelinePolicyPtrOutput{})
	pulumi.RegisterOutputType(PipelinePolicyResponseOutput{})
	pulumi.RegisterOutputType(PipelinePolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(PipelineReferenceOutput{})
	pulumi.RegisterOutputType(PipelineReferencePtrOutput{})
	pulumi.RegisterOutputType(PipelineReferenceArrayOutput{})
	pulumi.RegisterOutputType(PipelineReferenceResponseOutput{})
	pulumi.RegisterOutputType(PipelineReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(PipelineReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(PipelineResponseFolderOutput{})
	pulumi.RegisterOutputType(PipelineResponseFolderPtrOutput{})
	pulumi.RegisterOutputType(PolybaseSettingsOutput{})
	pulumi.RegisterOutputType(PolybaseSettingsPtrOutput{})
	pulumi.RegisterOutputType(PolybaseSettingsResponseOutput{})
	pulumi.RegisterOutputType(PolybaseSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(PostgreSqlLinkedServiceOutput{})
	pulumi.RegisterOutputType(PostgreSqlLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(PostgreSqlSourceOutput{})
	pulumi.RegisterOutputType(PostgreSqlSourceResponseOutput{})
	pulumi.RegisterOutputType(PostgreSqlTableDatasetOutput{})
	pulumi.RegisterOutputType(PostgreSqlTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(PowerQuerySinkOutput{})
	pulumi.RegisterOutputType(PowerQuerySinkArrayOutput{})
	pulumi.RegisterOutputType(PowerQuerySinkMapOutput{})
	pulumi.RegisterOutputType(PowerQuerySinkMappingOutput{})
	pulumi.RegisterOutputType(PowerQuerySinkMappingArrayOutput{})
	pulumi.RegisterOutputType(PowerQuerySinkMappingResponseOutput{})
	pulumi.RegisterOutputType(PowerQuerySinkMappingResponseArrayOutput{})
	pulumi.RegisterOutputType(PowerQuerySinkResponseOutput{})
	pulumi.RegisterOutputType(PowerQuerySinkResponseArrayOutput{})
	pulumi.RegisterOutputType(PowerQuerySinkResponseMapOutput{})
	pulumi.RegisterOutputType(PowerQuerySourceOutput{})
	pulumi.RegisterOutputType(PowerQuerySourceArrayOutput{})
	pulumi.RegisterOutputType(PowerQuerySourceResponseOutput{})
	pulumi.RegisterOutputType(PowerQuerySourceResponseArrayOutput{})
	pulumi.RegisterOutputType(PrestoLinkedServiceOutput{})
	pulumi.RegisterOutputType(PrestoLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(PrestoObjectDatasetOutput{})
	pulumi.RegisterOutputType(PrestoObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(PrestoSourceOutput{})
	pulumi.RegisterOutputType(PrestoSourceResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointOutput{})
	pulumi.RegisterOutputType(PrivateEndpointPtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkConnectionApprovalRequestOutput{})
	pulumi.RegisterOutputType(PrivateLinkConnectionApprovalRequestPtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkConnectionStateOutput{})
	pulumi.RegisterOutputType(PrivateLinkConnectionStatePtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkConnectionStateResponseOutput{})
	pulumi.RegisterOutputType(PrivateLinkConnectionStateResponsePtrOutput{})
	pulumi.RegisterOutputType(PurviewConfigurationOutput{})
	pulumi.RegisterOutputType(PurviewConfigurationPtrOutput{})
	pulumi.RegisterOutputType(PurviewConfigurationResponseOutput{})
	pulumi.RegisterOutputType(PurviewConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(QuickBooksLinkedServiceOutput{})
	pulumi.RegisterOutputType(QuickBooksLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(QuickBooksObjectDatasetOutput{})
	pulumi.RegisterOutputType(QuickBooksObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(QuickBooksSourceOutput{})
	pulumi.RegisterOutputType(QuickBooksSourceResponseOutput{})
	pulumi.RegisterOutputType(QuickbaseLinkedServiceOutput{})
	pulumi.RegisterOutputType(QuickbaseLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(RecurrenceScheduleOutput{})
	pulumi.RegisterOutputType(RecurrenceSchedulePtrOutput{})
	pulumi.RegisterOutputType(RecurrenceScheduleOccurrenceOutput{})
	pulumi.RegisterOutputType(RecurrenceScheduleOccurrenceArrayOutput{})
	pulumi.RegisterOutputType(RecurrenceScheduleOccurrenceResponseOutput{})
	pulumi.RegisterOutputType(RecurrenceScheduleOccurrenceResponseArrayOutput{})
	pulumi.RegisterOutputType(RecurrenceScheduleResponseOutput{})
	pulumi.RegisterOutputType(RecurrenceScheduleResponsePtrOutput{})
	pulumi.RegisterOutputType(RedirectIncompatibleRowSettingsOutput{})
	pulumi.RegisterOutputType(RedirectIncompatibleRowSettingsPtrOutput{})
	pulumi.RegisterOutputType(RedirectIncompatibleRowSettingsResponseOutput{})
	pulumi.RegisterOutputType(RedirectIncompatibleRowSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(RedshiftUnloadSettingsOutput{})
	pulumi.RegisterOutputType(RedshiftUnloadSettingsPtrOutput{})
	pulumi.RegisterOutputType(RedshiftUnloadSettingsResponseOutput{})
	pulumi.RegisterOutputType(RedshiftUnloadSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(RelationalSourceOutput{})
	pulumi.RegisterOutputType(RelationalSourceResponseOutput{})
	pulumi.RegisterOutputType(RelationalTableDatasetOutput{})
	pulumi.RegisterOutputType(RelationalTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(RemotePrivateEndpointConnectionResponseOutput{})
	pulumi.RegisterOutputType(RerunTumblingWindowTriggerOutput{})
	pulumi.RegisterOutputType(RerunTumblingWindowTriggerResponseOutput{})
	pulumi.RegisterOutputType(ResponsysLinkedServiceOutput{})
	pulumi.RegisterOutputType(ResponsysLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(ResponsysObjectDatasetOutput{})
	pulumi.RegisterOutputType(ResponsysObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(ResponsysSourceOutput{})
	pulumi.RegisterOutputType(ResponsysSourceResponseOutput{})
	pulumi.RegisterOutputType(RestResourceDatasetOutput{})
	pulumi.RegisterOutputType(RestResourceDatasetResponseOutput{})
	pulumi.RegisterOutputType(RestServiceLinkedServiceOutput{})
	pulumi.RegisterOutputType(RestServiceLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(RestSinkOutput{})
	pulumi.RegisterOutputType(RestSinkResponseOutput{})
	pulumi.RegisterOutputType(RestSourceOutput{})
	pulumi.RegisterOutputType(RestSourceResponseOutput{})
	pulumi.RegisterOutputType(RetryPolicyOutput{})
	pulumi.RegisterOutputType(RetryPolicyPtrOutput{})
	pulumi.RegisterOutputType(RetryPolicyResponseOutput{})
	pulumi.RegisterOutputType(RetryPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(SSISAccessCredentialOutput{})
	pulumi.RegisterOutputType(SSISAccessCredentialPtrOutput{})
	pulumi.RegisterOutputType(SSISAccessCredentialResponseOutput{})
	pulumi.RegisterOutputType(SSISAccessCredentialResponsePtrOutput{})
	pulumi.RegisterOutputType(SSISChildPackageOutput{})
	pulumi.RegisterOutputType(SSISChildPackageArrayOutput{})
	pulumi.RegisterOutputType(SSISChildPackageResponseOutput{})
	pulumi.RegisterOutputType(SSISChildPackageResponseArrayOutput{})
	pulumi.RegisterOutputType(SSISExecutionCredentialOutput{})
	pulumi.RegisterOutputType(SSISExecutionCredentialPtrOutput{})
	pulumi.RegisterOutputType(SSISExecutionCredentialResponseOutput{})
	pulumi.RegisterOutputType(SSISExecutionCredentialResponsePtrOutput{})
	pulumi.RegisterOutputType(SSISExecutionParameterOutput{})
	pulumi.RegisterOutputType(SSISExecutionParameterMapOutput{})
	pulumi.RegisterOutputType(SSISExecutionParameterResponseOutput{})
	pulumi.RegisterOutputType(SSISExecutionParameterResponseMapOutput{})
	pulumi.RegisterOutputType(SSISLogLocationOutput{})
	pulumi.RegisterOutputType(SSISLogLocationPtrOutput{})
	pulumi.RegisterOutputType(SSISLogLocationResponseOutput{})
	pulumi.RegisterOutputType(SSISLogLocationResponsePtrOutput{})
	pulumi.RegisterOutputType(SSISPackageLocationOutput{})
	pulumi.RegisterOutputType(SSISPackageLocationResponseOutput{})
	pulumi.RegisterOutputType(SSISPropertyOverrideOutput{})
	pulumi.RegisterOutputType(SSISPropertyOverrideMapOutput{})
	pulumi.RegisterOutputType(SSISPropertyOverrideResponseOutput{})
	pulumi.RegisterOutputType(SSISPropertyOverrideResponseMapOutput{})
	pulumi.RegisterOutputType(SalesforceLinkedServiceOutput{})
	pulumi.RegisterOutputType(SalesforceLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SalesforceMarketingCloudLinkedServiceOutput{})
	pulumi.RegisterOutputType(SalesforceMarketingCloudLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SalesforceMarketingCloudObjectDatasetOutput{})
	pulumi.RegisterOutputType(SalesforceMarketingCloudObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(SalesforceMarketingCloudSourceOutput{})
	pulumi.RegisterOutputType(SalesforceMarketingCloudSourceResponseOutput{})
	pulumi.RegisterOutputType(SalesforceObjectDatasetOutput{})
	pulumi.RegisterOutputType(SalesforceObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(SalesforceServiceCloudLinkedServiceOutput{})
	pulumi.RegisterOutputType(SalesforceServiceCloudLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SalesforceServiceCloudObjectDatasetOutput{})
	pulumi.RegisterOutputType(SalesforceServiceCloudObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(SalesforceServiceCloudSinkOutput{})
	pulumi.RegisterOutputType(SalesforceServiceCloudSinkResponseOutput{})
	pulumi.RegisterOutputType(SalesforceServiceCloudSourceOutput{})
	pulumi.RegisterOutputType(SalesforceServiceCloudSourceResponseOutput{})
	pulumi.RegisterOutputType(SalesforceServiceCloudV2LinkedServiceOutput{})
	pulumi.RegisterOutputType(SalesforceServiceCloudV2LinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SalesforceServiceCloudV2ObjectDatasetOutput{})
	pulumi.RegisterOutputType(SalesforceServiceCloudV2ObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(SalesforceServiceCloudV2SinkOutput{})
	pulumi.RegisterOutputType(SalesforceServiceCloudV2SinkResponseOutput{})
	pulumi.RegisterOutputType(SalesforceServiceCloudV2SourceOutput{})
	pulumi.RegisterOutputType(SalesforceServiceCloudV2SourceResponseOutput{})
	pulumi.RegisterOutputType(SalesforceSinkOutput{})
	pulumi.RegisterOutputType(SalesforceSinkResponseOutput{})
	pulumi.RegisterOutputType(SalesforceSourceOutput{})
	pulumi.RegisterOutputType(SalesforceSourceResponseOutput{})
	pulumi.RegisterOutputType(SalesforceV2LinkedServiceOutput{})
	pulumi.RegisterOutputType(SalesforceV2LinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SalesforceV2ObjectDatasetOutput{})
	pulumi.RegisterOutputType(SalesforceV2ObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(SalesforceV2SinkOutput{})
	pulumi.RegisterOutputType(SalesforceV2SinkResponseOutput{})
	pulumi.RegisterOutputType(SalesforceV2SourceOutput{})
	pulumi.RegisterOutputType(SalesforceV2SourceResponseOutput{})
	pulumi.RegisterOutputType(SapBWLinkedServiceOutput{})
	pulumi.RegisterOutputType(SapBWLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SapBwCubeDatasetOutput{})
	pulumi.RegisterOutputType(SapBwCubeDatasetResponseOutput{})
	pulumi.RegisterOutputType(SapBwSourceOutput{})
	pulumi.RegisterOutputType(SapBwSourceResponseOutput{})
	pulumi.RegisterOutputType(SapCloudForCustomerLinkedServiceOutput{})
	pulumi.RegisterOutputType(SapCloudForCustomerLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SapCloudForCustomerResourceDatasetOutput{})
	pulumi.RegisterOutputType(SapCloudForCustomerResourceDatasetResponseOutput{})
	pulumi.RegisterOutputType(SapCloudForCustomerSinkOutput{})
	pulumi.RegisterOutputType(SapCloudForCustomerSinkResponseOutput{})
	pulumi.RegisterOutputType(SapCloudForCustomerSourceOutput{})
	pulumi.RegisterOutputType(SapCloudForCustomerSourceResponseOutput{})
	pulumi.RegisterOutputType(SapEccLinkedServiceOutput{})
	pulumi.RegisterOutputType(SapEccLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SapEccResourceDatasetOutput{})
	pulumi.RegisterOutputType(SapEccResourceDatasetResponseOutput{})
	pulumi.RegisterOutputType(SapEccSourceOutput{})
	pulumi.RegisterOutputType(SapEccSourceResponseOutput{})
	pulumi.RegisterOutputType(SapHanaLinkedServiceOutput{})
	pulumi.RegisterOutputType(SapHanaLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SapHanaPartitionSettingsOutput{})
	pulumi.RegisterOutputType(SapHanaPartitionSettingsPtrOutput{})
	pulumi.RegisterOutputType(SapHanaPartitionSettingsResponseOutput{})
	pulumi.RegisterOutputType(SapHanaPartitionSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(SapHanaSourceOutput{})
	pulumi.RegisterOutputType(SapHanaSourceResponseOutput{})
	pulumi.RegisterOutputType(SapHanaTableDatasetOutput{})
	pulumi.RegisterOutputType(SapHanaTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(SapOdpLinkedServiceOutput{})
	pulumi.RegisterOutputType(SapOdpLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SapOdpResourceDatasetOutput{})
	pulumi.RegisterOutputType(SapOdpResourceDatasetResponseOutput{})
	pulumi.RegisterOutputType(SapOdpSourceOutput{})
	pulumi.RegisterOutputType(SapOdpSourceResponseOutput{})
	pulumi.RegisterOutputType(SapOpenHubLinkedServiceOutput{})
	pulumi.RegisterOutputType(SapOpenHubLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SapOpenHubSourceOutput{})
	pulumi.RegisterOutputType(SapOpenHubSourceResponseOutput{})
	pulumi.RegisterOutputType(SapOpenHubTableDatasetOutput{})
	pulumi.RegisterOutputType(SapOpenHubTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(SapTableLinkedServiceOutput{})
	pulumi.RegisterOutputType(SapTableLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SapTablePartitionSettingsOutput{})
	pulumi.RegisterOutputType(SapTablePartitionSettingsPtrOutput{})
	pulumi.RegisterOutputType(SapTablePartitionSettingsResponseOutput{})
	pulumi.RegisterOutputType(SapTablePartitionSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(SapTableResourceDatasetOutput{})
	pulumi.RegisterOutputType(SapTableResourceDatasetResponseOutput{})
	pulumi.RegisterOutputType(SapTableSourceOutput{})
	pulumi.RegisterOutputType(SapTableSourceResponseOutput{})
	pulumi.RegisterOutputType(ScheduleTriggerOutput{})
	pulumi.RegisterOutputType(ScheduleTriggerRecurrenceOutput{})
	pulumi.RegisterOutputType(ScheduleTriggerRecurrenceResponseOutput{})
	pulumi.RegisterOutputType(ScheduleTriggerResponseOutput{})
	pulumi.RegisterOutputType(ScriptActionOutput{})
	pulumi.RegisterOutputType(ScriptActionArrayOutput{})
	pulumi.RegisterOutputType(ScriptActionResponseOutput{})
	pulumi.RegisterOutputType(ScriptActionResponseArrayOutput{})
}
