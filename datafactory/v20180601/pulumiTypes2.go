// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20180601

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Trigger that creates pipeline runs periodically, on schedule.
type ScheduleTrigger struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// Pipelines that need to be started.
	Pipelines []TriggerPipelineReference `pulumi:"pipelines"`
	// Recurrence schedule configuration.
	Recurrence ScheduleTriggerRecurrence `pulumi:"recurrence"`
	// Trigger type.
	// Expected value is 'ScheduleTrigger'.
	Type string `pulumi:"type"`
}

// ScheduleTriggerInput is an input type that accepts ScheduleTriggerArgs and ScheduleTriggerOutput values.
// You can construct a concrete instance of `ScheduleTriggerInput` via:
//
//	ScheduleTriggerArgs{...}
type ScheduleTriggerInput interface {
	pulumi.Input

	ToScheduleTriggerOutput() ScheduleTriggerOutput
	ToScheduleTriggerOutputWithContext(context.Context) ScheduleTriggerOutput
}

// Trigger that creates pipeline runs periodically, on schedule.
type ScheduleTriggerArgs struct {
	// List of tags that can be used for describing the trigger.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Trigger description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Pipelines that need to be started.
	Pipelines TriggerPipelineReferenceArrayInput `pulumi:"pipelines"`
	// Recurrence schedule configuration.
	Recurrence ScheduleTriggerRecurrenceInput `pulumi:"recurrence"`
	// Trigger type.
	// Expected value is 'ScheduleTrigger'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ScheduleTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleTrigger)(nil)).Elem()
}

func (i ScheduleTriggerArgs) ToScheduleTriggerOutput() ScheduleTriggerOutput {
	return i.ToScheduleTriggerOutputWithContext(context.Background())
}

func (i ScheduleTriggerArgs) ToScheduleTriggerOutputWithContext(ctx context.Context) ScheduleTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleTriggerOutput)
}

// Trigger that creates pipeline runs periodically, on schedule.
type ScheduleTriggerOutput struct{ *pulumi.OutputState }

func (ScheduleTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleTrigger)(nil)).Elem()
}

func (o ScheduleTriggerOutput) ToScheduleTriggerOutput() ScheduleTriggerOutput {
	return o
}

func (o ScheduleTriggerOutput) ToScheduleTriggerOutputWithContext(ctx context.Context) ScheduleTriggerOutput {
	return o
}

// List of tags that can be used for describing the trigger.
func (o ScheduleTriggerOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ScheduleTrigger) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Trigger description.
func (o ScheduleTriggerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleTrigger) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Pipelines that need to be started.
func (o ScheduleTriggerOutput) Pipelines() TriggerPipelineReferenceArrayOutput {
	return o.ApplyT(func(v ScheduleTrigger) []TriggerPipelineReference { return v.Pipelines }).(TriggerPipelineReferenceArrayOutput)
}

// Recurrence schedule configuration.
func (o ScheduleTriggerOutput) Recurrence() ScheduleTriggerRecurrenceOutput {
	return o.ApplyT(func(v ScheduleTrigger) ScheduleTriggerRecurrence { return v.Recurrence }).(ScheduleTriggerRecurrenceOutput)
}

// Trigger type.
// Expected value is 'ScheduleTrigger'.
func (o ScheduleTriggerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleTrigger) string { return v.Type }).(pulumi.StringOutput)
}

// The workflow trigger recurrence.
type ScheduleTriggerRecurrence struct {
	// The end time.
	EndTime *string `pulumi:"endTime"`
	// The frequency.
	Frequency *string `pulumi:"frequency"`
	// The interval.
	Interval *int `pulumi:"interval"`
	// The recurrence schedule.
	Schedule *RecurrenceSchedule `pulumi:"schedule"`
	// The start time.
	StartTime *string `pulumi:"startTime"`
	// The time zone.
	TimeZone *string `pulumi:"timeZone"`
}

// ScheduleTriggerRecurrenceInput is an input type that accepts ScheduleTriggerRecurrenceArgs and ScheduleTriggerRecurrenceOutput values.
// You can construct a concrete instance of `ScheduleTriggerRecurrenceInput` via:
//
//	ScheduleTriggerRecurrenceArgs{...}
type ScheduleTriggerRecurrenceInput interface {
	pulumi.Input

	ToScheduleTriggerRecurrenceOutput() ScheduleTriggerRecurrenceOutput
	ToScheduleTriggerRecurrenceOutputWithContext(context.Context) ScheduleTriggerRecurrenceOutput
}

// The workflow trigger recurrence.
type ScheduleTriggerRecurrenceArgs struct {
	// The end time.
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// The frequency.
	Frequency pulumi.StringPtrInput `pulumi:"frequency"`
	// The interval.
	Interval pulumi.IntPtrInput `pulumi:"interval"`
	// The recurrence schedule.
	Schedule RecurrenceSchedulePtrInput `pulumi:"schedule"`
	// The start time.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// The time zone.
	TimeZone pulumi.StringPtrInput `pulumi:"timeZone"`
}

func (ScheduleTriggerRecurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleTriggerRecurrence)(nil)).Elem()
}

func (i ScheduleTriggerRecurrenceArgs) ToScheduleTriggerRecurrenceOutput() ScheduleTriggerRecurrenceOutput {
	return i.ToScheduleTriggerRecurrenceOutputWithContext(context.Background())
}

func (i ScheduleTriggerRecurrenceArgs) ToScheduleTriggerRecurrenceOutputWithContext(ctx context.Context) ScheduleTriggerRecurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleTriggerRecurrenceOutput)
}

// The workflow trigger recurrence.
type ScheduleTriggerRecurrenceOutput struct{ *pulumi.OutputState }

func (ScheduleTriggerRecurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleTriggerRecurrence)(nil)).Elem()
}

func (o ScheduleTriggerRecurrenceOutput) ToScheduleTriggerRecurrenceOutput() ScheduleTriggerRecurrenceOutput {
	return o
}

func (o ScheduleTriggerRecurrenceOutput) ToScheduleTriggerRecurrenceOutputWithContext(ctx context.Context) ScheduleTriggerRecurrenceOutput {
	return o
}

// The end time.
func (o ScheduleTriggerRecurrenceOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleTriggerRecurrence) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// The frequency.
func (o ScheduleTriggerRecurrenceOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleTriggerRecurrence) *string { return v.Frequency }).(pulumi.StringPtrOutput)
}

// The interval.
func (o ScheduleTriggerRecurrenceOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScheduleTriggerRecurrence) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

// The recurrence schedule.
func (o ScheduleTriggerRecurrenceOutput) Schedule() RecurrenceSchedulePtrOutput {
	return o.ApplyT(func(v ScheduleTriggerRecurrence) *RecurrenceSchedule { return v.Schedule }).(RecurrenceSchedulePtrOutput)
}

// The start time.
func (o ScheduleTriggerRecurrenceOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleTriggerRecurrence) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// The time zone.
func (o ScheduleTriggerRecurrenceOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleTriggerRecurrence) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

// The workflow trigger recurrence.
type ScheduleTriggerRecurrenceResponse struct {
	// The end time.
	EndTime *string `pulumi:"endTime"`
	// The frequency.
	Frequency *string `pulumi:"frequency"`
	// The interval.
	Interval *int `pulumi:"interval"`
	// The recurrence schedule.
	Schedule *RecurrenceScheduleResponse `pulumi:"schedule"`
	// The start time.
	StartTime *string `pulumi:"startTime"`
	// The time zone.
	TimeZone *string `pulumi:"timeZone"`
}

// The workflow trigger recurrence.
type ScheduleTriggerRecurrenceResponseOutput struct{ *pulumi.OutputState }

func (ScheduleTriggerRecurrenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleTriggerRecurrenceResponse)(nil)).Elem()
}

func (o ScheduleTriggerRecurrenceResponseOutput) ToScheduleTriggerRecurrenceResponseOutput() ScheduleTriggerRecurrenceResponseOutput {
	return o
}

func (o ScheduleTriggerRecurrenceResponseOutput) ToScheduleTriggerRecurrenceResponseOutputWithContext(ctx context.Context) ScheduleTriggerRecurrenceResponseOutput {
	return o
}

// The end time.
func (o ScheduleTriggerRecurrenceResponseOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleTriggerRecurrenceResponse) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// The frequency.
func (o ScheduleTriggerRecurrenceResponseOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleTriggerRecurrenceResponse) *string { return v.Frequency }).(pulumi.StringPtrOutput)
}

// The interval.
func (o ScheduleTriggerRecurrenceResponseOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScheduleTriggerRecurrenceResponse) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

// The recurrence schedule.
func (o ScheduleTriggerRecurrenceResponseOutput) Schedule() RecurrenceScheduleResponsePtrOutput {
	return o.ApplyT(func(v ScheduleTriggerRecurrenceResponse) *RecurrenceScheduleResponse { return v.Schedule }).(RecurrenceScheduleResponsePtrOutput)
}

// The start time.
func (o ScheduleTriggerRecurrenceResponseOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleTriggerRecurrenceResponse) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// The time zone.
func (o ScheduleTriggerRecurrenceResponseOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleTriggerRecurrenceResponse) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

// Trigger that creates pipeline runs periodically, on schedule.
type ScheduleTriggerResponse struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// Pipelines that need to be started.
	Pipelines []TriggerPipelineReferenceResponse `pulumi:"pipelines"`
	// Recurrence schedule configuration.
	Recurrence ScheduleTriggerRecurrenceResponse `pulumi:"recurrence"`
	// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState string `pulumi:"runtimeState"`
	// Trigger type.
	// Expected value is 'ScheduleTrigger'.
	Type string `pulumi:"type"`
}

// Trigger that creates pipeline runs periodically, on schedule.
type ScheduleTriggerResponseOutput struct{ *pulumi.OutputState }

func (ScheduleTriggerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleTriggerResponse)(nil)).Elem()
}

func (o ScheduleTriggerResponseOutput) ToScheduleTriggerResponseOutput() ScheduleTriggerResponseOutput {
	return o
}

func (o ScheduleTriggerResponseOutput) ToScheduleTriggerResponseOutputWithContext(ctx context.Context) ScheduleTriggerResponseOutput {
	return o
}

// List of tags that can be used for describing the trigger.
func (o ScheduleTriggerResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ScheduleTriggerResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Trigger description.
func (o ScheduleTriggerResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleTriggerResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Pipelines that need to be started.
func (o ScheduleTriggerResponseOutput) Pipelines() TriggerPipelineReferenceResponseArrayOutput {
	return o.ApplyT(func(v ScheduleTriggerResponse) []TriggerPipelineReferenceResponse { return v.Pipelines }).(TriggerPipelineReferenceResponseArrayOutput)
}

// Recurrence schedule configuration.
func (o ScheduleTriggerResponseOutput) Recurrence() ScheduleTriggerRecurrenceResponseOutput {
	return o.ApplyT(func(v ScheduleTriggerResponse) ScheduleTriggerRecurrenceResponse { return v.Recurrence }).(ScheduleTriggerRecurrenceResponseOutput)
}

// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
func (o ScheduleTriggerResponseOutput) RuntimeState() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleTriggerResponse) string { return v.RuntimeState }).(pulumi.StringOutput)
}

// Trigger type.
// Expected value is 'ScheduleTrigger'.
func (o ScheduleTriggerResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleTriggerResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Custom script action to run on HDI ondemand cluster once it's up.
type ScriptAction struct {
	// The user provided name of the script action.
	Name string `pulumi:"name"`
	// The parameters for the script action.
	Parameters *string `pulumi:"parameters"`
	// The node types on which the script action should be executed.
	Roles interface{} `pulumi:"roles"`
	// The URI for the script action.
	Uri string `pulumi:"uri"`
}

// ScriptActionInput is an input type that accepts ScriptActionArgs and ScriptActionOutput values.
// You can construct a concrete instance of `ScriptActionInput` via:
//
//	ScriptActionArgs{...}
type ScriptActionInput interface {
	pulumi.Input

	ToScriptActionOutput() ScriptActionOutput
	ToScriptActionOutputWithContext(context.Context) ScriptActionOutput
}

// Custom script action to run on HDI ondemand cluster once it's up.
type ScriptActionArgs struct {
	// The user provided name of the script action.
	Name pulumi.StringInput `pulumi:"name"`
	// The parameters for the script action.
	Parameters pulumi.StringPtrInput `pulumi:"parameters"`
	// The node types on which the script action should be executed.
	Roles pulumi.Input `pulumi:"roles"`
	// The URI for the script action.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (ScriptActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptAction)(nil)).Elem()
}

func (i ScriptActionArgs) ToScriptActionOutput() ScriptActionOutput {
	return i.ToScriptActionOutputWithContext(context.Background())
}

func (i ScriptActionArgs) ToScriptActionOutputWithContext(ctx context.Context) ScriptActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptActionOutput)
}

// ScriptActionArrayInput is an input type that accepts ScriptActionArray and ScriptActionArrayOutput values.
// You can construct a concrete instance of `ScriptActionArrayInput` via:
//
//	ScriptActionArray{ ScriptActionArgs{...} }
type ScriptActionArrayInput interface {
	pulumi.Input

	ToScriptActionArrayOutput() ScriptActionArrayOutput
	ToScriptActionArrayOutputWithContext(context.Context) ScriptActionArrayOutput
}

type ScriptActionArray []ScriptActionInput

func (ScriptActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScriptAction)(nil)).Elem()
}

func (i ScriptActionArray) ToScriptActionArrayOutput() ScriptActionArrayOutput {
	return i.ToScriptActionArrayOutputWithContext(context.Background())
}

func (i ScriptActionArray) ToScriptActionArrayOutputWithContext(ctx context.Context) ScriptActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptActionArrayOutput)
}

// Custom script action to run on HDI ondemand cluster once it's up.
type ScriptActionOutput struct{ *pulumi.OutputState }

func (ScriptActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptAction)(nil)).Elem()
}

func (o ScriptActionOutput) ToScriptActionOutput() ScriptActionOutput {
	return o
}

func (o ScriptActionOutput) ToScriptActionOutputWithContext(ctx context.Context) ScriptActionOutput {
	return o
}

// The user provided name of the script action.
func (o ScriptActionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptAction) string { return v.Name }).(pulumi.StringOutput)
}

// The parameters for the script action.
func (o ScriptActionOutput) Parameters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScriptAction) *string { return v.Parameters }).(pulumi.StringPtrOutput)
}

// The node types on which the script action should be executed.
func (o ScriptActionOutput) Roles() pulumi.AnyOutput {
	return o.ApplyT(func(v ScriptAction) interface{} { return v.Roles }).(pulumi.AnyOutput)
}

// The URI for the script action.
func (o ScriptActionOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptAction) string { return v.Uri }).(pulumi.StringOutput)
}

type ScriptActionArrayOutput struct{ *pulumi.OutputState }

func (ScriptActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScriptAction)(nil)).Elem()
}

func (o ScriptActionArrayOutput) ToScriptActionArrayOutput() ScriptActionArrayOutput {
	return o
}

func (o ScriptActionArrayOutput) ToScriptActionArrayOutputWithContext(ctx context.Context) ScriptActionArrayOutput {
	return o
}

func (o ScriptActionArrayOutput) Index(i pulumi.IntInput) ScriptActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScriptAction {
		return vs[0].([]ScriptAction)[vs[1].(int)]
	}).(ScriptActionOutput)
}

// Custom script action to run on HDI ondemand cluster once it's up.
type ScriptActionResponse struct {
	// The user provided name of the script action.
	Name string `pulumi:"name"`
	// The parameters for the script action.
	Parameters *string `pulumi:"parameters"`
	// The node types on which the script action should be executed.
	Roles interface{} `pulumi:"roles"`
	// The URI for the script action.
	Uri string `pulumi:"uri"`
}

// Custom script action to run on HDI ondemand cluster once it's up.
type ScriptActionResponseOutput struct{ *pulumi.OutputState }

func (ScriptActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptActionResponse)(nil)).Elem()
}

func (o ScriptActionResponseOutput) ToScriptActionResponseOutput() ScriptActionResponseOutput {
	return o
}

func (o ScriptActionResponseOutput) ToScriptActionResponseOutputWithContext(ctx context.Context) ScriptActionResponseOutput {
	return o
}

// The user provided name of the script action.
func (o ScriptActionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptActionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The parameters for the script action.
func (o ScriptActionResponseOutput) Parameters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScriptActionResponse) *string { return v.Parameters }).(pulumi.StringPtrOutput)
}

// The node types on which the script action should be executed.
func (o ScriptActionResponseOutput) Roles() pulumi.AnyOutput {
	return o.ApplyT(func(v ScriptActionResponse) interface{} { return v.Roles }).(pulumi.AnyOutput)
}

// The URI for the script action.
func (o ScriptActionResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptActionResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type ScriptActionResponseArrayOutput struct{ *pulumi.OutputState }

func (ScriptActionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScriptActionResponse)(nil)).Elem()
}

func (o ScriptActionResponseArrayOutput) ToScriptActionResponseArrayOutput() ScriptActionResponseArrayOutput {
	return o
}

func (o ScriptActionResponseArrayOutput) ToScriptActionResponseArrayOutputWithContext(ctx context.Context) ScriptActionResponseArrayOutput {
	return o
}

func (o ScriptActionResponseArrayOutput) Index(i pulumi.IntInput) ScriptActionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScriptActionResponse {
		return vs[0].([]ScriptActionResponse)[vs[1].(int)]
	}).(ScriptActionResponseOutput)
}

// Script activity type.
type ScriptActivity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Log settings of script activity.
	LogSettings *ScriptActivityTypePropertiesLogSettings `pulumi:"logSettings"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// ScriptBlock execution timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	ScriptBlockExecutionTimeout interface{} `pulumi:"scriptBlockExecutionTimeout"`
	// Array of script blocks. Type: array.
	Scripts []ScriptActivityScriptBlock `pulumi:"scripts"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'Script'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// ScriptActivityInput is an input type that accepts ScriptActivityArgs and ScriptActivityOutput values.
// You can construct a concrete instance of `ScriptActivityInput` via:
//
//	ScriptActivityArgs{...}
type ScriptActivityInput interface {
	pulumi.Input

	ToScriptActivityOutput() ScriptActivityOutput
	ToScriptActivityOutputWithContext(context.Context) ScriptActivityOutput
}

// Script activity type.
type ScriptActivityArgs struct {
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Log settings of script activity.
	LogSettings ScriptActivityTypePropertiesLogSettingsPtrInput `pulumi:"logSettings"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs pulumi.StringPtrInput `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy ActivityPolicyPtrInput `pulumi:"policy"`
	// ScriptBlock execution timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	ScriptBlockExecutionTimeout pulumi.Input `pulumi:"scriptBlockExecutionTimeout"`
	// Array of script blocks. Type: array.
	Scripts ScriptActivityScriptBlockArrayInput `pulumi:"scripts"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Type of activity.
	// Expected value is 'Script'.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
}

func (ScriptActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptActivity)(nil)).Elem()
}

func (i ScriptActivityArgs) ToScriptActivityOutput() ScriptActivityOutput {
	return i.ToScriptActivityOutputWithContext(context.Background())
}

func (i ScriptActivityArgs) ToScriptActivityOutputWithContext(ctx context.Context) ScriptActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptActivityOutput)
}

// Script activity type.
type ScriptActivityOutput struct{ *pulumi.OutputState }

func (ScriptActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptActivity)(nil)).Elem()
}

func (o ScriptActivityOutput) ToScriptActivityOutput() ScriptActivityOutput {
	return o
}

func (o ScriptActivityOutput) ToScriptActivityOutputWithContext(ctx context.Context) ScriptActivityOutput {
	return o
}

// Activity depends on condition.
func (o ScriptActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v ScriptActivity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o ScriptActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScriptActivity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o ScriptActivityOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v ScriptActivity) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Log settings of script activity.
func (o ScriptActivityOutput) LogSettings() ScriptActivityTypePropertiesLogSettingsPtrOutput {
	return o.ApplyT(func(v ScriptActivity) *ScriptActivityTypePropertiesLogSettings { return v.LogSettings }).(ScriptActivityTypePropertiesLogSettingsPtrOutput)
}

// Activity name.
func (o ScriptActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptActivity) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o ScriptActivityOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScriptActivity) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o ScriptActivityOutput) Policy() ActivityPolicyPtrOutput {
	return o.ApplyT(func(v ScriptActivity) *ActivityPolicy { return v.Policy }).(ActivityPolicyPtrOutput)
}

// ScriptBlock execution timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ScriptActivityOutput) ScriptBlockExecutionTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v ScriptActivity) interface{} { return v.ScriptBlockExecutionTimeout }).(pulumi.AnyOutput)
}

// Array of script blocks. Type: array.
func (o ScriptActivityOutput) Scripts() ScriptActivityScriptBlockArrayOutput {
	return o.ApplyT(func(v ScriptActivity) []ScriptActivityScriptBlock { return v.Scripts }).(ScriptActivityScriptBlockArrayOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o ScriptActivityOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScriptActivity) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'Script'.
func (o ScriptActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptActivity) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o ScriptActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v ScriptActivity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

// Parameters of a script block.
type ScriptActivityParameter struct {
	// The direction of the parameter.
	Direction *string `pulumi:"direction"`
	// The name of the parameter. Type: string (or Expression with resultType string).
	Name interface{} `pulumi:"name"`
	// The size of the output direction parameter.
	Size *int `pulumi:"size"`
	// The type of the parameter.
	Type *string `pulumi:"type"`
	// The value of the parameter. Type: string (or Expression with resultType string).
	Value interface{} `pulumi:"value"`
}

// ScriptActivityParameterInput is an input type that accepts ScriptActivityParameterArgs and ScriptActivityParameterOutput values.
// You can construct a concrete instance of `ScriptActivityParameterInput` via:
//
//	ScriptActivityParameterArgs{...}
type ScriptActivityParameterInput interface {
	pulumi.Input

	ToScriptActivityParameterOutput() ScriptActivityParameterOutput
	ToScriptActivityParameterOutputWithContext(context.Context) ScriptActivityParameterOutput
}

// Parameters of a script block.
type ScriptActivityParameterArgs struct {
	// The direction of the parameter.
	Direction pulumi.StringPtrInput `pulumi:"direction"`
	// The name of the parameter. Type: string (or Expression with resultType string).
	Name pulumi.Input `pulumi:"name"`
	// The size of the output direction parameter.
	Size pulumi.IntPtrInput `pulumi:"size"`
	// The type of the parameter.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The value of the parameter. Type: string (or Expression with resultType string).
	Value pulumi.Input `pulumi:"value"`
}

func (ScriptActivityParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptActivityParameter)(nil)).Elem()
}

func (i ScriptActivityParameterArgs) ToScriptActivityParameterOutput() ScriptActivityParameterOutput {
	return i.ToScriptActivityParameterOutputWithContext(context.Background())
}

func (i ScriptActivityParameterArgs) ToScriptActivityParameterOutputWithContext(ctx context.Context) ScriptActivityParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptActivityParameterOutput)
}

// ScriptActivityParameterArrayInput is an input type that accepts ScriptActivityParameterArray and ScriptActivityParameterArrayOutput values.
// You can construct a concrete instance of `ScriptActivityParameterArrayInput` via:
//
//	ScriptActivityParameterArray{ ScriptActivityParameterArgs{...} }
type ScriptActivityParameterArrayInput interface {
	pulumi.Input

	ToScriptActivityParameterArrayOutput() ScriptActivityParameterArrayOutput
	ToScriptActivityParameterArrayOutputWithContext(context.Context) ScriptActivityParameterArrayOutput
}

type ScriptActivityParameterArray []ScriptActivityParameterInput

func (ScriptActivityParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScriptActivityParameter)(nil)).Elem()
}

func (i ScriptActivityParameterArray) ToScriptActivityParameterArrayOutput() ScriptActivityParameterArrayOutput {
	return i.ToScriptActivityParameterArrayOutputWithContext(context.Background())
}

func (i ScriptActivityParameterArray) ToScriptActivityParameterArrayOutputWithContext(ctx context.Context) ScriptActivityParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptActivityParameterArrayOutput)
}

// Parameters of a script block.
type ScriptActivityParameterOutput struct{ *pulumi.OutputState }

func (ScriptActivityParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptActivityParameter)(nil)).Elem()
}

func (o ScriptActivityParameterOutput) ToScriptActivityParameterOutput() ScriptActivityParameterOutput {
	return o
}

func (o ScriptActivityParameterOutput) ToScriptActivityParameterOutputWithContext(ctx context.Context) ScriptActivityParameterOutput {
	return o
}

// The direction of the parameter.
func (o ScriptActivityParameterOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScriptActivityParameter) *string { return v.Direction }).(pulumi.StringPtrOutput)
}

// The name of the parameter. Type: string (or Expression with resultType string).
func (o ScriptActivityParameterOutput) Name() pulumi.AnyOutput {
	return o.ApplyT(func(v ScriptActivityParameter) interface{} { return v.Name }).(pulumi.AnyOutput)
}

// The size of the output direction parameter.
func (o ScriptActivityParameterOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScriptActivityParameter) *int { return v.Size }).(pulumi.IntPtrOutput)
}

// The type of the parameter.
func (o ScriptActivityParameterOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScriptActivityParameter) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The value of the parameter. Type: string (or Expression with resultType string).
func (o ScriptActivityParameterOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v ScriptActivityParameter) interface{} { return v.Value }).(pulumi.AnyOutput)
}

type ScriptActivityParameterArrayOutput struct{ *pulumi.OutputState }

func (ScriptActivityParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScriptActivityParameter)(nil)).Elem()
}

func (o ScriptActivityParameterArrayOutput) ToScriptActivityParameterArrayOutput() ScriptActivityParameterArrayOutput {
	return o
}

func (o ScriptActivityParameterArrayOutput) ToScriptActivityParameterArrayOutputWithContext(ctx context.Context) ScriptActivityParameterArrayOutput {
	return o
}

func (o ScriptActivityParameterArrayOutput) Index(i pulumi.IntInput) ScriptActivityParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScriptActivityParameter {
		return vs[0].([]ScriptActivityParameter)[vs[1].(int)]
	}).(ScriptActivityParameterOutput)
}

// Parameters of a script block.
type ScriptActivityParameterResponse struct {
	// The direction of the parameter.
	Direction *string `pulumi:"direction"`
	// The name of the parameter. Type: string (or Expression with resultType string).
	Name interface{} `pulumi:"name"`
	// The size of the output direction parameter.
	Size *int `pulumi:"size"`
	// The type of the parameter.
	Type *string `pulumi:"type"`
	// The value of the parameter. Type: string (or Expression with resultType string).
	Value interface{} `pulumi:"value"`
}

// Parameters of a script block.
type ScriptActivityParameterResponseOutput struct{ *pulumi.OutputState }

func (ScriptActivityParameterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptActivityParameterResponse)(nil)).Elem()
}

func (o ScriptActivityParameterResponseOutput) ToScriptActivityParameterResponseOutput() ScriptActivityParameterResponseOutput {
	return o
}

func (o ScriptActivityParameterResponseOutput) ToScriptActivityParameterResponseOutputWithContext(ctx context.Context) ScriptActivityParameterResponseOutput {
	return o
}

// The direction of the parameter.
func (o ScriptActivityParameterResponseOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScriptActivityParameterResponse) *string { return v.Direction }).(pulumi.StringPtrOutput)
}

// The name of the parameter. Type: string (or Expression with resultType string).
func (o ScriptActivityParameterResponseOutput) Name() pulumi.AnyOutput {
	return o.ApplyT(func(v ScriptActivityParameterResponse) interface{} { return v.Name }).(pulumi.AnyOutput)
}

// The size of the output direction parameter.
func (o ScriptActivityParameterResponseOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScriptActivityParameterResponse) *int { return v.Size }).(pulumi.IntPtrOutput)
}

// The type of the parameter.
func (o ScriptActivityParameterResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScriptActivityParameterResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The value of the parameter. Type: string (or Expression with resultType string).
func (o ScriptActivityParameterResponseOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v ScriptActivityParameterResponse) interface{} { return v.Value }).(pulumi.AnyOutput)
}

type ScriptActivityParameterResponseArrayOutput struct{ *pulumi.OutputState }

func (ScriptActivityParameterResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScriptActivityParameterResponse)(nil)).Elem()
}

func (o ScriptActivityParameterResponseArrayOutput) ToScriptActivityParameterResponseArrayOutput() ScriptActivityParameterResponseArrayOutput {
	return o
}

func (o ScriptActivityParameterResponseArrayOutput) ToScriptActivityParameterResponseArrayOutputWithContext(ctx context.Context) ScriptActivityParameterResponseArrayOutput {
	return o
}

func (o ScriptActivityParameterResponseArrayOutput) Index(i pulumi.IntInput) ScriptActivityParameterResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScriptActivityParameterResponse {
		return vs[0].([]ScriptActivityParameterResponse)[vs[1].(int)]
	}).(ScriptActivityParameterResponseOutput)
}

// Script activity type.
type ScriptActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Log settings of script activity.
	LogSettings *ScriptActivityTypePropertiesResponseLogSettings `pulumi:"logSettings"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// ScriptBlock execution timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	ScriptBlockExecutionTimeout interface{} `pulumi:"scriptBlockExecutionTimeout"`
	// Array of script blocks. Type: array.
	Scripts []ScriptActivityScriptBlockResponse `pulumi:"scripts"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'Script'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Script activity type.
type ScriptActivityResponseOutput struct{ *pulumi.OutputState }

func (ScriptActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptActivityResponse)(nil)).Elem()
}

func (o ScriptActivityResponseOutput) ToScriptActivityResponseOutput() ScriptActivityResponseOutput {
	return o
}

func (o ScriptActivityResponseOutput) ToScriptActivityResponseOutputWithContext(ctx context.Context) ScriptActivityResponseOutput {
	return o
}

// Activity depends on condition.
func (o ScriptActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v ScriptActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o ScriptActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScriptActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o ScriptActivityResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v ScriptActivityResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Log settings of script activity.
func (o ScriptActivityResponseOutput) LogSettings() ScriptActivityTypePropertiesResponseLogSettingsPtrOutput {
	return o.ApplyT(func(v ScriptActivityResponse) *ScriptActivityTypePropertiesResponseLogSettings { return v.LogSettings }).(ScriptActivityTypePropertiesResponseLogSettingsPtrOutput)
}

// Activity name.
func (o ScriptActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o ScriptActivityResponseOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScriptActivityResponse) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o ScriptActivityResponseOutput) Policy() ActivityPolicyResponsePtrOutput {
	return o.ApplyT(func(v ScriptActivityResponse) *ActivityPolicyResponse { return v.Policy }).(ActivityPolicyResponsePtrOutput)
}

// ScriptBlock execution timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ScriptActivityResponseOutput) ScriptBlockExecutionTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v ScriptActivityResponse) interface{} { return v.ScriptBlockExecutionTimeout }).(pulumi.AnyOutput)
}

// Array of script blocks. Type: array.
func (o ScriptActivityResponseOutput) Scripts() ScriptActivityScriptBlockResponseArrayOutput {
	return o.ApplyT(func(v ScriptActivityResponse) []ScriptActivityScriptBlockResponse { return v.Scripts }).(ScriptActivityScriptBlockResponseArrayOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o ScriptActivityResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScriptActivityResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'Script'.
func (o ScriptActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o ScriptActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v ScriptActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

// Script block of scripts.
type ScriptActivityScriptBlock struct {
	// Array of script parameters. Type: array.
	Parameters []ScriptActivityParameter `pulumi:"parameters"`
	// The query text. Type: string (or Expression with resultType string).
	Text interface{} `pulumi:"text"`
	// The type of the query. Type: string.
	Type string `pulumi:"type"`
}

// ScriptActivityScriptBlockInput is an input type that accepts ScriptActivityScriptBlockArgs and ScriptActivityScriptBlockOutput values.
// You can construct a concrete instance of `ScriptActivityScriptBlockInput` via:
//
//	ScriptActivityScriptBlockArgs{...}
type ScriptActivityScriptBlockInput interface {
	pulumi.Input

	ToScriptActivityScriptBlockOutput() ScriptActivityScriptBlockOutput
	ToScriptActivityScriptBlockOutputWithContext(context.Context) ScriptActivityScriptBlockOutput
}

// Script block of scripts.
type ScriptActivityScriptBlockArgs struct {
	// Array of script parameters. Type: array.
	Parameters ScriptActivityParameterArrayInput `pulumi:"parameters"`
	// The query text. Type: string (or Expression with resultType string).
	Text pulumi.Input `pulumi:"text"`
	// The type of the query. Type: string.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ScriptActivityScriptBlockArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptActivityScriptBlock)(nil)).Elem()
}

func (i ScriptActivityScriptBlockArgs) ToScriptActivityScriptBlockOutput() ScriptActivityScriptBlockOutput {
	return i.ToScriptActivityScriptBlockOutputWithContext(context.Background())
}

func (i ScriptActivityScriptBlockArgs) ToScriptActivityScriptBlockOutputWithContext(ctx context.Context) ScriptActivityScriptBlockOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptActivityScriptBlockOutput)
}

// ScriptActivityScriptBlockArrayInput is an input type that accepts ScriptActivityScriptBlockArray and ScriptActivityScriptBlockArrayOutput values.
// You can construct a concrete instance of `ScriptActivityScriptBlockArrayInput` via:
//
//	ScriptActivityScriptBlockArray{ ScriptActivityScriptBlockArgs{...} }
type ScriptActivityScriptBlockArrayInput interface {
	pulumi.Input

	ToScriptActivityScriptBlockArrayOutput() ScriptActivityScriptBlockArrayOutput
	ToScriptActivityScriptBlockArrayOutputWithContext(context.Context) ScriptActivityScriptBlockArrayOutput
}

type ScriptActivityScriptBlockArray []ScriptActivityScriptBlockInput

func (ScriptActivityScriptBlockArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScriptActivityScriptBlock)(nil)).Elem()
}

func (i ScriptActivityScriptBlockArray) ToScriptActivityScriptBlockArrayOutput() ScriptActivityScriptBlockArrayOutput {
	return i.ToScriptActivityScriptBlockArrayOutputWithContext(context.Background())
}

func (i ScriptActivityScriptBlockArray) ToScriptActivityScriptBlockArrayOutputWithContext(ctx context.Context) ScriptActivityScriptBlockArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptActivityScriptBlockArrayOutput)
}

// Script block of scripts.
type ScriptActivityScriptBlockOutput struct{ *pulumi.OutputState }

func (ScriptActivityScriptBlockOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptActivityScriptBlock)(nil)).Elem()
}

func (o ScriptActivityScriptBlockOutput) ToScriptActivityScriptBlockOutput() ScriptActivityScriptBlockOutput {
	return o
}

func (o ScriptActivityScriptBlockOutput) ToScriptActivityScriptBlockOutputWithContext(ctx context.Context) ScriptActivityScriptBlockOutput {
	return o
}

// Array of script parameters. Type: array.
func (o ScriptActivityScriptBlockOutput) Parameters() ScriptActivityParameterArrayOutput {
	return o.ApplyT(func(v ScriptActivityScriptBlock) []ScriptActivityParameter { return v.Parameters }).(ScriptActivityParameterArrayOutput)
}

// The query text. Type: string (or Expression with resultType string).
func (o ScriptActivityScriptBlockOutput) Text() pulumi.AnyOutput {
	return o.ApplyT(func(v ScriptActivityScriptBlock) interface{} { return v.Text }).(pulumi.AnyOutput)
}

// The type of the query. Type: string.
func (o ScriptActivityScriptBlockOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptActivityScriptBlock) string { return v.Type }).(pulumi.StringOutput)
}

type ScriptActivityScriptBlockArrayOutput struct{ *pulumi.OutputState }

func (ScriptActivityScriptBlockArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScriptActivityScriptBlock)(nil)).Elem()
}

func (o ScriptActivityScriptBlockArrayOutput) ToScriptActivityScriptBlockArrayOutput() ScriptActivityScriptBlockArrayOutput {
	return o
}

func (o ScriptActivityScriptBlockArrayOutput) ToScriptActivityScriptBlockArrayOutputWithContext(ctx context.Context) ScriptActivityScriptBlockArrayOutput {
	return o
}

func (o ScriptActivityScriptBlockArrayOutput) Index(i pulumi.IntInput) ScriptActivityScriptBlockOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScriptActivityScriptBlock {
		return vs[0].([]ScriptActivityScriptBlock)[vs[1].(int)]
	}).(ScriptActivityScriptBlockOutput)
}

// Script block of scripts.
type ScriptActivityScriptBlockResponse struct {
	// Array of script parameters. Type: array.
	Parameters []ScriptActivityParameterResponse `pulumi:"parameters"`
	// The query text. Type: string (or Expression with resultType string).
	Text interface{} `pulumi:"text"`
	// The type of the query. Type: string.
	Type string `pulumi:"type"`
}

// Script block of scripts.
type ScriptActivityScriptBlockResponseOutput struct{ *pulumi.OutputState }

func (ScriptActivityScriptBlockResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptActivityScriptBlockResponse)(nil)).Elem()
}

func (o ScriptActivityScriptBlockResponseOutput) ToScriptActivityScriptBlockResponseOutput() ScriptActivityScriptBlockResponseOutput {
	return o
}

func (o ScriptActivityScriptBlockResponseOutput) ToScriptActivityScriptBlockResponseOutputWithContext(ctx context.Context) ScriptActivityScriptBlockResponseOutput {
	return o
}

// Array of script parameters. Type: array.
func (o ScriptActivityScriptBlockResponseOutput) Parameters() ScriptActivityParameterResponseArrayOutput {
	return o.ApplyT(func(v ScriptActivityScriptBlockResponse) []ScriptActivityParameterResponse { return v.Parameters }).(ScriptActivityParameterResponseArrayOutput)
}

// The query text. Type: string (or Expression with resultType string).
func (o ScriptActivityScriptBlockResponseOutput) Text() pulumi.AnyOutput {
	return o.ApplyT(func(v ScriptActivityScriptBlockResponse) interface{} { return v.Text }).(pulumi.AnyOutput)
}

// The type of the query. Type: string.
func (o ScriptActivityScriptBlockResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptActivityScriptBlockResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ScriptActivityScriptBlockResponseArrayOutput struct{ *pulumi.OutputState }

func (ScriptActivityScriptBlockResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScriptActivityScriptBlockResponse)(nil)).Elem()
}

func (o ScriptActivityScriptBlockResponseArrayOutput) ToScriptActivityScriptBlockResponseArrayOutput() ScriptActivityScriptBlockResponseArrayOutput {
	return o
}

func (o ScriptActivityScriptBlockResponseArrayOutput) ToScriptActivityScriptBlockResponseArrayOutputWithContext(ctx context.Context) ScriptActivityScriptBlockResponseArrayOutput {
	return o
}

func (o ScriptActivityScriptBlockResponseArrayOutput) Index(i pulumi.IntInput) ScriptActivityScriptBlockResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScriptActivityScriptBlockResponse {
		return vs[0].([]ScriptActivityScriptBlockResponse)[vs[1].(int)]
	}).(ScriptActivityScriptBlockResponseOutput)
}

// Log settings of script activity.
type ScriptActivityTypePropertiesLogSettings struct {
	// The destination of logs. Type: string.
	LogDestination string `pulumi:"logDestination"`
	// Log location settings customer needs to provide when enabling log.
	LogLocationSettings *LogLocationSettings `pulumi:"logLocationSettings"`
}

// ScriptActivityTypePropertiesLogSettingsInput is an input type that accepts ScriptActivityTypePropertiesLogSettingsArgs and ScriptActivityTypePropertiesLogSettingsOutput values.
// You can construct a concrete instance of `ScriptActivityTypePropertiesLogSettingsInput` via:
//
//	ScriptActivityTypePropertiesLogSettingsArgs{...}
type ScriptActivityTypePropertiesLogSettingsInput interface {
	pulumi.Input

	ToScriptActivityTypePropertiesLogSettingsOutput() ScriptActivityTypePropertiesLogSettingsOutput
	ToScriptActivityTypePropertiesLogSettingsOutputWithContext(context.Context) ScriptActivityTypePropertiesLogSettingsOutput
}

// Log settings of script activity.
type ScriptActivityTypePropertiesLogSettingsArgs struct {
	// The destination of logs. Type: string.
	LogDestination pulumi.StringInput `pulumi:"logDestination"`
	// Log location settings customer needs to provide when enabling log.
	LogLocationSettings LogLocationSettingsPtrInput `pulumi:"logLocationSettings"`
}

func (ScriptActivityTypePropertiesLogSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptActivityTypePropertiesLogSettings)(nil)).Elem()
}

func (i ScriptActivityTypePropertiesLogSettingsArgs) ToScriptActivityTypePropertiesLogSettingsOutput() ScriptActivityTypePropertiesLogSettingsOutput {
	return i.ToScriptActivityTypePropertiesLogSettingsOutputWithContext(context.Background())
}

func (i ScriptActivityTypePropertiesLogSettingsArgs) ToScriptActivityTypePropertiesLogSettingsOutputWithContext(ctx context.Context) ScriptActivityTypePropertiesLogSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptActivityTypePropertiesLogSettingsOutput)
}

func (i ScriptActivityTypePropertiesLogSettingsArgs) ToScriptActivityTypePropertiesLogSettingsPtrOutput() ScriptActivityTypePropertiesLogSettingsPtrOutput {
	return i.ToScriptActivityTypePropertiesLogSettingsPtrOutputWithContext(context.Background())
}

func (i ScriptActivityTypePropertiesLogSettingsArgs) ToScriptActivityTypePropertiesLogSettingsPtrOutputWithContext(ctx context.Context) ScriptActivityTypePropertiesLogSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptActivityTypePropertiesLogSettingsOutput).ToScriptActivityTypePropertiesLogSettingsPtrOutputWithContext(ctx)
}

// ScriptActivityTypePropertiesLogSettingsPtrInput is an input type that accepts ScriptActivityTypePropertiesLogSettingsArgs, ScriptActivityTypePropertiesLogSettingsPtr and ScriptActivityTypePropertiesLogSettingsPtrOutput values.
// You can construct a concrete instance of `ScriptActivityTypePropertiesLogSettingsPtrInput` via:
//
//	        ScriptActivityTypePropertiesLogSettingsArgs{...}
//
//	or:
//
//	        nil
type ScriptActivityTypePropertiesLogSettingsPtrInput interface {
	pulumi.Input

	ToScriptActivityTypePropertiesLogSettingsPtrOutput() ScriptActivityTypePropertiesLogSettingsPtrOutput
	ToScriptActivityTypePropertiesLogSettingsPtrOutputWithContext(context.Context) ScriptActivityTypePropertiesLogSettingsPtrOutput
}

type scriptActivityTypePropertiesLogSettingsPtrType ScriptActivityTypePropertiesLogSettingsArgs

func ScriptActivityTypePropertiesLogSettingsPtr(v *ScriptActivityTypePropertiesLogSettingsArgs) ScriptActivityTypePropertiesLogSettingsPtrInput {
	return (*scriptActivityTypePropertiesLogSettingsPtrType)(v)
}

func (*scriptActivityTypePropertiesLogSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScriptActivityTypePropertiesLogSettings)(nil)).Elem()
}

func (i *scriptActivityTypePropertiesLogSettingsPtrType) ToScriptActivityTypePropertiesLogSettingsPtrOutput() ScriptActivityTypePropertiesLogSettingsPtrOutput {
	return i.ToScriptActivityTypePropertiesLogSettingsPtrOutputWithContext(context.Background())
}

func (i *scriptActivityTypePropertiesLogSettingsPtrType) ToScriptActivityTypePropertiesLogSettingsPtrOutputWithContext(ctx context.Context) ScriptActivityTypePropertiesLogSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptActivityTypePropertiesLogSettingsPtrOutput)
}

// Log settings of script activity.
type ScriptActivityTypePropertiesLogSettingsOutput struct{ *pulumi.OutputState }

func (ScriptActivityTypePropertiesLogSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptActivityTypePropertiesLogSettings)(nil)).Elem()
}

func (o ScriptActivityTypePropertiesLogSettingsOutput) ToScriptActivityTypePropertiesLogSettingsOutput() ScriptActivityTypePropertiesLogSettingsOutput {
	return o
}

func (o ScriptActivityTypePropertiesLogSettingsOutput) ToScriptActivityTypePropertiesLogSettingsOutputWithContext(ctx context.Context) ScriptActivityTypePropertiesLogSettingsOutput {
	return o
}

func (o ScriptActivityTypePropertiesLogSettingsOutput) ToScriptActivityTypePropertiesLogSettingsPtrOutput() ScriptActivityTypePropertiesLogSettingsPtrOutput {
	return o.ToScriptActivityTypePropertiesLogSettingsPtrOutputWithContext(context.Background())
}

func (o ScriptActivityTypePropertiesLogSettingsOutput) ToScriptActivityTypePropertiesLogSettingsPtrOutputWithContext(ctx context.Context) ScriptActivityTypePropertiesLogSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScriptActivityTypePropertiesLogSettings) *ScriptActivityTypePropertiesLogSettings {
		return &v
	}).(ScriptActivityTypePropertiesLogSettingsPtrOutput)
}

// The destination of logs. Type: string.
func (o ScriptActivityTypePropertiesLogSettingsOutput) LogDestination() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptActivityTypePropertiesLogSettings) string { return v.LogDestination }).(pulumi.StringOutput)
}

// Log location settings customer needs to provide when enabling log.
func (o ScriptActivityTypePropertiesLogSettingsOutput) LogLocationSettings() LogLocationSettingsPtrOutput {
	return o.ApplyT(func(v ScriptActivityTypePropertiesLogSettings) *LogLocationSettings { return v.LogLocationSettings }).(LogLocationSettingsPtrOutput)
}

type ScriptActivityTypePropertiesLogSettingsPtrOutput struct{ *pulumi.OutputState }

func (ScriptActivityTypePropertiesLogSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScriptActivityTypePropertiesLogSettings)(nil)).Elem()
}

func (o ScriptActivityTypePropertiesLogSettingsPtrOutput) ToScriptActivityTypePropertiesLogSettingsPtrOutput() ScriptActivityTypePropertiesLogSettingsPtrOutput {
	return o
}

func (o ScriptActivityTypePropertiesLogSettingsPtrOutput) ToScriptActivityTypePropertiesLogSettingsPtrOutputWithContext(ctx context.Context) ScriptActivityTypePropertiesLogSettingsPtrOutput {
	return o
}

func (o ScriptActivityTypePropertiesLogSettingsPtrOutput) Elem() ScriptActivityTypePropertiesLogSettingsOutput {
	return o.ApplyT(func(v *ScriptActivityTypePropertiesLogSettings) ScriptActivityTypePropertiesLogSettings {
		if v != nil {
			return *v
		}
		var ret ScriptActivityTypePropertiesLogSettings
		return ret
	}).(ScriptActivityTypePropertiesLogSettingsOutput)
}

// The destination of logs. Type: string.
func (o ScriptActivityTypePropertiesLogSettingsPtrOutput) LogDestination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScriptActivityTypePropertiesLogSettings) *string {
		if v == nil {
			return nil
		}
		return &v.LogDestination
	}).(pulumi.StringPtrOutput)
}

// Log location settings customer needs to provide when enabling log.
func (o ScriptActivityTypePropertiesLogSettingsPtrOutput) LogLocationSettings() LogLocationSettingsPtrOutput {
	return o.ApplyT(func(v *ScriptActivityTypePropertiesLogSettings) *LogLocationSettings {
		if v == nil {
			return nil
		}
		return v.LogLocationSettings
	}).(LogLocationSettingsPtrOutput)
}

// Log settings of script activity.
type ScriptActivityTypePropertiesResponseLogSettings struct {
	// The destination of logs. Type: string.
	LogDestination string `pulumi:"logDestination"`
	// Log location settings customer needs to provide when enabling log.
	LogLocationSettings *LogLocationSettingsResponse `pulumi:"logLocationSettings"`
}

// Log settings of script activity.
type ScriptActivityTypePropertiesResponseLogSettingsOutput struct{ *pulumi.OutputState }

func (ScriptActivityTypePropertiesResponseLogSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptActivityTypePropertiesResponseLogSettings)(nil)).Elem()
}

func (o ScriptActivityTypePropertiesResponseLogSettingsOutput) ToScriptActivityTypePropertiesResponseLogSettingsOutput() ScriptActivityTypePropertiesResponseLogSettingsOutput {
	return o
}

func (o ScriptActivityTypePropertiesResponseLogSettingsOutput) ToScriptActivityTypePropertiesResponseLogSettingsOutputWithContext(ctx context.Context) ScriptActivityTypePropertiesResponseLogSettingsOutput {
	return o
}

// The destination of logs. Type: string.
func (o ScriptActivityTypePropertiesResponseLogSettingsOutput) LogDestination() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptActivityTypePropertiesResponseLogSettings) string { return v.LogDestination }).(pulumi.StringOutput)
}

// Log location settings customer needs to provide when enabling log.
func (o ScriptActivityTypePropertiesResponseLogSettingsOutput) LogLocationSettings() LogLocationSettingsResponsePtrOutput {
	return o.ApplyT(func(v ScriptActivityTypePropertiesResponseLogSettings) *LogLocationSettingsResponse {
		return v.LogLocationSettings
	}).(LogLocationSettingsResponsePtrOutput)
}

type ScriptActivityTypePropertiesResponseLogSettingsPtrOutput struct{ *pulumi.OutputState }

func (ScriptActivityTypePropertiesResponseLogSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScriptActivityTypePropertiesResponseLogSettings)(nil)).Elem()
}

func (o ScriptActivityTypePropertiesResponseLogSettingsPtrOutput) ToScriptActivityTypePropertiesResponseLogSettingsPtrOutput() ScriptActivityTypePropertiesResponseLogSettingsPtrOutput {
	return o
}

func (o ScriptActivityTypePropertiesResponseLogSettingsPtrOutput) ToScriptActivityTypePropertiesResponseLogSettingsPtrOutputWithContext(ctx context.Context) ScriptActivityTypePropertiesResponseLogSettingsPtrOutput {
	return o
}

func (o ScriptActivityTypePropertiesResponseLogSettingsPtrOutput) Elem() ScriptActivityTypePropertiesResponseLogSettingsOutput {
	return o.ApplyT(func(v *ScriptActivityTypePropertiesResponseLogSettings) ScriptActivityTypePropertiesResponseLogSettings {
		if v != nil {
			return *v
		}
		var ret ScriptActivityTypePropertiesResponseLogSettings
		return ret
	}).(ScriptActivityTypePropertiesResponseLogSettingsOutput)
}

// The destination of logs. Type: string.
func (o ScriptActivityTypePropertiesResponseLogSettingsPtrOutput) LogDestination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScriptActivityTypePropertiesResponseLogSettings) *string {
		if v == nil {
			return nil
		}
		return &v.LogDestination
	}).(pulumi.StringPtrOutput)
}

// Log location settings customer needs to provide when enabling log.
func (o ScriptActivityTypePropertiesResponseLogSettingsPtrOutput) LogLocationSettings() LogLocationSettingsResponsePtrOutput {
	return o.ApplyT(func(v *ScriptActivityTypePropertiesResponseLogSettings) *LogLocationSettingsResponse {
		if v == nil {
			return nil
		}
		return v.LogLocationSettings
	}).(LogLocationSettingsResponsePtrOutput)
}

// Execution policy for an activity that supports secure input and output.
type SecureInputOutputPolicy struct {
	// When set to true, Input from activity is considered as secure and will not be logged to monitoring.
	SecureInput *bool `pulumi:"secureInput"`
	// When set to true, Output from activity is considered as secure and will not be logged to monitoring.
	SecureOutput *bool `pulumi:"secureOutput"`
}

// SecureInputOutputPolicyInput is an input type that accepts SecureInputOutputPolicyArgs and SecureInputOutputPolicyOutput values.
// You can construct a concrete instance of `SecureInputOutputPolicyInput` via:
//
//	SecureInputOutputPolicyArgs{...}
type SecureInputOutputPolicyInput interface {
	pulumi.Input

	ToSecureInputOutputPolicyOutput() SecureInputOutputPolicyOutput
	ToSecureInputOutputPolicyOutputWithContext(context.Context) SecureInputOutputPolicyOutput
}

// Execution policy for an activity that supports secure input and output.
type SecureInputOutputPolicyArgs struct {
	// When set to true, Input from activity is considered as secure and will not be logged to monitoring.
	SecureInput pulumi.BoolPtrInput `pulumi:"secureInput"`
	// When set to true, Output from activity is considered as secure and will not be logged to monitoring.
	SecureOutput pulumi.BoolPtrInput `pulumi:"secureOutput"`
}

func (SecureInputOutputPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecureInputOutputPolicy)(nil)).Elem()
}

func (i SecureInputOutputPolicyArgs) ToSecureInputOutputPolicyOutput() SecureInputOutputPolicyOutput {
	return i.ToSecureInputOutputPolicyOutputWithContext(context.Background())
}

func (i SecureInputOutputPolicyArgs) ToSecureInputOutputPolicyOutputWithContext(ctx context.Context) SecureInputOutputPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecureInputOutputPolicyOutput)
}

func (i SecureInputOutputPolicyArgs) ToSecureInputOutputPolicyPtrOutput() SecureInputOutputPolicyPtrOutput {
	return i.ToSecureInputOutputPolicyPtrOutputWithContext(context.Background())
}

func (i SecureInputOutputPolicyArgs) ToSecureInputOutputPolicyPtrOutputWithContext(ctx context.Context) SecureInputOutputPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecureInputOutputPolicyOutput).ToSecureInputOutputPolicyPtrOutputWithContext(ctx)
}

// SecureInputOutputPolicyPtrInput is an input type that accepts SecureInputOutputPolicyArgs, SecureInputOutputPolicyPtr and SecureInputOutputPolicyPtrOutput values.
// You can construct a concrete instance of `SecureInputOutputPolicyPtrInput` via:
//
//	        SecureInputOutputPolicyArgs{...}
//
//	or:
//
//	        nil
type SecureInputOutputPolicyPtrInput interface {
	pulumi.Input

	ToSecureInputOutputPolicyPtrOutput() SecureInputOutputPolicyPtrOutput
	ToSecureInputOutputPolicyPtrOutputWithContext(context.Context) SecureInputOutputPolicyPtrOutput
}

type secureInputOutputPolicyPtrType SecureInputOutputPolicyArgs

func SecureInputOutputPolicyPtr(v *SecureInputOutputPolicyArgs) SecureInputOutputPolicyPtrInput {
	return (*secureInputOutputPolicyPtrType)(v)
}

func (*secureInputOutputPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecureInputOutputPolicy)(nil)).Elem()
}

func (i *secureInputOutputPolicyPtrType) ToSecureInputOutputPolicyPtrOutput() SecureInputOutputPolicyPtrOutput {
	return i.ToSecureInputOutputPolicyPtrOutputWithContext(context.Background())
}

func (i *secureInputOutputPolicyPtrType) ToSecureInputOutputPolicyPtrOutputWithContext(ctx context.Context) SecureInputOutputPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecureInputOutputPolicyPtrOutput)
}

// Execution policy for an activity that supports secure input and output.
type SecureInputOutputPolicyOutput struct{ *pulumi.OutputState }

func (SecureInputOutputPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecureInputOutputPolicy)(nil)).Elem()
}

func (o SecureInputOutputPolicyOutput) ToSecureInputOutputPolicyOutput() SecureInputOutputPolicyOutput {
	return o
}

func (o SecureInputOutputPolicyOutput) ToSecureInputOutputPolicyOutputWithContext(ctx context.Context) SecureInputOutputPolicyOutput {
	return o
}

func (o SecureInputOutputPolicyOutput) ToSecureInputOutputPolicyPtrOutput() SecureInputOutputPolicyPtrOutput {
	return o.ToSecureInputOutputPolicyPtrOutputWithContext(context.Background())
}

func (o SecureInputOutputPolicyOutput) ToSecureInputOutputPolicyPtrOutputWithContext(ctx context.Context) SecureInputOutputPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecureInputOutputPolicy) *SecureInputOutputPolicy {
		return &v
	}).(SecureInputOutputPolicyPtrOutput)
}

// When set to true, Input from activity is considered as secure and will not be logged to monitoring.
func (o SecureInputOutputPolicyOutput) SecureInput() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecureInputOutputPolicy) *bool { return v.SecureInput }).(pulumi.BoolPtrOutput)
}

// When set to true, Output from activity is considered as secure and will not be logged to monitoring.
func (o SecureInputOutputPolicyOutput) SecureOutput() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecureInputOutputPolicy) *bool { return v.SecureOutput }).(pulumi.BoolPtrOutput)
}

type SecureInputOutputPolicyPtrOutput struct{ *pulumi.OutputState }

func (SecureInputOutputPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecureInputOutputPolicy)(nil)).Elem()
}

func (o SecureInputOutputPolicyPtrOutput) ToSecureInputOutputPolicyPtrOutput() SecureInputOutputPolicyPtrOutput {
	return o
}

func (o SecureInputOutputPolicyPtrOutput) ToSecureInputOutputPolicyPtrOutputWithContext(ctx context.Context) SecureInputOutputPolicyPtrOutput {
	return o
}

func (o SecureInputOutputPolicyPtrOutput) Elem() SecureInputOutputPolicyOutput {
	return o.ApplyT(func(v *SecureInputOutputPolicy) SecureInputOutputPolicy {
		if v != nil {
			return *v
		}
		var ret SecureInputOutputPolicy
		return ret
	}).(SecureInputOutputPolicyOutput)
}

// When set to true, Input from activity is considered as secure and will not be logged to monitoring.
func (o SecureInputOutputPolicyPtrOutput) SecureInput() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecureInputOutputPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.SecureInput
	}).(pulumi.BoolPtrOutput)
}

// When set to true, Output from activity is considered as secure and will not be logged to monitoring.
func (o SecureInputOutputPolicyPtrOutput) SecureOutput() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecureInputOutputPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.SecureOutput
	}).(pulumi.BoolPtrOutput)
}

// Execution policy for an activity that supports secure input and output.
type SecureInputOutputPolicyResponse struct {
	// When set to true, Input from activity is considered as secure and will not be logged to monitoring.
	SecureInput *bool `pulumi:"secureInput"`
	// When set to true, Output from activity is considered as secure and will not be logged to monitoring.
	SecureOutput *bool `pulumi:"secureOutput"`
}

// Execution policy for an activity that supports secure input and output.
type SecureInputOutputPolicyResponseOutput struct{ *pulumi.OutputState }

func (SecureInputOutputPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecureInputOutputPolicyResponse)(nil)).Elem()
}

func (o SecureInputOutputPolicyResponseOutput) ToSecureInputOutputPolicyResponseOutput() SecureInputOutputPolicyResponseOutput {
	return o
}

func (o SecureInputOutputPolicyResponseOutput) ToSecureInputOutputPolicyResponseOutputWithContext(ctx context.Context) SecureInputOutputPolicyResponseOutput {
	return o
}

// When set to true, Input from activity is considered as secure and will not be logged to monitoring.
func (o SecureInputOutputPolicyResponseOutput) SecureInput() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecureInputOutputPolicyResponse) *bool { return v.SecureInput }).(pulumi.BoolPtrOutput)
}

// When set to true, Output from activity is considered as secure and will not be logged to monitoring.
func (o SecureInputOutputPolicyResponseOutput) SecureOutput() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecureInputOutputPolicyResponse) *bool { return v.SecureOutput }).(pulumi.BoolPtrOutput)
}

type SecureInputOutputPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (SecureInputOutputPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecureInputOutputPolicyResponse)(nil)).Elem()
}

func (o SecureInputOutputPolicyResponsePtrOutput) ToSecureInputOutputPolicyResponsePtrOutput() SecureInputOutputPolicyResponsePtrOutput {
	return o
}

func (o SecureInputOutputPolicyResponsePtrOutput) ToSecureInputOutputPolicyResponsePtrOutputWithContext(ctx context.Context) SecureInputOutputPolicyResponsePtrOutput {
	return o
}

func (o SecureInputOutputPolicyResponsePtrOutput) Elem() SecureInputOutputPolicyResponseOutput {
	return o.ApplyT(func(v *SecureInputOutputPolicyResponse) SecureInputOutputPolicyResponse {
		if v != nil {
			return *v
		}
		var ret SecureInputOutputPolicyResponse
		return ret
	}).(SecureInputOutputPolicyResponseOutput)
}

// When set to true, Input from activity is considered as secure and will not be logged to monitoring.
func (o SecureInputOutputPolicyResponsePtrOutput) SecureInput() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecureInputOutputPolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return v.SecureInput
	}).(pulumi.BoolPtrOutput)
}

// When set to true, Output from activity is considered as secure and will not be logged to monitoring.
func (o SecureInputOutputPolicyResponsePtrOutput) SecureOutput() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecureInputOutputPolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return v.SecureOutput
	}).(pulumi.BoolPtrOutput)
}

// Azure Data Factory secure string definition. The string value will be masked with asterisks '*' during Get or List API calls.
type SecureString struct {
	// Type of the secret.
	// Expected value is 'SecureString'.
	Type string `pulumi:"type"`
	// Value of secure string.
	Value string `pulumi:"value"`
}

// SecureStringInput is an input type that accepts SecureStringArgs and SecureStringOutput values.
// You can construct a concrete instance of `SecureStringInput` via:
//
//	SecureStringArgs{...}
type SecureStringInput interface {
	pulumi.Input

	ToSecureStringOutput() SecureStringOutput
	ToSecureStringOutputWithContext(context.Context) SecureStringOutput
}

// Azure Data Factory secure string definition. The string value will be masked with asterisks '*' during Get or List API calls.
type SecureStringArgs struct {
	// Type of the secret.
	// Expected value is 'SecureString'.
	Type pulumi.StringInput `pulumi:"type"`
	// Value of secure string.
	Value pulumi.StringInput `pulumi:"value"`
}

func (SecureStringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecureString)(nil)).Elem()
}

func (i SecureStringArgs) ToSecureStringOutput() SecureStringOutput {
	return i.ToSecureStringOutputWithContext(context.Background())
}

func (i SecureStringArgs) ToSecureStringOutputWithContext(ctx context.Context) SecureStringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecureStringOutput)
}

func (i SecureStringArgs) ToSecureStringPtrOutput() SecureStringPtrOutput {
	return i.ToSecureStringPtrOutputWithContext(context.Background())
}

func (i SecureStringArgs) ToSecureStringPtrOutputWithContext(ctx context.Context) SecureStringPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecureStringOutput).ToSecureStringPtrOutputWithContext(ctx)
}

// SecureStringPtrInput is an input type that accepts SecureStringArgs, SecureStringPtr and SecureStringPtrOutput values.
// You can construct a concrete instance of `SecureStringPtrInput` via:
//
//	        SecureStringArgs{...}
//
//	or:
//
//	        nil
type SecureStringPtrInput interface {
	pulumi.Input

	ToSecureStringPtrOutput() SecureStringPtrOutput
	ToSecureStringPtrOutputWithContext(context.Context) SecureStringPtrOutput
}

type secureStringPtrType SecureStringArgs

func SecureStringPtr(v *SecureStringArgs) SecureStringPtrInput {
	return (*secureStringPtrType)(v)
}

func (*secureStringPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecureString)(nil)).Elem()
}

func (i *secureStringPtrType) ToSecureStringPtrOutput() SecureStringPtrOutput {
	return i.ToSecureStringPtrOutputWithContext(context.Background())
}

func (i *secureStringPtrType) ToSecureStringPtrOutputWithContext(ctx context.Context) SecureStringPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecureStringPtrOutput)
}

// Azure Data Factory secure string definition. The string value will be masked with asterisks '*' during Get or List API calls.
type SecureStringOutput struct{ *pulumi.OutputState }

func (SecureStringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecureString)(nil)).Elem()
}

func (o SecureStringOutput) ToSecureStringOutput() SecureStringOutput {
	return o
}

func (o SecureStringOutput) ToSecureStringOutputWithContext(ctx context.Context) SecureStringOutput {
	return o
}

func (o SecureStringOutput) ToSecureStringPtrOutput() SecureStringPtrOutput {
	return o.ToSecureStringPtrOutputWithContext(context.Background())
}

func (o SecureStringOutput) ToSecureStringPtrOutputWithContext(ctx context.Context) SecureStringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecureString) *SecureString {
		return &v
	}).(SecureStringPtrOutput)
}

// Type of the secret.
// Expected value is 'SecureString'.
func (o SecureStringOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SecureString) string { return v.Type }).(pulumi.StringOutput)
}

// Value of secure string.
func (o SecureStringOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SecureString) string { return v.Value }).(pulumi.StringOutput)
}

type SecureStringPtrOutput struct{ *pulumi.OutputState }

func (SecureStringPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecureString)(nil)).Elem()
}

func (o SecureStringPtrOutput) ToSecureStringPtrOutput() SecureStringPtrOutput {
	return o
}

func (o SecureStringPtrOutput) ToSecureStringPtrOutputWithContext(ctx context.Context) SecureStringPtrOutput {
	return o
}

func (o SecureStringPtrOutput) Elem() SecureStringOutput {
	return o.ApplyT(func(v *SecureString) SecureString {
		if v != nil {
			return *v
		}
		var ret SecureString
		return ret
	}).(SecureStringOutput)
}

// Type of the secret.
// Expected value is 'SecureString'.
func (o SecureStringPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecureString) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Value of secure string.
func (o SecureStringPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecureString) *string {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.StringPtrOutput)
}

// Azure Data Factory secure string definition. The string value will be masked with asterisks '*' during Get or List API calls.
type SecureStringResponse struct {
	// Type of the secret.
	// Expected value is 'SecureString'.
	Type string `pulumi:"type"`
	// Value of secure string.
	Value string `pulumi:"value"`
}

// Azure Data Factory secure string definition. The string value will be masked with asterisks '*' during Get or List API calls.
type SecureStringResponseOutput struct{ *pulumi.OutputState }

func (SecureStringResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecureStringResponse)(nil)).Elem()
}

func (o SecureStringResponseOutput) ToSecureStringResponseOutput() SecureStringResponseOutput {
	return o
}

func (o SecureStringResponseOutput) ToSecureStringResponseOutputWithContext(ctx context.Context) SecureStringResponseOutput {
	return o
}

// Type of the secret.
// Expected value is 'SecureString'.
func (o SecureStringResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SecureStringResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Value of secure string.
func (o SecureStringResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SecureStringResponse) string { return v.Value }).(pulumi.StringOutput)
}

type SecureStringResponsePtrOutput struct{ *pulumi.OutputState }

func (SecureStringResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecureStringResponse)(nil)).Elem()
}

func (o SecureStringResponsePtrOutput) ToSecureStringResponsePtrOutput() SecureStringResponsePtrOutput {
	return o
}

func (o SecureStringResponsePtrOutput) ToSecureStringResponsePtrOutputWithContext(ctx context.Context) SecureStringResponsePtrOutput {
	return o
}

func (o SecureStringResponsePtrOutput) Elem() SecureStringResponseOutput {
	return o.ApplyT(func(v *SecureStringResponse) SecureStringResponse {
		if v != nil {
			return *v
		}
		var ret SecureStringResponse
		return ret
	}).(SecureStringResponseOutput)
}

// Type of the secret.
// Expected value is 'SecureString'.
func (o SecureStringResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecureStringResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Value of secure string.
func (o SecureStringResponsePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecureStringResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.StringPtrOutput)
}

// Self referenced tumbling window trigger dependency.
type SelfDependencyTumblingWindowTriggerReference struct {
	// Timespan applied to the start time of a tumbling window when evaluating dependency.
	Offset string `pulumi:"offset"`
	// The size of the window when evaluating the dependency. If undefined the frequency of the tumbling window will be used.
	Size *string `pulumi:"size"`
	// The type of dependency reference.
	// Expected value is 'SelfDependencyTumblingWindowTriggerReference'.
	Type string `pulumi:"type"`
}

// SelfDependencyTumblingWindowTriggerReferenceInput is an input type that accepts SelfDependencyTumblingWindowTriggerReferenceArgs and SelfDependencyTumblingWindowTriggerReferenceOutput values.
// You can construct a concrete instance of `SelfDependencyTumblingWindowTriggerReferenceInput` via:
//
//	SelfDependencyTumblingWindowTriggerReferenceArgs{...}
type SelfDependencyTumblingWindowTriggerReferenceInput interface {
	pulumi.Input

	ToSelfDependencyTumblingWindowTriggerReferenceOutput() SelfDependencyTumblingWindowTriggerReferenceOutput
	ToSelfDependencyTumblingWindowTriggerReferenceOutputWithContext(context.Context) SelfDependencyTumblingWindowTriggerReferenceOutput
}

// Self referenced tumbling window trigger dependency.
type SelfDependencyTumblingWindowTriggerReferenceArgs struct {
	// Timespan applied to the start time of a tumbling window when evaluating dependency.
	Offset pulumi.StringInput `pulumi:"offset"`
	// The size of the window when evaluating the dependency. If undefined the frequency of the tumbling window will be used.
	Size pulumi.StringPtrInput `pulumi:"size"`
	// The type of dependency reference.
	// Expected value is 'SelfDependencyTumblingWindowTriggerReference'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SelfDependencyTumblingWindowTriggerReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfDependencyTumblingWindowTriggerReference)(nil)).Elem()
}

func (i SelfDependencyTumblingWindowTriggerReferenceArgs) ToSelfDependencyTumblingWindowTriggerReferenceOutput() SelfDependencyTumblingWindowTriggerReferenceOutput {
	return i.ToSelfDependencyTumblingWindowTriggerReferenceOutputWithContext(context.Background())
}

func (i SelfDependencyTumblingWindowTriggerReferenceArgs) ToSelfDependencyTumblingWindowTriggerReferenceOutputWithContext(ctx context.Context) SelfDependencyTumblingWindowTriggerReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfDependencyTumblingWindowTriggerReferenceOutput)
}

// Self referenced tumbling window trigger dependency.
type SelfDependencyTumblingWindowTriggerReferenceOutput struct{ *pulumi.OutputState }

func (SelfDependencyTumblingWindowTriggerReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfDependencyTumblingWindowTriggerReference)(nil)).Elem()
}

func (o SelfDependencyTumblingWindowTriggerReferenceOutput) ToSelfDependencyTumblingWindowTriggerReferenceOutput() SelfDependencyTumblingWindowTriggerReferenceOutput {
	return o
}

func (o SelfDependencyTumblingWindowTriggerReferenceOutput) ToSelfDependencyTumblingWindowTriggerReferenceOutputWithContext(ctx context.Context) SelfDependencyTumblingWindowTriggerReferenceOutput {
	return o
}

// Timespan applied to the start time of a tumbling window when evaluating dependency.
func (o SelfDependencyTumblingWindowTriggerReferenceOutput) Offset() pulumi.StringOutput {
	return o.ApplyT(func(v SelfDependencyTumblingWindowTriggerReference) string { return v.Offset }).(pulumi.StringOutput)
}

// The size of the window when evaluating the dependency. If undefined the frequency of the tumbling window will be used.
func (o SelfDependencyTumblingWindowTriggerReferenceOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SelfDependencyTumblingWindowTriggerReference) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// The type of dependency reference.
// Expected value is 'SelfDependencyTumblingWindowTriggerReference'.
func (o SelfDependencyTumblingWindowTriggerReferenceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SelfDependencyTumblingWindowTriggerReference) string { return v.Type }).(pulumi.StringOutput)
}

// Self referenced tumbling window trigger dependency.
type SelfDependencyTumblingWindowTriggerReferenceResponse struct {
	// Timespan applied to the start time of a tumbling window when evaluating dependency.
	Offset string `pulumi:"offset"`
	// The size of the window when evaluating the dependency. If undefined the frequency of the tumbling window will be used.
	Size *string `pulumi:"size"`
	// The type of dependency reference.
	// Expected value is 'SelfDependencyTumblingWindowTriggerReference'.
	Type string `pulumi:"type"`
}

// Self referenced tumbling window trigger dependency.
type SelfDependencyTumblingWindowTriggerReferenceResponseOutput struct{ *pulumi.OutputState }

func (SelfDependencyTumblingWindowTriggerReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfDependencyTumblingWindowTriggerReferenceResponse)(nil)).Elem()
}

func (o SelfDependencyTumblingWindowTriggerReferenceResponseOutput) ToSelfDependencyTumblingWindowTriggerReferenceResponseOutput() SelfDependencyTumblingWindowTriggerReferenceResponseOutput {
	return o
}

func (o SelfDependencyTumblingWindowTriggerReferenceResponseOutput) ToSelfDependencyTumblingWindowTriggerReferenceResponseOutputWithContext(ctx context.Context) SelfDependencyTumblingWindowTriggerReferenceResponseOutput {
	return o
}

// Timespan applied to the start time of a tumbling window when evaluating dependency.
func (o SelfDependencyTumblingWindowTriggerReferenceResponseOutput) Offset() pulumi.StringOutput {
	return o.ApplyT(func(v SelfDependencyTumblingWindowTriggerReferenceResponse) string { return v.Offset }).(pulumi.StringOutput)
}

// The size of the window when evaluating the dependency. If undefined the frequency of the tumbling window will be used.
func (o SelfDependencyTumblingWindowTriggerReferenceResponseOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SelfDependencyTumblingWindowTriggerReferenceResponse) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// The type of dependency reference.
// Expected value is 'SelfDependencyTumblingWindowTriggerReference'.
func (o SelfDependencyTumblingWindowTriggerReferenceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SelfDependencyTumblingWindowTriggerReferenceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Self-hosted integration runtime.
type SelfHostedIntegrationRuntime struct {
	// Integration runtime description.
	Description *string `pulumi:"description"`
	// The base definition of a linked integration runtime.
	LinkedInfo interface{} `pulumi:"linkedInfo"`
	// An alternative option to ensure interactive authoring function when your self-hosted integration runtime is unable to establish a connection with Azure Relay.
	SelfContainedInteractiveAuthoringEnabled *bool `pulumi:"selfContainedInteractiveAuthoringEnabled"`
	// The type of integration runtime.
	// Expected value is 'SelfHosted'.
	Type string `pulumi:"type"`
}

// SelfHostedIntegrationRuntimeInput is an input type that accepts SelfHostedIntegrationRuntimeArgs and SelfHostedIntegrationRuntimeOutput values.
// You can construct a concrete instance of `SelfHostedIntegrationRuntimeInput` via:
//
//	SelfHostedIntegrationRuntimeArgs{...}
type SelfHostedIntegrationRuntimeInput interface {
	pulumi.Input

	ToSelfHostedIntegrationRuntimeOutput() SelfHostedIntegrationRuntimeOutput
	ToSelfHostedIntegrationRuntimeOutputWithContext(context.Context) SelfHostedIntegrationRuntimeOutput
}

// Self-hosted integration runtime.
type SelfHostedIntegrationRuntimeArgs struct {
	// Integration runtime description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The base definition of a linked integration runtime.
	LinkedInfo pulumi.Input `pulumi:"linkedInfo"`
	// An alternative option to ensure interactive authoring function when your self-hosted integration runtime is unable to establish a connection with Azure Relay.
	SelfContainedInteractiveAuthoringEnabled pulumi.BoolPtrInput `pulumi:"selfContainedInteractiveAuthoringEnabled"`
	// The type of integration runtime.
	// Expected value is 'SelfHosted'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SelfHostedIntegrationRuntimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfHostedIntegrationRuntime)(nil)).Elem()
}

func (i SelfHostedIntegrationRuntimeArgs) ToSelfHostedIntegrationRuntimeOutput() SelfHostedIntegrationRuntimeOutput {
	return i.ToSelfHostedIntegrationRuntimeOutputWithContext(context.Background())
}

func (i SelfHostedIntegrationRuntimeArgs) ToSelfHostedIntegrationRuntimeOutputWithContext(ctx context.Context) SelfHostedIntegrationRuntimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfHostedIntegrationRuntimeOutput)
}

// Self-hosted integration runtime.
type SelfHostedIntegrationRuntimeOutput struct{ *pulumi.OutputState }

func (SelfHostedIntegrationRuntimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfHostedIntegrationRuntime)(nil)).Elem()
}

func (o SelfHostedIntegrationRuntimeOutput) ToSelfHostedIntegrationRuntimeOutput() SelfHostedIntegrationRuntimeOutput {
	return o
}

func (o SelfHostedIntegrationRuntimeOutput) ToSelfHostedIntegrationRuntimeOutputWithContext(ctx context.Context) SelfHostedIntegrationRuntimeOutput {
	return o
}

// Integration runtime description.
func (o SelfHostedIntegrationRuntimeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntime) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The base definition of a linked integration runtime.
func (o SelfHostedIntegrationRuntimeOutput) LinkedInfo() pulumi.AnyOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntime) interface{} { return v.LinkedInfo }).(pulumi.AnyOutput)
}

// An alternative option to ensure interactive authoring function when your self-hosted integration runtime is unable to establish a connection with Azure Relay.
func (o SelfHostedIntegrationRuntimeOutput) SelfContainedInteractiveAuthoringEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntime) *bool { return v.SelfContainedInteractiveAuthoringEnabled }).(pulumi.BoolPtrOutput)
}

// The type of integration runtime.
// Expected value is 'SelfHosted'.
func (o SelfHostedIntegrationRuntimeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntime) string { return v.Type }).(pulumi.StringOutput)
}

// Properties of Self-hosted integration runtime node.
type SelfHostedIntegrationRuntimeNodeResponse struct {
	// The integration runtime capabilities dictionary
	Capabilities map[string]string `pulumi:"capabilities"`
	// Maximum concurrent jobs on the integration runtime node.
	ConcurrentJobsLimit int `pulumi:"concurrentJobsLimit"`
	// The time at which the integration runtime will expire in ISO8601 format.
	ExpiryTime string `pulumi:"expiryTime"`
	// URI for the host machine of the integration runtime.
	HostServiceUri string `pulumi:"hostServiceUri"`
	// Indicates whether this node is the active dispatcher for integration runtime requests.
	IsActiveDispatcher bool `pulumi:"isActiveDispatcher"`
	// The most recent time at which the integration runtime was connected in ISO8601 format.
	LastConnectTime string `pulumi:"lastConnectTime"`
	// The last time for the integration runtime node update end.
	LastEndUpdateTime string `pulumi:"lastEndUpdateTime"`
	// The time the node last started up.
	LastStartTime string `pulumi:"lastStartTime"`
	// The last time for the integration runtime node update start.
	LastStartUpdateTime string `pulumi:"lastStartUpdateTime"`
	// The integration runtime node last stop time.
	LastStopTime string `pulumi:"lastStopTime"`
	// The result of the last integration runtime node update.
	LastUpdateResult string `pulumi:"lastUpdateResult"`
	// Machine name of the integration runtime node.
	MachineName string `pulumi:"machineName"`
	// The maximum concurrent jobs in this integration runtime.
	MaxConcurrentJobs int `pulumi:"maxConcurrentJobs"`
	// Name of the integration runtime node.
	NodeName string `pulumi:"nodeName"`
	// The time at which the integration runtime node was registered in ISO8601 format.
	RegisterTime string `pulumi:"registerTime"`
	// Status of the integration runtime node.
	Status string `pulumi:"status"`
	// Version of the integration runtime node.
	Version string `pulumi:"version"`
	// Status of the integration runtime node version.
	VersionStatus string `pulumi:"versionStatus"`
}

// Properties of Self-hosted integration runtime node.
type SelfHostedIntegrationRuntimeNodeResponseOutput struct{ *pulumi.OutputState }

func (SelfHostedIntegrationRuntimeNodeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfHostedIntegrationRuntimeNodeResponse)(nil)).Elem()
}

func (o SelfHostedIntegrationRuntimeNodeResponseOutput) ToSelfHostedIntegrationRuntimeNodeResponseOutput() SelfHostedIntegrationRuntimeNodeResponseOutput {
	return o
}

func (o SelfHostedIntegrationRuntimeNodeResponseOutput) ToSelfHostedIntegrationRuntimeNodeResponseOutputWithContext(ctx context.Context) SelfHostedIntegrationRuntimeNodeResponseOutput {
	return o
}

// The integration runtime capabilities dictionary
func (o SelfHostedIntegrationRuntimeNodeResponseOutput) Capabilities() pulumi.StringMapOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeNodeResponse) map[string]string { return v.Capabilities }).(pulumi.StringMapOutput)
}

// Maximum concurrent jobs on the integration runtime node.
func (o SelfHostedIntegrationRuntimeNodeResponseOutput) ConcurrentJobsLimit() pulumi.IntOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeNodeResponse) int { return v.ConcurrentJobsLimit }).(pulumi.IntOutput)
}

// The time at which the integration runtime will expire in ISO8601 format.
func (o SelfHostedIntegrationRuntimeNodeResponseOutput) ExpiryTime() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeNodeResponse) string { return v.ExpiryTime }).(pulumi.StringOutput)
}

// URI for the host machine of the integration runtime.
func (o SelfHostedIntegrationRuntimeNodeResponseOutput) HostServiceUri() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeNodeResponse) string { return v.HostServiceUri }).(pulumi.StringOutput)
}

// Indicates whether this node is the active dispatcher for integration runtime requests.
func (o SelfHostedIntegrationRuntimeNodeResponseOutput) IsActiveDispatcher() pulumi.BoolOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeNodeResponse) bool { return v.IsActiveDispatcher }).(pulumi.BoolOutput)
}

// The most recent time at which the integration runtime was connected in ISO8601 format.
func (o SelfHostedIntegrationRuntimeNodeResponseOutput) LastConnectTime() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeNodeResponse) string { return v.LastConnectTime }).(pulumi.StringOutput)
}

// The last time for the integration runtime node update end.
func (o SelfHostedIntegrationRuntimeNodeResponseOutput) LastEndUpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeNodeResponse) string { return v.LastEndUpdateTime }).(pulumi.StringOutput)
}

// The time the node last started up.
func (o SelfHostedIntegrationRuntimeNodeResponseOutput) LastStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeNodeResponse) string { return v.LastStartTime }).(pulumi.StringOutput)
}

// The last time for the integration runtime node update start.
func (o SelfHostedIntegrationRuntimeNodeResponseOutput) LastStartUpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeNodeResponse) string { return v.LastStartUpdateTime }).(pulumi.StringOutput)
}

// The integration runtime node last stop time.
func (o SelfHostedIntegrationRuntimeNodeResponseOutput) LastStopTime() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeNodeResponse) string { return v.LastStopTime }).(pulumi.StringOutput)
}

// The result of the last integration runtime node update.
func (o SelfHostedIntegrationRuntimeNodeResponseOutput) LastUpdateResult() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeNodeResponse) string { return v.LastUpdateResult }).(pulumi.StringOutput)
}

// Machine name of the integration runtime node.
func (o SelfHostedIntegrationRuntimeNodeResponseOutput) MachineName() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeNodeResponse) string { return v.MachineName }).(pulumi.StringOutput)
}

// The maximum concurrent jobs in this integration runtime.
func (o SelfHostedIntegrationRuntimeNodeResponseOutput) MaxConcurrentJobs() pulumi.IntOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeNodeResponse) int { return v.MaxConcurrentJobs }).(pulumi.IntOutput)
}

// Name of the integration runtime node.
func (o SelfHostedIntegrationRuntimeNodeResponseOutput) NodeName() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeNodeResponse) string { return v.NodeName }).(pulumi.StringOutput)
}

// The time at which the integration runtime node was registered in ISO8601 format.
func (o SelfHostedIntegrationRuntimeNodeResponseOutput) RegisterTime() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeNodeResponse) string { return v.RegisterTime }).(pulumi.StringOutput)
}

// Status of the integration runtime node.
func (o SelfHostedIntegrationRuntimeNodeResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeNodeResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Version of the integration runtime node.
func (o SelfHostedIntegrationRuntimeNodeResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeNodeResponse) string { return v.Version }).(pulumi.StringOutput)
}

// Status of the integration runtime node version.
func (o SelfHostedIntegrationRuntimeNodeResponseOutput) VersionStatus() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeNodeResponse) string { return v.VersionStatus }).(pulumi.StringOutput)
}

type SelfHostedIntegrationRuntimeNodeResponseArrayOutput struct{ *pulumi.OutputState }

func (SelfHostedIntegrationRuntimeNodeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SelfHostedIntegrationRuntimeNodeResponse)(nil)).Elem()
}

func (o SelfHostedIntegrationRuntimeNodeResponseArrayOutput) ToSelfHostedIntegrationRuntimeNodeResponseArrayOutput() SelfHostedIntegrationRuntimeNodeResponseArrayOutput {
	return o
}

func (o SelfHostedIntegrationRuntimeNodeResponseArrayOutput) ToSelfHostedIntegrationRuntimeNodeResponseArrayOutputWithContext(ctx context.Context) SelfHostedIntegrationRuntimeNodeResponseArrayOutput {
	return o
}

func (o SelfHostedIntegrationRuntimeNodeResponseArrayOutput) Index(i pulumi.IntInput) SelfHostedIntegrationRuntimeNodeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SelfHostedIntegrationRuntimeNodeResponse {
		return vs[0].([]SelfHostedIntegrationRuntimeNodeResponse)[vs[1].(int)]
	}).(SelfHostedIntegrationRuntimeNodeResponseOutput)
}

// Self-hosted integration runtime.
type SelfHostedIntegrationRuntimeResponse struct {
	// Integration runtime description.
	Description *string `pulumi:"description"`
	// The base definition of a linked integration runtime.
	LinkedInfo interface{} `pulumi:"linkedInfo"`
	// An alternative option to ensure interactive authoring function when your self-hosted integration runtime is unable to establish a connection with Azure Relay.
	SelfContainedInteractiveAuthoringEnabled *bool `pulumi:"selfContainedInteractiveAuthoringEnabled"`
	// The type of integration runtime.
	// Expected value is 'SelfHosted'.
	Type string `pulumi:"type"`
}

// Self-hosted integration runtime.
type SelfHostedIntegrationRuntimeResponseOutput struct{ *pulumi.OutputState }

func (SelfHostedIntegrationRuntimeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfHostedIntegrationRuntimeResponse)(nil)).Elem()
}

func (o SelfHostedIntegrationRuntimeResponseOutput) ToSelfHostedIntegrationRuntimeResponseOutput() SelfHostedIntegrationRuntimeResponseOutput {
	return o
}

func (o SelfHostedIntegrationRuntimeResponseOutput) ToSelfHostedIntegrationRuntimeResponseOutputWithContext(ctx context.Context) SelfHostedIntegrationRuntimeResponseOutput {
	return o
}

// Integration runtime description.
func (o SelfHostedIntegrationRuntimeResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The base definition of a linked integration runtime.
func (o SelfHostedIntegrationRuntimeResponseOutput) LinkedInfo() pulumi.AnyOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeResponse) interface{} { return v.LinkedInfo }).(pulumi.AnyOutput)
}

// An alternative option to ensure interactive authoring function when your self-hosted integration runtime is unable to establish a connection with Azure Relay.
func (o SelfHostedIntegrationRuntimeResponseOutput) SelfContainedInteractiveAuthoringEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeResponse) *bool { return v.SelfContainedInteractiveAuthoringEnabled }).(pulumi.BoolPtrOutput)
}

// The type of integration runtime.
// Expected value is 'SelfHosted'.
func (o SelfHostedIntegrationRuntimeResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Self-hosted integration runtime status.
type SelfHostedIntegrationRuntimeStatusResponse struct {
	// Whether Self-hosted integration runtime auto update has been turned on.
	AutoUpdate string `pulumi:"autoUpdate"`
	// The estimated time when the self-hosted integration runtime will be updated.
	AutoUpdateETA string `pulumi:"autoUpdateETA"`
	// Object with additional information about integration runtime capabilities.
	Capabilities map[string]string `pulumi:"capabilities"`
	// The time at which the integration runtime was created, in ISO8601 format.
	CreateTime string `pulumi:"createTime"`
	// The data factory name which the integration runtime belong to.
	DataFactoryName string `pulumi:"dataFactoryName"`
	// It is used to set the encryption mode for node-node communication channel (when more than 2 self-hosted integration runtime nodes exist).
	InternalChannelEncryption string `pulumi:"internalChannelEncryption"`
	// The latest version on download center.
	LatestVersion string `pulumi:"latestVersion"`
	// The list of linked integration runtimes that are created to share with this integration runtime.
	Links []LinkedIntegrationRuntimeResponse `pulumi:"links"`
	// The local time zone offset in hours.
	LocalTimeZoneOffset string `pulumi:"localTimeZoneOffset"`
	// The list of nodes for this integration runtime.
	Nodes []SelfHostedIntegrationRuntimeNodeResponse `pulumi:"nodes"`
	// The version that the integration runtime is going to update to.
	PushedVersion string `pulumi:"pushedVersion"`
	// The date at which the integration runtime will be scheduled to update, in ISO8601 format.
	ScheduledUpdateDate string `pulumi:"scheduledUpdateDate"`
	// An alternative option to ensure interactive authoring function when your self-hosted integration runtime is unable to establish a connection with Azure Relay.
	SelfContainedInteractiveAuthoringEnabled bool `pulumi:"selfContainedInteractiveAuthoringEnabled"`
	// The URLs for the services used in integration runtime backend service.
	ServiceUrls []string `pulumi:"serviceUrls"`
	// The state of integration runtime.
	State string `pulumi:"state"`
	// The task queue id of the integration runtime.
	TaskQueueId string `pulumi:"taskQueueId"`
	// The type of integration runtime.
	// Expected value is 'SelfHosted'.
	Type string `pulumi:"type"`
	// The time in the date scheduled by service to update the integration runtime, e.g., PT03H is 3 hours
	UpdateDelayOffset string `pulumi:"updateDelayOffset"`
	// Version of the integration runtime.
	Version string `pulumi:"version"`
	// Status of the integration runtime version.
	VersionStatus string `pulumi:"versionStatus"`
}

// Self-hosted integration runtime status.
type SelfHostedIntegrationRuntimeStatusResponseOutput struct{ *pulumi.OutputState }

func (SelfHostedIntegrationRuntimeStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfHostedIntegrationRuntimeStatusResponse)(nil)).Elem()
}

func (o SelfHostedIntegrationRuntimeStatusResponseOutput) ToSelfHostedIntegrationRuntimeStatusResponseOutput() SelfHostedIntegrationRuntimeStatusResponseOutput {
	return o
}

func (o SelfHostedIntegrationRuntimeStatusResponseOutput) ToSelfHostedIntegrationRuntimeStatusResponseOutputWithContext(ctx context.Context) SelfHostedIntegrationRuntimeStatusResponseOutput {
	return o
}

// Whether Self-hosted integration runtime auto update has been turned on.
func (o SelfHostedIntegrationRuntimeStatusResponseOutput) AutoUpdate() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeStatusResponse) string { return v.AutoUpdate }).(pulumi.StringOutput)
}

// The estimated time when the self-hosted integration runtime will be updated.
func (o SelfHostedIntegrationRuntimeStatusResponseOutput) AutoUpdateETA() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeStatusResponse) string { return v.AutoUpdateETA }).(pulumi.StringOutput)
}

// Object with additional information about integration runtime capabilities.
func (o SelfHostedIntegrationRuntimeStatusResponseOutput) Capabilities() pulumi.StringMapOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeStatusResponse) map[string]string { return v.Capabilities }).(pulumi.StringMapOutput)
}

// The time at which the integration runtime was created, in ISO8601 format.
func (o SelfHostedIntegrationRuntimeStatusResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeStatusResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The data factory name which the integration runtime belong to.
func (o SelfHostedIntegrationRuntimeStatusResponseOutput) DataFactoryName() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeStatusResponse) string { return v.DataFactoryName }).(pulumi.StringOutput)
}

// It is used to set the encryption mode for node-node communication channel (when more than 2 self-hosted integration runtime nodes exist).
func (o SelfHostedIntegrationRuntimeStatusResponseOutput) InternalChannelEncryption() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeStatusResponse) string { return v.InternalChannelEncryption }).(pulumi.StringOutput)
}

// The latest version on download center.
func (o SelfHostedIntegrationRuntimeStatusResponseOutput) LatestVersion() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeStatusResponse) string { return v.LatestVersion }).(pulumi.StringOutput)
}

// The list of linked integration runtimes that are created to share with this integration runtime.
func (o SelfHostedIntegrationRuntimeStatusResponseOutput) Links() LinkedIntegrationRuntimeResponseArrayOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeStatusResponse) []LinkedIntegrationRuntimeResponse { return v.Links }).(LinkedIntegrationRuntimeResponseArrayOutput)
}

// The local time zone offset in hours.
func (o SelfHostedIntegrationRuntimeStatusResponseOutput) LocalTimeZoneOffset() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeStatusResponse) string { return v.LocalTimeZoneOffset }).(pulumi.StringOutput)
}

// The list of nodes for this integration runtime.
func (o SelfHostedIntegrationRuntimeStatusResponseOutput) Nodes() SelfHostedIntegrationRuntimeNodeResponseArrayOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeStatusResponse) []SelfHostedIntegrationRuntimeNodeResponse {
		return v.Nodes
	}).(SelfHostedIntegrationRuntimeNodeResponseArrayOutput)
}

// The version that the integration runtime is going to update to.
func (o SelfHostedIntegrationRuntimeStatusResponseOutput) PushedVersion() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeStatusResponse) string { return v.PushedVersion }).(pulumi.StringOutput)
}

// The date at which the integration runtime will be scheduled to update, in ISO8601 format.
func (o SelfHostedIntegrationRuntimeStatusResponseOutput) ScheduledUpdateDate() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeStatusResponse) string { return v.ScheduledUpdateDate }).(pulumi.StringOutput)
}

// An alternative option to ensure interactive authoring function when your self-hosted integration runtime is unable to establish a connection with Azure Relay.
func (o SelfHostedIntegrationRuntimeStatusResponseOutput) SelfContainedInteractiveAuthoringEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeStatusResponse) bool {
		return v.SelfContainedInteractiveAuthoringEnabled
	}).(pulumi.BoolOutput)
}

// The URLs for the services used in integration runtime backend service.
func (o SelfHostedIntegrationRuntimeStatusResponseOutput) ServiceUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeStatusResponse) []string { return v.ServiceUrls }).(pulumi.StringArrayOutput)
}

// The state of integration runtime.
func (o SelfHostedIntegrationRuntimeStatusResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeStatusResponse) string { return v.State }).(pulumi.StringOutput)
}

// The task queue id of the integration runtime.
func (o SelfHostedIntegrationRuntimeStatusResponseOutput) TaskQueueId() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeStatusResponse) string { return v.TaskQueueId }).(pulumi.StringOutput)
}

// The type of integration runtime.
// Expected value is 'SelfHosted'.
func (o SelfHostedIntegrationRuntimeStatusResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeStatusResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The time in the date scheduled by service to update the integration runtime, e.g., PT03H is 3 hours
func (o SelfHostedIntegrationRuntimeStatusResponseOutput) UpdateDelayOffset() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeStatusResponse) string { return v.UpdateDelayOffset }).(pulumi.StringOutput)
}

// Version of the integration runtime.
func (o SelfHostedIntegrationRuntimeStatusResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeStatusResponse) string { return v.Version }).(pulumi.StringOutput)
}

// Status of the integration runtime version.
func (o SelfHostedIntegrationRuntimeStatusResponseOutput) VersionStatus() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedIntegrationRuntimeStatusResponse) string { return v.VersionStatus }).(pulumi.StringOutput)
}

// ServiceNow server linked service.
type ServiceNowLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to use.
	AuthenticationType string `pulumi:"authenticationType"`
	// The client id for OAuth2 authentication.
	ClientId interface{} `pulumi:"clientId"`
	// The client secret for OAuth2 authentication.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The endpoint of the ServiceNow server. (i.e. <instance>.service-now.com)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name for Basic and OAuth2 authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'ServiceNow'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
	// The user name used to connect to the ServiceNow server for Basic and OAuth2 authentication.
	Username interface{} `pulumi:"username"`
}

// ServiceNowLinkedServiceInput is an input type that accepts ServiceNowLinkedServiceArgs and ServiceNowLinkedServiceOutput values.
// You can construct a concrete instance of `ServiceNowLinkedServiceInput` via:
//
//	ServiceNowLinkedServiceArgs{...}
type ServiceNowLinkedServiceInput interface {
	pulumi.Input

	ToServiceNowLinkedServiceOutput() ServiceNowLinkedServiceOutput
	ToServiceNowLinkedServiceOutputWithContext(context.Context) ServiceNowLinkedServiceOutput
}

// ServiceNow server linked service.
type ServiceNowLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication type to use.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The client id for OAuth2 authentication.
	ClientId pulumi.Input `pulumi:"clientId"`
	// The client secret for OAuth2 authentication.
	ClientSecret pulumi.Input `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// The endpoint of the ServiceNow server. (i.e. <instance>.service-now.com)
	Endpoint pulumi.Input `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password corresponding to the user name for Basic and OAuth2 authentication.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'ServiceNow'.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
	// The user name used to connect to the ServiceNow server for Basic and OAuth2 authentication.
	Username pulumi.Input `pulumi:"username"`
}

func (ServiceNowLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNowLinkedService)(nil)).Elem()
}

func (i ServiceNowLinkedServiceArgs) ToServiceNowLinkedServiceOutput() ServiceNowLinkedServiceOutput {
	return i.ToServiceNowLinkedServiceOutputWithContext(context.Background())
}

func (i ServiceNowLinkedServiceArgs) ToServiceNowLinkedServiceOutputWithContext(ctx context.Context) ServiceNowLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNowLinkedServiceOutput)
}

// ServiceNow server linked service.
type ServiceNowLinkedServiceOutput struct{ *pulumi.OutputState }

func (ServiceNowLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNowLinkedService)(nil)).Elem()
}

func (o ServiceNowLinkedServiceOutput) ToServiceNowLinkedServiceOutput() ServiceNowLinkedServiceOutput {
	return o
}

func (o ServiceNowLinkedServiceOutput) ToServiceNowLinkedServiceOutputWithContext(ctx context.Context) ServiceNowLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o ServiceNowLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ServiceNowLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication type to use.
func (o ServiceNowLinkedServiceOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceNowLinkedService) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The client id for OAuth2 authentication.
func (o ServiceNowLinkedServiceOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowLinkedService) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret for OAuth2 authentication.
func (o ServiceNowLinkedServiceOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowLinkedService) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o ServiceNowLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v ServiceNowLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o ServiceNowLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceNowLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o ServiceNowLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceNowLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The endpoint of the ServiceNow server. (i.e. <instance>.service-now.com)
func (o ServiceNowLinkedServiceOutput) Endpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowLinkedService) interface{} { return v.Endpoint }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o ServiceNowLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v ServiceNowLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The password corresponding to the user name for Basic and OAuth2 authentication.
func (o ServiceNowLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'ServiceNow'.
func (o ServiceNowLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceNowLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o ServiceNowLinkedServiceOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowLinkedService) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o ServiceNowLinkedServiceOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowLinkedService) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o ServiceNowLinkedServiceOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowLinkedService) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// The user name used to connect to the ServiceNow server for Basic and OAuth2 authentication.
func (o ServiceNowLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// ServiceNow server linked service.
type ServiceNowLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to use.
	AuthenticationType string `pulumi:"authenticationType"`
	// The client id for OAuth2 authentication.
	ClientId interface{} `pulumi:"clientId"`
	// The client secret for OAuth2 authentication.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The endpoint of the ServiceNow server. (i.e. <instance>.service-now.com)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name for Basic and OAuth2 authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'ServiceNow'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
	// The user name used to connect to the ServiceNow server for Basic and OAuth2 authentication.
	Username interface{} `pulumi:"username"`
}

// ServiceNow server linked service.
type ServiceNowLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (ServiceNowLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNowLinkedServiceResponse)(nil)).Elem()
}

func (o ServiceNowLinkedServiceResponseOutput) ToServiceNowLinkedServiceResponseOutput() ServiceNowLinkedServiceResponseOutput {
	return o
}

func (o ServiceNowLinkedServiceResponseOutput) ToServiceNowLinkedServiceResponseOutputWithContext(ctx context.Context) ServiceNowLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o ServiceNowLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication type to use.
func (o ServiceNowLinkedServiceResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The client id for OAuth2 authentication.
func (o ServiceNowLinkedServiceResponseOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret for OAuth2 authentication.
func (o ServiceNowLinkedServiceResponseOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o ServiceNowLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o ServiceNowLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o ServiceNowLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The endpoint of the ServiceNow server. (i.e. <instance>.service-now.com)
func (o ServiceNowLinkedServiceResponseOutput) Endpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) interface{} { return v.Endpoint }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o ServiceNowLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The password corresponding to the user name for Basic and OAuth2 authentication.
func (o ServiceNowLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'ServiceNow'.
func (o ServiceNowLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o ServiceNowLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o ServiceNowLinkedServiceResponseOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o ServiceNowLinkedServiceResponseOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// The user name used to connect to the ServiceNow server for Basic and OAuth2 authentication.
func (o ServiceNowLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// ServiceNow server dataset.
type ServiceNowObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'ServiceNowObject'.
	Type string `pulumi:"type"`
}

// ServiceNowObjectDatasetInput is an input type that accepts ServiceNowObjectDatasetArgs and ServiceNowObjectDatasetOutput values.
// You can construct a concrete instance of `ServiceNowObjectDatasetInput` via:
//
//	ServiceNowObjectDatasetArgs{...}
type ServiceNowObjectDatasetInput interface {
	pulumi.Input

	ToServiceNowObjectDatasetOutput() ServiceNowObjectDatasetOutput
	ToServiceNowObjectDatasetOutputWithContext(context.Context) ServiceNowObjectDatasetOutput
}

// ServiceNow server dataset.
type ServiceNowObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'ServiceNowObject'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ServiceNowObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNowObjectDataset)(nil)).Elem()
}

func (i ServiceNowObjectDatasetArgs) ToServiceNowObjectDatasetOutput() ServiceNowObjectDatasetOutput {
	return i.ToServiceNowObjectDatasetOutputWithContext(context.Background())
}

func (i ServiceNowObjectDatasetArgs) ToServiceNowObjectDatasetOutputWithContext(ctx context.Context) ServiceNowObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNowObjectDatasetOutput)
}

// ServiceNow server dataset.
type ServiceNowObjectDatasetOutput struct{ *pulumi.OutputState }

func (ServiceNowObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNowObjectDataset)(nil)).Elem()
}

func (o ServiceNowObjectDatasetOutput) ToServiceNowObjectDatasetOutput() ServiceNowObjectDatasetOutput {
	return o
}

func (o ServiceNowObjectDatasetOutput) ToServiceNowObjectDatasetOutputWithContext(ctx context.Context) ServiceNowObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ServiceNowObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ServiceNowObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o ServiceNowObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceNowObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o ServiceNowObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v ServiceNowObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o ServiceNowObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v ServiceNowObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o ServiceNowObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v ServiceNowObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o ServiceNowObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ServiceNowObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o ServiceNowObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'ServiceNowObject'.
func (o ServiceNowObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceNowObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// ServiceNow server dataset.
type ServiceNowObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'ServiceNowObject'.
	Type string `pulumi:"type"`
}

// ServiceNow server dataset.
type ServiceNowObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (ServiceNowObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNowObjectDatasetResponse)(nil)).Elem()
}

func (o ServiceNowObjectDatasetResponseOutput) ToServiceNowObjectDatasetResponseOutput() ServiceNowObjectDatasetResponseOutput {
	return o
}

func (o ServiceNowObjectDatasetResponseOutput) ToServiceNowObjectDatasetResponseOutputWithContext(ctx context.Context) ServiceNowObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ServiceNowObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ServiceNowObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o ServiceNowObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceNowObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o ServiceNowObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v ServiceNowObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o ServiceNowObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v ServiceNowObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o ServiceNowObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ServiceNowObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o ServiceNowObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ServiceNowObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o ServiceNowObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'ServiceNowObject'.
func (o ServiceNowObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceNowObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity ServiceNow server source.
type ServiceNowSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ServiceNowSource'.
	Type string `pulumi:"type"`
}

// ServiceNowSourceInput is an input type that accepts ServiceNowSourceArgs and ServiceNowSourceOutput values.
// You can construct a concrete instance of `ServiceNowSourceInput` via:
//
//	ServiceNowSourceArgs{...}
type ServiceNowSourceInput interface {
	pulumi.Input

	ToServiceNowSourceOutput() ServiceNowSourceOutput
	ToServiceNowSourceOutputWithContext(context.Context) ServiceNowSourceOutput
}

// A copy activity ServiceNow server source.
type ServiceNowSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ServiceNowSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ServiceNowSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNowSource)(nil)).Elem()
}

func (i ServiceNowSourceArgs) ToServiceNowSourceOutput() ServiceNowSourceOutput {
	return i.ToServiceNowSourceOutputWithContext(context.Background())
}

func (i ServiceNowSourceArgs) ToServiceNowSourceOutputWithContext(ctx context.Context) ServiceNowSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNowSourceOutput)
}

// A copy activity ServiceNow server source.
type ServiceNowSourceOutput struct{ *pulumi.OutputState }

func (ServiceNowSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNowSource)(nil)).Elem()
}

func (o ServiceNowSourceOutput) ToServiceNowSourceOutput() ServiceNowSourceOutput {
	return o
}

func (o ServiceNowSourceOutput) ToServiceNowSourceOutputWithContext(ctx context.Context) ServiceNowSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o ServiceNowSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o ServiceNowSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o ServiceNowSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o ServiceNowSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ServiceNowSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o ServiceNowSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ServiceNowSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'ServiceNowSource'.
func (o ServiceNowSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceNowSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity ServiceNow server source.
type ServiceNowSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ServiceNowSource'.
	Type string `pulumi:"type"`
}

// A copy activity ServiceNow server source.
type ServiceNowSourceResponseOutput struct{ *pulumi.OutputState }

func (ServiceNowSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNowSourceResponse)(nil)).Elem()
}

func (o ServiceNowSourceResponseOutput) ToServiceNowSourceResponseOutput() ServiceNowSourceResponseOutput {
	return o
}

func (o ServiceNowSourceResponseOutput) ToServiceNowSourceResponseOutputWithContext(ctx context.Context) ServiceNowSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o ServiceNowSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o ServiceNowSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o ServiceNowSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o ServiceNowSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ServiceNowSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o ServiceNowSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ServiceNowSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'ServiceNowSource'.
func (o ServiceNowSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceNowSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// ServiceNowV2 server linked service.
type ServiceNowV2LinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to use.
	AuthenticationType string `pulumi:"authenticationType"`
	// The client id for OAuth2 authentication.
	ClientId interface{} `pulumi:"clientId"`
	// The client secret for OAuth2 authentication.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The endpoint of the ServiceNowV2 server. (i.e. <instance>.service-now.com)
	Endpoint interface{} `pulumi:"endpoint"`
	// GrantType for OAuth2 authentication. Default value is password.
	GrantType interface{} `pulumi:"grantType"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name for Basic and OAuth2 authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'ServiceNowV2'.
	Type string `pulumi:"type"`
	// The user name used to connect to the ServiceNowV2 server for Basic and OAuth2 authentication.
	Username interface{} `pulumi:"username"`
}

// ServiceNowV2LinkedServiceInput is an input type that accepts ServiceNowV2LinkedServiceArgs and ServiceNowV2LinkedServiceOutput values.
// You can construct a concrete instance of `ServiceNowV2LinkedServiceInput` via:
//
//	ServiceNowV2LinkedServiceArgs{...}
type ServiceNowV2LinkedServiceInput interface {
	pulumi.Input

	ToServiceNowV2LinkedServiceOutput() ServiceNowV2LinkedServiceOutput
	ToServiceNowV2LinkedServiceOutputWithContext(context.Context) ServiceNowV2LinkedServiceOutput
}

// ServiceNowV2 server linked service.
type ServiceNowV2LinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication type to use.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The client id for OAuth2 authentication.
	ClientId pulumi.Input `pulumi:"clientId"`
	// The client secret for OAuth2 authentication.
	ClientSecret pulumi.Input `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// The endpoint of the ServiceNowV2 server. (i.e. <instance>.service-now.com)
	Endpoint pulumi.Input `pulumi:"endpoint"`
	// GrantType for OAuth2 authentication. Default value is password.
	GrantType pulumi.Input `pulumi:"grantType"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password corresponding to the user name for Basic and OAuth2 authentication.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'ServiceNowV2'.
	Type pulumi.StringInput `pulumi:"type"`
	// The user name used to connect to the ServiceNowV2 server for Basic and OAuth2 authentication.
	Username pulumi.Input `pulumi:"username"`
}

func (ServiceNowV2LinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNowV2LinkedService)(nil)).Elem()
}

func (i ServiceNowV2LinkedServiceArgs) ToServiceNowV2LinkedServiceOutput() ServiceNowV2LinkedServiceOutput {
	return i.ToServiceNowV2LinkedServiceOutputWithContext(context.Background())
}

func (i ServiceNowV2LinkedServiceArgs) ToServiceNowV2LinkedServiceOutputWithContext(ctx context.Context) ServiceNowV2LinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNowV2LinkedServiceOutput)
}

// ServiceNowV2 server linked service.
type ServiceNowV2LinkedServiceOutput struct{ *pulumi.OutputState }

func (ServiceNowV2LinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNowV2LinkedService)(nil)).Elem()
}

func (o ServiceNowV2LinkedServiceOutput) ToServiceNowV2LinkedServiceOutput() ServiceNowV2LinkedServiceOutput {
	return o
}

func (o ServiceNowV2LinkedServiceOutput) ToServiceNowV2LinkedServiceOutputWithContext(ctx context.Context) ServiceNowV2LinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o ServiceNowV2LinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ServiceNowV2LinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication type to use.
func (o ServiceNowV2LinkedServiceOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceNowV2LinkedService) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The client id for OAuth2 authentication.
func (o ServiceNowV2LinkedServiceOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowV2LinkedService) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret for OAuth2 authentication.
func (o ServiceNowV2LinkedServiceOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowV2LinkedService) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o ServiceNowV2LinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v ServiceNowV2LinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o ServiceNowV2LinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceNowV2LinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o ServiceNowV2LinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceNowV2LinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The endpoint of the ServiceNowV2 server. (i.e. <instance>.service-now.com)
func (o ServiceNowV2LinkedServiceOutput) Endpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowV2LinkedService) interface{} { return v.Endpoint }).(pulumi.AnyOutput)
}

// GrantType for OAuth2 authentication. Default value is password.
func (o ServiceNowV2LinkedServiceOutput) GrantType() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowV2LinkedService) interface{} { return v.GrantType }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o ServiceNowV2LinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v ServiceNowV2LinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The password corresponding to the user name for Basic and OAuth2 authentication.
func (o ServiceNowV2LinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowV2LinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'ServiceNowV2'.
func (o ServiceNowV2LinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceNowV2LinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The user name used to connect to the ServiceNowV2 server for Basic and OAuth2 authentication.
func (o ServiceNowV2LinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowV2LinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// ServiceNowV2 server linked service.
type ServiceNowV2LinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to use.
	AuthenticationType string `pulumi:"authenticationType"`
	// The client id for OAuth2 authentication.
	ClientId interface{} `pulumi:"clientId"`
	// The client secret for OAuth2 authentication.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The endpoint of the ServiceNowV2 server. (i.e. <instance>.service-now.com)
	Endpoint interface{} `pulumi:"endpoint"`
	// GrantType for OAuth2 authentication. Default value is password.
	GrantType interface{} `pulumi:"grantType"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name for Basic and OAuth2 authentication.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'ServiceNowV2'.
	Type string `pulumi:"type"`
	// The user name used to connect to the ServiceNowV2 server for Basic and OAuth2 authentication.
	Username interface{} `pulumi:"username"`
}

// ServiceNowV2 server linked service.
type ServiceNowV2LinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (ServiceNowV2LinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNowV2LinkedServiceResponse)(nil)).Elem()
}

func (o ServiceNowV2LinkedServiceResponseOutput) ToServiceNowV2LinkedServiceResponseOutput() ServiceNowV2LinkedServiceResponseOutput {
	return o
}

func (o ServiceNowV2LinkedServiceResponseOutput) ToServiceNowV2LinkedServiceResponseOutputWithContext(ctx context.Context) ServiceNowV2LinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o ServiceNowV2LinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ServiceNowV2LinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication type to use.
func (o ServiceNowV2LinkedServiceResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceNowV2LinkedServiceResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The client id for OAuth2 authentication.
func (o ServiceNowV2LinkedServiceResponseOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowV2LinkedServiceResponse) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret for OAuth2 authentication.
func (o ServiceNowV2LinkedServiceResponseOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowV2LinkedServiceResponse) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o ServiceNowV2LinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v ServiceNowV2LinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o ServiceNowV2LinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceNowV2LinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o ServiceNowV2LinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceNowV2LinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The endpoint of the ServiceNowV2 server. (i.e. <instance>.service-now.com)
func (o ServiceNowV2LinkedServiceResponseOutput) Endpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowV2LinkedServiceResponse) interface{} { return v.Endpoint }).(pulumi.AnyOutput)
}

// GrantType for OAuth2 authentication. Default value is password.
func (o ServiceNowV2LinkedServiceResponseOutput) GrantType() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowV2LinkedServiceResponse) interface{} { return v.GrantType }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o ServiceNowV2LinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ServiceNowV2LinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The password corresponding to the user name for Basic and OAuth2 authentication.
func (o ServiceNowV2LinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowV2LinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'ServiceNowV2'.
func (o ServiceNowV2LinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceNowV2LinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The user name used to connect to the ServiceNowV2 server for Basic and OAuth2 authentication.
func (o ServiceNowV2LinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowV2LinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// ServiceNowV2 server dataset.
type ServiceNowV2ObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'ServiceNowV2Object'.
	Type string `pulumi:"type"`
}

// ServiceNowV2ObjectDatasetInput is an input type that accepts ServiceNowV2ObjectDatasetArgs and ServiceNowV2ObjectDatasetOutput values.
// You can construct a concrete instance of `ServiceNowV2ObjectDatasetInput` via:
//
//	ServiceNowV2ObjectDatasetArgs{...}
type ServiceNowV2ObjectDatasetInput interface {
	pulumi.Input

	ToServiceNowV2ObjectDatasetOutput() ServiceNowV2ObjectDatasetOutput
	ToServiceNowV2ObjectDatasetOutputWithContext(context.Context) ServiceNowV2ObjectDatasetOutput
}

// ServiceNowV2 server dataset.
type ServiceNowV2ObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'ServiceNowV2Object'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ServiceNowV2ObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNowV2ObjectDataset)(nil)).Elem()
}

func (i ServiceNowV2ObjectDatasetArgs) ToServiceNowV2ObjectDatasetOutput() ServiceNowV2ObjectDatasetOutput {
	return i.ToServiceNowV2ObjectDatasetOutputWithContext(context.Background())
}

func (i ServiceNowV2ObjectDatasetArgs) ToServiceNowV2ObjectDatasetOutputWithContext(ctx context.Context) ServiceNowV2ObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNowV2ObjectDatasetOutput)
}

// ServiceNowV2 server dataset.
type ServiceNowV2ObjectDatasetOutput struct{ *pulumi.OutputState }

func (ServiceNowV2ObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNowV2ObjectDataset)(nil)).Elem()
}

func (o ServiceNowV2ObjectDatasetOutput) ToServiceNowV2ObjectDatasetOutput() ServiceNowV2ObjectDatasetOutput {
	return o
}

func (o ServiceNowV2ObjectDatasetOutput) ToServiceNowV2ObjectDatasetOutputWithContext(ctx context.Context) ServiceNowV2ObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ServiceNowV2ObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ServiceNowV2ObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o ServiceNowV2ObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceNowV2ObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o ServiceNowV2ObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v ServiceNowV2ObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o ServiceNowV2ObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v ServiceNowV2ObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o ServiceNowV2ObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v ServiceNowV2ObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o ServiceNowV2ObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowV2ObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ServiceNowV2ObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowV2ObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o ServiceNowV2ObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowV2ObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'ServiceNowV2Object'.
func (o ServiceNowV2ObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceNowV2ObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// ServiceNowV2 server dataset.
type ServiceNowV2ObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'ServiceNowV2Object'.
	Type string `pulumi:"type"`
}

// ServiceNowV2 server dataset.
type ServiceNowV2ObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (ServiceNowV2ObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNowV2ObjectDatasetResponse)(nil)).Elem()
}

func (o ServiceNowV2ObjectDatasetResponseOutput) ToServiceNowV2ObjectDatasetResponseOutput() ServiceNowV2ObjectDatasetResponseOutput {
	return o
}

func (o ServiceNowV2ObjectDatasetResponseOutput) ToServiceNowV2ObjectDatasetResponseOutputWithContext(ctx context.Context) ServiceNowV2ObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ServiceNowV2ObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ServiceNowV2ObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o ServiceNowV2ObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceNowV2ObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o ServiceNowV2ObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v ServiceNowV2ObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o ServiceNowV2ObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v ServiceNowV2ObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o ServiceNowV2ObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ServiceNowV2ObjectDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o ServiceNowV2ObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowV2ObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ServiceNowV2ObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowV2ObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o ServiceNowV2ObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowV2ObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'ServiceNowV2Object'.
func (o ServiceNowV2ObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceNowV2ObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity ServiceNowV2 server source.
type ServiceNowV2Source struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Expression to filter data from source.
	Expression *ExpressionV2 `pulumi:"expression"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ServiceNowV2Source'.
	Type string `pulumi:"type"`
}

// ServiceNowV2SourceInput is an input type that accepts ServiceNowV2SourceArgs and ServiceNowV2SourceOutput values.
// You can construct a concrete instance of `ServiceNowV2SourceInput` via:
//
//	ServiceNowV2SourceArgs{...}
type ServiceNowV2SourceInput interface {
	pulumi.Input

	ToServiceNowV2SourceOutput() ServiceNowV2SourceOutput
	ToServiceNowV2SourceOutputWithContext(context.Context) ServiceNowV2SourceOutput
}

// A copy activity ServiceNowV2 server source.
type ServiceNowV2SourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// Expression to filter data from source.
	Expression ExpressionV2PtrInput `pulumi:"expression"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ServiceNowV2Source'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ServiceNowV2SourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNowV2Source)(nil)).Elem()
}

func (i ServiceNowV2SourceArgs) ToServiceNowV2SourceOutput() ServiceNowV2SourceOutput {
	return i.ToServiceNowV2SourceOutputWithContext(context.Background())
}

func (i ServiceNowV2SourceArgs) ToServiceNowV2SourceOutputWithContext(ctx context.Context) ServiceNowV2SourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceNowV2SourceOutput)
}

// A copy activity ServiceNowV2 server source.
type ServiceNowV2SourceOutput struct{ *pulumi.OutputState }

func (ServiceNowV2SourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNowV2Source)(nil)).Elem()
}

func (o ServiceNowV2SourceOutput) ToServiceNowV2SourceOutput() ServiceNowV2SourceOutput {
	return o
}

func (o ServiceNowV2SourceOutput) ToServiceNowV2SourceOutputWithContext(ctx context.Context) ServiceNowV2SourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o ServiceNowV2SourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowV2Source) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o ServiceNowV2SourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowV2Source) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Expression to filter data from source.
func (o ServiceNowV2SourceOutput) Expression() ExpressionV2PtrOutput {
	return o.ApplyT(func(v ServiceNowV2Source) *ExpressionV2 { return v.Expression }).(ExpressionV2PtrOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o ServiceNowV2SourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowV2Source) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ServiceNowV2SourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowV2Source) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o ServiceNowV2SourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowV2Source) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ServiceNowV2SourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowV2Source) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'ServiceNowV2Source'.
func (o ServiceNowV2SourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceNowV2Source) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity ServiceNowV2 server source.
type ServiceNowV2SourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Expression to filter data from source.
	Expression *ExpressionV2Response `pulumi:"expression"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ServiceNowV2Source'.
	Type string `pulumi:"type"`
}

// A copy activity ServiceNowV2 server source.
type ServiceNowV2SourceResponseOutput struct{ *pulumi.OutputState }

func (ServiceNowV2SourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceNowV2SourceResponse)(nil)).Elem()
}

func (o ServiceNowV2SourceResponseOutput) ToServiceNowV2SourceResponseOutput() ServiceNowV2SourceResponseOutput {
	return o
}

func (o ServiceNowV2SourceResponseOutput) ToServiceNowV2SourceResponseOutputWithContext(ctx context.Context) ServiceNowV2SourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o ServiceNowV2SourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowV2SourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o ServiceNowV2SourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowV2SourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Expression to filter data from source.
func (o ServiceNowV2SourceResponseOutput) Expression() ExpressionV2ResponsePtrOutput {
	return o.ApplyT(func(v ServiceNowV2SourceResponse) *ExpressionV2Response { return v.Expression }).(ExpressionV2ResponsePtrOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o ServiceNowV2SourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowV2SourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ServiceNowV2SourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowV2SourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o ServiceNowV2SourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowV2SourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ServiceNowV2SourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceNowV2SourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'ServiceNowV2Source'.
func (o ServiceNowV2SourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceNowV2SourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Set value for a Variable.
type SetVariableActivity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *SecureInputOutputPolicy `pulumi:"policy"`
	// If set to true, it sets the pipeline run return value.
	SetSystemVariable *bool `pulumi:"setSystemVariable"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'SetVariable'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
	// Value to be set. Could be a static value or Expression.
	Value interface{} `pulumi:"value"`
	// Name of the variable whose value needs to be set.
	VariableName *string `pulumi:"variableName"`
}

// SetVariableActivityInput is an input type that accepts SetVariableActivityArgs and SetVariableActivityOutput values.
// You can construct a concrete instance of `SetVariableActivityInput` via:
//
//	SetVariableActivityArgs{...}
type SetVariableActivityInput interface {
	pulumi.Input

	ToSetVariableActivityOutput() SetVariableActivityOutput
	ToSetVariableActivityOutputWithContext(context.Context) SetVariableActivityOutput
}

// Set value for a Variable.
type SetVariableActivityArgs struct {
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs pulumi.StringPtrInput `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy SecureInputOutputPolicyPtrInput `pulumi:"policy"`
	// If set to true, it sets the pipeline run return value.
	SetSystemVariable pulumi.BoolPtrInput `pulumi:"setSystemVariable"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Type of activity.
	// Expected value is 'SetVariable'.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
	// Value to be set. Could be a static value or Expression.
	Value pulumi.Input `pulumi:"value"`
	// Name of the variable whose value needs to be set.
	VariableName pulumi.StringPtrInput `pulumi:"variableName"`
}

func (SetVariableActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SetVariableActivity)(nil)).Elem()
}

func (i SetVariableActivityArgs) ToSetVariableActivityOutput() SetVariableActivityOutput {
	return i.ToSetVariableActivityOutputWithContext(context.Background())
}

func (i SetVariableActivityArgs) ToSetVariableActivityOutputWithContext(ctx context.Context) SetVariableActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SetVariableActivityOutput)
}

// Set value for a Variable.
type SetVariableActivityOutput struct{ *pulumi.OutputState }

func (SetVariableActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SetVariableActivity)(nil)).Elem()
}

func (o SetVariableActivityOutput) ToSetVariableActivityOutput() SetVariableActivityOutput {
	return o
}

func (o SetVariableActivityOutput) ToSetVariableActivityOutputWithContext(ctx context.Context) SetVariableActivityOutput {
	return o
}

// Activity depends on condition.
func (o SetVariableActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v SetVariableActivity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o SetVariableActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SetVariableActivity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Activity name.
func (o SetVariableActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SetVariableActivity) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o SetVariableActivityOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SetVariableActivity) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o SetVariableActivityOutput) Policy() SecureInputOutputPolicyPtrOutput {
	return o.ApplyT(func(v SetVariableActivity) *SecureInputOutputPolicy { return v.Policy }).(SecureInputOutputPolicyPtrOutput)
}

// If set to true, it sets the pipeline run return value.
func (o SetVariableActivityOutput) SetSystemVariable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SetVariableActivity) *bool { return v.SetSystemVariable }).(pulumi.BoolPtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o SetVariableActivityOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SetVariableActivity) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'SetVariable'.
func (o SetVariableActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SetVariableActivity) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o SetVariableActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v SetVariableActivity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

// Value to be set. Could be a static value or Expression.
func (o SetVariableActivityOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v SetVariableActivity) interface{} { return v.Value }).(pulumi.AnyOutput)
}

// Name of the variable whose value needs to be set.
func (o SetVariableActivityOutput) VariableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SetVariableActivity) *string { return v.VariableName }).(pulumi.StringPtrOutput)
}

// Set value for a Variable.
type SetVariableActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *SecureInputOutputPolicyResponse `pulumi:"policy"`
	// If set to true, it sets the pipeline run return value.
	SetSystemVariable *bool `pulumi:"setSystemVariable"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'SetVariable'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
	// Value to be set. Could be a static value or Expression.
	Value interface{} `pulumi:"value"`
	// Name of the variable whose value needs to be set.
	VariableName *string `pulumi:"variableName"`
}

// Set value for a Variable.
type SetVariableActivityResponseOutput struct{ *pulumi.OutputState }

func (SetVariableActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SetVariableActivityResponse)(nil)).Elem()
}

func (o SetVariableActivityResponseOutput) ToSetVariableActivityResponseOutput() SetVariableActivityResponseOutput {
	return o
}

func (o SetVariableActivityResponseOutput) ToSetVariableActivityResponseOutputWithContext(ctx context.Context) SetVariableActivityResponseOutput {
	return o
}

// Activity depends on condition.
func (o SetVariableActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v SetVariableActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o SetVariableActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SetVariableActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Activity name.
func (o SetVariableActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SetVariableActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o SetVariableActivityResponseOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SetVariableActivityResponse) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o SetVariableActivityResponseOutput) Policy() SecureInputOutputPolicyResponsePtrOutput {
	return o.ApplyT(func(v SetVariableActivityResponse) *SecureInputOutputPolicyResponse { return v.Policy }).(SecureInputOutputPolicyResponsePtrOutput)
}

// If set to true, it sets the pipeline run return value.
func (o SetVariableActivityResponseOutput) SetSystemVariable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SetVariableActivityResponse) *bool { return v.SetSystemVariable }).(pulumi.BoolPtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o SetVariableActivityResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SetVariableActivityResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'SetVariable'.
func (o SetVariableActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SetVariableActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o SetVariableActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v SetVariableActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

// Value to be set. Could be a static value or Expression.
func (o SetVariableActivityResponseOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v SetVariableActivityResponse) interface{} { return v.Value }).(pulumi.AnyOutput)
}

// Name of the variable whose value needs to be set.
func (o SetVariableActivityResponseOutput) VariableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SetVariableActivityResponse) *string { return v.VariableName }).(pulumi.StringPtrOutput)
}

// The location of SFTP dataset.
type SftpLocation struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'SftpLocation'.
	Type string `pulumi:"type"`
}

// SftpLocationInput is an input type that accepts SftpLocationArgs and SftpLocationOutput values.
// You can construct a concrete instance of `SftpLocationInput` via:
//
//	SftpLocationArgs{...}
type SftpLocationInput interface {
	pulumi.Input

	ToSftpLocationOutput() SftpLocationOutput
	ToSftpLocationOutputWithContext(context.Context) SftpLocationOutput
}

// The location of SFTP dataset.
type SftpLocationArgs struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'SftpLocation'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SftpLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SftpLocation)(nil)).Elem()
}

func (i SftpLocationArgs) ToSftpLocationOutput() SftpLocationOutput {
	return i.ToSftpLocationOutputWithContext(context.Background())
}

func (i SftpLocationArgs) ToSftpLocationOutputWithContext(ctx context.Context) SftpLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SftpLocationOutput)
}

// The location of SFTP dataset.
type SftpLocationOutput struct{ *pulumi.OutputState }

func (SftpLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SftpLocation)(nil)).Elem()
}

func (o SftpLocationOutput) ToSftpLocationOutput() SftpLocationOutput {
	return o
}

func (o SftpLocationOutput) ToSftpLocationOutputWithContext(ctx context.Context) SftpLocationOutput {
	return o
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o SftpLocationOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpLocation) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o SftpLocationOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpLocation) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
// Expected value is 'SftpLocation'.
func (o SftpLocationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SftpLocation) string { return v.Type }).(pulumi.StringOutput)
}

// The location of SFTP dataset.
type SftpLocationResponse struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'SftpLocation'.
	Type string `pulumi:"type"`
}

// The location of SFTP dataset.
type SftpLocationResponseOutput struct{ *pulumi.OutputState }

func (SftpLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SftpLocationResponse)(nil)).Elem()
}

func (o SftpLocationResponseOutput) ToSftpLocationResponseOutput() SftpLocationResponseOutput {
	return o
}

func (o SftpLocationResponseOutput) ToSftpLocationResponseOutputWithContext(ctx context.Context) SftpLocationResponseOutput {
	return o
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o SftpLocationResponseOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpLocationResponse) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o SftpLocationResponseOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpLocationResponse) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
// Expected value is 'SftpLocation'.
func (o SftpLocationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SftpLocationResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Sftp read settings.
type SftpReadSettings struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable parallel reading within each file. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableChunking interface{} `pulumi:"disableChunking"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery interface{} `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'SftpReadSettings'.
	Type string `pulumi:"type"`
	// Sftp wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Sftp wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// SftpReadSettingsInput is an input type that accepts SftpReadSettingsArgs and SftpReadSettingsOutput values.
// You can construct a concrete instance of `SftpReadSettingsInput` via:
//
//	SftpReadSettingsArgs{...}
type SftpReadSettingsInput interface {
	pulumi.Input

	ToSftpReadSettingsOutput() SftpReadSettingsOutput
	ToSftpReadSettingsOutputWithContext(context.Context) SftpReadSettingsOutput
}

// Sftp read settings.
type SftpReadSettingsArgs struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion pulumi.Input `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable parallel reading within each file. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableChunking pulumi.Input `pulumi:"disableChunking"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery pulumi.Input `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath pulumi.Input `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd pulumi.Input `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart pulumi.Input `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath pulumi.Input `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive pulumi.Input `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'SftpReadSettings'.
	Type pulumi.StringInput `pulumi:"type"`
	// Sftp wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName pulumi.Input `pulumi:"wildcardFileName"`
	// Sftp wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath pulumi.Input `pulumi:"wildcardFolderPath"`
}

func (SftpReadSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SftpReadSettings)(nil)).Elem()
}

func (i SftpReadSettingsArgs) ToSftpReadSettingsOutput() SftpReadSettingsOutput {
	return i.ToSftpReadSettingsOutputWithContext(context.Background())
}

func (i SftpReadSettingsArgs) ToSftpReadSettingsOutputWithContext(ctx context.Context) SftpReadSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SftpReadSettingsOutput)
}

func (i SftpReadSettingsArgs) ToSftpReadSettingsPtrOutput() SftpReadSettingsPtrOutput {
	return i.ToSftpReadSettingsPtrOutputWithContext(context.Background())
}

func (i SftpReadSettingsArgs) ToSftpReadSettingsPtrOutputWithContext(ctx context.Context) SftpReadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SftpReadSettingsOutput).ToSftpReadSettingsPtrOutputWithContext(ctx)
}

// SftpReadSettingsPtrInput is an input type that accepts SftpReadSettingsArgs, SftpReadSettingsPtr and SftpReadSettingsPtrOutput values.
// You can construct a concrete instance of `SftpReadSettingsPtrInput` via:
//
//	        SftpReadSettingsArgs{...}
//
//	or:
//
//	        nil
type SftpReadSettingsPtrInput interface {
	pulumi.Input

	ToSftpReadSettingsPtrOutput() SftpReadSettingsPtrOutput
	ToSftpReadSettingsPtrOutputWithContext(context.Context) SftpReadSettingsPtrOutput
}

type sftpReadSettingsPtrType SftpReadSettingsArgs

func SftpReadSettingsPtr(v *SftpReadSettingsArgs) SftpReadSettingsPtrInput {
	return (*sftpReadSettingsPtrType)(v)
}

func (*sftpReadSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SftpReadSettings)(nil)).Elem()
}

func (i *sftpReadSettingsPtrType) ToSftpReadSettingsPtrOutput() SftpReadSettingsPtrOutput {
	return i.ToSftpReadSettingsPtrOutputWithContext(context.Background())
}

func (i *sftpReadSettingsPtrType) ToSftpReadSettingsPtrOutputWithContext(ctx context.Context) SftpReadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SftpReadSettingsPtrOutput)
}

// Sftp read settings.
type SftpReadSettingsOutput struct{ *pulumi.OutputState }

func (SftpReadSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SftpReadSettings)(nil)).Elem()
}

func (o SftpReadSettingsOutput) ToSftpReadSettingsOutput() SftpReadSettingsOutput {
	return o
}

func (o SftpReadSettingsOutput) ToSftpReadSettingsOutputWithContext(ctx context.Context) SftpReadSettingsOutput {
	return o
}

func (o SftpReadSettingsOutput) ToSftpReadSettingsPtrOutput() SftpReadSettingsPtrOutput {
	return o.ToSftpReadSettingsPtrOutputWithContext(context.Background())
}

func (o SftpReadSettingsOutput) ToSftpReadSettingsPtrOutputWithContext(ctx context.Context) SftpReadSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SftpReadSettings) *SftpReadSettings {
		return &v
	}).(SftpReadSettingsPtrOutput)
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SftpReadSettingsOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpReadSettings) interface{} { return v.DeleteFilesAfterCompletion }).(pulumi.AnyOutput)
}

// If true, disable parallel reading within each file. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SftpReadSettingsOutput) DisableChunking() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpReadSettings) interface{} { return v.DisableChunking }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SftpReadSettingsOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpReadSettings) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o SftpReadSettingsOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpReadSettings) interface{} { return v.EnablePartitionDiscovery }).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o SftpReadSettingsOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpReadSettings) interface{} { return v.FileListPath }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SftpReadSettingsOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpReadSettings) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o SftpReadSettingsOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpReadSettings) interface{} { return v.ModifiedDatetimeEnd }).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o SftpReadSettingsOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpReadSettings) interface{} { return v.ModifiedDatetimeStart }).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o SftpReadSettingsOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpReadSettings) interface{} { return v.PartitionRootPath }).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o SftpReadSettingsOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpReadSettings) interface{} { return v.Recursive }).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'SftpReadSettings'.
func (o SftpReadSettingsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SftpReadSettings) string { return v.Type }).(pulumi.StringOutput)
}

// Sftp wildcardFileName. Type: string (or Expression with resultType string).
func (o SftpReadSettingsOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpReadSettings) interface{} { return v.WildcardFileName }).(pulumi.AnyOutput)
}

// Sftp wildcardFolderPath. Type: string (or Expression with resultType string).
func (o SftpReadSettingsOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpReadSettings) interface{} { return v.WildcardFolderPath }).(pulumi.AnyOutput)
}

type SftpReadSettingsPtrOutput struct{ *pulumi.OutputState }

func (SftpReadSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SftpReadSettings)(nil)).Elem()
}

func (o SftpReadSettingsPtrOutput) ToSftpReadSettingsPtrOutput() SftpReadSettingsPtrOutput {
	return o
}

func (o SftpReadSettingsPtrOutput) ToSftpReadSettingsPtrOutputWithContext(ctx context.Context) SftpReadSettingsPtrOutput {
	return o
}

func (o SftpReadSettingsPtrOutput) Elem() SftpReadSettingsOutput {
	return o.ApplyT(func(v *SftpReadSettings) SftpReadSettings {
		if v != nil {
			return *v
		}
		var ret SftpReadSettings
		return ret
	}).(SftpReadSettingsOutput)
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SftpReadSettingsPtrOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v *SftpReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.DeleteFilesAfterCompletion
	}).(pulumi.AnyOutput)
}

// If true, disable parallel reading within each file. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SftpReadSettingsPtrOutput) DisableChunking() pulumi.AnyOutput {
	return o.ApplyT(func(v *SftpReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableChunking
	}).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SftpReadSettingsPtrOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v *SftpReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableMetricsCollection
	}).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o SftpReadSettingsPtrOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v *SftpReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.EnablePartitionDiscovery
	}).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o SftpReadSettingsPtrOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *SftpReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.FileListPath
	}).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SftpReadSettingsPtrOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v *SftpReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentConnections
	}).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o SftpReadSettingsPtrOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v *SftpReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeEnd
	}).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o SftpReadSettingsPtrOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v *SftpReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeStart
	}).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o SftpReadSettingsPtrOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *SftpReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionRootPath
	}).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o SftpReadSettingsPtrOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v *SftpReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.Recursive
	}).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'SftpReadSettings'.
func (o SftpReadSettingsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SftpReadSettings) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Sftp wildcardFileName. Type: string (or Expression with resultType string).
func (o SftpReadSettingsPtrOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v *SftpReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFileName
	}).(pulumi.AnyOutput)
}

// Sftp wildcardFolderPath. Type: string (or Expression with resultType string).
func (o SftpReadSettingsPtrOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *SftpReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFolderPath
	}).(pulumi.AnyOutput)
}

// Sftp read settings.
type SftpReadSettingsResponse struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable parallel reading within each file. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableChunking interface{} `pulumi:"disableChunking"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery interface{} `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'SftpReadSettings'.
	Type string `pulumi:"type"`
	// Sftp wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Sftp wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// Sftp read settings.
type SftpReadSettingsResponseOutput struct{ *pulumi.OutputState }

func (SftpReadSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SftpReadSettingsResponse)(nil)).Elem()
}

func (o SftpReadSettingsResponseOutput) ToSftpReadSettingsResponseOutput() SftpReadSettingsResponseOutput {
	return o
}

func (o SftpReadSettingsResponseOutput) ToSftpReadSettingsResponseOutputWithContext(ctx context.Context) SftpReadSettingsResponseOutput {
	return o
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SftpReadSettingsResponseOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpReadSettingsResponse) interface{} { return v.DeleteFilesAfterCompletion }).(pulumi.AnyOutput)
}

// If true, disable parallel reading within each file. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SftpReadSettingsResponseOutput) DisableChunking() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpReadSettingsResponse) interface{} { return v.DisableChunking }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SftpReadSettingsResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpReadSettingsResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o SftpReadSettingsResponseOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpReadSettingsResponse) interface{} { return v.EnablePartitionDiscovery }).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o SftpReadSettingsResponseOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpReadSettingsResponse) interface{} { return v.FileListPath }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SftpReadSettingsResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpReadSettingsResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o SftpReadSettingsResponseOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpReadSettingsResponse) interface{} { return v.ModifiedDatetimeEnd }).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o SftpReadSettingsResponseOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpReadSettingsResponse) interface{} { return v.ModifiedDatetimeStart }).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o SftpReadSettingsResponseOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpReadSettingsResponse) interface{} { return v.PartitionRootPath }).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o SftpReadSettingsResponseOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpReadSettingsResponse) interface{} { return v.Recursive }).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'SftpReadSettings'.
func (o SftpReadSettingsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SftpReadSettingsResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Sftp wildcardFileName. Type: string (or Expression with resultType string).
func (o SftpReadSettingsResponseOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpReadSettingsResponse) interface{} { return v.WildcardFileName }).(pulumi.AnyOutput)
}

// Sftp wildcardFolderPath. Type: string (or Expression with resultType string).
func (o SftpReadSettingsResponseOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpReadSettingsResponse) interface{} { return v.WildcardFolderPath }).(pulumi.AnyOutput)
}

type SftpReadSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (SftpReadSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SftpReadSettingsResponse)(nil)).Elem()
}

func (o SftpReadSettingsResponsePtrOutput) ToSftpReadSettingsResponsePtrOutput() SftpReadSettingsResponsePtrOutput {
	return o
}

func (o SftpReadSettingsResponsePtrOutput) ToSftpReadSettingsResponsePtrOutputWithContext(ctx context.Context) SftpReadSettingsResponsePtrOutput {
	return o
}

func (o SftpReadSettingsResponsePtrOutput) Elem() SftpReadSettingsResponseOutput {
	return o.ApplyT(func(v *SftpReadSettingsResponse) SftpReadSettingsResponse {
		if v != nil {
			return *v
		}
		var ret SftpReadSettingsResponse
		return ret
	}).(SftpReadSettingsResponseOutput)
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SftpReadSettingsResponsePtrOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v *SftpReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.DeleteFilesAfterCompletion
	}).(pulumi.AnyOutput)
}

// If true, disable parallel reading within each file. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SftpReadSettingsResponsePtrOutput) DisableChunking() pulumi.AnyOutput {
	return o.ApplyT(func(v *SftpReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableChunking
	}).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SftpReadSettingsResponsePtrOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v *SftpReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableMetricsCollection
	}).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o SftpReadSettingsResponsePtrOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v *SftpReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.EnablePartitionDiscovery
	}).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o SftpReadSettingsResponsePtrOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *SftpReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.FileListPath
	}).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SftpReadSettingsResponsePtrOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v *SftpReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentConnections
	}).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o SftpReadSettingsResponsePtrOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v *SftpReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeEnd
	}).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o SftpReadSettingsResponsePtrOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v *SftpReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeStart
	}).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o SftpReadSettingsResponsePtrOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *SftpReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionRootPath
	}).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o SftpReadSettingsResponsePtrOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v *SftpReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Recursive
	}).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'SftpReadSettings'.
func (o SftpReadSettingsResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SftpReadSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Sftp wildcardFileName. Type: string (or Expression with resultType string).
func (o SftpReadSettingsResponsePtrOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v *SftpReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFileName
	}).(pulumi.AnyOutput)
}

// Sftp wildcardFolderPath. Type: string (or Expression with resultType string).
func (o SftpReadSettingsResponsePtrOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *SftpReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFolderPath
	}).(pulumi.AnyOutput)
}

// A linked service for an SSH File Transfer Protocol (SFTP) server.
type SftpServerLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to be used to connect to the FTP server.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The SFTP server host name. Type: string (or Expression with resultType string).
	Host interface{} `pulumi:"host"`
	// The host key finger-print of the SFTP server. When SkipHostKeyValidation is false, HostKeyFingerprint should be specified. Type: string (or Expression with resultType string).
	HostKeyFingerprint interface{} `pulumi:"hostKeyFingerprint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password to decrypt the SSH private key if the SSH private key is encrypted.
	PassPhrase interface{} `pulumi:"passPhrase"`
	// Password to logon the SFTP server for Basic authentication.
	Password interface{} `pulumi:"password"`
	// The TCP port number that the SFTP server uses to listen for client connections. Default value is 22. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// Base64 encoded SSH private key content for SshPublicKey authentication. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format.
	PrivateKeyContent interface{} `pulumi:"privateKeyContent"`
	// The SSH private key file path for SshPublicKey authentication. Only valid for on-premises copy. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format. Type: string (or Expression with resultType string).
	PrivateKeyPath interface{} `pulumi:"privateKeyPath"`
	// If true, skip the SSH host key validation. Default value is false. Type: boolean (or Expression with resultType boolean).
	SkipHostKeyValidation interface{} `pulumi:"skipHostKeyValidation"`
	// Type of linked service.
	// Expected value is 'Sftp'.
	Type string `pulumi:"type"`
	// The username used to log on to the SFTP server. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// SftpServerLinkedServiceInput is an input type that accepts SftpServerLinkedServiceArgs and SftpServerLinkedServiceOutput values.
// You can construct a concrete instance of `SftpServerLinkedServiceInput` via:
//
//	SftpServerLinkedServiceArgs{...}
type SftpServerLinkedServiceInput interface {
	pulumi.Input

	ToSftpServerLinkedServiceOutput() SftpServerLinkedServiceOutput
	ToSftpServerLinkedServiceOutputWithContext(context.Context) SftpServerLinkedServiceOutput
}

// A linked service for an SSH File Transfer Protocol (SFTP) server.
type SftpServerLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication type to be used to connect to the FTP server.
	AuthenticationType pulumi.StringPtrInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// The SFTP server host name. Type: string (or Expression with resultType string).
	Host pulumi.Input `pulumi:"host"`
	// The host key finger-print of the SFTP server. When SkipHostKeyValidation is false, HostKeyFingerprint should be specified. Type: string (or Expression with resultType string).
	HostKeyFingerprint pulumi.Input `pulumi:"hostKeyFingerprint"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password to decrypt the SSH private key if the SSH private key is encrypted.
	PassPhrase pulumi.Input `pulumi:"passPhrase"`
	// Password to logon the SFTP server for Basic authentication.
	Password pulumi.Input `pulumi:"password"`
	// The TCP port number that the SFTP server uses to listen for client connections. Default value is 22. Type: integer (or Expression with resultType integer), minimum: 0.
	Port pulumi.Input `pulumi:"port"`
	// Base64 encoded SSH private key content for SshPublicKey authentication. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format.
	PrivateKeyContent pulumi.Input `pulumi:"privateKeyContent"`
	// The SSH private key file path for SshPublicKey authentication. Only valid for on-premises copy. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format. Type: string (or Expression with resultType string).
	PrivateKeyPath pulumi.Input `pulumi:"privateKeyPath"`
	// If true, skip the SSH host key validation. Default value is false. Type: boolean (or Expression with resultType boolean).
	SkipHostKeyValidation pulumi.Input `pulumi:"skipHostKeyValidation"`
	// Type of linked service.
	// Expected value is 'Sftp'.
	Type pulumi.StringInput `pulumi:"type"`
	// The username used to log on to the SFTP server. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (SftpServerLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SftpServerLinkedService)(nil)).Elem()
}

func (i SftpServerLinkedServiceArgs) ToSftpServerLinkedServiceOutput() SftpServerLinkedServiceOutput {
	return i.ToSftpServerLinkedServiceOutputWithContext(context.Background())
}

func (i SftpServerLinkedServiceArgs) ToSftpServerLinkedServiceOutputWithContext(ctx context.Context) SftpServerLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SftpServerLinkedServiceOutput)
}

// A linked service for an SSH File Transfer Protocol (SFTP) server.
type SftpServerLinkedServiceOutput struct{ *pulumi.OutputState }

func (SftpServerLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SftpServerLinkedService)(nil)).Elem()
}

func (o SftpServerLinkedServiceOutput) ToSftpServerLinkedServiceOutput() SftpServerLinkedServiceOutput {
	return o
}

func (o SftpServerLinkedServiceOutput) ToSftpServerLinkedServiceOutputWithContext(ctx context.Context) SftpServerLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SftpServerLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SftpServerLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication type to be used to connect to the FTP server.
func (o SftpServerLinkedServiceOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SftpServerLinkedService) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// The integration runtime reference.
func (o SftpServerLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v SftpServerLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o SftpServerLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SftpServerLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o SftpServerLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SftpServerLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The SFTP server host name. Type: string (or Expression with resultType string).
func (o SftpServerLinkedServiceOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpServerLinkedService) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// The host key finger-print of the SFTP server. When SkipHostKeyValidation is false, HostKeyFingerprint should be specified. Type: string (or Expression with resultType string).
func (o SftpServerLinkedServiceOutput) HostKeyFingerprint() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpServerLinkedService) interface{} { return v.HostKeyFingerprint }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SftpServerLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SftpServerLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The password to decrypt the SSH private key if the SSH private key is encrypted.
func (o SftpServerLinkedServiceOutput) PassPhrase() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpServerLinkedService) interface{} { return v.PassPhrase }).(pulumi.AnyOutput)
}

// Password to logon the SFTP server for Basic authentication.
func (o SftpServerLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpServerLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port number that the SFTP server uses to listen for client connections. Default value is 22. Type: integer (or Expression with resultType integer), minimum: 0.
func (o SftpServerLinkedServiceOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpServerLinkedService) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// Base64 encoded SSH private key content for SshPublicKey authentication. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format.
func (o SftpServerLinkedServiceOutput) PrivateKeyContent() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpServerLinkedService) interface{} { return v.PrivateKeyContent }).(pulumi.AnyOutput)
}

// The SSH private key file path for SshPublicKey authentication. Only valid for on-premises copy. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format. Type: string (or Expression with resultType string).
func (o SftpServerLinkedServiceOutput) PrivateKeyPath() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpServerLinkedService) interface{} { return v.PrivateKeyPath }).(pulumi.AnyOutput)
}

// If true, skip the SSH host key validation. Default value is false. Type: boolean (or Expression with resultType boolean).
func (o SftpServerLinkedServiceOutput) SkipHostKeyValidation() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpServerLinkedService) interface{} { return v.SkipHostKeyValidation }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Sftp'.
func (o SftpServerLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SftpServerLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The username used to log on to the SFTP server. Type: string (or Expression with resultType string).
func (o SftpServerLinkedServiceOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpServerLinkedService) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// A linked service for an SSH File Transfer Protocol (SFTP) server.
type SftpServerLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to be used to connect to the FTP server.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The SFTP server host name. Type: string (or Expression with resultType string).
	Host interface{} `pulumi:"host"`
	// The host key finger-print of the SFTP server. When SkipHostKeyValidation is false, HostKeyFingerprint should be specified. Type: string (or Expression with resultType string).
	HostKeyFingerprint interface{} `pulumi:"hostKeyFingerprint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password to decrypt the SSH private key if the SSH private key is encrypted.
	PassPhrase interface{} `pulumi:"passPhrase"`
	// Password to logon the SFTP server for Basic authentication.
	Password interface{} `pulumi:"password"`
	// The TCP port number that the SFTP server uses to listen for client connections. Default value is 22. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// Base64 encoded SSH private key content for SshPublicKey authentication. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format.
	PrivateKeyContent interface{} `pulumi:"privateKeyContent"`
	// The SSH private key file path for SshPublicKey authentication. Only valid for on-premises copy. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format. Type: string (or Expression with resultType string).
	PrivateKeyPath interface{} `pulumi:"privateKeyPath"`
	// If true, skip the SSH host key validation. Default value is false. Type: boolean (or Expression with resultType boolean).
	SkipHostKeyValidation interface{} `pulumi:"skipHostKeyValidation"`
	// Type of linked service.
	// Expected value is 'Sftp'.
	Type string `pulumi:"type"`
	// The username used to log on to the SFTP server. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// A linked service for an SSH File Transfer Protocol (SFTP) server.
type SftpServerLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SftpServerLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SftpServerLinkedServiceResponse)(nil)).Elem()
}

func (o SftpServerLinkedServiceResponseOutput) ToSftpServerLinkedServiceResponseOutput() SftpServerLinkedServiceResponseOutput {
	return o
}

func (o SftpServerLinkedServiceResponseOutput) ToSftpServerLinkedServiceResponseOutputWithContext(ctx context.Context) SftpServerLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SftpServerLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication type to be used to connect to the FTP server.
func (o SftpServerLinkedServiceResponseOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// The integration runtime reference.
func (o SftpServerLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o SftpServerLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o SftpServerLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The SFTP server host name. Type: string (or Expression with resultType string).
func (o SftpServerLinkedServiceResponseOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// The host key finger-print of the SFTP server. When SkipHostKeyValidation is false, HostKeyFingerprint should be specified. Type: string (or Expression with resultType string).
func (o SftpServerLinkedServiceResponseOutput) HostKeyFingerprint() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) interface{} { return v.HostKeyFingerprint }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SftpServerLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The password to decrypt the SSH private key if the SSH private key is encrypted.
func (o SftpServerLinkedServiceResponseOutput) PassPhrase() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) interface{} { return v.PassPhrase }).(pulumi.AnyOutput)
}

// Password to logon the SFTP server for Basic authentication.
func (o SftpServerLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port number that the SFTP server uses to listen for client connections. Default value is 22. Type: integer (or Expression with resultType integer), minimum: 0.
func (o SftpServerLinkedServiceResponseOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// Base64 encoded SSH private key content for SshPublicKey authentication. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format.
func (o SftpServerLinkedServiceResponseOutput) PrivateKeyContent() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) interface{} { return v.PrivateKeyContent }).(pulumi.AnyOutput)
}

// The SSH private key file path for SshPublicKey authentication. Only valid for on-premises copy. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format. Type: string (or Expression with resultType string).
func (o SftpServerLinkedServiceResponseOutput) PrivateKeyPath() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) interface{} { return v.PrivateKeyPath }).(pulumi.AnyOutput)
}

// If true, skip the SSH host key validation. Default value is false. Type: boolean (or Expression with resultType boolean).
func (o SftpServerLinkedServiceResponseOutput) SkipHostKeyValidation() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) interface{} { return v.SkipHostKeyValidation }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Sftp'.
func (o SftpServerLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The username used to log on to the SFTP server. Type: string (or Expression with resultType string).
func (o SftpServerLinkedServiceResponseOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpServerLinkedServiceResponse) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// Sftp write settings.
type SftpWriteSettings struct {
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
	Metadata []MetadataItem `pulumi:"metadata"`
	// Specifies the timeout for writing each chunk to SFTP server. Default value: 01:00:00 (one hour). Type: string (or Expression with resultType string).
	OperationTimeout interface{} `pulumi:"operationTimeout"`
	// The write setting type.
	// Expected value is 'SftpWriteSettings'.
	Type string `pulumi:"type"`
	// Upload to temporary file(s) and rename. Disable this option if your SFTP server doesn't support rename operation. Type: boolean (or Expression with resultType boolean).
	UseTempFileRename interface{} `pulumi:"useTempFileRename"`
}

// SftpWriteSettingsInput is an input type that accepts SftpWriteSettingsArgs and SftpWriteSettingsOutput values.
// You can construct a concrete instance of `SftpWriteSettingsInput` via:
//
//	SftpWriteSettingsArgs{...}
type SftpWriteSettingsInput interface {
	pulumi.Input

	ToSftpWriteSettingsOutput() SftpWriteSettingsOutput
	ToSftpWriteSettingsOutputWithContext(context.Context) SftpWriteSettingsOutput
}

// Sftp write settings.
type SftpWriteSettingsArgs struct {
	// The type of copy behavior for copy sink.
	CopyBehavior pulumi.Input `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
	Metadata MetadataItemArrayInput `pulumi:"metadata"`
	// Specifies the timeout for writing each chunk to SFTP server. Default value: 01:00:00 (one hour). Type: string (or Expression with resultType string).
	OperationTimeout pulumi.Input `pulumi:"operationTimeout"`
	// The write setting type.
	// Expected value is 'SftpWriteSettings'.
	Type pulumi.StringInput `pulumi:"type"`
	// Upload to temporary file(s) and rename. Disable this option if your SFTP server doesn't support rename operation. Type: boolean (or Expression with resultType boolean).
	UseTempFileRename pulumi.Input `pulumi:"useTempFileRename"`
}

func (SftpWriteSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SftpWriteSettings)(nil)).Elem()
}

func (i SftpWriteSettingsArgs) ToSftpWriteSettingsOutput() SftpWriteSettingsOutput {
	return i.ToSftpWriteSettingsOutputWithContext(context.Background())
}

func (i SftpWriteSettingsArgs) ToSftpWriteSettingsOutputWithContext(ctx context.Context) SftpWriteSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SftpWriteSettingsOutput)
}

func (i SftpWriteSettingsArgs) ToSftpWriteSettingsPtrOutput() SftpWriteSettingsPtrOutput {
	return i.ToSftpWriteSettingsPtrOutputWithContext(context.Background())
}

func (i SftpWriteSettingsArgs) ToSftpWriteSettingsPtrOutputWithContext(ctx context.Context) SftpWriteSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SftpWriteSettingsOutput).ToSftpWriteSettingsPtrOutputWithContext(ctx)
}

// SftpWriteSettingsPtrInput is an input type that accepts SftpWriteSettingsArgs, SftpWriteSettingsPtr and SftpWriteSettingsPtrOutput values.
// You can construct a concrete instance of `SftpWriteSettingsPtrInput` via:
//
//	        SftpWriteSettingsArgs{...}
//
//	or:
//
//	        nil
type SftpWriteSettingsPtrInput interface {
	pulumi.Input

	ToSftpWriteSettingsPtrOutput() SftpWriteSettingsPtrOutput
	ToSftpWriteSettingsPtrOutputWithContext(context.Context) SftpWriteSettingsPtrOutput
}

type sftpWriteSettingsPtrType SftpWriteSettingsArgs

func SftpWriteSettingsPtr(v *SftpWriteSettingsArgs) SftpWriteSettingsPtrInput {
	return (*sftpWriteSettingsPtrType)(v)
}

func (*sftpWriteSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SftpWriteSettings)(nil)).Elem()
}

func (i *sftpWriteSettingsPtrType) ToSftpWriteSettingsPtrOutput() SftpWriteSettingsPtrOutput {
	return i.ToSftpWriteSettingsPtrOutputWithContext(context.Background())
}

func (i *sftpWriteSettingsPtrType) ToSftpWriteSettingsPtrOutputWithContext(ctx context.Context) SftpWriteSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SftpWriteSettingsPtrOutput)
}

// Sftp write settings.
type SftpWriteSettingsOutput struct{ *pulumi.OutputState }

func (SftpWriteSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SftpWriteSettings)(nil)).Elem()
}

func (o SftpWriteSettingsOutput) ToSftpWriteSettingsOutput() SftpWriteSettingsOutput {
	return o
}

func (o SftpWriteSettingsOutput) ToSftpWriteSettingsOutputWithContext(ctx context.Context) SftpWriteSettingsOutput {
	return o
}

func (o SftpWriteSettingsOutput) ToSftpWriteSettingsPtrOutput() SftpWriteSettingsPtrOutput {
	return o.ToSftpWriteSettingsPtrOutputWithContext(context.Background())
}

func (o SftpWriteSettingsOutput) ToSftpWriteSettingsPtrOutputWithContext(ctx context.Context) SftpWriteSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SftpWriteSettings) *SftpWriteSettings {
		return &v
	}).(SftpWriteSettingsPtrOutput)
}

// The type of copy behavior for copy sink.
func (o SftpWriteSettingsOutput) CopyBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpWriteSettings) interface{} { return v.CopyBehavior }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SftpWriteSettingsOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpWriteSettings) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SftpWriteSettingsOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpWriteSettings) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
func (o SftpWriteSettingsOutput) Metadata() MetadataItemArrayOutput {
	return o.ApplyT(func(v SftpWriteSettings) []MetadataItem { return v.Metadata }).(MetadataItemArrayOutput)
}

// Specifies the timeout for writing each chunk to SFTP server. Default value: 01:00:00 (one hour). Type: string (or Expression with resultType string).
func (o SftpWriteSettingsOutput) OperationTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpWriteSettings) interface{} { return v.OperationTimeout }).(pulumi.AnyOutput)
}

// The write setting type.
// Expected value is 'SftpWriteSettings'.
func (o SftpWriteSettingsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SftpWriteSettings) string { return v.Type }).(pulumi.StringOutput)
}

// Upload to temporary file(s) and rename. Disable this option if your SFTP server doesn't support rename operation. Type: boolean (or Expression with resultType boolean).
func (o SftpWriteSettingsOutput) UseTempFileRename() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpWriteSettings) interface{} { return v.UseTempFileRename }).(pulumi.AnyOutput)
}

type SftpWriteSettingsPtrOutput struct{ *pulumi.OutputState }

func (SftpWriteSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SftpWriteSettings)(nil)).Elem()
}

func (o SftpWriteSettingsPtrOutput) ToSftpWriteSettingsPtrOutput() SftpWriteSettingsPtrOutput {
	return o
}

func (o SftpWriteSettingsPtrOutput) ToSftpWriteSettingsPtrOutputWithContext(ctx context.Context) SftpWriteSettingsPtrOutput {
	return o
}

func (o SftpWriteSettingsPtrOutput) Elem() SftpWriteSettingsOutput {
	return o.ApplyT(func(v *SftpWriteSettings) SftpWriteSettings {
		if v != nil {
			return *v
		}
		var ret SftpWriteSettings
		return ret
	}).(SftpWriteSettingsOutput)
}

// The type of copy behavior for copy sink.
func (o SftpWriteSettingsPtrOutput) CopyBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v *SftpWriteSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.CopyBehavior
	}).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SftpWriteSettingsPtrOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v *SftpWriteSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableMetricsCollection
	}).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SftpWriteSettingsPtrOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v *SftpWriteSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentConnections
	}).(pulumi.AnyOutput)
}

// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
func (o SftpWriteSettingsPtrOutput) Metadata() MetadataItemArrayOutput {
	return o.ApplyT(func(v *SftpWriteSettings) []MetadataItem {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(MetadataItemArrayOutput)
}

// Specifies the timeout for writing each chunk to SFTP server. Default value: 01:00:00 (one hour). Type: string (or Expression with resultType string).
func (o SftpWriteSettingsPtrOutput) OperationTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v *SftpWriteSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.OperationTimeout
	}).(pulumi.AnyOutput)
}

// The write setting type.
// Expected value is 'SftpWriteSettings'.
func (o SftpWriteSettingsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SftpWriteSettings) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Upload to temporary file(s) and rename. Disable this option if your SFTP server doesn't support rename operation. Type: boolean (or Expression with resultType boolean).
func (o SftpWriteSettingsPtrOutput) UseTempFileRename() pulumi.AnyOutput {
	return o.ApplyT(func(v *SftpWriteSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.UseTempFileRename
	}).(pulumi.AnyOutput)
}

// Sftp write settings.
type SftpWriteSettingsResponse struct {
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
	Metadata []MetadataItemResponse `pulumi:"metadata"`
	// Specifies the timeout for writing each chunk to SFTP server. Default value: 01:00:00 (one hour). Type: string (or Expression with resultType string).
	OperationTimeout interface{} `pulumi:"operationTimeout"`
	// The write setting type.
	// Expected value is 'SftpWriteSettings'.
	Type string `pulumi:"type"`
	// Upload to temporary file(s) and rename. Disable this option if your SFTP server doesn't support rename operation. Type: boolean (or Expression with resultType boolean).
	UseTempFileRename interface{} `pulumi:"useTempFileRename"`
}

// Sftp write settings.
type SftpWriteSettingsResponseOutput struct{ *pulumi.OutputState }

func (SftpWriteSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SftpWriteSettingsResponse)(nil)).Elem()
}

func (o SftpWriteSettingsResponseOutput) ToSftpWriteSettingsResponseOutput() SftpWriteSettingsResponseOutput {
	return o
}

func (o SftpWriteSettingsResponseOutput) ToSftpWriteSettingsResponseOutputWithContext(ctx context.Context) SftpWriteSettingsResponseOutput {
	return o
}

// The type of copy behavior for copy sink.
func (o SftpWriteSettingsResponseOutput) CopyBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpWriteSettingsResponse) interface{} { return v.CopyBehavior }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SftpWriteSettingsResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpWriteSettingsResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SftpWriteSettingsResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpWriteSettingsResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
func (o SftpWriteSettingsResponseOutput) Metadata() MetadataItemResponseArrayOutput {
	return o.ApplyT(func(v SftpWriteSettingsResponse) []MetadataItemResponse { return v.Metadata }).(MetadataItemResponseArrayOutput)
}

// Specifies the timeout for writing each chunk to SFTP server. Default value: 01:00:00 (one hour). Type: string (or Expression with resultType string).
func (o SftpWriteSettingsResponseOutput) OperationTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpWriteSettingsResponse) interface{} { return v.OperationTimeout }).(pulumi.AnyOutput)
}

// The write setting type.
// Expected value is 'SftpWriteSettings'.
func (o SftpWriteSettingsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SftpWriteSettingsResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Upload to temporary file(s) and rename. Disable this option if your SFTP server doesn't support rename operation. Type: boolean (or Expression with resultType boolean).
func (o SftpWriteSettingsResponseOutput) UseTempFileRename() pulumi.AnyOutput {
	return o.ApplyT(func(v SftpWriteSettingsResponse) interface{} { return v.UseTempFileRename }).(pulumi.AnyOutput)
}

type SftpWriteSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (SftpWriteSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SftpWriteSettingsResponse)(nil)).Elem()
}

func (o SftpWriteSettingsResponsePtrOutput) ToSftpWriteSettingsResponsePtrOutput() SftpWriteSettingsResponsePtrOutput {
	return o
}

func (o SftpWriteSettingsResponsePtrOutput) ToSftpWriteSettingsResponsePtrOutputWithContext(ctx context.Context) SftpWriteSettingsResponsePtrOutput {
	return o
}

func (o SftpWriteSettingsResponsePtrOutput) Elem() SftpWriteSettingsResponseOutput {
	return o.ApplyT(func(v *SftpWriteSettingsResponse) SftpWriteSettingsResponse {
		if v != nil {
			return *v
		}
		var ret SftpWriteSettingsResponse
		return ret
	}).(SftpWriteSettingsResponseOutput)
}

// The type of copy behavior for copy sink.
func (o SftpWriteSettingsResponsePtrOutput) CopyBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v *SftpWriteSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.CopyBehavior
	}).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SftpWriteSettingsResponsePtrOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v *SftpWriteSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableMetricsCollection
	}).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SftpWriteSettingsResponsePtrOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v *SftpWriteSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentConnections
	}).(pulumi.AnyOutput)
}

// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
func (o SftpWriteSettingsResponsePtrOutput) Metadata() MetadataItemResponseArrayOutput {
	return o.ApplyT(func(v *SftpWriteSettingsResponse) []MetadataItemResponse {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(MetadataItemResponseArrayOutput)
}

// Specifies the timeout for writing each chunk to SFTP server. Default value: 01:00:00 (one hour). Type: string (or Expression with resultType string).
func (o SftpWriteSettingsResponsePtrOutput) OperationTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v *SftpWriteSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.OperationTimeout
	}).(pulumi.AnyOutput)
}

// The write setting type.
// Expected value is 'SftpWriteSettings'.
func (o SftpWriteSettingsResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SftpWriteSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Upload to temporary file(s) and rename. Disable this option if your SFTP server doesn't support rename operation. Type: boolean (or Expression with resultType boolean).
func (o SftpWriteSettingsResponsePtrOutput) UseTempFileRename() pulumi.AnyOutput {
	return o.ApplyT(func(v *SftpWriteSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.UseTempFileRename
	}).(pulumi.AnyOutput)
}

// SharePoint Online List linked service.
type SharePointOnlineListLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The application (client) ID of your application registered in Azure Active Directory. Make sure to grant SharePoint site permission to this application. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The client secret of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The URL of the SharePoint Online site. For example, https://contoso.sharepoint.com/sites/siteName. Type: string (or Expression with resultType string).
	SiteUrl interface{} `pulumi:"siteUrl"`
	// The tenant ID under which your application resides. You can find it from Azure portal Active Directory overview page. Type: string (or Expression with resultType string).
	TenantId interface{} `pulumi:"tenantId"`
	// Type of linked service.
	// Expected value is 'SharePointOnlineList'.
	Type string `pulumi:"type"`
}

// SharePointOnlineListLinkedServiceInput is an input type that accepts SharePointOnlineListLinkedServiceArgs and SharePointOnlineListLinkedServiceOutput values.
// You can construct a concrete instance of `SharePointOnlineListLinkedServiceInput` via:
//
//	SharePointOnlineListLinkedServiceArgs{...}
type SharePointOnlineListLinkedServiceInput interface {
	pulumi.Input

	ToSharePointOnlineListLinkedServiceOutput() SharePointOnlineListLinkedServiceOutput
	ToSharePointOnlineListLinkedServiceOutputWithContext(context.Context) SharePointOnlineListLinkedServiceOutput
}

// SharePoint Online List linked service.
type SharePointOnlineListLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The application (client) ID of your application registered in Azure Active Directory. Make sure to grant SharePoint site permission to this application. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The client secret of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// The URL of the SharePoint Online site. For example, https://contoso.sharepoint.com/sites/siteName. Type: string (or Expression with resultType string).
	SiteUrl pulumi.Input `pulumi:"siteUrl"`
	// The tenant ID under which your application resides. You can find it from Azure portal Active Directory overview page. Type: string (or Expression with resultType string).
	TenantId pulumi.Input `pulumi:"tenantId"`
	// Type of linked service.
	// Expected value is 'SharePointOnlineList'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SharePointOnlineListLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SharePointOnlineListLinkedService)(nil)).Elem()
}

func (i SharePointOnlineListLinkedServiceArgs) ToSharePointOnlineListLinkedServiceOutput() SharePointOnlineListLinkedServiceOutput {
	return i.ToSharePointOnlineListLinkedServiceOutputWithContext(context.Background())
}

func (i SharePointOnlineListLinkedServiceArgs) ToSharePointOnlineListLinkedServiceOutputWithContext(ctx context.Context) SharePointOnlineListLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharePointOnlineListLinkedServiceOutput)
}

// SharePoint Online List linked service.
type SharePointOnlineListLinkedServiceOutput struct{ *pulumi.OutputState }

func (SharePointOnlineListLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharePointOnlineListLinkedService)(nil)).Elem()
}

func (o SharePointOnlineListLinkedServiceOutput) ToSharePointOnlineListLinkedServiceOutput() SharePointOnlineListLinkedServiceOutput {
	return o
}

func (o SharePointOnlineListLinkedServiceOutput) ToSharePointOnlineListLinkedServiceOutputWithContext(ctx context.Context) SharePointOnlineListLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SharePointOnlineListLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SharePointOnlineListLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o SharePointOnlineListLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v SharePointOnlineListLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o SharePointOnlineListLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharePointOnlineListLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o SharePointOnlineListLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharePointOnlineListLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o SharePointOnlineListLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SharePointOnlineListLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The application (client) ID of your application registered in Azure Active Directory. Make sure to grant SharePoint site permission to this application. Type: string (or Expression with resultType string).
func (o SharePointOnlineListLinkedServiceOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v SharePointOnlineListLinkedService) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The client secret of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
func (o SharePointOnlineListLinkedServiceOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v SharePointOnlineListLinkedService) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The URL of the SharePoint Online site. For example, https://contoso.sharepoint.com/sites/siteName. Type: string (or Expression with resultType string).
func (o SharePointOnlineListLinkedServiceOutput) SiteUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v SharePointOnlineListLinkedService) interface{} { return v.SiteUrl }).(pulumi.AnyOutput)
}

// The tenant ID under which your application resides. You can find it from Azure portal Active Directory overview page. Type: string (or Expression with resultType string).
func (o SharePointOnlineListLinkedServiceOutput) TenantId() pulumi.AnyOutput {
	return o.ApplyT(func(v SharePointOnlineListLinkedService) interface{} { return v.TenantId }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'SharePointOnlineList'.
func (o SharePointOnlineListLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SharePointOnlineListLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// SharePoint Online List linked service.
type SharePointOnlineListLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The application (client) ID of your application registered in Azure Active Directory. Make sure to grant SharePoint site permission to this application. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The client secret of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The URL of the SharePoint Online site. For example, https://contoso.sharepoint.com/sites/siteName. Type: string (or Expression with resultType string).
	SiteUrl interface{} `pulumi:"siteUrl"`
	// The tenant ID under which your application resides. You can find it from Azure portal Active Directory overview page. Type: string (or Expression with resultType string).
	TenantId interface{} `pulumi:"tenantId"`
	// Type of linked service.
	// Expected value is 'SharePointOnlineList'.
	Type string `pulumi:"type"`
}

// SharePoint Online List linked service.
type SharePointOnlineListLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SharePointOnlineListLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharePointOnlineListLinkedServiceResponse)(nil)).Elem()
}

func (o SharePointOnlineListLinkedServiceResponseOutput) ToSharePointOnlineListLinkedServiceResponseOutput() SharePointOnlineListLinkedServiceResponseOutput {
	return o
}

func (o SharePointOnlineListLinkedServiceResponseOutput) ToSharePointOnlineListLinkedServiceResponseOutputWithContext(ctx context.Context) SharePointOnlineListLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SharePointOnlineListLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SharePointOnlineListLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o SharePointOnlineListLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SharePointOnlineListLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o SharePointOnlineListLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharePointOnlineListLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o SharePointOnlineListLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharePointOnlineListLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o SharePointOnlineListLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SharePointOnlineListLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The application (client) ID of your application registered in Azure Active Directory. Make sure to grant SharePoint site permission to this application. Type: string (or Expression with resultType string).
func (o SharePointOnlineListLinkedServiceResponseOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v SharePointOnlineListLinkedServiceResponse) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The client secret of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
func (o SharePointOnlineListLinkedServiceResponseOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v SharePointOnlineListLinkedServiceResponse) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The URL of the SharePoint Online site. For example, https://contoso.sharepoint.com/sites/siteName. Type: string (or Expression with resultType string).
func (o SharePointOnlineListLinkedServiceResponseOutput) SiteUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v SharePointOnlineListLinkedServiceResponse) interface{} { return v.SiteUrl }).(pulumi.AnyOutput)
}

// The tenant ID under which your application resides. You can find it from Azure portal Active Directory overview page. Type: string (or Expression with resultType string).
func (o SharePointOnlineListLinkedServiceResponseOutput) TenantId() pulumi.AnyOutput {
	return o.ApplyT(func(v SharePointOnlineListLinkedServiceResponse) interface{} { return v.TenantId }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'SharePointOnlineList'.
func (o SharePointOnlineListLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SharePointOnlineListLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The sharepoint online list resource dataset.
type SharePointOnlineListResourceDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The name of the SharePoint Online list. Type: string (or Expression with resultType string).
	ListName interface{} `pulumi:"listName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SharePointOnlineListResource'.
	Type string `pulumi:"type"`
}

// SharePointOnlineListResourceDatasetInput is an input type that accepts SharePointOnlineListResourceDatasetArgs and SharePointOnlineListResourceDatasetOutput values.
// You can construct a concrete instance of `SharePointOnlineListResourceDatasetInput` via:
//
//	SharePointOnlineListResourceDatasetArgs{...}
type SharePointOnlineListResourceDatasetInput interface {
	pulumi.Input

	ToSharePointOnlineListResourceDatasetOutput() SharePointOnlineListResourceDatasetOutput
	ToSharePointOnlineListResourceDatasetOutputWithContext(context.Context) SharePointOnlineListResourceDatasetOutput
}

// The sharepoint online list resource dataset.
type SharePointOnlineListResourceDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// The name of the SharePoint Online list. Type: string (or Expression with resultType string).
	ListName pulumi.Input `pulumi:"listName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SharePointOnlineListResource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SharePointOnlineListResourceDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SharePointOnlineListResourceDataset)(nil)).Elem()
}

func (i SharePointOnlineListResourceDatasetArgs) ToSharePointOnlineListResourceDatasetOutput() SharePointOnlineListResourceDatasetOutput {
	return i.ToSharePointOnlineListResourceDatasetOutputWithContext(context.Background())
}

func (i SharePointOnlineListResourceDatasetArgs) ToSharePointOnlineListResourceDatasetOutputWithContext(ctx context.Context) SharePointOnlineListResourceDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharePointOnlineListResourceDatasetOutput)
}

// The sharepoint online list resource dataset.
type SharePointOnlineListResourceDatasetOutput struct{ *pulumi.OutputState }

func (SharePointOnlineListResourceDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharePointOnlineListResourceDataset)(nil)).Elem()
}

func (o SharePointOnlineListResourceDatasetOutput) ToSharePointOnlineListResourceDatasetOutput() SharePointOnlineListResourceDatasetOutput {
	return o
}

func (o SharePointOnlineListResourceDatasetOutput) ToSharePointOnlineListResourceDatasetOutputWithContext(ctx context.Context) SharePointOnlineListResourceDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SharePointOnlineListResourceDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SharePointOnlineListResourceDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SharePointOnlineListResourceDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharePointOnlineListResourceDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SharePointOnlineListResourceDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v SharePointOnlineListResourceDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o SharePointOnlineListResourceDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v SharePointOnlineListResourceDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// The name of the SharePoint Online list. Type: string (or Expression with resultType string).
func (o SharePointOnlineListResourceDatasetOutput) ListName() pulumi.AnyOutput {
	return o.ApplyT(func(v SharePointOnlineListResourceDataset) interface{} { return v.ListName }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o SharePointOnlineListResourceDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SharePointOnlineListResourceDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SharePointOnlineListResourceDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SharePointOnlineListResourceDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SharePointOnlineListResourceDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SharePointOnlineListResourceDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'SharePointOnlineListResource'.
func (o SharePointOnlineListResourceDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SharePointOnlineListResourceDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The sharepoint online list resource dataset.
type SharePointOnlineListResourceDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The name of the SharePoint Online list. Type: string (or Expression with resultType string).
	ListName interface{} `pulumi:"listName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'SharePointOnlineListResource'.
	Type string `pulumi:"type"`
}

// The sharepoint online list resource dataset.
type SharePointOnlineListResourceDatasetResponseOutput struct{ *pulumi.OutputState }

func (SharePointOnlineListResourceDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharePointOnlineListResourceDatasetResponse)(nil)).Elem()
}

func (o SharePointOnlineListResourceDatasetResponseOutput) ToSharePointOnlineListResourceDatasetResponseOutput() SharePointOnlineListResourceDatasetResponseOutput {
	return o
}

func (o SharePointOnlineListResourceDatasetResponseOutput) ToSharePointOnlineListResourceDatasetResponseOutputWithContext(ctx context.Context) SharePointOnlineListResourceDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SharePointOnlineListResourceDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SharePointOnlineListResourceDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SharePointOnlineListResourceDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharePointOnlineListResourceDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SharePointOnlineListResourceDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v SharePointOnlineListResourceDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o SharePointOnlineListResourceDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v SharePointOnlineListResourceDatasetResponse) LinkedServiceReferenceResponse {
		return v.LinkedServiceName
	}).(LinkedServiceReferenceResponseOutput)
}

// The name of the SharePoint Online list. Type: string (or Expression with resultType string).
func (o SharePointOnlineListResourceDatasetResponseOutput) ListName() pulumi.AnyOutput {
	return o.ApplyT(func(v SharePointOnlineListResourceDatasetResponse) interface{} { return v.ListName }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o SharePointOnlineListResourceDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SharePointOnlineListResourceDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SharePointOnlineListResourceDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SharePointOnlineListResourceDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SharePointOnlineListResourceDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SharePointOnlineListResourceDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'SharePointOnlineListResource'.
func (o SharePointOnlineListResourceDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SharePointOnlineListResourceDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity source for sharePoint online list source.
type SharePointOnlineListSource struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The wait time to get a response from SharePoint Online. Default value is 5 minutes (00:05:00). Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The OData query to filter the data in SharePoint Online list. For example, "$top=1". Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SharePointOnlineListSource'.
	Type string `pulumi:"type"`
}

// SharePointOnlineListSourceInput is an input type that accepts SharePointOnlineListSourceArgs and SharePointOnlineListSourceOutput values.
// You can construct a concrete instance of `SharePointOnlineListSourceInput` via:
//
//	SharePointOnlineListSourceArgs{...}
type SharePointOnlineListSourceInput interface {
	pulumi.Input

	ToSharePointOnlineListSourceOutput() SharePointOnlineListSourceOutput
	ToSharePointOnlineListSourceOutputWithContext(context.Context) SharePointOnlineListSourceOutput
}

// A copy activity source for sharePoint online list source.
type SharePointOnlineListSourceArgs struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The wait time to get a response from SharePoint Online. Default value is 5 minutes (00:05:00). Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout pulumi.Input `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// The OData query to filter the data in SharePoint Online list. For example, "$top=1". Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SharePointOnlineListSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SharePointOnlineListSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SharePointOnlineListSource)(nil)).Elem()
}

func (i SharePointOnlineListSourceArgs) ToSharePointOnlineListSourceOutput() SharePointOnlineListSourceOutput {
	return i.ToSharePointOnlineListSourceOutputWithContext(context.Background())
}

func (i SharePointOnlineListSourceArgs) ToSharePointOnlineListSourceOutputWithContext(ctx context.Context) SharePointOnlineListSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharePointOnlineListSourceOutput)
}

// A copy activity source for sharePoint online list source.
type SharePointOnlineListSourceOutput struct{ *pulumi.OutputState }

func (SharePointOnlineListSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharePointOnlineListSource)(nil)).Elem()
}

func (o SharePointOnlineListSourceOutput) ToSharePointOnlineListSourceOutput() SharePointOnlineListSourceOutput {
	return o
}

func (o SharePointOnlineListSourceOutput) ToSharePointOnlineListSourceOutputWithContext(ctx context.Context) SharePointOnlineListSourceOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SharePointOnlineListSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SharePointOnlineListSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The wait time to get a response from SharePoint Online. Default value is 5 minutes (00:05:00). Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SharePointOnlineListSourceOutput) HttpRequestTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SharePointOnlineListSource) interface{} { return v.HttpRequestTimeout }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SharePointOnlineListSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SharePointOnlineListSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The OData query to filter the data in SharePoint Online list. For example, "$top=1". Type: string (or Expression with resultType string).
func (o SharePointOnlineListSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v SharePointOnlineListSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o SharePointOnlineListSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SharePointOnlineListSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SharePointOnlineListSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SharePointOnlineListSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'SharePointOnlineListSource'.
func (o SharePointOnlineListSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SharePointOnlineListSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity source for sharePoint online list source.
type SharePointOnlineListSourceResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The wait time to get a response from SharePoint Online. Default value is 5 minutes (00:05:00). Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The OData query to filter the data in SharePoint Online list. For example, "$top=1". Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SharePointOnlineListSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for sharePoint online list source.
type SharePointOnlineListSourceResponseOutput struct{ *pulumi.OutputState }

func (SharePointOnlineListSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharePointOnlineListSourceResponse)(nil)).Elem()
}

func (o SharePointOnlineListSourceResponseOutput) ToSharePointOnlineListSourceResponseOutput() SharePointOnlineListSourceResponseOutput {
	return o
}

func (o SharePointOnlineListSourceResponseOutput) ToSharePointOnlineListSourceResponseOutputWithContext(ctx context.Context) SharePointOnlineListSourceResponseOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SharePointOnlineListSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SharePointOnlineListSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The wait time to get a response from SharePoint Online. Default value is 5 minutes (00:05:00). Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SharePointOnlineListSourceResponseOutput) HttpRequestTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SharePointOnlineListSourceResponse) interface{} { return v.HttpRequestTimeout }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SharePointOnlineListSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SharePointOnlineListSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The OData query to filter the data in SharePoint Online list. For example, "$top=1". Type: string (or Expression with resultType string).
func (o SharePointOnlineListSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v SharePointOnlineListSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o SharePointOnlineListSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SharePointOnlineListSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SharePointOnlineListSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SharePointOnlineListSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'SharePointOnlineListSource'.
func (o SharePointOnlineListSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SharePointOnlineListSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Shopify Service linked service.
type ShopifyLinkedService struct {
	// The API access token that can be used to access Shopify’s data. The token won't expire if it is offline mode.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The endpoint of the Shopify server. (i.e. mystore.myshopify.com)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Shopify'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// ShopifyLinkedServiceInput is an input type that accepts ShopifyLinkedServiceArgs and ShopifyLinkedServiceOutput values.
// You can construct a concrete instance of `ShopifyLinkedServiceInput` via:
//
//	ShopifyLinkedServiceArgs{...}
type ShopifyLinkedServiceInput interface {
	pulumi.Input

	ToShopifyLinkedServiceOutput() ShopifyLinkedServiceOutput
	ToShopifyLinkedServiceOutputWithContext(context.Context) ShopifyLinkedServiceOutput
}

// Shopify Service linked service.
type ShopifyLinkedServiceArgs struct {
	// The API access token that can be used to access Shopify’s data. The token won't expire if it is offline mode.
	AccessToken pulumi.Input `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// The endpoint of the Shopify server. (i.e. mystore.myshopify.com)
	Host pulumi.Input `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Shopify'.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
}

func (ShopifyLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ShopifyLinkedService)(nil)).Elem()
}

func (i ShopifyLinkedServiceArgs) ToShopifyLinkedServiceOutput() ShopifyLinkedServiceOutput {
	return i.ToShopifyLinkedServiceOutputWithContext(context.Background())
}

func (i ShopifyLinkedServiceArgs) ToShopifyLinkedServiceOutputWithContext(ctx context.Context) ShopifyLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShopifyLinkedServiceOutput)
}

// Shopify Service linked service.
type ShopifyLinkedServiceOutput struct{ *pulumi.OutputState }

func (ShopifyLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShopifyLinkedService)(nil)).Elem()
}

func (o ShopifyLinkedServiceOutput) ToShopifyLinkedServiceOutput() ShopifyLinkedServiceOutput {
	return o
}

func (o ShopifyLinkedServiceOutput) ToShopifyLinkedServiceOutputWithContext(ctx context.Context) ShopifyLinkedServiceOutput {
	return o
}

// The API access token that can be used to access Shopify’s data. The token won't expire if it is offline mode.
func (o ShopifyLinkedServiceOutput) AccessToken() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifyLinkedService) interface{} { return v.AccessToken }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o ShopifyLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ShopifyLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o ShopifyLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v ShopifyLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o ShopifyLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ShopifyLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o ShopifyLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ShopifyLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The endpoint of the Shopify server. (i.e. mystore.myshopify.com)
func (o ShopifyLinkedServiceOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifyLinkedService) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o ShopifyLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v ShopifyLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
// Expected value is 'Shopify'.
func (o ShopifyLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ShopifyLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o ShopifyLinkedServiceOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifyLinkedService) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o ShopifyLinkedServiceOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifyLinkedService) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o ShopifyLinkedServiceOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifyLinkedService) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// Shopify Service linked service.
type ShopifyLinkedServiceResponse struct {
	// The API access token that can be used to access Shopify’s data. The token won't expire if it is offline mode.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The endpoint of the Shopify server. (i.e. mystore.myshopify.com)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Shopify'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Shopify Service linked service.
type ShopifyLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (ShopifyLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShopifyLinkedServiceResponse)(nil)).Elem()
}

func (o ShopifyLinkedServiceResponseOutput) ToShopifyLinkedServiceResponseOutput() ShopifyLinkedServiceResponseOutput {
	return o
}

func (o ShopifyLinkedServiceResponseOutput) ToShopifyLinkedServiceResponseOutputWithContext(ctx context.Context) ShopifyLinkedServiceResponseOutput {
	return o
}

// The API access token that can be used to access Shopify’s data. The token won't expire if it is offline mode.
func (o ShopifyLinkedServiceResponseOutput) AccessToken() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifyLinkedServiceResponse) interface{} { return v.AccessToken }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o ShopifyLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ShopifyLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o ShopifyLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v ShopifyLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o ShopifyLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ShopifyLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o ShopifyLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ShopifyLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The endpoint of the Shopify server. (i.e. mystore.myshopify.com)
func (o ShopifyLinkedServiceResponseOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifyLinkedServiceResponse) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o ShopifyLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ShopifyLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
// Expected value is 'Shopify'.
func (o ShopifyLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ShopifyLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o ShopifyLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifyLinkedServiceResponse) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o ShopifyLinkedServiceResponseOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifyLinkedServiceResponse) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o ShopifyLinkedServiceResponseOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifyLinkedServiceResponse) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// Shopify Service dataset.
type ShopifyObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'ShopifyObject'.
	Type string `pulumi:"type"`
}

// ShopifyObjectDatasetInput is an input type that accepts ShopifyObjectDatasetArgs and ShopifyObjectDatasetOutput values.
// You can construct a concrete instance of `ShopifyObjectDatasetInput` via:
//
//	ShopifyObjectDatasetArgs{...}
type ShopifyObjectDatasetInput interface {
	pulumi.Input

	ToShopifyObjectDatasetOutput() ShopifyObjectDatasetOutput
	ToShopifyObjectDatasetOutputWithContext(context.Context) ShopifyObjectDatasetOutput
}

// Shopify Service dataset.
type ShopifyObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'ShopifyObject'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ShopifyObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ShopifyObjectDataset)(nil)).Elem()
}

func (i ShopifyObjectDatasetArgs) ToShopifyObjectDatasetOutput() ShopifyObjectDatasetOutput {
	return i.ToShopifyObjectDatasetOutputWithContext(context.Background())
}

func (i ShopifyObjectDatasetArgs) ToShopifyObjectDatasetOutputWithContext(ctx context.Context) ShopifyObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShopifyObjectDatasetOutput)
}

// Shopify Service dataset.
type ShopifyObjectDatasetOutput struct{ *pulumi.OutputState }

func (ShopifyObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShopifyObjectDataset)(nil)).Elem()
}

func (o ShopifyObjectDatasetOutput) ToShopifyObjectDatasetOutput() ShopifyObjectDatasetOutput {
	return o
}

func (o ShopifyObjectDatasetOutput) ToShopifyObjectDatasetOutputWithContext(ctx context.Context) ShopifyObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ShopifyObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ShopifyObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o ShopifyObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ShopifyObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o ShopifyObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v ShopifyObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o ShopifyObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v ShopifyObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o ShopifyObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v ShopifyObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o ShopifyObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifyObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ShopifyObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifyObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o ShopifyObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifyObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'ShopifyObject'.
func (o ShopifyObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ShopifyObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Shopify Service dataset.
type ShopifyObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'ShopifyObject'.
	Type string `pulumi:"type"`
}

// Shopify Service dataset.
type ShopifyObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (ShopifyObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShopifyObjectDatasetResponse)(nil)).Elem()
}

func (o ShopifyObjectDatasetResponseOutput) ToShopifyObjectDatasetResponseOutput() ShopifyObjectDatasetResponseOutput {
	return o
}

func (o ShopifyObjectDatasetResponseOutput) ToShopifyObjectDatasetResponseOutputWithContext(ctx context.Context) ShopifyObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ShopifyObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ShopifyObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o ShopifyObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ShopifyObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o ShopifyObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v ShopifyObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o ShopifyObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v ShopifyObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o ShopifyObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ShopifyObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o ShopifyObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifyObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ShopifyObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifyObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o ShopifyObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifyObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'ShopifyObject'.
func (o ShopifyObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ShopifyObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Shopify Service source.
type ShopifySource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ShopifySource'.
	Type string `pulumi:"type"`
}

// ShopifySourceInput is an input type that accepts ShopifySourceArgs and ShopifySourceOutput values.
// You can construct a concrete instance of `ShopifySourceInput` via:
//
//	ShopifySourceArgs{...}
type ShopifySourceInput interface {
	pulumi.Input

	ToShopifySourceOutput() ShopifySourceOutput
	ToShopifySourceOutputWithContext(context.Context) ShopifySourceOutput
}

// A copy activity Shopify Service source.
type ShopifySourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ShopifySource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ShopifySourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ShopifySource)(nil)).Elem()
}

func (i ShopifySourceArgs) ToShopifySourceOutput() ShopifySourceOutput {
	return i.ToShopifySourceOutputWithContext(context.Background())
}

func (i ShopifySourceArgs) ToShopifySourceOutputWithContext(ctx context.Context) ShopifySourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShopifySourceOutput)
}

// A copy activity Shopify Service source.
type ShopifySourceOutput struct{ *pulumi.OutputState }

func (ShopifySourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShopifySource)(nil)).Elem()
}

func (o ShopifySourceOutput) ToShopifySourceOutput() ShopifySourceOutput {
	return o
}

func (o ShopifySourceOutput) ToShopifySourceOutputWithContext(ctx context.Context) ShopifySourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o ShopifySourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifySource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o ShopifySourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifySource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o ShopifySourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifySource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o ShopifySourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifySource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ShopifySourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifySource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o ShopifySourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifySource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ShopifySourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifySource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'ShopifySource'.
func (o ShopifySourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ShopifySource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Shopify Service source.
type ShopifySourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ShopifySource'.
	Type string `pulumi:"type"`
}

// A copy activity Shopify Service source.
type ShopifySourceResponseOutput struct{ *pulumi.OutputState }

func (ShopifySourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShopifySourceResponse)(nil)).Elem()
}

func (o ShopifySourceResponseOutput) ToShopifySourceResponseOutput() ShopifySourceResponseOutput {
	return o
}

func (o ShopifySourceResponseOutput) ToShopifySourceResponseOutputWithContext(ctx context.Context) ShopifySourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o ShopifySourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifySourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o ShopifySourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifySourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o ShopifySourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifySourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o ShopifySourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifySourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ShopifySourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifySourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o ShopifySourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifySourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ShopifySourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v ShopifySourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'ShopifySource'.
func (o ShopifySourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ShopifySourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Skip error file.
type SkipErrorFile struct {
	// Skip if source/sink file changed by other concurrent write. Default is false. Type: boolean (or Expression with resultType boolean).
	DataInconsistency interface{} `pulumi:"dataInconsistency"`
	// Skip if file is deleted by other client during copy. Default is true. Type: boolean (or Expression with resultType boolean).
	FileMissing interface{} `pulumi:"fileMissing"`
}

// SkipErrorFileInput is an input type that accepts SkipErrorFileArgs and SkipErrorFileOutput values.
// You can construct a concrete instance of `SkipErrorFileInput` via:
//
//	SkipErrorFileArgs{...}
type SkipErrorFileInput interface {
	pulumi.Input

	ToSkipErrorFileOutput() SkipErrorFileOutput
	ToSkipErrorFileOutputWithContext(context.Context) SkipErrorFileOutput
}

// Skip error file.
type SkipErrorFileArgs struct {
	// Skip if source/sink file changed by other concurrent write. Default is false. Type: boolean (or Expression with resultType boolean).
	DataInconsistency pulumi.Input `pulumi:"dataInconsistency"`
	// Skip if file is deleted by other client during copy. Default is true. Type: boolean (or Expression with resultType boolean).
	FileMissing pulumi.Input `pulumi:"fileMissing"`
}

func (SkipErrorFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SkipErrorFile)(nil)).Elem()
}

func (i SkipErrorFileArgs) ToSkipErrorFileOutput() SkipErrorFileOutput {
	return i.ToSkipErrorFileOutputWithContext(context.Background())
}

func (i SkipErrorFileArgs) ToSkipErrorFileOutputWithContext(ctx context.Context) SkipErrorFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkipErrorFileOutput)
}

func (i SkipErrorFileArgs) ToSkipErrorFilePtrOutput() SkipErrorFilePtrOutput {
	return i.ToSkipErrorFilePtrOutputWithContext(context.Background())
}

func (i SkipErrorFileArgs) ToSkipErrorFilePtrOutputWithContext(ctx context.Context) SkipErrorFilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkipErrorFileOutput).ToSkipErrorFilePtrOutputWithContext(ctx)
}

// SkipErrorFilePtrInput is an input type that accepts SkipErrorFileArgs, SkipErrorFilePtr and SkipErrorFilePtrOutput values.
// You can construct a concrete instance of `SkipErrorFilePtrInput` via:
//
//	        SkipErrorFileArgs{...}
//
//	or:
//
//	        nil
type SkipErrorFilePtrInput interface {
	pulumi.Input

	ToSkipErrorFilePtrOutput() SkipErrorFilePtrOutput
	ToSkipErrorFilePtrOutputWithContext(context.Context) SkipErrorFilePtrOutput
}

type skipErrorFilePtrType SkipErrorFileArgs

func SkipErrorFilePtr(v *SkipErrorFileArgs) SkipErrorFilePtrInput {
	return (*skipErrorFilePtrType)(v)
}

func (*skipErrorFilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SkipErrorFile)(nil)).Elem()
}

func (i *skipErrorFilePtrType) ToSkipErrorFilePtrOutput() SkipErrorFilePtrOutput {
	return i.ToSkipErrorFilePtrOutputWithContext(context.Background())
}

func (i *skipErrorFilePtrType) ToSkipErrorFilePtrOutputWithContext(ctx context.Context) SkipErrorFilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkipErrorFilePtrOutput)
}

// Skip error file.
type SkipErrorFileOutput struct{ *pulumi.OutputState }

func (SkipErrorFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkipErrorFile)(nil)).Elem()
}

func (o SkipErrorFileOutput) ToSkipErrorFileOutput() SkipErrorFileOutput {
	return o
}

func (o SkipErrorFileOutput) ToSkipErrorFileOutputWithContext(ctx context.Context) SkipErrorFileOutput {
	return o
}

func (o SkipErrorFileOutput) ToSkipErrorFilePtrOutput() SkipErrorFilePtrOutput {
	return o.ToSkipErrorFilePtrOutputWithContext(context.Background())
}

func (o SkipErrorFileOutput) ToSkipErrorFilePtrOutputWithContext(ctx context.Context) SkipErrorFilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SkipErrorFile) *SkipErrorFile {
		return &v
	}).(SkipErrorFilePtrOutput)
}

// Skip if source/sink file changed by other concurrent write. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SkipErrorFileOutput) DataInconsistency() pulumi.AnyOutput {
	return o.ApplyT(func(v SkipErrorFile) interface{} { return v.DataInconsistency }).(pulumi.AnyOutput)
}

// Skip if file is deleted by other client during copy. Default is true. Type: boolean (or Expression with resultType boolean).
func (o SkipErrorFileOutput) FileMissing() pulumi.AnyOutput {
	return o.ApplyT(func(v SkipErrorFile) interface{} { return v.FileMissing }).(pulumi.AnyOutput)
}

type SkipErrorFilePtrOutput struct{ *pulumi.OutputState }

func (SkipErrorFilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkipErrorFile)(nil)).Elem()
}

func (o SkipErrorFilePtrOutput) ToSkipErrorFilePtrOutput() SkipErrorFilePtrOutput {
	return o
}

func (o SkipErrorFilePtrOutput) ToSkipErrorFilePtrOutputWithContext(ctx context.Context) SkipErrorFilePtrOutput {
	return o
}

func (o SkipErrorFilePtrOutput) Elem() SkipErrorFileOutput {
	return o.ApplyT(func(v *SkipErrorFile) SkipErrorFile {
		if v != nil {
			return *v
		}
		var ret SkipErrorFile
		return ret
	}).(SkipErrorFileOutput)
}

// Skip if source/sink file changed by other concurrent write. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SkipErrorFilePtrOutput) DataInconsistency() pulumi.AnyOutput {
	return o.ApplyT(func(v *SkipErrorFile) interface{} {
		if v == nil {
			return nil
		}
		return v.DataInconsistency
	}).(pulumi.AnyOutput)
}

// Skip if file is deleted by other client during copy. Default is true. Type: boolean (or Expression with resultType boolean).
func (o SkipErrorFilePtrOutput) FileMissing() pulumi.AnyOutput {
	return o.ApplyT(func(v *SkipErrorFile) interface{} {
		if v == nil {
			return nil
		}
		return v.FileMissing
	}).(pulumi.AnyOutput)
}

// Skip error file.
type SkipErrorFileResponse struct {
	// Skip if source/sink file changed by other concurrent write. Default is false. Type: boolean (or Expression with resultType boolean).
	DataInconsistency interface{} `pulumi:"dataInconsistency"`
	// Skip if file is deleted by other client during copy. Default is true. Type: boolean (or Expression with resultType boolean).
	FileMissing interface{} `pulumi:"fileMissing"`
}

// Skip error file.
type SkipErrorFileResponseOutput struct{ *pulumi.OutputState }

func (SkipErrorFileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkipErrorFileResponse)(nil)).Elem()
}

func (o SkipErrorFileResponseOutput) ToSkipErrorFileResponseOutput() SkipErrorFileResponseOutput {
	return o
}

func (o SkipErrorFileResponseOutput) ToSkipErrorFileResponseOutputWithContext(ctx context.Context) SkipErrorFileResponseOutput {
	return o
}

// Skip if source/sink file changed by other concurrent write. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SkipErrorFileResponseOutput) DataInconsistency() pulumi.AnyOutput {
	return o.ApplyT(func(v SkipErrorFileResponse) interface{} { return v.DataInconsistency }).(pulumi.AnyOutput)
}

// Skip if file is deleted by other client during copy. Default is true. Type: boolean (or Expression with resultType boolean).
func (o SkipErrorFileResponseOutput) FileMissing() pulumi.AnyOutput {
	return o.ApplyT(func(v SkipErrorFileResponse) interface{} { return v.FileMissing }).(pulumi.AnyOutput)
}

type SkipErrorFileResponsePtrOutput struct{ *pulumi.OutputState }

func (SkipErrorFileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkipErrorFileResponse)(nil)).Elem()
}

func (o SkipErrorFileResponsePtrOutput) ToSkipErrorFileResponsePtrOutput() SkipErrorFileResponsePtrOutput {
	return o
}

func (o SkipErrorFileResponsePtrOutput) ToSkipErrorFileResponsePtrOutputWithContext(ctx context.Context) SkipErrorFileResponsePtrOutput {
	return o
}

func (o SkipErrorFileResponsePtrOutput) Elem() SkipErrorFileResponseOutput {
	return o.ApplyT(func(v *SkipErrorFileResponse) SkipErrorFileResponse {
		if v != nil {
			return *v
		}
		var ret SkipErrorFileResponse
		return ret
	}).(SkipErrorFileResponseOutput)
}

// Skip if source/sink file changed by other concurrent write. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SkipErrorFileResponsePtrOutput) DataInconsistency() pulumi.AnyOutput {
	return o.ApplyT(func(v *SkipErrorFileResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.DataInconsistency
	}).(pulumi.AnyOutput)
}

// Skip if file is deleted by other client during copy. Default is true. Type: boolean (or Expression with resultType boolean).
func (o SkipErrorFileResponsePtrOutput) FileMissing() pulumi.AnyOutput {
	return o.ApplyT(func(v *SkipErrorFileResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.FileMissing
	}).(pulumi.AnyOutput)
}

// Linked service for Smartsheet.
type SmartsheetLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The api token for the Smartsheet source.
	ApiToken interface{} `pulumi:"apiToken"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Smartsheet'.
	Type string `pulumi:"type"`
}

// SmartsheetLinkedServiceInput is an input type that accepts SmartsheetLinkedServiceArgs and SmartsheetLinkedServiceOutput values.
// You can construct a concrete instance of `SmartsheetLinkedServiceInput` via:
//
//	SmartsheetLinkedServiceArgs{...}
type SmartsheetLinkedServiceInput interface {
	pulumi.Input

	ToSmartsheetLinkedServiceOutput() SmartsheetLinkedServiceOutput
	ToSmartsheetLinkedServiceOutputWithContext(context.Context) SmartsheetLinkedServiceOutput
}

// Linked service for Smartsheet.
type SmartsheetLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The api token for the Smartsheet source.
	ApiToken pulumi.Input `pulumi:"apiToken"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Smartsheet'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SmartsheetLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SmartsheetLinkedService)(nil)).Elem()
}

func (i SmartsheetLinkedServiceArgs) ToSmartsheetLinkedServiceOutput() SmartsheetLinkedServiceOutput {
	return i.ToSmartsheetLinkedServiceOutputWithContext(context.Background())
}

func (i SmartsheetLinkedServiceArgs) ToSmartsheetLinkedServiceOutputWithContext(ctx context.Context) SmartsheetLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmartsheetLinkedServiceOutput)
}

// Linked service for Smartsheet.
type SmartsheetLinkedServiceOutput struct{ *pulumi.OutputState }

func (SmartsheetLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SmartsheetLinkedService)(nil)).Elem()
}

func (o SmartsheetLinkedServiceOutput) ToSmartsheetLinkedServiceOutput() SmartsheetLinkedServiceOutput {
	return o
}

func (o SmartsheetLinkedServiceOutput) ToSmartsheetLinkedServiceOutputWithContext(ctx context.Context) SmartsheetLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SmartsheetLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SmartsheetLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The api token for the Smartsheet source.
func (o SmartsheetLinkedServiceOutput) ApiToken() pulumi.AnyOutput {
	return o.ApplyT(func(v SmartsheetLinkedService) interface{} { return v.ApiToken }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o SmartsheetLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v SmartsheetLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o SmartsheetLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SmartsheetLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o SmartsheetLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SmartsheetLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o SmartsheetLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SmartsheetLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
// Expected value is 'Smartsheet'.
func (o SmartsheetLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SmartsheetLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for Smartsheet.
type SmartsheetLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The api token for the Smartsheet source.
	ApiToken interface{} `pulumi:"apiToken"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Smartsheet'.
	Type string `pulumi:"type"`
}

// Linked service for Smartsheet.
type SmartsheetLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SmartsheetLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SmartsheetLinkedServiceResponse)(nil)).Elem()
}

func (o SmartsheetLinkedServiceResponseOutput) ToSmartsheetLinkedServiceResponseOutput() SmartsheetLinkedServiceResponseOutput {
	return o
}

func (o SmartsheetLinkedServiceResponseOutput) ToSmartsheetLinkedServiceResponseOutputWithContext(ctx context.Context) SmartsheetLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SmartsheetLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SmartsheetLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The api token for the Smartsheet source.
func (o SmartsheetLinkedServiceResponseOutput) ApiToken() pulumi.AnyOutput {
	return o.ApplyT(func(v SmartsheetLinkedServiceResponse) interface{} { return v.ApiToken }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o SmartsheetLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SmartsheetLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o SmartsheetLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SmartsheetLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o SmartsheetLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SmartsheetLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o SmartsheetLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SmartsheetLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
// Expected value is 'Smartsheet'.
func (o SmartsheetLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SmartsheetLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The snowflake dataset.
type SnowflakeDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Snowflake database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'SnowflakeTable'.
	Type string `pulumi:"type"`
}

// SnowflakeDatasetInput is an input type that accepts SnowflakeDatasetArgs and SnowflakeDatasetOutput values.
// You can construct a concrete instance of `SnowflakeDatasetInput` via:
//
//	SnowflakeDatasetArgs{...}
type SnowflakeDatasetInput interface {
	pulumi.Input

	ToSnowflakeDatasetOutput() SnowflakeDatasetOutput
	ToSnowflakeDatasetOutputWithContext(context.Context) SnowflakeDatasetOutput
}

// The snowflake dataset.
type SnowflakeDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Snowflake database. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'SnowflakeTable'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SnowflakeDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnowflakeDataset)(nil)).Elem()
}

func (i SnowflakeDatasetArgs) ToSnowflakeDatasetOutput() SnowflakeDatasetOutput {
	return i.ToSnowflakeDatasetOutputWithContext(context.Background())
}

func (i SnowflakeDatasetArgs) ToSnowflakeDatasetOutputWithContext(ctx context.Context) SnowflakeDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnowflakeDatasetOutput)
}

// The snowflake dataset.
type SnowflakeDatasetOutput struct{ *pulumi.OutputState }

func (SnowflakeDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnowflakeDataset)(nil)).Elem()
}

func (o SnowflakeDatasetOutput) ToSnowflakeDatasetOutput() SnowflakeDatasetOutput {
	return o
}

func (o SnowflakeDatasetOutput) ToSnowflakeDatasetOutputWithContext(ctx context.Context) SnowflakeDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SnowflakeDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SnowflakeDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SnowflakeDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnowflakeDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SnowflakeDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v SnowflakeDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o SnowflakeDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v SnowflakeDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o SnowflakeDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SnowflakeDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SnowflakeDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SnowflakeDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Snowflake database. Type: string (or Expression with resultType string).
func (o SnowflakeDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'SnowflakeTable'.
func (o SnowflakeDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SnowflakeDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The snowflake dataset.
type SnowflakeDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Snowflake database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'SnowflakeTable'.
	Type string `pulumi:"type"`
}

// The snowflake dataset.
type SnowflakeDatasetResponseOutput struct{ *pulumi.OutputState }

func (SnowflakeDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnowflakeDatasetResponse)(nil)).Elem()
}

func (o SnowflakeDatasetResponseOutput) ToSnowflakeDatasetResponseOutput() SnowflakeDatasetResponseOutput {
	return o
}

func (o SnowflakeDatasetResponseOutput) ToSnowflakeDatasetResponseOutputWithContext(ctx context.Context) SnowflakeDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SnowflakeDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SnowflakeDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SnowflakeDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnowflakeDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SnowflakeDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v SnowflakeDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o SnowflakeDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v SnowflakeDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o SnowflakeDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SnowflakeDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SnowflakeDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SnowflakeDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Snowflake database. Type: string (or Expression with resultType string).
func (o SnowflakeDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'SnowflakeTable'.
func (o SnowflakeDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SnowflakeDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Snowflake export command settings.
type SnowflakeExportCopyCommand struct {
	// Additional copy options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalCopyOptions": { "DATE_FORMAT": "MM/DD/YYYY", "TIME_FORMAT": "'HH24:MI:SS.FF'" }
	AdditionalCopyOptions map[string]interface{} `pulumi:"additionalCopyOptions"`
	// Additional format options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalFormatOptions": { "OVERWRITE": "TRUE", "MAX_FILE_SIZE": "'FALSE'" }
	AdditionalFormatOptions map[string]interface{} `pulumi:"additionalFormatOptions"`
	// The export setting type.
	// Expected value is 'SnowflakeExportCopyCommand'.
	Type string `pulumi:"type"`
}

// SnowflakeExportCopyCommandInput is an input type that accepts SnowflakeExportCopyCommandArgs and SnowflakeExportCopyCommandOutput values.
// You can construct a concrete instance of `SnowflakeExportCopyCommandInput` via:
//
//	SnowflakeExportCopyCommandArgs{...}
type SnowflakeExportCopyCommandInput interface {
	pulumi.Input

	ToSnowflakeExportCopyCommandOutput() SnowflakeExportCopyCommandOutput
	ToSnowflakeExportCopyCommandOutputWithContext(context.Context) SnowflakeExportCopyCommandOutput
}

// Snowflake export command settings.
type SnowflakeExportCopyCommandArgs struct {
	// Additional copy options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalCopyOptions": { "DATE_FORMAT": "MM/DD/YYYY", "TIME_FORMAT": "'HH24:MI:SS.FF'" }
	AdditionalCopyOptions pulumi.MapInput `pulumi:"additionalCopyOptions"`
	// Additional format options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalFormatOptions": { "OVERWRITE": "TRUE", "MAX_FILE_SIZE": "'FALSE'" }
	AdditionalFormatOptions pulumi.MapInput `pulumi:"additionalFormatOptions"`
	// The export setting type.
	// Expected value is 'SnowflakeExportCopyCommand'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SnowflakeExportCopyCommandArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnowflakeExportCopyCommand)(nil)).Elem()
}

func (i SnowflakeExportCopyCommandArgs) ToSnowflakeExportCopyCommandOutput() SnowflakeExportCopyCommandOutput {
	return i.ToSnowflakeExportCopyCommandOutputWithContext(context.Background())
}

func (i SnowflakeExportCopyCommandArgs) ToSnowflakeExportCopyCommandOutputWithContext(ctx context.Context) SnowflakeExportCopyCommandOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnowflakeExportCopyCommandOutput)
}

// Snowflake export command settings.
type SnowflakeExportCopyCommandOutput struct{ *pulumi.OutputState }

func (SnowflakeExportCopyCommandOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnowflakeExportCopyCommand)(nil)).Elem()
}

func (o SnowflakeExportCopyCommandOutput) ToSnowflakeExportCopyCommandOutput() SnowflakeExportCopyCommandOutput {
	return o
}

func (o SnowflakeExportCopyCommandOutput) ToSnowflakeExportCopyCommandOutputWithContext(ctx context.Context) SnowflakeExportCopyCommandOutput {
	return o
}

// Additional copy options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalCopyOptions": { "DATE_FORMAT": "MM/DD/YYYY", "TIME_FORMAT": "'HH24:MI:SS.FF'" }
func (o SnowflakeExportCopyCommandOutput) AdditionalCopyOptions() pulumi.MapOutput {
	return o.ApplyT(func(v SnowflakeExportCopyCommand) map[string]interface{} { return v.AdditionalCopyOptions }).(pulumi.MapOutput)
}

// Additional format options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalFormatOptions": { "OVERWRITE": "TRUE", "MAX_FILE_SIZE": "'FALSE'" }
func (o SnowflakeExportCopyCommandOutput) AdditionalFormatOptions() pulumi.MapOutput {
	return o.ApplyT(func(v SnowflakeExportCopyCommand) map[string]interface{} { return v.AdditionalFormatOptions }).(pulumi.MapOutput)
}

// The export setting type.
// Expected value is 'SnowflakeExportCopyCommand'.
func (o SnowflakeExportCopyCommandOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SnowflakeExportCopyCommand) string { return v.Type }).(pulumi.StringOutput)
}

// Snowflake export command settings.
type SnowflakeExportCopyCommandResponse struct {
	// Additional copy options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalCopyOptions": { "DATE_FORMAT": "MM/DD/YYYY", "TIME_FORMAT": "'HH24:MI:SS.FF'" }
	AdditionalCopyOptions map[string]interface{} `pulumi:"additionalCopyOptions"`
	// Additional format options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalFormatOptions": { "OVERWRITE": "TRUE", "MAX_FILE_SIZE": "'FALSE'" }
	AdditionalFormatOptions map[string]interface{} `pulumi:"additionalFormatOptions"`
	// The export setting type.
	// Expected value is 'SnowflakeExportCopyCommand'.
	Type string `pulumi:"type"`
}

// Snowflake export command settings.
type SnowflakeExportCopyCommandResponseOutput struct{ *pulumi.OutputState }

func (SnowflakeExportCopyCommandResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnowflakeExportCopyCommandResponse)(nil)).Elem()
}

func (o SnowflakeExportCopyCommandResponseOutput) ToSnowflakeExportCopyCommandResponseOutput() SnowflakeExportCopyCommandResponseOutput {
	return o
}

func (o SnowflakeExportCopyCommandResponseOutput) ToSnowflakeExportCopyCommandResponseOutputWithContext(ctx context.Context) SnowflakeExportCopyCommandResponseOutput {
	return o
}

// Additional copy options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalCopyOptions": { "DATE_FORMAT": "MM/DD/YYYY", "TIME_FORMAT": "'HH24:MI:SS.FF'" }
func (o SnowflakeExportCopyCommandResponseOutput) AdditionalCopyOptions() pulumi.MapOutput {
	return o.ApplyT(func(v SnowflakeExportCopyCommandResponse) map[string]interface{} { return v.AdditionalCopyOptions }).(pulumi.MapOutput)
}

// Additional format options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalFormatOptions": { "OVERWRITE": "TRUE", "MAX_FILE_SIZE": "'FALSE'" }
func (o SnowflakeExportCopyCommandResponseOutput) AdditionalFormatOptions() pulumi.MapOutput {
	return o.ApplyT(func(v SnowflakeExportCopyCommandResponse) map[string]interface{} { return v.AdditionalFormatOptions }).(pulumi.MapOutput)
}

// The export setting type.
// Expected value is 'SnowflakeExportCopyCommand'.
func (o SnowflakeExportCopyCommandResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SnowflakeExportCopyCommandResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Snowflake import command settings.
type SnowflakeImportCopyCommand struct {
	// Additional copy options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalCopyOptions": { "DATE_FORMAT": "MM/DD/YYYY", "TIME_FORMAT": "'HH24:MI:SS.FF'" }
	AdditionalCopyOptions map[string]interface{} `pulumi:"additionalCopyOptions"`
	// Additional format options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalFormatOptions": { "FORCE": "TRUE", "LOAD_UNCERTAIN_FILES": "'FALSE'" }
	AdditionalFormatOptions map[string]interface{} `pulumi:"additionalFormatOptions"`
	// The import setting type.
	// Expected value is 'SnowflakeImportCopyCommand'.
	Type string `pulumi:"type"`
}

// SnowflakeImportCopyCommandInput is an input type that accepts SnowflakeImportCopyCommandArgs and SnowflakeImportCopyCommandOutput values.
// You can construct a concrete instance of `SnowflakeImportCopyCommandInput` via:
//
//	SnowflakeImportCopyCommandArgs{...}
type SnowflakeImportCopyCommandInput interface {
	pulumi.Input

	ToSnowflakeImportCopyCommandOutput() SnowflakeImportCopyCommandOutput
	ToSnowflakeImportCopyCommandOutputWithContext(context.Context) SnowflakeImportCopyCommandOutput
}

// Snowflake import command settings.
type SnowflakeImportCopyCommandArgs struct {
	// Additional copy options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalCopyOptions": { "DATE_FORMAT": "MM/DD/YYYY", "TIME_FORMAT": "'HH24:MI:SS.FF'" }
	AdditionalCopyOptions pulumi.MapInput `pulumi:"additionalCopyOptions"`
	// Additional format options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalFormatOptions": { "FORCE": "TRUE", "LOAD_UNCERTAIN_FILES": "'FALSE'" }
	AdditionalFormatOptions pulumi.MapInput `pulumi:"additionalFormatOptions"`
	// The import setting type.
	// Expected value is 'SnowflakeImportCopyCommand'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SnowflakeImportCopyCommandArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnowflakeImportCopyCommand)(nil)).Elem()
}

func (i SnowflakeImportCopyCommandArgs) ToSnowflakeImportCopyCommandOutput() SnowflakeImportCopyCommandOutput {
	return i.ToSnowflakeImportCopyCommandOutputWithContext(context.Background())
}

func (i SnowflakeImportCopyCommandArgs) ToSnowflakeImportCopyCommandOutputWithContext(ctx context.Context) SnowflakeImportCopyCommandOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnowflakeImportCopyCommandOutput)
}

func (i SnowflakeImportCopyCommandArgs) ToSnowflakeImportCopyCommandPtrOutput() SnowflakeImportCopyCommandPtrOutput {
	return i.ToSnowflakeImportCopyCommandPtrOutputWithContext(context.Background())
}

func (i SnowflakeImportCopyCommandArgs) ToSnowflakeImportCopyCommandPtrOutputWithContext(ctx context.Context) SnowflakeImportCopyCommandPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnowflakeImportCopyCommandOutput).ToSnowflakeImportCopyCommandPtrOutputWithContext(ctx)
}

// SnowflakeImportCopyCommandPtrInput is an input type that accepts SnowflakeImportCopyCommandArgs, SnowflakeImportCopyCommandPtr and SnowflakeImportCopyCommandPtrOutput values.
// You can construct a concrete instance of `SnowflakeImportCopyCommandPtrInput` via:
//
//	        SnowflakeImportCopyCommandArgs{...}
//
//	or:
//
//	        nil
type SnowflakeImportCopyCommandPtrInput interface {
	pulumi.Input

	ToSnowflakeImportCopyCommandPtrOutput() SnowflakeImportCopyCommandPtrOutput
	ToSnowflakeImportCopyCommandPtrOutputWithContext(context.Context) SnowflakeImportCopyCommandPtrOutput
}

type snowflakeImportCopyCommandPtrType SnowflakeImportCopyCommandArgs

func SnowflakeImportCopyCommandPtr(v *SnowflakeImportCopyCommandArgs) SnowflakeImportCopyCommandPtrInput {
	return (*snowflakeImportCopyCommandPtrType)(v)
}

func (*snowflakeImportCopyCommandPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SnowflakeImportCopyCommand)(nil)).Elem()
}

func (i *snowflakeImportCopyCommandPtrType) ToSnowflakeImportCopyCommandPtrOutput() SnowflakeImportCopyCommandPtrOutput {
	return i.ToSnowflakeImportCopyCommandPtrOutputWithContext(context.Background())
}

func (i *snowflakeImportCopyCommandPtrType) ToSnowflakeImportCopyCommandPtrOutputWithContext(ctx context.Context) SnowflakeImportCopyCommandPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnowflakeImportCopyCommandPtrOutput)
}

// Snowflake import command settings.
type SnowflakeImportCopyCommandOutput struct{ *pulumi.OutputState }

func (SnowflakeImportCopyCommandOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnowflakeImportCopyCommand)(nil)).Elem()
}

func (o SnowflakeImportCopyCommandOutput) ToSnowflakeImportCopyCommandOutput() SnowflakeImportCopyCommandOutput {
	return o
}

func (o SnowflakeImportCopyCommandOutput) ToSnowflakeImportCopyCommandOutputWithContext(ctx context.Context) SnowflakeImportCopyCommandOutput {
	return o
}

func (o SnowflakeImportCopyCommandOutput) ToSnowflakeImportCopyCommandPtrOutput() SnowflakeImportCopyCommandPtrOutput {
	return o.ToSnowflakeImportCopyCommandPtrOutputWithContext(context.Background())
}

func (o SnowflakeImportCopyCommandOutput) ToSnowflakeImportCopyCommandPtrOutputWithContext(ctx context.Context) SnowflakeImportCopyCommandPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SnowflakeImportCopyCommand) *SnowflakeImportCopyCommand {
		return &v
	}).(SnowflakeImportCopyCommandPtrOutput)
}

// Additional copy options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalCopyOptions": { "DATE_FORMAT": "MM/DD/YYYY", "TIME_FORMAT": "'HH24:MI:SS.FF'" }
func (o SnowflakeImportCopyCommandOutput) AdditionalCopyOptions() pulumi.MapOutput {
	return o.ApplyT(func(v SnowflakeImportCopyCommand) map[string]interface{} { return v.AdditionalCopyOptions }).(pulumi.MapOutput)
}

// Additional format options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalFormatOptions": { "FORCE": "TRUE", "LOAD_UNCERTAIN_FILES": "'FALSE'" }
func (o SnowflakeImportCopyCommandOutput) AdditionalFormatOptions() pulumi.MapOutput {
	return o.ApplyT(func(v SnowflakeImportCopyCommand) map[string]interface{} { return v.AdditionalFormatOptions }).(pulumi.MapOutput)
}

// The import setting type.
// Expected value is 'SnowflakeImportCopyCommand'.
func (o SnowflakeImportCopyCommandOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SnowflakeImportCopyCommand) string { return v.Type }).(pulumi.StringOutput)
}

type SnowflakeImportCopyCommandPtrOutput struct{ *pulumi.OutputState }

func (SnowflakeImportCopyCommandPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnowflakeImportCopyCommand)(nil)).Elem()
}

func (o SnowflakeImportCopyCommandPtrOutput) ToSnowflakeImportCopyCommandPtrOutput() SnowflakeImportCopyCommandPtrOutput {
	return o
}

func (o SnowflakeImportCopyCommandPtrOutput) ToSnowflakeImportCopyCommandPtrOutputWithContext(ctx context.Context) SnowflakeImportCopyCommandPtrOutput {
	return o
}

func (o SnowflakeImportCopyCommandPtrOutput) Elem() SnowflakeImportCopyCommandOutput {
	return o.ApplyT(func(v *SnowflakeImportCopyCommand) SnowflakeImportCopyCommand {
		if v != nil {
			return *v
		}
		var ret SnowflakeImportCopyCommand
		return ret
	}).(SnowflakeImportCopyCommandOutput)
}

// Additional copy options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalCopyOptions": { "DATE_FORMAT": "MM/DD/YYYY", "TIME_FORMAT": "'HH24:MI:SS.FF'" }
func (o SnowflakeImportCopyCommandPtrOutput) AdditionalCopyOptions() pulumi.MapOutput {
	return o.ApplyT(func(v *SnowflakeImportCopyCommand) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.AdditionalCopyOptions
	}).(pulumi.MapOutput)
}

// Additional format options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalFormatOptions": { "FORCE": "TRUE", "LOAD_UNCERTAIN_FILES": "'FALSE'" }
func (o SnowflakeImportCopyCommandPtrOutput) AdditionalFormatOptions() pulumi.MapOutput {
	return o.ApplyT(func(v *SnowflakeImportCopyCommand) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.AdditionalFormatOptions
	}).(pulumi.MapOutput)
}

// The import setting type.
// Expected value is 'SnowflakeImportCopyCommand'.
func (o SnowflakeImportCopyCommandPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnowflakeImportCopyCommand) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Snowflake import command settings.
type SnowflakeImportCopyCommandResponse struct {
	// Additional copy options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalCopyOptions": { "DATE_FORMAT": "MM/DD/YYYY", "TIME_FORMAT": "'HH24:MI:SS.FF'" }
	AdditionalCopyOptions map[string]interface{} `pulumi:"additionalCopyOptions"`
	// Additional format options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalFormatOptions": { "FORCE": "TRUE", "LOAD_UNCERTAIN_FILES": "'FALSE'" }
	AdditionalFormatOptions map[string]interface{} `pulumi:"additionalFormatOptions"`
	// The import setting type.
	// Expected value is 'SnowflakeImportCopyCommand'.
	Type string `pulumi:"type"`
}

// Snowflake import command settings.
type SnowflakeImportCopyCommandResponseOutput struct{ *pulumi.OutputState }

func (SnowflakeImportCopyCommandResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnowflakeImportCopyCommandResponse)(nil)).Elem()
}

func (o SnowflakeImportCopyCommandResponseOutput) ToSnowflakeImportCopyCommandResponseOutput() SnowflakeImportCopyCommandResponseOutput {
	return o
}

func (o SnowflakeImportCopyCommandResponseOutput) ToSnowflakeImportCopyCommandResponseOutputWithContext(ctx context.Context) SnowflakeImportCopyCommandResponseOutput {
	return o
}

// Additional copy options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalCopyOptions": { "DATE_FORMAT": "MM/DD/YYYY", "TIME_FORMAT": "'HH24:MI:SS.FF'" }
func (o SnowflakeImportCopyCommandResponseOutput) AdditionalCopyOptions() pulumi.MapOutput {
	return o.ApplyT(func(v SnowflakeImportCopyCommandResponse) map[string]interface{} { return v.AdditionalCopyOptions }).(pulumi.MapOutput)
}

// Additional format options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalFormatOptions": { "FORCE": "TRUE", "LOAD_UNCERTAIN_FILES": "'FALSE'" }
func (o SnowflakeImportCopyCommandResponseOutput) AdditionalFormatOptions() pulumi.MapOutput {
	return o.ApplyT(func(v SnowflakeImportCopyCommandResponse) map[string]interface{} { return v.AdditionalFormatOptions }).(pulumi.MapOutput)
}

// The import setting type.
// Expected value is 'SnowflakeImportCopyCommand'.
func (o SnowflakeImportCopyCommandResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SnowflakeImportCopyCommandResponse) string { return v.Type }).(pulumi.StringOutput)
}

type SnowflakeImportCopyCommandResponsePtrOutput struct{ *pulumi.OutputState }

func (SnowflakeImportCopyCommandResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnowflakeImportCopyCommandResponse)(nil)).Elem()
}

func (o SnowflakeImportCopyCommandResponsePtrOutput) ToSnowflakeImportCopyCommandResponsePtrOutput() SnowflakeImportCopyCommandResponsePtrOutput {
	return o
}

func (o SnowflakeImportCopyCommandResponsePtrOutput) ToSnowflakeImportCopyCommandResponsePtrOutputWithContext(ctx context.Context) SnowflakeImportCopyCommandResponsePtrOutput {
	return o
}

func (o SnowflakeImportCopyCommandResponsePtrOutput) Elem() SnowflakeImportCopyCommandResponseOutput {
	return o.ApplyT(func(v *SnowflakeImportCopyCommandResponse) SnowflakeImportCopyCommandResponse {
		if v != nil {
			return *v
		}
		var ret SnowflakeImportCopyCommandResponse
		return ret
	}).(SnowflakeImportCopyCommandResponseOutput)
}

// Additional copy options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalCopyOptions": { "DATE_FORMAT": "MM/DD/YYYY", "TIME_FORMAT": "'HH24:MI:SS.FF'" }
func (o SnowflakeImportCopyCommandResponsePtrOutput) AdditionalCopyOptions() pulumi.MapOutput {
	return o.ApplyT(func(v *SnowflakeImportCopyCommandResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.AdditionalCopyOptions
	}).(pulumi.MapOutput)
}

// Additional format options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalFormatOptions": { "FORCE": "TRUE", "LOAD_UNCERTAIN_FILES": "'FALSE'" }
func (o SnowflakeImportCopyCommandResponsePtrOutput) AdditionalFormatOptions() pulumi.MapOutput {
	return o.ApplyT(func(v *SnowflakeImportCopyCommandResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.AdditionalFormatOptions
	}).(pulumi.MapOutput)
}

// The import setting type.
// Expected value is 'SnowflakeImportCopyCommand'.
func (o SnowflakeImportCopyCommandResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnowflakeImportCopyCommandResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Snowflake linked service.
type SnowflakeLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string of snowflake. Type: string, SecureString.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Snowflake'.
	Type string `pulumi:"type"`
}

// SnowflakeLinkedServiceInput is an input type that accepts SnowflakeLinkedServiceArgs and SnowflakeLinkedServiceOutput values.
// You can construct a concrete instance of `SnowflakeLinkedServiceInput` via:
//
//	SnowflakeLinkedServiceArgs{...}
type SnowflakeLinkedServiceInput interface {
	pulumi.Input

	ToSnowflakeLinkedServiceOutput() SnowflakeLinkedServiceOutput
	ToSnowflakeLinkedServiceOutputWithContext(context.Context) SnowflakeLinkedServiceOutput
}

// Snowflake linked service.
type SnowflakeLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The connection string of snowflake. Type: string, SecureString.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password AzureKeyVaultSecretReferencePtrInput `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Snowflake'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SnowflakeLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnowflakeLinkedService)(nil)).Elem()
}

func (i SnowflakeLinkedServiceArgs) ToSnowflakeLinkedServiceOutput() SnowflakeLinkedServiceOutput {
	return i.ToSnowflakeLinkedServiceOutputWithContext(context.Background())
}

func (i SnowflakeLinkedServiceArgs) ToSnowflakeLinkedServiceOutputWithContext(ctx context.Context) SnowflakeLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnowflakeLinkedServiceOutput)
}

// Snowflake linked service.
type SnowflakeLinkedServiceOutput struct{ *pulumi.OutputState }

func (SnowflakeLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnowflakeLinkedService)(nil)).Elem()
}

func (o SnowflakeLinkedServiceOutput) ToSnowflakeLinkedServiceOutput() SnowflakeLinkedServiceOutput {
	return o
}

func (o SnowflakeLinkedServiceOutput) ToSnowflakeLinkedServiceOutputWithContext(ctx context.Context) SnowflakeLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SnowflakeLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SnowflakeLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o SnowflakeLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v SnowflakeLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The connection string of snowflake. Type: string, SecureString.
func (o SnowflakeLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o SnowflakeLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnowflakeLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o SnowflakeLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnowflakeLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o SnowflakeLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SnowflakeLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o SnowflakeLinkedServiceOutput) Password() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v SnowflakeLinkedService) *AzureKeyVaultSecretReference { return v.Password }).(AzureKeyVaultSecretReferencePtrOutput)
}

// Type of linked service.
// Expected value is 'Snowflake'.
func (o SnowflakeLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SnowflakeLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Snowflake linked service.
type SnowflakeLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string of snowflake. Type: string, SecureString.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReferenceResponse `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Snowflake'.
	Type string `pulumi:"type"`
}

// Snowflake linked service.
type SnowflakeLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SnowflakeLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnowflakeLinkedServiceResponse)(nil)).Elem()
}

func (o SnowflakeLinkedServiceResponseOutput) ToSnowflakeLinkedServiceResponseOutput() SnowflakeLinkedServiceResponseOutput {
	return o
}

func (o SnowflakeLinkedServiceResponseOutput) ToSnowflakeLinkedServiceResponseOutputWithContext(ctx context.Context) SnowflakeLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SnowflakeLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SnowflakeLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o SnowflakeLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SnowflakeLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The connection string of snowflake. Type: string, SecureString.
func (o SnowflakeLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o SnowflakeLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnowflakeLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o SnowflakeLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnowflakeLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o SnowflakeLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SnowflakeLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o SnowflakeLinkedServiceResponseOutput) Password() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v SnowflakeLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse { return v.Password }).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// Type of linked service.
// Expected value is 'Snowflake'.
func (o SnowflakeLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SnowflakeLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity snowflake sink.
type SnowflakeSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Snowflake import settings.
	ImportSettings *SnowflakeImportCopyCommand `pulumi:"importSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'SnowflakeSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// SnowflakeSinkInput is an input type that accepts SnowflakeSinkArgs and SnowflakeSinkOutput values.
// You can construct a concrete instance of `SnowflakeSinkInput` via:
//
//	SnowflakeSinkArgs{...}
type SnowflakeSinkInput interface {
	pulumi.Input

	ToSnowflakeSinkOutput() SnowflakeSinkOutput
	ToSnowflakeSinkOutputWithContext(context.Context) SnowflakeSinkOutput
}

// A copy activity snowflake sink.
type SnowflakeSinkArgs struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// Snowflake import settings.
	ImportSettings SnowflakeImportCopyCommandPtrInput `pulumi:"importSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript pulumi.Input `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount pulumi.Input `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait pulumi.Input `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'SnowflakeSink'.
	Type pulumi.StringInput `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize pulumi.Input `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout pulumi.Input `pulumi:"writeBatchTimeout"`
}

func (SnowflakeSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnowflakeSink)(nil)).Elem()
}

func (i SnowflakeSinkArgs) ToSnowflakeSinkOutput() SnowflakeSinkOutput {
	return i.ToSnowflakeSinkOutputWithContext(context.Background())
}

func (i SnowflakeSinkArgs) ToSnowflakeSinkOutputWithContext(ctx context.Context) SnowflakeSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnowflakeSinkOutput)
}

// A copy activity snowflake sink.
type SnowflakeSinkOutput struct{ *pulumi.OutputState }

func (SnowflakeSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnowflakeSink)(nil)).Elem()
}

func (o SnowflakeSinkOutput) ToSnowflakeSinkOutput() SnowflakeSinkOutput {
	return o
}

func (o SnowflakeSinkOutput) ToSnowflakeSinkOutputWithContext(ctx context.Context) SnowflakeSinkOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SnowflakeSinkOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeSink) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Snowflake import settings.
func (o SnowflakeSinkOutput) ImportSettings() SnowflakeImportCopyCommandPtrOutput {
	return o.ApplyT(func(v SnowflakeSink) *SnowflakeImportCopyCommand { return v.ImportSettings }).(SnowflakeImportCopyCommandPtrOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o SnowflakeSinkOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeSink) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// SQL pre-copy script. Type: string (or Expression with resultType string).
func (o SnowflakeSinkOutput) PreCopyScript() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeSink) interface{} { return v.PreCopyScript }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o SnowflakeSinkOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeSink) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SnowflakeSinkOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeSink) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'SnowflakeSink'.
func (o SnowflakeSinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SnowflakeSink) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o SnowflakeSinkOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeSink) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SnowflakeSinkOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeSink) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity snowflake sink.
type SnowflakeSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Snowflake import settings.
	ImportSettings *SnowflakeImportCopyCommandResponse `pulumi:"importSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'SnowflakeSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity snowflake sink.
type SnowflakeSinkResponseOutput struct{ *pulumi.OutputState }

func (SnowflakeSinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnowflakeSinkResponse)(nil)).Elem()
}

func (o SnowflakeSinkResponseOutput) ToSnowflakeSinkResponseOutput() SnowflakeSinkResponseOutput {
	return o
}

func (o SnowflakeSinkResponseOutput) ToSnowflakeSinkResponseOutputWithContext(ctx context.Context) SnowflakeSinkResponseOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SnowflakeSinkResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeSinkResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Snowflake import settings.
func (o SnowflakeSinkResponseOutput) ImportSettings() SnowflakeImportCopyCommandResponsePtrOutput {
	return o.ApplyT(func(v SnowflakeSinkResponse) *SnowflakeImportCopyCommandResponse { return v.ImportSettings }).(SnowflakeImportCopyCommandResponsePtrOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o SnowflakeSinkResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeSinkResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// SQL pre-copy script. Type: string (or Expression with resultType string).
func (o SnowflakeSinkResponseOutput) PreCopyScript() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeSinkResponse) interface{} { return v.PreCopyScript }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o SnowflakeSinkResponseOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeSinkResponse) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SnowflakeSinkResponseOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeSinkResponse) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'SnowflakeSink'.
func (o SnowflakeSinkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SnowflakeSinkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o SnowflakeSinkResponseOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeSinkResponse) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SnowflakeSinkResponseOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeSinkResponse) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity snowflake source.
type SnowflakeSource struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Snowflake export settings.
	ExportSettings SnowflakeExportCopyCommand `pulumi:"exportSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Snowflake Sql query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SnowflakeSource'.
	Type string `pulumi:"type"`
}

// SnowflakeSourceInput is an input type that accepts SnowflakeSourceArgs and SnowflakeSourceOutput values.
// You can construct a concrete instance of `SnowflakeSourceInput` via:
//
//	SnowflakeSourceArgs{...}
type SnowflakeSourceInput interface {
	pulumi.Input

	ToSnowflakeSourceOutput() SnowflakeSourceOutput
	ToSnowflakeSourceOutputWithContext(context.Context) SnowflakeSourceOutput
}

// A copy activity snowflake source.
type SnowflakeSourceArgs struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// Snowflake export settings.
	ExportSettings SnowflakeExportCopyCommandInput `pulumi:"exportSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Snowflake Sql query. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SnowflakeSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SnowflakeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnowflakeSource)(nil)).Elem()
}

func (i SnowflakeSourceArgs) ToSnowflakeSourceOutput() SnowflakeSourceOutput {
	return i.ToSnowflakeSourceOutputWithContext(context.Background())
}

func (i SnowflakeSourceArgs) ToSnowflakeSourceOutputWithContext(ctx context.Context) SnowflakeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnowflakeSourceOutput)
}

// A copy activity snowflake source.
type SnowflakeSourceOutput struct{ *pulumi.OutputState }

func (SnowflakeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnowflakeSource)(nil)).Elem()
}

func (o SnowflakeSourceOutput) ToSnowflakeSourceOutput() SnowflakeSourceOutput {
	return o
}

func (o SnowflakeSourceOutput) ToSnowflakeSourceOutputWithContext(ctx context.Context) SnowflakeSourceOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SnowflakeSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Snowflake export settings.
func (o SnowflakeSourceOutput) ExportSettings() SnowflakeExportCopyCommandOutput {
	return o.ApplyT(func(v SnowflakeSource) SnowflakeExportCopyCommand { return v.ExportSettings }).(SnowflakeExportCopyCommandOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SnowflakeSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Snowflake Sql query. Type: string (or Expression with resultType string).
func (o SnowflakeSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o SnowflakeSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SnowflakeSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'SnowflakeSource'.
func (o SnowflakeSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SnowflakeSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity snowflake source.
type SnowflakeSourceResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Snowflake export settings.
	ExportSettings SnowflakeExportCopyCommandResponse `pulumi:"exportSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Snowflake Sql query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SnowflakeSource'.
	Type string `pulumi:"type"`
}

// A copy activity snowflake source.
type SnowflakeSourceResponseOutput struct{ *pulumi.OutputState }

func (SnowflakeSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnowflakeSourceResponse)(nil)).Elem()
}

func (o SnowflakeSourceResponseOutput) ToSnowflakeSourceResponseOutput() SnowflakeSourceResponseOutput {
	return o
}

func (o SnowflakeSourceResponseOutput) ToSnowflakeSourceResponseOutputWithContext(ctx context.Context) SnowflakeSourceResponseOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SnowflakeSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Snowflake export settings.
func (o SnowflakeSourceResponseOutput) ExportSettings() SnowflakeExportCopyCommandResponseOutput {
	return o.ApplyT(func(v SnowflakeSourceResponse) SnowflakeExportCopyCommandResponse { return v.ExportSettings }).(SnowflakeExportCopyCommandResponseOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SnowflakeSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Snowflake Sql query. Type: string (or Expression with resultType string).
func (o SnowflakeSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o SnowflakeSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SnowflakeSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'SnowflakeSource'.
func (o SnowflakeSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SnowflakeSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The snowflake dataset.
type SnowflakeV2Dataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Snowflake database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'SnowflakeV2Table'.
	Type string `pulumi:"type"`
}

// SnowflakeV2DatasetInput is an input type that accepts SnowflakeV2DatasetArgs and SnowflakeV2DatasetOutput values.
// You can construct a concrete instance of `SnowflakeV2DatasetInput` via:
//
//	SnowflakeV2DatasetArgs{...}
type SnowflakeV2DatasetInput interface {
	pulumi.Input

	ToSnowflakeV2DatasetOutput() SnowflakeV2DatasetOutput
	ToSnowflakeV2DatasetOutputWithContext(context.Context) SnowflakeV2DatasetOutput
}

// The snowflake dataset.
type SnowflakeV2DatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Snowflake database. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'SnowflakeV2Table'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SnowflakeV2DatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnowflakeV2Dataset)(nil)).Elem()
}

func (i SnowflakeV2DatasetArgs) ToSnowflakeV2DatasetOutput() SnowflakeV2DatasetOutput {
	return i.ToSnowflakeV2DatasetOutputWithContext(context.Background())
}

func (i SnowflakeV2DatasetArgs) ToSnowflakeV2DatasetOutputWithContext(ctx context.Context) SnowflakeV2DatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnowflakeV2DatasetOutput)
}

// The snowflake dataset.
type SnowflakeV2DatasetOutput struct{ *pulumi.OutputState }

func (SnowflakeV2DatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnowflakeV2Dataset)(nil)).Elem()
}

func (o SnowflakeV2DatasetOutput) ToSnowflakeV2DatasetOutput() SnowflakeV2DatasetOutput {
	return o
}

func (o SnowflakeV2DatasetOutput) ToSnowflakeV2DatasetOutputWithContext(ctx context.Context) SnowflakeV2DatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SnowflakeV2DatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SnowflakeV2Dataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SnowflakeV2DatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnowflakeV2Dataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SnowflakeV2DatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v SnowflakeV2Dataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o SnowflakeV2DatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v SnowflakeV2Dataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o SnowflakeV2DatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SnowflakeV2Dataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SnowflakeV2DatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2Dataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SnowflakeV2DatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2Dataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Snowflake database. Type: string (or Expression with resultType string).
func (o SnowflakeV2DatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2Dataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'SnowflakeV2Table'.
func (o SnowflakeV2DatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SnowflakeV2Dataset) string { return v.Type }).(pulumi.StringOutput)
}

// The snowflake dataset.
type SnowflakeV2DatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Snowflake database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'SnowflakeV2Table'.
	Type string `pulumi:"type"`
}

// The snowflake dataset.
type SnowflakeV2DatasetResponseOutput struct{ *pulumi.OutputState }

func (SnowflakeV2DatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnowflakeV2DatasetResponse)(nil)).Elem()
}

func (o SnowflakeV2DatasetResponseOutput) ToSnowflakeV2DatasetResponseOutput() SnowflakeV2DatasetResponseOutput {
	return o
}

func (o SnowflakeV2DatasetResponseOutput) ToSnowflakeV2DatasetResponseOutputWithContext(ctx context.Context) SnowflakeV2DatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SnowflakeV2DatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SnowflakeV2DatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SnowflakeV2DatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnowflakeV2DatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SnowflakeV2DatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v SnowflakeV2DatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o SnowflakeV2DatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v SnowflakeV2DatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o SnowflakeV2DatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SnowflakeV2DatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SnowflakeV2DatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2DatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SnowflakeV2DatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2DatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Snowflake database. Type: string (or Expression with resultType string).
func (o SnowflakeV2DatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2DatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'SnowflakeV2Table'.
func (o SnowflakeV2DatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SnowflakeV2DatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Snowflake linked service.
type SnowflakeV2LinkedService struct {
	// The account identifier of your Snowflake account, e.g. xy12345.east-us-2.azure
	AccountIdentifier interface{} `pulumi:"accountIdentifier"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The type used for authentication. Type: string.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The client ID of the application registered in Azure Active Directory for AADServicePrincipal authentication.
	ClientId interface{} `pulumi:"clientId"`
	// The Azure key vault secret reference of client secret for AADServicePrincipal authentication.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The name of the Snowflake database.
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password interface{} `pulumi:"password"`
	// The Azure key vault secret reference of privateKey for KeyPair auth.
	PrivateKey interface{} `pulumi:"privateKey"`
	// The Azure key vault secret reference of private key password for KeyPair auth with encrypted private key.
	PrivateKeyPassphrase interface{} `pulumi:"privateKeyPassphrase"`
	// The scope of the application registered in Azure Active Directory for AADServicePrincipal authentication.
	Scope interface{} `pulumi:"scope"`
	// The tenant ID of the application registered in Azure Active Directory for AADServicePrincipal authentication.
	TenantId interface{} `pulumi:"tenantId"`
	// Type of linked service.
	// Expected value is 'SnowflakeV2'.
	Type string `pulumi:"type"`
	// The name of the Snowflake user.
	User interface{} `pulumi:"user"`
	// The name of the Snowflake warehouse.
	Warehouse interface{} `pulumi:"warehouse"`
}

// Defaults sets the appropriate defaults for SnowflakeV2LinkedService
func (val *SnowflakeV2LinkedService) Defaults() *SnowflakeV2LinkedService {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AuthenticationType == nil {
		authenticationType_ := "Basic"
		tmp.AuthenticationType = &authenticationType_
	}
	return &tmp
}

// SnowflakeV2LinkedServiceInput is an input type that accepts SnowflakeV2LinkedServiceArgs and SnowflakeV2LinkedServiceOutput values.
// You can construct a concrete instance of `SnowflakeV2LinkedServiceInput` via:
//
//	SnowflakeV2LinkedServiceArgs{...}
type SnowflakeV2LinkedServiceInput interface {
	pulumi.Input

	ToSnowflakeV2LinkedServiceOutput() SnowflakeV2LinkedServiceOutput
	ToSnowflakeV2LinkedServiceOutputWithContext(context.Context) SnowflakeV2LinkedServiceOutput
}

// Snowflake linked service.
type SnowflakeV2LinkedServiceArgs struct {
	// The account identifier of your Snowflake account, e.g. xy12345.east-us-2.azure
	AccountIdentifier pulumi.Input `pulumi:"accountIdentifier"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The type used for authentication. Type: string.
	AuthenticationType pulumi.StringPtrInput `pulumi:"authenticationType"`
	// The client ID of the application registered in Azure Active Directory for AADServicePrincipal authentication.
	ClientId pulumi.Input `pulumi:"clientId"`
	// The Azure key vault secret reference of client secret for AADServicePrincipal authentication.
	ClientSecret pulumi.Input `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The name of the Snowflake database.
	Database pulumi.Input `pulumi:"database"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password pulumi.Input `pulumi:"password"`
	// The Azure key vault secret reference of privateKey for KeyPair auth.
	PrivateKey pulumi.Input `pulumi:"privateKey"`
	// The Azure key vault secret reference of private key password for KeyPair auth with encrypted private key.
	PrivateKeyPassphrase pulumi.Input `pulumi:"privateKeyPassphrase"`
	// The scope of the application registered in Azure Active Directory for AADServicePrincipal authentication.
	Scope pulumi.Input `pulumi:"scope"`
	// The tenant ID of the application registered in Azure Active Directory for AADServicePrincipal authentication.
	TenantId pulumi.Input `pulumi:"tenantId"`
	// Type of linked service.
	// Expected value is 'SnowflakeV2'.
	Type pulumi.StringInput `pulumi:"type"`
	// The name of the Snowflake user.
	User pulumi.Input `pulumi:"user"`
	// The name of the Snowflake warehouse.
	Warehouse pulumi.Input `pulumi:"warehouse"`
}

// Defaults sets the appropriate defaults for SnowflakeV2LinkedServiceArgs
func (val *SnowflakeV2LinkedServiceArgs) Defaults() *SnowflakeV2LinkedServiceArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AuthenticationType == nil {
		tmp.AuthenticationType = pulumi.StringPtr("Basic")
	}
	return &tmp
}
func (SnowflakeV2LinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnowflakeV2LinkedService)(nil)).Elem()
}

func (i SnowflakeV2LinkedServiceArgs) ToSnowflakeV2LinkedServiceOutput() SnowflakeV2LinkedServiceOutput {
	return i.ToSnowflakeV2LinkedServiceOutputWithContext(context.Background())
}

func (i SnowflakeV2LinkedServiceArgs) ToSnowflakeV2LinkedServiceOutputWithContext(ctx context.Context) SnowflakeV2LinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnowflakeV2LinkedServiceOutput)
}

// Snowflake linked service.
type SnowflakeV2LinkedServiceOutput struct{ *pulumi.OutputState }

func (SnowflakeV2LinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnowflakeV2LinkedService)(nil)).Elem()
}

func (o SnowflakeV2LinkedServiceOutput) ToSnowflakeV2LinkedServiceOutput() SnowflakeV2LinkedServiceOutput {
	return o
}

func (o SnowflakeV2LinkedServiceOutput) ToSnowflakeV2LinkedServiceOutputWithContext(ctx context.Context) SnowflakeV2LinkedServiceOutput {
	return o
}

// The account identifier of your Snowflake account, e.g. xy12345.east-us-2.azure
func (o SnowflakeV2LinkedServiceOutput) AccountIdentifier() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2LinkedService) interface{} { return v.AccountIdentifier }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o SnowflakeV2LinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SnowflakeV2LinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The type used for authentication. Type: string.
func (o SnowflakeV2LinkedServiceOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnowflakeV2LinkedService) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// The client ID of the application registered in Azure Active Directory for AADServicePrincipal authentication.
func (o SnowflakeV2LinkedServiceOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2LinkedService) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The Azure key vault secret reference of client secret for AADServicePrincipal authentication.
func (o SnowflakeV2LinkedServiceOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2LinkedService) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o SnowflakeV2LinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v SnowflakeV2LinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The name of the Snowflake database.
func (o SnowflakeV2LinkedServiceOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2LinkedService) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Linked service description.
func (o SnowflakeV2LinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnowflakeV2LinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o SnowflakeV2LinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnowflakeV2LinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o SnowflakeV2LinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SnowflakeV2LinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o SnowflakeV2LinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2LinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The Azure key vault secret reference of privateKey for KeyPair auth.
func (o SnowflakeV2LinkedServiceOutput) PrivateKey() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2LinkedService) interface{} { return v.PrivateKey }).(pulumi.AnyOutput)
}

// The Azure key vault secret reference of private key password for KeyPair auth with encrypted private key.
func (o SnowflakeV2LinkedServiceOutput) PrivateKeyPassphrase() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2LinkedService) interface{} { return v.PrivateKeyPassphrase }).(pulumi.AnyOutput)
}

// The scope of the application registered in Azure Active Directory for AADServicePrincipal authentication.
func (o SnowflakeV2LinkedServiceOutput) Scope() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2LinkedService) interface{} { return v.Scope }).(pulumi.AnyOutput)
}

// The tenant ID of the application registered in Azure Active Directory for AADServicePrincipal authentication.
func (o SnowflakeV2LinkedServiceOutput) TenantId() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2LinkedService) interface{} { return v.TenantId }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'SnowflakeV2'.
func (o SnowflakeV2LinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SnowflakeV2LinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The name of the Snowflake user.
func (o SnowflakeV2LinkedServiceOutput) User() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2LinkedService) interface{} { return v.User }).(pulumi.AnyOutput)
}

// The name of the Snowflake warehouse.
func (o SnowflakeV2LinkedServiceOutput) Warehouse() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2LinkedService) interface{} { return v.Warehouse }).(pulumi.AnyOutput)
}

// Snowflake linked service.
type SnowflakeV2LinkedServiceResponse struct {
	// The account identifier of your Snowflake account, e.g. xy12345.east-us-2.azure
	AccountIdentifier interface{} `pulumi:"accountIdentifier"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The type used for authentication. Type: string.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The client ID of the application registered in Azure Active Directory for AADServicePrincipal authentication.
	ClientId interface{} `pulumi:"clientId"`
	// The Azure key vault secret reference of client secret for AADServicePrincipal authentication.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The name of the Snowflake database.
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password interface{} `pulumi:"password"`
	// The Azure key vault secret reference of privateKey for KeyPair auth.
	PrivateKey interface{} `pulumi:"privateKey"`
	// The Azure key vault secret reference of private key password for KeyPair auth with encrypted private key.
	PrivateKeyPassphrase interface{} `pulumi:"privateKeyPassphrase"`
	// The scope of the application registered in Azure Active Directory for AADServicePrincipal authentication.
	Scope interface{} `pulumi:"scope"`
	// The tenant ID of the application registered in Azure Active Directory for AADServicePrincipal authentication.
	TenantId interface{} `pulumi:"tenantId"`
	// Type of linked service.
	// Expected value is 'SnowflakeV2'.
	Type string `pulumi:"type"`
	// The name of the Snowflake user.
	User interface{} `pulumi:"user"`
	// The name of the Snowflake warehouse.
	Warehouse interface{} `pulumi:"warehouse"`
}

// Defaults sets the appropriate defaults for SnowflakeV2LinkedServiceResponse
func (val *SnowflakeV2LinkedServiceResponse) Defaults() *SnowflakeV2LinkedServiceResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AuthenticationType == nil {
		authenticationType_ := "Basic"
		tmp.AuthenticationType = &authenticationType_
	}
	return &tmp
}

// Snowflake linked service.
type SnowflakeV2LinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SnowflakeV2LinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnowflakeV2LinkedServiceResponse)(nil)).Elem()
}

func (o SnowflakeV2LinkedServiceResponseOutput) ToSnowflakeV2LinkedServiceResponseOutput() SnowflakeV2LinkedServiceResponseOutput {
	return o
}

func (o SnowflakeV2LinkedServiceResponseOutput) ToSnowflakeV2LinkedServiceResponseOutputWithContext(ctx context.Context) SnowflakeV2LinkedServiceResponseOutput {
	return o
}

// The account identifier of your Snowflake account, e.g. xy12345.east-us-2.azure
func (o SnowflakeV2LinkedServiceResponseOutput) AccountIdentifier() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2LinkedServiceResponse) interface{} { return v.AccountIdentifier }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o SnowflakeV2LinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SnowflakeV2LinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The type used for authentication. Type: string.
func (o SnowflakeV2LinkedServiceResponseOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnowflakeV2LinkedServiceResponse) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// The client ID of the application registered in Azure Active Directory for AADServicePrincipal authentication.
func (o SnowflakeV2LinkedServiceResponseOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2LinkedServiceResponse) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The Azure key vault secret reference of client secret for AADServicePrincipal authentication.
func (o SnowflakeV2LinkedServiceResponseOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2LinkedServiceResponse) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o SnowflakeV2LinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SnowflakeV2LinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The name of the Snowflake database.
func (o SnowflakeV2LinkedServiceResponseOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2LinkedServiceResponse) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Linked service description.
func (o SnowflakeV2LinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnowflakeV2LinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o SnowflakeV2LinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnowflakeV2LinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o SnowflakeV2LinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SnowflakeV2LinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o SnowflakeV2LinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2LinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The Azure key vault secret reference of privateKey for KeyPair auth.
func (o SnowflakeV2LinkedServiceResponseOutput) PrivateKey() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2LinkedServiceResponse) interface{} { return v.PrivateKey }).(pulumi.AnyOutput)
}

// The Azure key vault secret reference of private key password for KeyPair auth with encrypted private key.
func (o SnowflakeV2LinkedServiceResponseOutput) PrivateKeyPassphrase() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2LinkedServiceResponse) interface{} { return v.PrivateKeyPassphrase }).(pulumi.AnyOutput)
}

// The scope of the application registered in Azure Active Directory for AADServicePrincipal authentication.
func (o SnowflakeV2LinkedServiceResponseOutput) Scope() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2LinkedServiceResponse) interface{} { return v.Scope }).(pulumi.AnyOutput)
}

// The tenant ID of the application registered in Azure Active Directory for AADServicePrincipal authentication.
func (o SnowflakeV2LinkedServiceResponseOutput) TenantId() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2LinkedServiceResponse) interface{} { return v.TenantId }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'SnowflakeV2'.
func (o SnowflakeV2LinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SnowflakeV2LinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The name of the Snowflake user.
func (o SnowflakeV2LinkedServiceResponseOutput) User() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2LinkedServiceResponse) interface{} { return v.User }).(pulumi.AnyOutput)
}

// The name of the Snowflake warehouse.
func (o SnowflakeV2LinkedServiceResponseOutput) Warehouse() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2LinkedServiceResponse) interface{} { return v.Warehouse }).(pulumi.AnyOutput)
}

// A copy activity snowflake sink.
type SnowflakeV2Sink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Snowflake import settings.
	ImportSettings *SnowflakeImportCopyCommand `pulumi:"importSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'SnowflakeV2Sink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// SnowflakeV2SinkInput is an input type that accepts SnowflakeV2SinkArgs and SnowflakeV2SinkOutput values.
// You can construct a concrete instance of `SnowflakeV2SinkInput` via:
//
//	SnowflakeV2SinkArgs{...}
type SnowflakeV2SinkInput interface {
	pulumi.Input

	ToSnowflakeV2SinkOutput() SnowflakeV2SinkOutput
	ToSnowflakeV2SinkOutputWithContext(context.Context) SnowflakeV2SinkOutput
}

// A copy activity snowflake sink.
type SnowflakeV2SinkArgs struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// Snowflake import settings.
	ImportSettings SnowflakeImportCopyCommandPtrInput `pulumi:"importSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript pulumi.Input `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount pulumi.Input `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait pulumi.Input `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'SnowflakeV2Sink'.
	Type pulumi.StringInput `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize pulumi.Input `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout pulumi.Input `pulumi:"writeBatchTimeout"`
}

func (SnowflakeV2SinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnowflakeV2Sink)(nil)).Elem()
}

func (i SnowflakeV2SinkArgs) ToSnowflakeV2SinkOutput() SnowflakeV2SinkOutput {
	return i.ToSnowflakeV2SinkOutputWithContext(context.Background())
}

func (i SnowflakeV2SinkArgs) ToSnowflakeV2SinkOutputWithContext(ctx context.Context) SnowflakeV2SinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnowflakeV2SinkOutput)
}

// A copy activity snowflake sink.
type SnowflakeV2SinkOutput struct{ *pulumi.OutputState }

func (SnowflakeV2SinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnowflakeV2Sink)(nil)).Elem()
}

func (o SnowflakeV2SinkOutput) ToSnowflakeV2SinkOutput() SnowflakeV2SinkOutput {
	return o
}

func (o SnowflakeV2SinkOutput) ToSnowflakeV2SinkOutputWithContext(ctx context.Context) SnowflakeV2SinkOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SnowflakeV2SinkOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2Sink) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Snowflake import settings.
func (o SnowflakeV2SinkOutput) ImportSettings() SnowflakeImportCopyCommandPtrOutput {
	return o.ApplyT(func(v SnowflakeV2Sink) *SnowflakeImportCopyCommand { return v.ImportSettings }).(SnowflakeImportCopyCommandPtrOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o SnowflakeV2SinkOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2Sink) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// SQL pre-copy script. Type: string (or Expression with resultType string).
func (o SnowflakeV2SinkOutput) PreCopyScript() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2Sink) interface{} { return v.PreCopyScript }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o SnowflakeV2SinkOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2Sink) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SnowflakeV2SinkOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2Sink) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'SnowflakeV2Sink'.
func (o SnowflakeV2SinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SnowflakeV2Sink) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o SnowflakeV2SinkOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2Sink) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SnowflakeV2SinkOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2Sink) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity snowflake sink.
type SnowflakeV2SinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Snowflake import settings.
	ImportSettings *SnowflakeImportCopyCommandResponse `pulumi:"importSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'SnowflakeV2Sink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity snowflake sink.
type SnowflakeV2SinkResponseOutput struct{ *pulumi.OutputState }

func (SnowflakeV2SinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnowflakeV2SinkResponse)(nil)).Elem()
}

func (o SnowflakeV2SinkResponseOutput) ToSnowflakeV2SinkResponseOutput() SnowflakeV2SinkResponseOutput {
	return o
}

func (o SnowflakeV2SinkResponseOutput) ToSnowflakeV2SinkResponseOutputWithContext(ctx context.Context) SnowflakeV2SinkResponseOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SnowflakeV2SinkResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2SinkResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Snowflake import settings.
func (o SnowflakeV2SinkResponseOutput) ImportSettings() SnowflakeImportCopyCommandResponsePtrOutput {
	return o.ApplyT(func(v SnowflakeV2SinkResponse) *SnowflakeImportCopyCommandResponse { return v.ImportSettings }).(SnowflakeImportCopyCommandResponsePtrOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o SnowflakeV2SinkResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2SinkResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// SQL pre-copy script. Type: string (or Expression with resultType string).
func (o SnowflakeV2SinkResponseOutput) PreCopyScript() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2SinkResponse) interface{} { return v.PreCopyScript }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o SnowflakeV2SinkResponseOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2SinkResponse) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SnowflakeV2SinkResponseOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2SinkResponse) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'SnowflakeV2Sink'.
func (o SnowflakeV2SinkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SnowflakeV2SinkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o SnowflakeV2SinkResponseOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2SinkResponse) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SnowflakeV2SinkResponseOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2SinkResponse) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity snowflake source.
type SnowflakeV2Source struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Snowflake export settings.
	ExportSettings SnowflakeExportCopyCommand `pulumi:"exportSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Snowflake Sql query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SnowflakeV2Source'.
	Type string `pulumi:"type"`
}

// SnowflakeV2SourceInput is an input type that accepts SnowflakeV2SourceArgs and SnowflakeV2SourceOutput values.
// You can construct a concrete instance of `SnowflakeV2SourceInput` via:
//
//	SnowflakeV2SourceArgs{...}
type SnowflakeV2SourceInput interface {
	pulumi.Input

	ToSnowflakeV2SourceOutput() SnowflakeV2SourceOutput
	ToSnowflakeV2SourceOutputWithContext(context.Context) SnowflakeV2SourceOutput
}

// A copy activity snowflake source.
type SnowflakeV2SourceArgs struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// Snowflake export settings.
	ExportSettings SnowflakeExportCopyCommandInput `pulumi:"exportSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Snowflake Sql query. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SnowflakeV2Source'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SnowflakeV2SourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnowflakeV2Source)(nil)).Elem()
}

func (i SnowflakeV2SourceArgs) ToSnowflakeV2SourceOutput() SnowflakeV2SourceOutput {
	return i.ToSnowflakeV2SourceOutputWithContext(context.Background())
}

func (i SnowflakeV2SourceArgs) ToSnowflakeV2SourceOutputWithContext(ctx context.Context) SnowflakeV2SourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnowflakeV2SourceOutput)
}

// A copy activity snowflake source.
type SnowflakeV2SourceOutput struct{ *pulumi.OutputState }

func (SnowflakeV2SourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnowflakeV2Source)(nil)).Elem()
}

func (o SnowflakeV2SourceOutput) ToSnowflakeV2SourceOutput() SnowflakeV2SourceOutput {
	return o
}

func (o SnowflakeV2SourceOutput) ToSnowflakeV2SourceOutputWithContext(ctx context.Context) SnowflakeV2SourceOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SnowflakeV2SourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2Source) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Snowflake export settings.
func (o SnowflakeV2SourceOutput) ExportSettings() SnowflakeExportCopyCommandOutput {
	return o.ApplyT(func(v SnowflakeV2Source) SnowflakeExportCopyCommand { return v.ExportSettings }).(SnowflakeExportCopyCommandOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SnowflakeV2SourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2Source) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Snowflake Sql query. Type: string (or Expression with resultType string).
func (o SnowflakeV2SourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2Source) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o SnowflakeV2SourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2Source) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SnowflakeV2SourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2Source) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'SnowflakeV2Source'.
func (o SnowflakeV2SourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SnowflakeV2Source) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity snowflake source.
type SnowflakeV2SourceResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Snowflake export settings.
	ExportSettings SnowflakeExportCopyCommandResponse `pulumi:"exportSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Snowflake Sql query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SnowflakeV2Source'.
	Type string `pulumi:"type"`
}

// A copy activity snowflake source.
type SnowflakeV2SourceResponseOutput struct{ *pulumi.OutputState }

func (SnowflakeV2SourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnowflakeV2SourceResponse)(nil)).Elem()
}

func (o SnowflakeV2SourceResponseOutput) ToSnowflakeV2SourceResponseOutput() SnowflakeV2SourceResponseOutput {
	return o
}

func (o SnowflakeV2SourceResponseOutput) ToSnowflakeV2SourceResponseOutputWithContext(ctx context.Context) SnowflakeV2SourceResponseOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SnowflakeV2SourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2SourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Snowflake export settings.
func (o SnowflakeV2SourceResponseOutput) ExportSettings() SnowflakeExportCopyCommandResponseOutput {
	return o.ApplyT(func(v SnowflakeV2SourceResponse) SnowflakeExportCopyCommandResponse { return v.ExportSettings }).(SnowflakeExportCopyCommandResponseOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SnowflakeV2SourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2SourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Snowflake Sql query. Type: string (or Expression with resultType string).
func (o SnowflakeV2SourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2SourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o SnowflakeV2SourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2SourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SnowflakeV2SourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SnowflakeV2SourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'SnowflakeV2Source'.
func (o SnowflakeV2SourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SnowflakeV2SourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Spark configuration reference.
type SparkConfigurationParametrizationReference struct {
	// Reference spark configuration name. Type: string (or Expression with resultType string).
	ReferenceName interface{} `pulumi:"referenceName"`
	// Spark configuration reference type.
	Type string `pulumi:"type"`
}

// SparkConfigurationParametrizationReferenceInput is an input type that accepts SparkConfigurationParametrizationReferenceArgs and SparkConfigurationParametrizationReferenceOutput values.
// You can construct a concrete instance of `SparkConfigurationParametrizationReferenceInput` via:
//
//	SparkConfigurationParametrizationReferenceArgs{...}
type SparkConfigurationParametrizationReferenceInput interface {
	pulumi.Input

	ToSparkConfigurationParametrizationReferenceOutput() SparkConfigurationParametrizationReferenceOutput
	ToSparkConfigurationParametrizationReferenceOutputWithContext(context.Context) SparkConfigurationParametrizationReferenceOutput
}

// Spark configuration reference.
type SparkConfigurationParametrizationReferenceArgs struct {
	// Reference spark configuration name. Type: string (or Expression with resultType string).
	ReferenceName pulumi.Input `pulumi:"referenceName"`
	// Spark configuration reference type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SparkConfigurationParametrizationReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkConfigurationParametrizationReference)(nil)).Elem()
}

func (i SparkConfigurationParametrizationReferenceArgs) ToSparkConfigurationParametrizationReferenceOutput() SparkConfigurationParametrizationReferenceOutput {
	return i.ToSparkConfigurationParametrizationReferenceOutputWithContext(context.Background())
}

func (i SparkConfigurationParametrizationReferenceArgs) ToSparkConfigurationParametrizationReferenceOutputWithContext(ctx context.Context) SparkConfigurationParametrizationReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkConfigurationParametrizationReferenceOutput)
}

func (i SparkConfigurationParametrizationReferenceArgs) ToSparkConfigurationParametrizationReferencePtrOutput() SparkConfigurationParametrizationReferencePtrOutput {
	return i.ToSparkConfigurationParametrizationReferencePtrOutputWithContext(context.Background())
}

func (i SparkConfigurationParametrizationReferenceArgs) ToSparkConfigurationParametrizationReferencePtrOutputWithContext(ctx context.Context) SparkConfigurationParametrizationReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkConfigurationParametrizationReferenceOutput).ToSparkConfigurationParametrizationReferencePtrOutputWithContext(ctx)
}

// SparkConfigurationParametrizationReferencePtrInput is an input type that accepts SparkConfigurationParametrizationReferenceArgs, SparkConfigurationParametrizationReferencePtr and SparkConfigurationParametrizationReferencePtrOutput values.
// You can construct a concrete instance of `SparkConfigurationParametrizationReferencePtrInput` via:
//
//	        SparkConfigurationParametrizationReferenceArgs{...}
//
//	or:
//
//	        nil
type SparkConfigurationParametrizationReferencePtrInput interface {
	pulumi.Input

	ToSparkConfigurationParametrizationReferencePtrOutput() SparkConfigurationParametrizationReferencePtrOutput
	ToSparkConfigurationParametrizationReferencePtrOutputWithContext(context.Context) SparkConfigurationParametrizationReferencePtrOutput
}

type sparkConfigurationParametrizationReferencePtrType SparkConfigurationParametrizationReferenceArgs

func SparkConfigurationParametrizationReferencePtr(v *SparkConfigurationParametrizationReferenceArgs) SparkConfigurationParametrizationReferencePtrInput {
	return (*sparkConfigurationParametrizationReferencePtrType)(v)
}

func (*sparkConfigurationParametrizationReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkConfigurationParametrizationReference)(nil)).Elem()
}

func (i *sparkConfigurationParametrizationReferencePtrType) ToSparkConfigurationParametrizationReferencePtrOutput() SparkConfigurationParametrizationReferencePtrOutput {
	return i.ToSparkConfigurationParametrizationReferencePtrOutputWithContext(context.Background())
}

func (i *sparkConfigurationParametrizationReferencePtrType) ToSparkConfigurationParametrizationReferencePtrOutputWithContext(ctx context.Context) SparkConfigurationParametrizationReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkConfigurationParametrizationReferencePtrOutput)
}

// Spark configuration reference.
type SparkConfigurationParametrizationReferenceOutput struct{ *pulumi.OutputState }

func (SparkConfigurationParametrizationReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkConfigurationParametrizationReference)(nil)).Elem()
}

func (o SparkConfigurationParametrizationReferenceOutput) ToSparkConfigurationParametrizationReferenceOutput() SparkConfigurationParametrizationReferenceOutput {
	return o
}

func (o SparkConfigurationParametrizationReferenceOutput) ToSparkConfigurationParametrizationReferenceOutputWithContext(ctx context.Context) SparkConfigurationParametrizationReferenceOutput {
	return o
}

func (o SparkConfigurationParametrizationReferenceOutput) ToSparkConfigurationParametrizationReferencePtrOutput() SparkConfigurationParametrizationReferencePtrOutput {
	return o.ToSparkConfigurationParametrizationReferencePtrOutputWithContext(context.Background())
}

func (o SparkConfigurationParametrizationReferenceOutput) ToSparkConfigurationParametrizationReferencePtrOutputWithContext(ctx context.Context) SparkConfigurationParametrizationReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SparkConfigurationParametrizationReference) *SparkConfigurationParametrizationReference {
		return &v
	}).(SparkConfigurationParametrizationReferencePtrOutput)
}

// Reference spark configuration name. Type: string (or Expression with resultType string).
func (o SparkConfigurationParametrizationReferenceOutput) ReferenceName() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkConfigurationParametrizationReference) interface{} { return v.ReferenceName }).(pulumi.AnyOutput)
}

// Spark configuration reference type.
func (o SparkConfigurationParametrizationReferenceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SparkConfigurationParametrizationReference) string { return v.Type }).(pulumi.StringOutput)
}

type SparkConfigurationParametrizationReferencePtrOutput struct{ *pulumi.OutputState }

func (SparkConfigurationParametrizationReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkConfigurationParametrizationReference)(nil)).Elem()
}

func (o SparkConfigurationParametrizationReferencePtrOutput) ToSparkConfigurationParametrizationReferencePtrOutput() SparkConfigurationParametrizationReferencePtrOutput {
	return o
}

func (o SparkConfigurationParametrizationReferencePtrOutput) ToSparkConfigurationParametrizationReferencePtrOutputWithContext(ctx context.Context) SparkConfigurationParametrizationReferencePtrOutput {
	return o
}

func (o SparkConfigurationParametrizationReferencePtrOutput) Elem() SparkConfigurationParametrizationReferenceOutput {
	return o.ApplyT(func(v *SparkConfigurationParametrizationReference) SparkConfigurationParametrizationReference {
		if v != nil {
			return *v
		}
		var ret SparkConfigurationParametrizationReference
		return ret
	}).(SparkConfigurationParametrizationReferenceOutput)
}

// Reference spark configuration name. Type: string (or Expression with resultType string).
func (o SparkConfigurationParametrizationReferencePtrOutput) ReferenceName() pulumi.AnyOutput {
	return o.ApplyT(func(v *SparkConfigurationParametrizationReference) interface{} {
		if v == nil {
			return nil
		}
		return v.ReferenceName
	}).(pulumi.AnyOutput)
}

// Spark configuration reference type.
func (o SparkConfigurationParametrizationReferencePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkConfigurationParametrizationReference) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Spark configuration reference.
type SparkConfigurationParametrizationReferenceResponse struct {
	// Reference spark configuration name. Type: string (or Expression with resultType string).
	ReferenceName interface{} `pulumi:"referenceName"`
	// Spark configuration reference type.
	Type string `pulumi:"type"`
}

// Spark configuration reference.
type SparkConfigurationParametrizationReferenceResponseOutput struct{ *pulumi.OutputState }

func (SparkConfigurationParametrizationReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkConfigurationParametrizationReferenceResponse)(nil)).Elem()
}

func (o SparkConfigurationParametrizationReferenceResponseOutput) ToSparkConfigurationParametrizationReferenceResponseOutput() SparkConfigurationParametrizationReferenceResponseOutput {
	return o
}

func (o SparkConfigurationParametrizationReferenceResponseOutput) ToSparkConfigurationParametrizationReferenceResponseOutputWithContext(ctx context.Context) SparkConfigurationParametrizationReferenceResponseOutput {
	return o
}

// Reference spark configuration name. Type: string (or Expression with resultType string).
func (o SparkConfigurationParametrizationReferenceResponseOutput) ReferenceName() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkConfigurationParametrizationReferenceResponse) interface{} { return v.ReferenceName }).(pulumi.AnyOutput)
}

// Spark configuration reference type.
func (o SparkConfigurationParametrizationReferenceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SparkConfigurationParametrizationReferenceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type SparkConfigurationParametrizationReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (SparkConfigurationParametrizationReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkConfigurationParametrizationReferenceResponse)(nil)).Elem()
}

func (o SparkConfigurationParametrizationReferenceResponsePtrOutput) ToSparkConfigurationParametrizationReferenceResponsePtrOutput() SparkConfigurationParametrizationReferenceResponsePtrOutput {
	return o
}

func (o SparkConfigurationParametrizationReferenceResponsePtrOutput) ToSparkConfigurationParametrizationReferenceResponsePtrOutputWithContext(ctx context.Context) SparkConfigurationParametrizationReferenceResponsePtrOutput {
	return o
}

func (o SparkConfigurationParametrizationReferenceResponsePtrOutput) Elem() SparkConfigurationParametrizationReferenceResponseOutput {
	return o.ApplyT(func(v *SparkConfigurationParametrizationReferenceResponse) SparkConfigurationParametrizationReferenceResponse {
		if v != nil {
			return *v
		}
		var ret SparkConfigurationParametrizationReferenceResponse
		return ret
	}).(SparkConfigurationParametrizationReferenceResponseOutput)
}

// Reference spark configuration name. Type: string (or Expression with resultType string).
func (o SparkConfigurationParametrizationReferenceResponsePtrOutput) ReferenceName() pulumi.AnyOutput {
	return o.ApplyT(func(v *SparkConfigurationParametrizationReferenceResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.ReferenceName
	}).(pulumi.AnyOutput)
}

// Spark configuration reference type.
func (o SparkConfigurationParametrizationReferenceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkConfigurationParametrizationReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Spark Server linked service.
type SparkLinkedService struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication method used to access the Spark server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// IP address or host name of the Spark server
	Host interface{} `pulumi:"host"`
	// The partial URL corresponding to the Spark server.
	HttpPath interface{} `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the Username field
	Password interface{} `pulumi:"password"`
	// The TCP port that the Spark server uses to listen for client connections.
	Port interface{} `pulumi:"port"`
	// The type of Spark server.
	ServerType *string `pulumi:"serverType"`
	// The transport protocol to use in the Thrift layer.
	ThriftTransportProtocol *string `pulumi:"thriftTransportProtocol"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'Spark'.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
	// The user name that you use to access Spark Server.
	Username interface{} `pulumi:"username"`
}

// SparkLinkedServiceInput is an input type that accepts SparkLinkedServiceArgs and SparkLinkedServiceOutput values.
// You can construct a concrete instance of `SparkLinkedServiceInput` via:
//
//	SparkLinkedServiceArgs{...}
type SparkLinkedServiceInput interface {
	pulumi.Input

	ToSparkLinkedServiceOutput() SparkLinkedServiceOutput
	ToSparkLinkedServiceOutputWithContext(context.Context) SparkLinkedServiceOutput
}

// Spark Server linked service.
type SparkLinkedServiceArgs struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch pulumi.Input `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert pulumi.Input `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication method used to access the Spark server.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl pulumi.Input `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// IP address or host name of the Spark server
	Host pulumi.Input `pulumi:"host"`
	// The partial URL corresponding to the Spark server.
	HttpPath pulumi.Input `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the Username field
	Password pulumi.Input `pulumi:"password"`
	// The TCP port that the Spark server uses to listen for client connections.
	Port pulumi.Input `pulumi:"port"`
	// The type of Spark server.
	ServerType pulumi.StringPtrInput `pulumi:"serverType"`
	// The transport protocol to use in the Thrift layer.
	ThriftTransportProtocol pulumi.StringPtrInput `pulumi:"thriftTransportProtocol"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath pulumi.Input `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'Spark'.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore pulumi.Input `pulumi:"useSystemTrustStore"`
	// The user name that you use to access Spark Server.
	Username pulumi.Input `pulumi:"username"`
}

func (SparkLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkLinkedService)(nil)).Elem()
}

func (i SparkLinkedServiceArgs) ToSparkLinkedServiceOutput() SparkLinkedServiceOutput {
	return i.ToSparkLinkedServiceOutputWithContext(context.Background())
}

func (i SparkLinkedServiceArgs) ToSparkLinkedServiceOutputWithContext(ctx context.Context) SparkLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkLinkedServiceOutput)
}

// Spark Server linked service.
type SparkLinkedServiceOutput struct{ *pulumi.OutputState }

func (SparkLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkLinkedService)(nil)).Elem()
}

func (o SparkLinkedServiceOutput) ToSparkLinkedServiceOutput() SparkLinkedServiceOutput {
	return o
}

func (o SparkLinkedServiceOutput) ToSparkLinkedServiceOutputWithContext(ctx context.Context) SparkLinkedServiceOutput {
	return o
}

// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
func (o SparkLinkedServiceOutput) AllowHostNameCNMismatch() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkLinkedService) interface{} { return v.AllowHostNameCNMismatch }).(pulumi.AnyOutput)
}

// Specifies whether to allow self-signed certificates from the server. The default value is false.
func (o SparkLinkedServiceOutput) AllowSelfSignedServerCert() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkLinkedService) interface{} { return v.AllowSelfSignedServerCert }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o SparkLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SparkLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication method used to access the Spark server.
func (o SparkLinkedServiceOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v SparkLinkedService) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The integration runtime reference.
func (o SparkLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v SparkLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o SparkLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
func (o SparkLinkedServiceOutput) EnableSsl() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkLinkedService) interface{} { return v.EnableSsl }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o SparkLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// IP address or host name of the Spark server
func (o SparkLinkedServiceOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkLinkedService) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// The partial URL corresponding to the Spark server.
func (o SparkLinkedServiceOutput) HttpPath() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkLinkedService) interface{} { return v.HttpPath }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SparkLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SparkLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The password corresponding to the user name that you provided in the Username field
func (o SparkLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port that the Spark server uses to listen for client connections.
func (o SparkLinkedServiceOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkLinkedService) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The type of Spark server.
func (o SparkLinkedServiceOutput) ServerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkLinkedService) *string { return v.ServerType }).(pulumi.StringPtrOutput)
}

// The transport protocol to use in the Thrift layer.
func (o SparkLinkedServiceOutput) ThriftTransportProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkLinkedService) *string { return v.ThriftTransportProtocol }).(pulumi.StringPtrOutput)
}

// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
func (o SparkLinkedServiceOutput) TrustedCertPath() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkLinkedService) interface{} { return v.TrustedCertPath }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Spark'.
func (o SparkLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SparkLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
func (o SparkLinkedServiceOutput) UseSystemTrustStore() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkLinkedService) interface{} { return v.UseSystemTrustStore }).(pulumi.AnyOutput)
}

// The user name that you use to access Spark Server.
func (o SparkLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Spark Server linked service.
type SparkLinkedServiceResponse struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication method used to access the Spark server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// IP address or host name of the Spark server
	Host interface{} `pulumi:"host"`
	// The partial URL corresponding to the Spark server.
	HttpPath interface{} `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the Username field
	Password interface{} `pulumi:"password"`
	// The TCP port that the Spark server uses to listen for client connections.
	Port interface{} `pulumi:"port"`
	// The type of Spark server.
	ServerType *string `pulumi:"serverType"`
	// The transport protocol to use in the Thrift layer.
	ThriftTransportProtocol *string `pulumi:"thriftTransportProtocol"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'Spark'.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
	// The user name that you use to access Spark Server.
	Username interface{} `pulumi:"username"`
}

// Spark Server linked service.
type SparkLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SparkLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkLinkedServiceResponse)(nil)).Elem()
}

func (o SparkLinkedServiceResponseOutput) ToSparkLinkedServiceResponseOutput() SparkLinkedServiceResponseOutput {
	return o
}

func (o SparkLinkedServiceResponseOutput) ToSparkLinkedServiceResponseOutputWithContext(ctx context.Context) SparkLinkedServiceResponseOutput {
	return o
}

// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
func (o SparkLinkedServiceResponseOutput) AllowHostNameCNMismatch() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) interface{} { return v.AllowHostNameCNMismatch }).(pulumi.AnyOutput)
}

// Specifies whether to allow self-signed certificates from the server. The default value is false.
func (o SparkLinkedServiceResponseOutput) AllowSelfSignedServerCert() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) interface{} { return v.AllowSelfSignedServerCert }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o SparkLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication method used to access the Spark server.
func (o SparkLinkedServiceResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The integration runtime reference.
func (o SparkLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o SparkLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
func (o SparkLinkedServiceResponseOutput) EnableSsl() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) interface{} { return v.EnableSsl }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o SparkLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// IP address or host name of the Spark server
func (o SparkLinkedServiceResponseOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// The partial URL corresponding to the Spark server.
func (o SparkLinkedServiceResponseOutput) HttpPath() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) interface{} { return v.HttpPath }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SparkLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The password corresponding to the user name that you provided in the Username field
func (o SparkLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port that the Spark server uses to listen for client connections.
func (o SparkLinkedServiceResponseOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The type of Spark server.
func (o SparkLinkedServiceResponseOutput) ServerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) *string { return v.ServerType }).(pulumi.StringPtrOutput)
}

// The transport protocol to use in the Thrift layer.
func (o SparkLinkedServiceResponseOutput) ThriftTransportProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) *string { return v.ThriftTransportProtocol }).(pulumi.StringPtrOutput)
}

// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
func (o SparkLinkedServiceResponseOutput) TrustedCertPath() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) interface{} { return v.TrustedCertPath }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Spark'.
func (o SparkLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.
func (o SparkLinkedServiceResponseOutput) UseSystemTrustStore() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) interface{} { return v.UseSystemTrustStore }).(pulumi.AnyOutput)
}

// The user name that you use to access Spark Server.
func (o SparkLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Spark Server dataset.
type SparkObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Spark. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'SparkObject'.
	Type string `pulumi:"type"`
}

// SparkObjectDatasetInput is an input type that accepts SparkObjectDatasetArgs and SparkObjectDatasetOutput values.
// You can construct a concrete instance of `SparkObjectDatasetInput` via:
//
//	SparkObjectDatasetArgs{...}
type SparkObjectDatasetInput interface {
	pulumi.Input

	ToSparkObjectDatasetOutput() SparkObjectDatasetOutput
	ToSparkObjectDatasetOutputWithContext(context.Context) SparkObjectDatasetOutput
}

// Spark Server dataset.
type SparkObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Spark. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'SparkObject'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SparkObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkObjectDataset)(nil)).Elem()
}

func (i SparkObjectDatasetArgs) ToSparkObjectDatasetOutput() SparkObjectDatasetOutput {
	return i.ToSparkObjectDatasetOutputWithContext(context.Background())
}

func (i SparkObjectDatasetArgs) ToSparkObjectDatasetOutputWithContext(ctx context.Context) SparkObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkObjectDatasetOutput)
}

// Spark Server dataset.
type SparkObjectDatasetOutput struct{ *pulumi.OutputState }

func (SparkObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkObjectDataset)(nil)).Elem()
}

func (o SparkObjectDatasetOutput) ToSparkObjectDatasetOutput() SparkObjectDatasetOutput {
	return o
}

func (o SparkObjectDatasetOutput) ToSparkObjectDatasetOutputWithContext(ctx context.Context) SparkObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SparkObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SparkObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SparkObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SparkObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v SparkObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o SparkObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v SparkObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o SparkObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SparkObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SparkObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SparkObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Spark. Type: string (or Expression with resultType string).
func (o SparkObjectDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkObjectDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o SparkObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'SparkObject'.
func (o SparkObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SparkObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Spark Server dataset.
type SparkObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Spark. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'SparkObject'.
	Type string `pulumi:"type"`
}

// Spark Server dataset.
type SparkObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (SparkObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkObjectDatasetResponse)(nil)).Elem()
}

func (o SparkObjectDatasetResponseOutput) ToSparkObjectDatasetResponseOutput() SparkObjectDatasetResponseOutput {
	return o
}

func (o SparkObjectDatasetResponseOutput) ToSparkObjectDatasetResponseOutputWithContext(ctx context.Context) SparkObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SparkObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SparkObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SparkObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SparkObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v SparkObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o SparkObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v SparkObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o SparkObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SparkObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SparkObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SparkObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Spark. Type: string (or Expression with resultType string).
func (o SparkObjectDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkObjectDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o SparkObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'SparkObject'.
func (o SparkObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SparkObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Spark Server source.
type SparkSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SparkSource'.
	Type string `pulumi:"type"`
}

// SparkSourceInput is an input type that accepts SparkSourceArgs and SparkSourceOutput values.
// You can construct a concrete instance of `SparkSourceInput` via:
//
//	SparkSourceArgs{...}
type SparkSourceInput interface {
	pulumi.Input

	ToSparkSourceOutput() SparkSourceOutput
	ToSparkSourceOutputWithContext(context.Context) SparkSourceOutput
}

// A copy activity Spark Server source.
type SparkSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SparkSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SparkSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkSource)(nil)).Elem()
}

func (i SparkSourceArgs) ToSparkSourceOutput() SparkSourceOutput {
	return i.ToSparkSourceOutputWithContext(context.Background())
}

func (i SparkSourceArgs) ToSparkSourceOutputWithContext(ctx context.Context) SparkSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkSourceOutput)
}

// A copy activity Spark Server source.
type SparkSourceOutput struct{ *pulumi.OutputState }

func (SparkSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkSource)(nil)).Elem()
}

func (o SparkSourceOutput) ToSparkSourceOutput() SparkSourceOutput {
	return o
}

func (o SparkSourceOutput) ToSparkSourceOutputWithContext(ctx context.Context) SparkSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o SparkSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SparkSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SparkSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o SparkSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SparkSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o SparkSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SparkSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'SparkSource'.
func (o SparkSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SparkSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Spark Server source.
type SparkSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SparkSource'.
	Type string `pulumi:"type"`
}

// A copy activity Spark Server source.
type SparkSourceResponseOutput struct{ *pulumi.OutputState }

func (SparkSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkSourceResponse)(nil)).Elem()
}

func (o SparkSourceResponseOutput) ToSparkSourceResponseOutput() SparkSourceResponseOutput {
	return o
}

func (o SparkSourceResponseOutput) ToSparkSourceResponseOutputWithContext(ctx context.Context) SparkSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o SparkSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SparkSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SparkSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o SparkSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SparkSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o SparkSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SparkSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'SparkSource'.
func (o SparkSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SparkSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Sql always encrypted properties.
type SqlAlwaysEncryptedProperties struct {
	// Sql always encrypted AKV authentication type. Type: string.
	AlwaysEncryptedAkvAuthType string `pulumi:"alwaysEncryptedAkvAuthType"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// The client ID of the application in Azure Active Directory used for Azure Key Vault authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure Key Vault.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
}

// SqlAlwaysEncryptedPropertiesInput is an input type that accepts SqlAlwaysEncryptedPropertiesArgs and SqlAlwaysEncryptedPropertiesOutput values.
// You can construct a concrete instance of `SqlAlwaysEncryptedPropertiesInput` via:
//
//	SqlAlwaysEncryptedPropertiesArgs{...}
type SqlAlwaysEncryptedPropertiesInput interface {
	pulumi.Input

	ToSqlAlwaysEncryptedPropertiesOutput() SqlAlwaysEncryptedPropertiesOutput
	ToSqlAlwaysEncryptedPropertiesOutputWithContext(context.Context) SqlAlwaysEncryptedPropertiesOutput
}

// Sql always encrypted properties.
type SqlAlwaysEncryptedPropertiesArgs struct {
	// Sql always encrypted AKV authentication type. Type: string.
	AlwaysEncryptedAkvAuthType pulumi.StringInput `pulumi:"alwaysEncryptedAkvAuthType"`
	// The credential reference containing authentication information.
	Credential CredentialReferencePtrInput `pulumi:"credential"`
	// The client ID of the application in Azure Active Directory used for Azure Key Vault authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure Key Vault.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
}

func (SqlAlwaysEncryptedPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlAlwaysEncryptedProperties)(nil)).Elem()
}

func (i SqlAlwaysEncryptedPropertiesArgs) ToSqlAlwaysEncryptedPropertiesOutput() SqlAlwaysEncryptedPropertiesOutput {
	return i.ToSqlAlwaysEncryptedPropertiesOutputWithContext(context.Background())
}

func (i SqlAlwaysEncryptedPropertiesArgs) ToSqlAlwaysEncryptedPropertiesOutputWithContext(ctx context.Context) SqlAlwaysEncryptedPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlAlwaysEncryptedPropertiesOutput)
}

func (i SqlAlwaysEncryptedPropertiesArgs) ToSqlAlwaysEncryptedPropertiesPtrOutput() SqlAlwaysEncryptedPropertiesPtrOutput {
	return i.ToSqlAlwaysEncryptedPropertiesPtrOutputWithContext(context.Background())
}

func (i SqlAlwaysEncryptedPropertiesArgs) ToSqlAlwaysEncryptedPropertiesPtrOutputWithContext(ctx context.Context) SqlAlwaysEncryptedPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlAlwaysEncryptedPropertiesOutput).ToSqlAlwaysEncryptedPropertiesPtrOutputWithContext(ctx)
}

// SqlAlwaysEncryptedPropertiesPtrInput is an input type that accepts SqlAlwaysEncryptedPropertiesArgs, SqlAlwaysEncryptedPropertiesPtr and SqlAlwaysEncryptedPropertiesPtrOutput values.
// You can construct a concrete instance of `SqlAlwaysEncryptedPropertiesPtrInput` via:
//
//	        SqlAlwaysEncryptedPropertiesArgs{...}
//
//	or:
//
//	        nil
type SqlAlwaysEncryptedPropertiesPtrInput interface {
	pulumi.Input

	ToSqlAlwaysEncryptedPropertiesPtrOutput() SqlAlwaysEncryptedPropertiesPtrOutput
	ToSqlAlwaysEncryptedPropertiesPtrOutputWithContext(context.Context) SqlAlwaysEncryptedPropertiesPtrOutput
}

type sqlAlwaysEncryptedPropertiesPtrType SqlAlwaysEncryptedPropertiesArgs

func SqlAlwaysEncryptedPropertiesPtr(v *SqlAlwaysEncryptedPropertiesArgs) SqlAlwaysEncryptedPropertiesPtrInput {
	return (*sqlAlwaysEncryptedPropertiesPtrType)(v)
}

func (*sqlAlwaysEncryptedPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlAlwaysEncryptedProperties)(nil)).Elem()
}

func (i *sqlAlwaysEncryptedPropertiesPtrType) ToSqlAlwaysEncryptedPropertiesPtrOutput() SqlAlwaysEncryptedPropertiesPtrOutput {
	return i.ToSqlAlwaysEncryptedPropertiesPtrOutputWithContext(context.Background())
}

func (i *sqlAlwaysEncryptedPropertiesPtrType) ToSqlAlwaysEncryptedPropertiesPtrOutputWithContext(ctx context.Context) SqlAlwaysEncryptedPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlAlwaysEncryptedPropertiesPtrOutput)
}

// Sql always encrypted properties.
type SqlAlwaysEncryptedPropertiesOutput struct{ *pulumi.OutputState }

func (SqlAlwaysEncryptedPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlAlwaysEncryptedProperties)(nil)).Elem()
}

func (o SqlAlwaysEncryptedPropertiesOutput) ToSqlAlwaysEncryptedPropertiesOutput() SqlAlwaysEncryptedPropertiesOutput {
	return o
}

func (o SqlAlwaysEncryptedPropertiesOutput) ToSqlAlwaysEncryptedPropertiesOutputWithContext(ctx context.Context) SqlAlwaysEncryptedPropertiesOutput {
	return o
}

func (o SqlAlwaysEncryptedPropertiesOutput) ToSqlAlwaysEncryptedPropertiesPtrOutput() SqlAlwaysEncryptedPropertiesPtrOutput {
	return o.ToSqlAlwaysEncryptedPropertiesPtrOutputWithContext(context.Background())
}

func (o SqlAlwaysEncryptedPropertiesOutput) ToSqlAlwaysEncryptedPropertiesPtrOutputWithContext(ctx context.Context) SqlAlwaysEncryptedPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SqlAlwaysEncryptedProperties) *SqlAlwaysEncryptedProperties {
		return &v
	}).(SqlAlwaysEncryptedPropertiesPtrOutput)
}

// Sql always encrypted AKV authentication type. Type: string.
func (o SqlAlwaysEncryptedPropertiesOutput) AlwaysEncryptedAkvAuthType() pulumi.StringOutput {
	return o.ApplyT(func(v SqlAlwaysEncryptedProperties) string { return v.AlwaysEncryptedAkvAuthType }).(pulumi.StringOutput)
}

// The credential reference containing authentication information.
func (o SqlAlwaysEncryptedPropertiesOutput) Credential() CredentialReferencePtrOutput {
	return o.ApplyT(func(v SqlAlwaysEncryptedProperties) *CredentialReference { return v.Credential }).(CredentialReferencePtrOutput)
}

// The client ID of the application in Azure Active Directory used for Azure Key Vault authentication. Type: string (or Expression with resultType string).
func (o SqlAlwaysEncryptedPropertiesOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlAlwaysEncryptedProperties) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The key of the service principal used to authenticate against Azure Key Vault.
func (o SqlAlwaysEncryptedPropertiesOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlAlwaysEncryptedProperties) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

type SqlAlwaysEncryptedPropertiesPtrOutput struct{ *pulumi.OutputState }

func (SqlAlwaysEncryptedPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlAlwaysEncryptedProperties)(nil)).Elem()
}

func (o SqlAlwaysEncryptedPropertiesPtrOutput) ToSqlAlwaysEncryptedPropertiesPtrOutput() SqlAlwaysEncryptedPropertiesPtrOutput {
	return o
}

func (o SqlAlwaysEncryptedPropertiesPtrOutput) ToSqlAlwaysEncryptedPropertiesPtrOutputWithContext(ctx context.Context) SqlAlwaysEncryptedPropertiesPtrOutput {
	return o
}

func (o SqlAlwaysEncryptedPropertiesPtrOutput) Elem() SqlAlwaysEncryptedPropertiesOutput {
	return o.ApplyT(func(v *SqlAlwaysEncryptedProperties) SqlAlwaysEncryptedProperties {
		if v != nil {
			return *v
		}
		var ret SqlAlwaysEncryptedProperties
		return ret
	}).(SqlAlwaysEncryptedPropertiesOutput)
}

// Sql always encrypted AKV authentication type. Type: string.
func (o SqlAlwaysEncryptedPropertiesPtrOutput) AlwaysEncryptedAkvAuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlAlwaysEncryptedProperties) *string {
		if v == nil {
			return nil
		}
		return &v.AlwaysEncryptedAkvAuthType
	}).(pulumi.StringPtrOutput)
}

// The credential reference containing authentication information.
func (o SqlAlwaysEncryptedPropertiesPtrOutput) Credential() CredentialReferencePtrOutput {
	return o.ApplyT(func(v *SqlAlwaysEncryptedProperties) *CredentialReference {
		if v == nil {
			return nil
		}
		return v.Credential
	}).(CredentialReferencePtrOutput)
}

// The client ID of the application in Azure Active Directory used for Azure Key Vault authentication. Type: string (or Expression with resultType string).
func (o SqlAlwaysEncryptedPropertiesPtrOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v *SqlAlwaysEncryptedProperties) interface{} {
		if v == nil {
			return nil
		}
		return v.ServicePrincipalId
	}).(pulumi.AnyOutput)
}

// The key of the service principal used to authenticate against Azure Key Vault.
func (o SqlAlwaysEncryptedPropertiesPtrOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v *SqlAlwaysEncryptedProperties) interface{} {
		if v == nil {
			return nil
		}
		return v.ServicePrincipalKey
	}).(pulumi.AnyOutput)
}

// Sql always encrypted properties.
type SqlAlwaysEncryptedPropertiesResponse struct {
	// Sql always encrypted AKV authentication type. Type: string.
	AlwaysEncryptedAkvAuthType string `pulumi:"alwaysEncryptedAkvAuthType"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// The client ID of the application in Azure Active Directory used for Azure Key Vault authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure Key Vault.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
}

// Sql always encrypted properties.
type SqlAlwaysEncryptedPropertiesResponseOutput struct{ *pulumi.OutputState }

func (SqlAlwaysEncryptedPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlAlwaysEncryptedPropertiesResponse)(nil)).Elem()
}

func (o SqlAlwaysEncryptedPropertiesResponseOutput) ToSqlAlwaysEncryptedPropertiesResponseOutput() SqlAlwaysEncryptedPropertiesResponseOutput {
	return o
}

func (o SqlAlwaysEncryptedPropertiesResponseOutput) ToSqlAlwaysEncryptedPropertiesResponseOutputWithContext(ctx context.Context) SqlAlwaysEncryptedPropertiesResponseOutput {
	return o
}

// Sql always encrypted AKV authentication type. Type: string.
func (o SqlAlwaysEncryptedPropertiesResponseOutput) AlwaysEncryptedAkvAuthType() pulumi.StringOutput {
	return o.ApplyT(func(v SqlAlwaysEncryptedPropertiesResponse) string { return v.AlwaysEncryptedAkvAuthType }).(pulumi.StringOutput)
}

// The credential reference containing authentication information.
func (o SqlAlwaysEncryptedPropertiesResponseOutput) Credential() CredentialReferenceResponsePtrOutput {
	return o.ApplyT(func(v SqlAlwaysEncryptedPropertiesResponse) *CredentialReferenceResponse { return v.Credential }).(CredentialReferenceResponsePtrOutput)
}

// The client ID of the application in Azure Active Directory used for Azure Key Vault authentication. Type: string (or Expression with resultType string).
func (o SqlAlwaysEncryptedPropertiesResponseOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlAlwaysEncryptedPropertiesResponse) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The key of the service principal used to authenticate against Azure Key Vault.
func (o SqlAlwaysEncryptedPropertiesResponseOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlAlwaysEncryptedPropertiesResponse) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

type SqlAlwaysEncryptedPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (SqlAlwaysEncryptedPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlAlwaysEncryptedPropertiesResponse)(nil)).Elem()
}

func (o SqlAlwaysEncryptedPropertiesResponsePtrOutput) ToSqlAlwaysEncryptedPropertiesResponsePtrOutput() SqlAlwaysEncryptedPropertiesResponsePtrOutput {
	return o
}

func (o SqlAlwaysEncryptedPropertiesResponsePtrOutput) ToSqlAlwaysEncryptedPropertiesResponsePtrOutputWithContext(ctx context.Context) SqlAlwaysEncryptedPropertiesResponsePtrOutput {
	return o
}

func (o SqlAlwaysEncryptedPropertiesResponsePtrOutput) Elem() SqlAlwaysEncryptedPropertiesResponseOutput {
	return o.ApplyT(func(v *SqlAlwaysEncryptedPropertiesResponse) SqlAlwaysEncryptedPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret SqlAlwaysEncryptedPropertiesResponse
		return ret
	}).(SqlAlwaysEncryptedPropertiesResponseOutput)
}

// Sql always encrypted AKV authentication type. Type: string.
func (o SqlAlwaysEncryptedPropertiesResponsePtrOutput) AlwaysEncryptedAkvAuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlAlwaysEncryptedPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AlwaysEncryptedAkvAuthType
	}).(pulumi.StringPtrOutput)
}

// The credential reference containing authentication information.
func (o SqlAlwaysEncryptedPropertiesResponsePtrOutput) Credential() CredentialReferenceResponsePtrOutput {
	return o.ApplyT(func(v *SqlAlwaysEncryptedPropertiesResponse) *CredentialReferenceResponse {
		if v == nil {
			return nil
		}
		return v.Credential
	}).(CredentialReferenceResponsePtrOutput)
}

// The client ID of the application in Azure Active Directory used for Azure Key Vault authentication. Type: string (or Expression with resultType string).
func (o SqlAlwaysEncryptedPropertiesResponsePtrOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v *SqlAlwaysEncryptedPropertiesResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.ServicePrincipalId
	}).(pulumi.AnyOutput)
}

// The key of the service principal used to authenticate against Azure Key Vault.
func (o SqlAlwaysEncryptedPropertiesResponsePtrOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v *SqlAlwaysEncryptedPropertiesResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.ServicePrincipalKey
	}).(pulumi.AnyOutput)
}

// A copy activity SQL Data Warehouse sink.
type SqlDWSink struct {
	// Indicates to use Copy Command to copy data into SQL Data Warehouse. Type: boolean (or Expression with resultType boolean).
	AllowCopyCommand interface{} `pulumi:"allowCopyCommand"`
	// Indicates to use PolyBase to copy data into SQL Data Warehouse when applicable. Type: boolean (or Expression with resultType boolean).
	AllowPolyBase interface{} `pulumi:"allowPolyBase"`
	// Specifies Copy Command related settings when allowCopyCommand is true.
	CopyCommandSettings *DWCopyCommandSettings `pulumi:"copyCommandSettings"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specifies PolyBase-related settings when allowPolyBase is true.
	PolyBaseSettings *PolybaseSettings `pulumi:"polyBaseSettings"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean).
	SqlWriterUseTableLock interface{} `pulumi:"sqlWriterUseTableLock"`
	// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
	TableOption interface{} `pulumi:"tableOption"`
	// Copy sink type.
	// Expected value is 'SqlDWSink'.
	Type string `pulumi:"type"`
	// SQL DW upsert settings.
	UpsertSettings *SqlDWUpsertSettings `pulumi:"upsertSettings"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Write behavior when copying data into azure SQL DW. Type: SqlDWWriteBehaviorEnum (or Expression with resultType SqlDWWriteBehaviorEnum)
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// SqlDWSinkInput is an input type that accepts SqlDWSinkArgs and SqlDWSinkOutput values.
// You can construct a concrete instance of `SqlDWSinkInput` via:
//
//	SqlDWSinkArgs{...}
type SqlDWSinkInput interface {
	pulumi.Input

	ToSqlDWSinkOutput() SqlDWSinkOutput
	ToSqlDWSinkOutputWithContext(context.Context) SqlDWSinkOutput
}

// A copy activity SQL Data Warehouse sink.
type SqlDWSinkArgs struct {
	// Indicates to use Copy Command to copy data into SQL Data Warehouse. Type: boolean (or Expression with resultType boolean).
	AllowCopyCommand pulumi.Input `pulumi:"allowCopyCommand"`
	// Indicates to use PolyBase to copy data into SQL Data Warehouse when applicable. Type: boolean (or Expression with resultType boolean).
	AllowPolyBase pulumi.Input `pulumi:"allowPolyBase"`
	// Specifies Copy Command related settings when allowCopyCommand is true.
	CopyCommandSettings DWCopyCommandSettingsPtrInput `pulumi:"copyCommandSettings"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Specifies PolyBase-related settings when allowPolyBase is true.
	PolyBaseSettings PolybaseSettingsPtrInput `pulumi:"polyBaseSettings"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript pulumi.Input `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount pulumi.Input `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait pulumi.Input `pulumi:"sinkRetryWait"`
	// Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean).
	SqlWriterUseTableLock pulumi.Input `pulumi:"sqlWriterUseTableLock"`
	// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
	TableOption pulumi.Input `pulumi:"tableOption"`
	// Copy sink type.
	// Expected value is 'SqlDWSink'.
	Type pulumi.StringInput `pulumi:"type"`
	// SQL DW upsert settings.
	UpsertSettings SqlDWUpsertSettingsPtrInput `pulumi:"upsertSettings"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize pulumi.Input `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout pulumi.Input `pulumi:"writeBatchTimeout"`
	// Write behavior when copying data into azure SQL DW. Type: SqlDWWriteBehaviorEnum (or Expression with resultType SqlDWWriteBehaviorEnum)
	WriteBehavior pulumi.Input `pulumi:"writeBehavior"`
}

func (SqlDWSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlDWSink)(nil)).Elem()
}

func (i SqlDWSinkArgs) ToSqlDWSinkOutput() SqlDWSinkOutput {
	return i.ToSqlDWSinkOutputWithContext(context.Background())
}

func (i SqlDWSinkArgs) ToSqlDWSinkOutputWithContext(ctx context.Context) SqlDWSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlDWSinkOutput)
}

// A copy activity SQL Data Warehouse sink.
type SqlDWSinkOutput struct{ *pulumi.OutputState }

func (SqlDWSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlDWSink)(nil)).Elem()
}

func (o SqlDWSinkOutput) ToSqlDWSinkOutput() SqlDWSinkOutput {
	return o
}

func (o SqlDWSinkOutput) ToSqlDWSinkOutputWithContext(ctx context.Context) SqlDWSinkOutput {
	return o
}

// Indicates to use Copy Command to copy data into SQL Data Warehouse. Type: boolean (or Expression with resultType boolean).
func (o SqlDWSinkOutput) AllowCopyCommand() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSink) interface{} { return v.AllowCopyCommand }).(pulumi.AnyOutput)
}

// Indicates to use PolyBase to copy data into SQL Data Warehouse when applicable. Type: boolean (or Expression with resultType boolean).
func (o SqlDWSinkOutput) AllowPolyBase() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSink) interface{} { return v.AllowPolyBase }).(pulumi.AnyOutput)
}

// Specifies Copy Command related settings when allowCopyCommand is true.
func (o SqlDWSinkOutput) CopyCommandSettings() DWCopyCommandSettingsPtrOutput {
	return o.ApplyT(func(v SqlDWSink) *DWCopyCommandSettings { return v.CopyCommandSettings }).(DWCopyCommandSettingsPtrOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SqlDWSinkOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSink) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o SqlDWSinkOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSink) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Specifies PolyBase-related settings when allowPolyBase is true.
func (o SqlDWSinkOutput) PolyBaseSettings() PolybaseSettingsPtrOutput {
	return o.ApplyT(func(v SqlDWSink) *PolybaseSettings { return v.PolyBaseSettings }).(PolybaseSettingsPtrOutput)
}

// SQL pre-copy script. Type: string (or Expression with resultType string).
func (o SqlDWSinkOutput) PreCopyScript() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSink) interface{} { return v.PreCopyScript }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o SqlDWSinkOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSink) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SqlDWSinkOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSink) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean).
func (o SqlDWSinkOutput) SqlWriterUseTableLock() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSink) interface{} { return v.SqlWriterUseTableLock }).(pulumi.AnyOutput)
}

// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
func (o SqlDWSinkOutput) TableOption() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSink) interface{} { return v.TableOption }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'SqlDWSink'.
func (o SqlDWSinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlDWSink) string { return v.Type }).(pulumi.StringOutput)
}

// SQL DW upsert settings.
func (o SqlDWSinkOutput) UpsertSettings() SqlDWUpsertSettingsPtrOutput {
	return o.ApplyT(func(v SqlDWSink) *SqlDWUpsertSettings { return v.UpsertSettings }).(SqlDWUpsertSettingsPtrOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o SqlDWSinkOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSink) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SqlDWSinkOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSink) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// Write behavior when copying data into azure SQL DW. Type: SqlDWWriteBehaviorEnum (or Expression with resultType SqlDWWriteBehaviorEnum)
func (o SqlDWSinkOutput) WriteBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSink) interface{} { return v.WriteBehavior }).(pulumi.AnyOutput)
}

// A copy activity SQL Data Warehouse sink.
type SqlDWSinkResponse struct {
	// Indicates to use Copy Command to copy data into SQL Data Warehouse. Type: boolean (or Expression with resultType boolean).
	AllowCopyCommand interface{} `pulumi:"allowCopyCommand"`
	// Indicates to use PolyBase to copy data into SQL Data Warehouse when applicable. Type: boolean (or Expression with resultType boolean).
	AllowPolyBase interface{} `pulumi:"allowPolyBase"`
	// Specifies Copy Command related settings when allowCopyCommand is true.
	CopyCommandSettings *DWCopyCommandSettingsResponse `pulumi:"copyCommandSettings"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specifies PolyBase-related settings when allowPolyBase is true.
	PolyBaseSettings *PolybaseSettingsResponse `pulumi:"polyBaseSettings"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean).
	SqlWriterUseTableLock interface{} `pulumi:"sqlWriterUseTableLock"`
	// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
	TableOption interface{} `pulumi:"tableOption"`
	// Copy sink type.
	// Expected value is 'SqlDWSink'.
	Type string `pulumi:"type"`
	// SQL DW upsert settings.
	UpsertSettings *SqlDWUpsertSettingsResponse `pulumi:"upsertSettings"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Write behavior when copying data into azure SQL DW. Type: SqlDWWriteBehaviorEnum (or Expression with resultType SqlDWWriteBehaviorEnum)
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// A copy activity SQL Data Warehouse sink.
type SqlDWSinkResponseOutput struct{ *pulumi.OutputState }

func (SqlDWSinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlDWSinkResponse)(nil)).Elem()
}

func (o SqlDWSinkResponseOutput) ToSqlDWSinkResponseOutput() SqlDWSinkResponseOutput {
	return o
}

func (o SqlDWSinkResponseOutput) ToSqlDWSinkResponseOutputWithContext(ctx context.Context) SqlDWSinkResponseOutput {
	return o
}

// Indicates to use Copy Command to copy data into SQL Data Warehouse. Type: boolean (or Expression with resultType boolean).
func (o SqlDWSinkResponseOutput) AllowCopyCommand() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSinkResponse) interface{} { return v.AllowCopyCommand }).(pulumi.AnyOutput)
}

// Indicates to use PolyBase to copy data into SQL Data Warehouse when applicable. Type: boolean (or Expression with resultType boolean).
func (o SqlDWSinkResponseOutput) AllowPolyBase() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSinkResponse) interface{} { return v.AllowPolyBase }).(pulumi.AnyOutput)
}

// Specifies Copy Command related settings when allowCopyCommand is true.
func (o SqlDWSinkResponseOutput) CopyCommandSettings() DWCopyCommandSettingsResponsePtrOutput {
	return o.ApplyT(func(v SqlDWSinkResponse) *DWCopyCommandSettingsResponse { return v.CopyCommandSettings }).(DWCopyCommandSettingsResponsePtrOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SqlDWSinkResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSinkResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o SqlDWSinkResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSinkResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Specifies PolyBase-related settings when allowPolyBase is true.
func (o SqlDWSinkResponseOutput) PolyBaseSettings() PolybaseSettingsResponsePtrOutput {
	return o.ApplyT(func(v SqlDWSinkResponse) *PolybaseSettingsResponse { return v.PolyBaseSettings }).(PolybaseSettingsResponsePtrOutput)
}

// SQL pre-copy script. Type: string (or Expression with resultType string).
func (o SqlDWSinkResponseOutput) PreCopyScript() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSinkResponse) interface{} { return v.PreCopyScript }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o SqlDWSinkResponseOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSinkResponse) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SqlDWSinkResponseOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSinkResponse) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean).
func (o SqlDWSinkResponseOutput) SqlWriterUseTableLock() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSinkResponse) interface{} { return v.SqlWriterUseTableLock }).(pulumi.AnyOutput)
}

// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
func (o SqlDWSinkResponseOutput) TableOption() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSinkResponse) interface{} { return v.TableOption }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'SqlDWSink'.
func (o SqlDWSinkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlDWSinkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// SQL DW upsert settings.
func (o SqlDWSinkResponseOutput) UpsertSettings() SqlDWUpsertSettingsResponsePtrOutput {
	return o.ApplyT(func(v SqlDWSinkResponse) *SqlDWUpsertSettingsResponse { return v.UpsertSettings }).(SqlDWUpsertSettingsResponsePtrOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o SqlDWSinkResponseOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSinkResponse) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SqlDWSinkResponseOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSinkResponse) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// Write behavior when copying data into azure SQL DW. Type: SqlDWWriteBehaviorEnum (or Expression with resultType SqlDWWriteBehaviorEnum)
func (o SqlDWSinkResponseOutput) WriteBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSinkResponse) interface{} { return v.WriteBehavior }).(pulumi.AnyOutput)
}

// A copy activity SQL Data Warehouse source.
type SqlDWSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string).
	IsolationLevel interface{} `pulumi:"isolationLevel"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange". Type: string (or Expression with resultType string).
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for Sql source partitioning.
	PartitionSettings *SqlPartitionSettings `pulumi:"partitionSettings"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// SQL Data Warehouse reader query. Type: string (or Expression with resultType string).
	SqlReaderQuery interface{} `pulumi:"sqlReaderQuery"`
	// Name of the stored procedure for a SQL Data Warehouse source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
	SqlReaderStoredProcedureName interface{} `pulumi:"sqlReaderStoredProcedureName"`
	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}". Type: object (or Expression with resultType object), itemType: StoredProcedureParameter.
	StoredProcedureParameters interface{} `pulumi:"storedProcedureParameters"`
	// Copy source type.
	// Expected value is 'SqlDWSource'.
	Type string `pulumi:"type"`
}

// SqlDWSourceInput is an input type that accepts SqlDWSourceArgs and SqlDWSourceOutput values.
// You can construct a concrete instance of `SqlDWSourceInput` via:
//
//	SqlDWSourceArgs{...}
type SqlDWSourceInput interface {
	pulumi.Input

	ToSqlDWSourceOutput() SqlDWSourceOutput
	ToSqlDWSourceOutputWithContext(context.Context) SqlDWSourceOutput
}

// A copy activity SQL Data Warehouse source.
type SqlDWSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string).
	IsolationLevel pulumi.Input `pulumi:"isolationLevel"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange". Type: string (or Expression with resultType string).
	PartitionOption pulumi.Input `pulumi:"partitionOption"`
	// The settings that will be leveraged for Sql source partitioning.
	PartitionSettings SqlPartitionSettingsPtrInput `pulumi:"partitionSettings"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// SQL Data Warehouse reader query. Type: string (or Expression with resultType string).
	SqlReaderQuery pulumi.Input `pulumi:"sqlReaderQuery"`
	// Name of the stored procedure for a SQL Data Warehouse source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
	SqlReaderStoredProcedureName pulumi.Input `pulumi:"sqlReaderStoredProcedureName"`
	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}". Type: object (or Expression with resultType object), itemType: StoredProcedureParameter.
	StoredProcedureParameters pulumi.Input `pulumi:"storedProcedureParameters"`
	// Copy source type.
	// Expected value is 'SqlDWSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SqlDWSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlDWSource)(nil)).Elem()
}

func (i SqlDWSourceArgs) ToSqlDWSourceOutput() SqlDWSourceOutput {
	return i.ToSqlDWSourceOutputWithContext(context.Background())
}

func (i SqlDWSourceArgs) ToSqlDWSourceOutputWithContext(ctx context.Context) SqlDWSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlDWSourceOutput)
}

// A copy activity SQL Data Warehouse source.
type SqlDWSourceOutput struct{ *pulumi.OutputState }

func (SqlDWSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlDWSource)(nil)).Elem()
}

func (o SqlDWSourceOutput) ToSqlDWSourceOutput() SqlDWSourceOutput {
	return o
}

func (o SqlDWSourceOutput) ToSqlDWSourceOutputWithContext(ctx context.Context) SqlDWSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o SqlDWSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SqlDWSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string).
func (o SqlDWSourceOutput) IsolationLevel() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSource) interface{} { return v.IsolationLevel }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SqlDWSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange". Type: string (or Expression with resultType string).
func (o SqlDWSourceOutput) PartitionOption() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSource) interface{} { return v.PartitionOption }).(pulumi.AnyOutput)
}

// The settings that will be leveraged for Sql source partitioning.
func (o SqlDWSourceOutput) PartitionSettings() SqlPartitionSettingsPtrOutput {
	return o.ApplyT(func(v SqlDWSource) *SqlPartitionSettings { return v.PartitionSettings }).(SqlPartitionSettingsPtrOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SqlDWSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o SqlDWSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SqlDWSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// SQL Data Warehouse reader query. Type: string (or Expression with resultType string).
func (o SqlDWSourceOutput) SqlReaderQuery() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSource) interface{} { return v.SqlReaderQuery }).(pulumi.AnyOutput)
}

// Name of the stored procedure for a SQL Data Warehouse source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
func (o SqlDWSourceOutput) SqlReaderStoredProcedureName() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSource) interface{} { return v.SqlReaderStoredProcedureName }).(pulumi.AnyOutput)
}

// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}". Type: object (or Expression with resultType object), itemType: StoredProcedureParameter.
func (o SqlDWSourceOutput) StoredProcedureParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSource) interface{} { return v.StoredProcedureParameters }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'SqlDWSource'.
func (o SqlDWSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlDWSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity SQL Data Warehouse source.
type SqlDWSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string).
	IsolationLevel interface{} `pulumi:"isolationLevel"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange". Type: string (or Expression with resultType string).
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for Sql source partitioning.
	PartitionSettings *SqlPartitionSettingsResponse `pulumi:"partitionSettings"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// SQL Data Warehouse reader query. Type: string (or Expression with resultType string).
	SqlReaderQuery interface{} `pulumi:"sqlReaderQuery"`
	// Name of the stored procedure for a SQL Data Warehouse source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
	SqlReaderStoredProcedureName interface{} `pulumi:"sqlReaderStoredProcedureName"`
	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}". Type: object (or Expression with resultType object), itemType: StoredProcedureParameter.
	StoredProcedureParameters interface{} `pulumi:"storedProcedureParameters"`
	// Copy source type.
	// Expected value is 'SqlDWSource'.
	Type string `pulumi:"type"`
}

// A copy activity SQL Data Warehouse source.
type SqlDWSourceResponseOutput struct{ *pulumi.OutputState }

func (SqlDWSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlDWSourceResponse)(nil)).Elem()
}

func (o SqlDWSourceResponseOutput) ToSqlDWSourceResponseOutput() SqlDWSourceResponseOutput {
	return o
}

func (o SqlDWSourceResponseOutput) ToSqlDWSourceResponseOutputWithContext(ctx context.Context) SqlDWSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o SqlDWSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SqlDWSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string).
func (o SqlDWSourceResponseOutput) IsolationLevel() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSourceResponse) interface{} { return v.IsolationLevel }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SqlDWSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange". Type: string (or Expression with resultType string).
func (o SqlDWSourceResponseOutput) PartitionOption() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSourceResponse) interface{} { return v.PartitionOption }).(pulumi.AnyOutput)
}

// The settings that will be leveraged for Sql source partitioning.
func (o SqlDWSourceResponseOutput) PartitionSettings() SqlPartitionSettingsResponsePtrOutput {
	return o.ApplyT(func(v SqlDWSourceResponse) *SqlPartitionSettingsResponse { return v.PartitionSettings }).(SqlPartitionSettingsResponsePtrOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SqlDWSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o SqlDWSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SqlDWSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// SQL Data Warehouse reader query. Type: string (or Expression with resultType string).
func (o SqlDWSourceResponseOutput) SqlReaderQuery() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSourceResponse) interface{} { return v.SqlReaderQuery }).(pulumi.AnyOutput)
}

// Name of the stored procedure for a SQL Data Warehouse source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
func (o SqlDWSourceResponseOutput) SqlReaderStoredProcedureName() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSourceResponse) interface{} { return v.SqlReaderStoredProcedureName }).(pulumi.AnyOutput)
}

// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}". Type: object (or Expression with resultType object), itemType: StoredProcedureParameter.
func (o SqlDWSourceResponseOutput) StoredProcedureParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWSourceResponse) interface{} { return v.StoredProcedureParameters }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'SqlDWSource'.
func (o SqlDWSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlDWSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Sql DW upsert option settings
type SqlDWUpsertSettings struct {
	// Schema name for interim table. Type: string (or Expression with resultType string).
	InterimSchemaName interface{} `pulumi:"interimSchemaName"`
	// Key column names for unique row identification. Type: array of strings (or Expression with resultType array of strings).
	Keys interface{} `pulumi:"keys"`
}

// SqlDWUpsertSettingsInput is an input type that accepts SqlDWUpsertSettingsArgs and SqlDWUpsertSettingsOutput values.
// You can construct a concrete instance of `SqlDWUpsertSettingsInput` via:
//
//	SqlDWUpsertSettingsArgs{...}
type SqlDWUpsertSettingsInput interface {
	pulumi.Input

	ToSqlDWUpsertSettingsOutput() SqlDWUpsertSettingsOutput
	ToSqlDWUpsertSettingsOutputWithContext(context.Context) SqlDWUpsertSettingsOutput
}

// Sql DW upsert option settings
type SqlDWUpsertSettingsArgs struct {
	// Schema name for interim table. Type: string (or Expression with resultType string).
	InterimSchemaName pulumi.Input `pulumi:"interimSchemaName"`
	// Key column names for unique row identification. Type: array of strings (or Expression with resultType array of strings).
	Keys pulumi.Input `pulumi:"keys"`
}

func (SqlDWUpsertSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlDWUpsertSettings)(nil)).Elem()
}

func (i SqlDWUpsertSettingsArgs) ToSqlDWUpsertSettingsOutput() SqlDWUpsertSettingsOutput {
	return i.ToSqlDWUpsertSettingsOutputWithContext(context.Background())
}

func (i SqlDWUpsertSettingsArgs) ToSqlDWUpsertSettingsOutputWithContext(ctx context.Context) SqlDWUpsertSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlDWUpsertSettingsOutput)
}

func (i SqlDWUpsertSettingsArgs) ToSqlDWUpsertSettingsPtrOutput() SqlDWUpsertSettingsPtrOutput {
	return i.ToSqlDWUpsertSettingsPtrOutputWithContext(context.Background())
}

func (i SqlDWUpsertSettingsArgs) ToSqlDWUpsertSettingsPtrOutputWithContext(ctx context.Context) SqlDWUpsertSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlDWUpsertSettingsOutput).ToSqlDWUpsertSettingsPtrOutputWithContext(ctx)
}

// SqlDWUpsertSettingsPtrInput is an input type that accepts SqlDWUpsertSettingsArgs, SqlDWUpsertSettingsPtr and SqlDWUpsertSettingsPtrOutput values.
// You can construct a concrete instance of `SqlDWUpsertSettingsPtrInput` via:
//
//	        SqlDWUpsertSettingsArgs{...}
//
//	or:
//
//	        nil
type SqlDWUpsertSettingsPtrInput interface {
	pulumi.Input

	ToSqlDWUpsertSettingsPtrOutput() SqlDWUpsertSettingsPtrOutput
	ToSqlDWUpsertSettingsPtrOutputWithContext(context.Context) SqlDWUpsertSettingsPtrOutput
}

type sqlDWUpsertSettingsPtrType SqlDWUpsertSettingsArgs

func SqlDWUpsertSettingsPtr(v *SqlDWUpsertSettingsArgs) SqlDWUpsertSettingsPtrInput {
	return (*sqlDWUpsertSettingsPtrType)(v)
}

func (*sqlDWUpsertSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlDWUpsertSettings)(nil)).Elem()
}

func (i *sqlDWUpsertSettingsPtrType) ToSqlDWUpsertSettingsPtrOutput() SqlDWUpsertSettingsPtrOutput {
	return i.ToSqlDWUpsertSettingsPtrOutputWithContext(context.Background())
}

func (i *sqlDWUpsertSettingsPtrType) ToSqlDWUpsertSettingsPtrOutputWithContext(ctx context.Context) SqlDWUpsertSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlDWUpsertSettingsPtrOutput)
}

// Sql DW upsert option settings
type SqlDWUpsertSettingsOutput struct{ *pulumi.OutputState }

func (SqlDWUpsertSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlDWUpsertSettings)(nil)).Elem()
}

func (o SqlDWUpsertSettingsOutput) ToSqlDWUpsertSettingsOutput() SqlDWUpsertSettingsOutput {
	return o
}

func (o SqlDWUpsertSettingsOutput) ToSqlDWUpsertSettingsOutputWithContext(ctx context.Context) SqlDWUpsertSettingsOutput {
	return o
}

func (o SqlDWUpsertSettingsOutput) ToSqlDWUpsertSettingsPtrOutput() SqlDWUpsertSettingsPtrOutput {
	return o.ToSqlDWUpsertSettingsPtrOutputWithContext(context.Background())
}

func (o SqlDWUpsertSettingsOutput) ToSqlDWUpsertSettingsPtrOutputWithContext(ctx context.Context) SqlDWUpsertSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SqlDWUpsertSettings) *SqlDWUpsertSettings {
		return &v
	}).(SqlDWUpsertSettingsPtrOutput)
}

// Schema name for interim table. Type: string (or Expression with resultType string).
func (o SqlDWUpsertSettingsOutput) InterimSchemaName() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWUpsertSettings) interface{} { return v.InterimSchemaName }).(pulumi.AnyOutput)
}

// Key column names for unique row identification. Type: array of strings (or Expression with resultType array of strings).
func (o SqlDWUpsertSettingsOutput) Keys() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWUpsertSettings) interface{} { return v.Keys }).(pulumi.AnyOutput)
}

type SqlDWUpsertSettingsPtrOutput struct{ *pulumi.OutputState }

func (SqlDWUpsertSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlDWUpsertSettings)(nil)).Elem()
}

func (o SqlDWUpsertSettingsPtrOutput) ToSqlDWUpsertSettingsPtrOutput() SqlDWUpsertSettingsPtrOutput {
	return o
}

func (o SqlDWUpsertSettingsPtrOutput) ToSqlDWUpsertSettingsPtrOutputWithContext(ctx context.Context) SqlDWUpsertSettingsPtrOutput {
	return o
}

func (o SqlDWUpsertSettingsPtrOutput) Elem() SqlDWUpsertSettingsOutput {
	return o.ApplyT(func(v *SqlDWUpsertSettings) SqlDWUpsertSettings {
		if v != nil {
			return *v
		}
		var ret SqlDWUpsertSettings
		return ret
	}).(SqlDWUpsertSettingsOutput)
}

// Schema name for interim table. Type: string (or Expression with resultType string).
func (o SqlDWUpsertSettingsPtrOutput) InterimSchemaName() pulumi.AnyOutput {
	return o.ApplyT(func(v *SqlDWUpsertSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.InterimSchemaName
	}).(pulumi.AnyOutput)
}

// Key column names for unique row identification. Type: array of strings (or Expression with resultType array of strings).
func (o SqlDWUpsertSettingsPtrOutput) Keys() pulumi.AnyOutput {
	return o.ApplyT(func(v *SqlDWUpsertSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.Keys
	}).(pulumi.AnyOutput)
}

// Sql DW upsert option settings
type SqlDWUpsertSettingsResponse struct {
	// Schema name for interim table. Type: string (or Expression with resultType string).
	InterimSchemaName interface{} `pulumi:"interimSchemaName"`
	// Key column names for unique row identification. Type: array of strings (or Expression with resultType array of strings).
	Keys interface{} `pulumi:"keys"`
}

// Sql DW upsert option settings
type SqlDWUpsertSettingsResponseOutput struct{ *pulumi.OutputState }

func (SqlDWUpsertSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlDWUpsertSettingsResponse)(nil)).Elem()
}

func (o SqlDWUpsertSettingsResponseOutput) ToSqlDWUpsertSettingsResponseOutput() SqlDWUpsertSettingsResponseOutput {
	return o
}

func (o SqlDWUpsertSettingsResponseOutput) ToSqlDWUpsertSettingsResponseOutputWithContext(ctx context.Context) SqlDWUpsertSettingsResponseOutput {
	return o
}

// Schema name for interim table. Type: string (or Expression with resultType string).
func (o SqlDWUpsertSettingsResponseOutput) InterimSchemaName() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWUpsertSettingsResponse) interface{} { return v.InterimSchemaName }).(pulumi.AnyOutput)
}

// Key column names for unique row identification. Type: array of strings (or Expression with resultType array of strings).
func (o SqlDWUpsertSettingsResponseOutput) Keys() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlDWUpsertSettingsResponse) interface{} { return v.Keys }).(pulumi.AnyOutput)
}

type SqlDWUpsertSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (SqlDWUpsertSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlDWUpsertSettingsResponse)(nil)).Elem()
}

func (o SqlDWUpsertSettingsResponsePtrOutput) ToSqlDWUpsertSettingsResponsePtrOutput() SqlDWUpsertSettingsResponsePtrOutput {
	return o
}

func (o SqlDWUpsertSettingsResponsePtrOutput) ToSqlDWUpsertSettingsResponsePtrOutputWithContext(ctx context.Context) SqlDWUpsertSettingsResponsePtrOutput {
	return o
}

func (o SqlDWUpsertSettingsResponsePtrOutput) Elem() SqlDWUpsertSettingsResponseOutput {
	return o.ApplyT(func(v *SqlDWUpsertSettingsResponse) SqlDWUpsertSettingsResponse {
		if v != nil {
			return *v
		}
		var ret SqlDWUpsertSettingsResponse
		return ret
	}).(SqlDWUpsertSettingsResponseOutput)
}

// Schema name for interim table. Type: string (or Expression with resultType string).
func (o SqlDWUpsertSettingsResponsePtrOutput) InterimSchemaName() pulumi.AnyOutput {
	return o.ApplyT(func(v *SqlDWUpsertSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.InterimSchemaName
	}).(pulumi.AnyOutput)
}

// Key column names for unique row identification. Type: array of strings (or Expression with resultType array of strings).
func (o SqlDWUpsertSettingsResponsePtrOutput) Keys() pulumi.AnyOutput {
	return o.ApplyT(func(v *SqlDWUpsertSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Keys
	}).(pulumi.AnyOutput)
}

// A copy activity Azure SQL Managed Instance sink.
type SqlMISink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// SQL writer stored procedure name. Type: string (or Expression with resultType string).
	SqlWriterStoredProcedureName interface{} `pulumi:"sqlWriterStoredProcedureName"`
	// SQL writer table type. Type: string (or Expression with resultType string).
	SqlWriterTableType interface{} `pulumi:"sqlWriterTableType"`
	// Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean).
	SqlWriterUseTableLock interface{} `pulumi:"sqlWriterUseTableLock"`
	// SQL stored procedure parameters.
	StoredProcedureParameters interface{} `pulumi:"storedProcedureParameters"`
	// The stored procedure parameter name of the table type. Type: string (or Expression with resultType string).
	StoredProcedureTableTypeParameterName interface{} `pulumi:"storedProcedureTableTypeParameterName"`
	// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
	TableOption interface{} `pulumi:"tableOption"`
	// Copy sink type.
	// Expected value is 'SqlMISink'.
	Type string `pulumi:"type"`
	// SQL upsert settings.
	UpsertSettings *SqlUpsertSettings `pulumi:"upsertSettings"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// White behavior when copying data into azure SQL MI. Type: string (or Expression with resultType string)
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// SqlMISinkInput is an input type that accepts SqlMISinkArgs and SqlMISinkOutput values.
// You can construct a concrete instance of `SqlMISinkInput` via:
//
//	SqlMISinkArgs{...}
type SqlMISinkInput interface {
	pulumi.Input

	ToSqlMISinkOutput() SqlMISinkOutput
	ToSqlMISinkOutputWithContext(context.Context) SqlMISinkOutput
}

// A copy activity Azure SQL Managed Instance sink.
type SqlMISinkArgs struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript pulumi.Input `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount pulumi.Input `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait pulumi.Input `pulumi:"sinkRetryWait"`
	// SQL writer stored procedure name. Type: string (or Expression with resultType string).
	SqlWriterStoredProcedureName pulumi.Input `pulumi:"sqlWriterStoredProcedureName"`
	// SQL writer table type. Type: string (or Expression with resultType string).
	SqlWriterTableType pulumi.Input `pulumi:"sqlWriterTableType"`
	// Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean).
	SqlWriterUseTableLock pulumi.Input `pulumi:"sqlWriterUseTableLock"`
	// SQL stored procedure parameters.
	StoredProcedureParameters pulumi.Input `pulumi:"storedProcedureParameters"`
	// The stored procedure parameter name of the table type. Type: string (or Expression with resultType string).
	StoredProcedureTableTypeParameterName pulumi.Input `pulumi:"storedProcedureTableTypeParameterName"`
	// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
	TableOption pulumi.Input `pulumi:"tableOption"`
	// Copy sink type.
	// Expected value is 'SqlMISink'.
	Type pulumi.StringInput `pulumi:"type"`
	// SQL upsert settings.
	UpsertSettings SqlUpsertSettingsPtrInput `pulumi:"upsertSettings"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize pulumi.Input `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout pulumi.Input `pulumi:"writeBatchTimeout"`
	// White behavior when copying data into azure SQL MI. Type: string (or Expression with resultType string)
	WriteBehavior pulumi.Input `pulumi:"writeBehavior"`
}

func (SqlMISinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlMISink)(nil)).Elem()
}

func (i SqlMISinkArgs) ToSqlMISinkOutput() SqlMISinkOutput {
	return i.ToSqlMISinkOutputWithContext(context.Background())
}

func (i SqlMISinkArgs) ToSqlMISinkOutputWithContext(ctx context.Context) SqlMISinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlMISinkOutput)
}

// A copy activity Azure SQL Managed Instance sink.
type SqlMISinkOutput struct{ *pulumi.OutputState }

func (SqlMISinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlMISink)(nil)).Elem()
}

func (o SqlMISinkOutput) ToSqlMISinkOutput() SqlMISinkOutput {
	return o
}

func (o SqlMISinkOutput) ToSqlMISinkOutputWithContext(ctx context.Context) SqlMISinkOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SqlMISinkOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISink) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o SqlMISinkOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISink) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// SQL pre-copy script. Type: string (or Expression with resultType string).
func (o SqlMISinkOutput) PreCopyScript() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISink) interface{} { return v.PreCopyScript }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o SqlMISinkOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISink) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SqlMISinkOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISink) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// SQL writer stored procedure name. Type: string (or Expression with resultType string).
func (o SqlMISinkOutput) SqlWriterStoredProcedureName() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISink) interface{} { return v.SqlWriterStoredProcedureName }).(pulumi.AnyOutput)
}

// SQL writer table type. Type: string (or Expression with resultType string).
func (o SqlMISinkOutput) SqlWriterTableType() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISink) interface{} { return v.SqlWriterTableType }).(pulumi.AnyOutput)
}

// Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean).
func (o SqlMISinkOutput) SqlWriterUseTableLock() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISink) interface{} { return v.SqlWriterUseTableLock }).(pulumi.AnyOutput)
}

// SQL stored procedure parameters.
func (o SqlMISinkOutput) StoredProcedureParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISink) interface{} { return v.StoredProcedureParameters }).(pulumi.AnyOutput)
}

// The stored procedure parameter name of the table type. Type: string (or Expression with resultType string).
func (o SqlMISinkOutput) StoredProcedureTableTypeParameterName() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISink) interface{} { return v.StoredProcedureTableTypeParameterName }).(pulumi.AnyOutput)
}

// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
func (o SqlMISinkOutput) TableOption() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISink) interface{} { return v.TableOption }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'SqlMISink'.
func (o SqlMISinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlMISink) string { return v.Type }).(pulumi.StringOutput)
}

// SQL upsert settings.
func (o SqlMISinkOutput) UpsertSettings() SqlUpsertSettingsPtrOutput {
	return o.ApplyT(func(v SqlMISink) *SqlUpsertSettings { return v.UpsertSettings }).(SqlUpsertSettingsPtrOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o SqlMISinkOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISink) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SqlMISinkOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISink) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// White behavior when copying data into azure SQL MI. Type: string (or Expression with resultType string)
func (o SqlMISinkOutput) WriteBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISink) interface{} { return v.WriteBehavior }).(pulumi.AnyOutput)
}

// A copy activity Azure SQL Managed Instance sink.
type SqlMISinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// SQL writer stored procedure name. Type: string (or Expression with resultType string).
	SqlWriterStoredProcedureName interface{} `pulumi:"sqlWriterStoredProcedureName"`
	// SQL writer table type. Type: string (or Expression with resultType string).
	SqlWriterTableType interface{} `pulumi:"sqlWriterTableType"`
	// Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean).
	SqlWriterUseTableLock interface{} `pulumi:"sqlWriterUseTableLock"`
	// SQL stored procedure parameters.
	StoredProcedureParameters interface{} `pulumi:"storedProcedureParameters"`
	// The stored procedure parameter name of the table type. Type: string (or Expression with resultType string).
	StoredProcedureTableTypeParameterName interface{} `pulumi:"storedProcedureTableTypeParameterName"`
	// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
	TableOption interface{} `pulumi:"tableOption"`
	// Copy sink type.
	// Expected value is 'SqlMISink'.
	Type string `pulumi:"type"`
	// SQL upsert settings.
	UpsertSettings *SqlUpsertSettingsResponse `pulumi:"upsertSettings"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// White behavior when copying data into azure SQL MI. Type: string (or Expression with resultType string)
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// A copy activity Azure SQL Managed Instance sink.
type SqlMISinkResponseOutput struct{ *pulumi.OutputState }

func (SqlMISinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlMISinkResponse)(nil)).Elem()
}

func (o SqlMISinkResponseOutput) ToSqlMISinkResponseOutput() SqlMISinkResponseOutput {
	return o
}

func (o SqlMISinkResponseOutput) ToSqlMISinkResponseOutputWithContext(ctx context.Context) SqlMISinkResponseOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SqlMISinkResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISinkResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o SqlMISinkResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISinkResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// SQL pre-copy script. Type: string (or Expression with resultType string).
func (o SqlMISinkResponseOutput) PreCopyScript() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISinkResponse) interface{} { return v.PreCopyScript }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o SqlMISinkResponseOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISinkResponse) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SqlMISinkResponseOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISinkResponse) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// SQL writer stored procedure name. Type: string (or Expression with resultType string).
func (o SqlMISinkResponseOutput) SqlWriterStoredProcedureName() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISinkResponse) interface{} { return v.SqlWriterStoredProcedureName }).(pulumi.AnyOutput)
}

// SQL writer table type. Type: string (or Expression with resultType string).
func (o SqlMISinkResponseOutput) SqlWriterTableType() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISinkResponse) interface{} { return v.SqlWriterTableType }).(pulumi.AnyOutput)
}

// Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean).
func (o SqlMISinkResponseOutput) SqlWriterUseTableLock() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISinkResponse) interface{} { return v.SqlWriterUseTableLock }).(pulumi.AnyOutput)
}

// SQL stored procedure parameters.
func (o SqlMISinkResponseOutput) StoredProcedureParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISinkResponse) interface{} { return v.StoredProcedureParameters }).(pulumi.AnyOutput)
}

// The stored procedure parameter name of the table type. Type: string (or Expression with resultType string).
func (o SqlMISinkResponseOutput) StoredProcedureTableTypeParameterName() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISinkResponse) interface{} { return v.StoredProcedureTableTypeParameterName }).(pulumi.AnyOutput)
}

// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
func (o SqlMISinkResponseOutput) TableOption() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISinkResponse) interface{} { return v.TableOption }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'SqlMISink'.
func (o SqlMISinkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlMISinkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// SQL upsert settings.
func (o SqlMISinkResponseOutput) UpsertSettings() SqlUpsertSettingsResponsePtrOutput {
	return o.ApplyT(func(v SqlMISinkResponse) *SqlUpsertSettingsResponse { return v.UpsertSettings }).(SqlUpsertSettingsResponsePtrOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o SqlMISinkResponseOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISinkResponse) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SqlMISinkResponseOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISinkResponse) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// White behavior when copying data into azure SQL MI. Type: string (or Expression with resultType string)
func (o SqlMISinkResponseOutput) WriteBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISinkResponse) interface{} { return v.WriteBehavior }).(pulumi.AnyOutput)
}

// A copy activity Azure SQL Managed Instance source.
type SqlMISource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string).
	IsolationLevel interface{} `pulumi:"isolationLevel"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange". Type: string (or Expression with resultType string).
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for Sql source partitioning.
	PartitionSettings *SqlPartitionSettings `pulumi:"partitionSettings"`
	// Which additional types to produce.
	ProduceAdditionalTypes interface{} `pulumi:"produceAdditionalTypes"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// SQL reader query. Type: string (or Expression with resultType string).
	SqlReaderQuery interface{} `pulumi:"sqlReaderQuery"`
	// Name of the stored procedure for a Azure SQL Managed Instance source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
	SqlReaderStoredProcedureName interface{} `pulumi:"sqlReaderStoredProcedureName"`
	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
	StoredProcedureParameters interface{} `pulumi:"storedProcedureParameters"`
	// Copy source type.
	// Expected value is 'SqlMISource'.
	Type string `pulumi:"type"`
}

// SqlMISourceInput is an input type that accepts SqlMISourceArgs and SqlMISourceOutput values.
// You can construct a concrete instance of `SqlMISourceInput` via:
//
//	SqlMISourceArgs{...}
type SqlMISourceInput interface {
	pulumi.Input

	ToSqlMISourceOutput() SqlMISourceOutput
	ToSqlMISourceOutputWithContext(context.Context) SqlMISourceOutput
}

// A copy activity Azure SQL Managed Instance source.
type SqlMISourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string).
	IsolationLevel pulumi.Input `pulumi:"isolationLevel"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange". Type: string (or Expression with resultType string).
	PartitionOption pulumi.Input `pulumi:"partitionOption"`
	// The settings that will be leveraged for Sql source partitioning.
	PartitionSettings SqlPartitionSettingsPtrInput `pulumi:"partitionSettings"`
	// Which additional types to produce.
	ProduceAdditionalTypes pulumi.Input `pulumi:"produceAdditionalTypes"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// SQL reader query. Type: string (or Expression with resultType string).
	SqlReaderQuery pulumi.Input `pulumi:"sqlReaderQuery"`
	// Name of the stored procedure for a Azure SQL Managed Instance source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
	SqlReaderStoredProcedureName pulumi.Input `pulumi:"sqlReaderStoredProcedureName"`
	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
	StoredProcedureParameters pulumi.Input `pulumi:"storedProcedureParameters"`
	// Copy source type.
	// Expected value is 'SqlMISource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SqlMISourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlMISource)(nil)).Elem()
}

func (i SqlMISourceArgs) ToSqlMISourceOutput() SqlMISourceOutput {
	return i.ToSqlMISourceOutputWithContext(context.Background())
}

func (i SqlMISourceArgs) ToSqlMISourceOutputWithContext(ctx context.Context) SqlMISourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlMISourceOutput)
}

// A copy activity Azure SQL Managed Instance source.
type SqlMISourceOutput struct{ *pulumi.OutputState }

func (SqlMISourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlMISource)(nil)).Elem()
}

func (o SqlMISourceOutput) ToSqlMISourceOutput() SqlMISourceOutput {
	return o
}

func (o SqlMISourceOutput) ToSqlMISourceOutputWithContext(ctx context.Context) SqlMISourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o SqlMISourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SqlMISourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string).
func (o SqlMISourceOutput) IsolationLevel() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISource) interface{} { return v.IsolationLevel }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SqlMISourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange". Type: string (or Expression with resultType string).
func (o SqlMISourceOutput) PartitionOption() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISource) interface{} { return v.PartitionOption }).(pulumi.AnyOutput)
}

// The settings that will be leveraged for Sql source partitioning.
func (o SqlMISourceOutput) PartitionSettings() SqlPartitionSettingsPtrOutput {
	return o.ApplyT(func(v SqlMISource) *SqlPartitionSettings { return v.PartitionSettings }).(SqlPartitionSettingsPtrOutput)
}

// Which additional types to produce.
func (o SqlMISourceOutput) ProduceAdditionalTypes() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISource) interface{} { return v.ProduceAdditionalTypes }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SqlMISourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o SqlMISourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SqlMISourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// SQL reader query. Type: string (or Expression with resultType string).
func (o SqlMISourceOutput) SqlReaderQuery() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISource) interface{} { return v.SqlReaderQuery }).(pulumi.AnyOutput)
}

// Name of the stored procedure for a Azure SQL Managed Instance source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
func (o SqlMISourceOutput) SqlReaderStoredProcedureName() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISource) interface{} { return v.SqlReaderStoredProcedureName }).(pulumi.AnyOutput)
}

// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
func (o SqlMISourceOutput) StoredProcedureParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISource) interface{} { return v.StoredProcedureParameters }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'SqlMISource'.
func (o SqlMISourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlMISource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Azure SQL Managed Instance source.
type SqlMISourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string).
	IsolationLevel interface{} `pulumi:"isolationLevel"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange". Type: string (or Expression with resultType string).
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for Sql source partitioning.
	PartitionSettings *SqlPartitionSettingsResponse `pulumi:"partitionSettings"`
	// Which additional types to produce.
	ProduceAdditionalTypes interface{} `pulumi:"produceAdditionalTypes"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// SQL reader query. Type: string (or Expression with resultType string).
	SqlReaderQuery interface{} `pulumi:"sqlReaderQuery"`
	// Name of the stored procedure for a Azure SQL Managed Instance source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
	SqlReaderStoredProcedureName interface{} `pulumi:"sqlReaderStoredProcedureName"`
	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
	StoredProcedureParameters interface{} `pulumi:"storedProcedureParameters"`
	// Copy source type.
	// Expected value is 'SqlMISource'.
	Type string `pulumi:"type"`
}

// A copy activity Azure SQL Managed Instance source.
type SqlMISourceResponseOutput struct{ *pulumi.OutputState }

func (SqlMISourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlMISourceResponse)(nil)).Elem()
}

func (o SqlMISourceResponseOutput) ToSqlMISourceResponseOutput() SqlMISourceResponseOutput {
	return o
}

func (o SqlMISourceResponseOutput) ToSqlMISourceResponseOutputWithContext(ctx context.Context) SqlMISourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o SqlMISourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SqlMISourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string).
func (o SqlMISourceResponseOutput) IsolationLevel() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISourceResponse) interface{} { return v.IsolationLevel }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SqlMISourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange". Type: string (or Expression with resultType string).
func (o SqlMISourceResponseOutput) PartitionOption() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISourceResponse) interface{} { return v.PartitionOption }).(pulumi.AnyOutput)
}

// The settings that will be leveraged for Sql source partitioning.
func (o SqlMISourceResponseOutput) PartitionSettings() SqlPartitionSettingsResponsePtrOutput {
	return o.ApplyT(func(v SqlMISourceResponse) *SqlPartitionSettingsResponse { return v.PartitionSettings }).(SqlPartitionSettingsResponsePtrOutput)
}

// Which additional types to produce.
func (o SqlMISourceResponseOutput) ProduceAdditionalTypes() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISourceResponse) interface{} { return v.ProduceAdditionalTypes }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SqlMISourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o SqlMISourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SqlMISourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// SQL reader query. Type: string (or Expression with resultType string).
func (o SqlMISourceResponseOutput) SqlReaderQuery() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISourceResponse) interface{} { return v.SqlReaderQuery }).(pulumi.AnyOutput)
}

// Name of the stored procedure for a Azure SQL Managed Instance source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
func (o SqlMISourceResponseOutput) SqlReaderStoredProcedureName() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISourceResponse) interface{} { return v.SqlReaderStoredProcedureName }).(pulumi.AnyOutput)
}

// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
func (o SqlMISourceResponseOutput) StoredProcedureParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlMISourceResponse) interface{} { return v.StoredProcedureParameters }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'SqlMISource'.
func (o SqlMISourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlMISourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The settings that will be leveraged for Sql source partitioning.
type SqlPartitionSettings struct {
	// The name of the column in integer or datetime type that will be used for proceeding partitioning. If not specified, the primary key of the table is auto-detected and used as the partition column. Type: string (or Expression with resultType string).
	PartitionColumnName interface{} `pulumi:"partitionColumnName"`
	// The minimum value of the partition column for partition range splitting. This value is used to decide the partition stride, not for filtering the rows in table. All rows in the table or query result will be partitioned and copied. Type: string (or Expression with resultType string).
	PartitionLowerBound interface{} `pulumi:"partitionLowerBound"`
	// The maximum value of the partition column for partition range splitting. This value is used to decide the partition stride, not for filtering the rows in table. All rows in the table or query result will be partitioned and copied. Type: string (or Expression with resultType string).
	PartitionUpperBound interface{} `pulumi:"partitionUpperBound"`
}

// SqlPartitionSettingsInput is an input type that accepts SqlPartitionSettingsArgs and SqlPartitionSettingsOutput values.
// You can construct a concrete instance of `SqlPartitionSettingsInput` via:
//
//	SqlPartitionSettingsArgs{...}
type SqlPartitionSettingsInput interface {
	pulumi.Input

	ToSqlPartitionSettingsOutput() SqlPartitionSettingsOutput
	ToSqlPartitionSettingsOutputWithContext(context.Context) SqlPartitionSettingsOutput
}

// The settings that will be leveraged for Sql source partitioning.
type SqlPartitionSettingsArgs struct {
	// The name of the column in integer or datetime type that will be used for proceeding partitioning. If not specified, the primary key of the table is auto-detected and used as the partition column. Type: string (or Expression with resultType string).
	PartitionColumnName pulumi.Input `pulumi:"partitionColumnName"`
	// The minimum value of the partition column for partition range splitting. This value is used to decide the partition stride, not for filtering the rows in table. All rows in the table or query result will be partitioned and copied. Type: string (or Expression with resultType string).
	PartitionLowerBound pulumi.Input `pulumi:"partitionLowerBound"`
	// The maximum value of the partition column for partition range splitting. This value is used to decide the partition stride, not for filtering the rows in table. All rows in the table or query result will be partitioned and copied. Type: string (or Expression with resultType string).
	PartitionUpperBound pulumi.Input `pulumi:"partitionUpperBound"`
}

func (SqlPartitionSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlPartitionSettings)(nil)).Elem()
}

func (i SqlPartitionSettingsArgs) ToSqlPartitionSettingsOutput() SqlPartitionSettingsOutput {
	return i.ToSqlPartitionSettingsOutputWithContext(context.Background())
}

func (i SqlPartitionSettingsArgs) ToSqlPartitionSettingsOutputWithContext(ctx context.Context) SqlPartitionSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlPartitionSettingsOutput)
}

func (i SqlPartitionSettingsArgs) ToSqlPartitionSettingsPtrOutput() SqlPartitionSettingsPtrOutput {
	return i.ToSqlPartitionSettingsPtrOutputWithContext(context.Background())
}

func (i SqlPartitionSettingsArgs) ToSqlPartitionSettingsPtrOutputWithContext(ctx context.Context) SqlPartitionSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlPartitionSettingsOutput).ToSqlPartitionSettingsPtrOutputWithContext(ctx)
}

// SqlPartitionSettingsPtrInput is an input type that accepts SqlPartitionSettingsArgs, SqlPartitionSettingsPtr and SqlPartitionSettingsPtrOutput values.
// You can construct a concrete instance of `SqlPartitionSettingsPtrInput` via:
//
//	        SqlPartitionSettingsArgs{...}
//
//	or:
//
//	        nil
type SqlPartitionSettingsPtrInput interface {
	pulumi.Input

	ToSqlPartitionSettingsPtrOutput() SqlPartitionSettingsPtrOutput
	ToSqlPartitionSettingsPtrOutputWithContext(context.Context) SqlPartitionSettingsPtrOutput
}

type sqlPartitionSettingsPtrType SqlPartitionSettingsArgs

func SqlPartitionSettingsPtr(v *SqlPartitionSettingsArgs) SqlPartitionSettingsPtrInput {
	return (*sqlPartitionSettingsPtrType)(v)
}

func (*sqlPartitionSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlPartitionSettings)(nil)).Elem()
}

func (i *sqlPartitionSettingsPtrType) ToSqlPartitionSettingsPtrOutput() SqlPartitionSettingsPtrOutput {
	return i.ToSqlPartitionSettingsPtrOutputWithContext(context.Background())
}

func (i *sqlPartitionSettingsPtrType) ToSqlPartitionSettingsPtrOutputWithContext(ctx context.Context) SqlPartitionSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlPartitionSettingsPtrOutput)
}

// The settings that will be leveraged for Sql source partitioning.
type SqlPartitionSettingsOutput struct{ *pulumi.OutputState }

func (SqlPartitionSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlPartitionSettings)(nil)).Elem()
}

func (o SqlPartitionSettingsOutput) ToSqlPartitionSettingsOutput() SqlPartitionSettingsOutput {
	return o
}

func (o SqlPartitionSettingsOutput) ToSqlPartitionSettingsOutputWithContext(ctx context.Context) SqlPartitionSettingsOutput {
	return o
}

func (o SqlPartitionSettingsOutput) ToSqlPartitionSettingsPtrOutput() SqlPartitionSettingsPtrOutput {
	return o.ToSqlPartitionSettingsPtrOutputWithContext(context.Background())
}

func (o SqlPartitionSettingsOutput) ToSqlPartitionSettingsPtrOutputWithContext(ctx context.Context) SqlPartitionSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SqlPartitionSettings) *SqlPartitionSettings {
		return &v
	}).(SqlPartitionSettingsPtrOutput)
}

// The name of the column in integer or datetime type that will be used for proceeding partitioning. If not specified, the primary key of the table is auto-detected and used as the partition column. Type: string (or Expression with resultType string).
func (o SqlPartitionSettingsOutput) PartitionColumnName() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlPartitionSettings) interface{} { return v.PartitionColumnName }).(pulumi.AnyOutput)
}

// The minimum value of the partition column for partition range splitting. This value is used to decide the partition stride, not for filtering the rows in table. All rows in the table or query result will be partitioned and copied. Type: string (or Expression with resultType string).
func (o SqlPartitionSettingsOutput) PartitionLowerBound() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlPartitionSettings) interface{} { return v.PartitionLowerBound }).(pulumi.AnyOutput)
}

// The maximum value of the partition column for partition range splitting. This value is used to decide the partition stride, not for filtering the rows in table. All rows in the table or query result will be partitioned and copied. Type: string (or Expression with resultType string).
func (o SqlPartitionSettingsOutput) PartitionUpperBound() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlPartitionSettings) interface{} { return v.PartitionUpperBound }).(pulumi.AnyOutput)
}

type SqlPartitionSettingsPtrOutput struct{ *pulumi.OutputState }

func (SqlPartitionSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlPartitionSettings)(nil)).Elem()
}

func (o SqlPartitionSettingsPtrOutput) ToSqlPartitionSettingsPtrOutput() SqlPartitionSettingsPtrOutput {
	return o
}

func (o SqlPartitionSettingsPtrOutput) ToSqlPartitionSettingsPtrOutputWithContext(ctx context.Context) SqlPartitionSettingsPtrOutput {
	return o
}

func (o SqlPartitionSettingsPtrOutput) Elem() SqlPartitionSettingsOutput {
	return o.ApplyT(func(v *SqlPartitionSettings) SqlPartitionSettings {
		if v != nil {
			return *v
		}
		var ret SqlPartitionSettings
		return ret
	}).(SqlPartitionSettingsOutput)
}

// The name of the column in integer or datetime type that will be used for proceeding partitioning. If not specified, the primary key of the table is auto-detected and used as the partition column. Type: string (or Expression with resultType string).
func (o SqlPartitionSettingsPtrOutput) PartitionColumnName() pulumi.AnyOutput {
	return o.ApplyT(func(v *SqlPartitionSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionColumnName
	}).(pulumi.AnyOutput)
}

// The minimum value of the partition column for partition range splitting. This value is used to decide the partition stride, not for filtering the rows in table. All rows in the table or query result will be partitioned and copied. Type: string (or Expression with resultType string).
func (o SqlPartitionSettingsPtrOutput) PartitionLowerBound() pulumi.AnyOutput {
	return o.ApplyT(func(v *SqlPartitionSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionLowerBound
	}).(pulumi.AnyOutput)
}

// The maximum value of the partition column for partition range splitting. This value is used to decide the partition stride, not for filtering the rows in table. All rows in the table or query result will be partitioned and copied. Type: string (or Expression with resultType string).
func (o SqlPartitionSettingsPtrOutput) PartitionUpperBound() pulumi.AnyOutput {
	return o.ApplyT(func(v *SqlPartitionSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionUpperBound
	}).(pulumi.AnyOutput)
}

// The settings that will be leveraged for Sql source partitioning.
type SqlPartitionSettingsResponse struct {
	// The name of the column in integer or datetime type that will be used for proceeding partitioning. If not specified, the primary key of the table is auto-detected and used as the partition column. Type: string (or Expression with resultType string).
	PartitionColumnName interface{} `pulumi:"partitionColumnName"`
	// The minimum value of the partition column for partition range splitting. This value is used to decide the partition stride, not for filtering the rows in table. All rows in the table or query result will be partitioned and copied. Type: string (or Expression with resultType string).
	PartitionLowerBound interface{} `pulumi:"partitionLowerBound"`
	// The maximum value of the partition column for partition range splitting. This value is used to decide the partition stride, not for filtering the rows in table. All rows in the table or query result will be partitioned and copied. Type: string (or Expression with resultType string).
	PartitionUpperBound interface{} `pulumi:"partitionUpperBound"`
}

// The settings that will be leveraged for Sql source partitioning.
type SqlPartitionSettingsResponseOutput struct{ *pulumi.OutputState }

func (SqlPartitionSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlPartitionSettingsResponse)(nil)).Elem()
}

func (o SqlPartitionSettingsResponseOutput) ToSqlPartitionSettingsResponseOutput() SqlPartitionSettingsResponseOutput {
	return o
}

func (o SqlPartitionSettingsResponseOutput) ToSqlPartitionSettingsResponseOutputWithContext(ctx context.Context) SqlPartitionSettingsResponseOutput {
	return o
}

// The name of the column in integer or datetime type that will be used for proceeding partitioning. If not specified, the primary key of the table is auto-detected and used as the partition column. Type: string (or Expression with resultType string).
func (o SqlPartitionSettingsResponseOutput) PartitionColumnName() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlPartitionSettingsResponse) interface{} { return v.PartitionColumnName }).(pulumi.AnyOutput)
}

// The minimum value of the partition column for partition range splitting. This value is used to decide the partition stride, not for filtering the rows in table. All rows in the table or query result will be partitioned and copied. Type: string (or Expression with resultType string).
func (o SqlPartitionSettingsResponseOutput) PartitionLowerBound() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlPartitionSettingsResponse) interface{} { return v.PartitionLowerBound }).(pulumi.AnyOutput)
}

// The maximum value of the partition column for partition range splitting. This value is used to decide the partition stride, not for filtering the rows in table. All rows in the table or query result will be partitioned and copied. Type: string (or Expression with resultType string).
func (o SqlPartitionSettingsResponseOutput) PartitionUpperBound() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlPartitionSettingsResponse) interface{} { return v.PartitionUpperBound }).(pulumi.AnyOutput)
}

type SqlPartitionSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (SqlPartitionSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlPartitionSettingsResponse)(nil)).Elem()
}

func (o SqlPartitionSettingsResponsePtrOutput) ToSqlPartitionSettingsResponsePtrOutput() SqlPartitionSettingsResponsePtrOutput {
	return o
}

func (o SqlPartitionSettingsResponsePtrOutput) ToSqlPartitionSettingsResponsePtrOutputWithContext(ctx context.Context) SqlPartitionSettingsResponsePtrOutput {
	return o
}

func (o SqlPartitionSettingsResponsePtrOutput) Elem() SqlPartitionSettingsResponseOutput {
	return o.ApplyT(func(v *SqlPartitionSettingsResponse) SqlPartitionSettingsResponse {
		if v != nil {
			return *v
		}
		var ret SqlPartitionSettingsResponse
		return ret
	}).(SqlPartitionSettingsResponseOutput)
}

// The name of the column in integer or datetime type that will be used for proceeding partitioning. If not specified, the primary key of the table is auto-detected and used as the partition column. Type: string (or Expression with resultType string).
func (o SqlPartitionSettingsResponsePtrOutput) PartitionColumnName() pulumi.AnyOutput {
	return o.ApplyT(func(v *SqlPartitionSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionColumnName
	}).(pulumi.AnyOutput)
}

// The minimum value of the partition column for partition range splitting. This value is used to decide the partition stride, not for filtering the rows in table. All rows in the table or query result will be partitioned and copied. Type: string (or Expression with resultType string).
func (o SqlPartitionSettingsResponsePtrOutput) PartitionLowerBound() pulumi.AnyOutput {
	return o.ApplyT(func(v *SqlPartitionSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionLowerBound
	}).(pulumi.AnyOutput)
}

// The maximum value of the partition column for partition range splitting. This value is used to decide the partition stride, not for filtering the rows in table. All rows in the table or query result will be partitioned and copied. Type: string (or Expression with resultType string).
func (o SqlPartitionSettingsResponsePtrOutput) PartitionUpperBound() pulumi.AnyOutput {
	return o.ApplyT(func(v *SqlPartitionSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionUpperBound
	}).(pulumi.AnyOutput)
}

// SQL Server linked service.
type SqlServerLinkedService struct {
	// Sql always encrypted properties.
	AlwaysEncryptedSettings *SqlAlwaysEncryptedProperties `pulumi:"alwaysEncryptedSettings"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The on-premises Windows authentication password.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'SqlServer'.
	Type string `pulumi:"type"`
	// The on-premises Windows authentication user name. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// SqlServerLinkedServiceInput is an input type that accepts SqlServerLinkedServiceArgs and SqlServerLinkedServiceOutput values.
// You can construct a concrete instance of `SqlServerLinkedServiceInput` via:
//
//	SqlServerLinkedServiceArgs{...}
type SqlServerLinkedServiceInput interface {
	pulumi.Input

	ToSqlServerLinkedServiceOutput() SqlServerLinkedServiceOutput
	ToSqlServerLinkedServiceOutputWithContext(context.Context) SqlServerLinkedServiceOutput
}

// SQL Server linked service.
type SqlServerLinkedServiceArgs struct {
	// Sql always encrypted properties.
	AlwaysEncryptedSettings SqlAlwaysEncryptedPropertiesPtrInput `pulumi:"alwaysEncryptedSettings"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The on-premises Windows authentication password.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'SqlServer'.
	Type pulumi.StringInput `pulumi:"type"`
	// The on-premises Windows authentication user name. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (SqlServerLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerLinkedService)(nil)).Elem()
}

func (i SqlServerLinkedServiceArgs) ToSqlServerLinkedServiceOutput() SqlServerLinkedServiceOutput {
	return i.ToSqlServerLinkedServiceOutputWithContext(context.Background())
}

func (i SqlServerLinkedServiceArgs) ToSqlServerLinkedServiceOutputWithContext(ctx context.Context) SqlServerLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerLinkedServiceOutput)
}

// SQL Server linked service.
type SqlServerLinkedServiceOutput struct{ *pulumi.OutputState }

func (SqlServerLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerLinkedService)(nil)).Elem()
}

func (o SqlServerLinkedServiceOutput) ToSqlServerLinkedServiceOutput() SqlServerLinkedServiceOutput {
	return o
}

func (o SqlServerLinkedServiceOutput) ToSqlServerLinkedServiceOutputWithContext(ctx context.Context) SqlServerLinkedServiceOutput {
	return o
}

// Sql always encrypted properties.
func (o SqlServerLinkedServiceOutput) AlwaysEncryptedSettings() SqlAlwaysEncryptedPropertiesPtrOutput {
	return o.ApplyT(func(v SqlServerLinkedService) *SqlAlwaysEncryptedProperties { return v.AlwaysEncryptedSettings }).(SqlAlwaysEncryptedPropertiesPtrOutput)
}

// List of tags that can be used for describing the linked service.
func (o SqlServerLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SqlServerLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o SqlServerLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v SqlServerLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o SqlServerLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o SqlServerLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o SqlServerLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o SqlServerLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SqlServerLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The on-premises Windows authentication password.
func (o SqlServerLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'SqlServer'.
func (o SqlServerLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlServerLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The on-premises Windows authentication user name. Type: string (or Expression with resultType string).
func (o SqlServerLinkedServiceOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerLinkedService) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// SQL Server linked service.
type SqlServerLinkedServiceResponse struct {
	// Sql always encrypted properties.
	AlwaysEncryptedSettings *SqlAlwaysEncryptedPropertiesResponse `pulumi:"alwaysEncryptedSettings"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The on-premises Windows authentication password.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'SqlServer'.
	Type string `pulumi:"type"`
	// The on-premises Windows authentication user name. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// SQL Server linked service.
type SqlServerLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SqlServerLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerLinkedServiceResponse)(nil)).Elem()
}

func (o SqlServerLinkedServiceResponseOutput) ToSqlServerLinkedServiceResponseOutput() SqlServerLinkedServiceResponseOutput {
	return o
}

func (o SqlServerLinkedServiceResponseOutput) ToSqlServerLinkedServiceResponseOutputWithContext(ctx context.Context) SqlServerLinkedServiceResponseOutput {
	return o
}

// Sql always encrypted properties.
func (o SqlServerLinkedServiceResponseOutput) AlwaysEncryptedSettings() SqlAlwaysEncryptedPropertiesResponsePtrOutput {
	return o.ApplyT(func(v SqlServerLinkedServiceResponse) *SqlAlwaysEncryptedPropertiesResponse {
		return v.AlwaysEncryptedSettings
	}).(SqlAlwaysEncryptedPropertiesResponsePtrOutput)
}

// List of tags that can be used for describing the linked service.
func (o SqlServerLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SqlServerLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o SqlServerLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SqlServerLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o SqlServerLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o SqlServerLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o SqlServerLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o SqlServerLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SqlServerLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The on-premises Windows authentication password.
func (o SqlServerLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'SqlServer'.
func (o SqlServerLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlServerLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The on-premises Windows authentication user name. Type: string (or Expression with resultType string).
func (o SqlServerLinkedServiceResponseOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerLinkedServiceResponse) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// A copy activity SQL server sink.
type SqlServerSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// SQL writer stored procedure name. Type: string (or Expression with resultType string).
	SqlWriterStoredProcedureName interface{} `pulumi:"sqlWriterStoredProcedureName"`
	// SQL writer table type. Type: string (or Expression with resultType string).
	SqlWriterTableType interface{} `pulumi:"sqlWriterTableType"`
	// Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean).
	SqlWriterUseTableLock interface{} `pulumi:"sqlWriterUseTableLock"`
	// SQL stored procedure parameters.
	StoredProcedureParameters interface{} `pulumi:"storedProcedureParameters"`
	// The stored procedure parameter name of the table type. Type: string (or Expression with resultType string).
	StoredProcedureTableTypeParameterName interface{} `pulumi:"storedProcedureTableTypeParameterName"`
	// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
	TableOption interface{} `pulumi:"tableOption"`
	// Copy sink type.
	// Expected value is 'SqlServerSink'.
	Type string `pulumi:"type"`
	// SQL upsert settings.
	UpsertSettings *SqlUpsertSettings `pulumi:"upsertSettings"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Write behavior when copying data into sql server. Type: string (or Expression with resultType string).
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// SqlServerSinkInput is an input type that accepts SqlServerSinkArgs and SqlServerSinkOutput values.
// You can construct a concrete instance of `SqlServerSinkInput` via:
//
//	SqlServerSinkArgs{...}
type SqlServerSinkInput interface {
	pulumi.Input

	ToSqlServerSinkOutput() SqlServerSinkOutput
	ToSqlServerSinkOutputWithContext(context.Context) SqlServerSinkOutput
}

// A copy activity SQL server sink.
type SqlServerSinkArgs struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript pulumi.Input `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount pulumi.Input `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait pulumi.Input `pulumi:"sinkRetryWait"`
	// SQL writer stored procedure name. Type: string (or Expression with resultType string).
	SqlWriterStoredProcedureName pulumi.Input `pulumi:"sqlWriterStoredProcedureName"`
	// SQL writer table type. Type: string (or Expression with resultType string).
	SqlWriterTableType pulumi.Input `pulumi:"sqlWriterTableType"`
	// Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean).
	SqlWriterUseTableLock pulumi.Input `pulumi:"sqlWriterUseTableLock"`
	// SQL stored procedure parameters.
	StoredProcedureParameters pulumi.Input `pulumi:"storedProcedureParameters"`
	// The stored procedure parameter name of the table type. Type: string (or Expression with resultType string).
	StoredProcedureTableTypeParameterName pulumi.Input `pulumi:"storedProcedureTableTypeParameterName"`
	// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
	TableOption pulumi.Input `pulumi:"tableOption"`
	// Copy sink type.
	// Expected value is 'SqlServerSink'.
	Type pulumi.StringInput `pulumi:"type"`
	// SQL upsert settings.
	UpsertSettings SqlUpsertSettingsPtrInput `pulumi:"upsertSettings"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize pulumi.Input `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout pulumi.Input `pulumi:"writeBatchTimeout"`
	// Write behavior when copying data into sql server. Type: string (or Expression with resultType string).
	WriteBehavior pulumi.Input `pulumi:"writeBehavior"`
}

func (SqlServerSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerSink)(nil)).Elem()
}

func (i SqlServerSinkArgs) ToSqlServerSinkOutput() SqlServerSinkOutput {
	return i.ToSqlServerSinkOutputWithContext(context.Background())
}

func (i SqlServerSinkArgs) ToSqlServerSinkOutputWithContext(ctx context.Context) SqlServerSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerSinkOutput)
}

// A copy activity SQL server sink.
type SqlServerSinkOutput struct{ *pulumi.OutputState }

func (SqlServerSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerSink)(nil)).Elem()
}

func (o SqlServerSinkOutput) ToSqlServerSinkOutput() SqlServerSinkOutput {
	return o
}

func (o SqlServerSinkOutput) ToSqlServerSinkOutputWithContext(ctx context.Context) SqlServerSinkOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SqlServerSinkOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSink) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o SqlServerSinkOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSink) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// SQL pre-copy script. Type: string (or Expression with resultType string).
func (o SqlServerSinkOutput) PreCopyScript() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSink) interface{} { return v.PreCopyScript }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o SqlServerSinkOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSink) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SqlServerSinkOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSink) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// SQL writer stored procedure name. Type: string (or Expression with resultType string).
func (o SqlServerSinkOutput) SqlWriterStoredProcedureName() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSink) interface{} { return v.SqlWriterStoredProcedureName }).(pulumi.AnyOutput)
}

// SQL writer table type. Type: string (or Expression with resultType string).
func (o SqlServerSinkOutput) SqlWriterTableType() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSink) interface{} { return v.SqlWriterTableType }).(pulumi.AnyOutput)
}

// Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean).
func (o SqlServerSinkOutput) SqlWriterUseTableLock() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSink) interface{} { return v.SqlWriterUseTableLock }).(pulumi.AnyOutput)
}

// SQL stored procedure parameters.
func (o SqlServerSinkOutput) StoredProcedureParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSink) interface{} { return v.StoredProcedureParameters }).(pulumi.AnyOutput)
}

// The stored procedure parameter name of the table type. Type: string (or Expression with resultType string).
func (o SqlServerSinkOutput) StoredProcedureTableTypeParameterName() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSink) interface{} { return v.StoredProcedureTableTypeParameterName }).(pulumi.AnyOutput)
}

// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
func (o SqlServerSinkOutput) TableOption() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSink) interface{} { return v.TableOption }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'SqlServerSink'.
func (o SqlServerSinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlServerSink) string { return v.Type }).(pulumi.StringOutput)
}

// SQL upsert settings.
func (o SqlServerSinkOutput) UpsertSettings() SqlUpsertSettingsPtrOutput {
	return o.ApplyT(func(v SqlServerSink) *SqlUpsertSettings { return v.UpsertSettings }).(SqlUpsertSettingsPtrOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o SqlServerSinkOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSink) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SqlServerSinkOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSink) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// Write behavior when copying data into sql server. Type: string (or Expression with resultType string).
func (o SqlServerSinkOutput) WriteBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSink) interface{} { return v.WriteBehavior }).(pulumi.AnyOutput)
}

// A copy activity SQL server sink.
type SqlServerSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// SQL writer stored procedure name. Type: string (or Expression with resultType string).
	SqlWriterStoredProcedureName interface{} `pulumi:"sqlWriterStoredProcedureName"`
	// SQL writer table type. Type: string (or Expression with resultType string).
	SqlWriterTableType interface{} `pulumi:"sqlWriterTableType"`
	// Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean).
	SqlWriterUseTableLock interface{} `pulumi:"sqlWriterUseTableLock"`
	// SQL stored procedure parameters.
	StoredProcedureParameters interface{} `pulumi:"storedProcedureParameters"`
	// The stored procedure parameter name of the table type. Type: string (or Expression with resultType string).
	StoredProcedureTableTypeParameterName interface{} `pulumi:"storedProcedureTableTypeParameterName"`
	// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
	TableOption interface{} `pulumi:"tableOption"`
	// Copy sink type.
	// Expected value is 'SqlServerSink'.
	Type string `pulumi:"type"`
	// SQL upsert settings.
	UpsertSettings *SqlUpsertSettingsResponse `pulumi:"upsertSettings"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Write behavior when copying data into sql server. Type: string (or Expression with resultType string).
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// A copy activity SQL server sink.
type SqlServerSinkResponseOutput struct{ *pulumi.OutputState }

func (SqlServerSinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerSinkResponse)(nil)).Elem()
}

func (o SqlServerSinkResponseOutput) ToSqlServerSinkResponseOutput() SqlServerSinkResponseOutput {
	return o
}

func (o SqlServerSinkResponseOutput) ToSqlServerSinkResponseOutputWithContext(ctx context.Context) SqlServerSinkResponseOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SqlServerSinkResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSinkResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o SqlServerSinkResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSinkResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// SQL pre-copy script. Type: string (or Expression with resultType string).
func (o SqlServerSinkResponseOutput) PreCopyScript() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSinkResponse) interface{} { return v.PreCopyScript }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o SqlServerSinkResponseOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSinkResponse) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SqlServerSinkResponseOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSinkResponse) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// SQL writer stored procedure name. Type: string (or Expression with resultType string).
func (o SqlServerSinkResponseOutput) SqlWriterStoredProcedureName() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSinkResponse) interface{} { return v.SqlWriterStoredProcedureName }).(pulumi.AnyOutput)
}

// SQL writer table type. Type: string (or Expression with resultType string).
func (o SqlServerSinkResponseOutput) SqlWriterTableType() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSinkResponse) interface{} { return v.SqlWriterTableType }).(pulumi.AnyOutput)
}

// Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean).
func (o SqlServerSinkResponseOutput) SqlWriterUseTableLock() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSinkResponse) interface{} { return v.SqlWriterUseTableLock }).(pulumi.AnyOutput)
}

// SQL stored procedure parameters.
func (o SqlServerSinkResponseOutput) StoredProcedureParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSinkResponse) interface{} { return v.StoredProcedureParameters }).(pulumi.AnyOutput)
}

// The stored procedure parameter name of the table type. Type: string (or Expression with resultType string).
func (o SqlServerSinkResponseOutput) StoredProcedureTableTypeParameterName() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSinkResponse) interface{} { return v.StoredProcedureTableTypeParameterName }).(pulumi.AnyOutput)
}

// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
func (o SqlServerSinkResponseOutput) TableOption() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSinkResponse) interface{} { return v.TableOption }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'SqlServerSink'.
func (o SqlServerSinkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlServerSinkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// SQL upsert settings.
func (o SqlServerSinkResponseOutput) UpsertSettings() SqlUpsertSettingsResponsePtrOutput {
	return o.ApplyT(func(v SqlServerSinkResponse) *SqlUpsertSettingsResponse { return v.UpsertSettings }).(SqlUpsertSettingsResponsePtrOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o SqlServerSinkResponseOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSinkResponse) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SqlServerSinkResponseOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSinkResponse) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// Write behavior when copying data into sql server. Type: string (or Expression with resultType string).
func (o SqlServerSinkResponseOutput) WriteBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSinkResponse) interface{} { return v.WriteBehavior }).(pulumi.AnyOutput)
}

// A copy activity SQL server source.
type SqlServerSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string).
	IsolationLevel interface{} `pulumi:"isolationLevel"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange". Type: string (or Expression with resultType string).
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for Sql source partitioning.
	PartitionSettings *SqlPartitionSettings `pulumi:"partitionSettings"`
	// Which additional types to produce.
	ProduceAdditionalTypes interface{} `pulumi:"produceAdditionalTypes"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// SQL reader query. Type: string (or Expression with resultType string).
	SqlReaderQuery interface{} `pulumi:"sqlReaderQuery"`
	// Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
	SqlReaderStoredProcedureName interface{} `pulumi:"sqlReaderStoredProcedureName"`
	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
	StoredProcedureParameters interface{} `pulumi:"storedProcedureParameters"`
	// Copy source type.
	// Expected value is 'SqlServerSource'.
	Type string `pulumi:"type"`
}

// SqlServerSourceInput is an input type that accepts SqlServerSourceArgs and SqlServerSourceOutput values.
// You can construct a concrete instance of `SqlServerSourceInput` via:
//
//	SqlServerSourceArgs{...}
type SqlServerSourceInput interface {
	pulumi.Input

	ToSqlServerSourceOutput() SqlServerSourceOutput
	ToSqlServerSourceOutputWithContext(context.Context) SqlServerSourceOutput
}

// A copy activity SQL server source.
type SqlServerSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string).
	IsolationLevel pulumi.Input `pulumi:"isolationLevel"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange". Type: string (or Expression with resultType string).
	PartitionOption pulumi.Input `pulumi:"partitionOption"`
	// The settings that will be leveraged for Sql source partitioning.
	PartitionSettings SqlPartitionSettingsPtrInput `pulumi:"partitionSettings"`
	// Which additional types to produce.
	ProduceAdditionalTypes pulumi.Input `pulumi:"produceAdditionalTypes"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// SQL reader query. Type: string (or Expression with resultType string).
	SqlReaderQuery pulumi.Input `pulumi:"sqlReaderQuery"`
	// Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
	SqlReaderStoredProcedureName pulumi.Input `pulumi:"sqlReaderStoredProcedureName"`
	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
	StoredProcedureParameters pulumi.Input `pulumi:"storedProcedureParameters"`
	// Copy source type.
	// Expected value is 'SqlServerSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SqlServerSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerSource)(nil)).Elem()
}

func (i SqlServerSourceArgs) ToSqlServerSourceOutput() SqlServerSourceOutput {
	return i.ToSqlServerSourceOutputWithContext(context.Background())
}

func (i SqlServerSourceArgs) ToSqlServerSourceOutputWithContext(ctx context.Context) SqlServerSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerSourceOutput)
}

// A copy activity SQL server source.
type SqlServerSourceOutput struct{ *pulumi.OutputState }

func (SqlServerSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerSource)(nil)).Elem()
}

func (o SqlServerSourceOutput) ToSqlServerSourceOutput() SqlServerSourceOutput {
	return o
}

func (o SqlServerSourceOutput) ToSqlServerSourceOutputWithContext(ctx context.Context) SqlServerSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o SqlServerSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SqlServerSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string).
func (o SqlServerSourceOutput) IsolationLevel() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSource) interface{} { return v.IsolationLevel }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SqlServerSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange". Type: string (or Expression with resultType string).
func (o SqlServerSourceOutput) PartitionOption() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSource) interface{} { return v.PartitionOption }).(pulumi.AnyOutput)
}

// The settings that will be leveraged for Sql source partitioning.
func (o SqlServerSourceOutput) PartitionSettings() SqlPartitionSettingsPtrOutput {
	return o.ApplyT(func(v SqlServerSource) *SqlPartitionSettings { return v.PartitionSettings }).(SqlPartitionSettingsPtrOutput)
}

// Which additional types to produce.
func (o SqlServerSourceOutput) ProduceAdditionalTypes() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSource) interface{} { return v.ProduceAdditionalTypes }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SqlServerSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o SqlServerSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SqlServerSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// SQL reader query. Type: string (or Expression with resultType string).
func (o SqlServerSourceOutput) SqlReaderQuery() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSource) interface{} { return v.SqlReaderQuery }).(pulumi.AnyOutput)
}

// Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
func (o SqlServerSourceOutput) SqlReaderStoredProcedureName() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSource) interface{} { return v.SqlReaderStoredProcedureName }).(pulumi.AnyOutput)
}

// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
func (o SqlServerSourceOutput) StoredProcedureParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSource) interface{} { return v.StoredProcedureParameters }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'SqlServerSource'.
func (o SqlServerSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlServerSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity SQL server source.
type SqlServerSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string).
	IsolationLevel interface{} `pulumi:"isolationLevel"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange". Type: string (or Expression with resultType string).
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for Sql source partitioning.
	PartitionSettings *SqlPartitionSettingsResponse `pulumi:"partitionSettings"`
	// Which additional types to produce.
	ProduceAdditionalTypes interface{} `pulumi:"produceAdditionalTypes"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// SQL reader query. Type: string (or Expression with resultType string).
	SqlReaderQuery interface{} `pulumi:"sqlReaderQuery"`
	// Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
	SqlReaderStoredProcedureName interface{} `pulumi:"sqlReaderStoredProcedureName"`
	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
	StoredProcedureParameters interface{} `pulumi:"storedProcedureParameters"`
	// Copy source type.
	// Expected value is 'SqlServerSource'.
	Type string `pulumi:"type"`
}

// A copy activity SQL server source.
type SqlServerSourceResponseOutput struct{ *pulumi.OutputState }

func (SqlServerSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerSourceResponse)(nil)).Elem()
}

func (o SqlServerSourceResponseOutput) ToSqlServerSourceResponseOutput() SqlServerSourceResponseOutput {
	return o
}

func (o SqlServerSourceResponseOutput) ToSqlServerSourceResponseOutputWithContext(ctx context.Context) SqlServerSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o SqlServerSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SqlServerSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string).
func (o SqlServerSourceResponseOutput) IsolationLevel() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSourceResponse) interface{} { return v.IsolationLevel }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SqlServerSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange". Type: string (or Expression with resultType string).
func (o SqlServerSourceResponseOutput) PartitionOption() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSourceResponse) interface{} { return v.PartitionOption }).(pulumi.AnyOutput)
}

// The settings that will be leveraged for Sql source partitioning.
func (o SqlServerSourceResponseOutput) PartitionSettings() SqlPartitionSettingsResponsePtrOutput {
	return o.ApplyT(func(v SqlServerSourceResponse) *SqlPartitionSettingsResponse { return v.PartitionSettings }).(SqlPartitionSettingsResponsePtrOutput)
}

// Which additional types to produce.
func (o SqlServerSourceResponseOutput) ProduceAdditionalTypes() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSourceResponse) interface{} { return v.ProduceAdditionalTypes }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SqlServerSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o SqlServerSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SqlServerSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// SQL reader query. Type: string (or Expression with resultType string).
func (o SqlServerSourceResponseOutput) SqlReaderQuery() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSourceResponse) interface{} { return v.SqlReaderQuery }).(pulumi.AnyOutput)
}

// Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
func (o SqlServerSourceResponseOutput) SqlReaderStoredProcedureName() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSourceResponse) interface{} { return v.SqlReaderStoredProcedureName }).(pulumi.AnyOutput)
}

// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
func (o SqlServerSourceResponseOutput) StoredProcedureParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerSourceResponse) interface{} { return v.StoredProcedureParameters }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'SqlServerSource'.
func (o SqlServerSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlServerSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// SQL stored procedure activity type.
type SqlServerStoredProcedureActivity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Stored procedure name. Type: string (or Expression with resultType string).
	StoredProcedureName interface{} `pulumi:"storedProcedureName"`
	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
	StoredProcedureParameters interface{} `pulumi:"storedProcedureParameters"`
	// Type of activity.
	// Expected value is 'SqlServerStoredProcedure'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// SqlServerStoredProcedureActivityInput is an input type that accepts SqlServerStoredProcedureActivityArgs and SqlServerStoredProcedureActivityOutput values.
// You can construct a concrete instance of `SqlServerStoredProcedureActivityInput` via:
//
//	SqlServerStoredProcedureActivityArgs{...}
type SqlServerStoredProcedureActivityInput interface {
	pulumi.Input

	ToSqlServerStoredProcedureActivityOutput() SqlServerStoredProcedureActivityOutput
	ToSqlServerStoredProcedureActivityOutputWithContext(context.Context) SqlServerStoredProcedureActivityOutput
}

// SQL stored procedure activity type.
type SqlServerStoredProcedureActivityArgs struct {
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs pulumi.StringPtrInput `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy ActivityPolicyPtrInput `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Stored procedure name. Type: string (or Expression with resultType string).
	StoredProcedureName pulumi.Input `pulumi:"storedProcedureName"`
	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
	StoredProcedureParameters pulumi.Input `pulumi:"storedProcedureParameters"`
	// Type of activity.
	// Expected value is 'SqlServerStoredProcedure'.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
}

func (SqlServerStoredProcedureActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerStoredProcedureActivity)(nil)).Elem()
}

func (i SqlServerStoredProcedureActivityArgs) ToSqlServerStoredProcedureActivityOutput() SqlServerStoredProcedureActivityOutput {
	return i.ToSqlServerStoredProcedureActivityOutputWithContext(context.Background())
}

func (i SqlServerStoredProcedureActivityArgs) ToSqlServerStoredProcedureActivityOutputWithContext(ctx context.Context) SqlServerStoredProcedureActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerStoredProcedureActivityOutput)
}

// SQL stored procedure activity type.
type SqlServerStoredProcedureActivityOutput struct{ *pulumi.OutputState }

func (SqlServerStoredProcedureActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerStoredProcedureActivity)(nil)).Elem()
}

func (o SqlServerStoredProcedureActivityOutput) ToSqlServerStoredProcedureActivityOutput() SqlServerStoredProcedureActivityOutput {
	return o
}

func (o SqlServerStoredProcedureActivityOutput) ToSqlServerStoredProcedureActivityOutputWithContext(ctx context.Context) SqlServerStoredProcedureActivityOutput {
	return o
}

// Activity depends on condition.
func (o SqlServerStoredProcedureActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v SqlServerStoredProcedureActivity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o SqlServerStoredProcedureActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerStoredProcedureActivity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o SqlServerStoredProcedureActivityOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v SqlServerStoredProcedureActivity) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Activity name.
func (o SqlServerStoredProcedureActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SqlServerStoredProcedureActivity) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o SqlServerStoredProcedureActivityOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerStoredProcedureActivity) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o SqlServerStoredProcedureActivityOutput) Policy() ActivityPolicyPtrOutput {
	return o.ApplyT(func(v SqlServerStoredProcedureActivity) *ActivityPolicy { return v.Policy }).(ActivityPolicyPtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o SqlServerStoredProcedureActivityOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerStoredProcedureActivity) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Stored procedure name. Type: string (or Expression with resultType string).
func (o SqlServerStoredProcedureActivityOutput) StoredProcedureName() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerStoredProcedureActivity) interface{} { return v.StoredProcedureName }).(pulumi.AnyOutput)
}

// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
func (o SqlServerStoredProcedureActivityOutput) StoredProcedureParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerStoredProcedureActivity) interface{} { return v.StoredProcedureParameters }).(pulumi.AnyOutput)
}

// Type of activity.
// Expected value is 'SqlServerStoredProcedure'.
func (o SqlServerStoredProcedureActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlServerStoredProcedureActivity) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o SqlServerStoredProcedureActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v SqlServerStoredProcedureActivity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

// SQL stored procedure activity type.
type SqlServerStoredProcedureActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Stored procedure name. Type: string (or Expression with resultType string).
	StoredProcedureName interface{} `pulumi:"storedProcedureName"`
	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
	StoredProcedureParameters interface{} `pulumi:"storedProcedureParameters"`
	// Type of activity.
	// Expected value is 'SqlServerStoredProcedure'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// SQL stored procedure activity type.
type SqlServerStoredProcedureActivityResponseOutput struct{ *pulumi.OutputState }

func (SqlServerStoredProcedureActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerStoredProcedureActivityResponse)(nil)).Elem()
}

func (o SqlServerStoredProcedureActivityResponseOutput) ToSqlServerStoredProcedureActivityResponseOutput() SqlServerStoredProcedureActivityResponseOutput {
	return o
}

func (o SqlServerStoredProcedureActivityResponseOutput) ToSqlServerStoredProcedureActivityResponseOutputWithContext(ctx context.Context) SqlServerStoredProcedureActivityResponseOutput {
	return o
}

// Activity depends on condition.
func (o SqlServerStoredProcedureActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v SqlServerStoredProcedureActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o SqlServerStoredProcedureActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerStoredProcedureActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o SqlServerStoredProcedureActivityResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v SqlServerStoredProcedureActivityResponse) LinkedServiceReferenceResponse {
		return v.LinkedServiceName
	}).(LinkedServiceReferenceResponseOutput)
}

// Activity name.
func (o SqlServerStoredProcedureActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SqlServerStoredProcedureActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o SqlServerStoredProcedureActivityResponseOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerStoredProcedureActivityResponse) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o SqlServerStoredProcedureActivityResponseOutput) Policy() ActivityPolicyResponsePtrOutput {
	return o.ApplyT(func(v SqlServerStoredProcedureActivityResponse) *ActivityPolicyResponse { return v.Policy }).(ActivityPolicyResponsePtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o SqlServerStoredProcedureActivityResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerStoredProcedureActivityResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Stored procedure name. Type: string (or Expression with resultType string).
func (o SqlServerStoredProcedureActivityResponseOutput) StoredProcedureName() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerStoredProcedureActivityResponse) interface{} { return v.StoredProcedureName }).(pulumi.AnyOutput)
}

// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
func (o SqlServerStoredProcedureActivityResponseOutput) StoredProcedureParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerStoredProcedureActivityResponse) interface{} { return v.StoredProcedureParameters }).(pulumi.AnyOutput)
}

// Type of activity.
// Expected value is 'SqlServerStoredProcedure'.
func (o SqlServerStoredProcedureActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlServerStoredProcedureActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o SqlServerStoredProcedureActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v SqlServerStoredProcedureActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

// The on-premises SQL Server dataset.
type SqlServerTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the SQL Server dataset. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'SqlServerTable'.
	Type string `pulumi:"type"`
}

// SqlServerTableDatasetInput is an input type that accepts SqlServerTableDatasetArgs and SqlServerTableDatasetOutput values.
// You can construct a concrete instance of `SqlServerTableDatasetInput` via:
//
//	SqlServerTableDatasetArgs{...}
type SqlServerTableDatasetInput interface {
	pulumi.Input

	ToSqlServerTableDatasetOutput() SqlServerTableDatasetOutput
	ToSqlServerTableDatasetOutputWithContext(context.Context) SqlServerTableDatasetOutput
}

// The on-premises SQL Server dataset.
type SqlServerTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the SQL Server dataset. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'SqlServerTable'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SqlServerTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerTableDataset)(nil)).Elem()
}

func (i SqlServerTableDatasetArgs) ToSqlServerTableDatasetOutput() SqlServerTableDatasetOutput {
	return i.ToSqlServerTableDatasetOutputWithContext(context.Background())
}

func (i SqlServerTableDatasetArgs) ToSqlServerTableDatasetOutputWithContext(ctx context.Context) SqlServerTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerTableDatasetOutput)
}

// The on-premises SQL Server dataset.
type SqlServerTableDatasetOutput struct{ *pulumi.OutputState }

func (SqlServerTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerTableDataset)(nil)).Elem()
}

func (o SqlServerTableDatasetOutput) ToSqlServerTableDatasetOutput() SqlServerTableDatasetOutput {
	return o
}

func (o SqlServerTableDatasetOutput) ToSqlServerTableDatasetOutputWithContext(ctx context.Context) SqlServerTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SqlServerTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SqlServerTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SqlServerTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SqlServerTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v SqlServerTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o SqlServerTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v SqlServerTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o SqlServerTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SqlServerTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SqlServerTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SqlServerTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the SQL Server dataset. Type: string (or Expression with resultType string).
func (o SqlServerTableDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerTableDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o SqlServerTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'SqlServerTable'.
func (o SqlServerTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlServerTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The on-premises SQL Server dataset.
type SqlServerTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the SQL Server dataset. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'SqlServerTable'.
	Type string `pulumi:"type"`
}

// The on-premises SQL Server dataset.
type SqlServerTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (SqlServerTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerTableDatasetResponse)(nil)).Elem()
}

func (o SqlServerTableDatasetResponseOutput) ToSqlServerTableDatasetResponseOutput() SqlServerTableDatasetResponseOutput {
	return o
}

func (o SqlServerTableDatasetResponseOutput) ToSqlServerTableDatasetResponseOutputWithContext(ctx context.Context) SqlServerTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SqlServerTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SqlServerTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SqlServerTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SqlServerTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v SqlServerTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o SqlServerTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v SqlServerTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o SqlServerTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SqlServerTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SqlServerTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SqlServerTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the SQL Server dataset. Type: string (or Expression with resultType string).
func (o SqlServerTableDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerTableDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o SqlServerTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlServerTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'SqlServerTable'.
func (o SqlServerTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlServerTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity SQL sink.
type SqlSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// SQL writer stored procedure name. Type: string (or Expression with resultType string).
	SqlWriterStoredProcedureName interface{} `pulumi:"sqlWriterStoredProcedureName"`
	// SQL writer table type. Type: string (or Expression with resultType string).
	SqlWriterTableType interface{} `pulumi:"sqlWriterTableType"`
	// Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean).
	SqlWriterUseTableLock interface{} `pulumi:"sqlWriterUseTableLock"`
	// SQL stored procedure parameters.
	StoredProcedureParameters interface{} `pulumi:"storedProcedureParameters"`
	// The stored procedure parameter name of the table type. Type: string (or Expression with resultType string).
	StoredProcedureTableTypeParameterName interface{} `pulumi:"storedProcedureTableTypeParameterName"`
	// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
	TableOption interface{} `pulumi:"tableOption"`
	// Copy sink type.
	// Expected value is 'SqlSink'.
	Type string `pulumi:"type"`
	// SQL upsert settings.
	UpsertSettings *SqlUpsertSettings `pulumi:"upsertSettings"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Write behavior when copying data into sql. Type: string (or Expression with resultType string).
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// SqlSinkInput is an input type that accepts SqlSinkArgs and SqlSinkOutput values.
// You can construct a concrete instance of `SqlSinkInput` via:
//
//	SqlSinkArgs{...}
type SqlSinkInput interface {
	pulumi.Input

	ToSqlSinkOutput() SqlSinkOutput
	ToSqlSinkOutputWithContext(context.Context) SqlSinkOutput
}

// A copy activity SQL sink.
type SqlSinkArgs struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript pulumi.Input `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount pulumi.Input `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait pulumi.Input `pulumi:"sinkRetryWait"`
	// SQL writer stored procedure name. Type: string (or Expression with resultType string).
	SqlWriterStoredProcedureName pulumi.Input `pulumi:"sqlWriterStoredProcedureName"`
	// SQL writer table type. Type: string (or Expression with resultType string).
	SqlWriterTableType pulumi.Input `pulumi:"sqlWriterTableType"`
	// Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean).
	SqlWriterUseTableLock pulumi.Input `pulumi:"sqlWriterUseTableLock"`
	// SQL stored procedure parameters.
	StoredProcedureParameters pulumi.Input `pulumi:"storedProcedureParameters"`
	// The stored procedure parameter name of the table type. Type: string (or Expression with resultType string).
	StoredProcedureTableTypeParameterName pulumi.Input `pulumi:"storedProcedureTableTypeParameterName"`
	// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
	TableOption pulumi.Input `pulumi:"tableOption"`
	// Copy sink type.
	// Expected value is 'SqlSink'.
	Type pulumi.StringInput `pulumi:"type"`
	// SQL upsert settings.
	UpsertSettings SqlUpsertSettingsPtrInput `pulumi:"upsertSettings"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize pulumi.Input `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout pulumi.Input `pulumi:"writeBatchTimeout"`
	// Write behavior when copying data into sql. Type: string (or Expression with resultType string).
	WriteBehavior pulumi.Input `pulumi:"writeBehavior"`
}

func (SqlSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlSink)(nil)).Elem()
}

func (i SqlSinkArgs) ToSqlSinkOutput() SqlSinkOutput {
	return i.ToSqlSinkOutputWithContext(context.Background())
}

func (i SqlSinkArgs) ToSqlSinkOutputWithContext(ctx context.Context) SqlSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlSinkOutput)
}

// A copy activity SQL sink.
type SqlSinkOutput struct{ *pulumi.OutputState }

func (SqlSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlSink)(nil)).Elem()
}

func (o SqlSinkOutput) ToSqlSinkOutput() SqlSinkOutput {
	return o
}

func (o SqlSinkOutput) ToSqlSinkOutputWithContext(ctx context.Context) SqlSinkOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SqlSinkOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSink) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o SqlSinkOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSink) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// SQL pre-copy script. Type: string (or Expression with resultType string).
func (o SqlSinkOutput) PreCopyScript() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSink) interface{} { return v.PreCopyScript }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o SqlSinkOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSink) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SqlSinkOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSink) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// SQL writer stored procedure name. Type: string (or Expression with resultType string).
func (o SqlSinkOutput) SqlWriterStoredProcedureName() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSink) interface{} { return v.SqlWriterStoredProcedureName }).(pulumi.AnyOutput)
}

// SQL writer table type. Type: string (or Expression with resultType string).
func (o SqlSinkOutput) SqlWriterTableType() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSink) interface{} { return v.SqlWriterTableType }).(pulumi.AnyOutput)
}

// Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean).
func (o SqlSinkOutput) SqlWriterUseTableLock() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSink) interface{} { return v.SqlWriterUseTableLock }).(pulumi.AnyOutput)
}

// SQL stored procedure parameters.
func (o SqlSinkOutput) StoredProcedureParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSink) interface{} { return v.StoredProcedureParameters }).(pulumi.AnyOutput)
}

// The stored procedure parameter name of the table type. Type: string (or Expression with resultType string).
func (o SqlSinkOutput) StoredProcedureTableTypeParameterName() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSink) interface{} { return v.StoredProcedureTableTypeParameterName }).(pulumi.AnyOutput)
}

// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
func (o SqlSinkOutput) TableOption() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSink) interface{} { return v.TableOption }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'SqlSink'.
func (o SqlSinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlSink) string { return v.Type }).(pulumi.StringOutput)
}

// SQL upsert settings.
func (o SqlSinkOutput) UpsertSettings() SqlUpsertSettingsPtrOutput {
	return o.ApplyT(func(v SqlSink) *SqlUpsertSettings { return v.UpsertSettings }).(SqlUpsertSettingsPtrOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o SqlSinkOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSink) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SqlSinkOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSink) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// Write behavior when copying data into sql. Type: string (or Expression with resultType string).
func (o SqlSinkOutput) WriteBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSink) interface{} { return v.WriteBehavior }).(pulumi.AnyOutput)
}

// A copy activity SQL sink.
type SqlSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// SQL writer stored procedure name. Type: string (or Expression with resultType string).
	SqlWriterStoredProcedureName interface{} `pulumi:"sqlWriterStoredProcedureName"`
	// SQL writer table type. Type: string (or Expression with resultType string).
	SqlWriterTableType interface{} `pulumi:"sqlWriterTableType"`
	// Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean).
	SqlWriterUseTableLock interface{} `pulumi:"sqlWriterUseTableLock"`
	// SQL stored procedure parameters.
	StoredProcedureParameters interface{} `pulumi:"storedProcedureParameters"`
	// The stored procedure parameter name of the table type. Type: string (or Expression with resultType string).
	StoredProcedureTableTypeParameterName interface{} `pulumi:"storedProcedureTableTypeParameterName"`
	// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
	TableOption interface{} `pulumi:"tableOption"`
	// Copy sink type.
	// Expected value is 'SqlSink'.
	Type string `pulumi:"type"`
	// SQL upsert settings.
	UpsertSettings *SqlUpsertSettingsResponse `pulumi:"upsertSettings"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Write behavior when copying data into sql. Type: string (or Expression with resultType string).
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// A copy activity SQL sink.
type SqlSinkResponseOutput struct{ *pulumi.OutputState }

func (SqlSinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlSinkResponse)(nil)).Elem()
}

func (o SqlSinkResponseOutput) ToSqlSinkResponseOutput() SqlSinkResponseOutput {
	return o
}

func (o SqlSinkResponseOutput) ToSqlSinkResponseOutputWithContext(ctx context.Context) SqlSinkResponseOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SqlSinkResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSinkResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o SqlSinkResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSinkResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// SQL pre-copy script. Type: string (or Expression with resultType string).
func (o SqlSinkResponseOutput) PreCopyScript() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSinkResponse) interface{} { return v.PreCopyScript }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o SqlSinkResponseOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSinkResponse) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SqlSinkResponseOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSinkResponse) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// SQL writer stored procedure name. Type: string (or Expression with resultType string).
func (o SqlSinkResponseOutput) SqlWriterStoredProcedureName() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSinkResponse) interface{} { return v.SqlWriterStoredProcedureName }).(pulumi.AnyOutput)
}

// SQL writer table type. Type: string (or Expression with resultType string).
func (o SqlSinkResponseOutput) SqlWriterTableType() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSinkResponse) interface{} { return v.SqlWriterTableType }).(pulumi.AnyOutput)
}

// Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean).
func (o SqlSinkResponseOutput) SqlWriterUseTableLock() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSinkResponse) interface{} { return v.SqlWriterUseTableLock }).(pulumi.AnyOutput)
}

// SQL stored procedure parameters.
func (o SqlSinkResponseOutput) StoredProcedureParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSinkResponse) interface{} { return v.StoredProcedureParameters }).(pulumi.AnyOutput)
}

// The stored procedure parameter name of the table type. Type: string (or Expression with resultType string).
func (o SqlSinkResponseOutput) StoredProcedureTableTypeParameterName() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSinkResponse) interface{} { return v.StoredProcedureTableTypeParameterName }).(pulumi.AnyOutput)
}

// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
func (o SqlSinkResponseOutput) TableOption() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSinkResponse) interface{} { return v.TableOption }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'SqlSink'.
func (o SqlSinkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlSinkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// SQL upsert settings.
func (o SqlSinkResponseOutput) UpsertSettings() SqlUpsertSettingsResponsePtrOutput {
	return o.ApplyT(func(v SqlSinkResponse) *SqlUpsertSettingsResponse { return v.UpsertSettings }).(SqlUpsertSettingsResponsePtrOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o SqlSinkResponseOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSinkResponse) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SqlSinkResponseOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSinkResponse) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// Write behavior when copying data into sql. Type: string (or Expression with resultType string).
func (o SqlSinkResponseOutput) WriteBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSinkResponse) interface{} { return v.WriteBehavior }).(pulumi.AnyOutput)
}

// A copy activity SQL source.
type SqlSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string).
	IsolationLevel interface{} `pulumi:"isolationLevel"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange". Type: string (or Expression with resultType string).
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for Sql source partitioning.
	PartitionSettings *SqlPartitionSettings `pulumi:"partitionSettings"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// SQL reader query. Type: string (or Expression with resultType string).
	SqlReaderQuery interface{} `pulumi:"sqlReaderQuery"`
	// Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
	SqlReaderStoredProcedureName interface{} `pulumi:"sqlReaderStoredProcedureName"`
	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
	StoredProcedureParameters interface{} `pulumi:"storedProcedureParameters"`
	// Copy source type.
	// Expected value is 'SqlSource'.
	Type string `pulumi:"type"`
}

// SqlSourceInput is an input type that accepts SqlSourceArgs and SqlSourceOutput values.
// You can construct a concrete instance of `SqlSourceInput` via:
//
//	SqlSourceArgs{...}
type SqlSourceInput interface {
	pulumi.Input

	ToSqlSourceOutput() SqlSourceOutput
	ToSqlSourceOutputWithContext(context.Context) SqlSourceOutput
}

// A copy activity SQL source.
type SqlSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string).
	IsolationLevel pulumi.Input `pulumi:"isolationLevel"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange". Type: string (or Expression with resultType string).
	PartitionOption pulumi.Input `pulumi:"partitionOption"`
	// The settings that will be leveraged for Sql source partitioning.
	PartitionSettings SqlPartitionSettingsPtrInput `pulumi:"partitionSettings"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// SQL reader query. Type: string (or Expression with resultType string).
	SqlReaderQuery pulumi.Input `pulumi:"sqlReaderQuery"`
	// Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
	SqlReaderStoredProcedureName pulumi.Input `pulumi:"sqlReaderStoredProcedureName"`
	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
	StoredProcedureParameters pulumi.Input `pulumi:"storedProcedureParameters"`
	// Copy source type.
	// Expected value is 'SqlSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SqlSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlSource)(nil)).Elem()
}

func (i SqlSourceArgs) ToSqlSourceOutput() SqlSourceOutput {
	return i.ToSqlSourceOutputWithContext(context.Background())
}

func (i SqlSourceArgs) ToSqlSourceOutputWithContext(ctx context.Context) SqlSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlSourceOutput)
}

// A copy activity SQL source.
type SqlSourceOutput struct{ *pulumi.OutputState }

func (SqlSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlSource)(nil)).Elem()
}

func (o SqlSourceOutput) ToSqlSourceOutput() SqlSourceOutput {
	return o
}

func (o SqlSourceOutput) ToSqlSourceOutputWithContext(ctx context.Context) SqlSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o SqlSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SqlSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string).
func (o SqlSourceOutput) IsolationLevel() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSource) interface{} { return v.IsolationLevel }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SqlSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange". Type: string (or Expression with resultType string).
func (o SqlSourceOutput) PartitionOption() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSource) interface{} { return v.PartitionOption }).(pulumi.AnyOutput)
}

// The settings that will be leveraged for Sql source partitioning.
func (o SqlSourceOutput) PartitionSettings() SqlPartitionSettingsPtrOutput {
	return o.ApplyT(func(v SqlSource) *SqlPartitionSettings { return v.PartitionSettings }).(SqlPartitionSettingsPtrOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SqlSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o SqlSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SqlSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// SQL reader query. Type: string (or Expression with resultType string).
func (o SqlSourceOutput) SqlReaderQuery() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSource) interface{} { return v.SqlReaderQuery }).(pulumi.AnyOutput)
}

// Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
func (o SqlSourceOutput) SqlReaderStoredProcedureName() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSource) interface{} { return v.SqlReaderStoredProcedureName }).(pulumi.AnyOutput)
}

// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
func (o SqlSourceOutput) StoredProcedureParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSource) interface{} { return v.StoredProcedureParameters }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'SqlSource'.
func (o SqlSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity SQL source.
type SqlSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string).
	IsolationLevel interface{} `pulumi:"isolationLevel"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange". Type: string (or Expression with resultType string).
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for Sql source partitioning.
	PartitionSettings *SqlPartitionSettingsResponse `pulumi:"partitionSettings"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// SQL reader query. Type: string (or Expression with resultType string).
	SqlReaderQuery interface{} `pulumi:"sqlReaderQuery"`
	// Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
	SqlReaderStoredProcedureName interface{} `pulumi:"sqlReaderStoredProcedureName"`
	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
	StoredProcedureParameters interface{} `pulumi:"storedProcedureParameters"`
	// Copy source type.
	// Expected value is 'SqlSource'.
	Type string `pulumi:"type"`
}

// A copy activity SQL source.
type SqlSourceResponseOutput struct{ *pulumi.OutputState }

func (SqlSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlSourceResponse)(nil)).Elem()
}

func (o SqlSourceResponseOutput) ToSqlSourceResponseOutput() SqlSourceResponseOutput {
	return o
}

func (o SqlSourceResponseOutput) ToSqlSourceResponseOutputWithContext(ctx context.Context) SqlSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o SqlSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SqlSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string).
func (o SqlSourceResponseOutput) IsolationLevel() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSourceResponse) interface{} { return v.IsolationLevel }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SqlSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange". Type: string (or Expression with resultType string).
func (o SqlSourceResponseOutput) PartitionOption() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSourceResponse) interface{} { return v.PartitionOption }).(pulumi.AnyOutput)
}

// The settings that will be leveraged for Sql source partitioning.
func (o SqlSourceResponseOutput) PartitionSettings() SqlPartitionSettingsResponsePtrOutput {
	return o.ApplyT(func(v SqlSourceResponse) *SqlPartitionSettingsResponse { return v.PartitionSettings }).(SqlPartitionSettingsResponsePtrOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SqlSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o SqlSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SqlSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// SQL reader query. Type: string (or Expression with resultType string).
func (o SqlSourceResponseOutput) SqlReaderQuery() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSourceResponse) interface{} { return v.SqlReaderQuery }).(pulumi.AnyOutput)
}

// Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
func (o SqlSourceResponseOutput) SqlReaderStoredProcedureName() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSourceResponse) interface{} { return v.SqlReaderStoredProcedureName }).(pulumi.AnyOutput)
}

// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
func (o SqlSourceResponseOutput) StoredProcedureParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlSourceResponse) interface{} { return v.StoredProcedureParameters }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'SqlSource'.
func (o SqlSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SqlSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Sql upsert option settings
type SqlUpsertSettings struct {
	// Schema name for interim table. Type: string (or Expression with resultType string).
	InterimSchemaName interface{} `pulumi:"interimSchemaName"`
	// Key column names for unique row identification. Type: array of strings (or Expression with resultType array of strings).
	Keys interface{} `pulumi:"keys"`
	// Specifies whether to use temp db for upsert interim table. Type: boolean (or Expression with resultType boolean).
	UseTempDB interface{} `pulumi:"useTempDB"`
}

// SqlUpsertSettingsInput is an input type that accepts SqlUpsertSettingsArgs and SqlUpsertSettingsOutput values.
// You can construct a concrete instance of `SqlUpsertSettingsInput` via:
//
//	SqlUpsertSettingsArgs{...}
type SqlUpsertSettingsInput interface {
	pulumi.Input

	ToSqlUpsertSettingsOutput() SqlUpsertSettingsOutput
	ToSqlUpsertSettingsOutputWithContext(context.Context) SqlUpsertSettingsOutput
}

// Sql upsert option settings
type SqlUpsertSettingsArgs struct {
	// Schema name for interim table. Type: string (or Expression with resultType string).
	InterimSchemaName pulumi.Input `pulumi:"interimSchemaName"`
	// Key column names for unique row identification. Type: array of strings (or Expression with resultType array of strings).
	Keys pulumi.Input `pulumi:"keys"`
	// Specifies whether to use temp db for upsert interim table. Type: boolean (or Expression with resultType boolean).
	UseTempDB pulumi.Input `pulumi:"useTempDB"`
}

func (SqlUpsertSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlUpsertSettings)(nil)).Elem()
}

func (i SqlUpsertSettingsArgs) ToSqlUpsertSettingsOutput() SqlUpsertSettingsOutput {
	return i.ToSqlUpsertSettingsOutputWithContext(context.Background())
}

func (i SqlUpsertSettingsArgs) ToSqlUpsertSettingsOutputWithContext(ctx context.Context) SqlUpsertSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlUpsertSettingsOutput)
}

func (i SqlUpsertSettingsArgs) ToSqlUpsertSettingsPtrOutput() SqlUpsertSettingsPtrOutput {
	return i.ToSqlUpsertSettingsPtrOutputWithContext(context.Background())
}

func (i SqlUpsertSettingsArgs) ToSqlUpsertSettingsPtrOutputWithContext(ctx context.Context) SqlUpsertSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlUpsertSettingsOutput).ToSqlUpsertSettingsPtrOutputWithContext(ctx)
}

// SqlUpsertSettingsPtrInput is an input type that accepts SqlUpsertSettingsArgs, SqlUpsertSettingsPtr and SqlUpsertSettingsPtrOutput values.
// You can construct a concrete instance of `SqlUpsertSettingsPtrInput` via:
//
//	        SqlUpsertSettingsArgs{...}
//
//	or:
//
//	        nil
type SqlUpsertSettingsPtrInput interface {
	pulumi.Input

	ToSqlUpsertSettingsPtrOutput() SqlUpsertSettingsPtrOutput
	ToSqlUpsertSettingsPtrOutputWithContext(context.Context) SqlUpsertSettingsPtrOutput
}

type sqlUpsertSettingsPtrType SqlUpsertSettingsArgs

func SqlUpsertSettingsPtr(v *SqlUpsertSettingsArgs) SqlUpsertSettingsPtrInput {
	return (*sqlUpsertSettingsPtrType)(v)
}

func (*sqlUpsertSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlUpsertSettings)(nil)).Elem()
}

func (i *sqlUpsertSettingsPtrType) ToSqlUpsertSettingsPtrOutput() SqlUpsertSettingsPtrOutput {
	return i.ToSqlUpsertSettingsPtrOutputWithContext(context.Background())
}

func (i *sqlUpsertSettingsPtrType) ToSqlUpsertSettingsPtrOutputWithContext(ctx context.Context) SqlUpsertSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlUpsertSettingsPtrOutput)
}

// Sql upsert option settings
type SqlUpsertSettingsOutput struct{ *pulumi.OutputState }

func (SqlUpsertSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlUpsertSettings)(nil)).Elem()
}

func (o SqlUpsertSettingsOutput) ToSqlUpsertSettingsOutput() SqlUpsertSettingsOutput {
	return o
}

func (o SqlUpsertSettingsOutput) ToSqlUpsertSettingsOutputWithContext(ctx context.Context) SqlUpsertSettingsOutput {
	return o
}

func (o SqlUpsertSettingsOutput) ToSqlUpsertSettingsPtrOutput() SqlUpsertSettingsPtrOutput {
	return o.ToSqlUpsertSettingsPtrOutputWithContext(context.Background())
}

func (o SqlUpsertSettingsOutput) ToSqlUpsertSettingsPtrOutputWithContext(ctx context.Context) SqlUpsertSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SqlUpsertSettings) *SqlUpsertSettings {
		return &v
	}).(SqlUpsertSettingsPtrOutput)
}

// Schema name for interim table. Type: string (or Expression with resultType string).
func (o SqlUpsertSettingsOutput) InterimSchemaName() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlUpsertSettings) interface{} { return v.InterimSchemaName }).(pulumi.AnyOutput)
}

// Key column names for unique row identification. Type: array of strings (or Expression with resultType array of strings).
func (o SqlUpsertSettingsOutput) Keys() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlUpsertSettings) interface{} { return v.Keys }).(pulumi.AnyOutput)
}

// Specifies whether to use temp db for upsert interim table. Type: boolean (or Expression with resultType boolean).
func (o SqlUpsertSettingsOutput) UseTempDB() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlUpsertSettings) interface{} { return v.UseTempDB }).(pulumi.AnyOutput)
}

type SqlUpsertSettingsPtrOutput struct{ *pulumi.OutputState }

func (SqlUpsertSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlUpsertSettings)(nil)).Elem()
}

func (o SqlUpsertSettingsPtrOutput) ToSqlUpsertSettingsPtrOutput() SqlUpsertSettingsPtrOutput {
	return o
}

func (o SqlUpsertSettingsPtrOutput) ToSqlUpsertSettingsPtrOutputWithContext(ctx context.Context) SqlUpsertSettingsPtrOutput {
	return o
}

func (o SqlUpsertSettingsPtrOutput) Elem() SqlUpsertSettingsOutput {
	return o.ApplyT(func(v *SqlUpsertSettings) SqlUpsertSettings {
		if v != nil {
			return *v
		}
		var ret SqlUpsertSettings
		return ret
	}).(SqlUpsertSettingsOutput)
}

// Schema name for interim table. Type: string (or Expression with resultType string).
func (o SqlUpsertSettingsPtrOutput) InterimSchemaName() pulumi.AnyOutput {
	return o.ApplyT(func(v *SqlUpsertSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.InterimSchemaName
	}).(pulumi.AnyOutput)
}

// Key column names for unique row identification. Type: array of strings (or Expression with resultType array of strings).
func (o SqlUpsertSettingsPtrOutput) Keys() pulumi.AnyOutput {
	return o.ApplyT(func(v *SqlUpsertSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.Keys
	}).(pulumi.AnyOutput)
}

// Specifies whether to use temp db for upsert interim table. Type: boolean (or Expression with resultType boolean).
func (o SqlUpsertSettingsPtrOutput) UseTempDB() pulumi.AnyOutput {
	return o.ApplyT(func(v *SqlUpsertSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.UseTempDB
	}).(pulumi.AnyOutput)
}

// Sql upsert option settings
type SqlUpsertSettingsResponse struct {
	// Schema name for interim table. Type: string (or Expression with resultType string).
	InterimSchemaName interface{} `pulumi:"interimSchemaName"`
	// Key column names for unique row identification. Type: array of strings (or Expression with resultType array of strings).
	Keys interface{} `pulumi:"keys"`
	// Specifies whether to use temp db for upsert interim table. Type: boolean (or Expression with resultType boolean).
	UseTempDB interface{} `pulumi:"useTempDB"`
}

// Sql upsert option settings
type SqlUpsertSettingsResponseOutput struct{ *pulumi.OutputState }

func (SqlUpsertSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlUpsertSettingsResponse)(nil)).Elem()
}

func (o SqlUpsertSettingsResponseOutput) ToSqlUpsertSettingsResponseOutput() SqlUpsertSettingsResponseOutput {
	return o
}

func (o SqlUpsertSettingsResponseOutput) ToSqlUpsertSettingsResponseOutputWithContext(ctx context.Context) SqlUpsertSettingsResponseOutput {
	return o
}

// Schema name for interim table. Type: string (or Expression with resultType string).
func (o SqlUpsertSettingsResponseOutput) InterimSchemaName() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlUpsertSettingsResponse) interface{} { return v.InterimSchemaName }).(pulumi.AnyOutput)
}

// Key column names for unique row identification. Type: array of strings (or Expression with resultType array of strings).
func (o SqlUpsertSettingsResponseOutput) Keys() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlUpsertSettingsResponse) interface{} { return v.Keys }).(pulumi.AnyOutput)
}

// Specifies whether to use temp db for upsert interim table. Type: boolean (or Expression with resultType boolean).
func (o SqlUpsertSettingsResponseOutput) UseTempDB() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlUpsertSettingsResponse) interface{} { return v.UseTempDB }).(pulumi.AnyOutput)
}

type SqlUpsertSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (SqlUpsertSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlUpsertSettingsResponse)(nil)).Elem()
}

func (o SqlUpsertSettingsResponsePtrOutput) ToSqlUpsertSettingsResponsePtrOutput() SqlUpsertSettingsResponsePtrOutput {
	return o
}

func (o SqlUpsertSettingsResponsePtrOutput) ToSqlUpsertSettingsResponsePtrOutputWithContext(ctx context.Context) SqlUpsertSettingsResponsePtrOutput {
	return o
}

func (o SqlUpsertSettingsResponsePtrOutput) Elem() SqlUpsertSettingsResponseOutput {
	return o.ApplyT(func(v *SqlUpsertSettingsResponse) SqlUpsertSettingsResponse {
		if v != nil {
			return *v
		}
		var ret SqlUpsertSettingsResponse
		return ret
	}).(SqlUpsertSettingsResponseOutput)
}

// Schema name for interim table. Type: string (or Expression with resultType string).
func (o SqlUpsertSettingsResponsePtrOutput) InterimSchemaName() pulumi.AnyOutput {
	return o.ApplyT(func(v *SqlUpsertSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.InterimSchemaName
	}).(pulumi.AnyOutput)
}

// Key column names for unique row identification. Type: array of strings (or Expression with resultType array of strings).
func (o SqlUpsertSettingsResponsePtrOutput) Keys() pulumi.AnyOutput {
	return o.ApplyT(func(v *SqlUpsertSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Keys
	}).(pulumi.AnyOutput)
}

// Specifies whether to use temp db for upsert interim table. Type: boolean (or Expression with resultType boolean).
func (o SqlUpsertSettingsResponsePtrOutput) UseTempDB() pulumi.AnyOutput {
	return o.ApplyT(func(v *SqlUpsertSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.UseTempDB
	}).(pulumi.AnyOutput)
}

// Square Service linked service.
type SquareLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client ID associated with your Square application.
	ClientId interface{} `pulumi:"clientId"`
	// The client secret associated with your Square application.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Properties used to connect to Square. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The URL of the Square instance. (i.e. mystore.mysquare.com)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The redirect URL assigned in the Square application dashboard. (i.e. http://localhost:2500)
	RedirectUri interface{} `pulumi:"redirectUri"`
	// Type of linked service.
	// Expected value is 'Square'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// SquareLinkedServiceInput is an input type that accepts SquareLinkedServiceArgs and SquareLinkedServiceOutput values.
// You can construct a concrete instance of `SquareLinkedServiceInput` via:
//
//	SquareLinkedServiceArgs{...}
type SquareLinkedServiceInput interface {
	pulumi.Input

	ToSquareLinkedServiceOutput() SquareLinkedServiceOutput
	ToSquareLinkedServiceOutputWithContext(context.Context) SquareLinkedServiceOutput
}

// Square Service linked service.
type SquareLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The client ID associated with your Square application.
	ClientId pulumi.Input `pulumi:"clientId"`
	// The client secret associated with your Square application.
	ClientSecret pulumi.Input `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Properties used to connect to Square. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties pulumi.Input `pulumi:"connectionProperties"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// The URL of the Square instance. (i.e. mystore.mysquare.com)
	Host pulumi.Input `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The redirect URL assigned in the Square application dashboard. (i.e. http://localhost:2500)
	RedirectUri pulumi.Input `pulumi:"redirectUri"`
	// Type of linked service.
	// Expected value is 'Square'.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
}

func (SquareLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SquareLinkedService)(nil)).Elem()
}

func (i SquareLinkedServiceArgs) ToSquareLinkedServiceOutput() SquareLinkedServiceOutput {
	return i.ToSquareLinkedServiceOutputWithContext(context.Background())
}

func (i SquareLinkedServiceArgs) ToSquareLinkedServiceOutputWithContext(ctx context.Context) SquareLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SquareLinkedServiceOutput)
}

// Square Service linked service.
type SquareLinkedServiceOutput struct{ *pulumi.OutputState }

func (SquareLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SquareLinkedService)(nil)).Elem()
}

func (o SquareLinkedServiceOutput) ToSquareLinkedServiceOutput() SquareLinkedServiceOutput {
	return o
}

func (o SquareLinkedServiceOutput) ToSquareLinkedServiceOutputWithContext(ctx context.Context) SquareLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SquareLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SquareLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The client ID associated with your Square application.
func (o SquareLinkedServiceOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareLinkedService) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret associated with your Square application.
func (o SquareLinkedServiceOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareLinkedService) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o SquareLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v SquareLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Properties used to connect to Square. It is mutually exclusive with any other properties in the linked service. Type: object.
func (o SquareLinkedServiceOutput) ConnectionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareLinkedService) interface{} { return v.ConnectionProperties }).(pulumi.AnyOutput)
}

// Linked service description.
func (o SquareLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SquareLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o SquareLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SquareLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The URL of the Square instance. (i.e. mystore.mysquare.com)
func (o SquareLinkedServiceOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareLinkedService) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SquareLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SquareLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The redirect URL assigned in the Square application dashboard. (i.e. http://localhost:2500)
func (o SquareLinkedServiceOutput) RedirectUri() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareLinkedService) interface{} { return v.RedirectUri }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Square'.
func (o SquareLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SquareLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o SquareLinkedServiceOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareLinkedService) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o SquareLinkedServiceOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareLinkedService) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o SquareLinkedServiceOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareLinkedService) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// Square Service linked service.
type SquareLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client ID associated with your Square application.
	ClientId interface{} `pulumi:"clientId"`
	// The client secret associated with your Square application.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Properties used to connect to Square. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The URL of the Square instance. (i.e. mystore.mysquare.com)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The redirect URL assigned in the Square application dashboard. (i.e. http://localhost:2500)
	RedirectUri interface{} `pulumi:"redirectUri"`
	// Type of linked service.
	// Expected value is 'Square'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Square Service linked service.
type SquareLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SquareLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SquareLinkedServiceResponse)(nil)).Elem()
}

func (o SquareLinkedServiceResponseOutput) ToSquareLinkedServiceResponseOutput() SquareLinkedServiceResponseOutput {
	return o
}

func (o SquareLinkedServiceResponseOutput) ToSquareLinkedServiceResponseOutputWithContext(ctx context.Context) SquareLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SquareLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SquareLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The client ID associated with your Square application.
func (o SquareLinkedServiceResponseOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareLinkedServiceResponse) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret associated with your Square application.
func (o SquareLinkedServiceResponseOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareLinkedServiceResponse) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o SquareLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SquareLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Properties used to connect to Square. It is mutually exclusive with any other properties in the linked service. Type: object.
func (o SquareLinkedServiceResponseOutput) ConnectionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareLinkedServiceResponse) interface{} { return v.ConnectionProperties }).(pulumi.AnyOutput)
}

// Linked service description.
func (o SquareLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SquareLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o SquareLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SquareLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The URL of the Square instance. (i.e. mystore.mysquare.com)
func (o SquareLinkedServiceResponseOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareLinkedServiceResponse) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o SquareLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SquareLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The redirect URL assigned in the Square application dashboard. (i.e. http://localhost:2500)
func (o SquareLinkedServiceResponseOutput) RedirectUri() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareLinkedServiceResponse) interface{} { return v.RedirectUri }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Square'.
func (o SquareLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SquareLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o SquareLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareLinkedServiceResponse) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o SquareLinkedServiceResponseOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareLinkedServiceResponse) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o SquareLinkedServiceResponseOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareLinkedServiceResponse) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// Square Service dataset.
type SquareObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'SquareObject'.
	Type string `pulumi:"type"`
}

// SquareObjectDatasetInput is an input type that accepts SquareObjectDatasetArgs and SquareObjectDatasetOutput values.
// You can construct a concrete instance of `SquareObjectDatasetInput` via:
//
//	SquareObjectDatasetArgs{...}
type SquareObjectDatasetInput interface {
	pulumi.Input

	ToSquareObjectDatasetOutput() SquareObjectDatasetOutput
	ToSquareObjectDatasetOutputWithContext(context.Context) SquareObjectDatasetOutput
}

// Square Service dataset.
type SquareObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'SquareObject'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SquareObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SquareObjectDataset)(nil)).Elem()
}

func (i SquareObjectDatasetArgs) ToSquareObjectDatasetOutput() SquareObjectDatasetOutput {
	return i.ToSquareObjectDatasetOutputWithContext(context.Background())
}

func (i SquareObjectDatasetArgs) ToSquareObjectDatasetOutputWithContext(ctx context.Context) SquareObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SquareObjectDatasetOutput)
}

// Square Service dataset.
type SquareObjectDatasetOutput struct{ *pulumi.OutputState }

func (SquareObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SquareObjectDataset)(nil)).Elem()
}

func (o SquareObjectDatasetOutput) ToSquareObjectDatasetOutput() SquareObjectDatasetOutput {
	return o
}

func (o SquareObjectDatasetOutput) ToSquareObjectDatasetOutputWithContext(ctx context.Context) SquareObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SquareObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SquareObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SquareObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SquareObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SquareObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v SquareObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o SquareObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v SquareObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o SquareObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SquareObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SquareObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SquareObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o SquareObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'SquareObject'.
func (o SquareObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SquareObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Square Service dataset.
type SquareObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'SquareObject'.
	Type string `pulumi:"type"`
}

// Square Service dataset.
type SquareObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (SquareObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SquareObjectDatasetResponse)(nil)).Elem()
}

func (o SquareObjectDatasetResponseOutput) ToSquareObjectDatasetResponseOutput() SquareObjectDatasetResponseOutput {
	return o
}

func (o SquareObjectDatasetResponseOutput) ToSquareObjectDatasetResponseOutputWithContext(ctx context.Context) SquareObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SquareObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SquareObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SquareObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SquareObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SquareObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v SquareObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o SquareObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v SquareObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o SquareObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SquareObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SquareObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SquareObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o SquareObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'SquareObject'.
func (o SquareObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SquareObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Square Service source.
type SquareSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SquareSource'.
	Type string `pulumi:"type"`
}

// SquareSourceInput is an input type that accepts SquareSourceArgs and SquareSourceOutput values.
// You can construct a concrete instance of `SquareSourceInput` via:
//
//	SquareSourceArgs{...}
type SquareSourceInput interface {
	pulumi.Input

	ToSquareSourceOutput() SquareSourceOutput
	ToSquareSourceOutputWithContext(context.Context) SquareSourceOutput
}

// A copy activity Square Service source.
type SquareSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SquareSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SquareSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SquareSource)(nil)).Elem()
}

func (i SquareSourceArgs) ToSquareSourceOutput() SquareSourceOutput {
	return i.ToSquareSourceOutputWithContext(context.Background())
}

func (i SquareSourceArgs) ToSquareSourceOutputWithContext(ctx context.Context) SquareSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SquareSourceOutput)
}

// A copy activity Square Service source.
type SquareSourceOutput struct{ *pulumi.OutputState }

func (SquareSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SquareSource)(nil)).Elem()
}

func (o SquareSourceOutput) ToSquareSourceOutput() SquareSourceOutput {
	return o
}

func (o SquareSourceOutput) ToSquareSourceOutputWithContext(ctx context.Context) SquareSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o SquareSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SquareSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SquareSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o SquareSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SquareSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o SquareSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SquareSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'SquareSource'.
func (o SquareSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SquareSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Square Service source.
type SquareSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SquareSource'.
	Type string `pulumi:"type"`
}

// A copy activity Square Service source.
type SquareSourceResponseOutput struct{ *pulumi.OutputState }

func (SquareSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SquareSourceResponse)(nil)).Elem()
}

func (o SquareSourceResponseOutput) ToSquareSourceResponseOutput() SquareSourceResponseOutput {
	return o
}

func (o SquareSourceResponseOutput) ToSquareSourceResponseOutputWithContext(ctx context.Context) SquareSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o SquareSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SquareSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SquareSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o SquareSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SquareSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o SquareSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SquareSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SquareSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'SquareSource'.
func (o SquareSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SquareSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Ssis environment reference.
type SsisEnvironmentReferenceResponse struct {
	// Environment folder name.
	EnvironmentFolderName *string `pulumi:"environmentFolderName"`
	// Environment name.
	EnvironmentName *string `pulumi:"environmentName"`
	// Environment reference id.
	Id *float64 `pulumi:"id"`
	// Reference type
	ReferenceType *string `pulumi:"referenceType"`
}

// Ssis environment reference.
type SsisEnvironmentReferenceResponseOutput struct{ *pulumi.OutputState }

func (SsisEnvironmentReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SsisEnvironmentReferenceResponse)(nil)).Elem()
}

func (o SsisEnvironmentReferenceResponseOutput) ToSsisEnvironmentReferenceResponseOutput() SsisEnvironmentReferenceResponseOutput {
	return o
}

func (o SsisEnvironmentReferenceResponseOutput) ToSsisEnvironmentReferenceResponseOutputWithContext(ctx context.Context) SsisEnvironmentReferenceResponseOutput {
	return o
}

// Environment folder name.
func (o SsisEnvironmentReferenceResponseOutput) EnvironmentFolderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisEnvironmentReferenceResponse) *string { return v.EnvironmentFolderName }).(pulumi.StringPtrOutput)
}

// Environment name.
func (o SsisEnvironmentReferenceResponseOutput) EnvironmentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisEnvironmentReferenceResponse) *string { return v.EnvironmentName }).(pulumi.StringPtrOutput)
}

// Environment reference id.
func (o SsisEnvironmentReferenceResponseOutput) Id() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SsisEnvironmentReferenceResponse) *float64 { return v.Id }).(pulumi.Float64PtrOutput)
}

// Reference type
func (o SsisEnvironmentReferenceResponseOutput) ReferenceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisEnvironmentReferenceResponse) *string { return v.ReferenceType }).(pulumi.StringPtrOutput)
}

type SsisEnvironmentReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (SsisEnvironmentReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SsisEnvironmentReferenceResponse)(nil)).Elem()
}

func (o SsisEnvironmentReferenceResponseArrayOutput) ToSsisEnvironmentReferenceResponseArrayOutput() SsisEnvironmentReferenceResponseArrayOutput {
	return o
}

func (o SsisEnvironmentReferenceResponseArrayOutput) ToSsisEnvironmentReferenceResponseArrayOutputWithContext(ctx context.Context) SsisEnvironmentReferenceResponseArrayOutput {
	return o
}

func (o SsisEnvironmentReferenceResponseArrayOutput) Index(i pulumi.IntInput) SsisEnvironmentReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SsisEnvironmentReferenceResponse {
		return vs[0].([]SsisEnvironmentReferenceResponse)[vs[1].(int)]
	}).(SsisEnvironmentReferenceResponseOutput)
}

// Ssis environment.
type SsisEnvironmentResponse struct {
	// Metadata description.
	Description *string `pulumi:"description"`
	// Folder id which contains environment.
	FolderId *float64 `pulumi:"folderId"`
	// Metadata id.
	Id *float64 `pulumi:"id"`
	// Metadata name.
	Name *string `pulumi:"name"`
	// The type of SSIS object metadata.
	// Expected value is 'Environment'.
	Type string `pulumi:"type"`
	// Variable in environment
	Variables []SsisVariableResponse `pulumi:"variables"`
}

// Ssis environment.
type SsisEnvironmentResponseOutput struct{ *pulumi.OutputState }

func (SsisEnvironmentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SsisEnvironmentResponse)(nil)).Elem()
}

func (o SsisEnvironmentResponseOutput) ToSsisEnvironmentResponseOutput() SsisEnvironmentResponseOutput {
	return o
}

func (o SsisEnvironmentResponseOutput) ToSsisEnvironmentResponseOutputWithContext(ctx context.Context) SsisEnvironmentResponseOutput {
	return o
}

// Metadata description.
func (o SsisEnvironmentResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisEnvironmentResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Folder id which contains environment.
func (o SsisEnvironmentResponseOutput) FolderId() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SsisEnvironmentResponse) *float64 { return v.FolderId }).(pulumi.Float64PtrOutput)
}

// Metadata id.
func (o SsisEnvironmentResponseOutput) Id() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SsisEnvironmentResponse) *float64 { return v.Id }).(pulumi.Float64PtrOutput)
}

// Metadata name.
func (o SsisEnvironmentResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisEnvironmentResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The type of SSIS object metadata.
// Expected value is 'Environment'.
func (o SsisEnvironmentResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SsisEnvironmentResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Variable in environment
func (o SsisEnvironmentResponseOutput) Variables() SsisVariableResponseArrayOutput {
	return o.ApplyT(func(v SsisEnvironmentResponse) []SsisVariableResponse { return v.Variables }).(SsisVariableResponseArrayOutput)
}

// Ssis folder.
type SsisFolderResponse struct {
	// Metadata description.
	Description *string `pulumi:"description"`
	// Metadata id.
	Id *float64 `pulumi:"id"`
	// Metadata name.
	Name *string `pulumi:"name"`
	// The type of SSIS object metadata.
	// Expected value is 'Folder'.
	Type string `pulumi:"type"`
}

// Ssis folder.
type SsisFolderResponseOutput struct{ *pulumi.OutputState }

func (SsisFolderResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SsisFolderResponse)(nil)).Elem()
}

func (o SsisFolderResponseOutput) ToSsisFolderResponseOutput() SsisFolderResponseOutput {
	return o
}

func (o SsisFolderResponseOutput) ToSsisFolderResponseOutputWithContext(ctx context.Context) SsisFolderResponseOutput {
	return o
}

// Metadata description.
func (o SsisFolderResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisFolderResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Metadata id.
func (o SsisFolderResponseOutput) Id() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SsisFolderResponse) *float64 { return v.Id }).(pulumi.Float64PtrOutput)
}

// Metadata name.
func (o SsisFolderResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisFolderResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The type of SSIS object metadata.
// Expected value is 'Folder'.
func (o SsisFolderResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SsisFolderResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Ssis Package.
type SsisPackageResponse struct {
	// Metadata description.
	Description *string `pulumi:"description"`
	// Folder id which contains package.
	FolderId *float64 `pulumi:"folderId"`
	// Metadata id.
	Id *float64 `pulumi:"id"`
	// Metadata name.
	Name *string `pulumi:"name"`
	// Parameters in package
	Parameters []SsisParameterResponse `pulumi:"parameters"`
	// Project id which contains package.
	ProjectId *float64 `pulumi:"projectId"`
	// Project version which contains package.
	ProjectVersion *float64 `pulumi:"projectVersion"`
	// The type of SSIS object metadata.
	// Expected value is 'Package'.
	Type string `pulumi:"type"`
}

// Ssis Package.
type SsisPackageResponseOutput struct{ *pulumi.OutputState }

func (SsisPackageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SsisPackageResponse)(nil)).Elem()
}

func (o SsisPackageResponseOutput) ToSsisPackageResponseOutput() SsisPackageResponseOutput {
	return o
}

func (o SsisPackageResponseOutput) ToSsisPackageResponseOutputWithContext(ctx context.Context) SsisPackageResponseOutput {
	return o
}

// Metadata description.
func (o SsisPackageResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisPackageResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Folder id which contains package.
func (o SsisPackageResponseOutput) FolderId() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SsisPackageResponse) *float64 { return v.FolderId }).(pulumi.Float64PtrOutput)
}

// Metadata id.
func (o SsisPackageResponseOutput) Id() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SsisPackageResponse) *float64 { return v.Id }).(pulumi.Float64PtrOutput)
}

// Metadata name.
func (o SsisPackageResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisPackageResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Parameters in package
func (o SsisPackageResponseOutput) Parameters() SsisParameterResponseArrayOutput {
	return o.ApplyT(func(v SsisPackageResponse) []SsisParameterResponse { return v.Parameters }).(SsisParameterResponseArrayOutput)
}

// Project id which contains package.
func (o SsisPackageResponseOutput) ProjectId() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SsisPackageResponse) *float64 { return v.ProjectId }).(pulumi.Float64PtrOutput)
}

// Project version which contains package.
func (o SsisPackageResponseOutput) ProjectVersion() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SsisPackageResponse) *float64 { return v.ProjectVersion }).(pulumi.Float64PtrOutput)
}

// The type of SSIS object metadata.
// Expected value is 'Package'.
func (o SsisPackageResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SsisPackageResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Ssis parameter.
type SsisParameterResponse struct {
	// Parameter type.
	DataType *string `pulumi:"dataType"`
	// Default value of parameter.
	DefaultValue *string `pulumi:"defaultValue"`
	// Parameter description.
	Description *string `pulumi:"description"`
	// Design default value of parameter.
	DesignDefaultValue *string `pulumi:"designDefaultValue"`
	// Parameter id.
	Id *float64 `pulumi:"id"`
	// Parameter name.
	Name *string `pulumi:"name"`
	// Whether parameter is required.
	Required *bool `pulumi:"required"`
	// Whether parameter is sensitive.
	Sensitive *bool `pulumi:"sensitive"`
	// Default sensitive value of parameter.
	SensitiveDefaultValue *string `pulumi:"sensitiveDefaultValue"`
	// Parameter value set.
	ValueSet *bool `pulumi:"valueSet"`
	// Parameter value type.
	ValueType *string `pulumi:"valueType"`
	// Parameter reference variable.
	Variable *string `pulumi:"variable"`
}

// Ssis parameter.
type SsisParameterResponseOutput struct{ *pulumi.OutputState }

func (SsisParameterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SsisParameterResponse)(nil)).Elem()
}

func (o SsisParameterResponseOutput) ToSsisParameterResponseOutput() SsisParameterResponseOutput {
	return o
}

func (o SsisParameterResponseOutput) ToSsisParameterResponseOutputWithContext(ctx context.Context) SsisParameterResponseOutput {
	return o
}

// Parameter type.
func (o SsisParameterResponseOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisParameterResponse) *string { return v.DataType }).(pulumi.StringPtrOutput)
}

// Default value of parameter.
func (o SsisParameterResponseOutput) DefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisParameterResponse) *string { return v.DefaultValue }).(pulumi.StringPtrOutput)
}

// Parameter description.
func (o SsisParameterResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisParameterResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Design default value of parameter.
func (o SsisParameterResponseOutput) DesignDefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisParameterResponse) *string { return v.DesignDefaultValue }).(pulumi.StringPtrOutput)
}

// Parameter id.
func (o SsisParameterResponseOutput) Id() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SsisParameterResponse) *float64 { return v.Id }).(pulumi.Float64PtrOutput)
}

// Parameter name.
func (o SsisParameterResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisParameterResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Whether parameter is required.
func (o SsisParameterResponseOutput) Required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsisParameterResponse) *bool { return v.Required }).(pulumi.BoolPtrOutput)
}

// Whether parameter is sensitive.
func (o SsisParameterResponseOutput) Sensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsisParameterResponse) *bool { return v.Sensitive }).(pulumi.BoolPtrOutput)
}

// Default sensitive value of parameter.
func (o SsisParameterResponseOutput) SensitiveDefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisParameterResponse) *string { return v.SensitiveDefaultValue }).(pulumi.StringPtrOutput)
}

// Parameter value set.
func (o SsisParameterResponseOutput) ValueSet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsisParameterResponse) *bool { return v.ValueSet }).(pulumi.BoolPtrOutput)
}

// Parameter value type.
func (o SsisParameterResponseOutput) ValueType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisParameterResponse) *string { return v.ValueType }).(pulumi.StringPtrOutput)
}

// Parameter reference variable.
func (o SsisParameterResponseOutput) Variable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisParameterResponse) *string { return v.Variable }).(pulumi.StringPtrOutput)
}

type SsisParameterResponseArrayOutput struct{ *pulumi.OutputState }

func (SsisParameterResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SsisParameterResponse)(nil)).Elem()
}

func (o SsisParameterResponseArrayOutput) ToSsisParameterResponseArrayOutput() SsisParameterResponseArrayOutput {
	return o
}

func (o SsisParameterResponseArrayOutput) ToSsisParameterResponseArrayOutputWithContext(ctx context.Context) SsisParameterResponseArrayOutput {
	return o
}

func (o SsisParameterResponseArrayOutput) Index(i pulumi.IntInput) SsisParameterResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SsisParameterResponse {
		return vs[0].([]SsisParameterResponse)[vs[1].(int)]
	}).(SsisParameterResponseOutput)
}

// Ssis project.
type SsisProjectResponse struct {
	// Metadata description.
	Description *string `pulumi:"description"`
	// Environment reference in project
	EnvironmentRefs []SsisEnvironmentReferenceResponse `pulumi:"environmentRefs"`
	// Folder id which contains project.
	FolderId *float64 `pulumi:"folderId"`
	// Metadata id.
	Id *float64 `pulumi:"id"`
	// Metadata name.
	Name *string `pulumi:"name"`
	// Parameters in project
	Parameters []SsisParameterResponse `pulumi:"parameters"`
	// The type of SSIS object metadata.
	// Expected value is 'Project'.
	Type string `pulumi:"type"`
	// Project version.
	Version *float64 `pulumi:"version"`
}

// Ssis project.
type SsisProjectResponseOutput struct{ *pulumi.OutputState }

func (SsisProjectResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SsisProjectResponse)(nil)).Elem()
}

func (o SsisProjectResponseOutput) ToSsisProjectResponseOutput() SsisProjectResponseOutput {
	return o
}

func (o SsisProjectResponseOutput) ToSsisProjectResponseOutputWithContext(ctx context.Context) SsisProjectResponseOutput {
	return o
}

// Metadata description.
func (o SsisProjectResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisProjectResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Environment reference in project
func (o SsisProjectResponseOutput) EnvironmentRefs() SsisEnvironmentReferenceResponseArrayOutput {
	return o.ApplyT(func(v SsisProjectResponse) []SsisEnvironmentReferenceResponse { return v.EnvironmentRefs }).(SsisEnvironmentReferenceResponseArrayOutput)
}

// Folder id which contains project.
func (o SsisProjectResponseOutput) FolderId() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SsisProjectResponse) *float64 { return v.FolderId }).(pulumi.Float64PtrOutput)
}

// Metadata id.
func (o SsisProjectResponseOutput) Id() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SsisProjectResponse) *float64 { return v.Id }).(pulumi.Float64PtrOutput)
}

// Metadata name.
func (o SsisProjectResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisProjectResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Parameters in project
func (o SsisProjectResponseOutput) Parameters() SsisParameterResponseArrayOutput {
	return o.ApplyT(func(v SsisProjectResponse) []SsisParameterResponse { return v.Parameters }).(SsisParameterResponseArrayOutput)
}

// The type of SSIS object metadata.
// Expected value is 'Project'.
func (o SsisProjectResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SsisProjectResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Project version.
func (o SsisProjectResponseOutput) Version() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SsisProjectResponse) *float64 { return v.Version }).(pulumi.Float64PtrOutput)
}

// Ssis variable.
type SsisVariableResponse struct {
	// Variable type.
	DataType *string `pulumi:"dataType"`
	// Variable description.
	Description *string `pulumi:"description"`
	// Variable id.
	Id *float64 `pulumi:"id"`
	// Variable name.
	Name *string `pulumi:"name"`
	// Whether variable is sensitive.
	Sensitive *bool `pulumi:"sensitive"`
	// Variable sensitive value.
	SensitiveValue *string `pulumi:"sensitiveValue"`
	// Variable value.
	Value *string `pulumi:"value"`
}

// Ssis variable.
type SsisVariableResponseOutput struct{ *pulumi.OutputState }

func (SsisVariableResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SsisVariableResponse)(nil)).Elem()
}

func (o SsisVariableResponseOutput) ToSsisVariableResponseOutput() SsisVariableResponseOutput {
	return o
}

func (o SsisVariableResponseOutput) ToSsisVariableResponseOutputWithContext(ctx context.Context) SsisVariableResponseOutput {
	return o
}

// Variable type.
func (o SsisVariableResponseOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisVariableResponse) *string { return v.DataType }).(pulumi.StringPtrOutput)
}

// Variable description.
func (o SsisVariableResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisVariableResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Variable id.
func (o SsisVariableResponseOutput) Id() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SsisVariableResponse) *float64 { return v.Id }).(pulumi.Float64PtrOutput)
}

// Variable name.
func (o SsisVariableResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisVariableResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Whether variable is sensitive.
func (o SsisVariableResponseOutput) Sensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsisVariableResponse) *bool { return v.Sensitive }).(pulumi.BoolPtrOutput)
}

// Variable sensitive value.
func (o SsisVariableResponseOutput) SensitiveValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisVariableResponse) *string { return v.SensitiveValue }).(pulumi.StringPtrOutput)
}

// Variable value.
func (o SsisVariableResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsisVariableResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type SsisVariableResponseArrayOutput struct{ *pulumi.OutputState }

func (SsisVariableResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SsisVariableResponse)(nil)).Elem()
}

func (o SsisVariableResponseArrayOutput) ToSsisVariableResponseArrayOutput() SsisVariableResponseArrayOutput {
	return o
}

func (o SsisVariableResponseArrayOutput) ToSsisVariableResponseArrayOutputWithContext(ctx context.Context) SsisVariableResponseArrayOutput {
	return o
}

func (o SsisVariableResponseArrayOutput) Index(i pulumi.IntInput) SsisVariableResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SsisVariableResponse {
		return vs[0].([]SsisVariableResponse)[vs[1].(int)]
	}).(SsisVariableResponseOutput)
}

// Staging settings.
type StagingSettings struct {
	// Specifies whether to use compression when copying data via an interim staging. Default value is false. Type: boolean (or Expression with resultType boolean).
	EnableCompression interface{} `pulumi:"enableCompression"`
	// Staging linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The path to storage for storing the interim data. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
}

// StagingSettingsInput is an input type that accepts StagingSettingsArgs and StagingSettingsOutput values.
// You can construct a concrete instance of `StagingSettingsInput` via:
//
//	StagingSettingsArgs{...}
type StagingSettingsInput interface {
	pulumi.Input

	ToStagingSettingsOutput() StagingSettingsOutput
	ToStagingSettingsOutputWithContext(context.Context) StagingSettingsOutput
}

// Staging settings.
type StagingSettingsArgs struct {
	// Specifies whether to use compression when copying data via an interim staging. Default value is false. Type: boolean (or Expression with resultType boolean).
	EnableCompression pulumi.Input `pulumi:"enableCompression"`
	// Staging linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// The path to storage for storing the interim data. Type: string (or Expression with resultType string).
	Path pulumi.Input `pulumi:"path"`
}

func (StagingSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StagingSettings)(nil)).Elem()
}

func (i StagingSettingsArgs) ToStagingSettingsOutput() StagingSettingsOutput {
	return i.ToStagingSettingsOutputWithContext(context.Background())
}

func (i StagingSettingsArgs) ToStagingSettingsOutputWithContext(ctx context.Context) StagingSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StagingSettingsOutput)
}

func (i StagingSettingsArgs) ToStagingSettingsPtrOutput() StagingSettingsPtrOutput {
	return i.ToStagingSettingsPtrOutputWithContext(context.Background())
}

func (i StagingSettingsArgs) ToStagingSettingsPtrOutputWithContext(ctx context.Context) StagingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StagingSettingsOutput).ToStagingSettingsPtrOutputWithContext(ctx)
}

// StagingSettingsPtrInput is an input type that accepts StagingSettingsArgs, StagingSettingsPtr and StagingSettingsPtrOutput values.
// You can construct a concrete instance of `StagingSettingsPtrInput` via:
//
//	        StagingSettingsArgs{...}
//
//	or:
//
//	        nil
type StagingSettingsPtrInput interface {
	pulumi.Input

	ToStagingSettingsPtrOutput() StagingSettingsPtrOutput
	ToStagingSettingsPtrOutputWithContext(context.Context) StagingSettingsPtrOutput
}

type stagingSettingsPtrType StagingSettingsArgs

func StagingSettingsPtr(v *StagingSettingsArgs) StagingSettingsPtrInput {
	return (*stagingSettingsPtrType)(v)
}

func (*stagingSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StagingSettings)(nil)).Elem()
}

func (i *stagingSettingsPtrType) ToStagingSettingsPtrOutput() StagingSettingsPtrOutput {
	return i.ToStagingSettingsPtrOutputWithContext(context.Background())
}

func (i *stagingSettingsPtrType) ToStagingSettingsPtrOutputWithContext(ctx context.Context) StagingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StagingSettingsPtrOutput)
}

// Staging settings.
type StagingSettingsOutput struct{ *pulumi.OutputState }

func (StagingSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StagingSettings)(nil)).Elem()
}

func (o StagingSettingsOutput) ToStagingSettingsOutput() StagingSettingsOutput {
	return o
}

func (o StagingSettingsOutput) ToStagingSettingsOutputWithContext(ctx context.Context) StagingSettingsOutput {
	return o
}

func (o StagingSettingsOutput) ToStagingSettingsPtrOutput() StagingSettingsPtrOutput {
	return o.ToStagingSettingsPtrOutputWithContext(context.Background())
}

func (o StagingSettingsOutput) ToStagingSettingsPtrOutputWithContext(ctx context.Context) StagingSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StagingSettings) *StagingSettings {
		return &v
	}).(StagingSettingsPtrOutput)
}

// Specifies whether to use compression when copying data via an interim staging. Default value is false. Type: boolean (or Expression with resultType boolean).
func (o StagingSettingsOutput) EnableCompression() pulumi.AnyOutput {
	return o.ApplyT(func(v StagingSettings) interface{} { return v.EnableCompression }).(pulumi.AnyOutput)
}

// Staging linked service reference.
func (o StagingSettingsOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v StagingSettings) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// The path to storage for storing the interim data. Type: string (or Expression with resultType string).
func (o StagingSettingsOutput) Path() pulumi.AnyOutput {
	return o.ApplyT(func(v StagingSettings) interface{} { return v.Path }).(pulumi.AnyOutput)
}

type StagingSettingsPtrOutput struct{ *pulumi.OutputState }

func (StagingSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StagingSettings)(nil)).Elem()
}

func (o StagingSettingsPtrOutput) ToStagingSettingsPtrOutput() StagingSettingsPtrOutput {
	return o
}

func (o StagingSettingsPtrOutput) ToStagingSettingsPtrOutputWithContext(ctx context.Context) StagingSettingsPtrOutput {
	return o
}

func (o StagingSettingsPtrOutput) Elem() StagingSettingsOutput {
	return o.ApplyT(func(v *StagingSettings) StagingSettings {
		if v != nil {
			return *v
		}
		var ret StagingSettings
		return ret
	}).(StagingSettingsOutput)
}

// Specifies whether to use compression when copying data via an interim staging. Default value is false. Type: boolean (or Expression with resultType boolean).
func (o StagingSettingsPtrOutput) EnableCompression() pulumi.AnyOutput {
	return o.ApplyT(func(v *StagingSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.EnableCompression
	}).(pulumi.AnyOutput)
}

// Staging linked service reference.
func (o StagingSettingsPtrOutput) LinkedServiceName() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v *StagingSettings) *LinkedServiceReference {
		if v == nil {
			return nil
		}
		return &v.LinkedServiceName
	}).(LinkedServiceReferencePtrOutput)
}

// The path to storage for storing the interim data. Type: string (or Expression with resultType string).
func (o StagingSettingsPtrOutput) Path() pulumi.AnyOutput {
	return o.ApplyT(func(v *StagingSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.AnyOutput)
}

// Staging settings.
type StagingSettingsResponse struct {
	// Specifies whether to use compression when copying data via an interim staging. Default value is false. Type: boolean (or Expression with resultType boolean).
	EnableCompression interface{} `pulumi:"enableCompression"`
	// Staging linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The path to storage for storing the interim data. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
}

// Staging settings.
type StagingSettingsResponseOutput struct{ *pulumi.OutputState }

func (StagingSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StagingSettingsResponse)(nil)).Elem()
}

func (o StagingSettingsResponseOutput) ToStagingSettingsResponseOutput() StagingSettingsResponseOutput {
	return o
}

func (o StagingSettingsResponseOutput) ToStagingSettingsResponseOutputWithContext(ctx context.Context) StagingSettingsResponseOutput {
	return o
}

// Specifies whether to use compression when copying data via an interim staging. Default value is false. Type: boolean (or Expression with resultType boolean).
func (o StagingSettingsResponseOutput) EnableCompression() pulumi.AnyOutput {
	return o.ApplyT(func(v StagingSettingsResponse) interface{} { return v.EnableCompression }).(pulumi.AnyOutput)
}

// Staging linked service reference.
func (o StagingSettingsResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v StagingSettingsResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// The path to storage for storing the interim data. Type: string (or Expression with resultType string).
func (o StagingSettingsResponseOutput) Path() pulumi.AnyOutput {
	return o.ApplyT(func(v StagingSettingsResponse) interface{} { return v.Path }).(pulumi.AnyOutput)
}

type StagingSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (StagingSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StagingSettingsResponse)(nil)).Elem()
}

func (o StagingSettingsResponsePtrOutput) ToStagingSettingsResponsePtrOutput() StagingSettingsResponsePtrOutput {
	return o
}

func (o StagingSettingsResponsePtrOutput) ToStagingSettingsResponsePtrOutputWithContext(ctx context.Context) StagingSettingsResponsePtrOutput {
	return o
}

func (o StagingSettingsResponsePtrOutput) Elem() StagingSettingsResponseOutput {
	return o.ApplyT(func(v *StagingSettingsResponse) StagingSettingsResponse {
		if v != nil {
			return *v
		}
		var ret StagingSettingsResponse
		return ret
	}).(StagingSettingsResponseOutput)
}

// Specifies whether to use compression when copying data via an interim staging. Default value is false. Type: boolean (or Expression with resultType boolean).
func (o StagingSettingsResponsePtrOutput) EnableCompression() pulumi.AnyOutput {
	return o.ApplyT(func(v *StagingSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.EnableCompression
	}).(pulumi.AnyOutput)
}

// Staging linked service reference.
func (o StagingSettingsResponsePtrOutput) LinkedServiceName() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v *StagingSettingsResponse) *LinkedServiceReferenceResponse {
		if v == nil {
			return nil
		}
		return &v.LinkedServiceName
	}).(LinkedServiceReferenceResponsePtrOutput)
}

// The path to storage for storing the interim data. Type: string (or Expression with resultType string).
func (o StagingSettingsResponsePtrOutput) Path() pulumi.AnyOutput {
	return o.ApplyT(func(v *StagingSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.AnyOutput)
}

// This activity evaluates an expression and executes activities under the cases property that correspond to the expression evaluation expected in the equals property.
type SwitchActivity struct {
	// List of cases that correspond to expected values of the 'on' property. This is an optional property and if not provided, the activity will execute activities provided in defaultActivities.
	Cases []SwitchCase `pulumi:"cases"`
	// List of activities to execute if no case condition is satisfied. This is an optional property and if not provided, the activity will exit without any action.
	DefaultActivities []interface{} `pulumi:"defaultActivities"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Activity name.
	Name string `pulumi:"name"`
	// An expression that would evaluate to a string or integer. This is used to determine the block of activities in cases that will be executed.
	On Expression `pulumi:"on"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'Switch'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// SwitchActivityInput is an input type that accepts SwitchActivityArgs and SwitchActivityOutput values.
// You can construct a concrete instance of `SwitchActivityInput` via:
//
//	SwitchActivityArgs{...}
type SwitchActivityInput interface {
	pulumi.Input

	ToSwitchActivityOutput() SwitchActivityOutput
	ToSwitchActivityOutputWithContext(context.Context) SwitchActivityOutput
}

// This activity evaluates an expression and executes activities under the cases property that correspond to the expression evaluation expected in the equals property.
type SwitchActivityArgs struct {
	// List of cases that correspond to expected values of the 'on' property. This is an optional property and if not provided, the activity will execute activities provided in defaultActivities.
	Cases SwitchCaseArrayInput `pulumi:"cases"`
	// List of activities to execute if no case condition is satisfied. This is an optional property and if not provided, the activity will exit without any action.
	DefaultActivities pulumi.ArrayInput `pulumi:"defaultActivities"`
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// An expression that would evaluate to a string or integer. This is used to determine the block of activities in cases that will be executed.
	On ExpressionInput `pulumi:"on"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs pulumi.StringPtrInput `pulumi:"onInactiveMarkAs"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Type of activity.
	// Expected value is 'Switch'.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
}

func (SwitchActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SwitchActivity)(nil)).Elem()
}

func (i SwitchActivityArgs) ToSwitchActivityOutput() SwitchActivityOutput {
	return i.ToSwitchActivityOutputWithContext(context.Background())
}

func (i SwitchActivityArgs) ToSwitchActivityOutputWithContext(ctx context.Context) SwitchActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchActivityOutput)
}

// This activity evaluates an expression and executes activities under the cases property that correspond to the expression evaluation expected in the equals property.
type SwitchActivityOutput struct{ *pulumi.OutputState }

func (SwitchActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SwitchActivity)(nil)).Elem()
}

func (o SwitchActivityOutput) ToSwitchActivityOutput() SwitchActivityOutput {
	return o
}

func (o SwitchActivityOutput) ToSwitchActivityOutputWithContext(ctx context.Context) SwitchActivityOutput {
	return o
}

// List of cases that correspond to expected values of the 'on' property. This is an optional property and if not provided, the activity will execute activities provided in defaultActivities.
func (o SwitchActivityOutput) Cases() SwitchCaseArrayOutput {
	return o.ApplyT(func(v SwitchActivity) []SwitchCase { return v.Cases }).(SwitchCaseArrayOutput)
}

// List of activities to execute if no case condition is satisfied. This is an optional property and if not provided, the activity will exit without any action.
func (o SwitchActivityOutput) DefaultActivities() pulumi.ArrayOutput {
	return o.ApplyT(func(v SwitchActivity) []interface{} { return v.DefaultActivities }).(pulumi.ArrayOutput)
}

// Activity depends on condition.
func (o SwitchActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v SwitchActivity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o SwitchActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SwitchActivity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Activity name.
func (o SwitchActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SwitchActivity) string { return v.Name }).(pulumi.StringOutput)
}

// An expression that would evaluate to a string or integer. This is used to determine the block of activities in cases that will be executed.
func (o SwitchActivityOutput) On() ExpressionOutput {
	return o.ApplyT(func(v SwitchActivity) Expression { return v.On }).(ExpressionOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o SwitchActivityOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SwitchActivity) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o SwitchActivityOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SwitchActivity) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'Switch'.
func (o SwitchActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SwitchActivity) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o SwitchActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v SwitchActivity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

// This activity evaluates an expression and executes activities under the cases property that correspond to the expression evaluation expected in the equals property.
type SwitchActivityResponse struct {
	// List of cases that correspond to expected values of the 'on' property. This is an optional property and if not provided, the activity will execute activities provided in defaultActivities.
	Cases []SwitchCaseResponse `pulumi:"cases"`
	// List of activities to execute if no case condition is satisfied. This is an optional property and if not provided, the activity will exit without any action.
	DefaultActivities []interface{} `pulumi:"defaultActivities"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Activity name.
	Name string `pulumi:"name"`
	// An expression that would evaluate to a string or integer. This is used to determine the block of activities in cases that will be executed.
	On ExpressionResponse `pulumi:"on"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'Switch'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// This activity evaluates an expression and executes activities under the cases property that correspond to the expression evaluation expected in the equals property.
type SwitchActivityResponseOutput struct{ *pulumi.OutputState }

func (SwitchActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SwitchActivityResponse)(nil)).Elem()
}

func (o SwitchActivityResponseOutput) ToSwitchActivityResponseOutput() SwitchActivityResponseOutput {
	return o
}

func (o SwitchActivityResponseOutput) ToSwitchActivityResponseOutputWithContext(ctx context.Context) SwitchActivityResponseOutput {
	return o
}

// List of cases that correspond to expected values of the 'on' property. This is an optional property and if not provided, the activity will execute activities provided in defaultActivities.
func (o SwitchActivityResponseOutput) Cases() SwitchCaseResponseArrayOutput {
	return o.ApplyT(func(v SwitchActivityResponse) []SwitchCaseResponse { return v.Cases }).(SwitchCaseResponseArrayOutput)
}

// List of activities to execute if no case condition is satisfied. This is an optional property and if not provided, the activity will exit without any action.
func (o SwitchActivityResponseOutput) DefaultActivities() pulumi.ArrayOutput {
	return o.ApplyT(func(v SwitchActivityResponse) []interface{} { return v.DefaultActivities }).(pulumi.ArrayOutput)
}

// Activity depends on condition.
func (o SwitchActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v SwitchActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o SwitchActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SwitchActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Activity name.
func (o SwitchActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SwitchActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// An expression that would evaluate to a string or integer. This is used to determine the block of activities in cases that will be executed.
func (o SwitchActivityResponseOutput) On() ExpressionResponseOutput {
	return o.ApplyT(func(v SwitchActivityResponse) ExpressionResponse { return v.On }).(ExpressionResponseOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o SwitchActivityResponseOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SwitchActivityResponse) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o SwitchActivityResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SwitchActivityResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'Switch'.
func (o SwitchActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SwitchActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o SwitchActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v SwitchActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

// Switch cases with have a value and corresponding activities.
type SwitchCase struct {
	// List of activities to execute for satisfied case condition.
	Activities []interface{} `pulumi:"activities"`
	// Expected value that satisfies the expression result of the 'on' property.
	Value *string `pulumi:"value"`
}

// SwitchCaseInput is an input type that accepts SwitchCaseArgs and SwitchCaseOutput values.
// You can construct a concrete instance of `SwitchCaseInput` via:
//
//	SwitchCaseArgs{...}
type SwitchCaseInput interface {
	pulumi.Input

	ToSwitchCaseOutput() SwitchCaseOutput
	ToSwitchCaseOutputWithContext(context.Context) SwitchCaseOutput
}

// Switch cases with have a value and corresponding activities.
type SwitchCaseArgs struct {
	// List of activities to execute for satisfied case condition.
	Activities pulumi.ArrayInput `pulumi:"activities"`
	// Expected value that satisfies the expression result of the 'on' property.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (SwitchCaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SwitchCase)(nil)).Elem()
}

func (i SwitchCaseArgs) ToSwitchCaseOutput() SwitchCaseOutput {
	return i.ToSwitchCaseOutputWithContext(context.Background())
}

func (i SwitchCaseArgs) ToSwitchCaseOutputWithContext(ctx context.Context) SwitchCaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchCaseOutput)
}

// SwitchCaseArrayInput is an input type that accepts SwitchCaseArray and SwitchCaseArrayOutput values.
// You can construct a concrete instance of `SwitchCaseArrayInput` via:
//
//	SwitchCaseArray{ SwitchCaseArgs{...} }
type SwitchCaseArrayInput interface {
	pulumi.Input

	ToSwitchCaseArrayOutput() SwitchCaseArrayOutput
	ToSwitchCaseArrayOutputWithContext(context.Context) SwitchCaseArrayOutput
}

type SwitchCaseArray []SwitchCaseInput

func (SwitchCaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SwitchCase)(nil)).Elem()
}

func (i SwitchCaseArray) ToSwitchCaseArrayOutput() SwitchCaseArrayOutput {
	return i.ToSwitchCaseArrayOutputWithContext(context.Background())
}

func (i SwitchCaseArray) ToSwitchCaseArrayOutputWithContext(ctx context.Context) SwitchCaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchCaseArrayOutput)
}

// Switch cases with have a value and corresponding activities.
type SwitchCaseOutput struct{ *pulumi.OutputState }

func (SwitchCaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SwitchCase)(nil)).Elem()
}

func (o SwitchCaseOutput) ToSwitchCaseOutput() SwitchCaseOutput {
	return o
}

func (o SwitchCaseOutput) ToSwitchCaseOutputWithContext(ctx context.Context) SwitchCaseOutput {
	return o
}

// List of activities to execute for satisfied case condition.
func (o SwitchCaseOutput) Activities() pulumi.ArrayOutput {
	return o.ApplyT(func(v SwitchCase) []interface{} { return v.Activities }).(pulumi.ArrayOutput)
}

// Expected value that satisfies the expression result of the 'on' property.
func (o SwitchCaseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SwitchCase) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type SwitchCaseArrayOutput struct{ *pulumi.OutputState }

func (SwitchCaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SwitchCase)(nil)).Elem()
}

func (o SwitchCaseArrayOutput) ToSwitchCaseArrayOutput() SwitchCaseArrayOutput {
	return o
}

func (o SwitchCaseArrayOutput) ToSwitchCaseArrayOutputWithContext(ctx context.Context) SwitchCaseArrayOutput {
	return o
}

func (o SwitchCaseArrayOutput) Index(i pulumi.IntInput) SwitchCaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SwitchCase {
		return vs[0].([]SwitchCase)[vs[1].(int)]
	}).(SwitchCaseOutput)
}

// Switch cases with have a value and corresponding activities.
type SwitchCaseResponse struct {
	// List of activities to execute for satisfied case condition.
	Activities []interface{} `pulumi:"activities"`
	// Expected value that satisfies the expression result of the 'on' property.
	Value *string `pulumi:"value"`
}

// Switch cases with have a value and corresponding activities.
type SwitchCaseResponseOutput struct{ *pulumi.OutputState }

func (SwitchCaseResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SwitchCaseResponse)(nil)).Elem()
}

func (o SwitchCaseResponseOutput) ToSwitchCaseResponseOutput() SwitchCaseResponseOutput {
	return o
}

func (o SwitchCaseResponseOutput) ToSwitchCaseResponseOutputWithContext(ctx context.Context) SwitchCaseResponseOutput {
	return o
}

// List of activities to execute for satisfied case condition.
func (o SwitchCaseResponseOutput) Activities() pulumi.ArrayOutput {
	return o.ApplyT(func(v SwitchCaseResponse) []interface{} { return v.Activities }).(pulumi.ArrayOutput)
}

// Expected value that satisfies the expression result of the 'on' property.
func (o SwitchCaseResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SwitchCaseResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type SwitchCaseResponseArrayOutput struct{ *pulumi.OutputState }

func (SwitchCaseResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SwitchCaseResponse)(nil)).Elem()
}

func (o SwitchCaseResponseArrayOutput) ToSwitchCaseResponseArrayOutput() SwitchCaseResponseArrayOutput {
	return o
}

func (o SwitchCaseResponseArrayOutput) ToSwitchCaseResponseArrayOutputWithContext(ctx context.Context) SwitchCaseResponseArrayOutput {
	return o
}

func (o SwitchCaseResponseArrayOutput) Index(i pulumi.IntInput) SwitchCaseResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SwitchCaseResponse {
		return vs[0].([]SwitchCaseResponse)[vs[1].(int)]
	}).(SwitchCaseResponseOutput)
}

// Linked service for Sybase data source.
type SybaseLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// AuthenticationType to be used for connection.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Database name for connection. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// Schema name for connection. Type: string (or Expression with resultType string).
	Schema interface{} `pulumi:"schema"`
	// Server name for connection. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	// Expected value is 'Sybase'.
	Type string `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// SybaseLinkedServiceInput is an input type that accepts SybaseLinkedServiceArgs and SybaseLinkedServiceOutput values.
// You can construct a concrete instance of `SybaseLinkedServiceInput` via:
//
//	SybaseLinkedServiceArgs{...}
type SybaseLinkedServiceInput interface {
	pulumi.Input

	ToSybaseLinkedServiceOutput() SybaseLinkedServiceOutput
	ToSybaseLinkedServiceOutputWithContext(context.Context) SybaseLinkedServiceOutput
}

// Linked service for Sybase data source.
type SybaseLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// AuthenticationType to be used for connection.
	AuthenticationType pulumi.StringPtrInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Database name for connection. Type: string (or Expression with resultType string).
	Database pulumi.Input `pulumi:"database"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password for authentication.
	Password pulumi.Input `pulumi:"password"`
	// Schema name for connection. Type: string (or Expression with resultType string).
	Schema pulumi.Input `pulumi:"schema"`
	// Server name for connection. Type: string (or Expression with resultType string).
	Server pulumi.Input `pulumi:"server"`
	// Type of linked service.
	// Expected value is 'Sybase'.
	Type pulumi.StringInput `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username pulumi.Input `pulumi:"username"`
}

func (SybaseLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SybaseLinkedService)(nil)).Elem()
}

func (i SybaseLinkedServiceArgs) ToSybaseLinkedServiceOutput() SybaseLinkedServiceOutput {
	return i.ToSybaseLinkedServiceOutputWithContext(context.Background())
}

func (i SybaseLinkedServiceArgs) ToSybaseLinkedServiceOutputWithContext(ctx context.Context) SybaseLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SybaseLinkedServiceOutput)
}

// Linked service for Sybase data source.
type SybaseLinkedServiceOutput struct{ *pulumi.OutputState }

func (SybaseLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SybaseLinkedService)(nil)).Elem()
}

func (o SybaseLinkedServiceOutput) ToSybaseLinkedServiceOutput() SybaseLinkedServiceOutput {
	return o
}

func (o SybaseLinkedServiceOutput) ToSybaseLinkedServiceOutputWithContext(ctx context.Context) SybaseLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SybaseLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SybaseLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// AuthenticationType to be used for connection.
func (o SybaseLinkedServiceOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SybaseLinkedService) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// The integration runtime reference.
func (o SybaseLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v SybaseLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Database name for connection. Type: string (or Expression with resultType string).
func (o SybaseLinkedServiceOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseLinkedService) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Linked service description.
func (o SybaseLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SybaseLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o SybaseLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SybaseLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o SybaseLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SybaseLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Password for authentication.
func (o SybaseLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Schema name for connection. Type: string (or Expression with resultType string).
func (o SybaseLinkedServiceOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseLinkedService) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Server name for connection. Type: string (or Expression with resultType string).
func (o SybaseLinkedServiceOutput) Server() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseLinkedService) interface{} { return v.Server }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Sybase'.
func (o SybaseLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SybaseLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Username for authentication. Type: string (or Expression with resultType string).
func (o SybaseLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Linked service for Sybase data source.
type SybaseLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// AuthenticationType to be used for connection.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Database name for connection. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// Schema name for connection. Type: string (or Expression with resultType string).
	Schema interface{} `pulumi:"schema"`
	// Server name for connection. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	// Expected value is 'Sybase'.
	Type string `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// Linked service for Sybase data source.
type SybaseLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (SybaseLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SybaseLinkedServiceResponse)(nil)).Elem()
}

func (o SybaseLinkedServiceResponseOutput) ToSybaseLinkedServiceResponseOutput() SybaseLinkedServiceResponseOutput {
	return o
}

func (o SybaseLinkedServiceResponseOutput) ToSybaseLinkedServiceResponseOutputWithContext(ctx context.Context) SybaseLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o SybaseLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SybaseLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// AuthenticationType to be used for connection.
func (o SybaseLinkedServiceResponseOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SybaseLinkedServiceResponse) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// The integration runtime reference.
func (o SybaseLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v SybaseLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Database name for connection. Type: string (or Expression with resultType string).
func (o SybaseLinkedServiceResponseOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseLinkedServiceResponse) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Linked service description.
func (o SybaseLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SybaseLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o SybaseLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SybaseLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o SybaseLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SybaseLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password for authentication.
func (o SybaseLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Schema name for connection. Type: string (or Expression with resultType string).
func (o SybaseLinkedServiceResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseLinkedServiceResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Server name for connection. Type: string (or Expression with resultType string).
func (o SybaseLinkedServiceResponseOutput) Server() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseLinkedServiceResponse) interface{} { return v.Server }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Sybase'.
func (o SybaseLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SybaseLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Username for authentication. Type: string (or Expression with resultType string).
func (o SybaseLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// A copy activity source for Sybase databases.
type SybaseSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SybaseSource'.
	Type string `pulumi:"type"`
}

// SybaseSourceInput is an input type that accepts SybaseSourceArgs and SybaseSourceOutput values.
// You can construct a concrete instance of `SybaseSourceInput` via:
//
//	SybaseSourceArgs{...}
type SybaseSourceInput interface {
	pulumi.Input

	ToSybaseSourceOutput() SybaseSourceOutput
	ToSybaseSourceOutputWithContext(context.Context) SybaseSourceOutput
}

// A copy activity source for Sybase databases.
type SybaseSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SybaseSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SybaseSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SybaseSource)(nil)).Elem()
}

func (i SybaseSourceArgs) ToSybaseSourceOutput() SybaseSourceOutput {
	return i.ToSybaseSourceOutputWithContext(context.Background())
}

func (i SybaseSourceArgs) ToSybaseSourceOutputWithContext(ctx context.Context) SybaseSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SybaseSourceOutput)
}

// A copy activity source for Sybase databases.
type SybaseSourceOutput struct{ *pulumi.OutputState }

func (SybaseSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SybaseSource)(nil)).Elem()
}

func (o SybaseSourceOutput) ToSybaseSourceOutput() SybaseSourceOutput {
	return o
}

func (o SybaseSourceOutput) ToSybaseSourceOutputWithContext(ctx context.Context) SybaseSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o SybaseSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SybaseSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SybaseSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Database query. Type: string (or Expression with resultType string).
func (o SybaseSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SybaseSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o SybaseSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SybaseSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'SybaseSource'.
func (o SybaseSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SybaseSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity source for Sybase databases.
type SybaseSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'SybaseSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for Sybase databases.
type SybaseSourceResponseOutput struct{ *pulumi.OutputState }

func (SybaseSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SybaseSourceResponse)(nil)).Elem()
}

func (o SybaseSourceResponseOutput) ToSybaseSourceResponseOutput() SybaseSourceResponseOutput {
	return o
}

func (o SybaseSourceResponseOutput) ToSybaseSourceResponseOutputWithContext(ctx context.Context) SybaseSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o SybaseSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o SybaseSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o SybaseSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Database query. Type: string (or Expression with resultType string).
func (o SybaseSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SybaseSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o SybaseSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o SybaseSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'SybaseSource'.
func (o SybaseSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SybaseSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Sybase table dataset.
type SybaseTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The Sybase table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'SybaseTable'.
	Type string `pulumi:"type"`
}

// SybaseTableDatasetInput is an input type that accepts SybaseTableDatasetArgs and SybaseTableDatasetOutput values.
// You can construct a concrete instance of `SybaseTableDatasetInput` via:
//
//	SybaseTableDatasetArgs{...}
type SybaseTableDatasetInput interface {
	pulumi.Input

	ToSybaseTableDatasetOutput() SybaseTableDatasetOutput
	ToSybaseTableDatasetOutputWithContext(context.Context) SybaseTableDatasetOutput
}

// The Sybase table dataset.
type SybaseTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The Sybase table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'SybaseTable'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SybaseTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SybaseTableDataset)(nil)).Elem()
}

func (i SybaseTableDatasetArgs) ToSybaseTableDatasetOutput() SybaseTableDatasetOutput {
	return i.ToSybaseTableDatasetOutputWithContext(context.Background())
}

func (i SybaseTableDatasetArgs) ToSybaseTableDatasetOutputWithContext(ctx context.Context) SybaseTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SybaseTableDatasetOutput)
}

// The Sybase table dataset.
type SybaseTableDatasetOutput struct{ *pulumi.OutputState }

func (SybaseTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SybaseTableDataset)(nil)).Elem()
}

func (o SybaseTableDatasetOutput) ToSybaseTableDatasetOutput() SybaseTableDatasetOutput {
	return o
}

func (o SybaseTableDatasetOutput) ToSybaseTableDatasetOutputWithContext(ctx context.Context) SybaseTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SybaseTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SybaseTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SybaseTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SybaseTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SybaseTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v SybaseTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o SybaseTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v SybaseTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o SybaseTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v SybaseTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SybaseTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SybaseTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The Sybase table name. Type: string (or Expression with resultType string).
func (o SybaseTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'SybaseTable'.
func (o SybaseTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SybaseTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Sybase table dataset.
type SybaseTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The Sybase table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'SybaseTable'.
	Type string `pulumi:"type"`
}

// The Sybase table dataset.
type SybaseTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (SybaseTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SybaseTableDatasetResponse)(nil)).Elem()
}

func (o SybaseTableDatasetResponseOutput) ToSybaseTableDatasetResponseOutput() SybaseTableDatasetResponseOutput {
	return o
}

func (o SybaseTableDatasetResponseOutput) ToSybaseTableDatasetResponseOutputWithContext(ctx context.Context) SybaseTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o SybaseTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v SybaseTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o SybaseTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SybaseTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o SybaseTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v SybaseTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o SybaseTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v SybaseTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o SybaseTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v SybaseTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o SybaseTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o SybaseTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The Sybase table name. Type: string (or Expression with resultType string).
func (o SybaseTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v SybaseTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'SybaseTable'.
func (o SybaseTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SybaseTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Execute Synapse notebook activity.
type SynapseNotebookActivity struct {
	// Spark configuration properties, which will override the 'conf' of the notebook you provide.
	Conf interface{} `pulumi:"conf"`
	// The type of the spark config.
	ConfigurationType *string `pulumi:"configurationType"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Number of core and memory to be used for driver allocated in the specified Spark pool for the session, which will be used for overriding 'driverCores' and 'driverMemory' of the notebook you provide. Type: string (or Expression with resultType string).
	DriverSize interface{} `pulumi:"driverSize"`
	// Number of core and memory to be used for executors allocated in the specified Spark pool for the session, which will be used for overriding 'executorCores' and 'executorMemory' of the notebook you provide. Type: string (or Expression with resultType string).
	ExecutorSize interface{} `pulumi:"executorSize"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Synapse notebook reference.
	Notebook SynapseNotebookReference `pulumi:"notebook"`
	// Number of executors to launch for this session, which will override the 'numExecutors' of the notebook you provide. Type: integer (or Expression with resultType integer).
	NumExecutors interface{} `pulumi:"numExecutors"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Notebook parameters.
	Parameters map[string]NotebookParameter `pulumi:"parameters"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Spark configuration property.
	SparkConfig map[string]interface{} `pulumi:"sparkConfig"`
	// The name of the big data pool which will be used to execute the notebook.
	SparkPool *BigDataPoolParametrizationReference `pulumi:"sparkPool"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// The spark configuration of the spark job.
	TargetSparkConfiguration *SparkConfigurationParametrizationReference `pulumi:"targetSparkConfiguration"`
	// Type of activity.
	// Expected value is 'SynapseNotebook'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// SynapseNotebookActivityInput is an input type that accepts SynapseNotebookActivityArgs and SynapseNotebookActivityOutput values.
// You can construct a concrete instance of `SynapseNotebookActivityInput` via:
//
//	SynapseNotebookActivityArgs{...}
type SynapseNotebookActivityInput interface {
	pulumi.Input

	ToSynapseNotebookActivityOutput() SynapseNotebookActivityOutput
	ToSynapseNotebookActivityOutputWithContext(context.Context) SynapseNotebookActivityOutput
}

// Execute Synapse notebook activity.
type SynapseNotebookActivityArgs struct {
	// Spark configuration properties, which will override the 'conf' of the notebook you provide.
	Conf pulumi.Input `pulumi:"conf"`
	// The type of the spark config.
	ConfigurationType pulumi.StringPtrInput `pulumi:"configurationType"`
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Number of core and memory to be used for driver allocated in the specified Spark pool for the session, which will be used for overriding 'driverCores' and 'driverMemory' of the notebook you provide. Type: string (or Expression with resultType string).
	DriverSize pulumi.Input `pulumi:"driverSize"`
	// Number of core and memory to be used for executors allocated in the specified Spark pool for the session, which will be used for overriding 'executorCores' and 'executorMemory' of the notebook you provide. Type: string (or Expression with resultType string).
	ExecutorSize pulumi.Input `pulumi:"executorSize"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferencePtrInput `pulumi:"linkedServiceName"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Synapse notebook reference.
	Notebook SynapseNotebookReferenceInput `pulumi:"notebook"`
	// Number of executors to launch for this session, which will override the 'numExecutors' of the notebook you provide. Type: integer (or Expression with resultType integer).
	NumExecutors pulumi.Input `pulumi:"numExecutors"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs pulumi.StringPtrInput `pulumi:"onInactiveMarkAs"`
	// Notebook parameters.
	Parameters NotebookParameterMapInput `pulumi:"parameters"`
	// Activity policy.
	Policy ActivityPolicyPtrInput `pulumi:"policy"`
	// Spark configuration property.
	SparkConfig pulumi.MapInput `pulumi:"sparkConfig"`
	// The name of the big data pool which will be used to execute the notebook.
	SparkPool BigDataPoolParametrizationReferencePtrInput `pulumi:"sparkPool"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State pulumi.StringPtrInput `pulumi:"state"`
	// The spark configuration of the spark job.
	TargetSparkConfiguration SparkConfigurationParametrizationReferencePtrInput `pulumi:"targetSparkConfiguration"`
	// Type of activity.
	// Expected value is 'SynapseNotebook'.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
}

func (SynapseNotebookActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SynapseNotebookActivity)(nil)).Elem()
}

func (i SynapseNotebookActivityArgs) ToSynapseNotebookActivityOutput() SynapseNotebookActivityOutput {
	return i.ToSynapseNotebookActivityOutputWithContext(context.Background())
}

func (i SynapseNotebookActivityArgs) ToSynapseNotebookActivityOutputWithContext(ctx context.Context) SynapseNotebookActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SynapseNotebookActivityOutput)
}

// Execute Synapse notebook activity.
type SynapseNotebookActivityOutput struct{ *pulumi.OutputState }

func (SynapseNotebookActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SynapseNotebookActivity)(nil)).Elem()
}

func (o SynapseNotebookActivityOutput) ToSynapseNotebookActivityOutput() SynapseNotebookActivityOutput {
	return o
}

func (o SynapseNotebookActivityOutput) ToSynapseNotebookActivityOutputWithContext(ctx context.Context) SynapseNotebookActivityOutput {
	return o
}

// Spark configuration properties, which will override the 'conf' of the notebook you provide.
func (o SynapseNotebookActivityOutput) Conf() pulumi.AnyOutput {
	return o.ApplyT(func(v SynapseNotebookActivity) interface{} { return v.Conf }).(pulumi.AnyOutput)
}

// The type of the spark config.
func (o SynapseNotebookActivityOutput) ConfigurationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseNotebookActivity) *string { return v.ConfigurationType }).(pulumi.StringPtrOutput)
}

// Activity depends on condition.
func (o SynapseNotebookActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v SynapseNotebookActivity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o SynapseNotebookActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseNotebookActivity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Number of core and memory to be used for driver allocated in the specified Spark pool for the session, which will be used for overriding 'driverCores' and 'driverMemory' of the notebook you provide. Type: string (or Expression with resultType string).
func (o SynapseNotebookActivityOutput) DriverSize() pulumi.AnyOutput {
	return o.ApplyT(func(v SynapseNotebookActivity) interface{} { return v.DriverSize }).(pulumi.AnyOutput)
}

// Number of core and memory to be used for executors allocated in the specified Spark pool for the session, which will be used for overriding 'executorCores' and 'executorMemory' of the notebook you provide. Type: string (or Expression with resultType string).
func (o SynapseNotebookActivityOutput) ExecutorSize() pulumi.AnyOutput {
	return o.ApplyT(func(v SynapseNotebookActivity) interface{} { return v.ExecutorSize }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o SynapseNotebookActivityOutput) LinkedServiceName() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v SynapseNotebookActivity) *LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferencePtrOutput)
}

// Activity name.
func (o SynapseNotebookActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SynapseNotebookActivity) string { return v.Name }).(pulumi.StringOutput)
}

// Synapse notebook reference.
func (o SynapseNotebookActivityOutput) Notebook() SynapseNotebookReferenceOutput {
	return o.ApplyT(func(v SynapseNotebookActivity) SynapseNotebookReference { return v.Notebook }).(SynapseNotebookReferenceOutput)
}

// Number of executors to launch for this session, which will override the 'numExecutors' of the notebook you provide. Type: integer (or Expression with resultType integer).
func (o SynapseNotebookActivityOutput) NumExecutors() pulumi.AnyOutput {
	return o.ApplyT(func(v SynapseNotebookActivity) interface{} { return v.NumExecutors }).(pulumi.AnyOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o SynapseNotebookActivityOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseNotebookActivity) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Notebook parameters.
func (o SynapseNotebookActivityOutput) Parameters() NotebookParameterMapOutput {
	return o.ApplyT(func(v SynapseNotebookActivity) map[string]NotebookParameter { return v.Parameters }).(NotebookParameterMapOutput)
}

// Activity policy.
func (o SynapseNotebookActivityOutput) Policy() ActivityPolicyPtrOutput {
	return o.ApplyT(func(v SynapseNotebookActivity) *ActivityPolicy { return v.Policy }).(ActivityPolicyPtrOutput)
}

// Spark configuration property.
func (o SynapseNotebookActivityOutput) SparkConfig() pulumi.MapOutput {
	return o.ApplyT(func(v SynapseNotebookActivity) map[string]interface{} { return v.SparkConfig }).(pulumi.MapOutput)
}

// The name of the big data pool which will be used to execute the notebook.
func (o SynapseNotebookActivityOutput) SparkPool() BigDataPoolParametrizationReferencePtrOutput {
	return o.ApplyT(func(v SynapseNotebookActivity) *BigDataPoolParametrizationReference { return v.SparkPool }).(BigDataPoolParametrizationReferencePtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o SynapseNotebookActivityOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseNotebookActivity) *string { return v.State }).(pulumi.StringPtrOutput)
}

// The spark configuration of the spark job.
func (o SynapseNotebookActivityOutput) TargetSparkConfiguration() SparkConfigurationParametrizationReferencePtrOutput {
	return o.ApplyT(func(v SynapseNotebookActivity) *SparkConfigurationParametrizationReference {
		return v.TargetSparkConfiguration
	}).(SparkConfigurationParametrizationReferencePtrOutput)
}

// Type of activity.
// Expected value is 'SynapseNotebook'.
func (o SynapseNotebookActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SynapseNotebookActivity) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o SynapseNotebookActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v SynapseNotebookActivity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

// Execute Synapse notebook activity.
type SynapseNotebookActivityResponse struct {
	// Spark configuration properties, which will override the 'conf' of the notebook you provide.
	Conf interface{} `pulumi:"conf"`
	// The type of the spark config.
	ConfigurationType *string `pulumi:"configurationType"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Number of core and memory to be used for driver allocated in the specified Spark pool for the session, which will be used for overriding 'driverCores' and 'driverMemory' of the notebook you provide. Type: string (or Expression with resultType string).
	DriverSize interface{} `pulumi:"driverSize"`
	// Number of core and memory to be used for executors allocated in the specified Spark pool for the session, which will be used for overriding 'executorCores' and 'executorMemory' of the notebook you provide. Type: string (or Expression with resultType string).
	ExecutorSize interface{} `pulumi:"executorSize"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Synapse notebook reference.
	Notebook SynapseNotebookReferenceResponse `pulumi:"notebook"`
	// Number of executors to launch for this session, which will override the 'numExecutors' of the notebook you provide. Type: integer (or Expression with resultType integer).
	NumExecutors interface{} `pulumi:"numExecutors"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Notebook parameters.
	Parameters map[string]NotebookParameterResponse `pulumi:"parameters"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Spark configuration property.
	SparkConfig map[string]interface{} `pulumi:"sparkConfig"`
	// The name of the big data pool which will be used to execute the notebook.
	SparkPool *BigDataPoolParametrizationReferenceResponse `pulumi:"sparkPool"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// The spark configuration of the spark job.
	TargetSparkConfiguration *SparkConfigurationParametrizationReferenceResponse `pulumi:"targetSparkConfiguration"`
	// Type of activity.
	// Expected value is 'SynapseNotebook'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Execute Synapse notebook activity.
type SynapseNotebookActivityResponseOutput struct{ *pulumi.OutputState }

func (SynapseNotebookActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SynapseNotebookActivityResponse)(nil)).Elem()
}

func (o SynapseNotebookActivityResponseOutput) ToSynapseNotebookActivityResponseOutput() SynapseNotebookActivityResponseOutput {
	return o
}

func (o SynapseNotebookActivityResponseOutput) ToSynapseNotebookActivityResponseOutputWithContext(ctx context.Context) SynapseNotebookActivityResponseOutput {
	return o
}

// Spark configuration properties, which will override the 'conf' of the notebook you provide.
func (o SynapseNotebookActivityResponseOutput) Conf() pulumi.AnyOutput {
	return o.ApplyT(func(v SynapseNotebookActivityResponse) interface{} { return v.Conf }).(pulumi.AnyOutput)
}

// The type of the spark config.
func (o SynapseNotebookActivityResponseOutput) ConfigurationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseNotebookActivityResponse) *string { return v.ConfigurationType }).(pulumi.StringPtrOutput)
}

// Activity depends on condition.
func (o SynapseNotebookActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v SynapseNotebookActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o SynapseNotebookActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseNotebookActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Number of core and memory to be used for driver allocated in the specified Spark pool for the session, which will be used for overriding 'driverCores' and 'driverMemory' of the notebook you provide. Type: string (or Expression with resultType string).
func (o SynapseNotebookActivityResponseOutput) DriverSize() pulumi.AnyOutput {
	return o.ApplyT(func(v SynapseNotebookActivityResponse) interface{} { return v.DriverSize }).(pulumi.AnyOutput)
}

// Number of core and memory to be used for executors allocated in the specified Spark pool for the session, which will be used for overriding 'executorCores' and 'executorMemory' of the notebook you provide. Type: string (or Expression with resultType string).
func (o SynapseNotebookActivityResponseOutput) ExecutorSize() pulumi.AnyOutput {
	return o.ApplyT(func(v SynapseNotebookActivityResponse) interface{} { return v.ExecutorSize }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o SynapseNotebookActivityResponseOutput) LinkedServiceName() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v SynapseNotebookActivityResponse) *LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponsePtrOutput)
}

// Activity name.
func (o SynapseNotebookActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SynapseNotebookActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Synapse notebook reference.
func (o SynapseNotebookActivityResponseOutput) Notebook() SynapseNotebookReferenceResponseOutput {
	return o.ApplyT(func(v SynapseNotebookActivityResponse) SynapseNotebookReferenceResponse { return v.Notebook }).(SynapseNotebookReferenceResponseOutput)
}

// Number of executors to launch for this session, which will override the 'numExecutors' of the notebook you provide. Type: integer (or Expression with resultType integer).
func (o SynapseNotebookActivityResponseOutput) NumExecutors() pulumi.AnyOutput {
	return o.ApplyT(func(v SynapseNotebookActivityResponse) interface{} { return v.NumExecutors }).(pulumi.AnyOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o SynapseNotebookActivityResponseOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseNotebookActivityResponse) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Notebook parameters.
func (o SynapseNotebookActivityResponseOutput) Parameters() NotebookParameterResponseMapOutput {
	return o.ApplyT(func(v SynapseNotebookActivityResponse) map[string]NotebookParameterResponse { return v.Parameters }).(NotebookParameterResponseMapOutput)
}

// Activity policy.
func (o SynapseNotebookActivityResponseOutput) Policy() ActivityPolicyResponsePtrOutput {
	return o.ApplyT(func(v SynapseNotebookActivityResponse) *ActivityPolicyResponse { return v.Policy }).(ActivityPolicyResponsePtrOutput)
}

// Spark configuration property.
func (o SynapseNotebookActivityResponseOutput) SparkConfig() pulumi.MapOutput {
	return o.ApplyT(func(v SynapseNotebookActivityResponse) map[string]interface{} { return v.SparkConfig }).(pulumi.MapOutput)
}

// The name of the big data pool which will be used to execute the notebook.
func (o SynapseNotebookActivityResponseOutput) SparkPool() BigDataPoolParametrizationReferenceResponsePtrOutput {
	return o.ApplyT(func(v SynapseNotebookActivityResponse) *BigDataPoolParametrizationReferenceResponse {
		return v.SparkPool
	}).(BigDataPoolParametrizationReferenceResponsePtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o SynapseNotebookActivityResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseNotebookActivityResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// The spark configuration of the spark job.
func (o SynapseNotebookActivityResponseOutput) TargetSparkConfiguration() SparkConfigurationParametrizationReferenceResponsePtrOutput {
	return o.ApplyT(func(v SynapseNotebookActivityResponse) *SparkConfigurationParametrizationReferenceResponse {
		return v.TargetSparkConfiguration
	}).(SparkConfigurationParametrizationReferenceResponsePtrOutput)
}

// Type of activity.
// Expected value is 'SynapseNotebook'.
func (o SynapseNotebookActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SynapseNotebookActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o SynapseNotebookActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v SynapseNotebookActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

// Synapse notebook reference type.
type SynapseNotebookReference struct {
	// Reference notebook name. Type: string (or Expression with resultType string).
	ReferenceName interface{} `pulumi:"referenceName"`
	// Synapse notebook reference type.
	Type string `pulumi:"type"`
}

// SynapseNotebookReferenceInput is an input type that accepts SynapseNotebookReferenceArgs and SynapseNotebookReferenceOutput values.
// You can construct a concrete instance of `SynapseNotebookReferenceInput` via:
//
//	SynapseNotebookReferenceArgs{...}
type SynapseNotebookReferenceInput interface {
	pulumi.Input

	ToSynapseNotebookReferenceOutput() SynapseNotebookReferenceOutput
	ToSynapseNotebookReferenceOutputWithContext(context.Context) SynapseNotebookReferenceOutput
}

// Synapse notebook reference type.
type SynapseNotebookReferenceArgs struct {
	// Reference notebook name. Type: string (or Expression with resultType string).
	ReferenceName pulumi.Input `pulumi:"referenceName"`
	// Synapse notebook reference type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SynapseNotebookReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SynapseNotebookReference)(nil)).Elem()
}

func (i SynapseNotebookReferenceArgs) ToSynapseNotebookReferenceOutput() SynapseNotebookReferenceOutput {
	return i.ToSynapseNotebookReferenceOutputWithContext(context.Background())
}

func (i SynapseNotebookReferenceArgs) ToSynapseNotebookReferenceOutputWithContext(ctx context.Context) SynapseNotebookReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SynapseNotebookReferenceOutput)
}

// Synapse notebook reference type.
type SynapseNotebookReferenceOutput struct{ *pulumi.OutputState }

func (SynapseNotebookReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SynapseNotebookReference)(nil)).Elem()
}

func (o SynapseNotebookReferenceOutput) ToSynapseNotebookReferenceOutput() SynapseNotebookReferenceOutput {
	return o
}

func (o SynapseNotebookReferenceOutput) ToSynapseNotebookReferenceOutputWithContext(ctx context.Context) SynapseNotebookReferenceOutput {
	return o
}

// Reference notebook name. Type: string (or Expression with resultType string).
func (o SynapseNotebookReferenceOutput) ReferenceName() pulumi.AnyOutput {
	return o.ApplyT(func(v SynapseNotebookReference) interface{} { return v.ReferenceName }).(pulumi.AnyOutput)
}

// Synapse notebook reference type.
func (o SynapseNotebookReferenceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SynapseNotebookReference) string { return v.Type }).(pulumi.StringOutput)
}

// Synapse notebook reference type.
type SynapseNotebookReferenceResponse struct {
	// Reference notebook name. Type: string (or Expression with resultType string).
	ReferenceName interface{} `pulumi:"referenceName"`
	// Synapse notebook reference type.
	Type string `pulumi:"type"`
}

// Synapse notebook reference type.
type SynapseNotebookReferenceResponseOutput struct{ *pulumi.OutputState }

func (SynapseNotebookReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SynapseNotebookReferenceResponse)(nil)).Elem()
}

func (o SynapseNotebookReferenceResponseOutput) ToSynapseNotebookReferenceResponseOutput() SynapseNotebookReferenceResponseOutput {
	return o
}

func (o SynapseNotebookReferenceResponseOutput) ToSynapseNotebookReferenceResponseOutputWithContext(ctx context.Context) SynapseNotebookReferenceResponseOutput {
	return o
}

// Reference notebook name. Type: string (or Expression with resultType string).
func (o SynapseNotebookReferenceResponseOutput) ReferenceName() pulumi.AnyOutput {
	return o.ApplyT(func(v SynapseNotebookReferenceResponse) interface{} { return v.ReferenceName }).(pulumi.AnyOutput)
}

// Synapse notebook reference type.
func (o SynapseNotebookReferenceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SynapseNotebookReferenceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Execute spark job activity.
type SynapseSparkJobDefinitionActivity struct {
	// User specified arguments to SynapseSparkJobDefinitionActivity.
	Arguments []interface{} `pulumi:"arguments"`
	// The fully-qualified identifier or the main class that is in the main definition file, which will override the 'className' of the spark job definition you provide. Type: string (or Expression with resultType string).
	ClassName interface{} `pulumi:"className"`
	// Spark configuration properties, which will override the 'conf' of the spark job definition you provide.
	Conf interface{} `pulumi:"conf"`
	// The type of the spark config.
	ConfigurationType *string `pulumi:"configurationType"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Number of core and memory to be used for driver allocated in the specified Spark pool for the job, which will be used for overriding 'driverCores' and 'driverMemory' of the spark job definition you provide. Type: string (or Expression with resultType string).
	DriverSize interface{} `pulumi:"driverSize"`
	// Number of core and memory to be used for executors allocated in the specified Spark pool for the job, which will be used for overriding 'executorCores' and 'executorMemory' of the spark job definition you provide. Type: string (or Expression with resultType string).
	ExecutorSize interface{} `pulumi:"executorSize"`
	// The main file used for the job, which will override the 'file' of the spark job definition you provide. Type: string (or Expression with resultType string).
	File interface{} `pulumi:"file"`
	// (Deprecated. Please use pythonCodeReference and filesV2) Additional files used for reference in the main definition file, which will override the 'files' of the spark job definition you provide.
	Files []interface{} `pulumi:"files"`
	// Additional files used for reference in the main definition file, which will override the 'jars' and 'files' of the spark job definition you provide.
	FilesV2 []interface{} `pulumi:"filesV2"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Number of executors to launch for this job, which will override the 'numExecutors' of the spark job definition you provide. Type: integer (or Expression with resultType integer).
	NumExecutors interface{} `pulumi:"numExecutors"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Additional python code files used for reference in the main definition file, which will override the 'pyFiles' of the spark job definition you provide.
	PythonCodeReference []interface{} `pulumi:"pythonCodeReference"`
	// Scanning subfolders from the root folder of the main definition file, these files will be added as reference files. The folders named 'jars', 'pyFiles', 'files' or 'archives' will be scanned, and the folders name are case sensitive. Type: boolean (or Expression with resultType boolean).
	ScanFolder interface{} `pulumi:"scanFolder"`
	// Spark configuration property.
	SparkConfig map[string]interface{} `pulumi:"sparkConfig"`
	// Synapse spark job reference.
	SparkJob SynapseSparkJobReference `pulumi:"sparkJob"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// The name of the big data pool which will be used to execute the spark batch job, which will override the 'targetBigDataPool' of the spark job definition you provide.
	TargetBigDataPool *BigDataPoolParametrizationReference `pulumi:"targetBigDataPool"`
	// The spark configuration of the spark job.
	TargetSparkConfiguration *SparkConfigurationParametrizationReference `pulumi:"targetSparkConfiguration"`
	// Type of activity.
	// Expected value is 'SparkJob'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// SynapseSparkJobDefinitionActivityInput is an input type that accepts SynapseSparkJobDefinitionActivityArgs and SynapseSparkJobDefinitionActivityOutput values.
// You can construct a concrete instance of `SynapseSparkJobDefinitionActivityInput` via:
//
//	SynapseSparkJobDefinitionActivityArgs{...}
type SynapseSparkJobDefinitionActivityInput interface {
	pulumi.Input

	ToSynapseSparkJobDefinitionActivityOutput() SynapseSparkJobDefinitionActivityOutput
	ToSynapseSparkJobDefinitionActivityOutputWithContext(context.Context) SynapseSparkJobDefinitionActivityOutput
}

// Execute spark job activity.
type SynapseSparkJobDefinitionActivityArgs struct {
	// User specified arguments to SynapseSparkJobDefinitionActivity.
	Arguments pulumi.ArrayInput `pulumi:"arguments"`
	// The fully-qualified identifier or the main class that is in the main definition file, which will override the 'className' of the spark job definition you provide. Type: string (or Expression with resultType string).
	ClassName pulumi.Input `pulumi:"className"`
	// Spark configuration properties, which will override the 'conf' of the spark job definition you provide.
	Conf pulumi.Input `pulumi:"conf"`
	// The type of the spark config.
	ConfigurationType pulumi.StringPtrInput `pulumi:"configurationType"`
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Number of core and memory to be used for driver allocated in the specified Spark pool for the job, which will be used for overriding 'driverCores' and 'driverMemory' of the spark job definition you provide. Type: string (or Expression with resultType string).
	DriverSize pulumi.Input `pulumi:"driverSize"`
	// Number of core and memory to be used for executors allocated in the specified Spark pool for the job, which will be used for overriding 'executorCores' and 'executorMemory' of the spark job definition you provide. Type: string (or Expression with resultType string).
	ExecutorSize pulumi.Input `pulumi:"executorSize"`
	// The main file used for the job, which will override the 'file' of the spark job definition you provide. Type: string (or Expression with resultType string).
	File pulumi.Input `pulumi:"file"`
	// (Deprecated. Please use pythonCodeReference and filesV2) Additional files used for reference in the main definition file, which will override the 'files' of the spark job definition you provide.
	Files pulumi.ArrayInput `pulumi:"files"`
	// Additional files used for reference in the main definition file, which will override the 'jars' and 'files' of the spark job definition you provide.
	FilesV2 pulumi.ArrayInput `pulumi:"filesV2"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferencePtrInput `pulumi:"linkedServiceName"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Number of executors to launch for this job, which will override the 'numExecutors' of the spark job definition you provide. Type: integer (or Expression with resultType integer).
	NumExecutors pulumi.Input `pulumi:"numExecutors"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs pulumi.StringPtrInput `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy ActivityPolicyPtrInput `pulumi:"policy"`
	// Additional python code files used for reference in the main definition file, which will override the 'pyFiles' of the spark job definition you provide.
	PythonCodeReference pulumi.ArrayInput `pulumi:"pythonCodeReference"`
	// Scanning subfolders from the root folder of the main definition file, these files will be added as reference files. The folders named 'jars', 'pyFiles', 'files' or 'archives' will be scanned, and the folders name are case sensitive. Type: boolean (or Expression with resultType boolean).
	ScanFolder pulumi.Input `pulumi:"scanFolder"`
	// Spark configuration property.
	SparkConfig pulumi.MapInput `pulumi:"sparkConfig"`
	// Synapse spark job reference.
	SparkJob SynapseSparkJobReferenceInput `pulumi:"sparkJob"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State pulumi.StringPtrInput `pulumi:"state"`
	// The name of the big data pool which will be used to execute the spark batch job, which will override the 'targetBigDataPool' of the spark job definition you provide.
	TargetBigDataPool BigDataPoolParametrizationReferencePtrInput `pulumi:"targetBigDataPool"`
	// The spark configuration of the spark job.
	TargetSparkConfiguration SparkConfigurationParametrizationReferencePtrInput `pulumi:"targetSparkConfiguration"`
	// Type of activity.
	// Expected value is 'SparkJob'.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
}

func (SynapseSparkJobDefinitionActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SynapseSparkJobDefinitionActivity)(nil)).Elem()
}

func (i SynapseSparkJobDefinitionActivityArgs) ToSynapseSparkJobDefinitionActivityOutput() SynapseSparkJobDefinitionActivityOutput {
	return i.ToSynapseSparkJobDefinitionActivityOutputWithContext(context.Background())
}

func (i SynapseSparkJobDefinitionActivityArgs) ToSynapseSparkJobDefinitionActivityOutputWithContext(ctx context.Context) SynapseSparkJobDefinitionActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SynapseSparkJobDefinitionActivityOutput)
}

// Execute spark job activity.
type SynapseSparkJobDefinitionActivityOutput struct{ *pulumi.OutputState }

func (SynapseSparkJobDefinitionActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SynapseSparkJobDefinitionActivity)(nil)).Elem()
}

func (o SynapseSparkJobDefinitionActivityOutput) ToSynapseSparkJobDefinitionActivityOutput() SynapseSparkJobDefinitionActivityOutput {
	return o
}

func (o SynapseSparkJobDefinitionActivityOutput) ToSynapseSparkJobDefinitionActivityOutputWithContext(ctx context.Context) SynapseSparkJobDefinitionActivityOutput {
	return o
}

// User specified arguments to SynapseSparkJobDefinitionActivity.
func (o SynapseSparkJobDefinitionActivityOutput) Arguments() pulumi.ArrayOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivity) []interface{} { return v.Arguments }).(pulumi.ArrayOutput)
}

// The fully-qualified identifier or the main class that is in the main definition file, which will override the 'className' of the spark job definition you provide. Type: string (or Expression with resultType string).
func (o SynapseSparkJobDefinitionActivityOutput) ClassName() pulumi.AnyOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivity) interface{} { return v.ClassName }).(pulumi.AnyOutput)
}

// Spark configuration properties, which will override the 'conf' of the spark job definition you provide.
func (o SynapseSparkJobDefinitionActivityOutput) Conf() pulumi.AnyOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivity) interface{} { return v.Conf }).(pulumi.AnyOutput)
}

// The type of the spark config.
func (o SynapseSparkJobDefinitionActivityOutput) ConfigurationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivity) *string { return v.ConfigurationType }).(pulumi.StringPtrOutput)
}

// Activity depends on condition.
func (o SynapseSparkJobDefinitionActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o SynapseSparkJobDefinitionActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Number of core and memory to be used for driver allocated in the specified Spark pool for the job, which will be used for overriding 'driverCores' and 'driverMemory' of the spark job definition you provide. Type: string (or Expression with resultType string).
func (o SynapseSparkJobDefinitionActivityOutput) DriverSize() pulumi.AnyOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivity) interface{} { return v.DriverSize }).(pulumi.AnyOutput)
}

// Number of core and memory to be used for executors allocated in the specified Spark pool for the job, which will be used for overriding 'executorCores' and 'executorMemory' of the spark job definition you provide. Type: string (or Expression with resultType string).
func (o SynapseSparkJobDefinitionActivityOutput) ExecutorSize() pulumi.AnyOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivity) interface{} { return v.ExecutorSize }).(pulumi.AnyOutput)
}

// The main file used for the job, which will override the 'file' of the spark job definition you provide. Type: string (or Expression with resultType string).
func (o SynapseSparkJobDefinitionActivityOutput) File() pulumi.AnyOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivity) interface{} { return v.File }).(pulumi.AnyOutput)
}

// (Deprecated. Please use pythonCodeReference and filesV2) Additional files used for reference in the main definition file, which will override the 'files' of the spark job definition you provide.
func (o SynapseSparkJobDefinitionActivityOutput) Files() pulumi.ArrayOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivity) []interface{} { return v.Files }).(pulumi.ArrayOutput)
}

// Additional files used for reference in the main definition file, which will override the 'jars' and 'files' of the spark job definition you provide.
func (o SynapseSparkJobDefinitionActivityOutput) FilesV2() pulumi.ArrayOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivity) []interface{} { return v.FilesV2 }).(pulumi.ArrayOutput)
}

// Linked service reference.
func (o SynapseSparkJobDefinitionActivityOutput) LinkedServiceName() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivity) *LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferencePtrOutput)
}

// Activity name.
func (o SynapseSparkJobDefinitionActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivity) string { return v.Name }).(pulumi.StringOutput)
}

// Number of executors to launch for this job, which will override the 'numExecutors' of the spark job definition you provide. Type: integer (or Expression with resultType integer).
func (o SynapseSparkJobDefinitionActivityOutput) NumExecutors() pulumi.AnyOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivity) interface{} { return v.NumExecutors }).(pulumi.AnyOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o SynapseSparkJobDefinitionActivityOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivity) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o SynapseSparkJobDefinitionActivityOutput) Policy() ActivityPolicyPtrOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivity) *ActivityPolicy { return v.Policy }).(ActivityPolicyPtrOutput)
}

// Additional python code files used for reference in the main definition file, which will override the 'pyFiles' of the spark job definition you provide.
func (o SynapseSparkJobDefinitionActivityOutput) PythonCodeReference() pulumi.ArrayOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivity) []interface{} { return v.PythonCodeReference }).(pulumi.ArrayOutput)
}

// Scanning subfolders from the root folder of the main definition file, these files will be added as reference files. The folders named 'jars', 'pyFiles', 'files' or 'archives' will be scanned, and the folders name are case sensitive. Type: boolean (or Expression with resultType boolean).
func (o SynapseSparkJobDefinitionActivityOutput) ScanFolder() pulumi.AnyOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivity) interface{} { return v.ScanFolder }).(pulumi.AnyOutput)
}

// Spark configuration property.
func (o SynapseSparkJobDefinitionActivityOutput) SparkConfig() pulumi.MapOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivity) map[string]interface{} { return v.SparkConfig }).(pulumi.MapOutput)
}

// Synapse spark job reference.
func (o SynapseSparkJobDefinitionActivityOutput) SparkJob() SynapseSparkJobReferenceOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivity) SynapseSparkJobReference { return v.SparkJob }).(SynapseSparkJobReferenceOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o SynapseSparkJobDefinitionActivityOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivity) *string { return v.State }).(pulumi.StringPtrOutput)
}

// The name of the big data pool which will be used to execute the spark batch job, which will override the 'targetBigDataPool' of the spark job definition you provide.
func (o SynapseSparkJobDefinitionActivityOutput) TargetBigDataPool() BigDataPoolParametrizationReferencePtrOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivity) *BigDataPoolParametrizationReference {
		return v.TargetBigDataPool
	}).(BigDataPoolParametrizationReferencePtrOutput)
}

// The spark configuration of the spark job.
func (o SynapseSparkJobDefinitionActivityOutput) TargetSparkConfiguration() SparkConfigurationParametrizationReferencePtrOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivity) *SparkConfigurationParametrizationReference {
		return v.TargetSparkConfiguration
	}).(SparkConfigurationParametrizationReferencePtrOutput)
}

// Type of activity.
// Expected value is 'SparkJob'.
func (o SynapseSparkJobDefinitionActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivity) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o SynapseSparkJobDefinitionActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

// Execute spark job activity.
type SynapseSparkJobDefinitionActivityResponse struct {
	// User specified arguments to SynapseSparkJobDefinitionActivity.
	Arguments []interface{} `pulumi:"arguments"`
	// The fully-qualified identifier or the main class that is in the main definition file, which will override the 'className' of the spark job definition you provide. Type: string (or Expression with resultType string).
	ClassName interface{} `pulumi:"className"`
	// Spark configuration properties, which will override the 'conf' of the spark job definition you provide.
	Conf interface{} `pulumi:"conf"`
	// The type of the spark config.
	ConfigurationType *string `pulumi:"configurationType"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Number of core and memory to be used for driver allocated in the specified Spark pool for the job, which will be used for overriding 'driverCores' and 'driverMemory' of the spark job definition you provide. Type: string (or Expression with resultType string).
	DriverSize interface{} `pulumi:"driverSize"`
	// Number of core and memory to be used for executors allocated in the specified Spark pool for the job, which will be used for overriding 'executorCores' and 'executorMemory' of the spark job definition you provide. Type: string (or Expression with resultType string).
	ExecutorSize interface{} `pulumi:"executorSize"`
	// The main file used for the job, which will override the 'file' of the spark job definition you provide. Type: string (or Expression with resultType string).
	File interface{} `pulumi:"file"`
	// (Deprecated. Please use pythonCodeReference and filesV2) Additional files used for reference in the main definition file, which will override the 'files' of the spark job definition you provide.
	Files []interface{} `pulumi:"files"`
	// Additional files used for reference in the main definition file, which will override the 'jars' and 'files' of the spark job definition you provide.
	FilesV2 []interface{} `pulumi:"filesV2"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Number of executors to launch for this job, which will override the 'numExecutors' of the spark job definition you provide. Type: integer (or Expression with resultType integer).
	NumExecutors interface{} `pulumi:"numExecutors"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Additional python code files used for reference in the main definition file, which will override the 'pyFiles' of the spark job definition you provide.
	PythonCodeReference []interface{} `pulumi:"pythonCodeReference"`
	// Scanning subfolders from the root folder of the main definition file, these files will be added as reference files. The folders named 'jars', 'pyFiles', 'files' or 'archives' will be scanned, and the folders name are case sensitive. Type: boolean (or Expression with resultType boolean).
	ScanFolder interface{} `pulumi:"scanFolder"`
	// Spark configuration property.
	SparkConfig map[string]interface{} `pulumi:"sparkConfig"`
	// Synapse spark job reference.
	SparkJob SynapseSparkJobReferenceResponse `pulumi:"sparkJob"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// The name of the big data pool which will be used to execute the spark batch job, which will override the 'targetBigDataPool' of the spark job definition you provide.
	TargetBigDataPool *BigDataPoolParametrizationReferenceResponse `pulumi:"targetBigDataPool"`
	// The spark configuration of the spark job.
	TargetSparkConfiguration *SparkConfigurationParametrizationReferenceResponse `pulumi:"targetSparkConfiguration"`
	// Type of activity.
	// Expected value is 'SparkJob'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Execute spark job activity.
type SynapseSparkJobDefinitionActivityResponseOutput struct{ *pulumi.OutputState }

func (SynapseSparkJobDefinitionActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SynapseSparkJobDefinitionActivityResponse)(nil)).Elem()
}

func (o SynapseSparkJobDefinitionActivityResponseOutput) ToSynapseSparkJobDefinitionActivityResponseOutput() SynapseSparkJobDefinitionActivityResponseOutput {
	return o
}

func (o SynapseSparkJobDefinitionActivityResponseOutput) ToSynapseSparkJobDefinitionActivityResponseOutputWithContext(ctx context.Context) SynapseSparkJobDefinitionActivityResponseOutput {
	return o
}

// User specified arguments to SynapseSparkJobDefinitionActivity.
func (o SynapseSparkJobDefinitionActivityResponseOutput) Arguments() pulumi.ArrayOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivityResponse) []interface{} { return v.Arguments }).(pulumi.ArrayOutput)
}

// The fully-qualified identifier or the main class that is in the main definition file, which will override the 'className' of the spark job definition you provide. Type: string (or Expression with resultType string).
func (o SynapseSparkJobDefinitionActivityResponseOutput) ClassName() pulumi.AnyOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivityResponse) interface{} { return v.ClassName }).(pulumi.AnyOutput)
}

// Spark configuration properties, which will override the 'conf' of the spark job definition you provide.
func (o SynapseSparkJobDefinitionActivityResponseOutput) Conf() pulumi.AnyOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivityResponse) interface{} { return v.Conf }).(pulumi.AnyOutput)
}

// The type of the spark config.
func (o SynapseSparkJobDefinitionActivityResponseOutput) ConfigurationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivityResponse) *string { return v.ConfigurationType }).(pulumi.StringPtrOutput)
}

// Activity depends on condition.
func (o SynapseSparkJobDefinitionActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o SynapseSparkJobDefinitionActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Number of core and memory to be used for driver allocated in the specified Spark pool for the job, which will be used for overriding 'driverCores' and 'driverMemory' of the spark job definition you provide. Type: string (or Expression with resultType string).
func (o SynapseSparkJobDefinitionActivityResponseOutput) DriverSize() pulumi.AnyOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivityResponse) interface{} { return v.DriverSize }).(pulumi.AnyOutput)
}

// Number of core and memory to be used for executors allocated in the specified Spark pool for the job, which will be used for overriding 'executorCores' and 'executorMemory' of the spark job definition you provide. Type: string (or Expression with resultType string).
func (o SynapseSparkJobDefinitionActivityResponseOutput) ExecutorSize() pulumi.AnyOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivityResponse) interface{} { return v.ExecutorSize }).(pulumi.AnyOutput)
}

// The main file used for the job, which will override the 'file' of the spark job definition you provide. Type: string (or Expression with resultType string).
func (o SynapseSparkJobDefinitionActivityResponseOutput) File() pulumi.AnyOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivityResponse) interface{} { return v.File }).(pulumi.AnyOutput)
}

// (Deprecated. Please use pythonCodeReference and filesV2) Additional files used for reference in the main definition file, which will override the 'files' of the spark job definition you provide.
func (o SynapseSparkJobDefinitionActivityResponseOutput) Files() pulumi.ArrayOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivityResponse) []interface{} { return v.Files }).(pulumi.ArrayOutput)
}

// Additional files used for reference in the main definition file, which will override the 'jars' and 'files' of the spark job definition you provide.
func (o SynapseSparkJobDefinitionActivityResponseOutput) FilesV2() pulumi.ArrayOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivityResponse) []interface{} { return v.FilesV2 }).(pulumi.ArrayOutput)
}

// Linked service reference.
func (o SynapseSparkJobDefinitionActivityResponseOutput) LinkedServiceName() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivityResponse) *LinkedServiceReferenceResponse {
		return v.LinkedServiceName
	}).(LinkedServiceReferenceResponsePtrOutput)
}

// Activity name.
func (o SynapseSparkJobDefinitionActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Number of executors to launch for this job, which will override the 'numExecutors' of the spark job definition you provide. Type: integer (or Expression with resultType integer).
func (o SynapseSparkJobDefinitionActivityResponseOutput) NumExecutors() pulumi.AnyOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivityResponse) interface{} { return v.NumExecutors }).(pulumi.AnyOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o SynapseSparkJobDefinitionActivityResponseOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivityResponse) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o SynapseSparkJobDefinitionActivityResponseOutput) Policy() ActivityPolicyResponsePtrOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivityResponse) *ActivityPolicyResponse { return v.Policy }).(ActivityPolicyResponsePtrOutput)
}

// Additional python code files used for reference in the main definition file, which will override the 'pyFiles' of the spark job definition you provide.
func (o SynapseSparkJobDefinitionActivityResponseOutput) PythonCodeReference() pulumi.ArrayOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivityResponse) []interface{} { return v.PythonCodeReference }).(pulumi.ArrayOutput)
}

// Scanning subfolders from the root folder of the main definition file, these files will be added as reference files. The folders named 'jars', 'pyFiles', 'files' or 'archives' will be scanned, and the folders name are case sensitive. Type: boolean (or Expression with resultType boolean).
func (o SynapseSparkJobDefinitionActivityResponseOutput) ScanFolder() pulumi.AnyOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivityResponse) interface{} { return v.ScanFolder }).(pulumi.AnyOutput)
}

// Spark configuration property.
func (o SynapseSparkJobDefinitionActivityResponseOutput) SparkConfig() pulumi.MapOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivityResponse) map[string]interface{} { return v.SparkConfig }).(pulumi.MapOutput)
}

// Synapse spark job reference.
func (o SynapseSparkJobDefinitionActivityResponseOutput) SparkJob() SynapseSparkJobReferenceResponseOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivityResponse) SynapseSparkJobReferenceResponse { return v.SparkJob }).(SynapseSparkJobReferenceResponseOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o SynapseSparkJobDefinitionActivityResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivityResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// The name of the big data pool which will be used to execute the spark batch job, which will override the 'targetBigDataPool' of the spark job definition you provide.
func (o SynapseSparkJobDefinitionActivityResponseOutput) TargetBigDataPool() BigDataPoolParametrizationReferenceResponsePtrOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivityResponse) *BigDataPoolParametrizationReferenceResponse {
		return v.TargetBigDataPool
	}).(BigDataPoolParametrizationReferenceResponsePtrOutput)
}

// The spark configuration of the spark job.
func (o SynapseSparkJobDefinitionActivityResponseOutput) TargetSparkConfiguration() SparkConfigurationParametrizationReferenceResponsePtrOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivityResponse) *SparkConfigurationParametrizationReferenceResponse {
		return v.TargetSparkConfiguration
	}).(SparkConfigurationParametrizationReferenceResponsePtrOutput)
}

// Type of activity.
// Expected value is 'SparkJob'.
func (o SynapseSparkJobDefinitionActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o SynapseSparkJobDefinitionActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v SynapseSparkJobDefinitionActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

// Synapse spark job reference type.
type SynapseSparkJobReference struct {
	// Reference spark job name. Expression with resultType string.
	ReferenceName interface{} `pulumi:"referenceName"`
	// Synapse spark job reference type.
	Type string `pulumi:"type"`
}

// SynapseSparkJobReferenceInput is an input type that accepts SynapseSparkJobReferenceArgs and SynapseSparkJobReferenceOutput values.
// You can construct a concrete instance of `SynapseSparkJobReferenceInput` via:
//
//	SynapseSparkJobReferenceArgs{...}
type SynapseSparkJobReferenceInput interface {
	pulumi.Input

	ToSynapseSparkJobReferenceOutput() SynapseSparkJobReferenceOutput
	ToSynapseSparkJobReferenceOutputWithContext(context.Context) SynapseSparkJobReferenceOutput
}

// Synapse spark job reference type.
type SynapseSparkJobReferenceArgs struct {
	// Reference spark job name. Expression with resultType string.
	ReferenceName pulumi.Input `pulumi:"referenceName"`
	// Synapse spark job reference type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SynapseSparkJobReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SynapseSparkJobReference)(nil)).Elem()
}

func (i SynapseSparkJobReferenceArgs) ToSynapseSparkJobReferenceOutput() SynapseSparkJobReferenceOutput {
	return i.ToSynapseSparkJobReferenceOutputWithContext(context.Background())
}

func (i SynapseSparkJobReferenceArgs) ToSynapseSparkJobReferenceOutputWithContext(ctx context.Context) SynapseSparkJobReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SynapseSparkJobReferenceOutput)
}

// Synapse spark job reference type.
type SynapseSparkJobReferenceOutput struct{ *pulumi.OutputState }

func (SynapseSparkJobReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SynapseSparkJobReference)(nil)).Elem()
}

func (o SynapseSparkJobReferenceOutput) ToSynapseSparkJobReferenceOutput() SynapseSparkJobReferenceOutput {
	return o
}

func (o SynapseSparkJobReferenceOutput) ToSynapseSparkJobReferenceOutputWithContext(ctx context.Context) SynapseSparkJobReferenceOutput {
	return o
}

// Reference spark job name. Expression with resultType string.
func (o SynapseSparkJobReferenceOutput) ReferenceName() pulumi.AnyOutput {
	return o.ApplyT(func(v SynapseSparkJobReference) interface{} { return v.ReferenceName }).(pulumi.AnyOutput)
}

// Synapse spark job reference type.
func (o SynapseSparkJobReferenceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SynapseSparkJobReference) string { return v.Type }).(pulumi.StringOutput)
}

// Synapse spark job reference type.
type SynapseSparkJobReferenceResponse struct {
	// Reference spark job name. Expression with resultType string.
	ReferenceName interface{} `pulumi:"referenceName"`
	// Synapse spark job reference type.
	Type string `pulumi:"type"`
}

// Synapse spark job reference type.
type SynapseSparkJobReferenceResponseOutput struct{ *pulumi.OutputState }

func (SynapseSparkJobReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SynapseSparkJobReferenceResponse)(nil)).Elem()
}

func (o SynapseSparkJobReferenceResponseOutput) ToSynapseSparkJobReferenceResponseOutput() SynapseSparkJobReferenceResponseOutput {
	return o
}

func (o SynapseSparkJobReferenceResponseOutput) ToSynapseSparkJobReferenceResponseOutputWithContext(ctx context.Context) SynapseSparkJobReferenceResponseOutput {
	return o
}

// Reference spark job name. Expression with resultType string.
func (o SynapseSparkJobReferenceResponseOutput) ReferenceName() pulumi.AnyOutput {
	return o.ApplyT(func(v SynapseSparkJobReferenceResponse) interface{} { return v.ReferenceName }).(pulumi.AnyOutput)
}

// Synapse spark job reference type.
func (o SynapseSparkJobReferenceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SynapseSparkJobReferenceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Copy activity sources of tabular type.
type TabularSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'TabularSource'.
	Type string `pulumi:"type"`
}

// TabularSourceInput is an input type that accepts TabularSourceArgs and TabularSourceOutput values.
// You can construct a concrete instance of `TabularSourceInput` via:
//
//	TabularSourceArgs{...}
type TabularSourceInput interface {
	pulumi.Input

	ToTabularSourceOutput() TabularSourceOutput
	ToTabularSourceOutputWithContext(context.Context) TabularSourceOutput
}

// Copy activity sources of tabular type.
type TabularSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'TabularSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TabularSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TabularSource)(nil)).Elem()
}

func (i TabularSourceArgs) ToTabularSourceOutput() TabularSourceOutput {
	return i.ToTabularSourceOutputWithContext(context.Background())
}

func (i TabularSourceArgs) ToTabularSourceOutputWithContext(ctx context.Context) TabularSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TabularSourceOutput)
}

// Copy activity sources of tabular type.
type TabularSourceOutput struct{ *pulumi.OutputState }

func (TabularSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TabularSource)(nil)).Elem()
}

func (o TabularSourceOutput) ToTabularSourceOutput() TabularSourceOutput {
	return o
}

func (o TabularSourceOutput) ToTabularSourceOutputWithContext(ctx context.Context) TabularSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o TabularSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v TabularSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o TabularSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v TabularSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o TabularSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v TabularSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o TabularSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v TabularSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o TabularSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v TabularSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o TabularSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v TabularSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'TabularSource'.
func (o TabularSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TabularSource) string { return v.Type }).(pulumi.StringOutput)
}

// Copy activity sources of tabular type.
type TabularSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'TabularSource'.
	Type string `pulumi:"type"`
}

// Copy activity sources of tabular type.
type TabularSourceResponseOutput struct{ *pulumi.OutputState }

func (TabularSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TabularSourceResponse)(nil)).Elem()
}

func (o TabularSourceResponseOutput) ToTabularSourceResponseOutput() TabularSourceResponseOutput {
	return o
}

func (o TabularSourceResponseOutput) ToTabularSourceResponseOutputWithContext(ctx context.Context) TabularSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o TabularSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v TabularSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o TabularSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v TabularSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o TabularSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v TabularSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o TabularSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v TabularSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o TabularSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v TabularSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o TabularSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v TabularSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'TabularSource'.
func (o TabularSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TabularSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The TarGZip compression read settings.
type TarGZipReadSettings struct {
	// Preserve the compression file name as folder path. Type: boolean (or Expression with resultType boolean).
	PreserveCompressionFileNameAsFolder interface{} `pulumi:"preserveCompressionFileNameAsFolder"`
	// The Compression setting type.
	// Expected value is 'TarGZipReadSettings'.
	Type string `pulumi:"type"`
}

// TarGZipReadSettingsInput is an input type that accepts TarGZipReadSettingsArgs and TarGZipReadSettingsOutput values.
// You can construct a concrete instance of `TarGZipReadSettingsInput` via:
//
//	TarGZipReadSettingsArgs{...}
type TarGZipReadSettingsInput interface {
	pulumi.Input

	ToTarGZipReadSettingsOutput() TarGZipReadSettingsOutput
	ToTarGZipReadSettingsOutputWithContext(context.Context) TarGZipReadSettingsOutput
}

// The TarGZip compression read settings.
type TarGZipReadSettingsArgs struct {
	// Preserve the compression file name as folder path. Type: boolean (or Expression with resultType boolean).
	PreserveCompressionFileNameAsFolder pulumi.Input `pulumi:"preserveCompressionFileNameAsFolder"`
	// The Compression setting type.
	// Expected value is 'TarGZipReadSettings'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TarGZipReadSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TarGZipReadSettings)(nil)).Elem()
}

func (i TarGZipReadSettingsArgs) ToTarGZipReadSettingsOutput() TarGZipReadSettingsOutput {
	return i.ToTarGZipReadSettingsOutputWithContext(context.Background())
}

func (i TarGZipReadSettingsArgs) ToTarGZipReadSettingsOutputWithContext(ctx context.Context) TarGZipReadSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TarGZipReadSettingsOutput)
}

func (i TarGZipReadSettingsArgs) ToTarGZipReadSettingsPtrOutput() TarGZipReadSettingsPtrOutput {
	return i.ToTarGZipReadSettingsPtrOutputWithContext(context.Background())
}

func (i TarGZipReadSettingsArgs) ToTarGZipReadSettingsPtrOutputWithContext(ctx context.Context) TarGZipReadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TarGZipReadSettingsOutput).ToTarGZipReadSettingsPtrOutputWithContext(ctx)
}

// TarGZipReadSettingsPtrInput is an input type that accepts TarGZipReadSettingsArgs, TarGZipReadSettingsPtr and TarGZipReadSettingsPtrOutput values.
// You can construct a concrete instance of `TarGZipReadSettingsPtrInput` via:
//
//	        TarGZipReadSettingsArgs{...}
//
//	or:
//
//	        nil
type TarGZipReadSettingsPtrInput interface {
	pulumi.Input

	ToTarGZipReadSettingsPtrOutput() TarGZipReadSettingsPtrOutput
	ToTarGZipReadSettingsPtrOutputWithContext(context.Context) TarGZipReadSettingsPtrOutput
}

type tarGZipReadSettingsPtrType TarGZipReadSettingsArgs

func TarGZipReadSettingsPtr(v *TarGZipReadSettingsArgs) TarGZipReadSettingsPtrInput {
	return (*tarGZipReadSettingsPtrType)(v)
}

func (*tarGZipReadSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TarGZipReadSettings)(nil)).Elem()
}

func (i *tarGZipReadSettingsPtrType) ToTarGZipReadSettingsPtrOutput() TarGZipReadSettingsPtrOutput {
	return i.ToTarGZipReadSettingsPtrOutputWithContext(context.Background())
}

func (i *tarGZipReadSettingsPtrType) ToTarGZipReadSettingsPtrOutputWithContext(ctx context.Context) TarGZipReadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TarGZipReadSettingsPtrOutput)
}

// The TarGZip compression read settings.
type TarGZipReadSettingsOutput struct{ *pulumi.OutputState }

func (TarGZipReadSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TarGZipReadSettings)(nil)).Elem()
}

func (o TarGZipReadSettingsOutput) ToTarGZipReadSettingsOutput() TarGZipReadSettingsOutput {
	return o
}

func (o TarGZipReadSettingsOutput) ToTarGZipReadSettingsOutputWithContext(ctx context.Context) TarGZipReadSettingsOutput {
	return o
}

func (o TarGZipReadSettingsOutput) ToTarGZipReadSettingsPtrOutput() TarGZipReadSettingsPtrOutput {
	return o.ToTarGZipReadSettingsPtrOutputWithContext(context.Background())
}

func (o TarGZipReadSettingsOutput) ToTarGZipReadSettingsPtrOutputWithContext(ctx context.Context) TarGZipReadSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TarGZipReadSettings) *TarGZipReadSettings {
		return &v
	}).(TarGZipReadSettingsPtrOutput)
}

// Preserve the compression file name as folder path. Type: boolean (or Expression with resultType boolean).
func (o TarGZipReadSettingsOutput) PreserveCompressionFileNameAsFolder() pulumi.AnyOutput {
	return o.ApplyT(func(v TarGZipReadSettings) interface{} { return v.PreserveCompressionFileNameAsFolder }).(pulumi.AnyOutput)
}

// The Compression setting type.
// Expected value is 'TarGZipReadSettings'.
func (o TarGZipReadSettingsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TarGZipReadSettings) string { return v.Type }).(pulumi.StringOutput)
}

type TarGZipReadSettingsPtrOutput struct{ *pulumi.OutputState }

func (TarGZipReadSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TarGZipReadSettings)(nil)).Elem()
}

func (o TarGZipReadSettingsPtrOutput) ToTarGZipReadSettingsPtrOutput() TarGZipReadSettingsPtrOutput {
	return o
}

func (o TarGZipReadSettingsPtrOutput) ToTarGZipReadSettingsPtrOutputWithContext(ctx context.Context) TarGZipReadSettingsPtrOutput {
	return o
}

func (o TarGZipReadSettingsPtrOutput) Elem() TarGZipReadSettingsOutput {
	return o.ApplyT(func(v *TarGZipReadSettings) TarGZipReadSettings {
		if v != nil {
			return *v
		}
		var ret TarGZipReadSettings
		return ret
	}).(TarGZipReadSettingsOutput)
}

// Preserve the compression file name as folder path. Type: boolean (or Expression with resultType boolean).
func (o TarGZipReadSettingsPtrOutput) PreserveCompressionFileNameAsFolder() pulumi.AnyOutput {
	return o.ApplyT(func(v *TarGZipReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.PreserveCompressionFileNameAsFolder
	}).(pulumi.AnyOutput)
}

// The Compression setting type.
// Expected value is 'TarGZipReadSettings'.
func (o TarGZipReadSettingsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TarGZipReadSettings) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The TarGZip compression read settings.
type TarGZipReadSettingsResponse struct {
	// Preserve the compression file name as folder path. Type: boolean (or Expression with resultType boolean).
	PreserveCompressionFileNameAsFolder interface{} `pulumi:"preserveCompressionFileNameAsFolder"`
	// The Compression setting type.
	// Expected value is 'TarGZipReadSettings'.
	Type string `pulumi:"type"`
}

// The TarGZip compression read settings.
type TarGZipReadSettingsResponseOutput struct{ *pulumi.OutputState }

func (TarGZipReadSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TarGZipReadSettingsResponse)(nil)).Elem()
}

func (o TarGZipReadSettingsResponseOutput) ToTarGZipReadSettingsResponseOutput() TarGZipReadSettingsResponseOutput {
	return o
}

func (o TarGZipReadSettingsResponseOutput) ToTarGZipReadSettingsResponseOutputWithContext(ctx context.Context) TarGZipReadSettingsResponseOutput {
	return o
}

// Preserve the compression file name as folder path. Type: boolean (or Expression with resultType boolean).
func (o TarGZipReadSettingsResponseOutput) PreserveCompressionFileNameAsFolder() pulumi.AnyOutput {
	return o.ApplyT(func(v TarGZipReadSettingsResponse) interface{} { return v.PreserveCompressionFileNameAsFolder }).(pulumi.AnyOutput)
}

// The Compression setting type.
// Expected value is 'TarGZipReadSettings'.
func (o TarGZipReadSettingsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TarGZipReadSettingsResponse) string { return v.Type }).(pulumi.StringOutput)
}

type TarGZipReadSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (TarGZipReadSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TarGZipReadSettingsResponse)(nil)).Elem()
}

func (o TarGZipReadSettingsResponsePtrOutput) ToTarGZipReadSettingsResponsePtrOutput() TarGZipReadSettingsResponsePtrOutput {
	return o
}

func (o TarGZipReadSettingsResponsePtrOutput) ToTarGZipReadSettingsResponsePtrOutputWithContext(ctx context.Context) TarGZipReadSettingsResponsePtrOutput {
	return o
}

func (o TarGZipReadSettingsResponsePtrOutput) Elem() TarGZipReadSettingsResponseOutput {
	return o.ApplyT(func(v *TarGZipReadSettingsResponse) TarGZipReadSettingsResponse {
		if v != nil {
			return *v
		}
		var ret TarGZipReadSettingsResponse
		return ret
	}).(TarGZipReadSettingsResponseOutput)
}

// Preserve the compression file name as folder path. Type: boolean (or Expression with resultType boolean).
func (o TarGZipReadSettingsResponsePtrOutput) PreserveCompressionFileNameAsFolder() pulumi.AnyOutput {
	return o.ApplyT(func(v *TarGZipReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.PreserveCompressionFileNameAsFolder
	}).(pulumi.AnyOutput)
}

// The Compression setting type.
// Expected value is 'TarGZipReadSettings'.
func (o TarGZipReadSettingsResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TarGZipReadSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The Tar compression read settings.
type TarReadSettings struct {
	// Preserve the compression file name as folder path. Type: boolean (or Expression with resultType boolean).
	PreserveCompressionFileNameAsFolder interface{} `pulumi:"preserveCompressionFileNameAsFolder"`
	// The Compression setting type.
	// Expected value is 'TarReadSettings'.
	Type string `pulumi:"type"`
}

// TarReadSettingsInput is an input type that accepts TarReadSettingsArgs and TarReadSettingsOutput values.
// You can construct a concrete instance of `TarReadSettingsInput` via:
//
//	TarReadSettingsArgs{...}
type TarReadSettingsInput interface {
	pulumi.Input

	ToTarReadSettingsOutput() TarReadSettingsOutput
	ToTarReadSettingsOutputWithContext(context.Context) TarReadSettingsOutput
}

// The Tar compression read settings.
type TarReadSettingsArgs struct {
	// Preserve the compression file name as folder path. Type: boolean (or Expression with resultType boolean).
	PreserveCompressionFileNameAsFolder pulumi.Input `pulumi:"preserveCompressionFileNameAsFolder"`
	// The Compression setting type.
	// Expected value is 'TarReadSettings'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TarReadSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TarReadSettings)(nil)).Elem()
}

func (i TarReadSettingsArgs) ToTarReadSettingsOutput() TarReadSettingsOutput {
	return i.ToTarReadSettingsOutputWithContext(context.Background())
}

func (i TarReadSettingsArgs) ToTarReadSettingsOutputWithContext(ctx context.Context) TarReadSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TarReadSettingsOutput)
}

func (i TarReadSettingsArgs) ToTarReadSettingsPtrOutput() TarReadSettingsPtrOutput {
	return i.ToTarReadSettingsPtrOutputWithContext(context.Background())
}

func (i TarReadSettingsArgs) ToTarReadSettingsPtrOutputWithContext(ctx context.Context) TarReadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TarReadSettingsOutput).ToTarReadSettingsPtrOutputWithContext(ctx)
}

// TarReadSettingsPtrInput is an input type that accepts TarReadSettingsArgs, TarReadSettingsPtr and TarReadSettingsPtrOutput values.
// You can construct a concrete instance of `TarReadSettingsPtrInput` via:
//
//	        TarReadSettingsArgs{...}
//
//	or:
//
//	        nil
type TarReadSettingsPtrInput interface {
	pulumi.Input

	ToTarReadSettingsPtrOutput() TarReadSettingsPtrOutput
	ToTarReadSettingsPtrOutputWithContext(context.Context) TarReadSettingsPtrOutput
}

type tarReadSettingsPtrType TarReadSettingsArgs

func TarReadSettingsPtr(v *TarReadSettingsArgs) TarReadSettingsPtrInput {
	return (*tarReadSettingsPtrType)(v)
}

func (*tarReadSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TarReadSettings)(nil)).Elem()
}

func (i *tarReadSettingsPtrType) ToTarReadSettingsPtrOutput() TarReadSettingsPtrOutput {
	return i.ToTarReadSettingsPtrOutputWithContext(context.Background())
}

func (i *tarReadSettingsPtrType) ToTarReadSettingsPtrOutputWithContext(ctx context.Context) TarReadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TarReadSettingsPtrOutput)
}

// The Tar compression read settings.
type TarReadSettingsOutput struct{ *pulumi.OutputState }

func (TarReadSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TarReadSettings)(nil)).Elem()
}

func (o TarReadSettingsOutput) ToTarReadSettingsOutput() TarReadSettingsOutput {
	return o
}

func (o TarReadSettingsOutput) ToTarReadSettingsOutputWithContext(ctx context.Context) TarReadSettingsOutput {
	return o
}

func (o TarReadSettingsOutput) ToTarReadSettingsPtrOutput() TarReadSettingsPtrOutput {
	return o.ToTarReadSettingsPtrOutputWithContext(context.Background())
}

func (o TarReadSettingsOutput) ToTarReadSettingsPtrOutputWithContext(ctx context.Context) TarReadSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TarReadSettings) *TarReadSettings {
		return &v
	}).(TarReadSettingsPtrOutput)
}

// Preserve the compression file name as folder path. Type: boolean (or Expression with resultType boolean).
func (o TarReadSettingsOutput) PreserveCompressionFileNameAsFolder() pulumi.AnyOutput {
	return o.ApplyT(func(v TarReadSettings) interface{} { return v.PreserveCompressionFileNameAsFolder }).(pulumi.AnyOutput)
}

// The Compression setting type.
// Expected value is 'TarReadSettings'.
func (o TarReadSettingsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TarReadSettings) string { return v.Type }).(pulumi.StringOutput)
}

type TarReadSettingsPtrOutput struct{ *pulumi.OutputState }

func (TarReadSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TarReadSettings)(nil)).Elem()
}

func (o TarReadSettingsPtrOutput) ToTarReadSettingsPtrOutput() TarReadSettingsPtrOutput {
	return o
}

func (o TarReadSettingsPtrOutput) ToTarReadSettingsPtrOutputWithContext(ctx context.Context) TarReadSettingsPtrOutput {
	return o
}

func (o TarReadSettingsPtrOutput) Elem() TarReadSettingsOutput {
	return o.ApplyT(func(v *TarReadSettings) TarReadSettings {
		if v != nil {
			return *v
		}
		var ret TarReadSettings
		return ret
	}).(TarReadSettingsOutput)
}

// Preserve the compression file name as folder path. Type: boolean (or Expression with resultType boolean).
func (o TarReadSettingsPtrOutput) PreserveCompressionFileNameAsFolder() pulumi.AnyOutput {
	return o.ApplyT(func(v *TarReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.PreserveCompressionFileNameAsFolder
	}).(pulumi.AnyOutput)
}

// The Compression setting type.
// Expected value is 'TarReadSettings'.
func (o TarReadSettingsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TarReadSettings) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The Tar compression read settings.
type TarReadSettingsResponse struct {
	// Preserve the compression file name as folder path. Type: boolean (or Expression with resultType boolean).
	PreserveCompressionFileNameAsFolder interface{} `pulumi:"preserveCompressionFileNameAsFolder"`
	// The Compression setting type.
	// Expected value is 'TarReadSettings'.
	Type string `pulumi:"type"`
}

// The Tar compression read settings.
type TarReadSettingsResponseOutput struct{ *pulumi.OutputState }

func (TarReadSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TarReadSettingsResponse)(nil)).Elem()
}

func (o TarReadSettingsResponseOutput) ToTarReadSettingsResponseOutput() TarReadSettingsResponseOutput {
	return o
}

func (o TarReadSettingsResponseOutput) ToTarReadSettingsResponseOutputWithContext(ctx context.Context) TarReadSettingsResponseOutput {
	return o
}

// Preserve the compression file name as folder path. Type: boolean (or Expression with resultType boolean).
func (o TarReadSettingsResponseOutput) PreserveCompressionFileNameAsFolder() pulumi.AnyOutput {
	return o.ApplyT(func(v TarReadSettingsResponse) interface{} { return v.PreserveCompressionFileNameAsFolder }).(pulumi.AnyOutput)
}

// The Compression setting type.
// Expected value is 'TarReadSettings'.
func (o TarReadSettingsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TarReadSettingsResponse) string { return v.Type }).(pulumi.StringOutput)
}

type TarReadSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (TarReadSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TarReadSettingsResponse)(nil)).Elem()
}

func (o TarReadSettingsResponsePtrOutput) ToTarReadSettingsResponsePtrOutput() TarReadSettingsResponsePtrOutput {
	return o
}

func (o TarReadSettingsResponsePtrOutput) ToTarReadSettingsResponsePtrOutputWithContext(ctx context.Context) TarReadSettingsResponsePtrOutput {
	return o
}

func (o TarReadSettingsResponsePtrOutput) Elem() TarReadSettingsResponseOutput {
	return o.ApplyT(func(v *TarReadSettingsResponse) TarReadSettingsResponse {
		if v != nil {
			return *v
		}
		var ret TarReadSettingsResponse
		return ret
	}).(TarReadSettingsResponseOutput)
}

// Preserve the compression file name as folder path. Type: boolean (or Expression with resultType boolean).
func (o TarReadSettingsResponsePtrOutput) PreserveCompressionFileNameAsFolder() pulumi.AnyOutput {
	return o.ApplyT(func(v *TarReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.PreserveCompressionFileNameAsFolder
	}).(pulumi.AnyOutput)
}

// The Compression setting type.
// Expected value is 'TarReadSettings'.
func (o TarReadSettingsResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TarReadSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Linked service for TeamDesk.
type TeamDeskLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The api token for the TeamDesk source.
	ApiToken interface{} `pulumi:"apiToken"`
	// The authentication type to use.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password of the TeamDesk source.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'TeamDesk'.
	Type string `pulumi:"type"`
	// The url to connect TeamDesk source. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// The username of the TeamDesk source. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// TeamDeskLinkedServiceInput is an input type that accepts TeamDeskLinkedServiceArgs and TeamDeskLinkedServiceOutput values.
// You can construct a concrete instance of `TeamDeskLinkedServiceInput` via:
//
//	TeamDeskLinkedServiceArgs{...}
type TeamDeskLinkedServiceInput interface {
	pulumi.Input

	ToTeamDeskLinkedServiceOutput() TeamDeskLinkedServiceOutput
	ToTeamDeskLinkedServiceOutputWithContext(context.Context) TeamDeskLinkedServiceOutput
}

// Linked service for TeamDesk.
type TeamDeskLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The api token for the TeamDesk source.
	ApiToken pulumi.Input `pulumi:"apiToken"`
	// The authentication type to use.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password of the TeamDesk source.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'TeamDesk'.
	Type pulumi.StringInput `pulumi:"type"`
	// The url to connect TeamDesk source. Type: string (or Expression with resultType string).
	Url pulumi.Input `pulumi:"url"`
	// The username of the TeamDesk source. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (TeamDeskLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamDeskLinkedService)(nil)).Elem()
}

func (i TeamDeskLinkedServiceArgs) ToTeamDeskLinkedServiceOutput() TeamDeskLinkedServiceOutput {
	return i.ToTeamDeskLinkedServiceOutputWithContext(context.Background())
}

func (i TeamDeskLinkedServiceArgs) ToTeamDeskLinkedServiceOutputWithContext(ctx context.Context) TeamDeskLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamDeskLinkedServiceOutput)
}

// Linked service for TeamDesk.
type TeamDeskLinkedServiceOutput struct{ *pulumi.OutputState }

func (TeamDeskLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamDeskLinkedService)(nil)).Elem()
}

func (o TeamDeskLinkedServiceOutput) ToTeamDeskLinkedServiceOutput() TeamDeskLinkedServiceOutput {
	return o
}

func (o TeamDeskLinkedServiceOutput) ToTeamDeskLinkedServiceOutputWithContext(ctx context.Context) TeamDeskLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o TeamDeskLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v TeamDeskLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The api token for the TeamDesk source.
func (o TeamDeskLinkedServiceOutput) ApiToken() pulumi.AnyOutput {
	return o.ApplyT(func(v TeamDeskLinkedService) interface{} { return v.ApiToken }).(pulumi.AnyOutput)
}

// The authentication type to use.
func (o TeamDeskLinkedServiceOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v TeamDeskLinkedService) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The integration runtime reference.
func (o TeamDeskLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v TeamDeskLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o TeamDeskLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TeamDeskLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o TeamDeskLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TeamDeskLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o TeamDeskLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v TeamDeskLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The password of the TeamDesk source.
func (o TeamDeskLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v TeamDeskLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'TeamDesk'.
func (o TeamDeskLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TeamDeskLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The url to connect TeamDesk source. Type: string (or Expression with resultType string).
func (o TeamDeskLinkedServiceOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v TeamDeskLinkedService) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// The username of the TeamDesk source. Type: string (or Expression with resultType string).
func (o TeamDeskLinkedServiceOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v TeamDeskLinkedService) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// Linked service for TeamDesk.
type TeamDeskLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The api token for the TeamDesk source.
	ApiToken interface{} `pulumi:"apiToken"`
	// The authentication type to use.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password of the TeamDesk source.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'TeamDesk'.
	Type string `pulumi:"type"`
	// The url to connect TeamDesk source. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// The username of the TeamDesk source. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// Linked service for TeamDesk.
type TeamDeskLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (TeamDeskLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamDeskLinkedServiceResponse)(nil)).Elem()
}

func (o TeamDeskLinkedServiceResponseOutput) ToTeamDeskLinkedServiceResponseOutput() TeamDeskLinkedServiceResponseOutput {
	return o
}

func (o TeamDeskLinkedServiceResponseOutput) ToTeamDeskLinkedServiceResponseOutputWithContext(ctx context.Context) TeamDeskLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o TeamDeskLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v TeamDeskLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The api token for the TeamDesk source.
func (o TeamDeskLinkedServiceResponseOutput) ApiToken() pulumi.AnyOutput {
	return o.ApplyT(func(v TeamDeskLinkedServiceResponse) interface{} { return v.ApiToken }).(pulumi.AnyOutput)
}

// The authentication type to use.
func (o TeamDeskLinkedServiceResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v TeamDeskLinkedServiceResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The integration runtime reference.
func (o TeamDeskLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v TeamDeskLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o TeamDeskLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TeamDeskLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o TeamDeskLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TeamDeskLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o TeamDeskLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v TeamDeskLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The password of the TeamDesk source.
func (o TeamDeskLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v TeamDeskLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'TeamDesk'.
func (o TeamDeskLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TeamDeskLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The url to connect TeamDesk source. Type: string (or Expression with resultType string).
func (o TeamDeskLinkedServiceResponseOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v TeamDeskLinkedServiceResponse) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// The username of the TeamDesk source. Type: string (or Expression with resultType string).
func (o TeamDeskLinkedServiceResponseOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v TeamDeskLinkedServiceResponse) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// Linked service for Teradata data source.
type TeradataLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// AuthenticationType to be used for connection.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Teradata ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// Server name for connection. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	// Expected value is 'Teradata'.
	Type string `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// TeradataLinkedServiceInput is an input type that accepts TeradataLinkedServiceArgs and TeradataLinkedServiceOutput values.
// You can construct a concrete instance of `TeradataLinkedServiceInput` via:
//
//	TeradataLinkedServiceArgs{...}
type TeradataLinkedServiceInput interface {
	pulumi.Input

	ToTeradataLinkedServiceOutput() TeradataLinkedServiceOutput
	ToTeradataLinkedServiceOutputWithContext(context.Context) TeradataLinkedServiceOutput
}

// Linked service for Teradata data source.
type TeradataLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// AuthenticationType to be used for connection.
	AuthenticationType pulumi.StringPtrInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Teradata ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password for authentication.
	Password pulumi.Input `pulumi:"password"`
	// Server name for connection. Type: string (or Expression with resultType string).
	Server pulumi.Input `pulumi:"server"`
	// Type of linked service.
	// Expected value is 'Teradata'.
	Type pulumi.StringInput `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username pulumi.Input `pulumi:"username"`
}

func (TeradataLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TeradataLinkedService)(nil)).Elem()
}

func (i TeradataLinkedServiceArgs) ToTeradataLinkedServiceOutput() TeradataLinkedServiceOutput {
	return i.ToTeradataLinkedServiceOutputWithContext(context.Background())
}

func (i TeradataLinkedServiceArgs) ToTeradataLinkedServiceOutputWithContext(ctx context.Context) TeradataLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeradataLinkedServiceOutput)
}

// Linked service for Teradata data source.
type TeradataLinkedServiceOutput struct{ *pulumi.OutputState }

func (TeradataLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeradataLinkedService)(nil)).Elem()
}

func (o TeradataLinkedServiceOutput) ToTeradataLinkedServiceOutput() TeradataLinkedServiceOutput {
	return o
}

func (o TeradataLinkedServiceOutput) ToTeradataLinkedServiceOutputWithContext(ctx context.Context) TeradataLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o TeradataLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v TeradataLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// AuthenticationType to be used for connection.
func (o TeradataLinkedServiceOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TeradataLinkedService) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// The integration runtime reference.
func (o TeradataLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v TeradataLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Teradata ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o TeradataLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o TeradataLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TeradataLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o TeradataLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TeradataLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o TeradataLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v TeradataLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Password for authentication.
func (o TeradataLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Server name for connection. Type: string (or Expression with resultType string).
func (o TeradataLinkedServiceOutput) Server() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataLinkedService) interface{} { return v.Server }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Teradata'.
func (o TeradataLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TeradataLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Username for authentication. Type: string (or Expression with resultType string).
func (o TeradataLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Linked service for Teradata data source.
type TeradataLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// AuthenticationType to be used for connection.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Teradata ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// Server name for connection. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	// Expected value is 'Teradata'.
	Type string `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// Linked service for Teradata data source.
type TeradataLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (TeradataLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeradataLinkedServiceResponse)(nil)).Elem()
}

func (o TeradataLinkedServiceResponseOutput) ToTeradataLinkedServiceResponseOutput() TeradataLinkedServiceResponseOutput {
	return o
}

func (o TeradataLinkedServiceResponseOutput) ToTeradataLinkedServiceResponseOutputWithContext(ctx context.Context) TeradataLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o TeradataLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v TeradataLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// AuthenticationType to be used for connection.
func (o TeradataLinkedServiceResponseOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TeradataLinkedServiceResponse) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// The integration runtime reference.
func (o TeradataLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v TeradataLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Teradata ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o TeradataLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o TeradataLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TeradataLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o TeradataLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TeradataLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o TeradataLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v TeradataLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password for authentication.
func (o TeradataLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Server name for connection. Type: string (or Expression with resultType string).
func (o TeradataLinkedServiceResponseOutput) Server() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataLinkedServiceResponse) interface{} { return v.Server }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Teradata'.
func (o TeradataLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TeradataLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Username for authentication. Type: string (or Expression with resultType string).
func (o TeradataLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// The settings that will be leveraged for teradata source partitioning.
type TeradataPartitionSettings struct {
	// The name of the column that will be used for proceeding range or hash partitioning. Type: string (or Expression with resultType string).
	PartitionColumnName interface{} `pulumi:"partitionColumnName"`
	// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionLowerBound interface{} `pulumi:"partitionLowerBound"`
	// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionUpperBound interface{} `pulumi:"partitionUpperBound"`
}

// TeradataPartitionSettingsInput is an input type that accepts TeradataPartitionSettingsArgs and TeradataPartitionSettingsOutput values.
// You can construct a concrete instance of `TeradataPartitionSettingsInput` via:
//
//	TeradataPartitionSettingsArgs{...}
type TeradataPartitionSettingsInput interface {
	pulumi.Input

	ToTeradataPartitionSettingsOutput() TeradataPartitionSettingsOutput
	ToTeradataPartitionSettingsOutputWithContext(context.Context) TeradataPartitionSettingsOutput
}

// The settings that will be leveraged for teradata source partitioning.
type TeradataPartitionSettingsArgs struct {
	// The name of the column that will be used for proceeding range or hash partitioning. Type: string (or Expression with resultType string).
	PartitionColumnName pulumi.Input `pulumi:"partitionColumnName"`
	// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionLowerBound pulumi.Input `pulumi:"partitionLowerBound"`
	// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionUpperBound pulumi.Input `pulumi:"partitionUpperBound"`
}

func (TeradataPartitionSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TeradataPartitionSettings)(nil)).Elem()
}

func (i TeradataPartitionSettingsArgs) ToTeradataPartitionSettingsOutput() TeradataPartitionSettingsOutput {
	return i.ToTeradataPartitionSettingsOutputWithContext(context.Background())
}

func (i TeradataPartitionSettingsArgs) ToTeradataPartitionSettingsOutputWithContext(ctx context.Context) TeradataPartitionSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeradataPartitionSettingsOutput)
}

func (i TeradataPartitionSettingsArgs) ToTeradataPartitionSettingsPtrOutput() TeradataPartitionSettingsPtrOutput {
	return i.ToTeradataPartitionSettingsPtrOutputWithContext(context.Background())
}

func (i TeradataPartitionSettingsArgs) ToTeradataPartitionSettingsPtrOutputWithContext(ctx context.Context) TeradataPartitionSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeradataPartitionSettingsOutput).ToTeradataPartitionSettingsPtrOutputWithContext(ctx)
}

// TeradataPartitionSettingsPtrInput is an input type that accepts TeradataPartitionSettingsArgs, TeradataPartitionSettingsPtr and TeradataPartitionSettingsPtrOutput values.
// You can construct a concrete instance of `TeradataPartitionSettingsPtrInput` via:
//
//	        TeradataPartitionSettingsArgs{...}
//
//	or:
//
//	        nil
type TeradataPartitionSettingsPtrInput interface {
	pulumi.Input

	ToTeradataPartitionSettingsPtrOutput() TeradataPartitionSettingsPtrOutput
	ToTeradataPartitionSettingsPtrOutputWithContext(context.Context) TeradataPartitionSettingsPtrOutput
}

type teradataPartitionSettingsPtrType TeradataPartitionSettingsArgs

func TeradataPartitionSettingsPtr(v *TeradataPartitionSettingsArgs) TeradataPartitionSettingsPtrInput {
	return (*teradataPartitionSettingsPtrType)(v)
}

func (*teradataPartitionSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TeradataPartitionSettings)(nil)).Elem()
}

func (i *teradataPartitionSettingsPtrType) ToTeradataPartitionSettingsPtrOutput() TeradataPartitionSettingsPtrOutput {
	return i.ToTeradataPartitionSettingsPtrOutputWithContext(context.Background())
}

func (i *teradataPartitionSettingsPtrType) ToTeradataPartitionSettingsPtrOutputWithContext(ctx context.Context) TeradataPartitionSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeradataPartitionSettingsPtrOutput)
}

// The settings that will be leveraged for teradata source partitioning.
type TeradataPartitionSettingsOutput struct{ *pulumi.OutputState }

func (TeradataPartitionSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeradataPartitionSettings)(nil)).Elem()
}

func (o TeradataPartitionSettingsOutput) ToTeradataPartitionSettingsOutput() TeradataPartitionSettingsOutput {
	return o
}

func (o TeradataPartitionSettingsOutput) ToTeradataPartitionSettingsOutputWithContext(ctx context.Context) TeradataPartitionSettingsOutput {
	return o
}

func (o TeradataPartitionSettingsOutput) ToTeradataPartitionSettingsPtrOutput() TeradataPartitionSettingsPtrOutput {
	return o.ToTeradataPartitionSettingsPtrOutputWithContext(context.Background())
}

func (o TeradataPartitionSettingsOutput) ToTeradataPartitionSettingsPtrOutputWithContext(ctx context.Context) TeradataPartitionSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TeradataPartitionSettings) *TeradataPartitionSettings {
		return &v
	}).(TeradataPartitionSettingsPtrOutput)
}

// The name of the column that will be used for proceeding range or hash partitioning. Type: string (or Expression with resultType string).
func (o TeradataPartitionSettingsOutput) PartitionColumnName() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataPartitionSettings) interface{} { return v.PartitionColumnName }).(pulumi.AnyOutput)
}

// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o TeradataPartitionSettingsOutput) PartitionLowerBound() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataPartitionSettings) interface{} { return v.PartitionLowerBound }).(pulumi.AnyOutput)
}

// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o TeradataPartitionSettingsOutput) PartitionUpperBound() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataPartitionSettings) interface{} { return v.PartitionUpperBound }).(pulumi.AnyOutput)
}

type TeradataPartitionSettingsPtrOutput struct{ *pulumi.OutputState }

func (TeradataPartitionSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TeradataPartitionSettings)(nil)).Elem()
}

func (o TeradataPartitionSettingsPtrOutput) ToTeradataPartitionSettingsPtrOutput() TeradataPartitionSettingsPtrOutput {
	return o
}

func (o TeradataPartitionSettingsPtrOutput) ToTeradataPartitionSettingsPtrOutputWithContext(ctx context.Context) TeradataPartitionSettingsPtrOutput {
	return o
}

func (o TeradataPartitionSettingsPtrOutput) Elem() TeradataPartitionSettingsOutput {
	return o.ApplyT(func(v *TeradataPartitionSettings) TeradataPartitionSettings {
		if v != nil {
			return *v
		}
		var ret TeradataPartitionSettings
		return ret
	}).(TeradataPartitionSettingsOutput)
}

// The name of the column that will be used for proceeding range or hash partitioning. Type: string (or Expression with resultType string).
func (o TeradataPartitionSettingsPtrOutput) PartitionColumnName() pulumi.AnyOutput {
	return o.ApplyT(func(v *TeradataPartitionSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionColumnName
	}).(pulumi.AnyOutput)
}

// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o TeradataPartitionSettingsPtrOutput) PartitionLowerBound() pulumi.AnyOutput {
	return o.ApplyT(func(v *TeradataPartitionSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionLowerBound
	}).(pulumi.AnyOutput)
}

// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o TeradataPartitionSettingsPtrOutput) PartitionUpperBound() pulumi.AnyOutput {
	return o.ApplyT(func(v *TeradataPartitionSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionUpperBound
	}).(pulumi.AnyOutput)
}

// The settings that will be leveraged for teradata source partitioning.
type TeradataPartitionSettingsResponse struct {
	// The name of the column that will be used for proceeding range or hash partitioning. Type: string (or Expression with resultType string).
	PartitionColumnName interface{} `pulumi:"partitionColumnName"`
	// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionLowerBound interface{} `pulumi:"partitionLowerBound"`
	// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionUpperBound interface{} `pulumi:"partitionUpperBound"`
}

// The settings that will be leveraged for teradata source partitioning.
type TeradataPartitionSettingsResponseOutput struct{ *pulumi.OutputState }

func (TeradataPartitionSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeradataPartitionSettingsResponse)(nil)).Elem()
}

func (o TeradataPartitionSettingsResponseOutput) ToTeradataPartitionSettingsResponseOutput() TeradataPartitionSettingsResponseOutput {
	return o
}

func (o TeradataPartitionSettingsResponseOutput) ToTeradataPartitionSettingsResponseOutputWithContext(ctx context.Context) TeradataPartitionSettingsResponseOutput {
	return o
}

// The name of the column that will be used for proceeding range or hash partitioning. Type: string (or Expression with resultType string).
func (o TeradataPartitionSettingsResponseOutput) PartitionColumnName() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataPartitionSettingsResponse) interface{} { return v.PartitionColumnName }).(pulumi.AnyOutput)
}

// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o TeradataPartitionSettingsResponseOutput) PartitionLowerBound() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataPartitionSettingsResponse) interface{} { return v.PartitionLowerBound }).(pulumi.AnyOutput)
}

// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o TeradataPartitionSettingsResponseOutput) PartitionUpperBound() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataPartitionSettingsResponse) interface{} { return v.PartitionUpperBound }).(pulumi.AnyOutput)
}

type TeradataPartitionSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (TeradataPartitionSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TeradataPartitionSettingsResponse)(nil)).Elem()
}

func (o TeradataPartitionSettingsResponsePtrOutput) ToTeradataPartitionSettingsResponsePtrOutput() TeradataPartitionSettingsResponsePtrOutput {
	return o
}

func (o TeradataPartitionSettingsResponsePtrOutput) ToTeradataPartitionSettingsResponsePtrOutputWithContext(ctx context.Context) TeradataPartitionSettingsResponsePtrOutput {
	return o
}

func (o TeradataPartitionSettingsResponsePtrOutput) Elem() TeradataPartitionSettingsResponseOutput {
	return o.ApplyT(func(v *TeradataPartitionSettingsResponse) TeradataPartitionSettingsResponse {
		if v != nil {
			return *v
		}
		var ret TeradataPartitionSettingsResponse
		return ret
	}).(TeradataPartitionSettingsResponseOutput)
}

// The name of the column that will be used for proceeding range or hash partitioning. Type: string (or Expression with resultType string).
func (o TeradataPartitionSettingsResponsePtrOutput) PartitionColumnName() pulumi.AnyOutput {
	return o.ApplyT(func(v *TeradataPartitionSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionColumnName
	}).(pulumi.AnyOutput)
}

// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o TeradataPartitionSettingsResponsePtrOutput) PartitionLowerBound() pulumi.AnyOutput {
	return o.ApplyT(func(v *TeradataPartitionSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionLowerBound
	}).(pulumi.AnyOutput)
}

// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o TeradataPartitionSettingsResponsePtrOutput) PartitionUpperBound() pulumi.AnyOutput {
	return o.ApplyT(func(v *TeradataPartitionSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionUpperBound
	}).(pulumi.AnyOutput)
}

// A copy activity Teradata source.
type TeradataSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for teradata read in parallel. Possible values include: "None", "Hash", "DynamicRange".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for teradata source partitioning.
	PartitionSettings *TeradataPartitionSettings `pulumi:"partitionSettings"`
	// Teradata query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'TeradataSource'.
	Type string `pulumi:"type"`
}

// TeradataSourceInput is an input type that accepts TeradataSourceArgs and TeradataSourceOutput values.
// You can construct a concrete instance of `TeradataSourceInput` via:
//
//	TeradataSourceArgs{...}
type TeradataSourceInput interface {
	pulumi.Input

	ToTeradataSourceOutput() TeradataSourceOutput
	ToTeradataSourceOutputWithContext(context.Context) TeradataSourceOutput
}

// A copy activity Teradata source.
type TeradataSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for teradata read in parallel. Possible values include: "None", "Hash", "DynamicRange".
	PartitionOption pulumi.Input `pulumi:"partitionOption"`
	// The settings that will be leveraged for teradata source partitioning.
	PartitionSettings TeradataPartitionSettingsPtrInput `pulumi:"partitionSettings"`
	// Teradata query. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'TeradataSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TeradataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TeradataSource)(nil)).Elem()
}

func (i TeradataSourceArgs) ToTeradataSourceOutput() TeradataSourceOutput {
	return i.ToTeradataSourceOutputWithContext(context.Background())
}

func (i TeradataSourceArgs) ToTeradataSourceOutputWithContext(ctx context.Context) TeradataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeradataSourceOutput)
}

// A copy activity Teradata source.
type TeradataSourceOutput struct{ *pulumi.OutputState }

func (TeradataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeradataSource)(nil)).Elem()
}

func (o TeradataSourceOutput) ToTeradataSourceOutput() TeradataSourceOutput {
	return o
}

func (o TeradataSourceOutput) ToTeradataSourceOutputWithContext(ctx context.Context) TeradataSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o TeradataSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o TeradataSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o TeradataSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The partition mechanism that will be used for teradata read in parallel. Possible values include: "None", "Hash", "DynamicRange".
func (o TeradataSourceOutput) PartitionOption() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataSource) interface{} { return v.PartitionOption }).(pulumi.AnyOutput)
}

// The settings that will be leveraged for teradata source partitioning.
func (o TeradataSourceOutput) PartitionSettings() TeradataPartitionSettingsPtrOutput {
	return o.ApplyT(func(v TeradataSource) *TeradataPartitionSettings { return v.PartitionSettings }).(TeradataPartitionSettingsPtrOutput)
}

// Teradata query. Type: string (or Expression with resultType string).
func (o TeradataSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o TeradataSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o TeradataSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o TeradataSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'TeradataSource'.
func (o TeradataSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TeradataSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Teradata source.
type TeradataSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for teradata read in parallel. Possible values include: "None", "Hash", "DynamicRange".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for teradata source partitioning.
	PartitionSettings *TeradataPartitionSettingsResponse `pulumi:"partitionSettings"`
	// Teradata query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'TeradataSource'.
	Type string `pulumi:"type"`
}

// A copy activity Teradata source.
type TeradataSourceResponseOutput struct{ *pulumi.OutputState }

func (TeradataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeradataSourceResponse)(nil)).Elem()
}

func (o TeradataSourceResponseOutput) ToTeradataSourceResponseOutput() TeradataSourceResponseOutput {
	return o
}

func (o TeradataSourceResponseOutput) ToTeradataSourceResponseOutputWithContext(ctx context.Context) TeradataSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o TeradataSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o TeradataSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o TeradataSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The partition mechanism that will be used for teradata read in parallel. Possible values include: "None", "Hash", "DynamicRange".
func (o TeradataSourceResponseOutput) PartitionOption() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataSourceResponse) interface{} { return v.PartitionOption }).(pulumi.AnyOutput)
}

// The settings that will be leveraged for teradata source partitioning.
func (o TeradataSourceResponseOutput) PartitionSettings() TeradataPartitionSettingsResponsePtrOutput {
	return o.ApplyT(func(v TeradataSourceResponse) *TeradataPartitionSettingsResponse { return v.PartitionSettings }).(TeradataPartitionSettingsResponsePtrOutput)
}

// Teradata query. Type: string (or Expression with resultType string).
func (o TeradataSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o TeradataSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o TeradataSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o TeradataSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'TeradataSource'.
func (o TeradataSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TeradataSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Teradata database dataset.
type TeradataTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The database name of Teradata. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of Teradata. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'TeradataTable'.
	Type string `pulumi:"type"`
}

// TeradataTableDatasetInput is an input type that accepts TeradataTableDatasetArgs and TeradataTableDatasetOutput values.
// You can construct a concrete instance of `TeradataTableDatasetInput` via:
//
//	TeradataTableDatasetArgs{...}
type TeradataTableDatasetInput interface {
	pulumi.Input

	ToTeradataTableDatasetOutput() TeradataTableDatasetOutput
	ToTeradataTableDatasetOutputWithContext(context.Context) TeradataTableDatasetOutput
}

// The Teradata database dataset.
type TeradataTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The database name of Teradata. Type: string (or Expression with resultType string).
	Database pulumi.Input `pulumi:"database"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of Teradata. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'TeradataTable'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TeradataTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TeradataTableDataset)(nil)).Elem()
}

func (i TeradataTableDatasetArgs) ToTeradataTableDatasetOutput() TeradataTableDatasetOutput {
	return i.ToTeradataTableDatasetOutputWithContext(context.Background())
}

func (i TeradataTableDatasetArgs) ToTeradataTableDatasetOutputWithContext(ctx context.Context) TeradataTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeradataTableDatasetOutput)
}

// The Teradata database dataset.
type TeradataTableDatasetOutput struct{ *pulumi.OutputState }

func (TeradataTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeradataTableDataset)(nil)).Elem()
}

func (o TeradataTableDatasetOutput) ToTeradataTableDatasetOutput() TeradataTableDatasetOutput {
	return o
}

func (o TeradataTableDatasetOutput) ToTeradataTableDatasetOutputWithContext(ctx context.Context) TeradataTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o TeradataTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v TeradataTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The database name of Teradata. Type: string (or Expression with resultType string).
func (o TeradataTableDatasetOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataTableDataset) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Dataset description.
func (o TeradataTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TeradataTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o TeradataTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v TeradataTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o TeradataTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v TeradataTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o TeradataTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v TeradataTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o TeradataTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o TeradataTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of Teradata. Type: string (or Expression with resultType string).
func (o TeradataTableDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataTableDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'TeradataTable'.
func (o TeradataTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TeradataTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Teradata database dataset.
type TeradataTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The database name of Teradata. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of Teradata. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'TeradataTable'.
	Type string `pulumi:"type"`
}

// The Teradata database dataset.
type TeradataTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (TeradataTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeradataTableDatasetResponse)(nil)).Elem()
}

func (o TeradataTableDatasetResponseOutput) ToTeradataTableDatasetResponseOutput() TeradataTableDatasetResponseOutput {
	return o
}

func (o TeradataTableDatasetResponseOutput) ToTeradataTableDatasetResponseOutputWithContext(ctx context.Context) TeradataTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o TeradataTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v TeradataTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The database name of Teradata. Type: string (or Expression with resultType string).
func (o TeradataTableDatasetResponseOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataTableDatasetResponse) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Dataset description.
func (o TeradataTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TeradataTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o TeradataTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v TeradataTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o TeradataTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v TeradataTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o TeradataTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v TeradataTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o TeradataTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o TeradataTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of Teradata. Type: string (or Expression with resultType string).
func (o TeradataTableDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v TeradataTableDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'TeradataTable'.
func (o TeradataTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TeradataTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The data stored in text format.
type TextFormat struct {
	// The column delimiter. Type: string (or Expression with resultType string).
	ColumnDelimiter interface{} `pulumi:"columnDelimiter"`
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer interface{} `pulumi:"deserializer"`
	// The code page name of the preferred encoding. If miss, the default value is ΓÇ£utf-8ΓÇ¥, unless BOM denotes another Unicode encoding. Refer to the ΓÇ£NameΓÇ¥ column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
	EncodingName interface{} `pulumi:"encodingName"`
	// The escape character. Type: string (or Expression with resultType string).
	EscapeChar interface{} `pulumi:"escapeChar"`
	// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
	FirstRowAsHeader interface{} `pulumi:"firstRowAsHeader"`
	// The null value string. Type: string (or Expression with resultType string).
	NullValue interface{} `pulumi:"nullValue"`
	// The quote character. Type: string (or Expression with resultType string).
	QuoteChar interface{} `pulumi:"quoteChar"`
	// The row delimiter. Type: string (or Expression with resultType string).
	RowDelimiter interface{} `pulumi:"rowDelimiter"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer interface{} `pulumi:"serializer"`
	// The number of lines/rows to be skipped when parsing text files. The default value is 0. Type: integer (or Expression with resultType integer).
	SkipLineCount interface{} `pulumi:"skipLineCount"`
	// Treat empty column values in the text file as null. The default value is true. Type: boolean (or Expression with resultType boolean).
	TreatEmptyAsNull interface{} `pulumi:"treatEmptyAsNull"`
	// Type of dataset storage format.
	// Expected value is 'TextFormat'.
	Type string `pulumi:"type"`
}

// TextFormatInput is an input type that accepts TextFormatArgs and TextFormatOutput values.
// You can construct a concrete instance of `TextFormatInput` via:
//
//	TextFormatArgs{...}
type TextFormatInput interface {
	pulumi.Input

	ToTextFormatOutput() TextFormatOutput
	ToTextFormatOutputWithContext(context.Context) TextFormatOutput
}

// The data stored in text format.
type TextFormatArgs struct {
	// The column delimiter. Type: string (or Expression with resultType string).
	ColumnDelimiter pulumi.Input `pulumi:"columnDelimiter"`
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer pulumi.Input `pulumi:"deserializer"`
	// The code page name of the preferred encoding. If miss, the default value is ΓÇ£utf-8ΓÇ¥, unless BOM denotes another Unicode encoding. Refer to the ΓÇ£NameΓÇ¥ column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
	EncodingName pulumi.Input `pulumi:"encodingName"`
	// The escape character. Type: string (or Expression with resultType string).
	EscapeChar pulumi.Input `pulumi:"escapeChar"`
	// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
	FirstRowAsHeader pulumi.Input `pulumi:"firstRowAsHeader"`
	// The null value string. Type: string (or Expression with resultType string).
	NullValue pulumi.Input `pulumi:"nullValue"`
	// The quote character. Type: string (or Expression with resultType string).
	QuoteChar pulumi.Input `pulumi:"quoteChar"`
	// The row delimiter. Type: string (or Expression with resultType string).
	RowDelimiter pulumi.Input `pulumi:"rowDelimiter"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer pulumi.Input `pulumi:"serializer"`
	// The number of lines/rows to be skipped when parsing text files. The default value is 0. Type: integer (or Expression with resultType integer).
	SkipLineCount pulumi.Input `pulumi:"skipLineCount"`
	// Treat empty column values in the text file as null. The default value is true. Type: boolean (or Expression with resultType boolean).
	TreatEmptyAsNull pulumi.Input `pulumi:"treatEmptyAsNull"`
	// Type of dataset storage format.
	// Expected value is 'TextFormat'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TextFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TextFormat)(nil)).Elem()
}

func (i TextFormatArgs) ToTextFormatOutput() TextFormatOutput {
	return i.ToTextFormatOutputWithContext(context.Background())
}

func (i TextFormatArgs) ToTextFormatOutputWithContext(ctx context.Context) TextFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TextFormatOutput)
}

func (i TextFormatArgs) ToTextFormatPtrOutput() TextFormatPtrOutput {
	return i.ToTextFormatPtrOutputWithContext(context.Background())
}

func (i TextFormatArgs) ToTextFormatPtrOutputWithContext(ctx context.Context) TextFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TextFormatOutput).ToTextFormatPtrOutputWithContext(ctx)
}

// TextFormatPtrInput is an input type that accepts TextFormatArgs, TextFormatPtr and TextFormatPtrOutput values.
// You can construct a concrete instance of `TextFormatPtrInput` via:
//
//	        TextFormatArgs{...}
//
//	or:
//
//	        nil
type TextFormatPtrInput interface {
	pulumi.Input

	ToTextFormatPtrOutput() TextFormatPtrOutput
	ToTextFormatPtrOutputWithContext(context.Context) TextFormatPtrOutput
}

type textFormatPtrType TextFormatArgs

func TextFormatPtr(v *TextFormatArgs) TextFormatPtrInput {
	return (*textFormatPtrType)(v)
}

func (*textFormatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TextFormat)(nil)).Elem()
}

func (i *textFormatPtrType) ToTextFormatPtrOutput() TextFormatPtrOutput {
	return i.ToTextFormatPtrOutputWithContext(context.Background())
}

func (i *textFormatPtrType) ToTextFormatPtrOutputWithContext(ctx context.Context) TextFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TextFormatPtrOutput)
}

// The data stored in text format.
type TextFormatOutput struct{ *pulumi.OutputState }

func (TextFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TextFormat)(nil)).Elem()
}

func (o TextFormatOutput) ToTextFormatOutput() TextFormatOutput {
	return o
}

func (o TextFormatOutput) ToTextFormatOutputWithContext(ctx context.Context) TextFormatOutput {
	return o
}

func (o TextFormatOutput) ToTextFormatPtrOutput() TextFormatPtrOutput {
	return o.ToTextFormatPtrOutputWithContext(context.Background())
}

func (o TextFormatOutput) ToTextFormatPtrOutputWithContext(ctx context.Context) TextFormatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TextFormat) *TextFormat {
		return &v
	}).(TextFormatPtrOutput)
}

// The column delimiter. Type: string (or Expression with resultType string).
func (o TextFormatOutput) ColumnDelimiter() pulumi.AnyOutput {
	return o.ApplyT(func(v TextFormat) interface{} { return v.ColumnDelimiter }).(pulumi.AnyOutput)
}

// Deserializer. Type: string (or Expression with resultType string).
func (o TextFormatOutput) Deserializer() pulumi.AnyOutput {
	return o.ApplyT(func(v TextFormat) interface{} { return v.Deserializer }).(pulumi.AnyOutput)
}

// The code page name of the preferred encoding. If miss, the default value is ΓÇ£utf-8ΓÇ¥, unless BOM denotes another Unicode encoding. Refer to the ΓÇ£NameΓÇ¥ column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
func (o TextFormatOutput) EncodingName() pulumi.AnyOutput {
	return o.ApplyT(func(v TextFormat) interface{} { return v.EncodingName }).(pulumi.AnyOutput)
}

// The escape character. Type: string (or Expression with resultType string).
func (o TextFormatOutput) EscapeChar() pulumi.AnyOutput {
	return o.ApplyT(func(v TextFormat) interface{} { return v.EscapeChar }).(pulumi.AnyOutput)
}

// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
func (o TextFormatOutput) FirstRowAsHeader() pulumi.AnyOutput {
	return o.ApplyT(func(v TextFormat) interface{} { return v.FirstRowAsHeader }).(pulumi.AnyOutput)
}

// The null value string. Type: string (or Expression with resultType string).
func (o TextFormatOutput) NullValue() pulumi.AnyOutput {
	return o.ApplyT(func(v TextFormat) interface{} { return v.NullValue }).(pulumi.AnyOutput)
}

// The quote character. Type: string (or Expression with resultType string).
func (o TextFormatOutput) QuoteChar() pulumi.AnyOutput {
	return o.ApplyT(func(v TextFormat) interface{} { return v.QuoteChar }).(pulumi.AnyOutput)
}

// The row delimiter. Type: string (or Expression with resultType string).
func (o TextFormatOutput) RowDelimiter() pulumi.AnyOutput {
	return o.ApplyT(func(v TextFormat) interface{} { return v.RowDelimiter }).(pulumi.AnyOutput)
}

// Serializer. Type: string (or Expression with resultType string).
func (o TextFormatOutput) Serializer() pulumi.AnyOutput {
	return o.ApplyT(func(v TextFormat) interface{} { return v.Serializer }).(pulumi.AnyOutput)
}

// The number of lines/rows to be skipped when parsing text files. The default value is 0. Type: integer (or Expression with resultType integer).
func (o TextFormatOutput) SkipLineCount() pulumi.AnyOutput {
	return o.ApplyT(func(v TextFormat) interface{} { return v.SkipLineCount }).(pulumi.AnyOutput)
}

// Treat empty column values in the text file as null. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o TextFormatOutput) TreatEmptyAsNull() pulumi.AnyOutput {
	return o.ApplyT(func(v TextFormat) interface{} { return v.TreatEmptyAsNull }).(pulumi.AnyOutput)
}

// Type of dataset storage format.
// Expected value is 'TextFormat'.
func (o TextFormatOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TextFormat) string { return v.Type }).(pulumi.StringOutput)
}

type TextFormatPtrOutput struct{ *pulumi.OutputState }

func (TextFormatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TextFormat)(nil)).Elem()
}

func (o TextFormatPtrOutput) ToTextFormatPtrOutput() TextFormatPtrOutput {
	return o
}

func (o TextFormatPtrOutput) ToTextFormatPtrOutputWithContext(ctx context.Context) TextFormatPtrOutput {
	return o
}

func (o TextFormatPtrOutput) Elem() TextFormatOutput {
	return o.ApplyT(func(v *TextFormat) TextFormat {
		if v != nil {
			return *v
		}
		var ret TextFormat
		return ret
	}).(TextFormatOutput)
}

// The column delimiter. Type: string (or Expression with resultType string).
func (o TextFormatPtrOutput) ColumnDelimiter() pulumi.AnyOutput {
	return o.ApplyT(func(v *TextFormat) interface{} {
		if v == nil {
			return nil
		}
		return v.ColumnDelimiter
	}).(pulumi.AnyOutput)
}

// Deserializer. Type: string (or Expression with resultType string).
func (o TextFormatPtrOutput) Deserializer() pulumi.AnyOutput {
	return o.ApplyT(func(v *TextFormat) interface{} {
		if v == nil {
			return nil
		}
		return v.Deserializer
	}).(pulumi.AnyOutput)
}

// The code page name of the preferred encoding. If miss, the default value is ΓÇ£utf-8ΓÇ¥, unless BOM denotes another Unicode encoding. Refer to the ΓÇ£NameΓÇ¥ column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
func (o TextFormatPtrOutput) EncodingName() pulumi.AnyOutput {
	return o.ApplyT(func(v *TextFormat) interface{} {
		if v == nil {
			return nil
		}
		return v.EncodingName
	}).(pulumi.AnyOutput)
}

// The escape character. Type: string (or Expression with resultType string).
func (o TextFormatPtrOutput) EscapeChar() pulumi.AnyOutput {
	return o.ApplyT(func(v *TextFormat) interface{} {
		if v == nil {
			return nil
		}
		return v.EscapeChar
	}).(pulumi.AnyOutput)
}

// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
func (o TextFormatPtrOutput) FirstRowAsHeader() pulumi.AnyOutput {
	return o.ApplyT(func(v *TextFormat) interface{} {
		if v == nil {
			return nil
		}
		return v.FirstRowAsHeader
	}).(pulumi.AnyOutput)
}

// The null value string. Type: string (or Expression with resultType string).
func (o TextFormatPtrOutput) NullValue() pulumi.AnyOutput {
	return o.ApplyT(func(v *TextFormat) interface{} {
		if v == nil {
			return nil
		}
		return v.NullValue
	}).(pulumi.AnyOutput)
}

// The quote character. Type: string (or Expression with resultType string).
func (o TextFormatPtrOutput) QuoteChar() pulumi.AnyOutput {
	return o.ApplyT(func(v *TextFormat) interface{} {
		if v == nil {
			return nil
		}
		return v.QuoteChar
	}).(pulumi.AnyOutput)
}

// The row delimiter. Type: string (or Expression with resultType string).
func (o TextFormatPtrOutput) RowDelimiter() pulumi.AnyOutput {
	return o.ApplyT(func(v *TextFormat) interface{} {
		if v == nil {
			return nil
		}
		return v.RowDelimiter
	}).(pulumi.AnyOutput)
}

// Serializer. Type: string (or Expression with resultType string).
func (o TextFormatPtrOutput) Serializer() pulumi.AnyOutput {
	return o.ApplyT(func(v *TextFormat) interface{} {
		if v == nil {
			return nil
		}
		return v.Serializer
	}).(pulumi.AnyOutput)
}

// The number of lines/rows to be skipped when parsing text files. The default value is 0. Type: integer (or Expression with resultType integer).
func (o TextFormatPtrOutput) SkipLineCount() pulumi.AnyOutput {
	return o.ApplyT(func(v *TextFormat) interface{} {
		if v == nil {
			return nil
		}
		return v.SkipLineCount
	}).(pulumi.AnyOutput)
}

// Treat empty column values in the text file as null. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o TextFormatPtrOutput) TreatEmptyAsNull() pulumi.AnyOutput {
	return o.ApplyT(func(v *TextFormat) interface{} {
		if v == nil {
			return nil
		}
		return v.TreatEmptyAsNull
	}).(pulumi.AnyOutput)
}

// Type of dataset storage format.
// Expected value is 'TextFormat'.
func (o TextFormatPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TextFormat) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The data stored in text format.
type TextFormatResponse struct {
	// The column delimiter. Type: string (or Expression with resultType string).
	ColumnDelimiter interface{} `pulumi:"columnDelimiter"`
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer interface{} `pulumi:"deserializer"`
	// The code page name of the preferred encoding. If miss, the default value is ΓÇ£utf-8ΓÇ¥, unless BOM denotes another Unicode encoding. Refer to the ΓÇ£NameΓÇ¥ column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
	EncodingName interface{} `pulumi:"encodingName"`
	// The escape character. Type: string (or Expression with resultType string).
	EscapeChar interface{} `pulumi:"escapeChar"`
	// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
	FirstRowAsHeader interface{} `pulumi:"firstRowAsHeader"`
	// The null value string. Type: string (or Expression with resultType string).
	NullValue interface{} `pulumi:"nullValue"`
	// The quote character. Type: string (or Expression with resultType string).
	QuoteChar interface{} `pulumi:"quoteChar"`
	// The row delimiter. Type: string (or Expression with resultType string).
	RowDelimiter interface{} `pulumi:"rowDelimiter"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer interface{} `pulumi:"serializer"`
	// The number of lines/rows to be skipped when parsing text files. The default value is 0. Type: integer (or Expression with resultType integer).
	SkipLineCount interface{} `pulumi:"skipLineCount"`
	// Treat empty column values in the text file as null. The default value is true. Type: boolean (or Expression with resultType boolean).
	TreatEmptyAsNull interface{} `pulumi:"treatEmptyAsNull"`
	// Type of dataset storage format.
	// Expected value is 'TextFormat'.
	Type string `pulumi:"type"`
}

// The data stored in text format.
type TextFormatResponseOutput struct{ *pulumi.OutputState }

func (TextFormatResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TextFormatResponse)(nil)).Elem()
}

func (o TextFormatResponseOutput) ToTextFormatResponseOutput() TextFormatResponseOutput {
	return o
}

func (o TextFormatResponseOutput) ToTextFormatResponseOutputWithContext(ctx context.Context) TextFormatResponseOutput {
	return o
}

// The column delimiter. Type: string (or Expression with resultType string).
func (o TextFormatResponseOutput) ColumnDelimiter() pulumi.AnyOutput {
	return o.ApplyT(func(v TextFormatResponse) interface{} { return v.ColumnDelimiter }).(pulumi.AnyOutput)
}

// Deserializer. Type: string (or Expression with resultType string).
func (o TextFormatResponseOutput) Deserializer() pulumi.AnyOutput {
	return o.ApplyT(func(v TextFormatResponse) interface{} { return v.Deserializer }).(pulumi.AnyOutput)
}

// The code page name of the preferred encoding. If miss, the default value is ΓÇ£utf-8ΓÇ¥, unless BOM denotes another Unicode encoding. Refer to the ΓÇ£NameΓÇ¥ column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
func (o TextFormatResponseOutput) EncodingName() pulumi.AnyOutput {
	return o.ApplyT(func(v TextFormatResponse) interface{} { return v.EncodingName }).(pulumi.AnyOutput)
}

// The escape character. Type: string (or Expression with resultType string).
func (o TextFormatResponseOutput) EscapeChar() pulumi.AnyOutput {
	return o.ApplyT(func(v TextFormatResponse) interface{} { return v.EscapeChar }).(pulumi.AnyOutput)
}

// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
func (o TextFormatResponseOutput) FirstRowAsHeader() pulumi.AnyOutput {
	return o.ApplyT(func(v TextFormatResponse) interface{} { return v.FirstRowAsHeader }).(pulumi.AnyOutput)
}

// The null value string. Type: string (or Expression with resultType string).
func (o TextFormatResponseOutput) NullValue() pulumi.AnyOutput {
	return o.ApplyT(func(v TextFormatResponse) interface{} { return v.NullValue }).(pulumi.AnyOutput)
}

// The quote character. Type: string (or Expression with resultType string).
func (o TextFormatResponseOutput) QuoteChar() pulumi.AnyOutput {
	return o.ApplyT(func(v TextFormatResponse) interface{} { return v.QuoteChar }).(pulumi.AnyOutput)
}

// The row delimiter. Type: string (or Expression with resultType string).
func (o TextFormatResponseOutput) RowDelimiter() pulumi.AnyOutput {
	return o.ApplyT(func(v TextFormatResponse) interface{} { return v.RowDelimiter }).(pulumi.AnyOutput)
}

// Serializer. Type: string (or Expression with resultType string).
func (o TextFormatResponseOutput) Serializer() pulumi.AnyOutput {
	return o.ApplyT(func(v TextFormatResponse) interface{} { return v.Serializer }).(pulumi.AnyOutput)
}

// The number of lines/rows to be skipped when parsing text files. The default value is 0. Type: integer (or Expression with resultType integer).
func (o TextFormatResponseOutput) SkipLineCount() pulumi.AnyOutput {
	return o.ApplyT(func(v TextFormatResponse) interface{} { return v.SkipLineCount }).(pulumi.AnyOutput)
}

// Treat empty column values in the text file as null. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o TextFormatResponseOutput) TreatEmptyAsNull() pulumi.AnyOutput {
	return o.ApplyT(func(v TextFormatResponse) interface{} { return v.TreatEmptyAsNull }).(pulumi.AnyOutput)
}

// Type of dataset storage format.
// Expected value is 'TextFormat'.
func (o TextFormatResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TextFormatResponse) string { return v.Type }).(pulumi.StringOutput)
}

type TextFormatResponsePtrOutput struct{ *pulumi.OutputState }

func (TextFormatResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TextFormatResponse)(nil)).Elem()
}

func (o TextFormatResponsePtrOutput) ToTextFormatResponsePtrOutput() TextFormatResponsePtrOutput {
	return o
}

func (o TextFormatResponsePtrOutput) ToTextFormatResponsePtrOutputWithContext(ctx context.Context) TextFormatResponsePtrOutput {
	return o
}

func (o TextFormatResponsePtrOutput) Elem() TextFormatResponseOutput {
	return o.ApplyT(func(v *TextFormatResponse) TextFormatResponse {
		if v != nil {
			return *v
		}
		var ret TextFormatResponse
		return ret
	}).(TextFormatResponseOutput)
}

// The column delimiter. Type: string (or Expression with resultType string).
func (o TextFormatResponsePtrOutput) ColumnDelimiter() pulumi.AnyOutput {
	return o.ApplyT(func(v *TextFormatResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.ColumnDelimiter
	}).(pulumi.AnyOutput)
}

// Deserializer. Type: string (or Expression with resultType string).
func (o TextFormatResponsePtrOutput) Deserializer() pulumi.AnyOutput {
	return o.ApplyT(func(v *TextFormatResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Deserializer
	}).(pulumi.AnyOutput)
}

// The code page name of the preferred encoding. If miss, the default value is ΓÇ£utf-8ΓÇ¥, unless BOM denotes another Unicode encoding. Refer to the ΓÇ£NameΓÇ¥ column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
func (o TextFormatResponsePtrOutput) EncodingName() pulumi.AnyOutput {
	return o.ApplyT(func(v *TextFormatResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.EncodingName
	}).(pulumi.AnyOutput)
}

// The escape character. Type: string (or Expression with resultType string).
func (o TextFormatResponsePtrOutput) EscapeChar() pulumi.AnyOutput {
	return o.ApplyT(func(v *TextFormatResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.EscapeChar
	}).(pulumi.AnyOutput)
}

// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
func (o TextFormatResponsePtrOutput) FirstRowAsHeader() pulumi.AnyOutput {
	return o.ApplyT(func(v *TextFormatResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.FirstRowAsHeader
	}).(pulumi.AnyOutput)
}

// The null value string. Type: string (or Expression with resultType string).
func (o TextFormatResponsePtrOutput) NullValue() pulumi.AnyOutput {
	return o.ApplyT(func(v *TextFormatResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.NullValue
	}).(pulumi.AnyOutput)
}

// The quote character. Type: string (or Expression with resultType string).
func (o TextFormatResponsePtrOutput) QuoteChar() pulumi.AnyOutput {
	return o.ApplyT(func(v *TextFormatResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.QuoteChar
	}).(pulumi.AnyOutput)
}

// The row delimiter. Type: string (or Expression with resultType string).
func (o TextFormatResponsePtrOutput) RowDelimiter() pulumi.AnyOutput {
	return o.ApplyT(func(v *TextFormatResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.RowDelimiter
	}).(pulumi.AnyOutput)
}

// Serializer. Type: string (or Expression with resultType string).
func (o TextFormatResponsePtrOutput) Serializer() pulumi.AnyOutput {
	return o.ApplyT(func(v *TextFormatResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Serializer
	}).(pulumi.AnyOutput)
}

// The number of lines/rows to be skipped when parsing text files. The default value is 0. Type: integer (or Expression with resultType integer).
func (o TextFormatResponsePtrOutput) SkipLineCount() pulumi.AnyOutput {
	return o.ApplyT(func(v *TextFormatResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.SkipLineCount
	}).(pulumi.AnyOutput)
}

// Treat empty column values in the text file as null. The default value is true. Type: boolean (or Expression with resultType boolean).
func (o TextFormatResponsePtrOutput) TreatEmptyAsNull() pulumi.AnyOutput {
	return o.ApplyT(func(v *TextFormatResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.TreatEmptyAsNull
	}).(pulumi.AnyOutput)
}

// Type of dataset storage format.
// Expected value is 'TextFormat'.
func (o TextFormatResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TextFormatResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// A data flow transformation.
type Transformation struct {
	// Dataset reference.
	Dataset *DatasetReference `pulumi:"dataset"`
	// Transformation description.
	Description *string `pulumi:"description"`
	// Flowlet Reference
	Flowlet *DataFlowReference `pulumi:"flowlet"`
	// Linked service reference.
	LinkedService *LinkedServiceReference `pulumi:"linkedService"`
	// Transformation name.
	Name string `pulumi:"name"`
}

// TransformationInput is an input type that accepts TransformationArgs and TransformationOutput values.
// You can construct a concrete instance of `TransformationInput` via:
//
//	TransformationArgs{...}
type TransformationInput interface {
	pulumi.Input

	ToTransformationOutput() TransformationOutput
	ToTransformationOutputWithContext(context.Context) TransformationOutput
}

// A data flow transformation.
type TransformationArgs struct {
	// Dataset reference.
	Dataset DatasetReferencePtrInput `pulumi:"dataset"`
	// Transformation description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Flowlet Reference
	Flowlet DataFlowReferencePtrInput `pulumi:"flowlet"`
	// Linked service reference.
	LinkedService LinkedServiceReferencePtrInput `pulumi:"linkedService"`
	// Transformation name.
	Name pulumi.StringInput `pulumi:"name"`
}

func (TransformationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Transformation)(nil)).Elem()
}

func (i TransformationArgs) ToTransformationOutput() TransformationOutput {
	return i.ToTransformationOutputWithContext(context.Background())
}

func (i TransformationArgs) ToTransformationOutputWithContext(ctx context.Context) TransformationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformationOutput)
}

// TransformationArrayInput is an input type that accepts TransformationArray and TransformationArrayOutput values.
// You can construct a concrete instance of `TransformationArrayInput` via:
//
//	TransformationArray{ TransformationArgs{...} }
type TransformationArrayInput interface {
	pulumi.Input

	ToTransformationArrayOutput() TransformationArrayOutput
	ToTransformationArrayOutputWithContext(context.Context) TransformationArrayOutput
}

type TransformationArray []TransformationInput

func (TransformationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Transformation)(nil)).Elem()
}

func (i TransformationArray) ToTransformationArrayOutput() TransformationArrayOutput {
	return i.ToTransformationArrayOutputWithContext(context.Background())
}

func (i TransformationArray) ToTransformationArrayOutputWithContext(ctx context.Context) TransformationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformationArrayOutput)
}

// A data flow transformation.
type TransformationOutput struct{ *pulumi.OutputState }

func (TransformationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Transformation)(nil)).Elem()
}

func (o TransformationOutput) ToTransformationOutput() TransformationOutput {
	return o
}

func (o TransformationOutput) ToTransformationOutputWithContext(ctx context.Context) TransformationOutput {
	return o
}

// Dataset reference.
func (o TransformationOutput) Dataset() DatasetReferencePtrOutput {
	return o.ApplyT(func(v Transformation) *DatasetReference { return v.Dataset }).(DatasetReferencePtrOutput)
}

// Transformation description.
func (o TransformationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Transformation) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Flowlet Reference
func (o TransformationOutput) Flowlet() DataFlowReferencePtrOutput {
	return o.ApplyT(func(v Transformation) *DataFlowReference { return v.Flowlet }).(DataFlowReferencePtrOutput)
}

// Linked service reference.
func (o TransformationOutput) LinkedService() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v Transformation) *LinkedServiceReference { return v.LinkedService }).(LinkedServiceReferencePtrOutput)
}

// Transformation name.
func (o TransformationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Transformation) string { return v.Name }).(pulumi.StringOutput)
}

type TransformationArrayOutput struct{ *pulumi.OutputState }

func (TransformationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Transformation)(nil)).Elem()
}

func (o TransformationArrayOutput) ToTransformationArrayOutput() TransformationArrayOutput {
	return o
}

func (o TransformationArrayOutput) ToTransformationArrayOutputWithContext(ctx context.Context) TransformationArrayOutput {
	return o
}

func (o TransformationArrayOutput) Index(i pulumi.IntInput) TransformationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Transformation {
		return vs[0].([]Transformation)[vs[1].(int)]
	}).(TransformationOutput)
}

// A data flow transformation.
type TransformationResponse struct {
	// Dataset reference.
	Dataset *DatasetReferenceResponse `pulumi:"dataset"`
	// Transformation description.
	Description *string `pulumi:"description"`
	// Flowlet Reference
	Flowlet *DataFlowReferenceResponse `pulumi:"flowlet"`
	// Linked service reference.
	LinkedService *LinkedServiceReferenceResponse `pulumi:"linkedService"`
	// Transformation name.
	Name string `pulumi:"name"`
}

// A data flow transformation.
type TransformationResponseOutput struct{ *pulumi.OutputState }

func (TransformationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformationResponse)(nil)).Elem()
}

func (o TransformationResponseOutput) ToTransformationResponseOutput() TransformationResponseOutput {
	return o
}

func (o TransformationResponseOutput) ToTransformationResponseOutputWithContext(ctx context.Context) TransformationResponseOutput {
	return o
}

// Dataset reference.
func (o TransformationResponseOutput) Dataset() DatasetReferenceResponsePtrOutput {
	return o.ApplyT(func(v TransformationResponse) *DatasetReferenceResponse { return v.Dataset }).(DatasetReferenceResponsePtrOutput)
}

// Transformation description.
func (o TransformationResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformationResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Flowlet Reference
func (o TransformationResponseOutput) Flowlet() DataFlowReferenceResponsePtrOutput {
	return o.ApplyT(func(v TransformationResponse) *DataFlowReferenceResponse { return v.Flowlet }).(DataFlowReferenceResponsePtrOutput)
}

// Linked service reference.
func (o TransformationResponseOutput) LinkedService() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v TransformationResponse) *LinkedServiceReferenceResponse { return v.LinkedService }).(LinkedServiceReferenceResponsePtrOutput)
}

// Transformation name.
func (o TransformationResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TransformationResponse) string { return v.Name }).(pulumi.StringOutput)
}

type TransformationResponseArrayOutput struct{ *pulumi.OutputState }

func (TransformationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformationResponse)(nil)).Elem()
}

func (o TransformationResponseArrayOutput) ToTransformationResponseArrayOutput() TransformationResponseArrayOutput {
	return o
}

func (o TransformationResponseArrayOutput) ToTransformationResponseArrayOutputWithContext(ctx context.Context) TransformationResponseArrayOutput {
	return o
}

func (o TransformationResponseArrayOutput) Index(i pulumi.IntInput) TransformationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TransformationResponse {
		return vs[0].([]TransformationResponse)[vs[1].(int)]
	}).(TransformationResponseOutput)
}

// Trigger referenced dependency.
type TriggerDependencyReference struct {
	// Referenced trigger.
	ReferenceTrigger TriggerReference `pulumi:"referenceTrigger"`
	// The type of dependency reference.
	// Expected value is 'TriggerDependencyReference'.
	Type string `pulumi:"type"`
}

// TriggerDependencyReferenceInput is an input type that accepts TriggerDependencyReferenceArgs and TriggerDependencyReferenceOutput values.
// You can construct a concrete instance of `TriggerDependencyReferenceInput` via:
//
//	TriggerDependencyReferenceArgs{...}
type TriggerDependencyReferenceInput interface {
	pulumi.Input

	ToTriggerDependencyReferenceOutput() TriggerDependencyReferenceOutput
	ToTriggerDependencyReferenceOutputWithContext(context.Context) TriggerDependencyReferenceOutput
}

// Trigger referenced dependency.
type TriggerDependencyReferenceArgs struct {
	// Referenced trigger.
	ReferenceTrigger TriggerReferenceInput `pulumi:"referenceTrigger"`
	// The type of dependency reference.
	// Expected value is 'TriggerDependencyReference'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TriggerDependencyReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerDependencyReference)(nil)).Elem()
}

func (i TriggerDependencyReferenceArgs) ToTriggerDependencyReferenceOutput() TriggerDependencyReferenceOutput {
	return i.ToTriggerDependencyReferenceOutputWithContext(context.Background())
}

func (i TriggerDependencyReferenceArgs) ToTriggerDependencyReferenceOutputWithContext(ctx context.Context) TriggerDependencyReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerDependencyReferenceOutput)
}

// Trigger referenced dependency.
type TriggerDependencyReferenceOutput struct{ *pulumi.OutputState }

func (TriggerDependencyReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerDependencyReference)(nil)).Elem()
}

func (o TriggerDependencyReferenceOutput) ToTriggerDependencyReferenceOutput() TriggerDependencyReferenceOutput {
	return o
}

func (o TriggerDependencyReferenceOutput) ToTriggerDependencyReferenceOutputWithContext(ctx context.Context) TriggerDependencyReferenceOutput {
	return o
}

// Referenced trigger.
func (o TriggerDependencyReferenceOutput) ReferenceTrigger() TriggerReferenceOutput {
	return o.ApplyT(func(v TriggerDependencyReference) TriggerReference { return v.ReferenceTrigger }).(TriggerReferenceOutput)
}

// The type of dependency reference.
// Expected value is 'TriggerDependencyReference'.
func (o TriggerDependencyReferenceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerDependencyReference) string { return v.Type }).(pulumi.StringOutput)
}

// Trigger referenced dependency.
type TriggerDependencyReferenceResponse struct {
	// Referenced trigger.
	ReferenceTrigger TriggerReferenceResponse `pulumi:"referenceTrigger"`
	// The type of dependency reference.
	// Expected value is 'TriggerDependencyReference'.
	Type string `pulumi:"type"`
}

// Trigger referenced dependency.
type TriggerDependencyReferenceResponseOutput struct{ *pulumi.OutputState }

func (TriggerDependencyReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerDependencyReferenceResponse)(nil)).Elem()
}

func (o TriggerDependencyReferenceResponseOutput) ToTriggerDependencyReferenceResponseOutput() TriggerDependencyReferenceResponseOutput {
	return o
}

func (o TriggerDependencyReferenceResponseOutput) ToTriggerDependencyReferenceResponseOutputWithContext(ctx context.Context) TriggerDependencyReferenceResponseOutput {
	return o
}

// Referenced trigger.
func (o TriggerDependencyReferenceResponseOutput) ReferenceTrigger() TriggerReferenceResponseOutput {
	return o.ApplyT(func(v TriggerDependencyReferenceResponse) TriggerReferenceResponse { return v.ReferenceTrigger }).(TriggerReferenceResponseOutput)
}

// The type of dependency reference.
// Expected value is 'TriggerDependencyReference'.
func (o TriggerDependencyReferenceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerDependencyReferenceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Pipeline that needs to be triggered with the given parameters.
type TriggerPipelineReference struct {
	// Pipeline parameters.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Pipeline reference.
	PipelineReference *PipelineReference `pulumi:"pipelineReference"`
}

// TriggerPipelineReferenceInput is an input type that accepts TriggerPipelineReferenceArgs and TriggerPipelineReferenceOutput values.
// You can construct a concrete instance of `TriggerPipelineReferenceInput` via:
//
//	TriggerPipelineReferenceArgs{...}
type TriggerPipelineReferenceInput interface {
	pulumi.Input

	ToTriggerPipelineReferenceOutput() TriggerPipelineReferenceOutput
	ToTriggerPipelineReferenceOutputWithContext(context.Context) TriggerPipelineReferenceOutput
}

// Pipeline that needs to be triggered with the given parameters.
type TriggerPipelineReferenceArgs struct {
	// Pipeline parameters.
	Parameters pulumi.MapInput `pulumi:"parameters"`
	// Pipeline reference.
	PipelineReference PipelineReferencePtrInput `pulumi:"pipelineReference"`
}

func (TriggerPipelineReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerPipelineReference)(nil)).Elem()
}

func (i TriggerPipelineReferenceArgs) ToTriggerPipelineReferenceOutput() TriggerPipelineReferenceOutput {
	return i.ToTriggerPipelineReferenceOutputWithContext(context.Background())
}

func (i TriggerPipelineReferenceArgs) ToTriggerPipelineReferenceOutputWithContext(ctx context.Context) TriggerPipelineReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerPipelineReferenceOutput)
}

// TriggerPipelineReferenceArrayInput is an input type that accepts TriggerPipelineReferenceArray and TriggerPipelineReferenceArrayOutput values.
// You can construct a concrete instance of `TriggerPipelineReferenceArrayInput` via:
//
//	TriggerPipelineReferenceArray{ TriggerPipelineReferenceArgs{...} }
type TriggerPipelineReferenceArrayInput interface {
	pulumi.Input

	ToTriggerPipelineReferenceArrayOutput() TriggerPipelineReferenceArrayOutput
	ToTriggerPipelineReferenceArrayOutputWithContext(context.Context) TriggerPipelineReferenceArrayOutput
}

type TriggerPipelineReferenceArray []TriggerPipelineReferenceInput

func (TriggerPipelineReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerPipelineReference)(nil)).Elem()
}

func (i TriggerPipelineReferenceArray) ToTriggerPipelineReferenceArrayOutput() TriggerPipelineReferenceArrayOutput {
	return i.ToTriggerPipelineReferenceArrayOutputWithContext(context.Background())
}

func (i TriggerPipelineReferenceArray) ToTriggerPipelineReferenceArrayOutputWithContext(ctx context.Context) TriggerPipelineReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerPipelineReferenceArrayOutput)
}

// Pipeline that needs to be triggered with the given parameters.
type TriggerPipelineReferenceOutput struct{ *pulumi.OutputState }

func (TriggerPipelineReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerPipelineReference)(nil)).Elem()
}

func (o TriggerPipelineReferenceOutput) ToTriggerPipelineReferenceOutput() TriggerPipelineReferenceOutput {
	return o
}

func (o TriggerPipelineReferenceOutput) ToTriggerPipelineReferenceOutputWithContext(ctx context.Context) TriggerPipelineReferenceOutput {
	return o
}

// Pipeline parameters.
func (o TriggerPipelineReferenceOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v TriggerPipelineReference) map[string]interface{} { return v.Parameters }).(pulumi.MapOutput)
}

// Pipeline reference.
func (o TriggerPipelineReferenceOutput) PipelineReference() PipelineReferencePtrOutput {
	return o.ApplyT(func(v TriggerPipelineReference) *PipelineReference { return v.PipelineReference }).(PipelineReferencePtrOutput)
}

type TriggerPipelineReferenceArrayOutput struct{ *pulumi.OutputState }

func (TriggerPipelineReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerPipelineReference)(nil)).Elem()
}

func (o TriggerPipelineReferenceArrayOutput) ToTriggerPipelineReferenceArrayOutput() TriggerPipelineReferenceArrayOutput {
	return o
}

func (o TriggerPipelineReferenceArrayOutput) ToTriggerPipelineReferenceArrayOutputWithContext(ctx context.Context) TriggerPipelineReferenceArrayOutput {
	return o
}

func (o TriggerPipelineReferenceArrayOutput) Index(i pulumi.IntInput) TriggerPipelineReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TriggerPipelineReference {
		return vs[0].([]TriggerPipelineReference)[vs[1].(int)]
	}).(TriggerPipelineReferenceOutput)
}

// Pipeline that needs to be triggered with the given parameters.
type TriggerPipelineReferenceResponse struct {
	// Pipeline parameters.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Pipeline reference.
	PipelineReference *PipelineReferenceResponse `pulumi:"pipelineReference"`
}

// Pipeline that needs to be triggered with the given parameters.
type TriggerPipelineReferenceResponseOutput struct{ *pulumi.OutputState }

func (TriggerPipelineReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerPipelineReferenceResponse)(nil)).Elem()
}

func (o TriggerPipelineReferenceResponseOutput) ToTriggerPipelineReferenceResponseOutput() TriggerPipelineReferenceResponseOutput {
	return o
}

func (o TriggerPipelineReferenceResponseOutput) ToTriggerPipelineReferenceResponseOutputWithContext(ctx context.Context) TriggerPipelineReferenceResponseOutput {
	return o
}

// Pipeline parameters.
func (o TriggerPipelineReferenceResponseOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v TriggerPipelineReferenceResponse) map[string]interface{} { return v.Parameters }).(pulumi.MapOutput)
}

// Pipeline reference.
func (o TriggerPipelineReferenceResponseOutput) PipelineReference() PipelineReferenceResponsePtrOutput {
	return o.ApplyT(func(v TriggerPipelineReferenceResponse) *PipelineReferenceResponse { return v.PipelineReference }).(PipelineReferenceResponsePtrOutput)
}

type TriggerPipelineReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (TriggerPipelineReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerPipelineReferenceResponse)(nil)).Elem()
}

func (o TriggerPipelineReferenceResponseArrayOutput) ToTriggerPipelineReferenceResponseArrayOutput() TriggerPipelineReferenceResponseArrayOutput {
	return o
}

func (o TriggerPipelineReferenceResponseArrayOutput) ToTriggerPipelineReferenceResponseArrayOutputWithContext(ctx context.Context) TriggerPipelineReferenceResponseArrayOutput {
	return o
}

func (o TriggerPipelineReferenceResponseArrayOutput) Index(i pulumi.IntInput) TriggerPipelineReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TriggerPipelineReferenceResponse {
		return vs[0].([]TriggerPipelineReferenceResponse)[vs[1].(int)]
	}).(TriggerPipelineReferenceResponseOutput)
}

// Trigger reference type.
type TriggerReference struct {
	// Reference trigger name.
	ReferenceName string `pulumi:"referenceName"`
	// Trigger reference type.
	Type string `pulumi:"type"`
}

// TriggerReferenceInput is an input type that accepts TriggerReferenceArgs and TriggerReferenceOutput values.
// You can construct a concrete instance of `TriggerReferenceInput` via:
//
//	TriggerReferenceArgs{...}
type TriggerReferenceInput interface {
	pulumi.Input

	ToTriggerReferenceOutput() TriggerReferenceOutput
	ToTriggerReferenceOutputWithContext(context.Context) TriggerReferenceOutput
}

// Trigger reference type.
type TriggerReferenceArgs struct {
	// Reference trigger name.
	ReferenceName pulumi.StringInput `pulumi:"referenceName"`
	// Trigger reference type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TriggerReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerReference)(nil)).Elem()
}

func (i TriggerReferenceArgs) ToTriggerReferenceOutput() TriggerReferenceOutput {
	return i.ToTriggerReferenceOutputWithContext(context.Background())
}

func (i TriggerReferenceArgs) ToTriggerReferenceOutputWithContext(ctx context.Context) TriggerReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerReferenceOutput)
}

// Trigger reference type.
type TriggerReferenceOutput struct{ *pulumi.OutputState }

func (TriggerReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerReference)(nil)).Elem()
}

func (o TriggerReferenceOutput) ToTriggerReferenceOutput() TriggerReferenceOutput {
	return o
}

func (o TriggerReferenceOutput) ToTriggerReferenceOutputWithContext(ctx context.Context) TriggerReferenceOutput {
	return o
}

// Reference trigger name.
func (o TriggerReferenceOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerReference) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Trigger reference type.
func (o TriggerReferenceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerReference) string { return v.Type }).(pulumi.StringOutput)
}

// Trigger reference type.
type TriggerReferenceResponse struct {
	// Reference trigger name.
	ReferenceName string `pulumi:"referenceName"`
	// Trigger reference type.
	Type string `pulumi:"type"`
}

// Trigger reference type.
type TriggerReferenceResponseOutput struct{ *pulumi.OutputState }

func (TriggerReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerReferenceResponse)(nil)).Elem()
}

func (o TriggerReferenceResponseOutput) ToTriggerReferenceResponseOutput() TriggerReferenceResponseOutput {
	return o
}

func (o TriggerReferenceResponseOutput) ToTriggerReferenceResponseOutputWithContext(ctx context.Context) TriggerReferenceResponseOutput {
	return o
}

// Reference trigger name.
func (o TriggerReferenceResponseOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerReferenceResponse) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Trigger reference type.
func (o TriggerReferenceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerReferenceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Trigger that schedules pipeline runs for all fixed time interval windows from a start time without gaps and also supports backfill scenarios (when start time is in the past).
type TumblingWindowTrigger struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Specifies how long the trigger waits past due time before triggering new run. It doesn't alter window start and end time. The default is 0. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Delay interface{} `pulumi:"delay"`
	// Triggers that this trigger depends on. Only tumbling window triggers are supported.
	DependsOn []interface{} `pulumi:"dependsOn"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// The end time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported.
	EndTime *string `pulumi:"endTime"`
	// The frequency of the time windows.
	Frequency string `pulumi:"frequency"`
	// The interval of the time windows. The minimum interval allowed is 15 Minutes.
	Interval int `pulumi:"interval"`
	// The max number of parallel time windows (ready for execution) for which a new run is triggered.
	MaxConcurrency int `pulumi:"maxConcurrency"`
	// Pipeline for which runs are created when an event is fired for trigger window that is ready.
	Pipeline TriggerPipelineReference `pulumi:"pipeline"`
	// Retry policy that will be applied for failed pipeline runs.
	RetryPolicy *RetryPolicy `pulumi:"retryPolicy"`
	// The start time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported.
	StartTime string `pulumi:"startTime"`
	// Trigger type.
	// Expected value is 'TumblingWindowTrigger'.
	Type string `pulumi:"type"`
}

// TumblingWindowTriggerInput is an input type that accepts TumblingWindowTriggerArgs and TumblingWindowTriggerOutput values.
// You can construct a concrete instance of `TumblingWindowTriggerInput` via:
//
//	TumblingWindowTriggerArgs{...}
type TumblingWindowTriggerInput interface {
	pulumi.Input

	ToTumblingWindowTriggerOutput() TumblingWindowTriggerOutput
	ToTumblingWindowTriggerOutputWithContext(context.Context) TumblingWindowTriggerOutput
}

// Trigger that schedules pipeline runs for all fixed time interval windows from a start time without gaps and also supports backfill scenarios (when start time is in the past).
type TumblingWindowTriggerArgs struct {
	// List of tags that can be used for describing the trigger.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Specifies how long the trigger waits past due time before triggering new run. It doesn't alter window start and end time. The default is 0. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Delay pulumi.Input `pulumi:"delay"`
	// Triggers that this trigger depends on. Only tumbling window triggers are supported.
	DependsOn pulumi.ArrayInput `pulumi:"dependsOn"`
	// Trigger description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The end time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported.
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// The frequency of the time windows.
	Frequency pulumi.StringInput `pulumi:"frequency"`
	// The interval of the time windows. The minimum interval allowed is 15 Minutes.
	Interval pulumi.IntInput `pulumi:"interval"`
	// The max number of parallel time windows (ready for execution) for which a new run is triggered.
	MaxConcurrency pulumi.IntInput `pulumi:"maxConcurrency"`
	// Pipeline for which runs are created when an event is fired for trigger window that is ready.
	Pipeline TriggerPipelineReferenceInput `pulumi:"pipeline"`
	// Retry policy that will be applied for failed pipeline runs.
	RetryPolicy RetryPolicyPtrInput `pulumi:"retryPolicy"`
	// The start time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported.
	StartTime pulumi.StringInput `pulumi:"startTime"`
	// Trigger type.
	// Expected value is 'TumblingWindowTrigger'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TumblingWindowTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TumblingWindowTrigger)(nil)).Elem()
}

func (i TumblingWindowTriggerArgs) ToTumblingWindowTriggerOutput() TumblingWindowTriggerOutput {
	return i.ToTumblingWindowTriggerOutputWithContext(context.Background())
}

func (i TumblingWindowTriggerArgs) ToTumblingWindowTriggerOutputWithContext(ctx context.Context) TumblingWindowTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TumblingWindowTriggerOutput)
}

// Trigger that schedules pipeline runs for all fixed time interval windows from a start time without gaps and also supports backfill scenarios (when start time is in the past).
type TumblingWindowTriggerOutput struct{ *pulumi.OutputState }

func (TumblingWindowTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TumblingWindowTrigger)(nil)).Elem()
}

func (o TumblingWindowTriggerOutput) ToTumblingWindowTriggerOutput() TumblingWindowTriggerOutput {
	return o
}

func (o TumblingWindowTriggerOutput) ToTumblingWindowTriggerOutputWithContext(ctx context.Context) TumblingWindowTriggerOutput {
	return o
}

// List of tags that can be used for describing the trigger.
func (o TumblingWindowTriggerOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v TumblingWindowTrigger) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Specifies how long the trigger waits past due time before triggering new run. It doesn't alter window start and end time. The default is 0. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o TumblingWindowTriggerOutput) Delay() pulumi.AnyOutput {
	return o.ApplyT(func(v TumblingWindowTrigger) interface{} { return v.Delay }).(pulumi.AnyOutput)
}

// Triggers that this trigger depends on. Only tumbling window triggers are supported.
func (o TumblingWindowTriggerOutput) DependsOn() pulumi.ArrayOutput {
	return o.ApplyT(func(v TumblingWindowTrigger) []interface{} { return v.DependsOn }).(pulumi.ArrayOutput)
}

// Trigger description.
func (o TumblingWindowTriggerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TumblingWindowTrigger) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The end time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported.
func (o TumblingWindowTriggerOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TumblingWindowTrigger) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// The frequency of the time windows.
func (o TumblingWindowTriggerOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v TumblingWindowTrigger) string { return v.Frequency }).(pulumi.StringOutput)
}

// The interval of the time windows. The minimum interval allowed is 15 Minutes.
func (o TumblingWindowTriggerOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v TumblingWindowTrigger) int { return v.Interval }).(pulumi.IntOutput)
}

// The max number of parallel time windows (ready for execution) for which a new run is triggered.
func (o TumblingWindowTriggerOutput) MaxConcurrency() pulumi.IntOutput {
	return o.ApplyT(func(v TumblingWindowTrigger) int { return v.MaxConcurrency }).(pulumi.IntOutput)
}

// Pipeline for which runs are created when an event is fired for trigger window that is ready.
func (o TumblingWindowTriggerOutput) Pipeline() TriggerPipelineReferenceOutput {
	return o.ApplyT(func(v TumblingWindowTrigger) TriggerPipelineReference { return v.Pipeline }).(TriggerPipelineReferenceOutput)
}

// Retry policy that will be applied for failed pipeline runs.
func (o TumblingWindowTriggerOutput) RetryPolicy() RetryPolicyPtrOutput {
	return o.ApplyT(func(v TumblingWindowTrigger) *RetryPolicy { return v.RetryPolicy }).(RetryPolicyPtrOutput)
}

// The start time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported.
func (o TumblingWindowTriggerOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v TumblingWindowTrigger) string { return v.StartTime }).(pulumi.StringOutput)
}

// Trigger type.
// Expected value is 'TumblingWindowTrigger'.
func (o TumblingWindowTriggerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TumblingWindowTrigger) string { return v.Type }).(pulumi.StringOutput)
}

// Referenced tumbling window trigger dependency.
type TumblingWindowTriggerDependencyReference struct {
	// Timespan applied to the start time of a tumbling window when evaluating dependency.
	Offset *string `pulumi:"offset"`
	// Referenced trigger.
	ReferenceTrigger TriggerReference `pulumi:"referenceTrigger"`
	// The size of the window when evaluating the dependency. If undefined the frequency of the tumbling window will be used.
	Size *string `pulumi:"size"`
	// The type of dependency reference.
	// Expected value is 'TumblingWindowTriggerDependencyReference'.
	Type string `pulumi:"type"`
}

// TumblingWindowTriggerDependencyReferenceInput is an input type that accepts TumblingWindowTriggerDependencyReferenceArgs and TumblingWindowTriggerDependencyReferenceOutput values.
// You can construct a concrete instance of `TumblingWindowTriggerDependencyReferenceInput` via:
//
//	TumblingWindowTriggerDependencyReferenceArgs{...}
type TumblingWindowTriggerDependencyReferenceInput interface {
	pulumi.Input

	ToTumblingWindowTriggerDependencyReferenceOutput() TumblingWindowTriggerDependencyReferenceOutput
	ToTumblingWindowTriggerDependencyReferenceOutputWithContext(context.Context) TumblingWindowTriggerDependencyReferenceOutput
}

// Referenced tumbling window trigger dependency.
type TumblingWindowTriggerDependencyReferenceArgs struct {
	// Timespan applied to the start time of a tumbling window when evaluating dependency.
	Offset pulumi.StringPtrInput `pulumi:"offset"`
	// Referenced trigger.
	ReferenceTrigger TriggerReferenceInput `pulumi:"referenceTrigger"`
	// The size of the window when evaluating the dependency. If undefined the frequency of the tumbling window will be used.
	Size pulumi.StringPtrInput `pulumi:"size"`
	// The type of dependency reference.
	// Expected value is 'TumblingWindowTriggerDependencyReference'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TumblingWindowTriggerDependencyReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TumblingWindowTriggerDependencyReference)(nil)).Elem()
}

func (i TumblingWindowTriggerDependencyReferenceArgs) ToTumblingWindowTriggerDependencyReferenceOutput() TumblingWindowTriggerDependencyReferenceOutput {
	return i.ToTumblingWindowTriggerDependencyReferenceOutputWithContext(context.Background())
}

func (i TumblingWindowTriggerDependencyReferenceArgs) ToTumblingWindowTriggerDependencyReferenceOutputWithContext(ctx context.Context) TumblingWindowTriggerDependencyReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TumblingWindowTriggerDependencyReferenceOutput)
}

// Referenced tumbling window trigger dependency.
type TumblingWindowTriggerDependencyReferenceOutput struct{ *pulumi.OutputState }

func (TumblingWindowTriggerDependencyReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TumblingWindowTriggerDependencyReference)(nil)).Elem()
}

func (o TumblingWindowTriggerDependencyReferenceOutput) ToTumblingWindowTriggerDependencyReferenceOutput() TumblingWindowTriggerDependencyReferenceOutput {
	return o
}

func (o TumblingWindowTriggerDependencyReferenceOutput) ToTumblingWindowTriggerDependencyReferenceOutputWithContext(ctx context.Context) TumblingWindowTriggerDependencyReferenceOutput {
	return o
}

// Timespan applied to the start time of a tumbling window when evaluating dependency.
func (o TumblingWindowTriggerDependencyReferenceOutput) Offset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TumblingWindowTriggerDependencyReference) *string { return v.Offset }).(pulumi.StringPtrOutput)
}

// Referenced trigger.
func (o TumblingWindowTriggerDependencyReferenceOutput) ReferenceTrigger() TriggerReferenceOutput {
	return o.ApplyT(func(v TumblingWindowTriggerDependencyReference) TriggerReference { return v.ReferenceTrigger }).(TriggerReferenceOutput)
}

// The size of the window when evaluating the dependency. If undefined the frequency of the tumbling window will be used.
func (o TumblingWindowTriggerDependencyReferenceOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TumblingWindowTriggerDependencyReference) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// The type of dependency reference.
// Expected value is 'TumblingWindowTriggerDependencyReference'.
func (o TumblingWindowTriggerDependencyReferenceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TumblingWindowTriggerDependencyReference) string { return v.Type }).(pulumi.StringOutput)
}

// Referenced tumbling window trigger dependency.
type TumblingWindowTriggerDependencyReferenceResponse struct {
	// Timespan applied to the start time of a tumbling window when evaluating dependency.
	Offset *string `pulumi:"offset"`
	// Referenced trigger.
	ReferenceTrigger TriggerReferenceResponse `pulumi:"referenceTrigger"`
	// The size of the window when evaluating the dependency. If undefined the frequency of the tumbling window will be used.
	Size *string `pulumi:"size"`
	// The type of dependency reference.
	// Expected value is 'TumblingWindowTriggerDependencyReference'.
	Type string `pulumi:"type"`
}

// Referenced tumbling window trigger dependency.
type TumblingWindowTriggerDependencyReferenceResponseOutput struct{ *pulumi.OutputState }

func (TumblingWindowTriggerDependencyReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TumblingWindowTriggerDependencyReferenceResponse)(nil)).Elem()
}

func (o TumblingWindowTriggerDependencyReferenceResponseOutput) ToTumblingWindowTriggerDependencyReferenceResponseOutput() TumblingWindowTriggerDependencyReferenceResponseOutput {
	return o
}

func (o TumblingWindowTriggerDependencyReferenceResponseOutput) ToTumblingWindowTriggerDependencyReferenceResponseOutputWithContext(ctx context.Context) TumblingWindowTriggerDependencyReferenceResponseOutput {
	return o
}

// Timespan applied to the start time of a tumbling window when evaluating dependency.
func (o TumblingWindowTriggerDependencyReferenceResponseOutput) Offset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TumblingWindowTriggerDependencyReferenceResponse) *string { return v.Offset }).(pulumi.StringPtrOutput)
}

// Referenced trigger.
func (o TumblingWindowTriggerDependencyReferenceResponseOutput) ReferenceTrigger() TriggerReferenceResponseOutput {
	return o.ApplyT(func(v TumblingWindowTriggerDependencyReferenceResponse) TriggerReferenceResponse {
		return v.ReferenceTrigger
	}).(TriggerReferenceResponseOutput)
}

// The size of the window when evaluating the dependency. If undefined the frequency of the tumbling window will be used.
func (o TumblingWindowTriggerDependencyReferenceResponseOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TumblingWindowTriggerDependencyReferenceResponse) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// The type of dependency reference.
// Expected value is 'TumblingWindowTriggerDependencyReference'.
func (o TumblingWindowTriggerDependencyReferenceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TumblingWindowTriggerDependencyReferenceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Trigger that schedules pipeline runs for all fixed time interval windows from a start time without gaps and also supports backfill scenarios (when start time is in the past).
type TumblingWindowTriggerResponse struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Specifies how long the trigger waits past due time before triggering new run. It doesn't alter window start and end time. The default is 0. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Delay interface{} `pulumi:"delay"`
	// Triggers that this trigger depends on. Only tumbling window triggers are supported.
	DependsOn []interface{} `pulumi:"dependsOn"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// The end time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported.
	EndTime *string `pulumi:"endTime"`
	// The frequency of the time windows.
	Frequency string `pulumi:"frequency"`
	// The interval of the time windows. The minimum interval allowed is 15 Minutes.
	Interval int `pulumi:"interval"`
	// The max number of parallel time windows (ready for execution) for which a new run is triggered.
	MaxConcurrency int `pulumi:"maxConcurrency"`
	// Pipeline for which runs are created when an event is fired for trigger window that is ready.
	Pipeline TriggerPipelineReferenceResponse `pulumi:"pipeline"`
	// Retry policy that will be applied for failed pipeline runs.
	RetryPolicy *RetryPolicyResponse `pulumi:"retryPolicy"`
	// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState string `pulumi:"runtimeState"`
	// The start time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported.
	StartTime string `pulumi:"startTime"`
	// Trigger type.
	// Expected value is 'TumblingWindowTrigger'.
	Type string `pulumi:"type"`
}

// Trigger that schedules pipeline runs for all fixed time interval windows from a start time without gaps and also supports backfill scenarios (when start time is in the past).
type TumblingWindowTriggerResponseOutput struct{ *pulumi.OutputState }

func (TumblingWindowTriggerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TumblingWindowTriggerResponse)(nil)).Elem()
}

func (o TumblingWindowTriggerResponseOutput) ToTumblingWindowTriggerResponseOutput() TumblingWindowTriggerResponseOutput {
	return o
}

func (o TumblingWindowTriggerResponseOutput) ToTumblingWindowTriggerResponseOutputWithContext(ctx context.Context) TumblingWindowTriggerResponseOutput {
	return o
}

// List of tags that can be used for describing the trigger.
func (o TumblingWindowTriggerResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v TumblingWindowTriggerResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Specifies how long the trigger waits past due time before triggering new run. It doesn't alter window start and end time. The default is 0. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o TumblingWindowTriggerResponseOutput) Delay() pulumi.AnyOutput {
	return o.ApplyT(func(v TumblingWindowTriggerResponse) interface{} { return v.Delay }).(pulumi.AnyOutput)
}

// Triggers that this trigger depends on. Only tumbling window triggers are supported.
func (o TumblingWindowTriggerResponseOutput) DependsOn() pulumi.ArrayOutput {
	return o.ApplyT(func(v TumblingWindowTriggerResponse) []interface{} { return v.DependsOn }).(pulumi.ArrayOutput)
}

// Trigger description.
func (o TumblingWindowTriggerResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TumblingWindowTriggerResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The end time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported.
func (o TumblingWindowTriggerResponseOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TumblingWindowTriggerResponse) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// The frequency of the time windows.
func (o TumblingWindowTriggerResponseOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v TumblingWindowTriggerResponse) string { return v.Frequency }).(pulumi.StringOutput)
}

// The interval of the time windows. The minimum interval allowed is 15 Minutes.
func (o TumblingWindowTriggerResponseOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v TumblingWindowTriggerResponse) int { return v.Interval }).(pulumi.IntOutput)
}

// The max number of parallel time windows (ready for execution) for which a new run is triggered.
func (o TumblingWindowTriggerResponseOutput) MaxConcurrency() pulumi.IntOutput {
	return o.ApplyT(func(v TumblingWindowTriggerResponse) int { return v.MaxConcurrency }).(pulumi.IntOutput)
}

// Pipeline for which runs are created when an event is fired for trigger window that is ready.
func (o TumblingWindowTriggerResponseOutput) Pipeline() TriggerPipelineReferenceResponseOutput {
	return o.ApplyT(func(v TumblingWindowTriggerResponse) TriggerPipelineReferenceResponse { return v.Pipeline }).(TriggerPipelineReferenceResponseOutput)
}

// Retry policy that will be applied for failed pipeline runs.
func (o TumblingWindowTriggerResponseOutput) RetryPolicy() RetryPolicyResponsePtrOutput {
	return o.ApplyT(func(v TumblingWindowTriggerResponse) *RetryPolicyResponse { return v.RetryPolicy }).(RetryPolicyResponsePtrOutput)
}

// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
func (o TumblingWindowTriggerResponseOutput) RuntimeState() pulumi.StringOutput {
	return o.ApplyT(func(v TumblingWindowTriggerResponse) string { return v.RuntimeState }).(pulumi.StringOutput)
}

// The start time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported.
func (o TumblingWindowTriggerResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v TumblingWindowTriggerResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// Trigger type.
// Expected value is 'TumblingWindowTrigger'.
func (o TumblingWindowTriggerResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TumblingWindowTriggerResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for Twilio.
type TwilioLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The auth token of Twilio service.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Twilio'.
	Type string `pulumi:"type"`
	// The Account SID of Twilio service. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// TwilioLinkedServiceInput is an input type that accepts TwilioLinkedServiceArgs and TwilioLinkedServiceOutput values.
// You can construct a concrete instance of `TwilioLinkedServiceInput` via:
//
//	TwilioLinkedServiceArgs{...}
type TwilioLinkedServiceInput interface {
	pulumi.Input

	ToTwilioLinkedServiceOutput() TwilioLinkedServiceOutput
	ToTwilioLinkedServiceOutputWithContext(context.Context) TwilioLinkedServiceOutput
}

// Linked service for Twilio.
type TwilioLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The auth token of Twilio service.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Twilio'.
	Type pulumi.StringInput `pulumi:"type"`
	// The Account SID of Twilio service. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (TwilioLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TwilioLinkedService)(nil)).Elem()
}

func (i TwilioLinkedServiceArgs) ToTwilioLinkedServiceOutput() TwilioLinkedServiceOutput {
	return i.ToTwilioLinkedServiceOutputWithContext(context.Background())
}

func (i TwilioLinkedServiceArgs) ToTwilioLinkedServiceOutputWithContext(ctx context.Context) TwilioLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TwilioLinkedServiceOutput)
}

// Linked service for Twilio.
type TwilioLinkedServiceOutput struct{ *pulumi.OutputState }

func (TwilioLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TwilioLinkedService)(nil)).Elem()
}

func (o TwilioLinkedServiceOutput) ToTwilioLinkedServiceOutput() TwilioLinkedServiceOutput {
	return o
}

func (o TwilioLinkedServiceOutput) ToTwilioLinkedServiceOutputWithContext(ctx context.Context) TwilioLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o TwilioLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v TwilioLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o TwilioLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v TwilioLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o TwilioLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TwilioLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o TwilioLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v TwilioLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The auth token of Twilio service.
func (o TwilioLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v TwilioLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Twilio'.
func (o TwilioLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TwilioLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The Account SID of Twilio service. Type: string (or Expression with resultType string).
func (o TwilioLinkedServiceOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v TwilioLinkedService) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// Linked service for Twilio.
type TwilioLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The auth token of Twilio service.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Twilio'.
	Type string `pulumi:"type"`
	// The Account SID of Twilio service. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// Linked service for Twilio.
type TwilioLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (TwilioLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TwilioLinkedServiceResponse)(nil)).Elem()
}

func (o TwilioLinkedServiceResponseOutput) ToTwilioLinkedServiceResponseOutput() TwilioLinkedServiceResponseOutput {
	return o
}

func (o TwilioLinkedServiceResponseOutput) ToTwilioLinkedServiceResponseOutputWithContext(ctx context.Context) TwilioLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o TwilioLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v TwilioLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o TwilioLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v TwilioLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o TwilioLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TwilioLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o TwilioLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v TwilioLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The auth token of Twilio service.
func (o TwilioLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v TwilioLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Twilio'.
func (o TwilioLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TwilioLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Account SID of Twilio service. Type: string (or Expression with resultType string).
func (o TwilioLinkedServiceResponseOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v TwilioLinkedServiceResponse) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// This activity executes inner activities until the specified boolean expression results to true or timeout is reached, whichever is earlier.
type UntilActivity struct {
	// List of activities to execute.
	Activities []interface{} `pulumi:"activities"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// An expression that would evaluate to Boolean. The loop will continue until this expression evaluates to true
	Expression Expression `pulumi:"expression"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Specifies the timeout for the activity to run. If there is no value specified, it takes the value of TimeSpan.FromDays(7) which is 1 week as default. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Timeout interface{} `pulumi:"timeout"`
	// Type of activity.
	// Expected value is 'Until'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// UntilActivityInput is an input type that accepts UntilActivityArgs and UntilActivityOutput values.
// You can construct a concrete instance of `UntilActivityInput` via:
//
//	UntilActivityArgs{...}
type UntilActivityInput interface {
	pulumi.Input

	ToUntilActivityOutput() UntilActivityOutput
	ToUntilActivityOutputWithContext(context.Context) UntilActivityOutput
}

// This activity executes inner activities until the specified boolean expression results to true or timeout is reached, whichever is earlier.
type UntilActivityArgs struct {
	// List of activities to execute.
	Activities pulumi.ArrayInput `pulumi:"activities"`
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// An expression that would evaluate to Boolean. The loop will continue until this expression evaluates to true
	Expression ExpressionInput `pulumi:"expression"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs pulumi.StringPtrInput `pulumi:"onInactiveMarkAs"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Specifies the timeout for the activity to run. If there is no value specified, it takes the value of TimeSpan.FromDays(7) which is 1 week as default. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Timeout pulumi.Input `pulumi:"timeout"`
	// Type of activity.
	// Expected value is 'Until'.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
}

func (UntilActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UntilActivity)(nil)).Elem()
}

func (i UntilActivityArgs) ToUntilActivityOutput() UntilActivityOutput {
	return i.ToUntilActivityOutputWithContext(context.Background())
}

func (i UntilActivityArgs) ToUntilActivityOutputWithContext(ctx context.Context) UntilActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UntilActivityOutput)
}

// This activity executes inner activities until the specified boolean expression results to true or timeout is reached, whichever is earlier.
type UntilActivityOutput struct{ *pulumi.OutputState }

func (UntilActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UntilActivity)(nil)).Elem()
}

func (o UntilActivityOutput) ToUntilActivityOutput() UntilActivityOutput {
	return o
}

func (o UntilActivityOutput) ToUntilActivityOutputWithContext(ctx context.Context) UntilActivityOutput {
	return o
}

// List of activities to execute.
func (o UntilActivityOutput) Activities() pulumi.ArrayOutput {
	return o.ApplyT(func(v UntilActivity) []interface{} { return v.Activities }).(pulumi.ArrayOutput)
}

// Activity depends on condition.
func (o UntilActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v UntilActivity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o UntilActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UntilActivity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// An expression that would evaluate to Boolean. The loop will continue until this expression evaluates to true
func (o UntilActivityOutput) Expression() ExpressionOutput {
	return o.ApplyT(func(v UntilActivity) Expression { return v.Expression }).(ExpressionOutput)
}

// Activity name.
func (o UntilActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v UntilActivity) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o UntilActivityOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UntilActivity) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o UntilActivityOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UntilActivity) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Specifies the timeout for the activity to run. If there is no value specified, it takes the value of TimeSpan.FromDays(7) which is 1 week as default. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o UntilActivityOutput) Timeout() pulumi.AnyOutput {
	return o.ApplyT(func(v UntilActivity) interface{} { return v.Timeout }).(pulumi.AnyOutput)
}

// Type of activity.
// Expected value is 'Until'.
func (o UntilActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v UntilActivity) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o UntilActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v UntilActivity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

// This activity executes inner activities until the specified boolean expression results to true or timeout is reached, whichever is earlier.
type UntilActivityResponse struct {
	// List of activities to execute.
	Activities []interface{} `pulumi:"activities"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// An expression that would evaluate to Boolean. The loop will continue until this expression evaluates to true
	Expression ExpressionResponse `pulumi:"expression"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Specifies the timeout for the activity to run. If there is no value specified, it takes the value of TimeSpan.FromDays(7) which is 1 week as default. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Timeout interface{} `pulumi:"timeout"`
	// Type of activity.
	// Expected value is 'Until'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// This activity executes inner activities until the specified boolean expression results to true or timeout is reached, whichever is earlier.
type UntilActivityResponseOutput struct{ *pulumi.OutputState }

func (UntilActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UntilActivityResponse)(nil)).Elem()
}

func (o UntilActivityResponseOutput) ToUntilActivityResponseOutput() UntilActivityResponseOutput {
	return o
}

func (o UntilActivityResponseOutput) ToUntilActivityResponseOutputWithContext(ctx context.Context) UntilActivityResponseOutput {
	return o
}

// List of activities to execute.
func (o UntilActivityResponseOutput) Activities() pulumi.ArrayOutput {
	return o.ApplyT(func(v UntilActivityResponse) []interface{} { return v.Activities }).(pulumi.ArrayOutput)
}

// Activity depends on condition.
func (o UntilActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v UntilActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o UntilActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UntilActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// An expression that would evaluate to Boolean. The loop will continue until this expression evaluates to true
func (o UntilActivityResponseOutput) Expression() ExpressionResponseOutput {
	return o.ApplyT(func(v UntilActivityResponse) ExpressionResponse { return v.Expression }).(ExpressionResponseOutput)
}

// Activity name.
func (o UntilActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v UntilActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o UntilActivityResponseOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UntilActivityResponse) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o UntilActivityResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UntilActivityResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Specifies the timeout for the activity to run. If there is no value specified, it takes the value of TimeSpan.FromDays(7) which is 1 week as default. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o UntilActivityResponseOutput) Timeout() pulumi.AnyOutput {
	return o.ApplyT(func(v UntilActivityResponse) interface{} { return v.Timeout }).(pulumi.AnyOutput)
}

// Type of activity.
// Expected value is 'Until'.
func (o UntilActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v UntilActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o UntilActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v UntilActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

// Get Data Plane read only token request definition.
type UserAccessPolicyResponse struct {
	// The resource path to get access relative to factory. Currently only empty string is supported which corresponds to the factory resource.
	AccessResourcePath *string `pulumi:"accessResourcePath"`
	// Expiration time for the token. Maximum duration for the token is eight hours and by default the token will expire in eight hours.
	ExpireTime *string `pulumi:"expireTime"`
	// The string with permissions for Data Plane access. Currently only 'r' is supported which grants read only access.
	Permissions *string `pulumi:"permissions"`
	// The name of the profile. Currently only the default is supported. The default value is DefaultProfile.
	ProfileName *string `pulumi:"profileName"`
	// Start time for the token. If not specified the current time will be used.
	StartTime *string `pulumi:"startTime"`
}

// Get Data Plane read only token request definition.
type UserAccessPolicyResponseOutput struct{ *pulumi.OutputState }

func (UserAccessPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAccessPolicyResponse)(nil)).Elem()
}

func (o UserAccessPolicyResponseOutput) ToUserAccessPolicyResponseOutput() UserAccessPolicyResponseOutput {
	return o
}

func (o UserAccessPolicyResponseOutput) ToUserAccessPolicyResponseOutputWithContext(ctx context.Context) UserAccessPolicyResponseOutput {
	return o
}

// The resource path to get access relative to factory. Currently only empty string is supported which corresponds to the factory resource.
func (o UserAccessPolicyResponseOutput) AccessResourcePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAccessPolicyResponse) *string { return v.AccessResourcePath }).(pulumi.StringPtrOutput)
}

// Expiration time for the token. Maximum duration for the token is eight hours and by default the token will expire in eight hours.
func (o UserAccessPolicyResponseOutput) ExpireTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAccessPolicyResponse) *string { return v.ExpireTime }).(pulumi.StringPtrOutput)
}

// The string with permissions for Data Plane access. Currently only 'r' is supported which grants read only access.
func (o UserAccessPolicyResponseOutput) Permissions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAccessPolicyResponse) *string { return v.Permissions }).(pulumi.StringPtrOutput)
}

// The name of the profile. Currently only the default is supported. The default value is DefaultProfile.
func (o UserAccessPolicyResponseOutput) ProfileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAccessPolicyResponse) *string { return v.ProfileName }).(pulumi.StringPtrOutput)
}

// Start time for the token. If not specified the current time will be used.
func (o UserAccessPolicyResponseOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAccessPolicyResponse) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type UserAccessPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (UserAccessPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAccessPolicyResponse)(nil)).Elem()
}

func (o UserAccessPolicyResponsePtrOutput) ToUserAccessPolicyResponsePtrOutput() UserAccessPolicyResponsePtrOutput {
	return o
}

func (o UserAccessPolicyResponsePtrOutput) ToUserAccessPolicyResponsePtrOutputWithContext(ctx context.Context) UserAccessPolicyResponsePtrOutput {
	return o
}

func (o UserAccessPolicyResponsePtrOutput) Elem() UserAccessPolicyResponseOutput {
	return o.ApplyT(func(v *UserAccessPolicyResponse) UserAccessPolicyResponse {
		if v != nil {
			return *v
		}
		var ret UserAccessPolicyResponse
		return ret
	}).(UserAccessPolicyResponseOutput)
}

// The resource path to get access relative to factory. Currently only empty string is supported which corresponds to the factory resource.
func (o UserAccessPolicyResponsePtrOutput) AccessResourcePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAccessPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.AccessResourcePath
	}).(pulumi.StringPtrOutput)
}

// Expiration time for the token. Maximum duration for the token is eight hours and by default the token will expire in eight hours.
func (o UserAccessPolicyResponsePtrOutput) ExpireTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAccessPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.ExpireTime
	}).(pulumi.StringPtrOutput)
}

// The string with permissions for Data Plane access. Currently only 'r' is supported which grants read only access.
func (o UserAccessPolicyResponsePtrOutput) Permissions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAccessPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.Permissions
	}).(pulumi.StringPtrOutput)
}

// The name of the profile. Currently only the default is supported. The default value is DefaultProfile.
func (o UserAccessPolicyResponsePtrOutput) ProfileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAccessPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.ProfileName
	}).(pulumi.StringPtrOutput)
}

// Start time for the token. If not specified the current time will be used.
func (o UserAccessPolicyResponsePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAccessPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// User property.
type UserProperty struct {
	// User property name.
	Name string `pulumi:"name"`
	// User property value. Type: string (or Expression with resultType string).
	Value interface{} `pulumi:"value"`
}

// UserPropertyInput is an input type that accepts UserPropertyArgs and UserPropertyOutput values.
// You can construct a concrete instance of `UserPropertyInput` via:
//
//	UserPropertyArgs{...}
type UserPropertyInput interface {
	pulumi.Input

	ToUserPropertyOutput() UserPropertyOutput
	ToUserPropertyOutputWithContext(context.Context) UserPropertyOutput
}

// User property.
type UserPropertyArgs struct {
	// User property name.
	Name pulumi.StringInput `pulumi:"name"`
	// User property value. Type: string (or Expression with resultType string).
	Value pulumi.Input `pulumi:"value"`
}

func (UserPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserProperty)(nil)).Elem()
}

func (i UserPropertyArgs) ToUserPropertyOutput() UserPropertyOutput {
	return i.ToUserPropertyOutputWithContext(context.Background())
}

func (i UserPropertyArgs) ToUserPropertyOutputWithContext(ctx context.Context) UserPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPropertyOutput)
}

// UserPropertyArrayInput is an input type that accepts UserPropertyArray and UserPropertyArrayOutput values.
// You can construct a concrete instance of `UserPropertyArrayInput` via:
//
//	UserPropertyArray{ UserPropertyArgs{...} }
type UserPropertyArrayInput interface {
	pulumi.Input

	ToUserPropertyArrayOutput() UserPropertyArrayOutput
	ToUserPropertyArrayOutputWithContext(context.Context) UserPropertyArrayOutput
}

type UserPropertyArray []UserPropertyInput

func (UserPropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserProperty)(nil)).Elem()
}

func (i UserPropertyArray) ToUserPropertyArrayOutput() UserPropertyArrayOutput {
	return i.ToUserPropertyArrayOutputWithContext(context.Background())
}

func (i UserPropertyArray) ToUserPropertyArrayOutputWithContext(ctx context.Context) UserPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPropertyArrayOutput)
}

// User property.
type UserPropertyOutput struct{ *pulumi.OutputState }

func (UserPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserProperty)(nil)).Elem()
}

func (o UserPropertyOutput) ToUserPropertyOutput() UserPropertyOutput {
	return o
}

func (o UserPropertyOutput) ToUserPropertyOutputWithContext(ctx context.Context) UserPropertyOutput {
	return o
}

// User property name.
func (o UserPropertyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v UserProperty) string { return v.Name }).(pulumi.StringOutput)
}

// User property value. Type: string (or Expression with resultType string).
func (o UserPropertyOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v UserProperty) interface{} { return v.Value }).(pulumi.AnyOutput)
}

type UserPropertyArrayOutput struct{ *pulumi.OutputState }

func (UserPropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserProperty)(nil)).Elem()
}

func (o UserPropertyArrayOutput) ToUserPropertyArrayOutput() UserPropertyArrayOutput {
	return o
}

func (o UserPropertyArrayOutput) ToUserPropertyArrayOutputWithContext(ctx context.Context) UserPropertyArrayOutput {
	return o
}

func (o UserPropertyArrayOutput) Index(i pulumi.IntInput) UserPropertyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserProperty {
		return vs[0].([]UserProperty)[vs[1].(int)]
	}).(UserPropertyOutput)
}

// User property.
type UserPropertyResponse struct {
	// User property name.
	Name string `pulumi:"name"`
	// User property value. Type: string (or Expression with resultType string).
	Value interface{} `pulumi:"value"`
}

// User property.
type UserPropertyResponseOutput struct{ *pulumi.OutputState }

func (UserPropertyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPropertyResponse)(nil)).Elem()
}

func (o UserPropertyResponseOutput) ToUserPropertyResponseOutput() UserPropertyResponseOutput {
	return o
}

func (o UserPropertyResponseOutput) ToUserPropertyResponseOutputWithContext(ctx context.Context) UserPropertyResponseOutput {
	return o
}

// User property name.
func (o UserPropertyResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v UserPropertyResponse) string { return v.Name }).(pulumi.StringOutput)
}

// User property value. Type: string (or Expression with resultType string).
func (o UserPropertyResponseOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v UserPropertyResponse) interface{} { return v.Value }).(pulumi.AnyOutput)
}

type UserPropertyResponseArrayOutput struct{ *pulumi.OutputState }

func (UserPropertyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserPropertyResponse)(nil)).Elem()
}

func (o UserPropertyResponseArrayOutput) ToUserPropertyResponseArrayOutput() UserPropertyResponseArrayOutput {
	return o
}

func (o UserPropertyResponseArrayOutput) ToUserPropertyResponseArrayOutputWithContext(ctx context.Context) UserPropertyResponseArrayOutput {
	return o
}

func (o UserPropertyResponseArrayOutput) Index(i pulumi.IntInput) UserPropertyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserPropertyResponse {
		return vs[0].([]UserPropertyResponse)[vs[1].(int)]
	}).(UserPropertyResponseOutput)
}

// This activity verifies that an external resource exists.
type ValidationActivity struct {
	// Can be used if dataset points to a folder. If set to true, the folder must have at least one file. If set to false, the folder must be empty. Type: boolean (or Expression with resultType boolean).
	ChildItems interface{} `pulumi:"childItems"`
	// Validation activity dataset reference.
	Dataset DatasetReference `pulumi:"dataset"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Can be used if dataset points to a file. The file must be greater than or equal in size to the value specified. Type: integer (or Expression with resultType integer).
	MinimumSize interface{} `pulumi:"minimumSize"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// A delay in seconds between validation attempts. If no value is specified, 10 seconds will be used as the default. Type: integer (or Expression with resultType integer).
	Sleep interface{} `pulumi:"sleep"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Specifies the timeout for the activity to run. If there is no value specified, it takes the value of TimeSpan.FromDays(7) which is 1 week as default. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Timeout interface{} `pulumi:"timeout"`
	// Type of activity.
	// Expected value is 'Validation'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// ValidationActivityInput is an input type that accepts ValidationActivityArgs and ValidationActivityOutput values.
// You can construct a concrete instance of `ValidationActivityInput` via:
//
//	ValidationActivityArgs{...}
type ValidationActivityInput interface {
	pulumi.Input

	ToValidationActivityOutput() ValidationActivityOutput
	ToValidationActivityOutputWithContext(context.Context) ValidationActivityOutput
}

// This activity verifies that an external resource exists.
type ValidationActivityArgs struct {
	// Can be used if dataset points to a folder. If set to true, the folder must have at least one file. If set to false, the folder must be empty. Type: boolean (or Expression with resultType boolean).
	ChildItems pulumi.Input `pulumi:"childItems"`
	// Validation activity dataset reference.
	Dataset DatasetReferenceInput `pulumi:"dataset"`
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Can be used if dataset points to a file. The file must be greater than or equal in size to the value specified. Type: integer (or Expression with resultType integer).
	MinimumSize pulumi.Input `pulumi:"minimumSize"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs pulumi.StringPtrInput `pulumi:"onInactiveMarkAs"`
	// A delay in seconds between validation attempts. If no value is specified, 10 seconds will be used as the default. Type: integer (or Expression with resultType integer).
	Sleep pulumi.Input `pulumi:"sleep"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Specifies the timeout for the activity to run. If there is no value specified, it takes the value of TimeSpan.FromDays(7) which is 1 week as default. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Timeout pulumi.Input `pulumi:"timeout"`
	// Type of activity.
	// Expected value is 'Validation'.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
}

func (ValidationActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidationActivity)(nil)).Elem()
}

func (i ValidationActivityArgs) ToValidationActivityOutput() ValidationActivityOutput {
	return i.ToValidationActivityOutputWithContext(context.Background())
}

func (i ValidationActivityArgs) ToValidationActivityOutputWithContext(ctx context.Context) ValidationActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidationActivityOutput)
}

// This activity verifies that an external resource exists.
type ValidationActivityOutput struct{ *pulumi.OutputState }

func (ValidationActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidationActivity)(nil)).Elem()
}

func (o ValidationActivityOutput) ToValidationActivityOutput() ValidationActivityOutput {
	return o
}

func (o ValidationActivityOutput) ToValidationActivityOutputWithContext(ctx context.Context) ValidationActivityOutput {
	return o
}

// Can be used if dataset points to a folder. If set to true, the folder must have at least one file. If set to false, the folder must be empty. Type: boolean (or Expression with resultType boolean).
func (o ValidationActivityOutput) ChildItems() pulumi.AnyOutput {
	return o.ApplyT(func(v ValidationActivity) interface{} { return v.ChildItems }).(pulumi.AnyOutput)
}

// Validation activity dataset reference.
func (o ValidationActivityOutput) Dataset() DatasetReferenceOutput {
	return o.ApplyT(func(v ValidationActivity) DatasetReference { return v.Dataset }).(DatasetReferenceOutput)
}

// Activity depends on condition.
func (o ValidationActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v ValidationActivity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o ValidationActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ValidationActivity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Can be used if dataset points to a file. The file must be greater than or equal in size to the value specified. Type: integer (or Expression with resultType integer).
func (o ValidationActivityOutput) MinimumSize() pulumi.AnyOutput {
	return o.ApplyT(func(v ValidationActivity) interface{} { return v.MinimumSize }).(pulumi.AnyOutput)
}

// Activity name.
func (o ValidationActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ValidationActivity) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o ValidationActivityOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ValidationActivity) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// A delay in seconds between validation attempts. If no value is specified, 10 seconds will be used as the default. Type: integer (or Expression with resultType integer).
func (o ValidationActivityOutput) Sleep() pulumi.AnyOutput {
	return o.ApplyT(func(v ValidationActivity) interface{} { return v.Sleep }).(pulumi.AnyOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o ValidationActivityOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ValidationActivity) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Specifies the timeout for the activity to run. If there is no value specified, it takes the value of TimeSpan.FromDays(7) which is 1 week as default. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ValidationActivityOutput) Timeout() pulumi.AnyOutput {
	return o.ApplyT(func(v ValidationActivity) interface{} { return v.Timeout }).(pulumi.AnyOutput)
}

// Type of activity.
// Expected value is 'Validation'.
func (o ValidationActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ValidationActivity) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o ValidationActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v ValidationActivity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

// This activity verifies that an external resource exists.
type ValidationActivityResponse struct {
	// Can be used if dataset points to a folder. If set to true, the folder must have at least one file. If set to false, the folder must be empty. Type: boolean (or Expression with resultType boolean).
	ChildItems interface{} `pulumi:"childItems"`
	// Validation activity dataset reference.
	Dataset DatasetReferenceResponse `pulumi:"dataset"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Can be used if dataset points to a file. The file must be greater than or equal in size to the value specified. Type: integer (or Expression with resultType integer).
	MinimumSize interface{} `pulumi:"minimumSize"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// A delay in seconds between validation attempts. If no value is specified, 10 seconds will be used as the default. Type: integer (or Expression with resultType integer).
	Sleep interface{} `pulumi:"sleep"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Specifies the timeout for the activity to run. If there is no value specified, it takes the value of TimeSpan.FromDays(7) which is 1 week as default. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Timeout interface{} `pulumi:"timeout"`
	// Type of activity.
	// Expected value is 'Validation'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// This activity verifies that an external resource exists.
type ValidationActivityResponseOutput struct{ *pulumi.OutputState }

func (ValidationActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidationActivityResponse)(nil)).Elem()
}

func (o ValidationActivityResponseOutput) ToValidationActivityResponseOutput() ValidationActivityResponseOutput {
	return o
}

func (o ValidationActivityResponseOutput) ToValidationActivityResponseOutputWithContext(ctx context.Context) ValidationActivityResponseOutput {
	return o
}

// Can be used if dataset points to a folder. If set to true, the folder must have at least one file. If set to false, the folder must be empty. Type: boolean (or Expression with resultType boolean).
func (o ValidationActivityResponseOutput) ChildItems() pulumi.AnyOutput {
	return o.ApplyT(func(v ValidationActivityResponse) interface{} { return v.ChildItems }).(pulumi.AnyOutput)
}

// Validation activity dataset reference.
func (o ValidationActivityResponseOutput) Dataset() DatasetReferenceResponseOutput {
	return o.ApplyT(func(v ValidationActivityResponse) DatasetReferenceResponse { return v.Dataset }).(DatasetReferenceResponseOutput)
}

// Activity depends on condition.
func (o ValidationActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v ValidationActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o ValidationActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ValidationActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Can be used if dataset points to a file. The file must be greater than or equal in size to the value specified. Type: integer (or Expression with resultType integer).
func (o ValidationActivityResponseOutput) MinimumSize() pulumi.AnyOutput {
	return o.ApplyT(func(v ValidationActivityResponse) interface{} { return v.MinimumSize }).(pulumi.AnyOutput)
}

// Activity name.
func (o ValidationActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ValidationActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o ValidationActivityResponseOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ValidationActivityResponse) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// A delay in seconds between validation attempts. If no value is specified, 10 seconds will be used as the default. Type: integer (or Expression with resultType integer).
func (o ValidationActivityResponseOutput) Sleep() pulumi.AnyOutput {
	return o.ApplyT(func(v ValidationActivityResponse) interface{} { return v.Sleep }).(pulumi.AnyOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o ValidationActivityResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ValidationActivityResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Specifies the timeout for the activity to run. If there is no value specified, it takes the value of TimeSpan.FromDays(7) which is 1 week as default. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ValidationActivityResponseOutput) Timeout() pulumi.AnyOutput {
	return o.ApplyT(func(v ValidationActivityResponse) interface{} { return v.Timeout }).(pulumi.AnyOutput)
}

// Type of activity.
// Expected value is 'Validation'.
func (o ValidationActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ValidationActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o ValidationActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v ValidationActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

// Definition of a single variable for a Pipeline.
type VariableSpecification struct {
	// Default value of variable.
	DefaultValue interface{} `pulumi:"defaultValue"`
	// Variable type.
	Type string `pulumi:"type"`
}

// VariableSpecificationInput is an input type that accepts VariableSpecificationArgs and VariableSpecificationOutput values.
// You can construct a concrete instance of `VariableSpecificationInput` via:
//
//	VariableSpecificationArgs{...}
type VariableSpecificationInput interface {
	pulumi.Input

	ToVariableSpecificationOutput() VariableSpecificationOutput
	ToVariableSpecificationOutputWithContext(context.Context) VariableSpecificationOutput
}

// Definition of a single variable for a Pipeline.
type VariableSpecificationArgs struct {
	// Default value of variable.
	DefaultValue pulumi.Input `pulumi:"defaultValue"`
	// Variable type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (VariableSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VariableSpecification)(nil)).Elem()
}

func (i VariableSpecificationArgs) ToVariableSpecificationOutput() VariableSpecificationOutput {
	return i.ToVariableSpecificationOutputWithContext(context.Background())
}

func (i VariableSpecificationArgs) ToVariableSpecificationOutputWithContext(ctx context.Context) VariableSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VariableSpecificationOutput)
}

// VariableSpecificationMapInput is an input type that accepts VariableSpecificationMap and VariableSpecificationMapOutput values.
// You can construct a concrete instance of `VariableSpecificationMapInput` via:
//
//	VariableSpecificationMap{ "key": VariableSpecificationArgs{...} }
type VariableSpecificationMapInput interface {
	pulumi.Input

	ToVariableSpecificationMapOutput() VariableSpecificationMapOutput
	ToVariableSpecificationMapOutputWithContext(context.Context) VariableSpecificationMapOutput
}

type VariableSpecificationMap map[string]VariableSpecificationInput

func (VariableSpecificationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]VariableSpecification)(nil)).Elem()
}

func (i VariableSpecificationMap) ToVariableSpecificationMapOutput() VariableSpecificationMapOutput {
	return i.ToVariableSpecificationMapOutputWithContext(context.Background())
}

func (i VariableSpecificationMap) ToVariableSpecificationMapOutputWithContext(ctx context.Context) VariableSpecificationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VariableSpecificationMapOutput)
}

// Definition of a single variable for a Pipeline.
type VariableSpecificationOutput struct{ *pulumi.OutputState }

func (VariableSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VariableSpecification)(nil)).Elem()
}

func (o VariableSpecificationOutput) ToVariableSpecificationOutput() VariableSpecificationOutput {
	return o
}

func (o VariableSpecificationOutput) ToVariableSpecificationOutputWithContext(ctx context.Context) VariableSpecificationOutput {
	return o
}

// Default value of variable.
func (o VariableSpecificationOutput) DefaultValue() pulumi.AnyOutput {
	return o.ApplyT(func(v VariableSpecification) interface{} { return v.DefaultValue }).(pulumi.AnyOutput)
}

// Variable type.
func (o VariableSpecificationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v VariableSpecification) string { return v.Type }).(pulumi.StringOutput)
}

type VariableSpecificationMapOutput struct{ *pulumi.OutputState }

func (VariableSpecificationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]VariableSpecification)(nil)).Elem()
}

func (o VariableSpecificationMapOutput) ToVariableSpecificationMapOutput() VariableSpecificationMapOutput {
	return o
}

func (o VariableSpecificationMapOutput) ToVariableSpecificationMapOutputWithContext(ctx context.Context) VariableSpecificationMapOutput {
	return o
}

func (o VariableSpecificationMapOutput) MapIndex(k pulumi.StringInput) VariableSpecificationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) VariableSpecification {
		return vs[0].(map[string]VariableSpecification)[vs[1].(string)]
	}).(VariableSpecificationOutput)
}

// Definition of a single variable for a Pipeline.
type VariableSpecificationResponse struct {
	// Default value of variable.
	DefaultValue interface{} `pulumi:"defaultValue"`
	// Variable type.
	Type string `pulumi:"type"`
}

// Definition of a single variable for a Pipeline.
type VariableSpecificationResponseOutput struct{ *pulumi.OutputState }

func (VariableSpecificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VariableSpecificationResponse)(nil)).Elem()
}

func (o VariableSpecificationResponseOutput) ToVariableSpecificationResponseOutput() VariableSpecificationResponseOutput {
	return o
}

func (o VariableSpecificationResponseOutput) ToVariableSpecificationResponseOutputWithContext(ctx context.Context) VariableSpecificationResponseOutput {
	return o
}

// Default value of variable.
func (o VariableSpecificationResponseOutput) DefaultValue() pulumi.AnyOutput {
	return o.ApplyT(func(v VariableSpecificationResponse) interface{} { return v.DefaultValue }).(pulumi.AnyOutput)
}

// Variable type.
func (o VariableSpecificationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v VariableSpecificationResponse) string { return v.Type }).(pulumi.StringOutput)
}

type VariableSpecificationResponseMapOutput struct{ *pulumi.OutputState }

func (VariableSpecificationResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]VariableSpecificationResponse)(nil)).Elem()
}

func (o VariableSpecificationResponseMapOutput) ToVariableSpecificationResponseMapOutput() VariableSpecificationResponseMapOutput {
	return o
}

func (o VariableSpecificationResponseMapOutput) ToVariableSpecificationResponseMapOutputWithContext(ctx context.Context) VariableSpecificationResponseMapOutput {
	return o
}

func (o VariableSpecificationResponseMapOutput) MapIndex(k pulumi.StringInput) VariableSpecificationResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) VariableSpecificationResponse {
		return vs[0].(map[string]VariableSpecificationResponse)[vs[1].(string)]
	}).(VariableSpecificationResponseOutput)
}

// Vertica linked service.
type VerticaLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReference `pulumi:"pwd"`
	// Type of linked service.
	// Expected value is 'Vertica'.
	Type string `pulumi:"type"`
}

// VerticaLinkedServiceInput is an input type that accepts VerticaLinkedServiceArgs and VerticaLinkedServiceOutput values.
// You can construct a concrete instance of `VerticaLinkedServiceInput` via:
//
//	VerticaLinkedServiceArgs{...}
type VerticaLinkedServiceInput interface {
	pulumi.Input

	ToVerticaLinkedServiceOutput() VerticaLinkedServiceOutput
	ToVerticaLinkedServiceOutputWithContext(context.Context) VerticaLinkedServiceOutput
}

// Vertica linked service.
type VerticaLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd AzureKeyVaultSecretReferencePtrInput `pulumi:"pwd"`
	// Type of linked service.
	// Expected value is 'Vertica'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (VerticaLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VerticaLinkedService)(nil)).Elem()
}

func (i VerticaLinkedServiceArgs) ToVerticaLinkedServiceOutput() VerticaLinkedServiceOutput {
	return i.ToVerticaLinkedServiceOutputWithContext(context.Background())
}

func (i VerticaLinkedServiceArgs) ToVerticaLinkedServiceOutputWithContext(ctx context.Context) VerticaLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VerticaLinkedServiceOutput)
}

// Vertica linked service.
type VerticaLinkedServiceOutput struct{ *pulumi.OutputState }

func (VerticaLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VerticaLinkedService)(nil)).Elem()
}

func (o VerticaLinkedServiceOutput) ToVerticaLinkedServiceOutput() VerticaLinkedServiceOutput {
	return o
}

func (o VerticaLinkedServiceOutput) ToVerticaLinkedServiceOutputWithContext(ctx context.Context) VerticaLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o VerticaLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v VerticaLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o VerticaLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v VerticaLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o VerticaLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v VerticaLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o VerticaLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VerticaLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o VerticaLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VerticaLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o VerticaLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v VerticaLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o VerticaLinkedServiceOutput) Pwd() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v VerticaLinkedService) *AzureKeyVaultSecretReference { return v.Pwd }).(AzureKeyVaultSecretReferencePtrOutput)
}

// Type of linked service.
// Expected value is 'Vertica'.
func (o VerticaLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v VerticaLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Vertica linked service.
type VerticaLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReferenceResponse `pulumi:"pwd"`
	// Type of linked service.
	// Expected value is 'Vertica'.
	Type string `pulumi:"type"`
}

// Vertica linked service.
type VerticaLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (VerticaLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VerticaLinkedServiceResponse)(nil)).Elem()
}

func (o VerticaLinkedServiceResponseOutput) ToVerticaLinkedServiceResponseOutput() VerticaLinkedServiceResponseOutput {
	return o
}

func (o VerticaLinkedServiceResponseOutput) ToVerticaLinkedServiceResponseOutputWithContext(ctx context.Context) VerticaLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o VerticaLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v VerticaLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o VerticaLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v VerticaLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o VerticaLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v VerticaLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o VerticaLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VerticaLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o VerticaLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VerticaLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o VerticaLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v VerticaLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o VerticaLinkedServiceResponseOutput) Pwd() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v VerticaLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse { return v.Pwd }).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// Type of linked service.
// Expected value is 'Vertica'.
func (o VerticaLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v VerticaLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Vertica source.
type VerticaSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'VerticaSource'.
	Type string `pulumi:"type"`
}

// VerticaSourceInput is an input type that accepts VerticaSourceArgs and VerticaSourceOutput values.
// You can construct a concrete instance of `VerticaSourceInput` via:
//
//	VerticaSourceArgs{...}
type VerticaSourceInput interface {
	pulumi.Input

	ToVerticaSourceOutput() VerticaSourceOutput
	ToVerticaSourceOutputWithContext(context.Context) VerticaSourceOutput
}

// A copy activity Vertica source.
type VerticaSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'VerticaSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (VerticaSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VerticaSource)(nil)).Elem()
}

func (i VerticaSourceArgs) ToVerticaSourceOutput() VerticaSourceOutput {
	return i.ToVerticaSourceOutputWithContext(context.Background())
}

func (i VerticaSourceArgs) ToVerticaSourceOutputWithContext(ctx context.Context) VerticaSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VerticaSourceOutput)
}

// A copy activity Vertica source.
type VerticaSourceOutput struct{ *pulumi.OutputState }

func (VerticaSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VerticaSource)(nil)).Elem()
}

func (o VerticaSourceOutput) ToVerticaSourceOutput() VerticaSourceOutput {
	return o
}

func (o VerticaSourceOutput) ToVerticaSourceOutputWithContext(ctx context.Context) VerticaSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o VerticaSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v VerticaSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o VerticaSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v VerticaSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o VerticaSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v VerticaSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o VerticaSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v VerticaSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o VerticaSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v VerticaSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o VerticaSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v VerticaSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o VerticaSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v VerticaSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'VerticaSource'.
func (o VerticaSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v VerticaSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Vertica source.
type VerticaSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'VerticaSource'.
	Type string `pulumi:"type"`
}

// A copy activity Vertica source.
type VerticaSourceResponseOutput struct{ *pulumi.OutputState }

func (VerticaSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VerticaSourceResponse)(nil)).Elem()
}

func (o VerticaSourceResponseOutput) ToVerticaSourceResponseOutput() VerticaSourceResponseOutput {
	return o
}

func (o VerticaSourceResponseOutput) ToVerticaSourceResponseOutputWithContext(ctx context.Context) VerticaSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o VerticaSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v VerticaSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o VerticaSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v VerticaSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o VerticaSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v VerticaSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o VerticaSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v VerticaSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o VerticaSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v VerticaSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o VerticaSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v VerticaSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o VerticaSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v VerticaSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'VerticaSource'.
func (o VerticaSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v VerticaSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Vertica dataset.
type VerticaTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Vertica. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'VerticaTable'.
	Type string `pulumi:"type"`
}

// VerticaTableDatasetInput is an input type that accepts VerticaTableDatasetArgs and VerticaTableDatasetOutput values.
// You can construct a concrete instance of `VerticaTableDatasetInput` via:
//
//	VerticaTableDatasetArgs{...}
type VerticaTableDatasetInput interface {
	pulumi.Input

	ToVerticaTableDatasetOutput() VerticaTableDatasetOutput
	ToVerticaTableDatasetOutputWithContext(context.Context) VerticaTableDatasetOutput
}

// Vertica dataset.
type VerticaTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Vertica. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'VerticaTable'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (VerticaTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VerticaTableDataset)(nil)).Elem()
}

func (i VerticaTableDatasetArgs) ToVerticaTableDatasetOutput() VerticaTableDatasetOutput {
	return i.ToVerticaTableDatasetOutputWithContext(context.Background())
}

func (i VerticaTableDatasetArgs) ToVerticaTableDatasetOutputWithContext(ctx context.Context) VerticaTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VerticaTableDatasetOutput)
}

// Vertica dataset.
type VerticaTableDatasetOutput struct{ *pulumi.OutputState }

func (VerticaTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VerticaTableDataset)(nil)).Elem()
}

func (o VerticaTableDatasetOutput) ToVerticaTableDatasetOutput() VerticaTableDatasetOutput {
	return o
}

func (o VerticaTableDatasetOutput) ToVerticaTableDatasetOutputWithContext(ctx context.Context) VerticaTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o VerticaTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v VerticaTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o VerticaTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VerticaTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o VerticaTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v VerticaTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o VerticaTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v VerticaTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o VerticaTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v VerticaTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o VerticaTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v VerticaTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o VerticaTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v VerticaTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Vertica. Type: string (or Expression with resultType string).
func (o VerticaTableDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v VerticaTableDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o VerticaTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v VerticaTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'VerticaTable'.
func (o VerticaTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v VerticaTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Vertica dataset.
type VerticaTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Vertica. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'VerticaTable'.
	Type string `pulumi:"type"`
}

// Vertica dataset.
type VerticaTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (VerticaTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VerticaTableDatasetResponse)(nil)).Elem()
}

func (o VerticaTableDatasetResponseOutput) ToVerticaTableDatasetResponseOutput() VerticaTableDatasetResponseOutput {
	return o
}

func (o VerticaTableDatasetResponseOutput) ToVerticaTableDatasetResponseOutputWithContext(ctx context.Context) VerticaTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o VerticaTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v VerticaTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o VerticaTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VerticaTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o VerticaTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v VerticaTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o VerticaTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v VerticaTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o VerticaTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v VerticaTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o VerticaTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v VerticaTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o VerticaTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v VerticaTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Vertica. Type: string (or Expression with resultType string).
func (o VerticaTableDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v VerticaTableDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o VerticaTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v VerticaTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'VerticaTable'.
func (o VerticaTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v VerticaTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// This activity suspends pipeline execution for the specified interval.
type WaitActivity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'Wait'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
	// Duration in seconds. Type: integer (or Expression with resultType integer).
	WaitTimeInSeconds interface{} `pulumi:"waitTimeInSeconds"`
}

// WaitActivityInput is an input type that accepts WaitActivityArgs and WaitActivityOutput values.
// You can construct a concrete instance of `WaitActivityInput` via:
//
//	WaitActivityArgs{...}
type WaitActivityInput interface {
	pulumi.Input

	ToWaitActivityOutput() WaitActivityOutput
	ToWaitActivityOutputWithContext(context.Context) WaitActivityOutput
}

// This activity suspends pipeline execution for the specified interval.
type WaitActivityArgs struct {
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs pulumi.StringPtrInput `pulumi:"onInactiveMarkAs"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Type of activity.
	// Expected value is 'Wait'.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
	// Duration in seconds. Type: integer (or Expression with resultType integer).
	WaitTimeInSeconds pulumi.Input `pulumi:"waitTimeInSeconds"`
}

func (WaitActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WaitActivity)(nil)).Elem()
}

func (i WaitActivityArgs) ToWaitActivityOutput() WaitActivityOutput {
	return i.ToWaitActivityOutputWithContext(context.Background())
}

func (i WaitActivityArgs) ToWaitActivityOutputWithContext(ctx context.Context) WaitActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WaitActivityOutput)
}

// This activity suspends pipeline execution for the specified interval.
type WaitActivityOutput struct{ *pulumi.OutputState }

func (WaitActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WaitActivity)(nil)).Elem()
}

func (o WaitActivityOutput) ToWaitActivityOutput() WaitActivityOutput {
	return o
}

func (o WaitActivityOutput) ToWaitActivityOutputWithContext(ctx context.Context) WaitActivityOutput {
	return o
}

// Activity depends on condition.
func (o WaitActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v WaitActivity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o WaitActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WaitActivity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Activity name.
func (o WaitActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v WaitActivity) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o WaitActivityOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WaitActivity) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o WaitActivityOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WaitActivity) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'Wait'.
func (o WaitActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v WaitActivity) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o WaitActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v WaitActivity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

// Duration in seconds. Type: integer (or Expression with resultType integer).
func (o WaitActivityOutput) WaitTimeInSeconds() pulumi.AnyOutput {
	return o.ApplyT(func(v WaitActivity) interface{} { return v.WaitTimeInSeconds }).(pulumi.AnyOutput)
}

// This activity suspends pipeline execution for the specified interval.
type WaitActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'Wait'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
	// Duration in seconds. Type: integer (or Expression with resultType integer).
	WaitTimeInSeconds interface{} `pulumi:"waitTimeInSeconds"`
}

// This activity suspends pipeline execution for the specified interval.
type WaitActivityResponseOutput struct{ *pulumi.OutputState }

func (WaitActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WaitActivityResponse)(nil)).Elem()
}

func (o WaitActivityResponseOutput) ToWaitActivityResponseOutput() WaitActivityResponseOutput {
	return o
}

func (o WaitActivityResponseOutput) ToWaitActivityResponseOutputWithContext(ctx context.Context) WaitActivityResponseOutput {
	return o
}

// Activity depends on condition.
func (o WaitActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v WaitActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o WaitActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WaitActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Activity name.
func (o WaitActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v WaitActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o WaitActivityResponseOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WaitActivityResponse) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o WaitActivityResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WaitActivityResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'Wait'.
func (o WaitActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v WaitActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o WaitActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v WaitActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

// Duration in seconds. Type: integer (or Expression with resultType integer).
func (o WaitActivityResponseOutput) WaitTimeInSeconds() pulumi.AnyOutput {
	return o.ApplyT(func(v WaitActivityResponse) interface{} { return v.WaitTimeInSeconds }).(pulumi.AnyOutput)
}

// Microsoft Fabric Warehouse linked service.
type WarehouseLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The ID of Microsoft Fabric Warehouse artifact. Type: string (or Expression with resultType string).
	ArtifactId interface{} `pulumi:"artifactId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The endpoint of Microsoft Fabric Warehouse server. Type: string (or Expression with resultType string).
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential interface{} `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType interface{} `pulumi:"servicePrincipalCredentialType"`
	// The ID of the application used to authenticate against Microsoft Fabric Warehouse. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against Microsoft Fabric Warehouse.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'Warehouse'.
	Type string `pulumi:"type"`
	// The ID of Microsoft Fabric workspace. Type: string (or Expression with resultType string).
	WorkspaceId interface{} `pulumi:"workspaceId"`
}

// WarehouseLinkedServiceInput is an input type that accepts WarehouseLinkedServiceArgs and WarehouseLinkedServiceOutput values.
// You can construct a concrete instance of `WarehouseLinkedServiceInput` via:
//
//	WarehouseLinkedServiceArgs{...}
type WarehouseLinkedServiceInput interface {
	pulumi.Input

	ToWarehouseLinkedServiceOutput() WarehouseLinkedServiceOutput
	ToWarehouseLinkedServiceOutputWithContext(context.Context) WarehouseLinkedServiceOutput
}

// Microsoft Fabric Warehouse linked service.
type WarehouseLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The ID of Microsoft Fabric Warehouse artifact. Type: string (or Expression with resultType string).
	ArtifactId pulumi.Input `pulumi:"artifactId"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// The endpoint of Microsoft Fabric Warehouse server. Type: string (or Expression with resultType string).
	Endpoint pulumi.Input `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential pulumi.Input `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType pulumi.Input `pulumi:"servicePrincipalCredentialType"`
	// The ID of the application used to authenticate against Microsoft Fabric Warehouse. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against Microsoft Fabric Warehouse.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant pulumi.Input `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'Warehouse'.
	Type pulumi.StringInput `pulumi:"type"`
	// The ID of Microsoft Fabric workspace. Type: string (or Expression with resultType string).
	WorkspaceId pulumi.Input `pulumi:"workspaceId"`
}

func (WarehouseLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WarehouseLinkedService)(nil)).Elem()
}

func (i WarehouseLinkedServiceArgs) ToWarehouseLinkedServiceOutput() WarehouseLinkedServiceOutput {
	return i.ToWarehouseLinkedServiceOutputWithContext(context.Background())
}

func (i WarehouseLinkedServiceArgs) ToWarehouseLinkedServiceOutputWithContext(ctx context.Context) WarehouseLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WarehouseLinkedServiceOutput)
}

// Microsoft Fabric Warehouse linked service.
type WarehouseLinkedServiceOutput struct{ *pulumi.OutputState }

func (WarehouseLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WarehouseLinkedService)(nil)).Elem()
}

func (o WarehouseLinkedServiceOutput) ToWarehouseLinkedServiceOutput() WarehouseLinkedServiceOutput {
	return o
}

func (o WarehouseLinkedServiceOutput) ToWarehouseLinkedServiceOutputWithContext(ctx context.Context) WarehouseLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o WarehouseLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v WarehouseLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The ID of Microsoft Fabric Warehouse artifact. Type: string (or Expression with resultType string).
func (o WarehouseLinkedServiceOutput) ArtifactId() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseLinkedService) interface{} { return v.ArtifactId }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o WarehouseLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v WarehouseLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o WarehouseLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WarehouseLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o WarehouseLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WarehouseLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The endpoint of Microsoft Fabric Warehouse server. Type: string (or Expression with resultType string).
func (o WarehouseLinkedServiceOutput) Endpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseLinkedService) interface{} { return v.Endpoint }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o WarehouseLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v WarehouseLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
func (o WarehouseLinkedServiceOutput) ServicePrincipalCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseLinkedService) interface{} { return v.ServicePrincipalCredential }).(pulumi.AnyOutput)
}

// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
func (o WarehouseLinkedServiceOutput) ServicePrincipalCredentialType() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseLinkedService) interface{} { return v.ServicePrincipalCredentialType }).(pulumi.AnyOutput)
}

// The ID of the application used to authenticate against Microsoft Fabric Warehouse. Type: string (or Expression with resultType string).
func (o WarehouseLinkedServiceOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseLinkedService) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The Key of the application used to authenticate against Microsoft Fabric Warehouse.
func (o WarehouseLinkedServiceOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseLinkedService) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o WarehouseLinkedServiceOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseLinkedService) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Warehouse'.
func (o WarehouseLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v WarehouseLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The ID of Microsoft Fabric workspace. Type: string (or Expression with resultType string).
func (o WarehouseLinkedServiceOutput) WorkspaceId() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseLinkedService) interface{} { return v.WorkspaceId }).(pulumi.AnyOutput)
}

// Microsoft Fabric Warehouse linked service.
type WarehouseLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The ID of Microsoft Fabric Warehouse artifact. Type: string (or Expression with resultType string).
	ArtifactId interface{} `pulumi:"artifactId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The endpoint of Microsoft Fabric Warehouse server. Type: string (or Expression with resultType string).
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential interface{} `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType interface{} `pulumi:"servicePrincipalCredentialType"`
	// The ID of the application used to authenticate against Microsoft Fabric Warehouse. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against Microsoft Fabric Warehouse.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'Warehouse'.
	Type string `pulumi:"type"`
	// The ID of Microsoft Fabric workspace. Type: string (or Expression with resultType string).
	WorkspaceId interface{} `pulumi:"workspaceId"`
}

// Microsoft Fabric Warehouse linked service.
type WarehouseLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (WarehouseLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WarehouseLinkedServiceResponse)(nil)).Elem()
}

func (o WarehouseLinkedServiceResponseOutput) ToWarehouseLinkedServiceResponseOutput() WarehouseLinkedServiceResponseOutput {
	return o
}

func (o WarehouseLinkedServiceResponseOutput) ToWarehouseLinkedServiceResponseOutputWithContext(ctx context.Context) WarehouseLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o WarehouseLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v WarehouseLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The ID of Microsoft Fabric Warehouse artifact. Type: string (or Expression with resultType string).
func (o WarehouseLinkedServiceResponseOutput) ArtifactId() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseLinkedServiceResponse) interface{} { return v.ArtifactId }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o WarehouseLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v WarehouseLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o WarehouseLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WarehouseLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o WarehouseLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WarehouseLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The endpoint of Microsoft Fabric Warehouse server. Type: string (or Expression with resultType string).
func (o WarehouseLinkedServiceResponseOutput) Endpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseLinkedServiceResponse) interface{} { return v.Endpoint }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o WarehouseLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v WarehouseLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
func (o WarehouseLinkedServiceResponseOutput) ServicePrincipalCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseLinkedServiceResponse) interface{} { return v.ServicePrincipalCredential }).(pulumi.AnyOutput)
}

// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
func (o WarehouseLinkedServiceResponseOutput) ServicePrincipalCredentialType() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseLinkedServiceResponse) interface{} { return v.ServicePrincipalCredentialType }).(pulumi.AnyOutput)
}

// The ID of the application used to authenticate against Microsoft Fabric Warehouse. Type: string (or Expression with resultType string).
func (o WarehouseLinkedServiceResponseOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseLinkedServiceResponse) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The Key of the application used to authenticate against Microsoft Fabric Warehouse.
func (o WarehouseLinkedServiceResponseOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseLinkedServiceResponse) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o WarehouseLinkedServiceResponseOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseLinkedServiceResponse) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Warehouse'.
func (o WarehouseLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v WarehouseLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The ID of Microsoft Fabric workspace. Type: string (or Expression with resultType string).
func (o WarehouseLinkedServiceResponseOutput) WorkspaceId() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseLinkedServiceResponse) interface{} { return v.WorkspaceId }).(pulumi.AnyOutput)
}

// A copy activity Microsoft Fabric Warehouse sink.
type WarehouseSink struct {
	// Indicates to use Copy Command to copy data into SQL Data Warehouse. Type: boolean (or Expression with resultType boolean).
	AllowCopyCommand interface{} `pulumi:"allowCopyCommand"`
	// Specifies Copy Command related settings when allowCopyCommand is true.
	CopyCommandSettings *DWCopyCommandSettings `pulumi:"copyCommandSettings"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
	TableOption interface{} `pulumi:"tableOption"`
	// Copy sink type.
	// Expected value is 'WarehouseSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Write behavior when copying data into azure Microsoft Fabric Data Warehouse. Type: DWWriteBehaviorEnum (or Expression with resultType DWWriteBehaviorEnum)
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// WarehouseSinkInput is an input type that accepts WarehouseSinkArgs and WarehouseSinkOutput values.
// You can construct a concrete instance of `WarehouseSinkInput` via:
//
//	WarehouseSinkArgs{...}
type WarehouseSinkInput interface {
	pulumi.Input

	ToWarehouseSinkOutput() WarehouseSinkOutput
	ToWarehouseSinkOutputWithContext(context.Context) WarehouseSinkOutput
}

// A copy activity Microsoft Fabric Warehouse sink.
type WarehouseSinkArgs struct {
	// Indicates to use Copy Command to copy data into SQL Data Warehouse. Type: boolean (or Expression with resultType boolean).
	AllowCopyCommand pulumi.Input `pulumi:"allowCopyCommand"`
	// Specifies Copy Command related settings when allowCopyCommand is true.
	CopyCommandSettings DWCopyCommandSettingsPtrInput `pulumi:"copyCommandSettings"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript pulumi.Input `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount pulumi.Input `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait pulumi.Input `pulumi:"sinkRetryWait"`
	// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
	TableOption pulumi.Input `pulumi:"tableOption"`
	// Copy sink type.
	// Expected value is 'WarehouseSink'.
	Type pulumi.StringInput `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize pulumi.Input `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout pulumi.Input `pulumi:"writeBatchTimeout"`
	// Write behavior when copying data into azure Microsoft Fabric Data Warehouse. Type: DWWriteBehaviorEnum (or Expression with resultType DWWriteBehaviorEnum)
	WriteBehavior pulumi.Input `pulumi:"writeBehavior"`
}

func (WarehouseSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WarehouseSink)(nil)).Elem()
}

func (i WarehouseSinkArgs) ToWarehouseSinkOutput() WarehouseSinkOutput {
	return i.ToWarehouseSinkOutputWithContext(context.Background())
}

func (i WarehouseSinkArgs) ToWarehouseSinkOutputWithContext(ctx context.Context) WarehouseSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WarehouseSinkOutput)
}

// A copy activity Microsoft Fabric Warehouse sink.
type WarehouseSinkOutput struct{ *pulumi.OutputState }

func (WarehouseSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WarehouseSink)(nil)).Elem()
}

func (o WarehouseSinkOutput) ToWarehouseSinkOutput() WarehouseSinkOutput {
	return o
}

func (o WarehouseSinkOutput) ToWarehouseSinkOutputWithContext(ctx context.Context) WarehouseSinkOutput {
	return o
}

// Indicates to use Copy Command to copy data into SQL Data Warehouse. Type: boolean (or Expression with resultType boolean).
func (o WarehouseSinkOutput) AllowCopyCommand() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseSink) interface{} { return v.AllowCopyCommand }).(pulumi.AnyOutput)
}

// Specifies Copy Command related settings when allowCopyCommand is true.
func (o WarehouseSinkOutput) CopyCommandSettings() DWCopyCommandSettingsPtrOutput {
	return o.ApplyT(func(v WarehouseSink) *DWCopyCommandSettings { return v.CopyCommandSettings }).(DWCopyCommandSettingsPtrOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o WarehouseSinkOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseSink) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o WarehouseSinkOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseSink) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// SQL pre-copy script. Type: string (or Expression with resultType string).
func (o WarehouseSinkOutput) PreCopyScript() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseSink) interface{} { return v.PreCopyScript }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o WarehouseSinkOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseSink) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o WarehouseSinkOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseSink) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
func (o WarehouseSinkOutput) TableOption() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseSink) interface{} { return v.TableOption }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'WarehouseSink'.
func (o WarehouseSinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v WarehouseSink) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o WarehouseSinkOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseSink) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o WarehouseSinkOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseSink) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// Write behavior when copying data into azure Microsoft Fabric Data Warehouse. Type: DWWriteBehaviorEnum (or Expression with resultType DWWriteBehaviorEnum)
func (o WarehouseSinkOutput) WriteBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseSink) interface{} { return v.WriteBehavior }).(pulumi.AnyOutput)
}

// A copy activity Microsoft Fabric Warehouse sink.
type WarehouseSinkResponse struct {
	// Indicates to use Copy Command to copy data into SQL Data Warehouse. Type: boolean (or Expression with resultType boolean).
	AllowCopyCommand interface{} `pulumi:"allowCopyCommand"`
	// Specifies Copy Command related settings when allowCopyCommand is true.
	CopyCommandSettings *DWCopyCommandSettingsResponse `pulumi:"copyCommandSettings"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
	TableOption interface{} `pulumi:"tableOption"`
	// Copy sink type.
	// Expected value is 'WarehouseSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Write behavior when copying data into azure Microsoft Fabric Data Warehouse. Type: DWWriteBehaviorEnum (or Expression with resultType DWWriteBehaviorEnum)
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// A copy activity Microsoft Fabric Warehouse sink.
type WarehouseSinkResponseOutput struct{ *pulumi.OutputState }

func (WarehouseSinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WarehouseSinkResponse)(nil)).Elem()
}

func (o WarehouseSinkResponseOutput) ToWarehouseSinkResponseOutput() WarehouseSinkResponseOutput {
	return o
}

func (o WarehouseSinkResponseOutput) ToWarehouseSinkResponseOutputWithContext(ctx context.Context) WarehouseSinkResponseOutput {
	return o
}

// Indicates to use Copy Command to copy data into SQL Data Warehouse. Type: boolean (or Expression with resultType boolean).
func (o WarehouseSinkResponseOutput) AllowCopyCommand() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseSinkResponse) interface{} { return v.AllowCopyCommand }).(pulumi.AnyOutput)
}

// Specifies Copy Command related settings when allowCopyCommand is true.
func (o WarehouseSinkResponseOutput) CopyCommandSettings() DWCopyCommandSettingsResponsePtrOutput {
	return o.ApplyT(func(v WarehouseSinkResponse) *DWCopyCommandSettingsResponse { return v.CopyCommandSettings }).(DWCopyCommandSettingsResponsePtrOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o WarehouseSinkResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseSinkResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o WarehouseSinkResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseSinkResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// SQL pre-copy script. Type: string (or Expression with resultType string).
func (o WarehouseSinkResponseOutput) PreCopyScript() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseSinkResponse) interface{} { return v.PreCopyScript }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o WarehouseSinkResponseOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseSinkResponse) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o WarehouseSinkResponseOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseSinkResponse) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
func (o WarehouseSinkResponseOutput) TableOption() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseSinkResponse) interface{} { return v.TableOption }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'WarehouseSink'.
func (o WarehouseSinkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v WarehouseSinkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o WarehouseSinkResponseOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseSinkResponse) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o WarehouseSinkResponseOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseSinkResponse) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// Write behavior when copying data into azure Microsoft Fabric Data Warehouse. Type: DWWriteBehaviorEnum (or Expression with resultType DWWriteBehaviorEnum)
func (o WarehouseSinkResponseOutput) WriteBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseSinkResponse) interface{} { return v.WriteBehavior }).(pulumi.AnyOutput)
}

// A copy activity Microsoft Fabric Warehouse source.
type WarehouseSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies the transaction locking behavior for the Microsoft Fabric Warehouse source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string).
	IsolationLevel interface{} `pulumi:"isolationLevel"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for Sql source partitioning.
	PartitionSettings *SqlPartitionSettings `pulumi:"partitionSettings"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Microsoft Fabric Warehouse reader query. Type: string (or Expression with resultType string).
	SqlReaderQuery interface{} `pulumi:"sqlReaderQuery"`
	// Name of the stored procedure for a Microsoft Fabric Warehouse source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
	SqlReaderStoredProcedureName interface{} `pulumi:"sqlReaderStoredProcedureName"`
	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}". Type: object (or Expression with resultType object), itemType: StoredProcedureParameter.
	StoredProcedureParameters interface{} `pulumi:"storedProcedureParameters"`
	// Copy source type.
	// Expected value is 'WarehouseSource'.
	Type string `pulumi:"type"`
}

// WarehouseSourceInput is an input type that accepts WarehouseSourceArgs and WarehouseSourceOutput values.
// You can construct a concrete instance of `WarehouseSourceInput` via:
//
//	WarehouseSourceArgs{...}
type WarehouseSourceInput interface {
	pulumi.Input

	ToWarehouseSourceOutput() WarehouseSourceOutput
	ToWarehouseSourceOutputWithContext(context.Context) WarehouseSourceOutput
}

// A copy activity Microsoft Fabric Warehouse source.
type WarehouseSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// Specifies the transaction locking behavior for the Microsoft Fabric Warehouse source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string).
	IsolationLevel pulumi.Input `pulumi:"isolationLevel"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange".
	PartitionOption pulumi.Input `pulumi:"partitionOption"`
	// The settings that will be leveraged for Sql source partitioning.
	PartitionSettings SqlPartitionSettingsPtrInput `pulumi:"partitionSettings"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Microsoft Fabric Warehouse reader query. Type: string (or Expression with resultType string).
	SqlReaderQuery pulumi.Input `pulumi:"sqlReaderQuery"`
	// Name of the stored procedure for a Microsoft Fabric Warehouse source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
	SqlReaderStoredProcedureName pulumi.Input `pulumi:"sqlReaderStoredProcedureName"`
	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}". Type: object (or Expression with resultType object), itemType: StoredProcedureParameter.
	StoredProcedureParameters pulumi.Input `pulumi:"storedProcedureParameters"`
	// Copy source type.
	// Expected value is 'WarehouseSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (WarehouseSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WarehouseSource)(nil)).Elem()
}

func (i WarehouseSourceArgs) ToWarehouseSourceOutput() WarehouseSourceOutput {
	return i.ToWarehouseSourceOutputWithContext(context.Background())
}

func (i WarehouseSourceArgs) ToWarehouseSourceOutputWithContext(ctx context.Context) WarehouseSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WarehouseSourceOutput)
}

// A copy activity Microsoft Fabric Warehouse source.
type WarehouseSourceOutput struct{ *pulumi.OutputState }

func (WarehouseSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WarehouseSource)(nil)).Elem()
}

func (o WarehouseSourceOutput) ToWarehouseSourceOutput() WarehouseSourceOutput {
	return o
}

func (o WarehouseSourceOutput) ToWarehouseSourceOutputWithContext(ctx context.Context) WarehouseSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o WarehouseSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o WarehouseSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Specifies the transaction locking behavior for the Microsoft Fabric Warehouse source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string).
func (o WarehouseSourceOutput) IsolationLevel() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseSource) interface{} { return v.IsolationLevel }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o WarehouseSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange".
func (o WarehouseSourceOutput) PartitionOption() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseSource) interface{} { return v.PartitionOption }).(pulumi.AnyOutput)
}

// The settings that will be leveraged for Sql source partitioning.
func (o WarehouseSourceOutput) PartitionSettings() SqlPartitionSettingsPtrOutput {
	return o.ApplyT(func(v WarehouseSource) *SqlPartitionSettings { return v.PartitionSettings }).(SqlPartitionSettingsPtrOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o WarehouseSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o WarehouseSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o WarehouseSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Microsoft Fabric Warehouse reader query. Type: string (or Expression with resultType string).
func (o WarehouseSourceOutput) SqlReaderQuery() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseSource) interface{} { return v.SqlReaderQuery }).(pulumi.AnyOutput)
}

// Name of the stored procedure for a Microsoft Fabric Warehouse source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
func (o WarehouseSourceOutput) SqlReaderStoredProcedureName() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseSource) interface{} { return v.SqlReaderStoredProcedureName }).(pulumi.AnyOutput)
}

// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}". Type: object (or Expression with resultType object), itemType: StoredProcedureParameter.
func (o WarehouseSourceOutput) StoredProcedureParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseSource) interface{} { return v.StoredProcedureParameters }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'WarehouseSource'.
func (o WarehouseSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v WarehouseSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Microsoft Fabric Warehouse source.
type WarehouseSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies the transaction locking behavior for the Microsoft Fabric Warehouse source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string).
	IsolationLevel interface{} `pulumi:"isolationLevel"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for Sql source partitioning.
	PartitionSettings *SqlPartitionSettingsResponse `pulumi:"partitionSettings"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Microsoft Fabric Warehouse reader query. Type: string (or Expression with resultType string).
	SqlReaderQuery interface{} `pulumi:"sqlReaderQuery"`
	// Name of the stored procedure for a Microsoft Fabric Warehouse source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
	SqlReaderStoredProcedureName interface{} `pulumi:"sqlReaderStoredProcedureName"`
	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}". Type: object (or Expression with resultType object), itemType: StoredProcedureParameter.
	StoredProcedureParameters interface{} `pulumi:"storedProcedureParameters"`
	// Copy source type.
	// Expected value is 'WarehouseSource'.
	Type string `pulumi:"type"`
}

// A copy activity Microsoft Fabric Warehouse source.
type WarehouseSourceResponseOutput struct{ *pulumi.OutputState }

func (WarehouseSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WarehouseSourceResponse)(nil)).Elem()
}

func (o WarehouseSourceResponseOutput) ToWarehouseSourceResponseOutput() WarehouseSourceResponseOutput {
	return o
}

func (o WarehouseSourceResponseOutput) ToWarehouseSourceResponseOutputWithContext(ctx context.Context) WarehouseSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o WarehouseSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o WarehouseSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Specifies the transaction locking behavior for the Microsoft Fabric Warehouse source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string).
func (o WarehouseSourceResponseOutput) IsolationLevel() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseSourceResponse) interface{} { return v.IsolationLevel }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o WarehouseSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange".
func (o WarehouseSourceResponseOutput) PartitionOption() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseSourceResponse) interface{} { return v.PartitionOption }).(pulumi.AnyOutput)
}

// The settings that will be leveraged for Sql source partitioning.
func (o WarehouseSourceResponseOutput) PartitionSettings() SqlPartitionSettingsResponsePtrOutput {
	return o.ApplyT(func(v WarehouseSourceResponse) *SqlPartitionSettingsResponse { return v.PartitionSettings }).(SqlPartitionSettingsResponsePtrOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o WarehouseSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o WarehouseSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o WarehouseSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Microsoft Fabric Warehouse reader query. Type: string (or Expression with resultType string).
func (o WarehouseSourceResponseOutput) SqlReaderQuery() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseSourceResponse) interface{} { return v.SqlReaderQuery }).(pulumi.AnyOutput)
}

// Name of the stored procedure for a Microsoft Fabric Warehouse source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
func (o WarehouseSourceResponseOutput) SqlReaderStoredProcedureName() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseSourceResponse) interface{} { return v.SqlReaderStoredProcedureName }).(pulumi.AnyOutput)
}

// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}". Type: object (or Expression with resultType object), itemType: StoredProcedureParameter.
func (o WarehouseSourceResponseOutput) StoredProcedureParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseSourceResponse) interface{} { return v.StoredProcedureParameters }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'WarehouseSource'.
func (o WarehouseSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v WarehouseSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Microsoft Fabric Warehouse dataset.
type WarehouseTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Microsoft Fabric Warehouse. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'WarehouseTable'.
	Type string `pulumi:"type"`
}

// WarehouseTableDatasetInput is an input type that accepts WarehouseTableDatasetArgs and WarehouseTableDatasetOutput values.
// You can construct a concrete instance of `WarehouseTableDatasetInput` via:
//
//	WarehouseTableDatasetArgs{...}
type WarehouseTableDatasetInput interface {
	pulumi.Input

	ToWarehouseTableDatasetOutput() WarehouseTableDatasetOutput
	ToWarehouseTableDatasetOutputWithContext(context.Context) WarehouseTableDatasetOutput
}

// Microsoft Fabric Warehouse dataset.
type WarehouseTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Microsoft Fabric Warehouse. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'WarehouseTable'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (WarehouseTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WarehouseTableDataset)(nil)).Elem()
}

func (i WarehouseTableDatasetArgs) ToWarehouseTableDatasetOutput() WarehouseTableDatasetOutput {
	return i.ToWarehouseTableDatasetOutputWithContext(context.Background())
}

func (i WarehouseTableDatasetArgs) ToWarehouseTableDatasetOutputWithContext(ctx context.Context) WarehouseTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WarehouseTableDatasetOutput)
}

// Microsoft Fabric Warehouse dataset.
type WarehouseTableDatasetOutput struct{ *pulumi.OutputState }

func (WarehouseTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WarehouseTableDataset)(nil)).Elem()
}

func (o WarehouseTableDatasetOutput) ToWarehouseTableDatasetOutput() WarehouseTableDatasetOutput {
	return o
}

func (o WarehouseTableDatasetOutput) ToWarehouseTableDatasetOutputWithContext(ctx context.Context) WarehouseTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o WarehouseTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v WarehouseTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o WarehouseTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WarehouseTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o WarehouseTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v WarehouseTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o WarehouseTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v WarehouseTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o WarehouseTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v WarehouseTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o WarehouseTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o WarehouseTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Microsoft Fabric Warehouse. Type: string (or Expression with resultType string).
func (o WarehouseTableDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseTableDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'WarehouseTable'.
func (o WarehouseTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v WarehouseTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Microsoft Fabric Warehouse dataset.
type WarehouseTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Microsoft Fabric Warehouse. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'WarehouseTable'.
	Type string `pulumi:"type"`
}

// Microsoft Fabric Warehouse dataset.
type WarehouseTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (WarehouseTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WarehouseTableDatasetResponse)(nil)).Elem()
}

func (o WarehouseTableDatasetResponseOutput) ToWarehouseTableDatasetResponseOutput() WarehouseTableDatasetResponseOutput {
	return o
}

func (o WarehouseTableDatasetResponseOutput) ToWarehouseTableDatasetResponseOutputWithContext(ctx context.Context) WarehouseTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o WarehouseTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v WarehouseTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o WarehouseTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WarehouseTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o WarehouseTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v WarehouseTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o WarehouseTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v WarehouseTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o WarehouseTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v WarehouseTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o WarehouseTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o WarehouseTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Microsoft Fabric Warehouse. Type: string (or Expression with resultType string).
func (o WarehouseTableDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v WarehouseTableDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'WarehouseTable'.
func (o WarehouseTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v WarehouseTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Web activity.
type WebActivity struct {
	// Authentication method used for calling the endpoint.
	Authentication *WebActivityAuthentication `pulumi:"authentication"`
	// Represents the payload that will be sent to the endpoint. Required for POST/PUT method, not allowed for GET method Type: string (or Expression with resultType string).
	Body interface{} `pulumi:"body"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// List of datasets passed to web endpoint.
	Datasets []DatasetReference `pulumi:"datasets"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// When set to true, Certificate validation will be disabled.
	DisableCertValidation *bool `pulumi:"disableCertValidation"`
	// Represents the headers that will be sent to the request. For example, to set the language and type on a request: "headers" : { "Accept-Language": "en-us", "Content-Type": "application/json" }. Type: string (or Expression with resultType string).
	Headers map[string]string `pulumi:"headers"`
	// Timeout for the HTTP request to get a response. Format is in TimeSpan (hh:mm:ss). This value is the timeout to get a response, not the activity timeout. The default value is 00:01:00 (1 minute). The range is from 1 to 10 minutes
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// List of linked services passed to web endpoint.
	LinkedServices []LinkedServiceReference `pulumi:"linkedServices"`
	// Rest API method for target endpoint.
	Method string `pulumi:"method"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Option to disable invoking HTTP GET on location given in response header of a HTTP 202 Response. If set true, it stops invoking HTTP GET on http location given in response header. If set false then continues to invoke HTTP GET call on location given in http response headers.
	TurnOffAsync *bool `pulumi:"turnOffAsync"`
	// Type of activity.
	// Expected value is 'WebActivity'.
	Type string `pulumi:"type"`
	// Web activity target endpoint and path. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// WebActivityInput is an input type that accepts WebActivityArgs and WebActivityOutput values.
// You can construct a concrete instance of `WebActivityInput` via:
//
//	WebActivityArgs{...}
type WebActivityInput interface {
	pulumi.Input

	ToWebActivityOutput() WebActivityOutput
	ToWebActivityOutputWithContext(context.Context) WebActivityOutput
}

// Web activity.
type WebActivityArgs struct {
	// Authentication method used for calling the endpoint.
	Authentication WebActivityAuthenticationPtrInput `pulumi:"authentication"`
	// Represents the payload that will be sent to the endpoint. Required for POST/PUT method, not allowed for GET method Type: string (or Expression with resultType string).
	Body pulumi.Input `pulumi:"body"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// List of datasets passed to web endpoint.
	Datasets DatasetReferenceArrayInput `pulumi:"datasets"`
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// When set to true, Certificate validation will be disabled.
	DisableCertValidation pulumi.BoolPtrInput `pulumi:"disableCertValidation"`
	// Represents the headers that will be sent to the request. For example, to set the language and type on a request: "headers" : { "Accept-Language": "en-us", "Content-Type": "application/json" }. Type: string (or Expression with resultType string).
	Headers pulumi.StringMapInput `pulumi:"headers"`
	// Timeout for the HTTP request to get a response. Format is in TimeSpan (hh:mm:ss). This value is the timeout to get a response, not the activity timeout. The default value is 00:01:00 (1 minute). The range is from 1 to 10 minutes
	HttpRequestTimeout pulumi.Input `pulumi:"httpRequestTimeout"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferencePtrInput `pulumi:"linkedServiceName"`
	// List of linked services passed to web endpoint.
	LinkedServices LinkedServiceReferenceArrayInput `pulumi:"linkedServices"`
	// Rest API method for target endpoint.
	Method pulumi.StringInput `pulumi:"method"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs pulumi.StringPtrInput `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy ActivityPolicyPtrInput `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Option to disable invoking HTTP GET on location given in response header of a HTTP 202 Response. If set true, it stops invoking HTTP GET on http location given in response header. If set false then continues to invoke HTTP GET call on location given in http response headers.
	TurnOffAsync pulumi.BoolPtrInput `pulumi:"turnOffAsync"`
	// Type of activity.
	// Expected value is 'WebActivity'.
	Type pulumi.StringInput `pulumi:"type"`
	// Web activity target endpoint and path. Type: string (or Expression with resultType string).
	Url pulumi.Input `pulumi:"url"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
}

func (WebActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebActivity)(nil)).Elem()
}

func (i WebActivityArgs) ToWebActivityOutput() WebActivityOutput {
	return i.ToWebActivityOutputWithContext(context.Background())
}

func (i WebActivityArgs) ToWebActivityOutputWithContext(ctx context.Context) WebActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebActivityOutput)
}

// Web activity.
type WebActivityOutput struct{ *pulumi.OutputState }

func (WebActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebActivity)(nil)).Elem()
}

func (o WebActivityOutput) ToWebActivityOutput() WebActivityOutput {
	return o
}

func (o WebActivityOutput) ToWebActivityOutputWithContext(ctx context.Context) WebActivityOutput {
	return o
}

// Authentication method used for calling the endpoint.
func (o WebActivityOutput) Authentication() WebActivityAuthenticationPtrOutput {
	return o.ApplyT(func(v WebActivity) *WebActivityAuthentication { return v.Authentication }).(WebActivityAuthenticationPtrOutput)
}

// Represents the payload that will be sent to the endpoint. Required for POST/PUT method, not allowed for GET method Type: string (or Expression with resultType string).
func (o WebActivityOutput) Body() pulumi.AnyOutput {
	return o.ApplyT(func(v WebActivity) interface{} { return v.Body }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o WebActivityOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v WebActivity) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// List of datasets passed to web endpoint.
func (o WebActivityOutput) Datasets() DatasetReferenceArrayOutput {
	return o.ApplyT(func(v WebActivity) []DatasetReference { return v.Datasets }).(DatasetReferenceArrayOutput)
}

// Activity depends on condition.
func (o WebActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v WebActivity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o WebActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebActivity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// When set to true, Certificate validation will be disabled.
func (o WebActivityOutput) DisableCertValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebActivity) *bool { return v.DisableCertValidation }).(pulumi.BoolPtrOutput)
}

// Represents the headers that will be sent to the request. For example, to set the language and type on a request: "headers" : { "Accept-Language": "en-us", "Content-Type": "application/json" }. Type: string (or Expression with resultType string).
func (o WebActivityOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v WebActivity) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

// Timeout for the HTTP request to get a response. Format is in TimeSpan (hh:mm:ss). This value is the timeout to get a response, not the activity timeout. The default value is 00:01:00 (1 minute). The range is from 1 to 10 minutes
func (o WebActivityOutput) HttpRequestTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v WebActivity) interface{} { return v.HttpRequestTimeout }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o WebActivityOutput) LinkedServiceName() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v WebActivity) *LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferencePtrOutput)
}

// List of linked services passed to web endpoint.
func (o WebActivityOutput) LinkedServices() LinkedServiceReferenceArrayOutput {
	return o.ApplyT(func(v WebActivity) []LinkedServiceReference { return v.LinkedServices }).(LinkedServiceReferenceArrayOutput)
}

// Rest API method for target endpoint.
func (o WebActivityOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v WebActivity) string { return v.Method }).(pulumi.StringOutput)
}

// Activity name.
func (o WebActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v WebActivity) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o WebActivityOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebActivity) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o WebActivityOutput) Policy() ActivityPolicyPtrOutput {
	return o.ApplyT(func(v WebActivity) *ActivityPolicy { return v.Policy }).(ActivityPolicyPtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o WebActivityOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebActivity) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Option to disable invoking HTTP GET on location given in response header of a HTTP 202 Response. If set true, it stops invoking HTTP GET on http location given in response header. If set false then continues to invoke HTTP GET call on location given in http response headers.
func (o WebActivityOutput) TurnOffAsync() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebActivity) *bool { return v.TurnOffAsync }).(pulumi.BoolPtrOutput)
}

// Type of activity.
// Expected value is 'WebActivity'.
func (o WebActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v WebActivity) string { return v.Type }).(pulumi.StringOutput)
}

// Web activity target endpoint and path. Type: string (or Expression with resultType string).
func (o WebActivityOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v WebActivity) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// Activity user properties.
func (o WebActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v WebActivity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

// Web activity authentication properties.
type WebActivityAuthentication struct {
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Password for the PFX file or basic authentication / Secret when used for ServicePrincipal
	Password interface{} `pulumi:"password"`
	// Base64-encoded contents of a PFX file or Certificate when used for ServicePrincipal
	Pfx interface{} `pulumi:"pfx"`
	// Resource for which Azure Auth token will be requested when using MSI Authentication. Type: string (or Expression with resultType string).
	Resource interface{} `pulumi:"resource"`
	// Web activity authentication (Basic/ClientCertificate/MSI/ServicePrincipal)
	Type *string `pulumi:"type"`
	// TenantId for which Azure Auth token will be requested when using ServicePrincipal Authentication. Type: string (or Expression with resultType string).
	UserTenant interface{} `pulumi:"userTenant"`
	// Web activity authentication user name for basic authentication or ClientID when used for ServicePrincipal. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// WebActivityAuthenticationInput is an input type that accepts WebActivityAuthenticationArgs and WebActivityAuthenticationOutput values.
// You can construct a concrete instance of `WebActivityAuthenticationInput` via:
//
//	WebActivityAuthenticationArgs{...}
type WebActivityAuthenticationInput interface {
	pulumi.Input

	ToWebActivityAuthenticationOutput() WebActivityAuthenticationOutput
	ToWebActivityAuthenticationOutputWithContext(context.Context) WebActivityAuthenticationOutput
}

// Web activity authentication properties.
type WebActivityAuthenticationArgs struct {
	// The credential reference containing authentication information.
	Credential CredentialReferencePtrInput `pulumi:"credential"`
	// Password for the PFX file or basic authentication / Secret when used for ServicePrincipal
	Password pulumi.Input `pulumi:"password"`
	// Base64-encoded contents of a PFX file or Certificate when used for ServicePrincipal
	Pfx pulumi.Input `pulumi:"pfx"`
	// Resource for which Azure Auth token will be requested when using MSI Authentication. Type: string (or Expression with resultType string).
	Resource pulumi.Input `pulumi:"resource"`
	// Web activity authentication (Basic/ClientCertificate/MSI/ServicePrincipal)
	Type pulumi.StringPtrInput `pulumi:"type"`
	// TenantId for which Azure Auth token will be requested when using ServicePrincipal Authentication. Type: string (or Expression with resultType string).
	UserTenant pulumi.Input `pulumi:"userTenant"`
	// Web activity authentication user name for basic authentication or ClientID when used for ServicePrincipal. Type: string (or Expression with resultType string).
	Username pulumi.Input `pulumi:"username"`
}

func (WebActivityAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebActivityAuthentication)(nil)).Elem()
}

func (i WebActivityAuthenticationArgs) ToWebActivityAuthenticationOutput() WebActivityAuthenticationOutput {
	return i.ToWebActivityAuthenticationOutputWithContext(context.Background())
}

func (i WebActivityAuthenticationArgs) ToWebActivityAuthenticationOutputWithContext(ctx context.Context) WebActivityAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebActivityAuthenticationOutput)
}

func (i WebActivityAuthenticationArgs) ToWebActivityAuthenticationPtrOutput() WebActivityAuthenticationPtrOutput {
	return i.ToWebActivityAuthenticationPtrOutputWithContext(context.Background())
}

func (i WebActivityAuthenticationArgs) ToWebActivityAuthenticationPtrOutputWithContext(ctx context.Context) WebActivityAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebActivityAuthenticationOutput).ToWebActivityAuthenticationPtrOutputWithContext(ctx)
}

// WebActivityAuthenticationPtrInput is an input type that accepts WebActivityAuthenticationArgs, WebActivityAuthenticationPtr and WebActivityAuthenticationPtrOutput values.
// You can construct a concrete instance of `WebActivityAuthenticationPtrInput` via:
//
//	        WebActivityAuthenticationArgs{...}
//
//	or:
//
//	        nil
type WebActivityAuthenticationPtrInput interface {
	pulumi.Input

	ToWebActivityAuthenticationPtrOutput() WebActivityAuthenticationPtrOutput
	ToWebActivityAuthenticationPtrOutputWithContext(context.Context) WebActivityAuthenticationPtrOutput
}

type webActivityAuthenticationPtrType WebActivityAuthenticationArgs

func WebActivityAuthenticationPtr(v *WebActivityAuthenticationArgs) WebActivityAuthenticationPtrInput {
	return (*webActivityAuthenticationPtrType)(v)
}

func (*webActivityAuthenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebActivityAuthentication)(nil)).Elem()
}

func (i *webActivityAuthenticationPtrType) ToWebActivityAuthenticationPtrOutput() WebActivityAuthenticationPtrOutput {
	return i.ToWebActivityAuthenticationPtrOutputWithContext(context.Background())
}

func (i *webActivityAuthenticationPtrType) ToWebActivityAuthenticationPtrOutputWithContext(ctx context.Context) WebActivityAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebActivityAuthenticationPtrOutput)
}

// Web activity authentication properties.
type WebActivityAuthenticationOutput struct{ *pulumi.OutputState }

func (WebActivityAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebActivityAuthentication)(nil)).Elem()
}

func (o WebActivityAuthenticationOutput) ToWebActivityAuthenticationOutput() WebActivityAuthenticationOutput {
	return o
}

func (o WebActivityAuthenticationOutput) ToWebActivityAuthenticationOutputWithContext(ctx context.Context) WebActivityAuthenticationOutput {
	return o
}

func (o WebActivityAuthenticationOutput) ToWebActivityAuthenticationPtrOutput() WebActivityAuthenticationPtrOutput {
	return o.ToWebActivityAuthenticationPtrOutputWithContext(context.Background())
}

func (o WebActivityAuthenticationOutput) ToWebActivityAuthenticationPtrOutputWithContext(ctx context.Context) WebActivityAuthenticationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WebActivityAuthentication) *WebActivityAuthentication {
		return &v
	}).(WebActivityAuthenticationPtrOutput)
}

// The credential reference containing authentication information.
func (o WebActivityAuthenticationOutput) Credential() CredentialReferencePtrOutput {
	return o.ApplyT(func(v WebActivityAuthentication) *CredentialReference { return v.Credential }).(CredentialReferencePtrOutput)
}

// Password for the PFX file or basic authentication / Secret when used for ServicePrincipal
func (o WebActivityAuthenticationOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v WebActivityAuthentication) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Base64-encoded contents of a PFX file or Certificate when used for ServicePrincipal
func (o WebActivityAuthenticationOutput) Pfx() pulumi.AnyOutput {
	return o.ApplyT(func(v WebActivityAuthentication) interface{} { return v.Pfx }).(pulumi.AnyOutput)
}

// Resource for which Azure Auth token will be requested when using MSI Authentication. Type: string (or Expression with resultType string).
func (o WebActivityAuthenticationOutput) Resource() pulumi.AnyOutput {
	return o.ApplyT(func(v WebActivityAuthentication) interface{} { return v.Resource }).(pulumi.AnyOutput)
}

// Web activity authentication (Basic/ClientCertificate/MSI/ServicePrincipal)
func (o WebActivityAuthenticationOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebActivityAuthentication) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// TenantId for which Azure Auth token will be requested when using ServicePrincipal Authentication. Type: string (or Expression with resultType string).
func (o WebActivityAuthenticationOutput) UserTenant() pulumi.AnyOutput {
	return o.ApplyT(func(v WebActivityAuthentication) interface{} { return v.UserTenant }).(pulumi.AnyOutput)
}

// Web activity authentication user name for basic authentication or ClientID when used for ServicePrincipal. Type: string (or Expression with resultType string).
func (o WebActivityAuthenticationOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v WebActivityAuthentication) interface{} { return v.Username }).(pulumi.AnyOutput)
}

type WebActivityAuthenticationPtrOutput struct{ *pulumi.OutputState }

func (WebActivityAuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebActivityAuthentication)(nil)).Elem()
}

func (o WebActivityAuthenticationPtrOutput) ToWebActivityAuthenticationPtrOutput() WebActivityAuthenticationPtrOutput {
	return o
}

func (o WebActivityAuthenticationPtrOutput) ToWebActivityAuthenticationPtrOutputWithContext(ctx context.Context) WebActivityAuthenticationPtrOutput {
	return o
}

func (o WebActivityAuthenticationPtrOutput) Elem() WebActivityAuthenticationOutput {
	return o.ApplyT(func(v *WebActivityAuthentication) WebActivityAuthentication {
		if v != nil {
			return *v
		}
		var ret WebActivityAuthentication
		return ret
	}).(WebActivityAuthenticationOutput)
}

// The credential reference containing authentication information.
func (o WebActivityAuthenticationPtrOutput) Credential() CredentialReferencePtrOutput {
	return o.ApplyT(func(v *WebActivityAuthentication) *CredentialReference {
		if v == nil {
			return nil
		}
		return v.Credential
	}).(CredentialReferencePtrOutput)
}

// Password for the PFX file or basic authentication / Secret when used for ServicePrincipal
func (o WebActivityAuthenticationPtrOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v *WebActivityAuthentication) interface{} {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.AnyOutput)
}

// Base64-encoded contents of a PFX file or Certificate when used for ServicePrincipal
func (o WebActivityAuthenticationPtrOutput) Pfx() pulumi.AnyOutput {
	return o.ApplyT(func(v *WebActivityAuthentication) interface{} {
		if v == nil {
			return nil
		}
		return v.Pfx
	}).(pulumi.AnyOutput)
}

// Resource for which Azure Auth token will be requested when using MSI Authentication. Type: string (or Expression with resultType string).
func (o WebActivityAuthenticationPtrOutput) Resource() pulumi.AnyOutput {
	return o.ApplyT(func(v *WebActivityAuthentication) interface{} {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(pulumi.AnyOutput)
}

// Web activity authentication (Basic/ClientCertificate/MSI/ServicePrincipal)
func (o WebActivityAuthenticationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebActivityAuthentication) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// TenantId for which Azure Auth token will be requested when using ServicePrincipal Authentication. Type: string (or Expression with resultType string).
func (o WebActivityAuthenticationPtrOutput) UserTenant() pulumi.AnyOutput {
	return o.ApplyT(func(v *WebActivityAuthentication) interface{} {
		if v == nil {
			return nil
		}
		return v.UserTenant
	}).(pulumi.AnyOutput)
}

// Web activity authentication user name for basic authentication or ClientID when used for ServicePrincipal. Type: string (or Expression with resultType string).
func (o WebActivityAuthenticationPtrOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v *WebActivityAuthentication) interface{} {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.AnyOutput)
}

// Web activity authentication properties.
type WebActivityAuthenticationResponse struct {
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Password for the PFX file or basic authentication / Secret when used for ServicePrincipal
	Password interface{} `pulumi:"password"`
	// Base64-encoded contents of a PFX file or Certificate when used for ServicePrincipal
	Pfx interface{} `pulumi:"pfx"`
	// Resource for which Azure Auth token will be requested when using MSI Authentication. Type: string (or Expression with resultType string).
	Resource interface{} `pulumi:"resource"`
	// Web activity authentication (Basic/ClientCertificate/MSI/ServicePrincipal)
	Type *string `pulumi:"type"`
	// TenantId for which Azure Auth token will be requested when using ServicePrincipal Authentication. Type: string (or Expression with resultType string).
	UserTenant interface{} `pulumi:"userTenant"`
	// Web activity authentication user name for basic authentication or ClientID when used for ServicePrincipal. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// Web activity authentication properties.
type WebActivityAuthenticationResponseOutput struct{ *pulumi.OutputState }

func (WebActivityAuthenticationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebActivityAuthenticationResponse)(nil)).Elem()
}

func (o WebActivityAuthenticationResponseOutput) ToWebActivityAuthenticationResponseOutput() WebActivityAuthenticationResponseOutput {
	return o
}

func (o WebActivityAuthenticationResponseOutput) ToWebActivityAuthenticationResponseOutputWithContext(ctx context.Context) WebActivityAuthenticationResponseOutput {
	return o
}

// The credential reference containing authentication information.
func (o WebActivityAuthenticationResponseOutput) Credential() CredentialReferenceResponsePtrOutput {
	return o.ApplyT(func(v WebActivityAuthenticationResponse) *CredentialReferenceResponse { return v.Credential }).(CredentialReferenceResponsePtrOutput)
}

// Password for the PFX file or basic authentication / Secret when used for ServicePrincipal
func (o WebActivityAuthenticationResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v WebActivityAuthenticationResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Base64-encoded contents of a PFX file or Certificate when used for ServicePrincipal
func (o WebActivityAuthenticationResponseOutput) Pfx() pulumi.AnyOutput {
	return o.ApplyT(func(v WebActivityAuthenticationResponse) interface{} { return v.Pfx }).(pulumi.AnyOutput)
}

// Resource for which Azure Auth token will be requested when using MSI Authentication. Type: string (or Expression with resultType string).
func (o WebActivityAuthenticationResponseOutput) Resource() pulumi.AnyOutput {
	return o.ApplyT(func(v WebActivityAuthenticationResponse) interface{} { return v.Resource }).(pulumi.AnyOutput)
}

// Web activity authentication (Basic/ClientCertificate/MSI/ServicePrincipal)
func (o WebActivityAuthenticationResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebActivityAuthenticationResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// TenantId for which Azure Auth token will be requested when using ServicePrincipal Authentication. Type: string (or Expression with resultType string).
func (o WebActivityAuthenticationResponseOutput) UserTenant() pulumi.AnyOutput {
	return o.ApplyT(func(v WebActivityAuthenticationResponse) interface{} { return v.UserTenant }).(pulumi.AnyOutput)
}

// Web activity authentication user name for basic authentication or ClientID when used for ServicePrincipal. Type: string (or Expression with resultType string).
func (o WebActivityAuthenticationResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v WebActivityAuthenticationResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

type WebActivityAuthenticationResponsePtrOutput struct{ *pulumi.OutputState }

func (WebActivityAuthenticationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebActivityAuthenticationResponse)(nil)).Elem()
}

func (o WebActivityAuthenticationResponsePtrOutput) ToWebActivityAuthenticationResponsePtrOutput() WebActivityAuthenticationResponsePtrOutput {
	return o
}

func (o WebActivityAuthenticationResponsePtrOutput) ToWebActivityAuthenticationResponsePtrOutputWithContext(ctx context.Context) WebActivityAuthenticationResponsePtrOutput {
	return o
}

func (o WebActivityAuthenticationResponsePtrOutput) Elem() WebActivityAuthenticationResponseOutput {
	return o.ApplyT(func(v *WebActivityAuthenticationResponse) WebActivityAuthenticationResponse {
		if v != nil {
			return *v
		}
		var ret WebActivityAuthenticationResponse
		return ret
	}).(WebActivityAuthenticationResponseOutput)
}

// The credential reference containing authentication information.
func (o WebActivityAuthenticationResponsePtrOutput) Credential() CredentialReferenceResponsePtrOutput {
	return o.ApplyT(func(v *WebActivityAuthenticationResponse) *CredentialReferenceResponse {
		if v == nil {
			return nil
		}
		return v.Credential
	}).(CredentialReferenceResponsePtrOutput)
}

// Password for the PFX file or basic authentication / Secret when used for ServicePrincipal
func (o WebActivityAuthenticationResponsePtrOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v *WebActivityAuthenticationResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.AnyOutput)
}

// Base64-encoded contents of a PFX file or Certificate when used for ServicePrincipal
func (o WebActivityAuthenticationResponsePtrOutput) Pfx() pulumi.AnyOutput {
	return o.ApplyT(func(v *WebActivityAuthenticationResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Pfx
	}).(pulumi.AnyOutput)
}

// Resource for which Azure Auth token will be requested when using MSI Authentication. Type: string (or Expression with resultType string).
func (o WebActivityAuthenticationResponsePtrOutput) Resource() pulumi.AnyOutput {
	return o.ApplyT(func(v *WebActivityAuthenticationResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(pulumi.AnyOutput)
}

// Web activity authentication (Basic/ClientCertificate/MSI/ServicePrincipal)
func (o WebActivityAuthenticationResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebActivityAuthenticationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// TenantId for which Azure Auth token will be requested when using ServicePrincipal Authentication. Type: string (or Expression with resultType string).
func (o WebActivityAuthenticationResponsePtrOutput) UserTenant() pulumi.AnyOutput {
	return o.ApplyT(func(v *WebActivityAuthenticationResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.UserTenant
	}).(pulumi.AnyOutput)
}

// Web activity authentication user name for basic authentication or ClientID when used for ServicePrincipal. Type: string (or Expression with resultType string).
func (o WebActivityAuthenticationResponsePtrOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v *WebActivityAuthenticationResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.AnyOutput)
}

// Web activity.
type WebActivityResponse struct {
	// Authentication method used for calling the endpoint.
	Authentication *WebActivityAuthenticationResponse `pulumi:"authentication"`
	// Represents the payload that will be sent to the endpoint. Required for POST/PUT method, not allowed for GET method Type: string (or Expression with resultType string).
	Body interface{} `pulumi:"body"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// List of datasets passed to web endpoint.
	Datasets []DatasetReferenceResponse `pulumi:"datasets"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// When set to true, Certificate validation will be disabled.
	DisableCertValidation *bool `pulumi:"disableCertValidation"`
	// Represents the headers that will be sent to the request. For example, to set the language and type on a request: "headers" : { "Accept-Language": "en-us", "Content-Type": "application/json" }. Type: string (or Expression with resultType string).
	Headers map[string]string `pulumi:"headers"`
	// Timeout for the HTTP request to get a response. Format is in TimeSpan (hh:mm:ss). This value is the timeout to get a response, not the activity timeout. The default value is 00:01:00 (1 minute). The range is from 1 to 10 minutes
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// List of linked services passed to web endpoint.
	LinkedServices []LinkedServiceReferenceResponse `pulumi:"linkedServices"`
	// Rest API method for target endpoint.
	Method string `pulumi:"method"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Option to disable invoking HTTP GET on location given in response header of a HTTP 202 Response. If set true, it stops invoking HTTP GET on http location given in response header. If set false then continues to invoke HTTP GET call on location given in http response headers.
	TurnOffAsync *bool `pulumi:"turnOffAsync"`
	// Type of activity.
	// Expected value is 'WebActivity'.
	Type string `pulumi:"type"`
	// Web activity target endpoint and path. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Web activity.
type WebActivityResponseOutput struct{ *pulumi.OutputState }

func (WebActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebActivityResponse)(nil)).Elem()
}

func (o WebActivityResponseOutput) ToWebActivityResponseOutput() WebActivityResponseOutput {
	return o
}

func (o WebActivityResponseOutput) ToWebActivityResponseOutputWithContext(ctx context.Context) WebActivityResponseOutput {
	return o
}

// Authentication method used for calling the endpoint.
func (o WebActivityResponseOutput) Authentication() WebActivityAuthenticationResponsePtrOutput {
	return o.ApplyT(func(v WebActivityResponse) *WebActivityAuthenticationResponse { return v.Authentication }).(WebActivityAuthenticationResponsePtrOutput)
}

// Represents the payload that will be sent to the endpoint. Required for POST/PUT method, not allowed for GET method Type: string (or Expression with resultType string).
func (o WebActivityResponseOutput) Body() pulumi.AnyOutput {
	return o.ApplyT(func(v WebActivityResponse) interface{} { return v.Body }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o WebActivityResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v WebActivityResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// List of datasets passed to web endpoint.
func (o WebActivityResponseOutput) Datasets() DatasetReferenceResponseArrayOutput {
	return o.ApplyT(func(v WebActivityResponse) []DatasetReferenceResponse { return v.Datasets }).(DatasetReferenceResponseArrayOutput)
}

// Activity depends on condition.
func (o WebActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v WebActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o WebActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// When set to true, Certificate validation will be disabled.
func (o WebActivityResponseOutput) DisableCertValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebActivityResponse) *bool { return v.DisableCertValidation }).(pulumi.BoolPtrOutput)
}

// Represents the headers that will be sent to the request. For example, to set the language and type on a request: "headers" : { "Accept-Language": "en-us", "Content-Type": "application/json" }. Type: string (or Expression with resultType string).
func (o WebActivityResponseOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v WebActivityResponse) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

// Timeout for the HTTP request to get a response. Format is in TimeSpan (hh:mm:ss). This value is the timeout to get a response, not the activity timeout. The default value is 00:01:00 (1 minute). The range is from 1 to 10 minutes
func (o WebActivityResponseOutput) HttpRequestTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v WebActivityResponse) interface{} { return v.HttpRequestTimeout }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o WebActivityResponseOutput) LinkedServiceName() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v WebActivityResponse) *LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponsePtrOutput)
}

// List of linked services passed to web endpoint.
func (o WebActivityResponseOutput) LinkedServices() LinkedServiceReferenceResponseArrayOutput {
	return o.ApplyT(func(v WebActivityResponse) []LinkedServiceReferenceResponse { return v.LinkedServices }).(LinkedServiceReferenceResponseArrayOutput)
}

// Rest API method for target endpoint.
func (o WebActivityResponseOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v WebActivityResponse) string { return v.Method }).(pulumi.StringOutput)
}

// Activity name.
func (o WebActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v WebActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o WebActivityResponseOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebActivityResponse) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o WebActivityResponseOutput) Policy() ActivityPolicyResponsePtrOutput {
	return o.ApplyT(func(v WebActivityResponse) *ActivityPolicyResponse { return v.Policy }).(ActivityPolicyResponsePtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o WebActivityResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebActivityResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Option to disable invoking HTTP GET on location given in response header of a HTTP 202 Response. If set true, it stops invoking HTTP GET on http location given in response header. If set false then continues to invoke HTTP GET call on location given in http response headers.
func (o WebActivityResponseOutput) TurnOffAsync() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebActivityResponse) *bool { return v.TurnOffAsync }).(pulumi.BoolPtrOutput)
}

// Type of activity.
// Expected value is 'WebActivity'.
func (o WebActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v WebActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Web activity target endpoint and path. Type: string (or Expression with resultType string).
func (o WebActivityResponseOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v WebActivityResponse) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// Activity user properties.
func (o WebActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v WebActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

// A WebLinkedService that uses anonymous authentication to communicate with an HTTP endpoint.
type WebAnonymousAuthentication struct {
	// Type of authentication used to connect to the web table source.
	// Expected value is 'Anonymous'.
	AuthenticationType string `pulumi:"authenticationType"`
	// The URL of the web service endpoint, e.g. https://www.microsoft.com . Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
}

// WebAnonymousAuthenticationInput is an input type that accepts WebAnonymousAuthenticationArgs and WebAnonymousAuthenticationOutput values.
// You can construct a concrete instance of `WebAnonymousAuthenticationInput` via:
//
//	WebAnonymousAuthenticationArgs{...}
type WebAnonymousAuthenticationInput interface {
	pulumi.Input

	ToWebAnonymousAuthenticationOutput() WebAnonymousAuthenticationOutput
	ToWebAnonymousAuthenticationOutputWithContext(context.Context) WebAnonymousAuthenticationOutput
}

// A WebLinkedService that uses anonymous authentication to communicate with an HTTP endpoint.
type WebAnonymousAuthenticationArgs struct {
	// Type of authentication used to connect to the web table source.
	// Expected value is 'Anonymous'.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The URL of the web service endpoint, e.g. https://www.microsoft.com . Type: string (or Expression with resultType string).
	Url pulumi.Input `pulumi:"url"`
}

func (WebAnonymousAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebAnonymousAuthentication)(nil)).Elem()
}

func (i WebAnonymousAuthenticationArgs) ToWebAnonymousAuthenticationOutput() WebAnonymousAuthenticationOutput {
	return i.ToWebAnonymousAuthenticationOutputWithContext(context.Background())
}

func (i WebAnonymousAuthenticationArgs) ToWebAnonymousAuthenticationOutputWithContext(ctx context.Context) WebAnonymousAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAnonymousAuthenticationOutput)
}

// A WebLinkedService that uses anonymous authentication to communicate with an HTTP endpoint.
type WebAnonymousAuthenticationOutput struct{ *pulumi.OutputState }

func (WebAnonymousAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebAnonymousAuthentication)(nil)).Elem()
}

func (o WebAnonymousAuthenticationOutput) ToWebAnonymousAuthenticationOutput() WebAnonymousAuthenticationOutput {
	return o
}

func (o WebAnonymousAuthenticationOutput) ToWebAnonymousAuthenticationOutputWithContext(ctx context.Context) WebAnonymousAuthenticationOutput {
	return o
}

// Type of authentication used to connect to the web table source.
// Expected value is 'Anonymous'.
func (o WebAnonymousAuthenticationOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v WebAnonymousAuthentication) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The URL of the web service endpoint, e.g. https://www.microsoft.com . Type: string (or Expression with resultType string).
func (o WebAnonymousAuthenticationOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v WebAnonymousAuthentication) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// A WebLinkedService that uses anonymous authentication to communicate with an HTTP endpoint.
type WebAnonymousAuthenticationResponse struct {
	// Type of authentication used to connect to the web table source.
	// Expected value is 'Anonymous'.
	AuthenticationType string `pulumi:"authenticationType"`
	// The URL of the web service endpoint, e.g. https://www.microsoft.com . Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
}

// A WebLinkedService that uses anonymous authentication to communicate with an HTTP endpoint.
type WebAnonymousAuthenticationResponseOutput struct{ *pulumi.OutputState }

func (WebAnonymousAuthenticationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebAnonymousAuthenticationResponse)(nil)).Elem()
}

func (o WebAnonymousAuthenticationResponseOutput) ToWebAnonymousAuthenticationResponseOutput() WebAnonymousAuthenticationResponseOutput {
	return o
}

func (o WebAnonymousAuthenticationResponseOutput) ToWebAnonymousAuthenticationResponseOutputWithContext(ctx context.Context) WebAnonymousAuthenticationResponseOutput {
	return o
}

// Type of authentication used to connect to the web table source.
// Expected value is 'Anonymous'.
func (o WebAnonymousAuthenticationResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v WebAnonymousAuthenticationResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The URL of the web service endpoint, e.g. https://www.microsoft.com . Type: string (or Expression with resultType string).
func (o WebAnonymousAuthenticationResponseOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v WebAnonymousAuthenticationResponse) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// A WebLinkedService that uses basic authentication to communicate with an HTTP endpoint.
type WebBasicAuthentication struct {
	// Type of authentication used to connect to the web table source.
	// Expected value is 'Basic'.
	AuthenticationType string `pulumi:"authenticationType"`
	// The password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// The URL of the web service endpoint, e.g. https://www.microsoft.com . Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// WebBasicAuthenticationInput is an input type that accepts WebBasicAuthenticationArgs and WebBasicAuthenticationOutput values.
// You can construct a concrete instance of `WebBasicAuthenticationInput` via:
//
//	WebBasicAuthenticationArgs{...}
type WebBasicAuthenticationInput interface {
	pulumi.Input

	ToWebBasicAuthenticationOutput() WebBasicAuthenticationOutput
	ToWebBasicAuthenticationOutputWithContext(context.Context) WebBasicAuthenticationOutput
}

// A WebLinkedService that uses basic authentication to communicate with an HTTP endpoint.
type WebBasicAuthenticationArgs struct {
	// Type of authentication used to connect to the web table source.
	// Expected value is 'Basic'.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The password for Basic authentication.
	Password pulumi.Input `pulumi:"password"`
	// The URL of the web service endpoint, e.g. https://www.microsoft.com . Type: string (or Expression with resultType string).
	Url pulumi.Input `pulumi:"url"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	Username pulumi.Input `pulumi:"username"`
}

func (WebBasicAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebBasicAuthentication)(nil)).Elem()
}

func (i WebBasicAuthenticationArgs) ToWebBasicAuthenticationOutput() WebBasicAuthenticationOutput {
	return i.ToWebBasicAuthenticationOutputWithContext(context.Background())
}

func (i WebBasicAuthenticationArgs) ToWebBasicAuthenticationOutputWithContext(ctx context.Context) WebBasicAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebBasicAuthenticationOutput)
}

// A WebLinkedService that uses basic authentication to communicate with an HTTP endpoint.
type WebBasicAuthenticationOutput struct{ *pulumi.OutputState }

func (WebBasicAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebBasicAuthentication)(nil)).Elem()
}

func (o WebBasicAuthenticationOutput) ToWebBasicAuthenticationOutput() WebBasicAuthenticationOutput {
	return o
}

func (o WebBasicAuthenticationOutput) ToWebBasicAuthenticationOutputWithContext(ctx context.Context) WebBasicAuthenticationOutput {
	return o
}

// Type of authentication used to connect to the web table source.
// Expected value is 'Basic'.
func (o WebBasicAuthenticationOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v WebBasicAuthentication) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The password for Basic authentication.
func (o WebBasicAuthenticationOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v WebBasicAuthentication) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The URL of the web service endpoint, e.g. https://www.microsoft.com . Type: string (or Expression with resultType string).
func (o WebBasicAuthenticationOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v WebBasicAuthentication) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// User name for Basic authentication. Type: string (or Expression with resultType string).
func (o WebBasicAuthenticationOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v WebBasicAuthentication) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// A WebLinkedService that uses basic authentication to communicate with an HTTP endpoint.
type WebBasicAuthenticationResponse struct {
	// Type of authentication used to connect to the web table source.
	// Expected value is 'Basic'.
	AuthenticationType string `pulumi:"authenticationType"`
	// The password for Basic authentication.
	Password interface{} `pulumi:"password"`
	// The URL of the web service endpoint, e.g. https://www.microsoft.com . Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// User name for Basic authentication. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// A WebLinkedService that uses basic authentication to communicate with an HTTP endpoint.
type WebBasicAuthenticationResponseOutput struct{ *pulumi.OutputState }

func (WebBasicAuthenticationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebBasicAuthenticationResponse)(nil)).Elem()
}

func (o WebBasicAuthenticationResponseOutput) ToWebBasicAuthenticationResponseOutput() WebBasicAuthenticationResponseOutput {
	return o
}

func (o WebBasicAuthenticationResponseOutput) ToWebBasicAuthenticationResponseOutputWithContext(ctx context.Context) WebBasicAuthenticationResponseOutput {
	return o
}

// Type of authentication used to connect to the web table source.
// Expected value is 'Basic'.
func (o WebBasicAuthenticationResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v WebBasicAuthenticationResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The password for Basic authentication.
func (o WebBasicAuthenticationResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v WebBasicAuthenticationResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The URL of the web service endpoint, e.g. https://www.microsoft.com . Type: string (or Expression with resultType string).
func (o WebBasicAuthenticationResponseOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v WebBasicAuthenticationResponse) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// User name for Basic authentication. Type: string (or Expression with resultType string).
func (o WebBasicAuthenticationResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v WebBasicAuthenticationResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// A WebLinkedService that uses client certificate based authentication to communicate with an HTTP endpoint. This scheme follows mutual authentication; the server must also provide valid credentials to the client.
type WebClientCertificateAuthentication struct {
	// Type of authentication used to connect to the web table source.
	// Expected value is 'ClientCertificate'.
	AuthenticationType string `pulumi:"authenticationType"`
	// Password for the PFX file.
	Password interface{} `pulumi:"password"`
	// Base64-encoded contents of a PFX file.
	Pfx interface{} `pulumi:"pfx"`
	// The URL of the web service endpoint, e.g. https://www.microsoft.com . Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
}

// WebClientCertificateAuthenticationInput is an input type that accepts WebClientCertificateAuthenticationArgs and WebClientCertificateAuthenticationOutput values.
// You can construct a concrete instance of `WebClientCertificateAuthenticationInput` via:
//
//	WebClientCertificateAuthenticationArgs{...}
type WebClientCertificateAuthenticationInput interface {
	pulumi.Input

	ToWebClientCertificateAuthenticationOutput() WebClientCertificateAuthenticationOutput
	ToWebClientCertificateAuthenticationOutputWithContext(context.Context) WebClientCertificateAuthenticationOutput
}

// A WebLinkedService that uses client certificate based authentication to communicate with an HTTP endpoint. This scheme follows mutual authentication; the server must also provide valid credentials to the client.
type WebClientCertificateAuthenticationArgs struct {
	// Type of authentication used to connect to the web table source.
	// Expected value is 'ClientCertificate'.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// Password for the PFX file.
	Password pulumi.Input `pulumi:"password"`
	// Base64-encoded contents of a PFX file.
	Pfx pulumi.Input `pulumi:"pfx"`
	// The URL of the web service endpoint, e.g. https://www.microsoft.com . Type: string (or Expression with resultType string).
	Url pulumi.Input `pulumi:"url"`
}

func (WebClientCertificateAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebClientCertificateAuthentication)(nil)).Elem()
}

func (i WebClientCertificateAuthenticationArgs) ToWebClientCertificateAuthenticationOutput() WebClientCertificateAuthenticationOutput {
	return i.ToWebClientCertificateAuthenticationOutputWithContext(context.Background())
}

func (i WebClientCertificateAuthenticationArgs) ToWebClientCertificateAuthenticationOutputWithContext(ctx context.Context) WebClientCertificateAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebClientCertificateAuthenticationOutput)
}

// A WebLinkedService that uses client certificate based authentication to communicate with an HTTP endpoint. This scheme follows mutual authentication; the server must also provide valid credentials to the client.
type WebClientCertificateAuthenticationOutput struct{ *pulumi.OutputState }

func (WebClientCertificateAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebClientCertificateAuthentication)(nil)).Elem()
}

func (o WebClientCertificateAuthenticationOutput) ToWebClientCertificateAuthenticationOutput() WebClientCertificateAuthenticationOutput {
	return o
}

func (o WebClientCertificateAuthenticationOutput) ToWebClientCertificateAuthenticationOutputWithContext(ctx context.Context) WebClientCertificateAuthenticationOutput {
	return o
}

// Type of authentication used to connect to the web table source.
// Expected value is 'ClientCertificate'.
func (o WebClientCertificateAuthenticationOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v WebClientCertificateAuthentication) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// Password for the PFX file.
func (o WebClientCertificateAuthenticationOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v WebClientCertificateAuthentication) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Base64-encoded contents of a PFX file.
func (o WebClientCertificateAuthenticationOutput) Pfx() pulumi.AnyOutput {
	return o.ApplyT(func(v WebClientCertificateAuthentication) interface{} { return v.Pfx }).(pulumi.AnyOutput)
}

// The URL of the web service endpoint, e.g. https://www.microsoft.com . Type: string (or Expression with resultType string).
func (o WebClientCertificateAuthenticationOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v WebClientCertificateAuthentication) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// A WebLinkedService that uses client certificate based authentication to communicate with an HTTP endpoint. This scheme follows mutual authentication; the server must also provide valid credentials to the client.
type WebClientCertificateAuthenticationResponse struct {
	// Type of authentication used to connect to the web table source.
	// Expected value is 'ClientCertificate'.
	AuthenticationType string `pulumi:"authenticationType"`
	// Password for the PFX file.
	Password interface{} `pulumi:"password"`
	// Base64-encoded contents of a PFX file.
	Pfx interface{} `pulumi:"pfx"`
	// The URL of the web service endpoint, e.g. https://www.microsoft.com . Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
}

// A WebLinkedService that uses client certificate based authentication to communicate with an HTTP endpoint. This scheme follows mutual authentication; the server must also provide valid credentials to the client.
type WebClientCertificateAuthenticationResponseOutput struct{ *pulumi.OutputState }

func (WebClientCertificateAuthenticationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebClientCertificateAuthenticationResponse)(nil)).Elem()
}

func (o WebClientCertificateAuthenticationResponseOutput) ToWebClientCertificateAuthenticationResponseOutput() WebClientCertificateAuthenticationResponseOutput {
	return o
}

func (o WebClientCertificateAuthenticationResponseOutput) ToWebClientCertificateAuthenticationResponseOutputWithContext(ctx context.Context) WebClientCertificateAuthenticationResponseOutput {
	return o
}

// Type of authentication used to connect to the web table source.
// Expected value is 'ClientCertificate'.
func (o WebClientCertificateAuthenticationResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v WebClientCertificateAuthenticationResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// Password for the PFX file.
func (o WebClientCertificateAuthenticationResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v WebClientCertificateAuthenticationResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Base64-encoded contents of a PFX file.
func (o WebClientCertificateAuthenticationResponseOutput) Pfx() pulumi.AnyOutput {
	return o.ApplyT(func(v WebClientCertificateAuthenticationResponse) interface{} { return v.Pfx }).(pulumi.AnyOutput)
}

// The URL of the web service endpoint, e.g. https://www.microsoft.com . Type: string (or Expression with resultType string).
func (o WebClientCertificateAuthenticationResponseOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v WebClientCertificateAuthenticationResponse) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// WebHook activity.
type WebHookActivity struct {
	// Authentication method used for calling the endpoint.
	Authentication *WebActivityAuthentication `pulumi:"authentication"`
	// Represents the payload that will be sent to the endpoint. Required for POST/PUT method, not allowed for GET method Type: string (or Expression with resultType string).
	Body interface{} `pulumi:"body"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Represents the headers that will be sent to the request. For example, to set the language and type on a request: "headers" : { "Accept-Language": "en-us", "Content-Type": "application/json" }. Type: string (or Expression with resultType string).
	Headers map[string]string `pulumi:"headers"`
	// Rest API method for target endpoint.
	Method string `pulumi:"method"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *SecureInputOutputPolicy `pulumi:"policy"`
	// When set to true, statusCode, output and error in callback request body will be consumed by activity. The activity can be marked as failed by setting statusCode >= 400 in callback request. Default is false. Type: boolean (or Expression with resultType boolean).
	ReportStatusOnCallBack interface{} `pulumi:"reportStatusOnCallBack"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// The timeout within which the webhook should be called back. If there is no value specified, it defaults to 10 minutes. Type: string. Pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Timeout *string `pulumi:"timeout"`
	// Type of activity.
	// Expected value is 'WebHook'.
	Type string `pulumi:"type"`
	// WebHook activity target endpoint and path. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// WebHookActivityInput is an input type that accepts WebHookActivityArgs and WebHookActivityOutput values.
// You can construct a concrete instance of `WebHookActivityInput` via:
//
//	WebHookActivityArgs{...}
type WebHookActivityInput interface {
	pulumi.Input

	ToWebHookActivityOutput() WebHookActivityOutput
	ToWebHookActivityOutputWithContext(context.Context) WebHookActivityOutput
}

// WebHook activity.
type WebHookActivityArgs struct {
	// Authentication method used for calling the endpoint.
	Authentication WebActivityAuthenticationPtrInput `pulumi:"authentication"`
	// Represents the payload that will be sent to the endpoint. Required for POST/PUT method, not allowed for GET method Type: string (or Expression with resultType string).
	Body pulumi.Input `pulumi:"body"`
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Represents the headers that will be sent to the request. For example, to set the language and type on a request: "headers" : { "Accept-Language": "en-us", "Content-Type": "application/json" }. Type: string (or Expression with resultType string).
	Headers pulumi.StringMapInput `pulumi:"headers"`
	// Rest API method for target endpoint.
	Method pulumi.StringInput `pulumi:"method"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs pulumi.StringPtrInput `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy SecureInputOutputPolicyPtrInput `pulumi:"policy"`
	// When set to true, statusCode, output and error in callback request body will be consumed by activity. The activity can be marked as failed by setting statusCode >= 400 in callback request. Default is false. Type: boolean (or Expression with resultType boolean).
	ReportStatusOnCallBack pulumi.Input `pulumi:"reportStatusOnCallBack"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State pulumi.StringPtrInput `pulumi:"state"`
	// The timeout within which the webhook should be called back. If there is no value specified, it defaults to 10 minutes. Type: string. Pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
	// Type of activity.
	// Expected value is 'WebHook'.
	Type pulumi.StringInput `pulumi:"type"`
	// WebHook activity target endpoint and path. Type: string (or Expression with resultType string).
	Url pulumi.Input `pulumi:"url"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
}

func (WebHookActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebHookActivity)(nil)).Elem()
}

func (i WebHookActivityArgs) ToWebHookActivityOutput() WebHookActivityOutput {
	return i.ToWebHookActivityOutputWithContext(context.Background())
}

func (i WebHookActivityArgs) ToWebHookActivityOutputWithContext(ctx context.Context) WebHookActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebHookActivityOutput)
}

// WebHook activity.
type WebHookActivityOutput struct{ *pulumi.OutputState }

func (WebHookActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebHookActivity)(nil)).Elem()
}

func (o WebHookActivityOutput) ToWebHookActivityOutput() WebHookActivityOutput {
	return o
}

func (o WebHookActivityOutput) ToWebHookActivityOutputWithContext(ctx context.Context) WebHookActivityOutput {
	return o
}

// Authentication method used for calling the endpoint.
func (o WebHookActivityOutput) Authentication() WebActivityAuthenticationPtrOutput {
	return o.ApplyT(func(v WebHookActivity) *WebActivityAuthentication { return v.Authentication }).(WebActivityAuthenticationPtrOutput)
}

// Represents the payload that will be sent to the endpoint. Required for POST/PUT method, not allowed for GET method Type: string (or Expression with resultType string).
func (o WebHookActivityOutput) Body() pulumi.AnyOutput {
	return o.ApplyT(func(v WebHookActivity) interface{} { return v.Body }).(pulumi.AnyOutput)
}

// Activity depends on condition.
func (o WebHookActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v WebHookActivity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o WebHookActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebHookActivity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Represents the headers that will be sent to the request. For example, to set the language and type on a request: "headers" : { "Accept-Language": "en-us", "Content-Type": "application/json" }. Type: string (or Expression with resultType string).
func (o WebHookActivityOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v WebHookActivity) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

// Rest API method for target endpoint.
func (o WebHookActivityOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v WebHookActivity) string { return v.Method }).(pulumi.StringOutput)
}

// Activity name.
func (o WebHookActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v WebHookActivity) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o WebHookActivityOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebHookActivity) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o WebHookActivityOutput) Policy() SecureInputOutputPolicyPtrOutput {
	return o.ApplyT(func(v WebHookActivity) *SecureInputOutputPolicy { return v.Policy }).(SecureInputOutputPolicyPtrOutput)
}

// When set to true, statusCode, output and error in callback request body will be consumed by activity. The activity can be marked as failed by setting statusCode >= 400 in callback request. Default is false. Type: boolean (or Expression with resultType boolean).
func (o WebHookActivityOutput) ReportStatusOnCallBack() pulumi.AnyOutput {
	return o.ApplyT(func(v WebHookActivity) interface{} { return v.ReportStatusOnCallBack }).(pulumi.AnyOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o WebHookActivityOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebHookActivity) *string { return v.State }).(pulumi.StringPtrOutput)
}

// The timeout within which the webhook should be called back. If there is no value specified, it defaults to 10 minutes. Type: string. Pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o WebHookActivityOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebHookActivity) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'WebHook'.
func (o WebHookActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v WebHookActivity) string { return v.Type }).(pulumi.StringOutput)
}

// WebHook activity target endpoint and path. Type: string (or Expression with resultType string).
func (o WebHookActivityOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v WebHookActivity) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// Activity user properties.
func (o WebHookActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v WebHookActivity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

// WebHook activity.
type WebHookActivityResponse struct {
	// Authentication method used for calling the endpoint.
	Authentication *WebActivityAuthenticationResponse `pulumi:"authentication"`
	// Represents the payload that will be sent to the endpoint. Required for POST/PUT method, not allowed for GET method Type: string (or Expression with resultType string).
	Body interface{} `pulumi:"body"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Represents the headers that will be sent to the request. For example, to set the language and type on a request: "headers" : { "Accept-Language": "en-us", "Content-Type": "application/json" }. Type: string (or Expression with resultType string).
	Headers map[string]string `pulumi:"headers"`
	// Rest API method for target endpoint.
	Method string `pulumi:"method"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *SecureInputOutputPolicyResponse `pulumi:"policy"`
	// When set to true, statusCode, output and error in callback request body will be consumed by activity. The activity can be marked as failed by setting statusCode >= 400 in callback request. Default is false. Type: boolean (or Expression with resultType boolean).
	ReportStatusOnCallBack interface{} `pulumi:"reportStatusOnCallBack"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// The timeout within which the webhook should be called back. If there is no value specified, it defaults to 10 minutes. Type: string. Pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Timeout *string `pulumi:"timeout"`
	// Type of activity.
	// Expected value is 'WebHook'.
	Type string `pulumi:"type"`
	// WebHook activity target endpoint and path. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// WebHook activity.
type WebHookActivityResponseOutput struct{ *pulumi.OutputState }

func (WebHookActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebHookActivityResponse)(nil)).Elem()
}

func (o WebHookActivityResponseOutput) ToWebHookActivityResponseOutput() WebHookActivityResponseOutput {
	return o
}

func (o WebHookActivityResponseOutput) ToWebHookActivityResponseOutputWithContext(ctx context.Context) WebHookActivityResponseOutput {
	return o
}

// Authentication method used for calling the endpoint.
func (o WebHookActivityResponseOutput) Authentication() WebActivityAuthenticationResponsePtrOutput {
	return o.ApplyT(func(v WebHookActivityResponse) *WebActivityAuthenticationResponse { return v.Authentication }).(WebActivityAuthenticationResponsePtrOutput)
}

// Represents the payload that will be sent to the endpoint. Required for POST/PUT method, not allowed for GET method Type: string (or Expression with resultType string).
func (o WebHookActivityResponseOutput) Body() pulumi.AnyOutput {
	return o.ApplyT(func(v WebHookActivityResponse) interface{} { return v.Body }).(pulumi.AnyOutput)
}

// Activity depends on condition.
func (o WebHookActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v WebHookActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o WebHookActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebHookActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Represents the headers that will be sent to the request. For example, to set the language and type on a request: "headers" : { "Accept-Language": "en-us", "Content-Type": "application/json" }. Type: string (or Expression with resultType string).
func (o WebHookActivityResponseOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v WebHookActivityResponse) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

// Rest API method for target endpoint.
func (o WebHookActivityResponseOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v WebHookActivityResponse) string { return v.Method }).(pulumi.StringOutput)
}

// Activity name.
func (o WebHookActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v WebHookActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o WebHookActivityResponseOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebHookActivityResponse) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o WebHookActivityResponseOutput) Policy() SecureInputOutputPolicyResponsePtrOutput {
	return o.ApplyT(func(v WebHookActivityResponse) *SecureInputOutputPolicyResponse { return v.Policy }).(SecureInputOutputPolicyResponsePtrOutput)
}

// When set to true, statusCode, output and error in callback request body will be consumed by activity. The activity can be marked as failed by setting statusCode >= 400 in callback request. Default is false. Type: boolean (or Expression with resultType boolean).
func (o WebHookActivityResponseOutput) ReportStatusOnCallBack() pulumi.AnyOutput {
	return o.ApplyT(func(v WebHookActivityResponse) interface{} { return v.ReportStatusOnCallBack }).(pulumi.AnyOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o WebHookActivityResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebHookActivityResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// The timeout within which the webhook should be called back. If there is no value specified, it defaults to 10 minutes. Type: string. Pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o WebHookActivityResponseOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebHookActivityResponse) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'WebHook'.
func (o WebHookActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v WebHookActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// WebHook activity target endpoint and path. Type: string (or Expression with resultType string).
func (o WebHookActivityResponseOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v WebHookActivityResponse) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// Activity user properties.
func (o WebHookActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v WebHookActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

// Web linked service.
type WebLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Web'.
	Type string `pulumi:"type"`
	// Web linked service properties.
	TypeProperties interface{} `pulumi:"typeProperties"`
}

// WebLinkedServiceInput is an input type that accepts WebLinkedServiceArgs and WebLinkedServiceOutput values.
// You can construct a concrete instance of `WebLinkedServiceInput` via:
//
//	WebLinkedServiceArgs{...}
type WebLinkedServiceInput interface {
	pulumi.Input

	ToWebLinkedServiceOutput() WebLinkedServiceOutput
	ToWebLinkedServiceOutputWithContext(context.Context) WebLinkedServiceOutput
}

// Web linked service.
type WebLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Web'.
	Type pulumi.StringInput `pulumi:"type"`
	// Web linked service properties.
	TypeProperties pulumi.Input `pulumi:"typeProperties"`
}

func (WebLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebLinkedService)(nil)).Elem()
}

func (i WebLinkedServiceArgs) ToWebLinkedServiceOutput() WebLinkedServiceOutput {
	return i.ToWebLinkedServiceOutputWithContext(context.Background())
}

func (i WebLinkedServiceArgs) ToWebLinkedServiceOutputWithContext(ctx context.Context) WebLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebLinkedServiceOutput)
}

// Web linked service.
type WebLinkedServiceOutput struct{ *pulumi.OutputState }

func (WebLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebLinkedService)(nil)).Elem()
}

func (o WebLinkedServiceOutput) ToWebLinkedServiceOutput() WebLinkedServiceOutput {
	return o
}

func (o WebLinkedServiceOutput) ToWebLinkedServiceOutputWithContext(ctx context.Context) WebLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o WebLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v WebLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o WebLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v WebLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o WebLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o WebLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v WebLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
// Expected value is 'Web'.
func (o WebLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v WebLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Web linked service properties.
func (o WebLinkedServiceOutput) TypeProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v WebLinkedService) interface{} { return v.TypeProperties }).(pulumi.AnyOutput)
}

// Web linked service.
type WebLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Web'.
	Type string `pulumi:"type"`
	// Web linked service properties.
	TypeProperties interface{} `pulumi:"typeProperties"`
}

// Web linked service.
type WebLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (WebLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebLinkedServiceResponse)(nil)).Elem()
}

func (o WebLinkedServiceResponseOutput) ToWebLinkedServiceResponseOutput() WebLinkedServiceResponseOutput {
	return o
}

func (o WebLinkedServiceResponseOutput) ToWebLinkedServiceResponseOutputWithContext(ctx context.Context) WebLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o WebLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v WebLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o WebLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v WebLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o WebLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o WebLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v WebLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
// Expected value is 'Web'.
func (o WebLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v WebLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Web linked service properties.
func (o WebLinkedServiceResponseOutput) TypeProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v WebLinkedServiceResponse) interface{} { return v.TypeProperties }).(pulumi.AnyOutput)
}

// A copy activity source for web page table.
type WebSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'WebSource'.
	Type string `pulumi:"type"`
}

// WebSourceInput is an input type that accepts WebSourceArgs and WebSourceOutput values.
// You can construct a concrete instance of `WebSourceInput` via:
//
//	WebSourceArgs{...}
type WebSourceInput interface {
	pulumi.Input

	ToWebSourceOutput() WebSourceOutput
	ToWebSourceOutputWithContext(context.Context) WebSourceOutput
}

// A copy activity source for web page table.
type WebSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'WebSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (WebSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebSource)(nil)).Elem()
}

func (i WebSourceArgs) ToWebSourceOutput() WebSourceOutput {
	return i.ToWebSourceOutputWithContext(context.Background())
}

func (i WebSourceArgs) ToWebSourceOutputWithContext(ctx context.Context) WebSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebSourceOutput)
}

// A copy activity source for web page table.
type WebSourceOutput struct{ *pulumi.OutputState }

func (WebSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebSource)(nil)).Elem()
}

func (o WebSourceOutput) ToWebSourceOutput() WebSourceOutput {
	return o
}

func (o WebSourceOutput) ToWebSourceOutputWithContext(ctx context.Context) WebSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o WebSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v WebSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o WebSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v WebSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o WebSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v WebSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o WebSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v WebSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o WebSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v WebSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'WebSource'.
func (o WebSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v WebSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity source for web page table.
type WebSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'WebSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for web page table.
type WebSourceResponseOutput struct{ *pulumi.OutputState }

func (WebSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebSourceResponse)(nil)).Elem()
}

func (o WebSourceResponseOutput) ToWebSourceResponseOutput() WebSourceResponseOutput {
	return o
}

func (o WebSourceResponseOutput) ToWebSourceResponseOutputWithContext(ctx context.Context) WebSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o WebSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v WebSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o WebSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v WebSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o WebSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v WebSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o WebSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v WebSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o WebSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v WebSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'WebSource'.
func (o WebSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v WebSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The dataset points to a HTML table in the web page.
type WebTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// The zero-based index of the table in the web page. Type: integer (or Expression with resultType integer), minimum: 0.
	Index interface{} `pulumi:"index"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The relative URL to the web page from the linked service URL. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'WebTable'.
	Type string `pulumi:"type"`
}

// WebTableDatasetInput is an input type that accepts WebTableDatasetArgs and WebTableDatasetOutput values.
// You can construct a concrete instance of `WebTableDatasetInput` via:
//
//	WebTableDatasetArgs{...}
type WebTableDatasetInput interface {
	pulumi.Input

	ToWebTableDatasetOutput() WebTableDatasetOutput
	ToWebTableDatasetOutputWithContext(context.Context) WebTableDatasetOutput
}

// The dataset points to a HTML table in the web page.
type WebTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// The zero-based index of the table in the web page. Type: integer (or Expression with resultType integer), minimum: 0.
	Index pulumi.Input `pulumi:"index"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The relative URL to the web page from the linked service URL. Type: string (or Expression with resultType string).
	Path pulumi.Input `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'WebTable'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (WebTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTableDataset)(nil)).Elem()
}

func (i WebTableDatasetArgs) ToWebTableDatasetOutput() WebTableDatasetOutput {
	return i.ToWebTableDatasetOutputWithContext(context.Background())
}

func (i WebTableDatasetArgs) ToWebTableDatasetOutputWithContext(ctx context.Context) WebTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTableDatasetOutput)
}

// The dataset points to a HTML table in the web page.
type WebTableDatasetOutput struct{ *pulumi.OutputState }

func (WebTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTableDataset)(nil)).Elem()
}

func (o WebTableDatasetOutput) ToWebTableDatasetOutput() WebTableDatasetOutput {
	return o
}

func (o WebTableDatasetOutput) ToWebTableDatasetOutputWithContext(ctx context.Context) WebTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o WebTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v WebTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o WebTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o WebTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v WebTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// The zero-based index of the table in the web page. Type: integer (or Expression with resultType integer), minimum: 0.
func (o WebTableDatasetOutput) Index() pulumi.AnyOutput {
	return o.ApplyT(func(v WebTableDataset) interface{} { return v.Index }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o WebTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v WebTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o WebTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v WebTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The relative URL to the web page from the linked service URL. Type: string (or Expression with resultType string).
func (o WebTableDatasetOutput) Path() pulumi.AnyOutput {
	return o.ApplyT(func(v WebTableDataset) interface{} { return v.Path }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o WebTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v WebTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o WebTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v WebTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'WebTable'.
func (o WebTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v WebTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The dataset points to a HTML table in the web page.
type WebTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// The zero-based index of the table in the web page. Type: integer (or Expression with resultType integer), minimum: 0.
	Index interface{} `pulumi:"index"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The relative URL to the web page from the linked service URL. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'WebTable'.
	Type string `pulumi:"type"`
}

// The dataset points to a HTML table in the web page.
type WebTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (WebTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTableDatasetResponse)(nil)).Elem()
}

func (o WebTableDatasetResponseOutput) ToWebTableDatasetResponseOutput() WebTableDatasetResponseOutput {
	return o
}

func (o WebTableDatasetResponseOutput) ToWebTableDatasetResponseOutputWithContext(ctx context.Context) WebTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o WebTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v WebTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o WebTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o WebTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v WebTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// The zero-based index of the table in the web page. Type: integer (or Expression with resultType integer), minimum: 0.
func (o WebTableDatasetResponseOutput) Index() pulumi.AnyOutput {
	return o.ApplyT(func(v WebTableDatasetResponse) interface{} { return v.Index }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o WebTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v WebTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o WebTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v WebTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The relative URL to the web page from the linked service URL. Type: string (or Expression with resultType string).
func (o WebTableDatasetResponseOutput) Path() pulumi.AnyOutput {
	return o.ApplyT(func(v WebTableDatasetResponse) interface{} { return v.Path }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o WebTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v WebTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o WebTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v WebTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'WebTable'.
func (o WebTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v WebTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Power Query data flow.
type WranglingDataFlow struct {
	// List of tags that can be used for describing the data flow.
	Annotations []interface{} `pulumi:"annotations"`
	// The description of the data flow.
	Description *string `pulumi:"description"`
	// Locale of the Power query mashup document.
	DocumentLocale *string `pulumi:"documentLocale"`
	// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
	Folder *DataFlowFolder `pulumi:"folder"`
	// Power query mashup script.
	Script *string `pulumi:"script"`
	// List of sources in Power Query.
	Sources []PowerQuerySource `pulumi:"sources"`
	// Type of data flow.
	// Expected value is 'WranglingDataFlow'.
	Type string `pulumi:"type"`
}

// WranglingDataFlowInput is an input type that accepts WranglingDataFlowArgs and WranglingDataFlowOutput values.
// You can construct a concrete instance of `WranglingDataFlowInput` via:
//
//	WranglingDataFlowArgs{...}
type WranglingDataFlowInput interface {
	pulumi.Input

	ToWranglingDataFlowOutput() WranglingDataFlowOutput
	ToWranglingDataFlowOutputWithContext(context.Context) WranglingDataFlowOutput
}

// Power Query data flow.
type WranglingDataFlowArgs struct {
	// List of tags that can be used for describing the data flow.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The description of the data flow.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Locale of the Power query mashup document.
	DocumentLocale pulumi.StringPtrInput `pulumi:"documentLocale"`
	// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
	Folder DataFlowFolderPtrInput `pulumi:"folder"`
	// Power query mashup script.
	Script pulumi.StringPtrInput `pulumi:"script"`
	// List of sources in Power Query.
	Sources PowerQuerySourceArrayInput `pulumi:"sources"`
	// Type of data flow.
	// Expected value is 'WranglingDataFlow'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (WranglingDataFlowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WranglingDataFlow)(nil)).Elem()
}

func (i WranglingDataFlowArgs) ToWranglingDataFlowOutput() WranglingDataFlowOutput {
	return i.ToWranglingDataFlowOutputWithContext(context.Background())
}

func (i WranglingDataFlowArgs) ToWranglingDataFlowOutputWithContext(ctx context.Context) WranglingDataFlowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WranglingDataFlowOutput)
}

// Power Query data flow.
type WranglingDataFlowOutput struct{ *pulumi.OutputState }

func (WranglingDataFlowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WranglingDataFlow)(nil)).Elem()
}

func (o WranglingDataFlowOutput) ToWranglingDataFlowOutput() WranglingDataFlowOutput {
	return o
}

func (o WranglingDataFlowOutput) ToWranglingDataFlowOutputWithContext(ctx context.Context) WranglingDataFlowOutput {
	return o
}

// List of tags that can be used for describing the data flow.
func (o WranglingDataFlowOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v WranglingDataFlow) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The description of the data flow.
func (o WranglingDataFlowOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WranglingDataFlow) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Locale of the Power query mashup document.
func (o WranglingDataFlowOutput) DocumentLocale() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WranglingDataFlow) *string { return v.DocumentLocale }).(pulumi.StringPtrOutput)
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
func (o WranglingDataFlowOutput) Folder() DataFlowFolderPtrOutput {
	return o.ApplyT(func(v WranglingDataFlow) *DataFlowFolder { return v.Folder }).(DataFlowFolderPtrOutput)
}

// Power query mashup script.
func (o WranglingDataFlowOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WranglingDataFlow) *string { return v.Script }).(pulumi.StringPtrOutput)
}

// List of sources in Power Query.
func (o WranglingDataFlowOutput) Sources() PowerQuerySourceArrayOutput {
	return o.ApplyT(func(v WranglingDataFlow) []PowerQuerySource { return v.Sources }).(PowerQuerySourceArrayOutput)
}

// Type of data flow.
// Expected value is 'WranglingDataFlow'.
func (o WranglingDataFlowOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v WranglingDataFlow) string { return v.Type }).(pulumi.StringOutput)
}

// Power Query data flow.
type WranglingDataFlowResponse struct {
	// List of tags that can be used for describing the data flow.
	Annotations []interface{} `pulumi:"annotations"`
	// The description of the data flow.
	Description *string `pulumi:"description"`
	// Locale of the Power query mashup document.
	DocumentLocale *string `pulumi:"documentLocale"`
	// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
	Folder *DataFlowResponseFolder `pulumi:"folder"`
	// Power query mashup script.
	Script *string `pulumi:"script"`
	// List of sources in Power Query.
	Sources []PowerQuerySourceResponse `pulumi:"sources"`
	// Type of data flow.
	// Expected value is 'WranglingDataFlow'.
	Type string `pulumi:"type"`
}

// Power Query data flow.
type WranglingDataFlowResponseOutput struct{ *pulumi.OutputState }

func (WranglingDataFlowResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WranglingDataFlowResponse)(nil)).Elem()
}

func (o WranglingDataFlowResponseOutput) ToWranglingDataFlowResponseOutput() WranglingDataFlowResponseOutput {
	return o
}

func (o WranglingDataFlowResponseOutput) ToWranglingDataFlowResponseOutputWithContext(ctx context.Context) WranglingDataFlowResponseOutput {
	return o
}

// List of tags that can be used for describing the data flow.
func (o WranglingDataFlowResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v WranglingDataFlowResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The description of the data flow.
func (o WranglingDataFlowResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WranglingDataFlowResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Locale of the Power query mashup document.
func (o WranglingDataFlowResponseOutput) DocumentLocale() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WranglingDataFlowResponse) *string { return v.DocumentLocale }).(pulumi.StringPtrOutput)
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
func (o WranglingDataFlowResponseOutput) Folder() DataFlowResponseFolderPtrOutput {
	return o.ApplyT(func(v WranglingDataFlowResponse) *DataFlowResponseFolder { return v.Folder }).(DataFlowResponseFolderPtrOutput)
}

// Power query mashup script.
func (o WranglingDataFlowResponseOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WranglingDataFlowResponse) *string { return v.Script }).(pulumi.StringPtrOutput)
}

// List of sources in Power Query.
func (o WranglingDataFlowResponseOutput) Sources() PowerQuerySourceResponseArrayOutput {
	return o.ApplyT(func(v WranglingDataFlowResponse) []PowerQuerySourceResponse { return v.Sources }).(PowerQuerySourceResponseArrayOutput)
}

// Type of data flow.
// Expected value is 'WranglingDataFlow'.
func (o WranglingDataFlowResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v WranglingDataFlowResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Xero Service linked service.
type XeroLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Properties used to connect to Xero. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// The consumer key associated with the Xero application.
	ConsumerKey interface{} `pulumi:"consumerKey"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The endpoint of the Xero server. (i.e. api.xero.com)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The private key from the .pem file that was generated for your Xero private application. You must include all the text from the .pem file, including the Unix line endings(
	// ).
	PrivateKey interface{} `pulumi:"privateKey"`
	// Type of linked service.
	// Expected value is 'Xero'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// XeroLinkedServiceInput is an input type that accepts XeroLinkedServiceArgs and XeroLinkedServiceOutput values.
// You can construct a concrete instance of `XeroLinkedServiceInput` via:
//
//	XeroLinkedServiceArgs{...}
type XeroLinkedServiceInput interface {
	pulumi.Input

	ToXeroLinkedServiceOutput() XeroLinkedServiceOutput
	ToXeroLinkedServiceOutputWithContext(context.Context) XeroLinkedServiceOutput
}

// Xero Service linked service.
type XeroLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Properties used to connect to Xero. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties pulumi.Input `pulumi:"connectionProperties"`
	// The consumer key associated with the Xero application.
	ConsumerKey pulumi.Input `pulumi:"consumerKey"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// The endpoint of the Xero server. (i.e. api.xero.com)
	Host pulumi.Input `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The private key from the .pem file that was generated for your Xero private application. You must include all the text from the .pem file, including the Unix line endings(
	// ).
	PrivateKey pulumi.Input `pulumi:"privateKey"`
	// Type of linked service.
	// Expected value is 'Xero'.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
}

func (XeroLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*XeroLinkedService)(nil)).Elem()
}

func (i XeroLinkedServiceArgs) ToXeroLinkedServiceOutput() XeroLinkedServiceOutput {
	return i.ToXeroLinkedServiceOutputWithContext(context.Background())
}

func (i XeroLinkedServiceArgs) ToXeroLinkedServiceOutputWithContext(ctx context.Context) XeroLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XeroLinkedServiceOutput)
}

// Xero Service linked service.
type XeroLinkedServiceOutput struct{ *pulumi.OutputState }

func (XeroLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*XeroLinkedService)(nil)).Elem()
}

func (o XeroLinkedServiceOutput) ToXeroLinkedServiceOutput() XeroLinkedServiceOutput {
	return o
}

func (o XeroLinkedServiceOutput) ToXeroLinkedServiceOutputWithContext(ctx context.Context) XeroLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o XeroLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v XeroLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o XeroLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v XeroLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Properties used to connect to Xero. It is mutually exclusive with any other properties in the linked service. Type: object.
func (o XeroLinkedServiceOutput) ConnectionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroLinkedService) interface{} { return v.ConnectionProperties }).(pulumi.AnyOutput)
}

// The consumer key associated with the Xero application.
func (o XeroLinkedServiceOutput) ConsumerKey() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroLinkedService) interface{} { return v.ConsumerKey }).(pulumi.AnyOutput)
}

// Linked service description.
func (o XeroLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v XeroLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o XeroLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v XeroLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The endpoint of the Xero server. (i.e. api.xero.com)
func (o XeroLinkedServiceOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroLinkedService) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o XeroLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v XeroLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The private key from the .pem file that was generated for your Xero private application. You must include all the text from the .pem file, including the Unix line endings(
// ).
func (o XeroLinkedServiceOutput) PrivateKey() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroLinkedService) interface{} { return v.PrivateKey }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Xero'.
func (o XeroLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v XeroLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o XeroLinkedServiceOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroLinkedService) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o XeroLinkedServiceOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroLinkedService) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o XeroLinkedServiceOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroLinkedService) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// Xero Service linked service.
type XeroLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Properties used to connect to Xero. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// The consumer key associated with the Xero application.
	ConsumerKey interface{} `pulumi:"consumerKey"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The endpoint of the Xero server. (i.e. api.xero.com)
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The private key from the .pem file that was generated for your Xero private application. You must include all the text from the .pem file, including the Unix line endings(
	// ).
	PrivateKey interface{} `pulumi:"privateKey"`
	// Type of linked service.
	// Expected value is 'Xero'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Xero Service linked service.
type XeroLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (XeroLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*XeroLinkedServiceResponse)(nil)).Elem()
}

func (o XeroLinkedServiceResponseOutput) ToXeroLinkedServiceResponseOutput() XeroLinkedServiceResponseOutput {
	return o
}

func (o XeroLinkedServiceResponseOutput) ToXeroLinkedServiceResponseOutputWithContext(ctx context.Context) XeroLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o XeroLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v XeroLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o XeroLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v XeroLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Properties used to connect to Xero. It is mutually exclusive with any other properties in the linked service. Type: object.
func (o XeroLinkedServiceResponseOutput) ConnectionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroLinkedServiceResponse) interface{} { return v.ConnectionProperties }).(pulumi.AnyOutput)
}

// The consumer key associated with the Xero application.
func (o XeroLinkedServiceResponseOutput) ConsumerKey() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroLinkedServiceResponse) interface{} { return v.ConsumerKey }).(pulumi.AnyOutput)
}

// Linked service description.
func (o XeroLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v XeroLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o XeroLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v XeroLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The endpoint of the Xero server. (i.e. api.xero.com)
func (o XeroLinkedServiceResponseOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroLinkedServiceResponse) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o XeroLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v XeroLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The private key from the .pem file that was generated for your Xero private application. You must include all the text from the .pem file, including the Unix line endings(
// ).
func (o XeroLinkedServiceResponseOutput) PrivateKey() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroLinkedServiceResponse) interface{} { return v.PrivateKey }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Xero'.
func (o XeroLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v XeroLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o XeroLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroLinkedServiceResponse) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o XeroLinkedServiceResponseOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroLinkedServiceResponse) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o XeroLinkedServiceResponseOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroLinkedServiceResponse) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// Xero Service dataset.
type XeroObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'XeroObject'.
	Type string `pulumi:"type"`
}

// XeroObjectDatasetInput is an input type that accepts XeroObjectDatasetArgs and XeroObjectDatasetOutput values.
// You can construct a concrete instance of `XeroObjectDatasetInput` via:
//
//	XeroObjectDatasetArgs{...}
type XeroObjectDatasetInput interface {
	pulumi.Input

	ToXeroObjectDatasetOutput() XeroObjectDatasetOutput
	ToXeroObjectDatasetOutputWithContext(context.Context) XeroObjectDatasetOutput
}

// Xero Service dataset.
type XeroObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'XeroObject'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (XeroObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*XeroObjectDataset)(nil)).Elem()
}

func (i XeroObjectDatasetArgs) ToXeroObjectDatasetOutput() XeroObjectDatasetOutput {
	return i.ToXeroObjectDatasetOutputWithContext(context.Background())
}

func (i XeroObjectDatasetArgs) ToXeroObjectDatasetOutputWithContext(ctx context.Context) XeroObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XeroObjectDatasetOutput)
}

// Xero Service dataset.
type XeroObjectDatasetOutput struct{ *pulumi.OutputState }

func (XeroObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*XeroObjectDataset)(nil)).Elem()
}

func (o XeroObjectDatasetOutput) ToXeroObjectDatasetOutput() XeroObjectDatasetOutput {
	return o
}

func (o XeroObjectDatasetOutput) ToXeroObjectDatasetOutputWithContext(ctx context.Context) XeroObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o XeroObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v XeroObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o XeroObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v XeroObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o XeroObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v XeroObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o XeroObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v XeroObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o XeroObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v XeroObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o XeroObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o XeroObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o XeroObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'XeroObject'.
func (o XeroObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v XeroObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Xero Service dataset.
type XeroObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'XeroObject'.
	Type string `pulumi:"type"`
}

// Xero Service dataset.
type XeroObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (XeroObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*XeroObjectDatasetResponse)(nil)).Elem()
}

func (o XeroObjectDatasetResponseOutput) ToXeroObjectDatasetResponseOutput() XeroObjectDatasetResponseOutput {
	return o
}

func (o XeroObjectDatasetResponseOutput) ToXeroObjectDatasetResponseOutputWithContext(ctx context.Context) XeroObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o XeroObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v XeroObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o XeroObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v XeroObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o XeroObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v XeroObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o XeroObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v XeroObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o XeroObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v XeroObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o XeroObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o XeroObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o XeroObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'XeroObject'.
func (o XeroObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v XeroObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Xero Service source.
type XeroSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'XeroSource'.
	Type string `pulumi:"type"`
}

// XeroSourceInput is an input type that accepts XeroSourceArgs and XeroSourceOutput values.
// You can construct a concrete instance of `XeroSourceInput` via:
//
//	XeroSourceArgs{...}
type XeroSourceInput interface {
	pulumi.Input

	ToXeroSourceOutput() XeroSourceOutput
	ToXeroSourceOutputWithContext(context.Context) XeroSourceOutput
}

// A copy activity Xero Service source.
type XeroSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'XeroSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (XeroSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*XeroSource)(nil)).Elem()
}

func (i XeroSourceArgs) ToXeroSourceOutput() XeroSourceOutput {
	return i.ToXeroSourceOutputWithContext(context.Background())
}

func (i XeroSourceArgs) ToXeroSourceOutputWithContext(ctx context.Context) XeroSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XeroSourceOutput)
}

// A copy activity Xero Service source.
type XeroSourceOutput struct{ *pulumi.OutputState }

func (XeroSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*XeroSource)(nil)).Elem()
}

func (o XeroSourceOutput) ToXeroSourceOutput() XeroSourceOutput {
	return o
}

func (o XeroSourceOutput) ToXeroSourceOutputWithContext(ctx context.Context) XeroSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o XeroSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o XeroSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o XeroSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o XeroSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o XeroSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o XeroSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o XeroSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'XeroSource'.
func (o XeroSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v XeroSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Xero Service source.
type XeroSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'XeroSource'.
	Type string `pulumi:"type"`
}

// A copy activity Xero Service source.
type XeroSourceResponseOutput struct{ *pulumi.OutputState }

func (XeroSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*XeroSourceResponse)(nil)).Elem()
}

func (o XeroSourceResponseOutput) ToXeroSourceResponseOutput() XeroSourceResponseOutput {
	return o
}

func (o XeroSourceResponseOutput) ToXeroSourceResponseOutputWithContext(ctx context.Context) XeroSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o XeroSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o XeroSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o XeroSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o XeroSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o XeroSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o XeroSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o XeroSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v XeroSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'XeroSource'.
func (o XeroSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v XeroSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Xml dataset.
type XmlDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the json dataset.
	Compression *DatasetCompression `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The code page name of the preferred encoding. If not specified, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
	EncodingName interface{} `pulumi:"encodingName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The location of the json data storage.
	Location interface{} `pulumi:"location"`
	// The null value string. Type: string (or Expression with resultType string).
	NullValue interface{} `pulumi:"nullValue"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Xml'.
	Type string `pulumi:"type"`
}

// XmlDatasetInput is an input type that accepts XmlDatasetArgs and XmlDatasetOutput values.
// You can construct a concrete instance of `XmlDatasetInput` via:
//
//	XmlDatasetArgs{...}
type XmlDatasetInput interface {
	pulumi.Input

	ToXmlDatasetOutput() XmlDatasetOutput
	ToXmlDatasetOutputWithContext(context.Context) XmlDatasetOutput
}

// Xml dataset.
type XmlDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The data compression method used for the json dataset.
	Compression DatasetCompressionPtrInput `pulumi:"compression"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The code page name of the preferred encoding. If not specified, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
	EncodingName pulumi.Input `pulumi:"encodingName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// The location of the json data storage.
	Location pulumi.Input `pulumi:"location"`
	// The null value string. Type: string (or Expression with resultType string).
	NullValue pulumi.Input `pulumi:"nullValue"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Xml'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (XmlDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*XmlDataset)(nil)).Elem()
}

func (i XmlDatasetArgs) ToXmlDatasetOutput() XmlDatasetOutput {
	return i.ToXmlDatasetOutputWithContext(context.Background())
}

func (i XmlDatasetArgs) ToXmlDatasetOutputWithContext(ctx context.Context) XmlDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XmlDatasetOutput)
}

// Xml dataset.
type XmlDatasetOutput struct{ *pulumi.OutputState }

func (XmlDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*XmlDataset)(nil)).Elem()
}

func (o XmlDatasetOutput) ToXmlDatasetOutput() XmlDatasetOutput {
	return o
}

func (o XmlDatasetOutput) ToXmlDatasetOutputWithContext(ctx context.Context) XmlDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o XmlDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v XmlDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The data compression method used for the json dataset.
func (o XmlDatasetOutput) Compression() DatasetCompressionPtrOutput {
	return o.ApplyT(func(v XmlDataset) *DatasetCompression { return v.Compression }).(DatasetCompressionPtrOutput)
}

// Dataset description.
func (o XmlDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v XmlDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The code page name of the preferred encoding. If not specified, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
func (o XmlDatasetOutput) EncodingName() pulumi.AnyOutput {
	return o.ApplyT(func(v XmlDataset) interface{} { return v.EncodingName }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o XmlDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v XmlDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o XmlDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v XmlDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// The location of the json data storage.
func (o XmlDatasetOutput) Location() pulumi.AnyOutput {
	return o.ApplyT(func(v XmlDataset) interface{} { return v.Location }).(pulumi.AnyOutput)
}

// The null value string. Type: string (or Expression with resultType string).
func (o XmlDatasetOutput) NullValue() pulumi.AnyOutput {
	return o.ApplyT(func(v XmlDataset) interface{} { return v.NullValue }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o XmlDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v XmlDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o XmlDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v XmlDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o XmlDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v XmlDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'Xml'.
func (o XmlDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v XmlDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Xml dataset.
type XmlDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the json dataset.
	Compression *DatasetCompressionResponse `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The code page name of the preferred encoding. If not specified, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
	EncodingName interface{} `pulumi:"encodingName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The location of the json data storage.
	Location interface{} `pulumi:"location"`
	// The null value string. Type: string (or Expression with resultType string).
	NullValue interface{} `pulumi:"nullValue"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Xml'.
	Type string `pulumi:"type"`
}

// Xml dataset.
type XmlDatasetResponseOutput struct{ *pulumi.OutputState }

func (XmlDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*XmlDatasetResponse)(nil)).Elem()
}

func (o XmlDatasetResponseOutput) ToXmlDatasetResponseOutput() XmlDatasetResponseOutput {
	return o
}

func (o XmlDatasetResponseOutput) ToXmlDatasetResponseOutputWithContext(ctx context.Context) XmlDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o XmlDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v XmlDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The data compression method used for the json dataset.
func (o XmlDatasetResponseOutput) Compression() DatasetCompressionResponsePtrOutput {
	return o.ApplyT(func(v XmlDatasetResponse) *DatasetCompressionResponse { return v.Compression }).(DatasetCompressionResponsePtrOutput)
}

// Dataset description.
func (o XmlDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v XmlDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The code page name of the preferred encoding. If not specified, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
func (o XmlDatasetResponseOutput) EncodingName() pulumi.AnyOutput {
	return o.ApplyT(func(v XmlDatasetResponse) interface{} { return v.EncodingName }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o XmlDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v XmlDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o XmlDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v XmlDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// The location of the json data storage.
func (o XmlDatasetResponseOutput) Location() pulumi.AnyOutput {
	return o.ApplyT(func(v XmlDatasetResponse) interface{} { return v.Location }).(pulumi.AnyOutput)
}

// The null value string. Type: string (or Expression with resultType string).
func (o XmlDatasetResponseOutput) NullValue() pulumi.AnyOutput {
	return o.ApplyT(func(v XmlDatasetResponse) interface{} { return v.NullValue }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o XmlDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v XmlDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o XmlDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v XmlDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o XmlDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v XmlDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'Xml'.
func (o XmlDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v XmlDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Xml read settings.
type XmlReadSettings struct {
	// Compression settings.
	CompressionProperties interface{} `pulumi:"compressionProperties"`
	// Indicates whether type detection is enabled when reading the xml files. Type: boolean (or Expression with resultType boolean).
	DetectDataType interface{} `pulumi:"detectDataType"`
	// Namespace uri to prefix mappings to override the prefixes in column names when namespace is enabled, if no prefix is defined for a namespace uri, the prefix of xml element/attribute name in the xml data file will be used. Example: "{"http://www.example.com/xml":"prefix"}" Type: object (or Expression with resultType object).
	NamespacePrefixes interface{} `pulumi:"namespacePrefixes"`
	// Indicates whether namespace is enabled when reading the xml files. Type: boolean (or Expression with resultType boolean).
	Namespaces interface{} `pulumi:"namespaces"`
	// The read setting type.
	// Expected value is 'XmlReadSettings'.
	Type string `pulumi:"type"`
	// Indicates what validation method is used when reading the xml files. Allowed values: 'none', 'xsd', or 'dtd'. Type: string (or Expression with resultType string).
	ValidationMode interface{} `pulumi:"validationMode"`
}

// XmlReadSettingsInput is an input type that accepts XmlReadSettingsArgs and XmlReadSettingsOutput values.
// You can construct a concrete instance of `XmlReadSettingsInput` via:
//
//	XmlReadSettingsArgs{...}
type XmlReadSettingsInput interface {
	pulumi.Input

	ToXmlReadSettingsOutput() XmlReadSettingsOutput
	ToXmlReadSettingsOutputWithContext(context.Context) XmlReadSettingsOutput
}

// Xml read settings.
type XmlReadSettingsArgs struct {
	// Compression settings.
	CompressionProperties pulumi.Input `pulumi:"compressionProperties"`
	// Indicates whether type detection is enabled when reading the xml files. Type: boolean (or Expression with resultType boolean).
	DetectDataType pulumi.Input `pulumi:"detectDataType"`
	// Namespace uri to prefix mappings to override the prefixes in column names when namespace is enabled, if no prefix is defined for a namespace uri, the prefix of xml element/attribute name in the xml data file will be used. Example: "{"http://www.example.com/xml":"prefix"}" Type: object (or Expression with resultType object).
	NamespacePrefixes pulumi.Input `pulumi:"namespacePrefixes"`
	// Indicates whether namespace is enabled when reading the xml files. Type: boolean (or Expression with resultType boolean).
	Namespaces pulumi.Input `pulumi:"namespaces"`
	// The read setting type.
	// Expected value is 'XmlReadSettings'.
	Type pulumi.StringInput `pulumi:"type"`
	// Indicates what validation method is used when reading the xml files. Allowed values: 'none', 'xsd', or 'dtd'. Type: string (or Expression with resultType string).
	ValidationMode pulumi.Input `pulumi:"validationMode"`
}

func (XmlReadSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*XmlReadSettings)(nil)).Elem()
}

func (i XmlReadSettingsArgs) ToXmlReadSettingsOutput() XmlReadSettingsOutput {
	return i.ToXmlReadSettingsOutputWithContext(context.Background())
}

func (i XmlReadSettingsArgs) ToXmlReadSettingsOutputWithContext(ctx context.Context) XmlReadSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XmlReadSettingsOutput)
}

func (i XmlReadSettingsArgs) ToXmlReadSettingsPtrOutput() XmlReadSettingsPtrOutput {
	return i.ToXmlReadSettingsPtrOutputWithContext(context.Background())
}

func (i XmlReadSettingsArgs) ToXmlReadSettingsPtrOutputWithContext(ctx context.Context) XmlReadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XmlReadSettingsOutput).ToXmlReadSettingsPtrOutputWithContext(ctx)
}

// XmlReadSettingsPtrInput is an input type that accepts XmlReadSettingsArgs, XmlReadSettingsPtr and XmlReadSettingsPtrOutput values.
// You can construct a concrete instance of `XmlReadSettingsPtrInput` via:
//
//	        XmlReadSettingsArgs{...}
//
//	or:
//
//	        nil
type XmlReadSettingsPtrInput interface {
	pulumi.Input

	ToXmlReadSettingsPtrOutput() XmlReadSettingsPtrOutput
	ToXmlReadSettingsPtrOutputWithContext(context.Context) XmlReadSettingsPtrOutput
}

type xmlReadSettingsPtrType XmlReadSettingsArgs

func XmlReadSettingsPtr(v *XmlReadSettingsArgs) XmlReadSettingsPtrInput {
	return (*xmlReadSettingsPtrType)(v)
}

func (*xmlReadSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**XmlReadSettings)(nil)).Elem()
}

func (i *xmlReadSettingsPtrType) ToXmlReadSettingsPtrOutput() XmlReadSettingsPtrOutput {
	return i.ToXmlReadSettingsPtrOutputWithContext(context.Background())
}

func (i *xmlReadSettingsPtrType) ToXmlReadSettingsPtrOutputWithContext(ctx context.Context) XmlReadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XmlReadSettingsPtrOutput)
}

// Xml read settings.
type XmlReadSettingsOutput struct{ *pulumi.OutputState }

func (XmlReadSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*XmlReadSettings)(nil)).Elem()
}

func (o XmlReadSettingsOutput) ToXmlReadSettingsOutput() XmlReadSettingsOutput {
	return o
}

func (o XmlReadSettingsOutput) ToXmlReadSettingsOutputWithContext(ctx context.Context) XmlReadSettingsOutput {
	return o
}

func (o XmlReadSettingsOutput) ToXmlReadSettingsPtrOutput() XmlReadSettingsPtrOutput {
	return o.ToXmlReadSettingsPtrOutputWithContext(context.Background())
}

func (o XmlReadSettingsOutput) ToXmlReadSettingsPtrOutputWithContext(ctx context.Context) XmlReadSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v XmlReadSettings) *XmlReadSettings {
		return &v
	}).(XmlReadSettingsPtrOutput)
}

// Compression settings.
func (o XmlReadSettingsOutput) CompressionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v XmlReadSettings) interface{} { return v.CompressionProperties }).(pulumi.AnyOutput)
}

// Indicates whether type detection is enabled when reading the xml files. Type: boolean (or Expression with resultType boolean).
func (o XmlReadSettingsOutput) DetectDataType() pulumi.AnyOutput {
	return o.ApplyT(func(v XmlReadSettings) interface{} { return v.DetectDataType }).(pulumi.AnyOutput)
}

// Namespace uri to prefix mappings to override the prefixes in column names when namespace is enabled, if no prefix is defined for a namespace uri, the prefix of xml element/attribute name in the xml data file will be used. Example: "{"http://www.example.com/xml":"prefix"}" Type: object (or Expression with resultType object).
func (o XmlReadSettingsOutput) NamespacePrefixes() pulumi.AnyOutput {
	return o.ApplyT(func(v XmlReadSettings) interface{} { return v.NamespacePrefixes }).(pulumi.AnyOutput)
}

// Indicates whether namespace is enabled when reading the xml files. Type: boolean (or Expression with resultType boolean).
func (o XmlReadSettingsOutput) Namespaces() pulumi.AnyOutput {
	return o.ApplyT(func(v XmlReadSettings) interface{} { return v.Namespaces }).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'XmlReadSettings'.
func (o XmlReadSettingsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v XmlReadSettings) string { return v.Type }).(pulumi.StringOutput)
}

// Indicates what validation method is used when reading the xml files. Allowed values: 'none', 'xsd', or 'dtd'. Type: string (or Expression with resultType string).
func (o XmlReadSettingsOutput) ValidationMode() pulumi.AnyOutput {
	return o.ApplyT(func(v XmlReadSettings) interface{} { return v.ValidationMode }).(pulumi.AnyOutput)
}

type XmlReadSettingsPtrOutput struct{ *pulumi.OutputState }

func (XmlReadSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**XmlReadSettings)(nil)).Elem()
}

func (o XmlReadSettingsPtrOutput) ToXmlReadSettingsPtrOutput() XmlReadSettingsPtrOutput {
	return o
}

func (o XmlReadSettingsPtrOutput) ToXmlReadSettingsPtrOutputWithContext(ctx context.Context) XmlReadSettingsPtrOutput {
	return o
}

func (o XmlReadSettingsPtrOutput) Elem() XmlReadSettingsOutput {
	return o.ApplyT(func(v *XmlReadSettings) XmlReadSettings {
		if v != nil {
			return *v
		}
		var ret XmlReadSettings
		return ret
	}).(XmlReadSettingsOutput)
}

// Compression settings.
func (o XmlReadSettingsPtrOutput) CompressionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v *XmlReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.CompressionProperties
	}).(pulumi.AnyOutput)
}

// Indicates whether type detection is enabled when reading the xml files. Type: boolean (or Expression with resultType boolean).
func (o XmlReadSettingsPtrOutput) DetectDataType() pulumi.AnyOutput {
	return o.ApplyT(func(v *XmlReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.DetectDataType
	}).(pulumi.AnyOutput)
}

// Namespace uri to prefix mappings to override the prefixes in column names when namespace is enabled, if no prefix is defined for a namespace uri, the prefix of xml element/attribute name in the xml data file will be used. Example: "{"http://www.example.com/xml":"prefix"}" Type: object (or Expression with resultType object).
func (o XmlReadSettingsPtrOutput) NamespacePrefixes() pulumi.AnyOutput {
	return o.ApplyT(func(v *XmlReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.NamespacePrefixes
	}).(pulumi.AnyOutput)
}

// Indicates whether namespace is enabled when reading the xml files. Type: boolean (or Expression with resultType boolean).
func (o XmlReadSettingsPtrOutput) Namespaces() pulumi.AnyOutput {
	return o.ApplyT(func(v *XmlReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.Namespaces
	}).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'XmlReadSettings'.
func (o XmlReadSettingsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *XmlReadSettings) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Indicates what validation method is used when reading the xml files. Allowed values: 'none', 'xsd', or 'dtd'. Type: string (or Expression with resultType string).
func (o XmlReadSettingsPtrOutput) ValidationMode() pulumi.AnyOutput {
	return o.ApplyT(func(v *XmlReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.ValidationMode
	}).(pulumi.AnyOutput)
}

// Xml read settings.
type XmlReadSettingsResponse struct {
	// Compression settings.
	CompressionProperties interface{} `pulumi:"compressionProperties"`
	// Indicates whether type detection is enabled when reading the xml files. Type: boolean (or Expression with resultType boolean).
	DetectDataType interface{} `pulumi:"detectDataType"`
	// Namespace uri to prefix mappings to override the prefixes in column names when namespace is enabled, if no prefix is defined for a namespace uri, the prefix of xml element/attribute name in the xml data file will be used. Example: "{"http://www.example.com/xml":"prefix"}" Type: object (or Expression with resultType object).
	NamespacePrefixes interface{} `pulumi:"namespacePrefixes"`
	// Indicates whether namespace is enabled when reading the xml files. Type: boolean (or Expression with resultType boolean).
	Namespaces interface{} `pulumi:"namespaces"`
	// The read setting type.
	// Expected value is 'XmlReadSettings'.
	Type string `pulumi:"type"`
	// Indicates what validation method is used when reading the xml files. Allowed values: 'none', 'xsd', or 'dtd'. Type: string (or Expression with resultType string).
	ValidationMode interface{} `pulumi:"validationMode"`
}

// Xml read settings.
type XmlReadSettingsResponseOutput struct{ *pulumi.OutputState }

func (XmlReadSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*XmlReadSettingsResponse)(nil)).Elem()
}

func (o XmlReadSettingsResponseOutput) ToXmlReadSettingsResponseOutput() XmlReadSettingsResponseOutput {
	return o
}

func (o XmlReadSettingsResponseOutput) ToXmlReadSettingsResponseOutputWithContext(ctx context.Context) XmlReadSettingsResponseOutput {
	return o
}

// Compression settings.
func (o XmlReadSettingsResponseOutput) CompressionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v XmlReadSettingsResponse) interface{} { return v.CompressionProperties }).(pulumi.AnyOutput)
}

// Indicates whether type detection is enabled when reading the xml files. Type: boolean (or Expression with resultType boolean).
func (o XmlReadSettingsResponseOutput) DetectDataType() pulumi.AnyOutput {
	return o.ApplyT(func(v XmlReadSettingsResponse) interface{} { return v.DetectDataType }).(pulumi.AnyOutput)
}

// Namespace uri to prefix mappings to override the prefixes in column names when namespace is enabled, if no prefix is defined for a namespace uri, the prefix of xml element/attribute name in the xml data file will be used. Example: "{"http://www.example.com/xml":"prefix"}" Type: object (or Expression with resultType object).
func (o XmlReadSettingsResponseOutput) NamespacePrefixes() pulumi.AnyOutput {
	return o.ApplyT(func(v XmlReadSettingsResponse) interface{} { return v.NamespacePrefixes }).(pulumi.AnyOutput)
}

// Indicates whether namespace is enabled when reading the xml files. Type: boolean (or Expression with resultType boolean).
func (o XmlReadSettingsResponseOutput) Namespaces() pulumi.AnyOutput {
	return o.ApplyT(func(v XmlReadSettingsResponse) interface{} { return v.Namespaces }).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'XmlReadSettings'.
func (o XmlReadSettingsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v XmlReadSettingsResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Indicates what validation method is used when reading the xml files. Allowed values: 'none', 'xsd', or 'dtd'. Type: string (or Expression with resultType string).
func (o XmlReadSettingsResponseOutput) ValidationMode() pulumi.AnyOutput {
	return o.ApplyT(func(v XmlReadSettingsResponse) interface{} { return v.ValidationMode }).(pulumi.AnyOutput)
}

type XmlReadSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (XmlReadSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**XmlReadSettingsResponse)(nil)).Elem()
}

func (o XmlReadSettingsResponsePtrOutput) ToXmlReadSettingsResponsePtrOutput() XmlReadSettingsResponsePtrOutput {
	return o
}

func (o XmlReadSettingsResponsePtrOutput) ToXmlReadSettingsResponsePtrOutputWithContext(ctx context.Context) XmlReadSettingsResponsePtrOutput {
	return o
}

func (o XmlReadSettingsResponsePtrOutput) Elem() XmlReadSettingsResponseOutput {
	return o.ApplyT(func(v *XmlReadSettingsResponse) XmlReadSettingsResponse {
		if v != nil {
			return *v
		}
		var ret XmlReadSettingsResponse
		return ret
	}).(XmlReadSettingsResponseOutput)
}

// Compression settings.
func (o XmlReadSettingsResponsePtrOutput) CompressionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v *XmlReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.CompressionProperties
	}).(pulumi.AnyOutput)
}

// Indicates whether type detection is enabled when reading the xml files. Type: boolean (or Expression with resultType boolean).
func (o XmlReadSettingsResponsePtrOutput) DetectDataType() pulumi.AnyOutput {
	return o.ApplyT(func(v *XmlReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.DetectDataType
	}).(pulumi.AnyOutput)
}

// Namespace uri to prefix mappings to override the prefixes in column names when namespace is enabled, if no prefix is defined for a namespace uri, the prefix of xml element/attribute name in the xml data file will be used. Example: "{"http://www.example.com/xml":"prefix"}" Type: object (or Expression with resultType object).
func (o XmlReadSettingsResponsePtrOutput) NamespacePrefixes() pulumi.AnyOutput {
	return o.ApplyT(func(v *XmlReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.NamespacePrefixes
	}).(pulumi.AnyOutput)
}

// Indicates whether namespace is enabled when reading the xml files. Type: boolean (or Expression with resultType boolean).
func (o XmlReadSettingsResponsePtrOutput) Namespaces() pulumi.AnyOutput {
	return o.ApplyT(func(v *XmlReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Namespaces
	}).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'XmlReadSettings'.
func (o XmlReadSettingsResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *XmlReadSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Indicates what validation method is used when reading the xml files. Allowed values: 'none', 'xsd', or 'dtd'. Type: string (or Expression with resultType string).
func (o XmlReadSettingsResponsePtrOutput) ValidationMode() pulumi.AnyOutput {
	return o.ApplyT(func(v *XmlReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.ValidationMode
	}).(pulumi.AnyOutput)
}

// A copy activity Xml source.
type XmlSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Xml format settings.
	FormatSettings *XmlReadSettings `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Xml store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'XmlSource'.
	Type string `pulumi:"type"`
}

// XmlSourceInput is an input type that accepts XmlSourceArgs and XmlSourceOutput values.
// You can construct a concrete instance of `XmlSourceInput` via:
//
//	XmlSourceArgs{...}
type XmlSourceInput interface {
	pulumi.Input

	ToXmlSourceOutput() XmlSourceOutput
	ToXmlSourceOutputWithContext(context.Context) XmlSourceOutput
}

// A copy activity Xml source.
type XmlSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// Xml format settings.
	FormatSettings XmlReadSettingsPtrInput `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Xml store settings.
	StoreSettings pulumi.Input `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'XmlSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (XmlSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*XmlSource)(nil)).Elem()
}

func (i XmlSourceArgs) ToXmlSourceOutput() XmlSourceOutput {
	return i.ToXmlSourceOutputWithContext(context.Background())
}

func (i XmlSourceArgs) ToXmlSourceOutputWithContext(ctx context.Context) XmlSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XmlSourceOutput)
}

// A copy activity Xml source.
type XmlSourceOutput struct{ *pulumi.OutputState }

func (XmlSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*XmlSource)(nil)).Elem()
}

func (o XmlSourceOutput) ToXmlSourceOutput() XmlSourceOutput {
	return o
}

func (o XmlSourceOutput) ToXmlSourceOutputWithContext(ctx context.Context) XmlSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o XmlSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v XmlSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o XmlSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v XmlSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Xml format settings.
func (o XmlSourceOutput) FormatSettings() XmlReadSettingsPtrOutput {
	return o.ApplyT(func(v XmlSource) *XmlReadSettings { return v.FormatSettings }).(XmlReadSettingsPtrOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o XmlSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v XmlSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o XmlSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v XmlSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o XmlSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v XmlSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Xml store settings.
func (o XmlSourceOutput) StoreSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v XmlSource) interface{} { return v.StoreSettings }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'XmlSource'.
func (o XmlSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v XmlSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Xml source.
type XmlSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Xml format settings.
	FormatSettings *XmlReadSettingsResponse `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Xml store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'XmlSource'.
	Type string `pulumi:"type"`
}

// A copy activity Xml source.
type XmlSourceResponseOutput struct{ *pulumi.OutputState }

func (XmlSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*XmlSourceResponse)(nil)).Elem()
}

func (o XmlSourceResponseOutput) ToXmlSourceResponseOutput() XmlSourceResponseOutput {
	return o
}

func (o XmlSourceResponseOutput) ToXmlSourceResponseOutputWithContext(ctx context.Context) XmlSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o XmlSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v XmlSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o XmlSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v XmlSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Xml format settings.
func (o XmlSourceResponseOutput) FormatSettings() XmlReadSettingsResponsePtrOutput {
	return o.ApplyT(func(v XmlSourceResponse) *XmlReadSettingsResponse { return v.FormatSettings }).(XmlReadSettingsResponsePtrOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o XmlSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v XmlSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o XmlSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v XmlSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o XmlSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v XmlSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Xml store settings.
func (o XmlSourceResponseOutput) StoreSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v XmlSourceResponse) interface{} { return v.StoreSettings }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'XmlSource'.
func (o XmlSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v XmlSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for Zendesk.
type ZendeskLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The api token for the Zendesk source.
	ApiToken interface{} `pulumi:"apiToken"`
	// The authentication type to use.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password of the Zendesk source.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Zendesk'.
	Type string `pulumi:"type"`
	// The url to connect Zendesk source. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// The username of the Zendesk source. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// ZendeskLinkedServiceInput is an input type that accepts ZendeskLinkedServiceArgs and ZendeskLinkedServiceOutput values.
// You can construct a concrete instance of `ZendeskLinkedServiceInput` via:
//
//	ZendeskLinkedServiceArgs{...}
type ZendeskLinkedServiceInput interface {
	pulumi.Input

	ToZendeskLinkedServiceOutput() ZendeskLinkedServiceOutput
	ToZendeskLinkedServiceOutputWithContext(context.Context) ZendeskLinkedServiceOutput
}

// Linked service for Zendesk.
type ZendeskLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The api token for the Zendesk source.
	ApiToken pulumi.Input `pulumi:"apiToken"`
	// The authentication type to use.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password of the Zendesk source.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Zendesk'.
	Type pulumi.StringInput `pulumi:"type"`
	// The url to connect Zendesk source. Type: string (or Expression with resultType string).
	Url pulumi.Input `pulumi:"url"`
	// The username of the Zendesk source. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (ZendeskLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZendeskLinkedService)(nil)).Elem()
}

func (i ZendeskLinkedServiceArgs) ToZendeskLinkedServiceOutput() ZendeskLinkedServiceOutput {
	return i.ToZendeskLinkedServiceOutputWithContext(context.Background())
}

func (i ZendeskLinkedServiceArgs) ToZendeskLinkedServiceOutputWithContext(ctx context.Context) ZendeskLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZendeskLinkedServiceOutput)
}

// Linked service for Zendesk.
type ZendeskLinkedServiceOutput struct{ *pulumi.OutputState }

func (ZendeskLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZendeskLinkedService)(nil)).Elem()
}

func (o ZendeskLinkedServiceOutput) ToZendeskLinkedServiceOutput() ZendeskLinkedServiceOutput {
	return o
}

func (o ZendeskLinkedServiceOutput) ToZendeskLinkedServiceOutputWithContext(ctx context.Context) ZendeskLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o ZendeskLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ZendeskLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The api token for the Zendesk source.
func (o ZendeskLinkedServiceOutput) ApiToken() pulumi.AnyOutput {
	return o.ApplyT(func(v ZendeskLinkedService) interface{} { return v.ApiToken }).(pulumi.AnyOutput)
}

// The authentication type to use.
func (o ZendeskLinkedServiceOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v ZendeskLinkedService) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The integration runtime reference.
func (o ZendeskLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v ZendeskLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o ZendeskLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ZendeskLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o ZendeskLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ZendeskLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o ZendeskLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v ZendeskLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The password of the Zendesk source.
func (o ZendeskLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v ZendeskLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Zendesk'.
func (o ZendeskLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ZendeskLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The url to connect Zendesk source. Type: string (or Expression with resultType string).
func (o ZendeskLinkedServiceOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v ZendeskLinkedService) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// The username of the Zendesk source. Type: string (or Expression with resultType string).
func (o ZendeskLinkedServiceOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v ZendeskLinkedService) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// Linked service for Zendesk.
type ZendeskLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The api token for the Zendesk source.
	ApiToken interface{} `pulumi:"apiToken"`
	// The authentication type to use.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password of the Zendesk source.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Zendesk'.
	Type string `pulumi:"type"`
	// The url to connect Zendesk source. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
	// The username of the Zendesk source. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// Linked service for Zendesk.
type ZendeskLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (ZendeskLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZendeskLinkedServiceResponse)(nil)).Elem()
}

func (o ZendeskLinkedServiceResponseOutput) ToZendeskLinkedServiceResponseOutput() ZendeskLinkedServiceResponseOutput {
	return o
}

func (o ZendeskLinkedServiceResponseOutput) ToZendeskLinkedServiceResponseOutputWithContext(ctx context.Context) ZendeskLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o ZendeskLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ZendeskLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The api token for the Zendesk source.
func (o ZendeskLinkedServiceResponseOutput) ApiToken() pulumi.AnyOutput {
	return o.ApplyT(func(v ZendeskLinkedServiceResponse) interface{} { return v.ApiToken }).(pulumi.AnyOutput)
}

// The authentication type to use.
func (o ZendeskLinkedServiceResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v ZendeskLinkedServiceResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The integration runtime reference.
func (o ZendeskLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v ZendeskLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o ZendeskLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ZendeskLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o ZendeskLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ZendeskLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o ZendeskLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ZendeskLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The password of the Zendesk source.
func (o ZendeskLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v ZendeskLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Zendesk'.
func (o ZendeskLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ZendeskLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The url to connect Zendesk source. Type: string (or Expression with resultType string).
func (o ZendeskLinkedServiceResponseOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v ZendeskLinkedServiceResponse) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// The username of the Zendesk source. Type: string (or Expression with resultType string).
func (o ZendeskLinkedServiceResponseOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v ZendeskLinkedServiceResponse) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// The ZipDeflate compression read settings.
type ZipDeflateReadSettings struct {
	// Preserve the zip file name as folder path. Type: boolean (or Expression with resultType boolean).
	PreserveZipFileNameAsFolder interface{} `pulumi:"preserveZipFileNameAsFolder"`
	// The Compression setting type.
	// Expected value is 'ZipDeflateReadSettings'.
	Type string `pulumi:"type"`
}

// ZipDeflateReadSettingsInput is an input type that accepts ZipDeflateReadSettingsArgs and ZipDeflateReadSettingsOutput values.
// You can construct a concrete instance of `ZipDeflateReadSettingsInput` via:
//
//	ZipDeflateReadSettingsArgs{...}
type ZipDeflateReadSettingsInput interface {
	pulumi.Input

	ToZipDeflateReadSettingsOutput() ZipDeflateReadSettingsOutput
	ToZipDeflateReadSettingsOutputWithContext(context.Context) ZipDeflateReadSettingsOutput
}

// The ZipDeflate compression read settings.
type ZipDeflateReadSettingsArgs struct {
	// Preserve the zip file name as folder path. Type: boolean (or Expression with resultType boolean).
	PreserveZipFileNameAsFolder pulumi.Input `pulumi:"preserveZipFileNameAsFolder"`
	// The Compression setting type.
	// Expected value is 'ZipDeflateReadSettings'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ZipDeflateReadSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZipDeflateReadSettings)(nil)).Elem()
}

func (i ZipDeflateReadSettingsArgs) ToZipDeflateReadSettingsOutput() ZipDeflateReadSettingsOutput {
	return i.ToZipDeflateReadSettingsOutputWithContext(context.Background())
}

func (i ZipDeflateReadSettingsArgs) ToZipDeflateReadSettingsOutputWithContext(ctx context.Context) ZipDeflateReadSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZipDeflateReadSettingsOutput)
}

func (i ZipDeflateReadSettingsArgs) ToZipDeflateReadSettingsPtrOutput() ZipDeflateReadSettingsPtrOutput {
	return i.ToZipDeflateReadSettingsPtrOutputWithContext(context.Background())
}

func (i ZipDeflateReadSettingsArgs) ToZipDeflateReadSettingsPtrOutputWithContext(ctx context.Context) ZipDeflateReadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZipDeflateReadSettingsOutput).ToZipDeflateReadSettingsPtrOutputWithContext(ctx)
}

// ZipDeflateReadSettingsPtrInput is an input type that accepts ZipDeflateReadSettingsArgs, ZipDeflateReadSettingsPtr and ZipDeflateReadSettingsPtrOutput values.
// You can construct a concrete instance of `ZipDeflateReadSettingsPtrInput` via:
//
//	        ZipDeflateReadSettingsArgs{...}
//
//	or:
//
//	        nil
type ZipDeflateReadSettingsPtrInput interface {
	pulumi.Input

	ToZipDeflateReadSettingsPtrOutput() ZipDeflateReadSettingsPtrOutput
	ToZipDeflateReadSettingsPtrOutputWithContext(context.Context) ZipDeflateReadSettingsPtrOutput
}

type zipDeflateReadSettingsPtrType ZipDeflateReadSettingsArgs

func ZipDeflateReadSettingsPtr(v *ZipDeflateReadSettingsArgs) ZipDeflateReadSettingsPtrInput {
	return (*zipDeflateReadSettingsPtrType)(v)
}

func (*zipDeflateReadSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ZipDeflateReadSettings)(nil)).Elem()
}

func (i *zipDeflateReadSettingsPtrType) ToZipDeflateReadSettingsPtrOutput() ZipDeflateReadSettingsPtrOutput {
	return i.ToZipDeflateReadSettingsPtrOutputWithContext(context.Background())
}

func (i *zipDeflateReadSettingsPtrType) ToZipDeflateReadSettingsPtrOutputWithContext(ctx context.Context) ZipDeflateReadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZipDeflateReadSettingsPtrOutput)
}

// The ZipDeflate compression read settings.
type ZipDeflateReadSettingsOutput struct{ *pulumi.OutputState }

func (ZipDeflateReadSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZipDeflateReadSettings)(nil)).Elem()
}

func (o ZipDeflateReadSettingsOutput) ToZipDeflateReadSettingsOutput() ZipDeflateReadSettingsOutput {
	return o
}

func (o ZipDeflateReadSettingsOutput) ToZipDeflateReadSettingsOutputWithContext(ctx context.Context) ZipDeflateReadSettingsOutput {
	return o
}

func (o ZipDeflateReadSettingsOutput) ToZipDeflateReadSettingsPtrOutput() ZipDeflateReadSettingsPtrOutput {
	return o.ToZipDeflateReadSettingsPtrOutputWithContext(context.Background())
}

func (o ZipDeflateReadSettingsOutput) ToZipDeflateReadSettingsPtrOutputWithContext(ctx context.Context) ZipDeflateReadSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ZipDeflateReadSettings) *ZipDeflateReadSettings {
		return &v
	}).(ZipDeflateReadSettingsPtrOutput)
}

// Preserve the zip file name as folder path. Type: boolean (or Expression with resultType boolean).
func (o ZipDeflateReadSettingsOutput) PreserveZipFileNameAsFolder() pulumi.AnyOutput {
	return o.ApplyT(func(v ZipDeflateReadSettings) interface{} { return v.PreserveZipFileNameAsFolder }).(pulumi.AnyOutput)
}

// The Compression setting type.
// Expected value is 'ZipDeflateReadSettings'.
func (o ZipDeflateReadSettingsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ZipDeflateReadSettings) string { return v.Type }).(pulumi.StringOutput)
}

type ZipDeflateReadSettingsPtrOutput struct{ *pulumi.OutputState }

func (ZipDeflateReadSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZipDeflateReadSettings)(nil)).Elem()
}

func (o ZipDeflateReadSettingsPtrOutput) ToZipDeflateReadSettingsPtrOutput() ZipDeflateReadSettingsPtrOutput {
	return o
}

func (o ZipDeflateReadSettingsPtrOutput) ToZipDeflateReadSettingsPtrOutputWithContext(ctx context.Context) ZipDeflateReadSettingsPtrOutput {
	return o
}

func (o ZipDeflateReadSettingsPtrOutput) Elem() ZipDeflateReadSettingsOutput {
	return o.ApplyT(func(v *ZipDeflateReadSettings) ZipDeflateReadSettings {
		if v != nil {
			return *v
		}
		var ret ZipDeflateReadSettings
		return ret
	}).(ZipDeflateReadSettingsOutput)
}

// Preserve the zip file name as folder path. Type: boolean (or Expression with resultType boolean).
func (o ZipDeflateReadSettingsPtrOutput) PreserveZipFileNameAsFolder() pulumi.AnyOutput {
	return o.ApplyT(func(v *ZipDeflateReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.PreserveZipFileNameAsFolder
	}).(pulumi.AnyOutput)
}

// The Compression setting type.
// Expected value is 'ZipDeflateReadSettings'.
func (o ZipDeflateReadSettingsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZipDeflateReadSettings) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The ZipDeflate compression read settings.
type ZipDeflateReadSettingsResponse struct {
	// Preserve the zip file name as folder path. Type: boolean (or Expression with resultType boolean).
	PreserveZipFileNameAsFolder interface{} `pulumi:"preserveZipFileNameAsFolder"`
	// The Compression setting type.
	// Expected value is 'ZipDeflateReadSettings'.
	Type string `pulumi:"type"`
}

// The ZipDeflate compression read settings.
type ZipDeflateReadSettingsResponseOutput struct{ *pulumi.OutputState }

func (ZipDeflateReadSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZipDeflateReadSettingsResponse)(nil)).Elem()
}

func (o ZipDeflateReadSettingsResponseOutput) ToZipDeflateReadSettingsResponseOutput() ZipDeflateReadSettingsResponseOutput {
	return o
}

func (o ZipDeflateReadSettingsResponseOutput) ToZipDeflateReadSettingsResponseOutputWithContext(ctx context.Context) ZipDeflateReadSettingsResponseOutput {
	return o
}

// Preserve the zip file name as folder path. Type: boolean (or Expression with resultType boolean).
func (o ZipDeflateReadSettingsResponseOutput) PreserveZipFileNameAsFolder() pulumi.AnyOutput {
	return o.ApplyT(func(v ZipDeflateReadSettingsResponse) interface{} { return v.PreserveZipFileNameAsFolder }).(pulumi.AnyOutput)
}

// The Compression setting type.
// Expected value is 'ZipDeflateReadSettings'.
func (o ZipDeflateReadSettingsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ZipDeflateReadSettingsResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ZipDeflateReadSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ZipDeflateReadSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZipDeflateReadSettingsResponse)(nil)).Elem()
}

func (o ZipDeflateReadSettingsResponsePtrOutput) ToZipDeflateReadSettingsResponsePtrOutput() ZipDeflateReadSettingsResponsePtrOutput {
	return o
}

func (o ZipDeflateReadSettingsResponsePtrOutput) ToZipDeflateReadSettingsResponsePtrOutputWithContext(ctx context.Context) ZipDeflateReadSettingsResponsePtrOutput {
	return o
}

func (o ZipDeflateReadSettingsResponsePtrOutput) Elem() ZipDeflateReadSettingsResponseOutput {
	return o.ApplyT(func(v *ZipDeflateReadSettingsResponse) ZipDeflateReadSettingsResponse {
		if v != nil {
			return *v
		}
		var ret ZipDeflateReadSettingsResponse
		return ret
	}).(ZipDeflateReadSettingsResponseOutput)
}

// Preserve the zip file name as folder path. Type: boolean (or Expression with resultType boolean).
func (o ZipDeflateReadSettingsResponsePtrOutput) PreserveZipFileNameAsFolder() pulumi.AnyOutput {
	return o.ApplyT(func(v *ZipDeflateReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.PreserveZipFileNameAsFolder
	}).(pulumi.AnyOutput)
}

// The Compression setting type.
// Expected value is 'ZipDeflateReadSettings'.
func (o ZipDeflateReadSettingsResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZipDeflateReadSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Zoho server linked service.
type ZohoLinkedService struct {
	// The access token for Zoho authentication.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Properties used to connect to Zoho. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The endpoint of the Zoho server. (i.e. crm.zoho.com/crm/private)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Zoho'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// ZohoLinkedServiceInput is an input type that accepts ZohoLinkedServiceArgs and ZohoLinkedServiceOutput values.
// You can construct a concrete instance of `ZohoLinkedServiceInput` via:
//
//	ZohoLinkedServiceArgs{...}
type ZohoLinkedServiceInput interface {
	pulumi.Input

	ToZohoLinkedServiceOutput() ZohoLinkedServiceOutput
	ToZohoLinkedServiceOutputWithContext(context.Context) ZohoLinkedServiceOutput
}

// Zoho server linked service.
type ZohoLinkedServiceArgs struct {
	// The access token for Zoho authentication.
	AccessToken pulumi.Input `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Properties used to connect to Zoho. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties pulumi.Input `pulumi:"connectionProperties"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// The endpoint of the Zoho server. (i.e. crm.zoho.com/crm/private)
	Endpoint pulumi.Input `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Zoho'.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
}

func (ZohoLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZohoLinkedService)(nil)).Elem()
}

func (i ZohoLinkedServiceArgs) ToZohoLinkedServiceOutput() ZohoLinkedServiceOutput {
	return i.ToZohoLinkedServiceOutputWithContext(context.Background())
}

func (i ZohoLinkedServiceArgs) ToZohoLinkedServiceOutputWithContext(ctx context.Context) ZohoLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZohoLinkedServiceOutput)
}

// Zoho server linked service.
type ZohoLinkedServiceOutput struct{ *pulumi.OutputState }

func (ZohoLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZohoLinkedService)(nil)).Elem()
}

func (o ZohoLinkedServiceOutput) ToZohoLinkedServiceOutput() ZohoLinkedServiceOutput {
	return o
}

func (o ZohoLinkedServiceOutput) ToZohoLinkedServiceOutputWithContext(ctx context.Context) ZohoLinkedServiceOutput {
	return o
}

// The access token for Zoho authentication.
func (o ZohoLinkedServiceOutput) AccessToken() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoLinkedService) interface{} { return v.AccessToken }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o ZohoLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ZohoLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o ZohoLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v ZohoLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Properties used to connect to Zoho. It is mutually exclusive with any other properties in the linked service. Type: object.
func (o ZohoLinkedServiceOutput) ConnectionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoLinkedService) interface{} { return v.ConnectionProperties }).(pulumi.AnyOutput)
}

// Linked service description.
func (o ZohoLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ZohoLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o ZohoLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ZohoLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The endpoint of the Zoho server. (i.e. crm.zoho.com/crm/private)
func (o ZohoLinkedServiceOutput) Endpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoLinkedService) interface{} { return v.Endpoint }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o ZohoLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v ZohoLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
// Expected value is 'Zoho'.
func (o ZohoLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ZohoLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o ZohoLinkedServiceOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoLinkedService) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o ZohoLinkedServiceOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoLinkedService) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o ZohoLinkedServiceOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoLinkedService) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// Zoho server linked service.
type ZohoLinkedServiceResponse struct {
	// The access token for Zoho authentication.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Properties used to connect to Zoho. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The endpoint of the Zoho server. (i.e. crm.zoho.com/crm/private)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Zoho'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Zoho server linked service.
type ZohoLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (ZohoLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZohoLinkedServiceResponse)(nil)).Elem()
}

func (o ZohoLinkedServiceResponseOutput) ToZohoLinkedServiceResponseOutput() ZohoLinkedServiceResponseOutput {
	return o
}

func (o ZohoLinkedServiceResponseOutput) ToZohoLinkedServiceResponseOutputWithContext(ctx context.Context) ZohoLinkedServiceResponseOutput {
	return o
}

// The access token for Zoho authentication.
func (o ZohoLinkedServiceResponseOutput) AccessToken() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoLinkedServiceResponse) interface{} { return v.AccessToken }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o ZohoLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ZohoLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o ZohoLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v ZohoLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Properties used to connect to Zoho. It is mutually exclusive with any other properties in the linked service. Type: object.
func (o ZohoLinkedServiceResponseOutput) ConnectionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoLinkedServiceResponse) interface{} { return v.ConnectionProperties }).(pulumi.AnyOutput)
}

// Linked service description.
func (o ZohoLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ZohoLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o ZohoLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ZohoLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The endpoint of the Zoho server. (i.e. crm.zoho.com/crm/private)
func (o ZohoLinkedServiceResponseOutput) Endpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoLinkedServiceResponse) interface{} { return v.Endpoint }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o ZohoLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ZohoLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
// Expected value is 'Zoho'.
func (o ZohoLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ZohoLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o ZohoLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoLinkedServiceResponse) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o ZohoLinkedServiceResponseOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoLinkedServiceResponse) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o ZohoLinkedServiceResponseOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoLinkedServiceResponse) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// Zoho server dataset.
type ZohoObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'ZohoObject'.
	Type string `pulumi:"type"`
}

// ZohoObjectDatasetInput is an input type that accepts ZohoObjectDatasetArgs and ZohoObjectDatasetOutput values.
// You can construct a concrete instance of `ZohoObjectDatasetInput` via:
//
//	ZohoObjectDatasetArgs{...}
type ZohoObjectDatasetInput interface {
	pulumi.Input

	ToZohoObjectDatasetOutput() ZohoObjectDatasetOutput
	ToZohoObjectDatasetOutputWithContext(context.Context) ZohoObjectDatasetOutput
}

// Zoho server dataset.
type ZohoObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'ZohoObject'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ZohoObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZohoObjectDataset)(nil)).Elem()
}

func (i ZohoObjectDatasetArgs) ToZohoObjectDatasetOutput() ZohoObjectDatasetOutput {
	return i.ToZohoObjectDatasetOutputWithContext(context.Background())
}

func (i ZohoObjectDatasetArgs) ToZohoObjectDatasetOutputWithContext(ctx context.Context) ZohoObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZohoObjectDatasetOutput)
}

// Zoho server dataset.
type ZohoObjectDatasetOutput struct{ *pulumi.OutputState }

func (ZohoObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZohoObjectDataset)(nil)).Elem()
}

func (o ZohoObjectDatasetOutput) ToZohoObjectDatasetOutput() ZohoObjectDatasetOutput {
	return o
}

func (o ZohoObjectDatasetOutput) ToZohoObjectDatasetOutputWithContext(ctx context.Context) ZohoObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ZohoObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ZohoObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o ZohoObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ZohoObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o ZohoObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v ZohoObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o ZohoObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v ZohoObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o ZohoObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v ZohoObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o ZohoObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ZohoObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o ZohoObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'ZohoObject'.
func (o ZohoObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ZohoObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Zoho server dataset.
type ZohoObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'ZohoObject'.
	Type string `pulumi:"type"`
}

// Zoho server dataset.
type ZohoObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (ZohoObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZohoObjectDatasetResponse)(nil)).Elem()
}

func (o ZohoObjectDatasetResponseOutput) ToZohoObjectDatasetResponseOutput() ZohoObjectDatasetResponseOutput {
	return o
}

func (o ZohoObjectDatasetResponseOutput) ToZohoObjectDatasetResponseOutputWithContext(ctx context.Context) ZohoObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ZohoObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ZohoObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o ZohoObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ZohoObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o ZohoObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v ZohoObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o ZohoObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v ZohoObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o ZohoObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ZohoObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o ZohoObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ZohoObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o ZohoObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'ZohoObject'.
func (o ZohoObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ZohoObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Zoho server source.
type ZohoSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ZohoSource'.
	Type string `pulumi:"type"`
}

// ZohoSourceInput is an input type that accepts ZohoSourceArgs and ZohoSourceOutput values.
// You can construct a concrete instance of `ZohoSourceInput` via:
//
//	ZohoSourceArgs{...}
type ZohoSourceInput interface {
	pulumi.Input

	ToZohoSourceOutput() ZohoSourceOutput
	ToZohoSourceOutputWithContext(context.Context) ZohoSourceOutput
}

// A copy activity Zoho server source.
type ZohoSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ZohoSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ZohoSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZohoSource)(nil)).Elem()
}

func (i ZohoSourceArgs) ToZohoSourceOutput() ZohoSourceOutput {
	return i.ToZohoSourceOutputWithContext(context.Background())
}

func (i ZohoSourceArgs) ToZohoSourceOutputWithContext(ctx context.Context) ZohoSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZohoSourceOutput)
}

// A copy activity Zoho server source.
type ZohoSourceOutput struct{ *pulumi.OutputState }

func (ZohoSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZohoSource)(nil)).Elem()
}

func (o ZohoSourceOutput) ToZohoSourceOutput() ZohoSourceOutput {
	return o
}

func (o ZohoSourceOutput) ToZohoSourceOutputWithContext(ctx context.Context) ZohoSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o ZohoSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o ZohoSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o ZohoSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o ZohoSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ZohoSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o ZohoSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ZohoSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'ZohoSource'.
func (o ZohoSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ZohoSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Zoho server source.
type ZohoSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ZohoSource'.
	Type string `pulumi:"type"`
}

// A copy activity Zoho server source.
type ZohoSourceResponseOutput struct{ *pulumi.OutputState }

func (ZohoSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZohoSourceResponse)(nil)).Elem()
}

func (o ZohoSourceResponseOutput) ToZohoSourceResponseOutput() ZohoSourceResponseOutput {
	return o
}

func (o ZohoSourceResponseOutput) ToZohoSourceResponseOutputWithContext(ctx context.Context) ZohoSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o ZohoSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o ZohoSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o ZohoSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o ZohoSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ZohoSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o ZohoSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ZohoSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v ZohoSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'ZohoSource'.
func (o ZohoSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ZohoSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ScheduleTriggerOutput{})
	pulumi.RegisterOutputType(ScheduleTriggerRecurrenceOutput{})
	pulumi.RegisterOutputType(ScheduleTriggerRecurrenceResponseOutput{})
	pulumi.RegisterOutputType(ScheduleTriggerResponseOutput{})
	pulumi.RegisterOutputType(ScriptActionOutput{})
	pulumi.RegisterOutputType(ScriptActionArrayOutput{})
	pulumi.RegisterOutputType(ScriptActionResponseOutput{})
	pulumi.RegisterOutputType(ScriptActionResponseArrayOutput{})
	pulumi.RegisterOutputType(ScriptActivityOutput{})
	pulumi.RegisterOutputType(ScriptActivityParameterOutput{})
	pulumi.RegisterOutputType(ScriptActivityParameterArrayOutput{})
	pulumi.RegisterOutputType(ScriptActivityParameterResponseOutput{})
	pulumi.RegisterOutputType(ScriptActivityParameterResponseArrayOutput{})
	pulumi.RegisterOutputType(ScriptActivityResponseOutput{})
	pulumi.RegisterOutputType(ScriptActivityScriptBlockOutput{})
	pulumi.RegisterOutputType(ScriptActivityScriptBlockArrayOutput{})
	pulumi.RegisterOutputType(ScriptActivityScriptBlockResponseOutput{})
	pulumi.RegisterOutputType(ScriptActivityScriptBlockResponseArrayOutput{})
	pulumi.RegisterOutputType(ScriptActivityTypePropertiesLogSettingsOutput{})
	pulumi.RegisterOutputType(ScriptActivityTypePropertiesLogSettingsPtrOutput{})
	pulumi.RegisterOutputType(ScriptActivityTypePropertiesResponseLogSettingsOutput{})
	pulumi.RegisterOutputType(ScriptActivityTypePropertiesResponseLogSettingsPtrOutput{})
	pulumi.RegisterOutputType(SecureInputOutputPolicyOutput{})
	pulumi.RegisterOutputType(SecureInputOutputPolicyPtrOutput{})
	pulumi.RegisterOutputType(SecureInputOutputPolicyResponseOutput{})
	pulumi.RegisterOutputType(SecureInputOutputPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(SecureStringOutput{})
	pulumi.RegisterOutputType(SecureStringPtrOutput{})
	pulumi.RegisterOutputType(SecureStringResponseOutput{})
	pulumi.RegisterOutputType(SecureStringResponsePtrOutput{})
	pulumi.RegisterOutputType(SelfDependencyTumblingWindowTriggerReferenceOutput{})
	pulumi.RegisterOutputType(SelfDependencyTumblingWindowTriggerReferenceResponseOutput{})
	pulumi.RegisterOutputType(SelfHostedIntegrationRuntimeOutput{})
	pulumi.RegisterOutputType(SelfHostedIntegrationRuntimeNodeResponseOutput{})
	pulumi.RegisterOutputType(SelfHostedIntegrationRuntimeNodeResponseArrayOutput{})
	pulumi.RegisterOutputType(SelfHostedIntegrationRuntimeResponseOutput{})
	pulumi.RegisterOutputType(SelfHostedIntegrationRuntimeStatusResponseOutput{})
	pulumi.RegisterOutputType(ServiceNowLinkedServiceOutput{})
	pulumi.RegisterOutputType(ServiceNowLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(ServiceNowObjectDatasetOutput{})
	pulumi.RegisterOutputType(ServiceNowObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(ServiceNowSourceOutput{})
	pulumi.RegisterOutputType(ServiceNowSourceResponseOutput{})
	pulumi.RegisterOutputType(ServiceNowV2LinkedServiceOutput{})
	pulumi.RegisterOutputType(ServiceNowV2LinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(ServiceNowV2ObjectDatasetOutput{})
	pulumi.RegisterOutputType(ServiceNowV2ObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(ServiceNowV2SourceOutput{})
	pulumi.RegisterOutputType(ServiceNowV2SourceResponseOutput{})
	pulumi.RegisterOutputType(SetVariableActivityOutput{})
	pulumi.RegisterOutputType(SetVariableActivityResponseOutput{})
	pulumi.RegisterOutputType(SftpLocationOutput{})
	pulumi.RegisterOutputType(SftpLocationResponseOutput{})
	pulumi.RegisterOutputType(SftpReadSettingsOutput{})
	pulumi.RegisterOutputType(SftpReadSettingsPtrOutput{})
	pulumi.RegisterOutputType(SftpReadSettingsResponseOutput{})
	pulumi.RegisterOutputType(SftpReadSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(SftpServerLinkedServiceOutput{})
	pulumi.RegisterOutputType(SftpServerLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SftpWriteSettingsOutput{})
	pulumi.RegisterOutputType(SftpWriteSettingsPtrOutput{})
	pulumi.RegisterOutputType(SftpWriteSettingsResponseOutput{})
	pulumi.RegisterOutputType(SftpWriteSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(SharePointOnlineListLinkedServiceOutput{})
	pulumi.RegisterOutputType(SharePointOnlineListLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SharePointOnlineListResourceDatasetOutput{})
	pulumi.RegisterOutputType(SharePointOnlineListResourceDatasetResponseOutput{})
	pulumi.RegisterOutputType(SharePointOnlineListSourceOutput{})
	pulumi.RegisterOutputType(SharePointOnlineListSourceResponseOutput{})
	pulumi.RegisterOutputType(ShopifyLinkedServiceOutput{})
	pulumi.RegisterOutputType(ShopifyLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(ShopifyObjectDatasetOutput{})
	pulumi.RegisterOutputType(ShopifyObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(ShopifySourceOutput{})
	pulumi.RegisterOutputType(ShopifySourceResponseOutput{})
	pulumi.RegisterOutputType(SkipErrorFileOutput{})
	pulumi.RegisterOutputType(SkipErrorFilePtrOutput{})
	pulumi.RegisterOutputType(SkipErrorFileResponseOutput{})
	pulumi.RegisterOutputType(SkipErrorFileResponsePtrOutput{})
	pulumi.RegisterOutputType(SmartsheetLinkedServiceOutput{})
	pulumi.RegisterOutputType(SmartsheetLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SnowflakeDatasetOutput{})
	pulumi.RegisterOutputType(SnowflakeDatasetResponseOutput{})
	pulumi.RegisterOutputType(SnowflakeExportCopyCommandOutput{})
	pulumi.RegisterOutputType(SnowflakeExportCopyCommandResponseOutput{})
	pulumi.RegisterOutputType(SnowflakeImportCopyCommandOutput{})
	pulumi.RegisterOutputType(SnowflakeImportCopyCommandPtrOutput{})
	pulumi.RegisterOutputType(SnowflakeImportCopyCommandResponseOutput{})
	pulumi.RegisterOutputType(SnowflakeImportCopyCommandResponsePtrOutput{})
	pulumi.RegisterOutputType(SnowflakeLinkedServiceOutput{})
	pulumi.RegisterOutputType(SnowflakeLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SnowflakeSinkOutput{})
	pulumi.RegisterOutputType(SnowflakeSinkResponseOutput{})
	pulumi.RegisterOutputType(SnowflakeSourceOutput{})
	pulumi.RegisterOutputType(SnowflakeSourceResponseOutput{})
	pulumi.RegisterOutputType(SnowflakeV2DatasetOutput{})
	pulumi.RegisterOutputType(SnowflakeV2DatasetResponseOutput{})
	pulumi.RegisterOutputType(SnowflakeV2LinkedServiceOutput{})
	pulumi.RegisterOutputType(SnowflakeV2LinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SnowflakeV2SinkOutput{})
	pulumi.RegisterOutputType(SnowflakeV2SinkResponseOutput{})
	pulumi.RegisterOutputType(SnowflakeV2SourceOutput{})
	pulumi.RegisterOutputType(SnowflakeV2SourceResponseOutput{})
	pulumi.RegisterOutputType(SparkConfigurationParametrizationReferenceOutput{})
	pulumi.RegisterOutputType(SparkConfigurationParametrizationReferencePtrOutput{})
	pulumi.RegisterOutputType(SparkConfigurationParametrizationReferenceResponseOutput{})
	pulumi.RegisterOutputType(SparkConfigurationParametrizationReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(SparkLinkedServiceOutput{})
	pulumi.RegisterOutputType(SparkLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SparkObjectDatasetOutput{})
	pulumi.RegisterOutputType(SparkObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(SparkSourceOutput{})
	pulumi.RegisterOutputType(SparkSourceResponseOutput{})
	pulumi.RegisterOutputType(SqlAlwaysEncryptedPropertiesOutput{})
	pulumi.RegisterOutputType(SqlAlwaysEncryptedPropertiesPtrOutput{})
	pulumi.RegisterOutputType(SqlAlwaysEncryptedPropertiesResponseOutput{})
	pulumi.RegisterOutputType(SqlAlwaysEncryptedPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(SqlDWSinkOutput{})
	pulumi.RegisterOutputType(SqlDWSinkResponseOutput{})
	pulumi.RegisterOutputType(SqlDWSourceOutput{})
	pulumi.RegisterOutputType(SqlDWSourceResponseOutput{})
	pulumi.RegisterOutputType(SqlDWUpsertSettingsOutput{})
	pulumi.RegisterOutputType(SqlDWUpsertSettingsPtrOutput{})
	pulumi.RegisterOutputType(SqlDWUpsertSettingsResponseOutput{})
	pulumi.RegisterOutputType(SqlDWUpsertSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(SqlMISinkOutput{})
	pulumi.RegisterOutputType(SqlMISinkResponseOutput{})
	pulumi.RegisterOutputType(SqlMISourceOutput{})
	pulumi.RegisterOutputType(SqlMISourceResponseOutput{})
	pulumi.RegisterOutputType(SqlPartitionSettingsOutput{})
	pulumi.RegisterOutputType(SqlPartitionSettingsPtrOutput{})
	pulumi.RegisterOutputType(SqlPartitionSettingsResponseOutput{})
	pulumi.RegisterOutputType(SqlPartitionSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(SqlServerLinkedServiceOutput{})
	pulumi.RegisterOutputType(SqlServerLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SqlServerSinkOutput{})
	pulumi.RegisterOutputType(SqlServerSinkResponseOutput{})
	pulumi.RegisterOutputType(SqlServerSourceOutput{})
	pulumi.RegisterOutputType(SqlServerSourceResponseOutput{})
	pulumi.RegisterOutputType(SqlServerStoredProcedureActivityOutput{})
	pulumi.RegisterOutputType(SqlServerStoredProcedureActivityResponseOutput{})
	pulumi.RegisterOutputType(SqlServerTableDatasetOutput{})
	pulumi.RegisterOutputType(SqlServerTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(SqlSinkOutput{})
	pulumi.RegisterOutputType(SqlSinkResponseOutput{})
	pulumi.RegisterOutputType(SqlSourceOutput{})
	pulumi.RegisterOutputType(SqlSourceResponseOutput{})
	pulumi.RegisterOutputType(SqlUpsertSettingsOutput{})
	pulumi.RegisterOutputType(SqlUpsertSettingsPtrOutput{})
	pulumi.RegisterOutputType(SqlUpsertSettingsResponseOutput{})
	pulumi.RegisterOutputType(SqlUpsertSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(SquareLinkedServiceOutput{})
	pulumi.RegisterOutputType(SquareLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SquareObjectDatasetOutput{})
	pulumi.RegisterOutputType(SquareObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(SquareSourceOutput{})
	pulumi.RegisterOutputType(SquareSourceResponseOutput{})
	pulumi.RegisterOutputType(SsisEnvironmentReferenceResponseOutput{})
	pulumi.RegisterOutputType(SsisEnvironmentReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(SsisEnvironmentResponseOutput{})
	pulumi.RegisterOutputType(SsisFolderResponseOutput{})
	pulumi.RegisterOutputType(SsisPackageResponseOutput{})
	pulumi.RegisterOutputType(SsisParameterResponseOutput{})
	pulumi.RegisterOutputType(SsisParameterResponseArrayOutput{})
	pulumi.RegisterOutputType(SsisProjectResponseOutput{})
	pulumi.RegisterOutputType(SsisVariableResponseOutput{})
	pulumi.RegisterOutputType(SsisVariableResponseArrayOutput{})
	pulumi.RegisterOutputType(StagingSettingsOutput{})
	pulumi.RegisterOutputType(StagingSettingsPtrOutput{})
	pulumi.RegisterOutputType(StagingSettingsResponseOutput{})
	pulumi.RegisterOutputType(StagingSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(SwitchActivityOutput{})
	pulumi.RegisterOutputType(SwitchActivityResponseOutput{})
	pulumi.RegisterOutputType(SwitchCaseOutput{})
	pulumi.RegisterOutputType(SwitchCaseArrayOutput{})
	pulumi.RegisterOutputType(SwitchCaseResponseOutput{})
	pulumi.RegisterOutputType(SwitchCaseResponseArrayOutput{})
	pulumi.RegisterOutputType(SybaseLinkedServiceOutput{})
	pulumi.RegisterOutputType(SybaseLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SybaseSourceOutput{})
	pulumi.RegisterOutputType(SybaseSourceResponseOutput{})
	pulumi.RegisterOutputType(SybaseTableDatasetOutput{})
	pulumi.RegisterOutputType(SybaseTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(SynapseNotebookActivityOutput{})
	pulumi.RegisterOutputType(SynapseNotebookActivityResponseOutput{})
	pulumi.RegisterOutputType(SynapseNotebookReferenceOutput{})
	pulumi.RegisterOutputType(SynapseNotebookReferenceResponseOutput{})
	pulumi.RegisterOutputType(SynapseSparkJobDefinitionActivityOutput{})
	pulumi.RegisterOutputType(SynapseSparkJobDefinitionActivityResponseOutput{})
	pulumi.RegisterOutputType(SynapseSparkJobReferenceOutput{})
	pulumi.RegisterOutputType(SynapseSparkJobReferenceResponseOutput{})
	pulumi.RegisterOutputType(TabularSourceOutput{})
	pulumi.RegisterOutputType(TabularSourceResponseOutput{})
	pulumi.RegisterOutputType(TarGZipReadSettingsOutput{})
	pulumi.RegisterOutputType(TarGZipReadSettingsPtrOutput{})
	pulumi.RegisterOutputType(TarGZipReadSettingsResponseOutput{})
	pulumi.RegisterOutputType(TarGZipReadSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(TarReadSettingsOutput{})
	pulumi.RegisterOutputType(TarReadSettingsPtrOutput{})
	pulumi.RegisterOutputType(TarReadSettingsResponseOutput{})
	pulumi.RegisterOutputType(TarReadSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(TeamDeskLinkedServiceOutput{})
	pulumi.RegisterOutputType(TeamDeskLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(TeradataLinkedServiceOutput{})
	pulumi.RegisterOutputType(TeradataLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(TeradataPartitionSettingsOutput{})
	pulumi.RegisterOutputType(TeradataPartitionSettingsPtrOutput{})
	pulumi.RegisterOutputType(TeradataPartitionSettingsResponseOutput{})
	pulumi.RegisterOutputType(TeradataPartitionSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(TeradataSourceOutput{})
	pulumi.RegisterOutputType(TeradataSourceResponseOutput{})
	pulumi.RegisterOutputType(TeradataTableDatasetOutput{})
	pulumi.RegisterOutputType(TeradataTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(TextFormatOutput{})
	pulumi.RegisterOutputType(TextFormatPtrOutput{})
	pulumi.RegisterOutputType(TextFormatResponseOutput{})
	pulumi.RegisterOutputType(TextFormatResponsePtrOutput{})
	pulumi.RegisterOutputType(TransformationOutput{})
	pulumi.RegisterOutputType(TransformationArrayOutput{})
	pulumi.RegisterOutputType(TransformationResponseOutput{})
	pulumi.RegisterOutputType(TransformationResponseArrayOutput{})
	pulumi.RegisterOutputType(TriggerDependencyReferenceOutput{})
	pulumi.RegisterOutputType(TriggerDependencyReferenceResponseOutput{})
	pulumi.RegisterOutputType(TriggerPipelineReferenceOutput{})
	pulumi.RegisterOutputType(TriggerPipelineReferenceArrayOutput{})
	pulumi.RegisterOutputType(TriggerPipelineReferenceResponseOutput{})
	pulumi.RegisterOutputType(TriggerPipelineReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(TriggerReferenceOutput{})
	pulumi.RegisterOutputType(TriggerReferenceResponseOutput{})
	pulumi.RegisterOutputType(TumblingWindowTriggerOutput{})
	pulumi.RegisterOutputType(TumblingWindowTriggerDependencyReferenceOutput{})
	pulumi.RegisterOutputType(TumblingWindowTriggerDependencyReferenceResponseOutput{})
	pulumi.RegisterOutputType(TumblingWindowTriggerResponseOutput{})
	pulumi.RegisterOutputType(TwilioLinkedServiceOutput{})
	pulumi.RegisterOutputType(TwilioLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(UntilActivityOutput{})
	pulumi.RegisterOutputType(UntilActivityResponseOutput{})
	pulumi.RegisterOutputType(UserAccessPolicyResponseOutput{})
	pulumi.RegisterOutputType(UserAccessPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(UserPropertyOutput{})
	pulumi.RegisterOutputType(UserPropertyArrayOutput{})
	pulumi.RegisterOutputType(UserPropertyResponseOutput{})
	pulumi.RegisterOutputType(UserPropertyResponseArrayOutput{})
	pulumi.RegisterOutputType(ValidationActivityOutput{})
	pulumi.RegisterOutputType(ValidationActivityResponseOutput{})
	pulumi.RegisterOutputType(VariableSpecificationOutput{})
	pulumi.RegisterOutputType(VariableSpecificationMapOutput{})
	pulumi.RegisterOutputType(VariableSpecificationResponseOutput{})
	pulumi.RegisterOutputType(VariableSpecificationResponseMapOutput{})
	pulumi.RegisterOutputType(VerticaLinkedServiceOutput{})
	pulumi.RegisterOutputType(VerticaLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(VerticaSourceOutput{})
	pulumi.RegisterOutputType(VerticaSourceResponseOutput{})
	pulumi.RegisterOutputType(VerticaTableDatasetOutput{})
	pulumi.RegisterOutputType(VerticaTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(WaitActivityOutput{})
	pulumi.RegisterOutputType(WaitActivityResponseOutput{})
	pulumi.RegisterOutputType(WarehouseLinkedServiceOutput{})
	pulumi.RegisterOutputType(WarehouseLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(WarehouseSinkOutput{})
	pulumi.RegisterOutputType(WarehouseSinkResponseOutput{})
	pulumi.RegisterOutputType(WarehouseSourceOutput{})
	pulumi.RegisterOutputType(WarehouseSourceResponseOutput{})
	pulumi.RegisterOutputType(WarehouseTableDatasetOutput{})
	pulumi.RegisterOutputType(WarehouseTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(WebActivityOutput{})
	pulumi.RegisterOutputType(WebActivityAuthenticationOutput{})
	pulumi.RegisterOutputType(WebActivityAuthenticationPtrOutput{})
	pulumi.RegisterOutputType(WebActivityAuthenticationResponseOutput{})
	pulumi.RegisterOutputType(WebActivityAuthenticationResponsePtrOutput{})
	pulumi.RegisterOutputType(WebActivityResponseOutput{})
	pulumi.RegisterOutputType(WebAnonymousAuthenticationOutput{})
	pulumi.RegisterOutputType(WebAnonymousAuthenticationResponseOutput{})
	pulumi.RegisterOutputType(WebBasicAuthenticationOutput{})
	pulumi.RegisterOutputType(WebBasicAuthenticationResponseOutput{})
	pulumi.RegisterOutputType(WebClientCertificateAuthenticationOutput{})
	pulumi.RegisterOutputType(WebClientCertificateAuthenticationResponseOutput{})
	pulumi.RegisterOutputType(WebHookActivityOutput{})
	pulumi.RegisterOutputType(WebHookActivityResponseOutput{})
	pulumi.RegisterOutputType(WebLinkedServiceOutput{})
	pulumi.RegisterOutputType(WebLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(WebSourceOutput{})
	pulumi.RegisterOutputType(WebSourceResponseOutput{})
	pulumi.RegisterOutputType(WebTableDatasetOutput{})
	pulumi.RegisterOutputType(WebTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(WranglingDataFlowOutput{})
	pulumi.RegisterOutputType(WranglingDataFlowResponseOutput{})
	pulumi.RegisterOutputType(XeroLinkedServiceOutput{})
	pulumi.RegisterOutputType(XeroLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(XeroObjectDatasetOutput{})
	pulumi.RegisterOutputType(XeroObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(XeroSourceOutput{})
	pulumi.RegisterOutputType(XeroSourceResponseOutput{})
	pulumi.RegisterOutputType(XmlDatasetOutput{})
	pulumi.RegisterOutputType(XmlDatasetResponseOutput{})
	pulumi.RegisterOutputType(XmlReadSettingsOutput{})
	pulumi.RegisterOutputType(XmlReadSettingsPtrOutput{})
	pulumi.RegisterOutputType(XmlReadSettingsResponseOutput{})
	pulumi.RegisterOutputType(XmlReadSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(XmlSourceOutput{})
	pulumi.RegisterOutputType(XmlSourceResponseOutput{})
	pulumi.RegisterOutputType(ZendeskLinkedServiceOutput{})
	pulumi.RegisterOutputType(ZendeskLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(ZipDeflateReadSettingsOutput{})
	pulumi.RegisterOutputType(ZipDeflateReadSettingsPtrOutput{})
	pulumi.RegisterOutputType(ZipDeflateReadSettingsResponseOutput{})
	pulumi.RegisterOutputType(ZipDeflateReadSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ZohoLinkedServiceOutput{})
	pulumi.RegisterOutputType(ZohoLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(ZohoObjectDatasetOutput{})
	pulumi.RegisterOutputType(ZohoObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(ZohoSourceOutput{})
	pulumi.RegisterOutputType(ZohoSourceResponseOutput{})
}
