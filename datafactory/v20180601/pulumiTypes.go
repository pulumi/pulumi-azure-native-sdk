// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20180601

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Activity dependency information.
type ActivityDependency struct {
	// Activity name.
	Activity string `pulumi:"activity"`
	// Match-Condition for the dependency.
	DependencyConditions []string `pulumi:"dependencyConditions"`
}

// ActivityDependencyInput is an input type that accepts ActivityDependencyArgs and ActivityDependencyOutput values.
// You can construct a concrete instance of `ActivityDependencyInput` via:
//
//	ActivityDependencyArgs{...}
type ActivityDependencyInput interface {
	pulumi.Input

	ToActivityDependencyOutput() ActivityDependencyOutput
	ToActivityDependencyOutputWithContext(context.Context) ActivityDependencyOutput
}

// Activity dependency information.
type ActivityDependencyArgs struct {
	// Activity name.
	Activity pulumi.StringInput `pulumi:"activity"`
	// Match-Condition for the dependency.
	DependencyConditions pulumi.StringArrayInput `pulumi:"dependencyConditions"`
}

func (ActivityDependencyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityDependency)(nil)).Elem()
}

func (i ActivityDependencyArgs) ToActivityDependencyOutput() ActivityDependencyOutput {
	return i.ToActivityDependencyOutputWithContext(context.Background())
}

func (i ActivityDependencyArgs) ToActivityDependencyOutputWithContext(ctx context.Context) ActivityDependencyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityDependencyOutput)
}

// ActivityDependencyArrayInput is an input type that accepts ActivityDependencyArray and ActivityDependencyArrayOutput values.
// You can construct a concrete instance of `ActivityDependencyArrayInput` via:
//
//	ActivityDependencyArray{ ActivityDependencyArgs{...} }
type ActivityDependencyArrayInput interface {
	pulumi.Input

	ToActivityDependencyArrayOutput() ActivityDependencyArrayOutput
	ToActivityDependencyArrayOutputWithContext(context.Context) ActivityDependencyArrayOutput
}

type ActivityDependencyArray []ActivityDependencyInput

func (ActivityDependencyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActivityDependency)(nil)).Elem()
}

func (i ActivityDependencyArray) ToActivityDependencyArrayOutput() ActivityDependencyArrayOutput {
	return i.ToActivityDependencyArrayOutputWithContext(context.Background())
}

func (i ActivityDependencyArray) ToActivityDependencyArrayOutputWithContext(ctx context.Context) ActivityDependencyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityDependencyArrayOutput)
}

// Activity dependency information.
type ActivityDependencyOutput struct{ *pulumi.OutputState }

func (ActivityDependencyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityDependency)(nil)).Elem()
}

func (o ActivityDependencyOutput) ToActivityDependencyOutput() ActivityDependencyOutput {
	return o
}

func (o ActivityDependencyOutput) ToActivityDependencyOutputWithContext(ctx context.Context) ActivityDependencyOutput {
	return o
}

// Activity name.
func (o ActivityDependencyOutput) Activity() pulumi.StringOutput {
	return o.ApplyT(func(v ActivityDependency) string { return v.Activity }).(pulumi.StringOutput)
}

// Match-Condition for the dependency.
func (o ActivityDependencyOutput) DependencyConditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActivityDependency) []string { return v.DependencyConditions }).(pulumi.StringArrayOutput)
}

type ActivityDependencyArrayOutput struct{ *pulumi.OutputState }

func (ActivityDependencyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActivityDependency)(nil)).Elem()
}

func (o ActivityDependencyArrayOutput) ToActivityDependencyArrayOutput() ActivityDependencyArrayOutput {
	return o
}

func (o ActivityDependencyArrayOutput) ToActivityDependencyArrayOutputWithContext(ctx context.Context) ActivityDependencyArrayOutput {
	return o
}

func (o ActivityDependencyArrayOutput) Index(i pulumi.IntInput) ActivityDependencyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActivityDependency {
		return vs[0].([]ActivityDependency)[vs[1].(int)]
	}).(ActivityDependencyOutput)
}

// Activity dependency information.
type ActivityDependencyResponse struct {
	// Activity name.
	Activity string `pulumi:"activity"`
	// Match-Condition for the dependency.
	DependencyConditions []string `pulumi:"dependencyConditions"`
}

// Activity dependency information.
type ActivityDependencyResponseOutput struct{ *pulumi.OutputState }

func (ActivityDependencyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityDependencyResponse)(nil)).Elem()
}

func (o ActivityDependencyResponseOutput) ToActivityDependencyResponseOutput() ActivityDependencyResponseOutput {
	return o
}

func (o ActivityDependencyResponseOutput) ToActivityDependencyResponseOutputWithContext(ctx context.Context) ActivityDependencyResponseOutput {
	return o
}

// Activity name.
func (o ActivityDependencyResponseOutput) Activity() pulumi.StringOutput {
	return o.ApplyT(func(v ActivityDependencyResponse) string { return v.Activity }).(pulumi.StringOutput)
}

// Match-Condition for the dependency.
func (o ActivityDependencyResponseOutput) DependencyConditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActivityDependencyResponse) []string { return v.DependencyConditions }).(pulumi.StringArrayOutput)
}

type ActivityDependencyResponseArrayOutput struct{ *pulumi.OutputState }

func (ActivityDependencyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActivityDependencyResponse)(nil)).Elem()
}

func (o ActivityDependencyResponseArrayOutput) ToActivityDependencyResponseArrayOutput() ActivityDependencyResponseArrayOutput {
	return o
}

func (o ActivityDependencyResponseArrayOutput) ToActivityDependencyResponseArrayOutputWithContext(ctx context.Context) ActivityDependencyResponseArrayOutput {
	return o
}

func (o ActivityDependencyResponseArrayOutput) Index(i pulumi.IntInput) ActivityDependencyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActivityDependencyResponse {
		return vs[0].([]ActivityDependencyResponse)[vs[1].(int)]
	}).(ActivityDependencyResponseOutput)
}

// Execution policy for an activity.
type ActivityPolicy struct {
	// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
	Retry interface{} `pulumi:"retry"`
	// Interval between each retry attempt (in seconds). The default is 30 sec.
	RetryIntervalInSeconds *int `pulumi:"retryIntervalInSeconds"`
	// When set to true, Input from activity is considered as secure and will not be logged to monitoring.
	SecureInput *bool `pulumi:"secureInput"`
	// When set to true, Output from activity is considered as secure and will not be logged to monitoring.
	SecureOutput *bool `pulumi:"secureOutput"`
	// Specifies the timeout for the activity to run. The default timeout is 7 days. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Timeout interface{} `pulumi:"timeout"`
}

// ActivityPolicyInput is an input type that accepts ActivityPolicyArgs and ActivityPolicyOutput values.
// You can construct a concrete instance of `ActivityPolicyInput` via:
//
//	ActivityPolicyArgs{...}
type ActivityPolicyInput interface {
	pulumi.Input

	ToActivityPolicyOutput() ActivityPolicyOutput
	ToActivityPolicyOutputWithContext(context.Context) ActivityPolicyOutput
}

// Execution policy for an activity.
type ActivityPolicyArgs struct {
	// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
	Retry pulumi.Input `pulumi:"retry"`
	// Interval between each retry attempt (in seconds). The default is 30 sec.
	RetryIntervalInSeconds pulumi.IntPtrInput `pulumi:"retryIntervalInSeconds"`
	// When set to true, Input from activity is considered as secure and will not be logged to monitoring.
	SecureInput pulumi.BoolPtrInput `pulumi:"secureInput"`
	// When set to true, Output from activity is considered as secure and will not be logged to monitoring.
	SecureOutput pulumi.BoolPtrInput `pulumi:"secureOutput"`
	// Specifies the timeout for the activity to run. The default timeout is 7 days. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Timeout pulumi.Input `pulumi:"timeout"`
}

func (ActivityPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityPolicy)(nil)).Elem()
}

func (i ActivityPolicyArgs) ToActivityPolicyOutput() ActivityPolicyOutput {
	return i.ToActivityPolicyOutputWithContext(context.Background())
}

func (i ActivityPolicyArgs) ToActivityPolicyOutputWithContext(ctx context.Context) ActivityPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityPolicyOutput)
}

func (i ActivityPolicyArgs) ToActivityPolicyPtrOutput() ActivityPolicyPtrOutput {
	return i.ToActivityPolicyPtrOutputWithContext(context.Background())
}

func (i ActivityPolicyArgs) ToActivityPolicyPtrOutputWithContext(ctx context.Context) ActivityPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityPolicyOutput).ToActivityPolicyPtrOutputWithContext(ctx)
}

// ActivityPolicyPtrInput is an input type that accepts ActivityPolicyArgs, ActivityPolicyPtr and ActivityPolicyPtrOutput values.
// You can construct a concrete instance of `ActivityPolicyPtrInput` via:
//
//	        ActivityPolicyArgs{...}
//
//	or:
//
//	        nil
type ActivityPolicyPtrInput interface {
	pulumi.Input

	ToActivityPolicyPtrOutput() ActivityPolicyPtrOutput
	ToActivityPolicyPtrOutputWithContext(context.Context) ActivityPolicyPtrOutput
}

type activityPolicyPtrType ActivityPolicyArgs

func ActivityPolicyPtr(v *ActivityPolicyArgs) ActivityPolicyPtrInput {
	return (*activityPolicyPtrType)(v)
}

func (*activityPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActivityPolicy)(nil)).Elem()
}

func (i *activityPolicyPtrType) ToActivityPolicyPtrOutput() ActivityPolicyPtrOutput {
	return i.ToActivityPolicyPtrOutputWithContext(context.Background())
}

func (i *activityPolicyPtrType) ToActivityPolicyPtrOutputWithContext(ctx context.Context) ActivityPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityPolicyPtrOutput)
}

// Execution policy for an activity.
type ActivityPolicyOutput struct{ *pulumi.OutputState }

func (ActivityPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityPolicy)(nil)).Elem()
}

func (o ActivityPolicyOutput) ToActivityPolicyOutput() ActivityPolicyOutput {
	return o
}

func (o ActivityPolicyOutput) ToActivityPolicyOutputWithContext(ctx context.Context) ActivityPolicyOutput {
	return o
}

func (o ActivityPolicyOutput) ToActivityPolicyPtrOutput() ActivityPolicyPtrOutput {
	return o.ToActivityPolicyPtrOutputWithContext(context.Background())
}

func (o ActivityPolicyOutput) ToActivityPolicyPtrOutputWithContext(ctx context.Context) ActivityPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ActivityPolicy) *ActivityPolicy {
		return &v
	}).(ActivityPolicyPtrOutput)
}

// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
func (o ActivityPolicyOutput) Retry() pulumi.AnyOutput {
	return o.ApplyT(func(v ActivityPolicy) interface{} { return v.Retry }).(pulumi.AnyOutput)
}

// Interval between each retry attempt (in seconds). The default is 30 sec.
func (o ActivityPolicyOutput) RetryIntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ActivityPolicy) *int { return v.RetryIntervalInSeconds }).(pulumi.IntPtrOutput)
}

// When set to true, Input from activity is considered as secure and will not be logged to monitoring.
func (o ActivityPolicyOutput) SecureInput() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ActivityPolicy) *bool { return v.SecureInput }).(pulumi.BoolPtrOutput)
}

// When set to true, Output from activity is considered as secure and will not be logged to monitoring.
func (o ActivityPolicyOutput) SecureOutput() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ActivityPolicy) *bool { return v.SecureOutput }).(pulumi.BoolPtrOutput)
}

// Specifies the timeout for the activity to run. The default timeout is 7 days. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ActivityPolicyOutput) Timeout() pulumi.AnyOutput {
	return o.ApplyT(func(v ActivityPolicy) interface{} { return v.Timeout }).(pulumi.AnyOutput)
}

type ActivityPolicyPtrOutput struct{ *pulumi.OutputState }

func (ActivityPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActivityPolicy)(nil)).Elem()
}

func (o ActivityPolicyPtrOutput) ToActivityPolicyPtrOutput() ActivityPolicyPtrOutput {
	return o
}

func (o ActivityPolicyPtrOutput) ToActivityPolicyPtrOutputWithContext(ctx context.Context) ActivityPolicyPtrOutput {
	return o
}

func (o ActivityPolicyPtrOutput) Elem() ActivityPolicyOutput {
	return o.ApplyT(func(v *ActivityPolicy) ActivityPolicy {
		if v != nil {
			return *v
		}
		var ret ActivityPolicy
		return ret
	}).(ActivityPolicyOutput)
}

// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
func (o ActivityPolicyPtrOutput) Retry() pulumi.AnyOutput {
	return o.ApplyT(func(v *ActivityPolicy) interface{} {
		if v == nil {
			return nil
		}
		return v.Retry
	}).(pulumi.AnyOutput)
}

// Interval between each retry attempt (in seconds). The default is 30 sec.
func (o ActivityPolicyPtrOutput) RetryIntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ActivityPolicy) *int {
		if v == nil {
			return nil
		}
		return v.RetryIntervalInSeconds
	}).(pulumi.IntPtrOutput)
}

// When set to true, Input from activity is considered as secure and will not be logged to monitoring.
func (o ActivityPolicyPtrOutput) SecureInput() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ActivityPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.SecureInput
	}).(pulumi.BoolPtrOutput)
}

// When set to true, Output from activity is considered as secure and will not be logged to monitoring.
func (o ActivityPolicyPtrOutput) SecureOutput() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ActivityPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.SecureOutput
	}).(pulumi.BoolPtrOutput)
}

// Specifies the timeout for the activity to run. The default timeout is 7 days. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ActivityPolicyPtrOutput) Timeout() pulumi.AnyOutput {
	return o.ApplyT(func(v *ActivityPolicy) interface{} {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.AnyOutput)
}

// Execution policy for an activity.
type ActivityPolicyResponse struct {
	// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
	Retry interface{} `pulumi:"retry"`
	// Interval between each retry attempt (in seconds). The default is 30 sec.
	RetryIntervalInSeconds *int `pulumi:"retryIntervalInSeconds"`
	// When set to true, Input from activity is considered as secure and will not be logged to monitoring.
	SecureInput *bool `pulumi:"secureInput"`
	// When set to true, Output from activity is considered as secure and will not be logged to monitoring.
	SecureOutput *bool `pulumi:"secureOutput"`
	// Specifies the timeout for the activity to run. The default timeout is 7 days. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Timeout interface{} `pulumi:"timeout"`
}

// Execution policy for an activity.
type ActivityPolicyResponseOutput struct{ *pulumi.OutputState }

func (ActivityPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityPolicyResponse)(nil)).Elem()
}

func (o ActivityPolicyResponseOutput) ToActivityPolicyResponseOutput() ActivityPolicyResponseOutput {
	return o
}

func (o ActivityPolicyResponseOutput) ToActivityPolicyResponseOutputWithContext(ctx context.Context) ActivityPolicyResponseOutput {
	return o
}

// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
func (o ActivityPolicyResponseOutput) Retry() pulumi.AnyOutput {
	return o.ApplyT(func(v ActivityPolicyResponse) interface{} { return v.Retry }).(pulumi.AnyOutput)
}

// Interval between each retry attempt (in seconds). The default is 30 sec.
func (o ActivityPolicyResponseOutput) RetryIntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ActivityPolicyResponse) *int { return v.RetryIntervalInSeconds }).(pulumi.IntPtrOutput)
}

// When set to true, Input from activity is considered as secure and will not be logged to monitoring.
func (o ActivityPolicyResponseOutput) SecureInput() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ActivityPolicyResponse) *bool { return v.SecureInput }).(pulumi.BoolPtrOutput)
}

// When set to true, Output from activity is considered as secure and will not be logged to monitoring.
func (o ActivityPolicyResponseOutput) SecureOutput() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ActivityPolicyResponse) *bool { return v.SecureOutput }).(pulumi.BoolPtrOutput)
}

// Specifies the timeout for the activity to run. The default timeout is 7 days. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ActivityPolicyResponseOutput) Timeout() pulumi.AnyOutput {
	return o.ApplyT(func(v ActivityPolicyResponse) interface{} { return v.Timeout }).(pulumi.AnyOutput)
}

type ActivityPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (ActivityPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActivityPolicyResponse)(nil)).Elem()
}

func (o ActivityPolicyResponsePtrOutput) ToActivityPolicyResponsePtrOutput() ActivityPolicyResponsePtrOutput {
	return o
}

func (o ActivityPolicyResponsePtrOutput) ToActivityPolicyResponsePtrOutputWithContext(ctx context.Context) ActivityPolicyResponsePtrOutput {
	return o
}

func (o ActivityPolicyResponsePtrOutput) Elem() ActivityPolicyResponseOutput {
	return o.ApplyT(func(v *ActivityPolicyResponse) ActivityPolicyResponse {
		if v != nil {
			return *v
		}
		var ret ActivityPolicyResponse
		return ret
	}).(ActivityPolicyResponseOutput)
}

// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
func (o ActivityPolicyResponsePtrOutput) Retry() pulumi.AnyOutput {
	return o.ApplyT(func(v *ActivityPolicyResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Retry
	}).(pulumi.AnyOutput)
}

// Interval between each retry attempt (in seconds). The default is 30 sec.
func (o ActivityPolicyResponsePtrOutput) RetryIntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ActivityPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.RetryIntervalInSeconds
	}).(pulumi.IntPtrOutput)
}

// When set to true, Input from activity is considered as secure and will not be logged to monitoring.
func (o ActivityPolicyResponsePtrOutput) SecureInput() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ActivityPolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return v.SecureInput
	}).(pulumi.BoolPtrOutput)
}

// When set to true, Output from activity is considered as secure and will not be logged to monitoring.
func (o ActivityPolicyResponsePtrOutput) SecureOutput() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ActivityPolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return v.SecureOutput
	}).(pulumi.BoolPtrOutput)
}

// Specifies the timeout for the activity to run. The default timeout is 7 days. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ActivityPolicyResponsePtrOutput) Timeout() pulumi.AnyOutput {
	return o.ApplyT(func(v *ActivityPolicyResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.AnyOutput)
}

// Amazon Marketplace Web Service linked service.
type AmazonMWSLinkedService struct {
	// The access key id used to access data.
	AccessKeyId interface{} `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The endpoint of the Amazon MWS server, (i.e. mws.amazonservices.com)
	Endpoint interface{} `pulumi:"endpoint"`
	// The Amazon Marketplace ID you want to retrieve data from. To retrieve data from multiple Marketplace IDs, separate them with a comma (,). (i.e. A2EUQ1WTGCTBG2)
	MarketplaceID interface{} `pulumi:"marketplaceID"`
	// The Amazon MWS authentication token.
	MwsAuthToken interface{} `pulumi:"mwsAuthToken"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The secret key used to access data.
	SecretKey interface{} `pulumi:"secretKey"`
	// The Amazon seller ID.
	SellerID interface{} `pulumi:"sellerID"`
	// Type of linked service.
	// Expected value is 'AmazonMWS'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// AmazonMWSLinkedServiceInput is an input type that accepts AmazonMWSLinkedServiceArgs and AmazonMWSLinkedServiceOutput values.
// You can construct a concrete instance of `AmazonMWSLinkedServiceInput` via:
//
//	AmazonMWSLinkedServiceArgs{...}
type AmazonMWSLinkedServiceInput interface {
	pulumi.Input

	ToAmazonMWSLinkedServiceOutput() AmazonMWSLinkedServiceOutput
	ToAmazonMWSLinkedServiceOutputWithContext(context.Context) AmazonMWSLinkedServiceOutput
}

// Amazon Marketplace Web Service linked service.
type AmazonMWSLinkedServiceArgs struct {
	// The access key id used to access data.
	AccessKeyId pulumi.Input `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// The endpoint of the Amazon MWS server, (i.e. mws.amazonservices.com)
	Endpoint pulumi.Input `pulumi:"endpoint"`
	// The Amazon Marketplace ID you want to retrieve data from. To retrieve data from multiple Marketplace IDs, separate them with a comma (,). (i.e. A2EUQ1WTGCTBG2)
	MarketplaceID pulumi.Input `pulumi:"marketplaceID"`
	// The Amazon MWS authentication token.
	MwsAuthToken pulumi.Input `pulumi:"mwsAuthToken"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The secret key used to access data.
	SecretKey pulumi.Input `pulumi:"secretKey"`
	// The Amazon seller ID.
	SellerID pulumi.Input `pulumi:"sellerID"`
	// Type of linked service.
	// Expected value is 'AmazonMWS'.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
}

func (AmazonMWSLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonMWSLinkedService)(nil)).Elem()
}

func (i AmazonMWSLinkedServiceArgs) ToAmazonMWSLinkedServiceOutput() AmazonMWSLinkedServiceOutput {
	return i.ToAmazonMWSLinkedServiceOutputWithContext(context.Background())
}

func (i AmazonMWSLinkedServiceArgs) ToAmazonMWSLinkedServiceOutputWithContext(ctx context.Context) AmazonMWSLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonMWSLinkedServiceOutput)
}

// Amazon Marketplace Web Service linked service.
type AmazonMWSLinkedServiceOutput struct{ *pulumi.OutputState }

func (AmazonMWSLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonMWSLinkedService)(nil)).Elem()
}

func (o AmazonMWSLinkedServiceOutput) ToAmazonMWSLinkedServiceOutput() AmazonMWSLinkedServiceOutput {
	return o
}

func (o AmazonMWSLinkedServiceOutput) ToAmazonMWSLinkedServiceOutputWithContext(ctx context.Context) AmazonMWSLinkedServiceOutput {
	return o
}

// The access key id used to access data.
func (o AmazonMWSLinkedServiceOutput) AccessKeyId() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSLinkedService) interface{} { return v.AccessKeyId }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o AmazonMWSLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AmazonMWSLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AmazonMWSLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AmazonMWSLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o AmazonMWSLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonMWSLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AmazonMWSLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonMWSLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The endpoint of the Amazon MWS server, (i.e. mws.amazonservices.com)
func (o AmazonMWSLinkedServiceOutput) Endpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSLinkedService) interface{} { return v.Endpoint }).(pulumi.AnyOutput)
}

// The Amazon Marketplace ID you want to retrieve data from. To retrieve data from multiple Marketplace IDs, separate them with a comma (,). (i.e. A2EUQ1WTGCTBG2)
func (o AmazonMWSLinkedServiceOutput) MarketplaceID() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSLinkedService) interface{} { return v.MarketplaceID }).(pulumi.AnyOutput)
}

// The Amazon MWS authentication token.
func (o AmazonMWSLinkedServiceOutput) MwsAuthToken() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSLinkedService) interface{} { return v.MwsAuthToken }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AmazonMWSLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AmazonMWSLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The secret key used to access data.
func (o AmazonMWSLinkedServiceOutput) SecretKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSLinkedService) interface{} { return v.SecretKey }).(pulumi.AnyOutput)
}

// The Amazon seller ID.
func (o AmazonMWSLinkedServiceOutput) SellerID() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSLinkedService) interface{} { return v.SellerID }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AmazonMWS'.
func (o AmazonMWSLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonMWSLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o AmazonMWSLinkedServiceOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSLinkedService) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o AmazonMWSLinkedServiceOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSLinkedService) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o AmazonMWSLinkedServiceOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSLinkedService) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// Amazon Marketplace Web Service linked service.
type AmazonMWSLinkedServiceResponse struct {
	// The access key id used to access data.
	AccessKeyId interface{} `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The endpoint of the Amazon MWS server, (i.e. mws.amazonservices.com)
	Endpoint interface{} `pulumi:"endpoint"`
	// The Amazon Marketplace ID you want to retrieve data from. To retrieve data from multiple Marketplace IDs, separate them with a comma (,). (i.e. A2EUQ1WTGCTBG2)
	MarketplaceID interface{} `pulumi:"marketplaceID"`
	// The Amazon MWS authentication token.
	MwsAuthToken interface{} `pulumi:"mwsAuthToken"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The secret key used to access data.
	SecretKey interface{} `pulumi:"secretKey"`
	// The Amazon seller ID.
	SellerID interface{} `pulumi:"sellerID"`
	// Type of linked service.
	// Expected value is 'AmazonMWS'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
}

// Amazon Marketplace Web Service linked service.
type AmazonMWSLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AmazonMWSLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonMWSLinkedServiceResponse)(nil)).Elem()
}

func (o AmazonMWSLinkedServiceResponseOutput) ToAmazonMWSLinkedServiceResponseOutput() AmazonMWSLinkedServiceResponseOutput {
	return o
}

func (o AmazonMWSLinkedServiceResponseOutput) ToAmazonMWSLinkedServiceResponseOutputWithContext(ctx context.Context) AmazonMWSLinkedServiceResponseOutput {
	return o
}

// The access key id used to access data.
func (o AmazonMWSLinkedServiceResponseOutput) AccessKeyId() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) interface{} { return v.AccessKeyId }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o AmazonMWSLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AmazonMWSLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o AmazonMWSLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AmazonMWSLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The endpoint of the Amazon MWS server, (i.e. mws.amazonservices.com)
func (o AmazonMWSLinkedServiceResponseOutput) Endpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) interface{} { return v.Endpoint }).(pulumi.AnyOutput)
}

// The Amazon Marketplace ID you want to retrieve data from. To retrieve data from multiple Marketplace IDs, separate them with a comma (,). (i.e. A2EUQ1WTGCTBG2)
func (o AmazonMWSLinkedServiceResponseOutput) MarketplaceID() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) interface{} { return v.MarketplaceID }).(pulumi.AnyOutput)
}

// The Amazon MWS authentication token.
func (o AmazonMWSLinkedServiceResponseOutput) MwsAuthToken() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) interface{} { return v.MwsAuthToken }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AmazonMWSLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The secret key used to access data.
func (o AmazonMWSLinkedServiceResponseOutput) SecretKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) interface{} { return v.SecretKey }).(pulumi.AnyOutput)
}

// The Amazon seller ID.
func (o AmazonMWSLinkedServiceResponseOutput) SellerID() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) interface{} { return v.SellerID }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AmazonMWS'.
func (o AmazonMWSLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o AmazonMWSLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o AmazonMWSLinkedServiceResponseOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o AmazonMWSLinkedServiceResponseOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSLinkedServiceResponse) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// Amazon Marketplace Web Service dataset.
type AmazonMWSObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AmazonMWSObject'.
	Type string `pulumi:"type"`
}

// AmazonMWSObjectDatasetInput is an input type that accepts AmazonMWSObjectDatasetArgs and AmazonMWSObjectDatasetOutput values.
// You can construct a concrete instance of `AmazonMWSObjectDatasetInput` via:
//
//	AmazonMWSObjectDatasetArgs{...}
type AmazonMWSObjectDatasetInput interface {
	pulumi.Input

	ToAmazonMWSObjectDatasetOutput() AmazonMWSObjectDatasetOutput
	ToAmazonMWSObjectDatasetOutputWithContext(context.Context) AmazonMWSObjectDatasetOutput
}

// Amazon Marketplace Web Service dataset.
type AmazonMWSObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AmazonMWSObject'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AmazonMWSObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonMWSObjectDataset)(nil)).Elem()
}

func (i AmazonMWSObjectDatasetArgs) ToAmazonMWSObjectDatasetOutput() AmazonMWSObjectDatasetOutput {
	return i.ToAmazonMWSObjectDatasetOutputWithContext(context.Background())
}

func (i AmazonMWSObjectDatasetArgs) ToAmazonMWSObjectDatasetOutputWithContext(ctx context.Context) AmazonMWSObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonMWSObjectDatasetOutput)
}

// Amazon Marketplace Web Service dataset.
type AmazonMWSObjectDatasetOutput struct{ *pulumi.OutputState }

func (AmazonMWSObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonMWSObjectDataset)(nil)).Elem()
}

func (o AmazonMWSObjectDatasetOutput) ToAmazonMWSObjectDatasetOutput() AmazonMWSObjectDatasetOutput {
	return o
}

func (o AmazonMWSObjectDatasetOutput) ToAmazonMWSObjectDatasetOutputWithContext(ctx context.Context) AmazonMWSObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AmazonMWSObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AmazonMWSObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AmazonMWSObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonMWSObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AmazonMWSObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v AmazonMWSObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o AmazonMWSObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v AmazonMWSObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o AmazonMWSObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AmazonMWSObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AmazonMWSObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AmazonMWSObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o AmazonMWSObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'AmazonMWSObject'.
func (o AmazonMWSObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonMWSObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Amazon Marketplace Web Service dataset.
type AmazonMWSObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AmazonMWSObject'.
	Type string `pulumi:"type"`
}

// Amazon Marketplace Web Service dataset.
type AmazonMWSObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (AmazonMWSObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonMWSObjectDatasetResponse)(nil)).Elem()
}

func (o AmazonMWSObjectDatasetResponseOutput) ToAmazonMWSObjectDatasetResponseOutput() AmazonMWSObjectDatasetResponseOutput {
	return o
}

func (o AmazonMWSObjectDatasetResponseOutput) ToAmazonMWSObjectDatasetResponseOutputWithContext(ctx context.Context) AmazonMWSObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AmazonMWSObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AmazonMWSObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AmazonMWSObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonMWSObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AmazonMWSObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v AmazonMWSObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o AmazonMWSObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AmazonMWSObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o AmazonMWSObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AmazonMWSObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AmazonMWSObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AmazonMWSObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o AmazonMWSObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'AmazonMWSObject'.
func (o AmazonMWSObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonMWSObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Amazon Marketplace Web Service source.
type AmazonMWSSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AmazonMWSSource'.
	Type string `pulumi:"type"`
}

// AmazonMWSSourceInput is an input type that accepts AmazonMWSSourceArgs and AmazonMWSSourceOutput values.
// You can construct a concrete instance of `AmazonMWSSourceInput` via:
//
//	AmazonMWSSourceArgs{...}
type AmazonMWSSourceInput interface {
	pulumi.Input

	ToAmazonMWSSourceOutput() AmazonMWSSourceOutput
	ToAmazonMWSSourceOutputWithContext(context.Context) AmazonMWSSourceOutput
}

// A copy activity Amazon Marketplace Web Service source.
type AmazonMWSSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AmazonMWSSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AmazonMWSSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonMWSSource)(nil)).Elem()
}

func (i AmazonMWSSourceArgs) ToAmazonMWSSourceOutput() AmazonMWSSourceOutput {
	return i.ToAmazonMWSSourceOutputWithContext(context.Background())
}

func (i AmazonMWSSourceArgs) ToAmazonMWSSourceOutputWithContext(ctx context.Context) AmazonMWSSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonMWSSourceOutput)
}

// A copy activity Amazon Marketplace Web Service source.
type AmazonMWSSourceOutput struct{ *pulumi.OutputState }

func (AmazonMWSSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonMWSSource)(nil)).Elem()
}

func (o AmazonMWSSourceOutput) ToAmazonMWSSourceOutput() AmazonMWSSourceOutput {
	return o
}

func (o AmazonMWSSourceOutput) ToAmazonMWSSourceOutputWithContext(ctx context.Context) AmazonMWSSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o AmazonMWSSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AmazonMWSSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AmazonMWSSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o AmazonMWSSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AmazonMWSSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o AmazonMWSSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AmazonMWSSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'AmazonMWSSource'.
func (o AmazonMWSSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonMWSSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Amazon Marketplace Web Service source.
type AmazonMWSSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AmazonMWSSource'.
	Type string `pulumi:"type"`
}

// A copy activity Amazon Marketplace Web Service source.
type AmazonMWSSourceResponseOutput struct{ *pulumi.OutputState }

func (AmazonMWSSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonMWSSourceResponse)(nil)).Elem()
}

func (o AmazonMWSSourceResponseOutput) ToAmazonMWSSourceResponseOutput() AmazonMWSSourceResponseOutput {
	return o
}

func (o AmazonMWSSourceResponseOutput) ToAmazonMWSSourceResponseOutputWithContext(ctx context.Context) AmazonMWSSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o AmazonMWSSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AmazonMWSSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AmazonMWSSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o AmazonMWSSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AmazonMWSSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o AmazonMWSSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AmazonMWSSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonMWSSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'AmazonMWSSource'.
func (o AmazonMWSSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonMWSSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// AmazonRdsForOracle database.
type AmazonRdsForOracleLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'AmazonRdsForOracle'.
	Type string `pulumi:"type"`
}

// AmazonRdsForOracleLinkedServiceInput is an input type that accepts AmazonRdsForOracleLinkedServiceArgs and AmazonRdsForOracleLinkedServiceOutput values.
// You can construct a concrete instance of `AmazonRdsForOracleLinkedServiceInput` via:
//
//	AmazonRdsForOracleLinkedServiceArgs{...}
type AmazonRdsForOracleLinkedServiceInput interface {
	pulumi.Input

	ToAmazonRdsForOracleLinkedServiceOutput() AmazonRdsForOracleLinkedServiceOutput
	ToAmazonRdsForOracleLinkedServiceOutputWithContext(context.Context) AmazonRdsForOracleLinkedServiceOutput
}

// AmazonRdsForOracle database.
type AmazonRdsForOracleLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'AmazonRdsForOracle'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AmazonRdsForOracleLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonRdsForOracleLinkedService)(nil)).Elem()
}

func (i AmazonRdsForOracleLinkedServiceArgs) ToAmazonRdsForOracleLinkedServiceOutput() AmazonRdsForOracleLinkedServiceOutput {
	return i.ToAmazonRdsForOracleLinkedServiceOutputWithContext(context.Background())
}

func (i AmazonRdsForOracleLinkedServiceArgs) ToAmazonRdsForOracleLinkedServiceOutputWithContext(ctx context.Context) AmazonRdsForOracleLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonRdsForOracleLinkedServiceOutput)
}

// AmazonRdsForOracle database.
type AmazonRdsForOracleLinkedServiceOutput struct{ *pulumi.OutputState }

func (AmazonRdsForOracleLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonRdsForOracleLinkedService)(nil)).Elem()
}

func (o AmazonRdsForOracleLinkedServiceOutput) ToAmazonRdsForOracleLinkedServiceOutput() AmazonRdsForOracleLinkedServiceOutput {
	return o
}

func (o AmazonRdsForOracleLinkedServiceOutput) ToAmazonRdsForOracleLinkedServiceOutputWithContext(ctx context.Context) AmazonRdsForOracleLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AmazonRdsForOracleLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AmazonRdsForOracleLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AmazonRdsForOracleLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AmazonRdsForOracleLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AmazonRdsForOracleLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForOracleLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AmazonRdsForOracleLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonRdsForOracleLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AmazonRdsForOracleLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonRdsForOracleLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AmazonRdsForOracleLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AmazonRdsForOracleLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o AmazonRdsForOracleLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForOracleLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AmazonRdsForOracle'.
func (o AmazonRdsForOracleLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonRdsForOracleLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// AmazonRdsForOracle database.
type AmazonRdsForOracleLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'AmazonRdsForOracle'.
	Type string `pulumi:"type"`
}

// AmazonRdsForOracle database.
type AmazonRdsForOracleLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AmazonRdsForOracleLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonRdsForOracleLinkedServiceResponse)(nil)).Elem()
}

func (o AmazonRdsForOracleLinkedServiceResponseOutput) ToAmazonRdsForOracleLinkedServiceResponseOutput() AmazonRdsForOracleLinkedServiceResponseOutput {
	return o
}

func (o AmazonRdsForOracleLinkedServiceResponseOutput) ToAmazonRdsForOracleLinkedServiceResponseOutputWithContext(ctx context.Context) AmazonRdsForOracleLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AmazonRdsForOracleLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AmazonRdsForOracleLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AmazonRdsForOracleLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AmazonRdsForOracleLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AmazonRdsForOracleLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForOracleLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AmazonRdsForOracleLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonRdsForOracleLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AmazonRdsForOracleLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonRdsForOracleLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AmazonRdsForOracleLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AmazonRdsForOracleLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o AmazonRdsForOracleLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForOracleLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AmazonRdsForOracle'.
func (o AmazonRdsForOracleLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonRdsForOracleLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The settings that will be leveraged for AmazonRdsForOracle source partitioning.
type AmazonRdsForOraclePartitionSettings struct {
	// The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionColumnName interface{} `pulumi:"partitionColumnName"`
	// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionLowerBound interface{} `pulumi:"partitionLowerBound"`
	// Names of the physical partitions of AmazonRdsForOracle table.
	PartitionNames []interface{} `pulumi:"partitionNames"`
	// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionUpperBound interface{} `pulumi:"partitionUpperBound"`
}

// AmazonRdsForOraclePartitionSettingsInput is an input type that accepts AmazonRdsForOraclePartitionSettingsArgs and AmazonRdsForOraclePartitionSettingsOutput values.
// You can construct a concrete instance of `AmazonRdsForOraclePartitionSettingsInput` via:
//
//	AmazonRdsForOraclePartitionSettingsArgs{...}
type AmazonRdsForOraclePartitionSettingsInput interface {
	pulumi.Input

	ToAmazonRdsForOraclePartitionSettingsOutput() AmazonRdsForOraclePartitionSettingsOutput
	ToAmazonRdsForOraclePartitionSettingsOutputWithContext(context.Context) AmazonRdsForOraclePartitionSettingsOutput
}

// The settings that will be leveraged for AmazonRdsForOracle source partitioning.
type AmazonRdsForOraclePartitionSettingsArgs struct {
	// The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionColumnName pulumi.Input `pulumi:"partitionColumnName"`
	// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionLowerBound pulumi.Input `pulumi:"partitionLowerBound"`
	// Names of the physical partitions of AmazonRdsForOracle table.
	PartitionNames pulumi.ArrayInput `pulumi:"partitionNames"`
	// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionUpperBound pulumi.Input `pulumi:"partitionUpperBound"`
}

func (AmazonRdsForOraclePartitionSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonRdsForOraclePartitionSettings)(nil)).Elem()
}

func (i AmazonRdsForOraclePartitionSettingsArgs) ToAmazonRdsForOraclePartitionSettingsOutput() AmazonRdsForOraclePartitionSettingsOutput {
	return i.ToAmazonRdsForOraclePartitionSettingsOutputWithContext(context.Background())
}

func (i AmazonRdsForOraclePartitionSettingsArgs) ToAmazonRdsForOraclePartitionSettingsOutputWithContext(ctx context.Context) AmazonRdsForOraclePartitionSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonRdsForOraclePartitionSettingsOutput)
}

func (i AmazonRdsForOraclePartitionSettingsArgs) ToAmazonRdsForOraclePartitionSettingsPtrOutput() AmazonRdsForOraclePartitionSettingsPtrOutput {
	return i.ToAmazonRdsForOraclePartitionSettingsPtrOutputWithContext(context.Background())
}

func (i AmazonRdsForOraclePartitionSettingsArgs) ToAmazonRdsForOraclePartitionSettingsPtrOutputWithContext(ctx context.Context) AmazonRdsForOraclePartitionSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonRdsForOraclePartitionSettingsOutput).ToAmazonRdsForOraclePartitionSettingsPtrOutputWithContext(ctx)
}

// AmazonRdsForOraclePartitionSettingsPtrInput is an input type that accepts AmazonRdsForOraclePartitionSettingsArgs, AmazonRdsForOraclePartitionSettingsPtr and AmazonRdsForOraclePartitionSettingsPtrOutput values.
// You can construct a concrete instance of `AmazonRdsForOraclePartitionSettingsPtrInput` via:
//
//	        AmazonRdsForOraclePartitionSettingsArgs{...}
//
//	or:
//
//	        nil
type AmazonRdsForOraclePartitionSettingsPtrInput interface {
	pulumi.Input

	ToAmazonRdsForOraclePartitionSettingsPtrOutput() AmazonRdsForOraclePartitionSettingsPtrOutput
	ToAmazonRdsForOraclePartitionSettingsPtrOutputWithContext(context.Context) AmazonRdsForOraclePartitionSettingsPtrOutput
}

type amazonRdsForOraclePartitionSettingsPtrType AmazonRdsForOraclePartitionSettingsArgs

func AmazonRdsForOraclePartitionSettingsPtr(v *AmazonRdsForOraclePartitionSettingsArgs) AmazonRdsForOraclePartitionSettingsPtrInput {
	return (*amazonRdsForOraclePartitionSettingsPtrType)(v)
}

func (*amazonRdsForOraclePartitionSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AmazonRdsForOraclePartitionSettings)(nil)).Elem()
}

func (i *amazonRdsForOraclePartitionSettingsPtrType) ToAmazonRdsForOraclePartitionSettingsPtrOutput() AmazonRdsForOraclePartitionSettingsPtrOutput {
	return i.ToAmazonRdsForOraclePartitionSettingsPtrOutputWithContext(context.Background())
}

func (i *amazonRdsForOraclePartitionSettingsPtrType) ToAmazonRdsForOraclePartitionSettingsPtrOutputWithContext(ctx context.Context) AmazonRdsForOraclePartitionSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonRdsForOraclePartitionSettingsPtrOutput)
}

// The settings that will be leveraged for AmazonRdsForOracle source partitioning.
type AmazonRdsForOraclePartitionSettingsOutput struct{ *pulumi.OutputState }

func (AmazonRdsForOraclePartitionSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonRdsForOraclePartitionSettings)(nil)).Elem()
}

func (o AmazonRdsForOraclePartitionSettingsOutput) ToAmazonRdsForOraclePartitionSettingsOutput() AmazonRdsForOraclePartitionSettingsOutput {
	return o
}

func (o AmazonRdsForOraclePartitionSettingsOutput) ToAmazonRdsForOraclePartitionSettingsOutputWithContext(ctx context.Context) AmazonRdsForOraclePartitionSettingsOutput {
	return o
}

func (o AmazonRdsForOraclePartitionSettingsOutput) ToAmazonRdsForOraclePartitionSettingsPtrOutput() AmazonRdsForOraclePartitionSettingsPtrOutput {
	return o.ToAmazonRdsForOraclePartitionSettingsPtrOutputWithContext(context.Background())
}

func (o AmazonRdsForOraclePartitionSettingsOutput) ToAmazonRdsForOraclePartitionSettingsPtrOutputWithContext(ctx context.Context) AmazonRdsForOraclePartitionSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AmazonRdsForOraclePartitionSettings) *AmazonRdsForOraclePartitionSettings {
		return &v
	}).(AmazonRdsForOraclePartitionSettingsPtrOutput)
}

// The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o AmazonRdsForOraclePartitionSettingsOutput) PartitionColumnName() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForOraclePartitionSettings) interface{} { return v.PartitionColumnName }).(pulumi.AnyOutput)
}

// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o AmazonRdsForOraclePartitionSettingsOutput) PartitionLowerBound() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForOraclePartitionSettings) interface{} { return v.PartitionLowerBound }).(pulumi.AnyOutput)
}

// Names of the physical partitions of AmazonRdsForOracle table.
func (o AmazonRdsForOraclePartitionSettingsOutput) PartitionNames() pulumi.ArrayOutput {
	return o.ApplyT(func(v AmazonRdsForOraclePartitionSettings) []interface{} { return v.PartitionNames }).(pulumi.ArrayOutput)
}

// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o AmazonRdsForOraclePartitionSettingsOutput) PartitionUpperBound() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForOraclePartitionSettings) interface{} { return v.PartitionUpperBound }).(pulumi.AnyOutput)
}

type AmazonRdsForOraclePartitionSettingsPtrOutput struct{ *pulumi.OutputState }

func (AmazonRdsForOraclePartitionSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AmazonRdsForOraclePartitionSettings)(nil)).Elem()
}

func (o AmazonRdsForOraclePartitionSettingsPtrOutput) ToAmazonRdsForOraclePartitionSettingsPtrOutput() AmazonRdsForOraclePartitionSettingsPtrOutput {
	return o
}

func (o AmazonRdsForOraclePartitionSettingsPtrOutput) ToAmazonRdsForOraclePartitionSettingsPtrOutputWithContext(ctx context.Context) AmazonRdsForOraclePartitionSettingsPtrOutput {
	return o
}

func (o AmazonRdsForOraclePartitionSettingsPtrOutput) Elem() AmazonRdsForOraclePartitionSettingsOutput {
	return o.ApplyT(func(v *AmazonRdsForOraclePartitionSettings) AmazonRdsForOraclePartitionSettings {
		if v != nil {
			return *v
		}
		var ret AmazonRdsForOraclePartitionSettings
		return ret
	}).(AmazonRdsForOraclePartitionSettingsOutput)
}

// The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o AmazonRdsForOraclePartitionSettingsPtrOutput) PartitionColumnName() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonRdsForOraclePartitionSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionColumnName
	}).(pulumi.AnyOutput)
}

// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o AmazonRdsForOraclePartitionSettingsPtrOutput) PartitionLowerBound() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonRdsForOraclePartitionSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionLowerBound
	}).(pulumi.AnyOutput)
}

// Names of the physical partitions of AmazonRdsForOracle table.
func (o AmazonRdsForOraclePartitionSettingsPtrOutput) PartitionNames() pulumi.ArrayOutput {
	return o.ApplyT(func(v *AmazonRdsForOraclePartitionSettings) []interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionNames
	}).(pulumi.ArrayOutput)
}

// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o AmazonRdsForOraclePartitionSettingsPtrOutput) PartitionUpperBound() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonRdsForOraclePartitionSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionUpperBound
	}).(pulumi.AnyOutput)
}

// The settings that will be leveraged for AmazonRdsForOracle source partitioning.
type AmazonRdsForOraclePartitionSettingsResponse struct {
	// The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionColumnName interface{} `pulumi:"partitionColumnName"`
	// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionLowerBound interface{} `pulumi:"partitionLowerBound"`
	// Names of the physical partitions of AmazonRdsForOracle table.
	PartitionNames []interface{} `pulumi:"partitionNames"`
	// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
	PartitionUpperBound interface{} `pulumi:"partitionUpperBound"`
}

// The settings that will be leveraged for AmazonRdsForOracle source partitioning.
type AmazonRdsForOraclePartitionSettingsResponseOutput struct{ *pulumi.OutputState }

func (AmazonRdsForOraclePartitionSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonRdsForOraclePartitionSettingsResponse)(nil)).Elem()
}

func (o AmazonRdsForOraclePartitionSettingsResponseOutput) ToAmazonRdsForOraclePartitionSettingsResponseOutput() AmazonRdsForOraclePartitionSettingsResponseOutput {
	return o
}

func (o AmazonRdsForOraclePartitionSettingsResponseOutput) ToAmazonRdsForOraclePartitionSettingsResponseOutputWithContext(ctx context.Context) AmazonRdsForOraclePartitionSettingsResponseOutput {
	return o
}

// The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o AmazonRdsForOraclePartitionSettingsResponseOutput) PartitionColumnName() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForOraclePartitionSettingsResponse) interface{} { return v.PartitionColumnName }).(pulumi.AnyOutput)
}

// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o AmazonRdsForOraclePartitionSettingsResponseOutput) PartitionLowerBound() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForOraclePartitionSettingsResponse) interface{} { return v.PartitionLowerBound }).(pulumi.AnyOutput)
}

// Names of the physical partitions of AmazonRdsForOracle table.
func (o AmazonRdsForOraclePartitionSettingsResponseOutput) PartitionNames() pulumi.ArrayOutput {
	return o.ApplyT(func(v AmazonRdsForOraclePartitionSettingsResponse) []interface{} { return v.PartitionNames }).(pulumi.ArrayOutput)
}

// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o AmazonRdsForOraclePartitionSettingsResponseOutput) PartitionUpperBound() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForOraclePartitionSettingsResponse) interface{} { return v.PartitionUpperBound }).(pulumi.AnyOutput)
}

type AmazonRdsForOraclePartitionSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (AmazonRdsForOraclePartitionSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AmazonRdsForOraclePartitionSettingsResponse)(nil)).Elem()
}

func (o AmazonRdsForOraclePartitionSettingsResponsePtrOutput) ToAmazonRdsForOraclePartitionSettingsResponsePtrOutput() AmazonRdsForOraclePartitionSettingsResponsePtrOutput {
	return o
}

func (o AmazonRdsForOraclePartitionSettingsResponsePtrOutput) ToAmazonRdsForOraclePartitionSettingsResponsePtrOutputWithContext(ctx context.Context) AmazonRdsForOraclePartitionSettingsResponsePtrOutput {
	return o
}

func (o AmazonRdsForOraclePartitionSettingsResponsePtrOutput) Elem() AmazonRdsForOraclePartitionSettingsResponseOutput {
	return o.ApplyT(func(v *AmazonRdsForOraclePartitionSettingsResponse) AmazonRdsForOraclePartitionSettingsResponse {
		if v != nil {
			return *v
		}
		var ret AmazonRdsForOraclePartitionSettingsResponse
		return ret
	}).(AmazonRdsForOraclePartitionSettingsResponseOutput)
}

// The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o AmazonRdsForOraclePartitionSettingsResponsePtrOutput) PartitionColumnName() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonRdsForOraclePartitionSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionColumnName
	}).(pulumi.AnyOutput)
}

// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o AmazonRdsForOraclePartitionSettingsResponsePtrOutput) PartitionLowerBound() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonRdsForOraclePartitionSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionLowerBound
	}).(pulumi.AnyOutput)
}

// Names of the physical partitions of AmazonRdsForOracle table.
func (o AmazonRdsForOraclePartitionSettingsResponsePtrOutput) PartitionNames() pulumi.ArrayOutput {
	return o.ApplyT(func(v *AmazonRdsForOraclePartitionSettingsResponse) []interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionNames
	}).(pulumi.ArrayOutput)
}

// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string).
func (o AmazonRdsForOraclePartitionSettingsResponsePtrOutput) PartitionUpperBound() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonRdsForOraclePartitionSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionUpperBound
	}).(pulumi.AnyOutput)
}

// A copy activity AmazonRdsForOracle source.
type AmazonRdsForOracleSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// AmazonRdsForOracle reader query. Type: string (or Expression with resultType string).
	OracleReaderQuery interface{} `pulumi:"oracleReaderQuery"`
	// The partition mechanism that will be used for AmazonRdsForOracle read in parallel. Type: string (or Expression with resultType string).
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for AmazonRdsForOracle source partitioning.
	PartitionSettings *AmazonRdsForOraclePartitionSettings `pulumi:"partitionSettings"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AmazonRdsForOracleSource'.
	Type string `pulumi:"type"`
}

// AmazonRdsForOracleSourceInput is an input type that accepts AmazonRdsForOracleSourceArgs and AmazonRdsForOracleSourceOutput values.
// You can construct a concrete instance of `AmazonRdsForOracleSourceInput` via:
//
//	AmazonRdsForOracleSourceArgs{...}
type AmazonRdsForOracleSourceInput interface {
	pulumi.Input

	ToAmazonRdsForOracleSourceOutput() AmazonRdsForOracleSourceOutput
	ToAmazonRdsForOracleSourceOutputWithContext(context.Context) AmazonRdsForOracleSourceOutput
}

// A copy activity AmazonRdsForOracle source.
type AmazonRdsForOracleSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// AmazonRdsForOracle reader query. Type: string (or Expression with resultType string).
	OracleReaderQuery pulumi.Input `pulumi:"oracleReaderQuery"`
	// The partition mechanism that will be used for AmazonRdsForOracle read in parallel. Type: string (or Expression with resultType string).
	PartitionOption pulumi.Input `pulumi:"partitionOption"`
	// The settings that will be leveraged for AmazonRdsForOracle source partitioning.
	PartitionSettings AmazonRdsForOraclePartitionSettingsPtrInput `pulumi:"partitionSettings"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AmazonRdsForOracleSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AmazonRdsForOracleSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonRdsForOracleSource)(nil)).Elem()
}

func (i AmazonRdsForOracleSourceArgs) ToAmazonRdsForOracleSourceOutput() AmazonRdsForOracleSourceOutput {
	return i.ToAmazonRdsForOracleSourceOutputWithContext(context.Background())
}

func (i AmazonRdsForOracleSourceArgs) ToAmazonRdsForOracleSourceOutputWithContext(ctx context.Context) AmazonRdsForOracleSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonRdsForOracleSourceOutput)
}

// A copy activity AmazonRdsForOracle source.
type AmazonRdsForOracleSourceOutput struct{ *pulumi.OutputState }

func (AmazonRdsForOracleSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonRdsForOracleSource)(nil)).Elem()
}

func (o AmazonRdsForOracleSourceOutput) ToAmazonRdsForOracleSourceOutput() AmazonRdsForOracleSourceOutput {
	return o
}

func (o AmazonRdsForOracleSourceOutput) ToAmazonRdsForOracleSourceOutputWithContext(ctx context.Context) AmazonRdsForOracleSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o AmazonRdsForOracleSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForOracleSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AmazonRdsForOracleSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForOracleSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AmazonRdsForOracleSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForOracleSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// AmazonRdsForOracle reader query. Type: string (or Expression with resultType string).
func (o AmazonRdsForOracleSourceOutput) OracleReaderQuery() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForOracleSource) interface{} { return v.OracleReaderQuery }).(pulumi.AnyOutput)
}

// The partition mechanism that will be used for AmazonRdsForOracle read in parallel. Type: string (or Expression with resultType string).
func (o AmazonRdsForOracleSourceOutput) PartitionOption() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForOracleSource) interface{} { return v.PartitionOption }).(pulumi.AnyOutput)
}

// The settings that will be leveraged for AmazonRdsForOracle source partitioning.
func (o AmazonRdsForOracleSourceOutput) PartitionSettings() AmazonRdsForOraclePartitionSettingsPtrOutput {
	return o.ApplyT(func(v AmazonRdsForOracleSource) *AmazonRdsForOraclePartitionSettings { return v.PartitionSettings }).(AmazonRdsForOraclePartitionSettingsPtrOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AmazonRdsForOracleSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForOracleSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o AmazonRdsForOracleSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForOracleSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AmazonRdsForOracleSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForOracleSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'AmazonRdsForOracleSource'.
func (o AmazonRdsForOracleSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonRdsForOracleSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity AmazonRdsForOracle source.
type AmazonRdsForOracleSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// AmazonRdsForOracle reader query. Type: string (or Expression with resultType string).
	OracleReaderQuery interface{} `pulumi:"oracleReaderQuery"`
	// The partition mechanism that will be used for AmazonRdsForOracle read in parallel. Type: string (or Expression with resultType string).
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for AmazonRdsForOracle source partitioning.
	PartitionSettings *AmazonRdsForOraclePartitionSettingsResponse `pulumi:"partitionSettings"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AmazonRdsForOracleSource'.
	Type string `pulumi:"type"`
}

// A copy activity AmazonRdsForOracle source.
type AmazonRdsForOracleSourceResponseOutput struct{ *pulumi.OutputState }

func (AmazonRdsForOracleSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonRdsForOracleSourceResponse)(nil)).Elem()
}

func (o AmazonRdsForOracleSourceResponseOutput) ToAmazonRdsForOracleSourceResponseOutput() AmazonRdsForOracleSourceResponseOutput {
	return o
}

func (o AmazonRdsForOracleSourceResponseOutput) ToAmazonRdsForOracleSourceResponseOutputWithContext(ctx context.Context) AmazonRdsForOracleSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o AmazonRdsForOracleSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForOracleSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AmazonRdsForOracleSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForOracleSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AmazonRdsForOracleSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForOracleSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// AmazonRdsForOracle reader query. Type: string (or Expression with resultType string).
func (o AmazonRdsForOracleSourceResponseOutput) OracleReaderQuery() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForOracleSourceResponse) interface{} { return v.OracleReaderQuery }).(pulumi.AnyOutput)
}

// The partition mechanism that will be used for AmazonRdsForOracle read in parallel. Type: string (or Expression with resultType string).
func (o AmazonRdsForOracleSourceResponseOutput) PartitionOption() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForOracleSourceResponse) interface{} { return v.PartitionOption }).(pulumi.AnyOutput)
}

// The settings that will be leveraged for AmazonRdsForOracle source partitioning.
func (o AmazonRdsForOracleSourceResponseOutput) PartitionSettings() AmazonRdsForOraclePartitionSettingsResponsePtrOutput {
	return o.ApplyT(func(v AmazonRdsForOracleSourceResponse) *AmazonRdsForOraclePartitionSettingsResponse {
		return v.PartitionSettings
	}).(AmazonRdsForOraclePartitionSettingsResponsePtrOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AmazonRdsForOracleSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForOracleSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o AmazonRdsForOracleSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForOracleSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AmazonRdsForOracleSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForOracleSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'AmazonRdsForOracleSource'.
func (o AmazonRdsForOracleSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonRdsForOracleSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The AmazonRdsForOracle database dataset.
type AmazonRdsForOracleTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the AmazonRdsForOracle database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'AmazonRdsForOracleTable'.
	Type string `pulumi:"type"`
}

// AmazonRdsForOracleTableDatasetInput is an input type that accepts AmazonRdsForOracleTableDatasetArgs and AmazonRdsForOracleTableDatasetOutput values.
// You can construct a concrete instance of `AmazonRdsForOracleTableDatasetInput` via:
//
//	AmazonRdsForOracleTableDatasetArgs{...}
type AmazonRdsForOracleTableDatasetInput interface {
	pulumi.Input

	ToAmazonRdsForOracleTableDatasetOutput() AmazonRdsForOracleTableDatasetOutput
	ToAmazonRdsForOracleTableDatasetOutputWithContext(context.Context) AmazonRdsForOracleTableDatasetOutput
}

// The AmazonRdsForOracle database dataset.
type AmazonRdsForOracleTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the AmazonRdsForOracle database. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'AmazonRdsForOracleTable'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AmazonRdsForOracleTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonRdsForOracleTableDataset)(nil)).Elem()
}

func (i AmazonRdsForOracleTableDatasetArgs) ToAmazonRdsForOracleTableDatasetOutput() AmazonRdsForOracleTableDatasetOutput {
	return i.ToAmazonRdsForOracleTableDatasetOutputWithContext(context.Background())
}

func (i AmazonRdsForOracleTableDatasetArgs) ToAmazonRdsForOracleTableDatasetOutputWithContext(ctx context.Context) AmazonRdsForOracleTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonRdsForOracleTableDatasetOutput)
}

// The AmazonRdsForOracle database dataset.
type AmazonRdsForOracleTableDatasetOutput struct{ *pulumi.OutputState }

func (AmazonRdsForOracleTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonRdsForOracleTableDataset)(nil)).Elem()
}

func (o AmazonRdsForOracleTableDatasetOutput) ToAmazonRdsForOracleTableDatasetOutput() AmazonRdsForOracleTableDatasetOutput {
	return o
}

func (o AmazonRdsForOracleTableDatasetOutput) ToAmazonRdsForOracleTableDatasetOutputWithContext(ctx context.Context) AmazonRdsForOracleTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AmazonRdsForOracleTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AmazonRdsForOracleTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AmazonRdsForOracleTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonRdsForOracleTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AmazonRdsForOracleTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v AmazonRdsForOracleTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o AmazonRdsForOracleTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v AmazonRdsForOracleTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o AmazonRdsForOracleTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AmazonRdsForOracleTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AmazonRdsForOracleTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForOracleTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AmazonRdsForOracleTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForOracleTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the AmazonRdsForOracle database. Type: string (or Expression with resultType string).
func (o AmazonRdsForOracleTableDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForOracleTableDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'AmazonRdsForOracleTable'.
func (o AmazonRdsForOracleTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonRdsForOracleTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The AmazonRdsForOracle database dataset.
type AmazonRdsForOracleTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the AmazonRdsForOracle database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'AmazonRdsForOracleTable'.
	Type string `pulumi:"type"`
}

// The AmazonRdsForOracle database dataset.
type AmazonRdsForOracleTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (AmazonRdsForOracleTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonRdsForOracleTableDatasetResponse)(nil)).Elem()
}

func (o AmazonRdsForOracleTableDatasetResponseOutput) ToAmazonRdsForOracleTableDatasetResponseOutput() AmazonRdsForOracleTableDatasetResponseOutput {
	return o
}

func (o AmazonRdsForOracleTableDatasetResponseOutput) ToAmazonRdsForOracleTableDatasetResponseOutputWithContext(ctx context.Context) AmazonRdsForOracleTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AmazonRdsForOracleTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AmazonRdsForOracleTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AmazonRdsForOracleTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonRdsForOracleTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AmazonRdsForOracleTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v AmazonRdsForOracleTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o AmazonRdsForOracleTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AmazonRdsForOracleTableDatasetResponse) LinkedServiceReferenceResponse {
		return v.LinkedServiceName
	}).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o AmazonRdsForOracleTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AmazonRdsForOracleTableDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AmazonRdsForOracleTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForOracleTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AmazonRdsForOracleTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForOracleTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the AmazonRdsForOracle database. Type: string (or Expression with resultType string).
func (o AmazonRdsForOracleTableDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForOracleTableDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'AmazonRdsForOracleTable'.
func (o AmazonRdsForOracleTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonRdsForOracleTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Amazon RDS for SQL Server linked service.
type AmazonRdsForSqlServerLinkedService struct {
	// Sql always encrypted properties.
	AlwaysEncryptedSettings *SqlAlwaysEncryptedProperties `pulumi:"alwaysEncryptedSettings"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The on-premises Windows authentication password.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'AmazonRdsForSqlServer'.
	Type string `pulumi:"type"`
	// The on-premises Windows authentication user name. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// AmazonRdsForSqlServerLinkedServiceInput is an input type that accepts AmazonRdsForSqlServerLinkedServiceArgs and AmazonRdsForSqlServerLinkedServiceOutput values.
// You can construct a concrete instance of `AmazonRdsForSqlServerLinkedServiceInput` via:
//
//	AmazonRdsForSqlServerLinkedServiceArgs{...}
type AmazonRdsForSqlServerLinkedServiceInput interface {
	pulumi.Input

	ToAmazonRdsForSqlServerLinkedServiceOutput() AmazonRdsForSqlServerLinkedServiceOutput
	ToAmazonRdsForSqlServerLinkedServiceOutputWithContext(context.Context) AmazonRdsForSqlServerLinkedServiceOutput
}

// Amazon RDS for SQL Server linked service.
type AmazonRdsForSqlServerLinkedServiceArgs struct {
	// Sql always encrypted properties.
	AlwaysEncryptedSettings SqlAlwaysEncryptedPropertiesPtrInput `pulumi:"alwaysEncryptedSettings"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The on-premises Windows authentication password.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'AmazonRdsForSqlServer'.
	Type pulumi.StringInput `pulumi:"type"`
	// The on-premises Windows authentication user name. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (AmazonRdsForSqlServerLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonRdsForSqlServerLinkedService)(nil)).Elem()
}

func (i AmazonRdsForSqlServerLinkedServiceArgs) ToAmazonRdsForSqlServerLinkedServiceOutput() AmazonRdsForSqlServerLinkedServiceOutput {
	return i.ToAmazonRdsForSqlServerLinkedServiceOutputWithContext(context.Background())
}

func (i AmazonRdsForSqlServerLinkedServiceArgs) ToAmazonRdsForSqlServerLinkedServiceOutputWithContext(ctx context.Context) AmazonRdsForSqlServerLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonRdsForSqlServerLinkedServiceOutput)
}

// Amazon RDS for SQL Server linked service.
type AmazonRdsForSqlServerLinkedServiceOutput struct{ *pulumi.OutputState }

func (AmazonRdsForSqlServerLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonRdsForSqlServerLinkedService)(nil)).Elem()
}

func (o AmazonRdsForSqlServerLinkedServiceOutput) ToAmazonRdsForSqlServerLinkedServiceOutput() AmazonRdsForSqlServerLinkedServiceOutput {
	return o
}

func (o AmazonRdsForSqlServerLinkedServiceOutput) ToAmazonRdsForSqlServerLinkedServiceOutputWithContext(ctx context.Context) AmazonRdsForSqlServerLinkedServiceOutput {
	return o
}

// Sql always encrypted properties.
func (o AmazonRdsForSqlServerLinkedServiceOutput) AlwaysEncryptedSettings() SqlAlwaysEncryptedPropertiesPtrOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerLinkedService) *SqlAlwaysEncryptedProperties {
		return v.AlwaysEncryptedSettings
	}).(SqlAlwaysEncryptedPropertiesPtrOutput)
}

// List of tags that can be used for describing the linked service.
func (o AmazonRdsForSqlServerLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AmazonRdsForSqlServerLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AmazonRdsForSqlServerLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AmazonRdsForSqlServerLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AmazonRdsForSqlServerLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AmazonRdsForSqlServerLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The on-premises Windows authentication password.
func (o AmazonRdsForSqlServerLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AmazonRdsForSqlServer'.
func (o AmazonRdsForSqlServerLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The on-premises Windows authentication user name. Type: string (or Expression with resultType string).
func (o AmazonRdsForSqlServerLinkedServiceOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerLinkedService) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// Amazon RDS for SQL Server linked service.
type AmazonRdsForSqlServerLinkedServiceResponse struct {
	// Sql always encrypted properties.
	AlwaysEncryptedSettings *SqlAlwaysEncryptedPropertiesResponse `pulumi:"alwaysEncryptedSettings"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The on-premises Windows authentication password.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'AmazonRdsForSqlServer'.
	Type string `pulumi:"type"`
	// The on-premises Windows authentication user name. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// Amazon RDS for SQL Server linked service.
type AmazonRdsForSqlServerLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AmazonRdsForSqlServerLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonRdsForSqlServerLinkedServiceResponse)(nil)).Elem()
}

func (o AmazonRdsForSqlServerLinkedServiceResponseOutput) ToAmazonRdsForSqlServerLinkedServiceResponseOutput() AmazonRdsForSqlServerLinkedServiceResponseOutput {
	return o
}

func (o AmazonRdsForSqlServerLinkedServiceResponseOutput) ToAmazonRdsForSqlServerLinkedServiceResponseOutputWithContext(ctx context.Context) AmazonRdsForSqlServerLinkedServiceResponseOutput {
	return o
}

// Sql always encrypted properties.
func (o AmazonRdsForSqlServerLinkedServiceResponseOutput) AlwaysEncryptedSettings() SqlAlwaysEncryptedPropertiesResponsePtrOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerLinkedServiceResponse) *SqlAlwaysEncryptedPropertiesResponse {
		return v.AlwaysEncryptedSettings
	}).(SqlAlwaysEncryptedPropertiesResponsePtrOutput)
}

// List of tags that can be used for describing the linked service.
func (o AmazonRdsForSqlServerLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AmazonRdsForSqlServerLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AmazonRdsForSqlServerLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AmazonRdsForSqlServerLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AmazonRdsForSqlServerLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AmazonRdsForSqlServerLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The on-premises Windows authentication password.
func (o AmazonRdsForSqlServerLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AmazonRdsForSqlServer'.
func (o AmazonRdsForSqlServerLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The on-premises Windows authentication user name. Type: string (or Expression with resultType string).
func (o AmazonRdsForSqlServerLinkedServiceResponseOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerLinkedServiceResponse) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// A copy activity Amazon RDS for SQL Server source.
type AmazonRdsForSqlServerSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string).
	IsolationLevel interface{} `pulumi:"isolationLevel"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for Sql source partitioning.
	PartitionSettings *SqlPartitionSettings `pulumi:"partitionSettings"`
	// Which additional types to produce.
	ProduceAdditionalTypes interface{} `pulumi:"produceAdditionalTypes"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// SQL reader query. Type: string (or Expression with resultType string).
	SqlReaderQuery interface{} `pulumi:"sqlReaderQuery"`
	// Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
	SqlReaderStoredProcedureName interface{} `pulumi:"sqlReaderStoredProcedureName"`
	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
	StoredProcedureParameters interface{} `pulumi:"storedProcedureParameters"`
	// Copy source type.
	// Expected value is 'AmazonRdsForSqlServerSource'.
	Type string `pulumi:"type"`
}

// AmazonRdsForSqlServerSourceInput is an input type that accepts AmazonRdsForSqlServerSourceArgs and AmazonRdsForSqlServerSourceOutput values.
// You can construct a concrete instance of `AmazonRdsForSqlServerSourceInput` via:
//
//	AmazonRdsForSqlServerSourceArgs{...}
type AmazonRdsForSqlServerSourceInput interface {
	pulumi.Input

	ToAmazonRdsForSqlServerSourceOutput() AmazonRdsForSqlServerSourceOutput
	ToAmazonRdsForSqlServerSourceOutputWithContext(context.Context) AmazonRdsForSqlServerSourceOutput
}

// A copy activity Amazon RDS for SQL Server source.
type AmazonRdsForSqlServerSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string).
	IsolationLevel pulumi.Input `pulumi:"isolationLevel"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange".
	PartitionOption pulumi.Input `pulumi:"partitionOption"`
	// The settings that will be leveraged for Sql source partitioning.
	PartitionSettings SqlPartitionSettingsPtrInput `pulumi:"partitionSettings"`
	// Which additional types to produce.
	ProduceAdditionalTypes pulumi.Input `pulumi:"produceAdditionalTypes"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// SQL reader query. Type: string (or Expression with resultType string).
	SqlReaderQuery pulumi.Input `pulumi:"sqlReaderQuery"`
	// Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
	SqlReaderStoredProcedureName pulumi.Input `pulumi:"sqlReaderStoredProcedureName"`
	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
	StoredProcedureParameters pulumi.Input `pulumi:"storedProcedureParameters"`
	// Copy source type.
	// Expected value is 'AmazonRdsForSqlServerSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AmazonRdsForSqlServerSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonRdsForSqlServerSource)(nil)).Elem()
}

func (i AmazonRdsForSqlServerSourceArgs) ToAmazonRdsForSqlServerSourceOutput() AmazonRdsForSqlServerSourceOutput {
	return i.ToAmazonRdsForSqlServerSourceOutputWithContext(context.Background())
}

func (i AmazonRdsForSqlServerSourceArgs) ToAmazonRdsForSqlServerSourceOutputWithContext(ctx context.Context) AmazonRdsForSqlServerSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonRdsForSqlServerSourceOutput)
}

// A copy activity Amazon RDS for SQL Server source.
type AmazonRdsForSqlServerSourceOutput struct{ *pulumi.OutputState }

func (AmazonRdsForSqlServerSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonRdsForSqlServerSource)(nil)).Elem()
}

func (o AmazonRdsForSqlServerSourceOutput) ToAmazonRdsForSqlServerSourceOutput() AmazonRdsForSqlServerSourceOutput {
	return o
}

func (o AmazonRdsForSqlServerSourceOutput) ToAmazonRdsForSqlServerSourceOutputWithContext(ctx context.Context) AmazonRdsForSqlServerSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o AmazonRdsForSqlServerSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AmazonRdsForSqlServerSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string).
func (o AmazonRdsForSqlServerSourceOutput) IsolationLevel() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerSource) interface{} { return v.IsolationLevel }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AmazonRdsForSqlServerSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange".
func (o AmazonRdsForSqlServerSourceOutput) PartitionOption() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerSource) interface{} { return v.PartitionOption }).(pulumi.AnyOutput)
}

// The settings that will be leveraged for Sql source partitioning.
func (o AmazonRdsForSqlServerSourceOutput) PartitionSettings() SqlPartitionSettingsPtrOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerSource) *SqlPartitionSettings { return v.PartitionSettings }).(SqlPartitionSettingsPtrOutput)
}

// Which additional types to produce.
func (o AmazonRdsForSqlServerSourceOutput) ProduceAdditionalTypes() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerSource) interface{} { return v.ProduceAdditionalTypes }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AmazonRdsForSqlServerSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o AmazonRdsForSqlServerSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AmazonRdsForSqlServerSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// SQL reader query. Type: string (or Expression with resultType string).
func (o AmazonRdsForSqlServerSourceOutput) SqlReaderQuery() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerSource) interface{} { return v.SqlReaderQuery }).(pulumi.AnyOutput)
}

// Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
func (o AmazonRdsForSqlServerSourceOutput) SqlReaderStoredProcedureName() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerSource) interface{} { return v.SqlReaderStoredProcedureName }).(pulumi.AnyOutput)
}

// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
func (o AmazonRdsForSqlServerSourceOutput) StoredProcedureParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerSource) interface{} { return v.StoredProcedureParameters }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'AmazonRdsForSqlServerSource'.
func (o AmazonRdsForSqlServerSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Amazon RDS for SQL Server source.
type AmazonRdsForSqlServerSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string).
	IsolationLevel interface{} `pulumi:"isolationLevel"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange".
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for Sql source partitioning.
	PartitionSettings *SqlPartitionSettingsResponse `pulumi:"partitionSettings"`
	// Which additional types to produce.
	ProduceAdditionalTypes interface{} `pulumi:"produceAdditionalTypes"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// SQL reader query. Type: string (or Expression with resultType string).
	SqlReaderQuery interface{} `pulumi:"sqlReaderQuery"`
	// Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
	SqlReaderStoredProcedureName interface{} `pulumi:"sqlReaderStoredProcedureName"`
	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
	StoredProcedureParameters interface{} `pulumi:"storedProcedureParameters"`
	// Copy source type.
	// Expected value is 'AmazonRdsForSqlServerSource'.
	Type string `pulumi:"type"`
}

// A copy activity Amazon RDS for SQL Server source.
type AmazonRdsForSqlServerSourceResponseOutput struct{ *pulumi.OutputState }

func (AmazonRdsForSqlServerSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonRdsForSqlServerSourceResponse)(nil)).Elem()
}

func (o AmazonRdsForSqlServerSourceResponseOutput) ToAmazonRdsForSqlServerSourceResponseOutput() AmazonRdsForSqlServerSourceResponseOutput {
	return o
}

func (o AmazonRdsForSqlServerSourceResponseOutput) ToAmazonRdsForSqlServerSourceResponseOutputWithContext(ctx context.Context) AmazonRdsForSqlServerSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o AmazonRdsForSqlServerSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AmazonRdsForSqlServerSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string).
func (o AmazonRdsForSqlServerSourceResponseOutput) IsolationLevel() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerSourceResponse) interface{} { return v.IsolationLevel }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AmazonRdsForSqlServerSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange".
func (o AmazonRdsForSqlServerSourceResponseOutput) PartitionOption() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerSourceResponse) interface{} { return v.PartitionOption }).(pulumi.AnyOutput)
}

// The settings that will be leveraged for Sql source partitioning.
func (o AmazonRdsForSqlServerSourceResponseOutput) PartitionSettings() SqlPartitionSettingsResponsePtrOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerSourceResponse) *SqlPartitionSettingsResponse { return v.PartitionSettings }).(SqlPartitionSettingsResponsePtrOutput)
}

// Which additional types to produce.
func (o AmazonRdsForSqlServerSourceResponseOutput) ProduceAdditionalTypes() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerSourceResponse) interface{} { return v.ProduceAdditionalTypes }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AmazonRdsForSqlServerSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o AmazonRdsForSqlServerSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AmazonRdsForSqlServerSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// SQL reader query. Type: string (or Expression with resultType string).
func (o AmazonRdsForSqlServerSourceResponseOutput) SqlReaderQuery() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerSourceResponse) interface{} { return v.SqlReaderQuery }).(pulumi.AnyOutput)
}

// Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
func (o AmazonRdsForSqlServerSourceResponseOutput) SqlReaderStoredProcedureName() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerSourceResponse) interface{} { return v.SqlReaderStoredProcedureName }).(pulumi.AnyOutput)
}

// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
func (o AmazonRdsForSqlServerSourceResponseOutput) StoredProcedureParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerSourceResponse) interface{} { return v.StoredProcedureParameters }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'AmazonRdsForSqlServerSource'.
func (o AmazonRdsForSqlServerSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Amazon RDS for SQL Server dataset.
type AmazonRdsForSqlServerTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the SQL Server dataset. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'AmazonRdsForSqlServerTable'.
	Type string `pulumi:"type"`
}

// AmazonRdsForSqlServerTableDatasetInput is an input type that accepts AmazonRdsForSqlServerTableDatasetArgs and AmazonRdsForSqlServerTableDatasetOutput values.
// You can construct a concrete instance of `AmazonRdsForSqlServerTableDatasetInput` via:
//
//	AmazonRdsForSqlServerTableDatasetArgs{...}
type AmazonRdsForSqlServerTableDatasetInput interface {
	pulumi.Input

	ToAmazonRdsForSqlServerTableDatasetOutput() AmazonRdsForSqlServerTableDatasetOutput
	ToAmazonRdsForSqlServerTableDatasetOutputWithContext(context.Context) AmazonRdsForSqlServerTableDatasetOutput
}

// The Amazon RDS for SQL Server dataset.
type AmazonRdsForSqlServerTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the SQL Server dataset. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'AmazonRdsForSqlServerTable'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AmazonRdsForSqlServerTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonRdsForSqlServerTableDataset)(nil)).Elem()
}

func (i AmazonRdsForSqlServerTableDatasetArgs) ToAmazonRdsForSqlServerTableDatasetOutput() AmazonRdsForSqlServerTableDatasetOutput {
	return i.ToAmazonRdsForSqlServerTableDatasetOutputWithContext(context.Background())
}

func (i AmazonRdsForSqlServerTableDatasetArgs) ToAmazonRdsForSqlServerTableDatasetOutputWithContext(ctx context.Context) AmazonRdsForSqlServerTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonRdsForSqlServerTableDatasetOutput)
}

// The Amazon RDS for SQL Server dataset.
type AmazonRdsForSqlServerTableDatasetOutput struct{ *pulumi.OutputState }

func (AmazonRdsForSqlServerTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonRdsForSqlServerTableDataset)(nil)).Elem()
}

func (o AmazonRdsForSqlServerTableDatasetOutput) ToAmazonRdsForSqlServerTableDatasetOutput() AmazonRdsForSqlServerTableDatasetOutput {
	return o
}

func (o AmazonRdsForSqlServerTableDatasetOutput) ToAmazonRdsForSqlServerTableDatasetOutputWithContext(ctx context.Context) AmazonRdsForSqlServerTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AmazonRdsForSqlServerTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AmazonRdsForSqlServerTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AmazonRdsForSqlServerTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o AmazonRdsForSqlServerTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o AmazonRdsForSqlServerTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AmazonRdsForSqlServerTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AmazonRdsForSqlServerTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the SQL Server dataset. Type: string (or Expression with resultType string).
func (o AmazonRdsForSqlServerTableDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerTableDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'AmazonRdsForSqlServerTable'.
func (o AmazonRdsForSqlServerTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Amazon RDS for SQL Server dataset.
type AmazonRdsForSqlServerTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the SQL Server dataset. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'AmazonRdsForSqlServerTable'.
	Type string `pulumi:"type"`
}

// The Amazon RDS for SQL Server dataset.
type AmazonRdsForSqlServerTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (AmazonRdsForSqlServerTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonRdsForSqlServerTableDatasetResponse)(nil)).Elem()
}

func (o AmazonRdsForSqlServerTableDatasetResponseOutput) ToAmazonRdsForSqlServerTableDatasetResponseOutput() AmazonRdsForSqlServerTableDatasetResponseOutput {
	return o
}

func (o AmazonRdsForSqlServerTableDatasetResponseOutput) ToAmazonRdsForSqlServerTableDatasetResponseOutputWithContext(ctx context.Context) AmazonRdsForSqlServerTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AmazonRdsForSqlServerTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AmazonRdsForSqlServerTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AmazonRdsForSqlServerTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o AmazonRdsForSqlServerTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerTableDatasetResponse) LinkedServiceReferenceResponse {
		return v.LinkedServiceName
	}).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o AmazonRdsForSqlServerTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerTableDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AmazonRdsForSqlServerTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AmazonRdsForSqlServerTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the SQL Server dataset. Type: string (or Expression with resultType string).
func (o AmazonRdsForSqlServerTableDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerTableDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'AmazonRdsForSqlServerTable'.
func (o AmazonRdsForSqlServerTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonRdsForSqlServerTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for Amazon Redshift.
type AmazonRedshiftLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The database name of the Amazon Redshift source. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password of the Amazon Redshift source.
	Password interface{} `pulumi:"password"`
	// The TCP port number that the Amazon Redshift server uses to listen for client connections. The default value is 5439. Type: integer (or Expression with resultType integer).
	Port interface{} `pulumi:"port"`
	// The name of the Amazon Redshift server. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	// Expected value is 'AmazonRedshift'.
	Type string `pulumi:"type"`
	// The username of the Amazon Redshift source. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// AmazonRedshiftLinkedServiceInput is an input type that accepts AmazonRedshiftLinkedServiceArgs and AmazonRedshiftLinkedServiceOutput values.
// You can construct a concrete instance of `AmazonRedshiftLinkedServiceInput` via:
//
//	AmazonRedshiftLinkedServiceArgs{...}
type AmazonRedshiftLinkedServiceInput interface {
	pulumi.Input

	ToAmazonRedshiftLinkedServiceOutput() AmazonRedshiftLinkedServiceOutput
	ToAmazonRedshiftLinkedServiceOutputWithContext(context.Context) AmazonRedshiftLinkedServiceOutput
}

// Linked service for Amazon Redshift.
type AmazonRedshiftLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The database name of the Amazon Redshift source. Type: string (or Expression with resultType string).
	Database pulumi.Input `pulumi:"database"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password of the Amazon Redshift source.
	Password pulumi.Input `pulumi:"password"`
	// The TCP port number that the Amazon Redshift server uses to listen for client connections. The default value is 5439. Type: integer (or Expression with resultType integer).
	Port pulumi.Input `pulumi:"port"`
	// The name of the Amazon Redshift server. Type: string (or Expression with resultType string).
	Server pulumi.Input `pulumi:"server"`
	// Type of linked service.
	// Expected value is 'AmazonRedshift'.
	Type pulumi.StringInput `pulumi:"type"`
	// The username of the Amazon Redshift source. Type: string (or Expression with resultType string).
	Username pulumi.Input `pulumi:"username"`
}

func (AmazonRedshiftLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonRedshiftLinkedService)(nil)).Elem()
}

func (i AmazonRedshiftLinkedServiceArgs) ToAmazonRedshiftLinkedServiceOutput() AmazonRedshiftLinkedServiceOutput {
	return i.ToAmazonRedshiftLinkedServiceOutputWithContext(context.Background())
}

func (i AmazonRedshiftLinkedServiceArgs) ToAmazonRedshiftLinkedServiceOutputWithContext(ctx context.Context) AmazonRedshiftLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonRedshiftLinkedServiceOutput)
}

// Linked service for Amazon Redshift.
type AmazonRedshiftLinkedServiceOutput struct{ *pulumi.OutputState }

func (AmazonRedshiftLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonRedshiftLinkedService)(nil)).Elem()
}

func (o AmazonRedshiftLinkedServiceOutput) ToAmazonRedshiftLinkedServiceOutput() AmazonRedshiftLinkedServiceOutput {
	return o
}

func (o AmazonRedshiftLinkedServiceOutput) ToAmazonRedshiftLinkedServiceOutputWithContext(ctx context.Context) AmazonRedshiftLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AmazonRedshiftLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AmazonRedshiftLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The database name of the Amazon Redshift source. Type: string (or Expression with resultType string).
func (o AmazonRedshiftLinkedServiceOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedService) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AmazonRedshiftLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AmazonRedshiftLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AmazonRedshiftLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The password of the Amazon Redshift source.
func (o AmazonRedshiftLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port number that the Amazon Redshift server uses to listen for client connections. The default value is 5439. Type: integer (or Expression with resultType integer).
func (o AmazonRedshiftLinkedServiceOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedService) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The name of the Amazon Redshift server. Type: string (or Expression with resultType string).
func (o AmazonRedshiftLinkedServiceOutput) Server() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedService) interface{} { return v.Server }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AmazonRedshift'.
func (o AmazonRedshiftLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The username of the Amazon Redshift source. Type: string (or Expression with resultType string).
func (o AmazonRedshiftLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Linked service for Amazon Redshift.
type AmazonRedshiftLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The database name of the Amazon Redshift source. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password of the Amazon Redshift source.
	Password interface{} `pulumi:"password"`
	// The TCP port number that the Amazon Redshift server uses to listen for client connections. The default value is 5439. Type: integer (or Expression with resultType integer).
	Port interface{} `pulumi:"port"`
	// The name of the Amazon Redshift server. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	// Expected value is 'AmazonRedshift'.
	Type string `pulumi:"type"`
	// The username of the Amazon Redshift source. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// Linked service for Amazon Redshift.
type AmazonRedshiftLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AmazonRedshiftLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonRedshiftLinkedServiceResponse)(nil)).Elem()
}

func (o AmazonRedshiftLinkedServiceResponseOutput) ToAmazonRedshiftLinkedServiceResponseOutput() AmazonRedshiftLinkedServiceResponseOutput {
	return o
}

func (o AmazonRedshiftLinkedServiceResponseOutput) ToAmazonRedshiftLinkedServiceResponseOutputWithContext(ctx context.Context) AmazonRedshiftLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AmazonRedshiftLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AmazonRedshiftLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The database name of the Amazon Redshift source. Type: string (or Expression with resultType string).
func (o AmazonRedshiftLinkedServiceResponseOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedServiceResponse) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AmazonRedshiftLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AmazonRedshiftLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AmazonRedshiftLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The password of the Amazon Redshift source.
func (o AmazonRedshiftLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port number that the Amazon Redshift server uses to listen for client connections. The default value is 5439. Type: integer (or Expression with resultType integer).
func (o AmazonRedshiftLinkedServiceResponseOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedServiceResponse) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The name of the Amazon Redshift server. Type: string (or Expression with resultType string).
func (o AmazonRedshiftLinkedServiceResponseOutput) Server() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedServiceResponse) interface{} { return v.Server }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AmazonRedshift'.
func (o AmazonRedshiftLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The username of the Amazon Redshift source. Type: string (or Expression with resultType string).
func (o AmazonRedshiftLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// A copy activity source for Amazon Redshift Source.
type AmazonRedshiftSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// The Amazon S3 settings needed for the interim Amazon S3 when copying from Amazon Redshift with unload. With this, data from Amazon Redshift source will be unloaded into S3 first and then copied into the targeted sink from the interim S3.
	RedshiftUnloadSettings *RedshiftUnloadSettings `pulumi:"redshiftUnloadSettings"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AmazonRedshiftSource'.
	Type string `pulumi:"type"`
}

// AmazonRedshiftSourceInput is an input type that accepts AmazonRedshiftSourceArgs and AmazonRedshiftSourceOutput values.
// You can construct a concrete instance of `AmazonRedshiftSourceInput` via:
//
//	AmazonRedshiftSourceArgs{...}
type AmazonRedshiftSourceInput interface {
	pulumi.Input

	ToAmazonRedshiftSourceOutput() AmazonRedshiftSourceOutput
	ToAmazonRedshiftSourceOutputWithContext(context.Context) AmazonRedshiftSourceOutput
}

// A copy activity source for Amazon Redshift Source.
type AmazonRedshiftSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// The Amazon S3 settings needed for the interim Amazon S3 when copying from Amazon Redshift with unload. With this, data from Amazon Redshift source will be unloaded into S3 first and then copied into the targeted sink from the interim S3.
	RedshiftUnloadSettings RedshiftUnloadSettingsPtrInput `pulumi:"redshiftUnloadSettings"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AmazonRedshiftSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AmazonRedshiftSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonRedshiftSource)(nil)).Elem()
}

func (i AmazonRedshiftSourceArgs) ToAmazonRedshiftSourceOutput() AmazonRedshiftSourceOutput {
	return i.ToAmazonRedshiftSourceOutputWithContext(context.Background())
}

func (i AmazonRedshiftSourceArgs) ToAmazonRedshiftSourceOutputWithContext(ctx context.Context) AmazonRedshiftSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonRedshiftSourceOutput)
}

// A copy activity source for Amazon Redshift Source.
type AmazonRedshiftSourceOutput struct{ *pulumi.OutputState }

func (AmazonRedshiftSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonRedshiftSource)(nil)).Elem()
}

func (o AmazonRedshiftSourceOutput) ToAmazonRedshiftSourceOutput() AmazonRedshiftSourceOutput {
	return o
}

func (o AmazonRedshiftSourceOutput) ToAmazonRedshiftSourceOutputWithContext(ctx context.Context) AmazonRedshiftSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o AmazonRedshiftSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AmazonRedshiftSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AmazonRedshiftSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Database query. Type: string (or Expression with resultType string).
func (o AmazonRedshiftSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AmazonRedshiftSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// The Amazon S3 settings needed for the interim Amazon S3 when copying from Amazon Redshift with unload. With this, data from Amazon Redshift source will be unloaded into S3 first and then copied into the targeted sink from the interim S3.
func (o AmazonRedshiftSourceOutput) RedshiftUnloadSettings() RedshiftUnloadSettingsPtrOutput {
	return o.ApplyT(func(v AmazonRedshiftSource) *RedshiftUnloadSettings { return v.RedshiftUnloadSettings }).(RedshiftUnloadSettingsPtrOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o AmazonRedshiftSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AmazonRedshiftSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'AmazonRedshiftSource'.
func (o AmazonRedshiftSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonRedshiftSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity source for Amazon Redshift Source.
type AmazonRedshiftSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// The Amazon S3 settings needed for the interim Amazon S3 when copying from Amazon Redshift with unload. With this, data from Amazon Redshift source will be unloaded into S3 first and then copied into the targeted sink from the interim S3.
	RedshiftUnloadSettings *RedshiftUnloadSettingsResponse `pulumi:"redshiftUnloadSettings"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AmazonRedshiftSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for Amazon Redshift Source.
type AmazonRedshiftSourceResponseOutput struct{ *pulumi.OutputState }

func (AmazonRedshiftSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonRedshiftSourceResponse)(nil)).Elem()
}

func (o AmazonRedshiftSourceResponseOutput) ToAmazonRedshiftSourceResponseOutput() AmazonRedshiftSourceResponseOutput {
	return o
}

func (o AmazonRedshiftSourceResponseOutput) ToAmazonRedshiftSourceResponseOutputWithContext(ctx context.Context) AmazonRedshiftSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o AmazonRedshiftSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AmazonRedshiftSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AmazonRedshiftSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Database query. Type: string (or Expression with resultType string).
func (o AmazonRedshiftSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AmazonRedshiftSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// The Amazon S3 settings needed for the interim Amazon S3 when copying from Amazon Redshift with unload. With this, data from Amazon Redshift source will be unloaded into S3 first and then copied into the targeted sink from the interim S3.
func (o AmazonRedshiftSourceResponseOutput) RedshiftUnloadSettings() RedshiftUnloadSettingsResponsePtrOutput {
	return o.ApplyT(func(v AmazonRedshiftSourceResponse) *RedshiftUnloadSettingsResponse { return v.RedshiftUnloadSettings }).(RedshiftUnloadSettingsResponsePtrOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o AmazonRedshiftSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AmazonRedshiftSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'AmazonRedshiftSource'.
func (o AmazonRedshiftSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonRedshiftSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Amazon Redshift table dataset.
type AmazonRedshiftTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The Amazon Redshift table name. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AmazonRedshiftTable'.
	Type string `pulumi:"type"`
}

// AmazonRedshiftTableDatasetInput is an input type that accepts AmazonRedshiftTableDatasetArgs and AmazonRedshiftTableDatasetOutput values.
// You can construct a concrete instance of `AmazonRedshiftTableDatasetInput` via:
//
//	AmazonRedshiftTableDatasetArgs{...}
type AmazonRedshiftTableDatasetInput interface {
	pulumi.Input

	ToAmazonRedshiftTableDatasetOutput() AmazonRedshiftTableDatasetOutput
	ToAmazonRedshiftTableDatasetOutputWithContext(context.Context) AmazonRedshiftTableDatasetOutput
}

// The Amazon Redshift table dataset.
type AmazonRedshiftTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The Amazon Redshift table name. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AmazonRedshiftTable'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AmazonRedshiftTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonRedshiftTableDataset)(nil)).Elem()
}

func (i AmazonRedshiftTableDatasetArgs) ToAmazonRedshiftTableDatasetOutput() AmazonRedshiftTableDatasetOutput {
	return i.ToAmazonRedshiftTableDatasetOutputWithContext(context.Background())
}

func (i AmazonRedshiftTableDatasetArgs) ToAmazonRedshiftTableDatasetOutputWithContext(ctx context.Context) AmazonRedshiftTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonRedshiftTableDatasetOutput)
}

// The Amazon Redshift table dataset.
type AmazonRedshiftTableDatasetOutput struct{ *pulumi.OutputState }

func (AmazonRedshiftTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonRedshiftTableDataset)(nil)).Elem()
}

func (o AmazonRedshiftTableDatasetOutput) ToAmazonRedshiftTableDatasetOutput() AmazonRedshiftTableDatasetOutput {
	return o
}

func (o AmazonRedshiftTableDatasetOutput) ToAmazonRedshiftTableDatasetOutputWithContext(ctx context.Context) AmazonRedshiftTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AmazonRedshiftTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AmazonRedshiftTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AmazonRedshiftTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonRedshiftTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AmazonRedshiftTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v AmazonRedshiftTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o AmazonRedshiftTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v AmazonRedshiftTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o AmazonRedshiftTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AmazonRedshiftTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AmazonRedshiftTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AmazonRedshiftTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The Amazon Redshift table name. Type: string (or Expression with resultType string).
func (o AmazonRedshiftTableDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftTableDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o AmazonRedshiftTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'AmazonRedshiftTable'.
func (o AmazonRedshiftTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonRedshiftTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Amazon Redshift table dataset.
type AmazonRedshiftTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The Amazon Redshift table name. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AmazonRedshiftTable'.
	Type string `pulumi:"type"`
}

// The Amazon Redshift table dataset.
type AmazonRedshiftTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (AmazonRedshiftTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonRedshiftTableDatasetResponse)(nil)).Elem()
}

func (o AmazonRedshiftTableDatasetResponseOutput) ToAmazonRedshiftTableDatasetResponseOutput() AmazonRedshiftTableDatasetResponseOutput {
	return o
}

func (o AmazonRedshiftTableDatasetResponseOutput) ToAmazonRedshiftTableDatasetResponseOutputWithContext(ctx context.Context) AmazonRedshiftTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AmazonRedshiftTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AmazonRedshiftTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AmazonRedshiftTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonRedshiftTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AmazonRedshiftTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v AmazonRedshiftTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o AmazonRedshiftTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AmazonRedshiftTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o AmazonRedshiftTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AmazonRedshiftTableDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AmazonRedshiftTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AmazonRedshiftTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The Amazon Redshift table name. Type: string (or Expression with resultType string).
func (o AmazonRedshiftTableDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftTableDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o AmazonRedshiftTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonRedshiftTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'AmazonRedshiftTable'.
func (o AmazonRedshiftTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonRedshiftTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for Amazon S3 Compatible.
type AmazonS3CompatibleLinkedService struct {
	// The access key identifier of the Amazon S3 Compatible Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
	AccessKeyId interface{} `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// If true, use S3 path-style access instead of virtual hosted-style access. Default value is false. Type: boolean (or Expression with resultType boolean).
	ForcePathStyle interface{} `pulumi:"forcePathStyle"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The secret access key of the Amazon S3 Compatible Identity and Access Management (IAM) user.
	SecretAccessKey interface{} `pulumi:"secretAccessKey"`
	// This value specifies the endpoint to access with the Amazon S3 Compatible Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
	ServiceUrl interface{} `pulumi:"serviceUrl"`
	// Type of linked service.
	// Expected value is 'AmazonS3Compatible'.
	Type string `pulumi:"type"`
}

// AmazonS3CompatibleLinkedServiceInput is an input type that accepts AmazonS3CompatibleLinkedServiceArgs and AmazonS3CompatibleLinkedServiceOutput values.
// You can construct a concrete instance of `AmazonS3CompatibleLinkedServiceInput` via:
//
//	AmazonS3CompatibleLinkedServiceArgs{...}
type AmazonS3CompatibleLinkedServiceInput interface {
	pulumi.Input

	ToAmazonS3CompatibleLinkedServiceOutput() AmazonS3CompatibleLinkedServiceOutput
	ToAmazonS3CompatibleLinkedServiceOutputWithContext(context.Context) AmazonS3CompatibleLinkedServiceOutput
}

// Linked service for Amazon S3 Compatible.
type AmazonS3CompatibleLinkedServiceArgs struct {
	// The access key identifier of the Amazon S3 Compatible Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
	AccessKeyId pulumi.Input `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// If true, use S3 path-style access instead of virtual hosted-style access. Default value is false. Type: boolean (or Expression with resultType boolean).
	ForcePathStyle pulumi.Input `pulumi:"forcePathStyle"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The secret access key of the Amazon S3 Compatible Identity and Access Management (IAM) user.
	SecretAccessKey pulumi.Input `pulumi:"secretAccessKey"`
	// This value specifies the endpoint to access with the Amazon S3 Compatible Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
	ServiceUrl pulumi.Input `pulumi:"serviceUrl"`
	// Type of linked service.
	// Expected value is 'AmazonS3Compatible'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AmazonS3CompatibleLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonS3CompatibleLinkedService)(nil)).Elem()
}

func (i AmazonS3CompatibleLinkedServiceArgs) ToAmazonS3CompatibleLinkedServiceOutput() AmazonS3CompatibleLinkedServiceOutput {
	return i.ToAmazonS3CompatibleLinkedServiceOutputWithContext(context.Background())
}

func (i AmazonS3CompatibleLinkedServiceArgs) ToAmazonS3CompatibleLinkedServiceOutputWithContext(ctx context.Context) AmazonS3CompatibleLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonS3CompatibleLinkedServiceOutput)
}

// Linked service for Amazon S3 Compatible.
type AmazonS3CompatibleLinkedServiceOutput struct{ *pulumi.OutputState }

func (AmazonS3CompatibleLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonS3CompatibleLinkedService)(nil)).Elem()
}

func (o AmazonS3CompatibleLinkedServiceOutput) ToAmazonS3CompatibleLinkedServiceOutput() AmazonS3CompatibleLinkedServiceOutput {
	return o
}

func (o AmazonS3CompatibleLinkedServiceOutput) ToAmazonS3CompatibleLinkedServiceOutputWithContext(ctx context.Context) AmazonS3CompatibleLinkedServiceOutput {
	return o
}

// The access key identifier of the Amazon S3 Compatible Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
func (o AmazonS3CompatibleLinkedServiceOutput) AccessKeyId() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3CompatibleLinkedService) interface{} { return v.AccessKeyId }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o AmazonS3CompatibleLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AmazonS3CompatibleLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AmazonS3CompatibleLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AmazonS3CompatibleLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o AmazonS3CompatibleLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonS3CompatibleLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AmazonS3CompatibleLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonS3CompatibleLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// If true, use S3 path-style access instead of virtual hosted-style access. Default value is false. Type: boolean (or Expression with resultType boolean).
func (o AmazonS3CompatibleLinkedServiceOutput) ForcePathStyle() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3CompatibleLinkedService) interface{} { return v.ForcePathStyle }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AmazonS3CompatibleLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AmazonS3CompatibleLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The secret access key of the Amazon S3 Compatible Identity and Access Management (IAM) user.
func (o AmazonS3CompatibleLinkedServiceOutput) SecretAccessKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3CompatibleLinkedService) interface{} { return v.SecretAccessKey }).(pulumi.AnyOutput)
}

// This value specifies the endpoint to access with the Amazon S3 Compatible Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
func (o AmazonS3CompatibleLinkedServiceOutput) ServiceUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3CompatibleLinkedService) interface{} { return v.ServiceUrl }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AmazonS3Compatible'.
func (o AmazonS3CompatibleLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonS3CompatibleLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for Amazon S3 Compatible.
type AmazonS3CompatibleLinkedServiceResponse struct {
	// The access key identifier of the Amazon S3 Compatible Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
	AccessKeyId interface{} `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// If true, use S3 path-style access instead of virtual hosted-style access. Default value is false. Type: boolean (or Expression with resultType boolean).
	ForcePathStyle interface{} `pulumi:"forcePathStyle"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The secret access key of the Amazon S3 Compatible Identity and Access Management (IAM) user.
	SecretAccessKey interface{} `pulumi:"secretAccessKey"`
	// This value specifies the endpoint to access with the Amazon S3 Compatible Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
	ServiceUrl interface{} `pulumi:"serviceUrl"`
	// Type of linked service.
	// Expected value is 'AmazonS3Compatible'.
	Type string `pulumi:"type"`
}

// Linked service for Amazon S3 Compatible.
type AmazonS3CompatibleLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AmazonS3CompatibleLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonS3CompatibleLinkedServiceResponse)(nil)).Elem()
}

func (o AmazonS3CompatibleLinkedServiceResponseOutput) ToAmazonS3CompatibleLinkedServiceResponseOutput() AmazonS3CompatibleLinkedServiceResponseOutput {
	return o
}

func (o AmazonS3CompatibleLinkedServiceResponseOutput) ToAmazonS3CompatibleLinkedServiceResponseOutputWithContext(ctx context.Context) AmazonS3CompatibleLinkedServiceResponseOutput {
	return o
}

// The access key identifier of the Amazon S3 Compatible Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
func (o AmazonS3CompatibleLinkedServiceResponseOutput) AccessKeyId() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3CompatibleLinkedServiceResponse) interface{} { return v.AccessKeyId }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o AmazonS3CompatibleLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AmazonS3CompatibleLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AmazonS3CompatibleLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AmazonS3CompatibleLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o AmazonS3CompatibleLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonS3CompatibleLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AmazonS3CompatibleLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonS3CompatibleLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// If true, use S3 path-style access instead of virtual hosted-style access. Default value is false. Type: boolean (or Expression with resultType boolean).
func (o AmazonS3CompatibleLinkedServiceResponseOutput) ForcePathStyle() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3CompatibleLinkedServiceResponse) interface{} { return v.ForcePathStyle }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AmazonS3CompatibleLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AmazonS3CompatibleLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The secret access key of the Amazon S3 Compatible Identity and Access Management (IAM) user.
func (o AmazonS3CompatibleLinkedServiceResponseOutput) SecretAccessKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3CompatibleLinkedServiceResponse) interface{} { return v.SecretAccessKey }).(pulumi.AnyOutput)
}

// This value specifies the endpoint to access with the Amazon S3 Compatible Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
func (o AmazonS3CompatibleLinkedServiceResponseOutput) ServiceUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3CompatibleLinkedServiceResponse) interface{} { return v.ServiceUrl }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AmazonS3Compatible'.
func (o AmazonS3CompatibleLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonS3CompatibleLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The location of Amazon S3 Compatible dataset.
type AmazonS3CompatibleLocation struct {
	// Specify the bucketName of Amazon S3 Compatible. Type: string (or Expression with resultType string)
	BucketName interface{} `pulumi:"bucketName"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'AmazonS3CompatibleLocation'.
	Type string `pulumi:"type"`
	// Specify the version of Amazon S3 Compatible. Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
}

// AmazonS3CompatibleLocationInput is an input type that accepts AmazonS3CompatibleLocationArgs and AmazonS3CompatibleLocationOutput values.
// You can construct a concrete instance of `AmazonS3CompatibleLocationInput` via:
//
//	AmazonS3CompatibleLocationArgs{...}
type AmazonS3CompatibleLocationInput interface {
	pulumi.Input

	ToAmazonS3CompatibleLocationOutput() AmazonS3CompatibleLocationOutput
	ToAmazonS3CompatibleLocationOutputWithContext(context.Context) AmazonS3CompatibleLocationOutput
}

// The location of Amazon S3 Compatible dataset.
type AmazonS3CompatibleLocationArgs struct {
	// Specify the bucketName of Amazon S3 Compatible. Type: string (or Expression with resultType string)
	BucketName pulumi.Input `pulumi:"bucketName"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'AmazonS3CompatibleLocation'.
	Type pulumi.StringInput `pulumi:"type"`
	// Specify the version of Amazon S3 Compatible. Type: string (or Expression with resultType string).
	Version pulumi.Input `pulumi:"version"`
}

func (AmazonS3CompatibleLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonS3CompatibleLocation)(nil)).Elem()
}

func (i AmazonS3CompatibleLocationArgs) ToAmazonS3CompatibleLocationOutput() AmazonS3CompatibleLocationOutput {
	return i.ToAmazonS3CompatibleLocationOutputWithContext(context.Background())
}

func (i AmazonS3CompatibleLocationArgs) ToAmazonS3CompatibleLocationOutputWithContext(ctx context.Context) AmazonS3CompatibleLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonS3CompatibleLocationOutput)
}

// The location of Amazon S3 Compatible dataset.
type AmazonS3CompatibleLocationOutput struct{ *pulumi.OutputState }

func (AmazonS3CompatibleLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonS3CompatibleLocation)(nil)).Elem()
}

func (o AmazonS3CompatibleLocationOutput) ToAmazonS3CompatibleLocationOutput() AmazonS3CompatibleLocationOutput {
	return o
}

func (o AmazonS3CompatibleLocationOutput) ToAmazonS3CompatibleLocationOutputWithContext(ctx context.Context) AmazonS3CompatibleLocationOutput {
	return o
}

// Specify the bucketName of Amazon S3 Compatible. Type: string (or Expression with resultType string)
func (o AmazonS3CompatibleLocationOutput) BucketName() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3CompatibleLocation) interface{} { return v.BucketName }).(pulumi.AnyOutput)
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o AmazonS3CompatibleLocationOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3CompatibleLocation) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o AmazonS3CompatibleLocationOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3CompatibleLocation) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
// Expected value is 'AmazonS3CompatibleLocation'.
func (o AmazonS3CompatibleLocationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonS3CompatibleLocation) string { return v.Type }).(pulumi.StringOutput)
}

// Specify the version of Amazon S3 Compatible. Type: string (or Expression with resultType string).
func (o AmazonS3CompatibleLocationOutput) Version() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3CompatibleLocation) interface{} { return v.Version }).(pulumi.AnyOutput)
}

// The location of Amazon S3 Compatible dataset.
type AmazonS3CompatibleLocationResponse struct {
	// Specify the bucketName of Amazon S3 Compatible. Type: string (or Expression with resultType string)
	BucketName interface{} `pulumi:"bucketName"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'AmazonS3CompatibleLocation'.
	Type string `pulumi:"type"`
	// Specify the version of Amazon S3 Compatible. Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
}

// The location of Amazon S3 Compatible dataset.
type AmazonS3CompatibleLocationResponseOutput struct{ *pulumi.OutputState }

func (AmazonS3CompatibleLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonS3CompatibleLocationResponse)(nil)).Elem()
}

func (o AmazonS3CompatibleLocationResponseOutput) ToAmazonS3CompatibleLocationResponseOutput() AmazonS3CompatibleLocationResponseOutput {
	return o
}

func (o AmazonS3CompatibleLocationResponseOutput) ToAmazonS3CompatibleLocationResponseOutputWithContext(ctx context.Context) AmazonS3CompatibleLocationResponseOutput {
	return o
}

// Specify the bucketName of Amazon S3 Compatible. Type: string (or Expression with resultType string)
func (o AmazonS3CompatibleLocationResponseOutput) BucketName() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3CompatibleLocationResponse) interface{} { return v.BucketName }).(pulumi.AnyOutput)
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o AmazonS3CompatibleLocationResponseOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3CompatibleLocationResponse) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o AmazonS3CompatibleLocationResponseOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3CompatibleLocationResponse) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
// Expected value is 'AmazonS3CompatibleLocation'.
func (o AmazonS3CompatibleLocationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonS3CompatibleLocationResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specify the version of Amazon S3 Compatible. Type: string (or Expression with resultType string).
func (o AmazonS3CompatibleLocationResponseOutput) Version() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3CompatibleLocationResponse) interface{} { return v.Version }).(pulumi.AnyOutput)
}

// Amazon S3 Compatible read settings.
type AmazonS3CompatibleReadSettings struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery interface{} `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// The prefix filter for the S3 Compatible object name. Type: string (or Expression with resultType string).
	Prefix interface{} `pulumi:"prefix"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'AmazonS3CompatibleReadSettings'.
	Type string `pulumi:"type"`
	// Amazon S3 Compatible wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Amazon S3 Compatible wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// AmazonS3CompatibleReadSettingsInput is an input type that accepts AmazonS3CompatibleReadSettingsArgs and AmazonS3CompatibleReadSettingsOutput values.
// You can construct a concrete instance of `AmazonS3CompatibleReadSettingsInput` via:
//
//	AmazonS3CompatibleReadSettingsArgs{...}
type AmazonS3CompatibleReadSettingsInput interface {
	pulumi.Input

	ToAmazonS3CompatibleReadSettingsOutput() AmazonS3CompatibleReadSettingsOutput
	ToAmazonS3CompatibleReadSettingsOutputWithContext(context.Context) AmazonS3CompatibleReadSettingsOutput
}

// Amazon S3 Compatible read settings.
type AmazonS3CompatibleReadSettingsArgs struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion pulumi.Input `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery pulumi.Input `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath pulumi.Input `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd pulumi.Input `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart pulumi.Input `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath pulumi.Input `pulumi:"partitionRootPath"`
	// The prefix filter for the S3 Compatible object name. Type: string (or Expression with resultType string).
	Prefix pulumi.Input `pulumi:"prefix"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive pulumi.Input `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'AmazonS3CompatibleReadSettings'.
	Type pulumi.StringInput `pulumi:"type"`
	// Amazon S3 Compatible wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName pulumi.Input `pulumi:"wildcardFileName"`
	// Amazon S3 Compatible wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath pulumi.Input `pulumi:"wildcardFolderPath"`
}

func (AmazonS3CompatibleReadSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonS3CompatibleReadSettings)(nil)).Elem()
}

func (i AmazonS3CompatibleReadSettingsArgs) ToAmazonS3CompatibleReadSettingsOutput() AmazonS3CompatibleReadSettingsOutput {
	return i.ToAmazonS3CompatibleReadSettingsOutputWithContext(context.Background())
}

func (i AmazonS3CompatibleReadSettingsArgs) ToAmazonS3CompatibleReadSettingsOutputWithContext(ctx context.Context) AmazonS3CompatibleReadSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonS3CompatibleReadSettingsOutput)
}

func (i AmazonS3CompatibleReadSettingsArgs) ToAmazonS3CompatibleReadSettingsPtrOutput() AmazonS3CompatibleReadSettingsPtrOutput {
	return i.ToAmazonS3CompatibleReadSettingsPtrOutputWithContext(context.Background())
}

func (i AmazonS3CompatibleReadSettingsArgs) ToAmazonS3CompatibleReadSettingsPtrOutputWithContext(ctx context.Context) AmazonS3CompatibleReadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonS3CompatibleReadSettingsOutput).ToAmazonS3CompatibleReadSettingsPtrOutputWithContext(ctx)
}

// AmazonS3CompatibleReadSettingsPtrInput is an input type that accepts AmazonS3CompatibleReadSettingsArgs, AmazonS3CompatibleReadSettingsPtr and AmazonS3CompatibleReadSettingsPtrOutput values.
// You can construct a concrete instance of `AmazonS3CompatibleReadSettingsPtrInput` via:
//
//	        AmazonS3CompatibleReadSettingsArgs{...}
//
//	or:
//
//	        nil
type AmazonS3CompatibleReadSettingsPtrInput interface {
	pulumi.Input

	ToAmazonS3CompatibleReadSettingsPtrOutput() AmazonS3CompatibleReadSettingsPtrOutput
	ToAmazonS3CompatibleReadSettingsPtrOutputWithContext(context.Context) AmazonS3CompatibleReadSettingsPtrOutput
}

type amazonS3CompatibleReadSettingsPtrType AmazonS3CompatibleReadSettingsArgs

func AmazonS3CompatibleReadSettingsPtr(v *AmazonS3CompatibleReadSettingsArgs) AmazonS3CompatibleReadSettingsPtrInput {
	return (*amazonS3CompatibleReadSettingsPtrType)(v)
}

func (*amazonS3CompatibleReadSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AmazonS3CompatibleReadSettings)(nil)).Elem()
}

func (i *amazonS3CompatibleReadSettingsPtrType) ToAmazonS3CompatibleReadSettingsPtrOutput() AmazonS3CompatibleReadSettingsPtrOutput {
	return i.ToAmazonS3CompatibleReadSettingsPtrOutputWithContext(context.Background())
}

func (i *amazonS3CompatibleReadSettingsPtrType) ToAmazonS3CompatibleReadSettingsPtrOutputWithContext(ctx context.Context) AmazonS3CompatibleReadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonS3CompatibleReadSettingsPtrOutput)
}

// Amazon S3 Compatible read settings.
type AmazonS3CompatibleReadSettingsOutput struct{ *pulumi.OutputState }

func (AmazonS3CompatibleReadSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonS3CompatibleReadSettings)(nil)).Elem()
}

func (o AmazonS3CompatibleReadSettingsOutput) ToAmazonS3CompatibleReadSettingsOutput() AmazonS3CompatibleReadSettingsOutput {
	return o
}

func (o AmazonS3CompatibleReadSettingsOutput) ToAmazonS3CompatibleReadSettingsOutputWithContext(ctx context.Context) AmazonS3CompatibleReadSettingsOutput {
	return o
}

func (o AmazonS3CompatibleReadSettingsOutput) ToAmazonS3CompatibleReadSettingsPtrOutput() AmazonS3CompatibleReadSettingsPtrOutput {
	return o.ToAmazonS3CompatibleReadSettingsPtrOutputWithContext(context.Background())
}

func (o AmazonS3CompatibleReadSettingsOutput) ToAmazonS3CompatibleReadSettingsPtrOutputWithContext(ctx context.Context) AmazonS3CompatibleReadSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AmazonS3CompatibleReadSettings) *AmazonS3CompatibleReadSettings {
		return &v
	}).(AmazonS3CompatibleReadSettingsPtrOutput)
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AmazonS3CompatibleReadSettingsOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3CompatibleReadSettings) interface{} { return v.DeleteFilesAfterCompletion }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AmazonS3CompatibleReadSettingsOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3CompatibleReadSettings) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o AmazonS3CompatibleReadSettingsOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3CompatibleReadSettings) interface{} { return v.EnablePartitionDiscovery }).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o AmazonS3CompatibleReadSettingsOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3CompatibleReadSettings) interface{} { return v.FileListPath }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AmazonS3CompatibleReadSettingsOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3CompatibleReadSettings) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o AmazonS3CompatibleReadSettingsOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3CompatibleReadSettings) interface{} { return v.ModifiedDatetimeEnd }).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o AmazonS3CompatibleReadSettingsOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3CompatibleReadSettings) interface{} { return v.ModifiedDatetimeStart }).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o AmazonS3CompatibleReadSettingsOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3CompatibleReadSettings) interface{} { return v.PartitionRootPath }).(pulumi.AnyOutput)
}

// The prefix filter for the S3 Compatible object name. Type: string (or Expression with resultType string).
func (o AmazonS3CompatibleReadSettingsOutput) Prefix() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3CompatibleReadSettings) interface{} { return v.Prefix }).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o AmazonS3CompatibleReadSettingsOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3CompatibleReadSettings) interface{} { return v.Recursive }).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'AmazonS3CompatibleReadSettings'.
func (o AmazonS3CompatibleReadSettingsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonS3CompatibleReadSettings) string { return v.Type }).(pulumi.StringOutput)
}

// Amazon S3 Compatible wildcardFileName. Type: string (or Expression with resultType string).
func (o AmazonS3CompatibleReadSettingsOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3CompatibleReadSettings) interface{} { return v.WildcardFileName }).(pulumi.AnyOutput)
}

// Amazon S3 Compatible wildcardFolderPath. Type: string (or Expression with resultType string).
func (o AmazonS3CompatibleReadSettingsOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3CompatibleReadSettings) interface{} { return v.WildcardFolderPath }).(pulumi.AnyOutput)
}

type AmazonS3CompatibleReadSettingsPtrOutput struct{ *pulumi.OutputState }

func (AmazonS3CompatibleReadSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AmazonS3CompatibleReadSettings)(nil)).Elem()
}

func (o AmazonS3CompatibleReadSettingsPtrOutput) ToAmazonS3CompatibleReadSettingsPtrOutput() AmazonS3CompatibleReadSettingsPtrOutput {
	return o
}

func (o AmazonS3CompatibleReadSettingsPtrOutput) ToAmazonS3CompatibleReadSettingsPtrOutputWithContext(ctx context.Context) AmazonS3CompatibleReadSettingsPtrOutput {
	return o
}

func (o AmazonS3CompatibleReadSettingsPtrOutput) Elem() AmazonS3CompatibleReadSettingsOutput {
	return o.ApplyT(func(v *AmazonS3CompatibleReadSettings) AmazonS3CompatibleReadSettings {
		if v != nil {
			return *v
		}
		var ret AmazonS3CompatibleReadSettings
		return ret
	}).(AmazonS3CompatibleReadSettingsOutput)
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AmazonS3CompatibleReadSettingsPtrOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3CompatibleReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.DeleteFilesAfterCompletion
	}).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AmazonS3CompatibleReadSettingsPtrOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3CompatibleReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableMetricsCollection
	}).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o AmazonS3CompatibleReadSettingsPtrOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3CompatibleReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.EnablePartitionDiscovery
	}).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o AmazonS3CompatibleReadSettingsPtrOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3CompatibleReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.FileListPath
	}).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AmazonS3CompatibleReadSettingsPtrOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3CompatibleReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentConnections
	}).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o AmazonS3CompatibleReadSettingsPtrOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3CompatibleReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeEnd
	}).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o AmazonS3CompatibleReadSettingsPtrOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3CompatibleReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeStart
	}).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o AmazonS3CompatibleReadSettingsPtrOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3CompatibleReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionRootPath
	}).(pulumi.AnyOutput)
}

// The prefix filter for the S3 Compatible object name. Type: string (or Expression with resultType string).
func (o AmazonS3CompatibleReadSettingsPtrOutput) Prefix() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3CompatibleReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.Prefix
	}).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o AmazonS3CompatibleReadSettingsPtrOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3CompatibleReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.Recursive
	}).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'AmazonS3CompatibleReadSettings'.
func (o AmazonS3CompatibleReadSettingsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AmazonS3CompatibleReadSettings) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Amazon S3 Compatible wildcardFileName. Type: string (or Expression with resultType string).
func (o AmazonS3CompatibleReadSettingsPtrOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3CompatibleReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFileName
	}).(pulumi.AnyOutput)
}

// Amazon S3 Compatible wildcardFolderPath. Type: string (or Expression with resultType string).
func (o AmazonS3CompatibleReadSettingsPtrOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3CompatibleReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFolderPath
	}).(pulumi.AnyOutput)
}

// Amazon S3 Compatible read settings.
type AmazonS3CompatibleReadSettingsResponse struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery interface{} `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// The prefix filter for the S3 Compatible object name. Type: string (or Expression with resultType string).
	Prefix interface{} `pulumi:"prefix"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'AmazonS3CompatibleReadSettings'.
	Type string `pulumi:"type"`
	// Amazon S3 Compatible wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Amazon S3 Compatible wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// Amazon S3 Compatible read settings.
type AmazonS3CompatibleReadSettingsResponseOutput struct{ *pulumi.OutputState }

func (AmazonS3CompatibleReadSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonS3CompatibleReadSettingsResponse)(nil)).Elem()
}

func (o AmazonS3CompatibleReadSettingsResponseOutput) ToAmazonS3CompatibleReadSettingsResponseOutput() AmazonS3CompatibleReadSettingsResponseOutput {
	return o
}

func (o AmazonS3CompatibleReadSettingsResponseOutput) ToAmazonS3CompatibleReadSettingsResponseOutputWithContext(ctx context.Context) AmazonS3CompatibleReadSettingsResponseOutput {
	return o
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AmazonS3CompatibleReadSettingsResponseOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3CompatibleReadSettingsResponse) interface{} { return v.DeleteFilesAfterCompletion }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AmazonS3CompatibleReadSettingsResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3CompatibleReadSettingsResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o AmazonS3CompatibleReadSettingsResponseOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3CompatibleReadSettingsResponse) interface{} { return v.EnablePartitionDiscovery }).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o AmazonS3CompatibleReadSettingsResponseOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3CompatibleReadSettingsResponse) interface{} { return v.FileListPath }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AmazonS3CompatibleReadSettingsResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3CompatibleReadSettingsResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o AmazonS3CompatibleReadSettingsResponseOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3CompatibleReadSettingsResponse) interface{} { return v.ModifiedDatetimeEnd }).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o AmazonS3CompatibleReadSettingsResponseOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3CompatibleReadSettingsResponse) interface{} { return v.ModifiedDatetimeStart }).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o AmazonS3CompatibleReadSettingsResponseOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3CompatibleReadSettingsResponse) interface{} { return v.PartitionRootPath }).(pulumi.AnyOutput)
}

// The prefix filter for the S3 Compatible object name. Type: string (or Expression with resultType string).
func (o AmazonS3CompatibleReadSettingsResponseOutput) Prefix() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3CompatibleReadSettingsResponse) interface{} { return v.Prefix }).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o AmazonS3CompatibleReadSettingsResponseOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3CompatibleReadSettingsResponse) interface{} { return v.Recursive }).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'AmazonS3CompatibleReadSettings'.
func (o AmazonS3CompatibleReadSettingsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonS3CompatibleReadSettingsResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Amazon S3 Compatible wildcardFileName. Type: string (or Expression with resultType string).
func (o AmazonS3CompatibleReadSettingsResponseOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3CompatibleReadSettingsResponse) interface{} { return v.WildcardFileName }).(pulumi.AnyOutput)
}

// Amazon S3 Compatible wildcardFolderPath. Type: string (or Expression with resultType string).
func (o AmazonS3CompatibleReadSettingsResponseOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3CompatibleReadSettingsResponse) interface{} { return v.WildcardFolderPath }).(pulumi.AnyOutput)
}

type AmazonS3CompatibleReadSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (AmazonS3CompatibleReadSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AmazonS3CompatibleReadSettingsResponse)(nil)).Elem()
}

func (o AmazonS3CompatibleReadSettingsResponsePtrOutput) ToAmazonS3CompatibleReadSettingsResponsePtrOutput() AmazonS3CompatibleReadSettingsResponsePtrOutput {
	return o
}

func (o AmazonS3CompatibleReadSettingsResponsePtrOutput) ToAmazonS3CompatibleReadSettingsResponsePtrOutputWithContext(ctx context.Context) AmazonS3CompatibleReadSettingsResponsePtrOutput {
	return o
}

func (o AmazonS3CompatibleReadSettingsResponsePtrOutput) Elem() AmazonS3CompatibleReadSettingsResponseOutput {
	return o.ApplyT(func(v *AmazonS3CompatibleReadSettingsResponse) AmazonS3CompatibleReadSettingsResponse {
		if v != nil {
			return *v
		}
		var ret AmazonS3CompatibleReadSettingsResponse
		return ret
	}).(AmazonS3CompatibleReadSettingsResponseOutput)
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AmazonS3CompatibleReadSettingsResponsePtrOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3CompatibleReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.DeleteFilesAfterCompletion
	}).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AmazonS3CompatibleReadSettingsResponsePtrOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3CompatibleReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableMetricsCollection
	}).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o AmazonS3CompatibleReadSettingsResponsePtrOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3CompatibleReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.EnablePartitionDiscovery
	}).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o AmazonS3CompatibleReadSettingsResponsePtrOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3CompatibleReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.FileListPath
	}).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AmazonS3CompatibleReadSettingsResponsePtrOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3CompatibleReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentConnections
	}).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o AmazonS3CompatibleReadSettingsResponsePtrOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3CompatibleReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeEnd
	}).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o AmazonS3CompatibleReadSettingsResponsePtrOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3CompatibleReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeStart
	}).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o AmazonS3CompatibleReadSettingsResponsePtrOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3CompatibleReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionRootPath
	}).(pulumi.AnyOutput)
}

// The prefix filter for the S3 Compatible object name. Type: string (or Expression with resultType string).
func (o AmazonS3CompatibleReadSettingsResponsePtrOutput) Prefix() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3CompatibleReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Prefix
	}).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o AmazonS3CompatibleReadSettingsResponsePtrOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3CompatibleReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Recursive
	}).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'AmazonS3CompatibleReadSettings'.
func (o AmazonS3CompatibleReadSettingsResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AmazonS3CompatibleReadSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Amazon S3 Compatible wildcardFileName. Type: string (or Expression with resultType string).
func (o AmazonS3CompatibleReadSettingsResponsePtrOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3CompatibleReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFileName
	}).(pulumi.AnyOutput)
}

// Amazon S3 Compatible wildcardFolderPath. Type: string (or Expression with resultType string).
func (o AmazonS3CompatibleReadSettingsResponsePtrOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3CompatibleReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFolderPath
	}).(pulumi.AnyOutput)
}

// A single Amazon Simple Storage Service (S3) object or a set of S3 objects.
type AmazonS3Dataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The name of the Amazon S3 bucket. Type: string (or Expression with resultType string).
	BucketName interface{} `pulumi:"bucketName"`
	// The data compression method used for the Amazon S3 object.
	Compression *DatasetCompression `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// The format of files.
	Format interface{} `pulumi:"format"`
	// The key of the Amazon S3 object. Type: string (or Expression with resultType string).
	Key interface{} `pulumi:"key"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The end of S3 object's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of S3 object's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The prefix filter for the S3 object name. Type: string (or Expression with resultType string).
	Prefix interface{} `pulumi:"prefix"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'AmazonS3Object'.
	Type string `pulumi:"type"`
	// The version for the S3 object. Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
}

// AmazonS3DatasetInput is an input type that accepts AmazonS3DatasetArgs and AmazonS3DatasetOutput values.
// You can construct a concrete instance of `AmazonS3DatasetInput` via:
//
//	AmazonS3DatasetArgs{...}
type AmazonS3DatasetInput interface {
	pulumi.Input

	ToAmazonS3DatasetOutput() AmazonS3DatasetOutput
	ToAmazonS3DatasetOutputWithContext(context.Context) AmazonS3DatasetOutput
}

// A single Amazon Simple Storage Service (S3) object or a set of S3 objects.
type AmazonS3DatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The name of the Amazon S3 bucket. Type: string (or Expression with resultType string).
	BucketName pulumi.Input `pulumi:"bucketName"`
	// The data compression method used for the Amazon S3 object.
	Compression DatasetCompressionPtrInput `pulumi:"compression"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// The format of files.
	Format pulumi.Input `pulumi:"format"`
	// The key of the Amazon S3 object. Type: string (or Expression with resultType string).
	Key pulumi.Input `pulumi:"key"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// The end of S3 object's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd pulumi.Input `pulumi:"modifiedDatetimeEnd"`
	// The start of S3 object's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart pulumi.Input `pulumi:"modifiedDatetimeStart"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The prefix filter for the S3 object name. Type: string (or Expression with resultType string).
	Prefix pulumi.Input `pulumi:"prefix"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'AmazonS3Object'.
	Type pulumi.StringInput `pulumi:"type"`
	// The version for the S3 object. Type: string (or Expression with resultType string).
	Version pulumi.Input `pulumi:"version"`
}

func (AmazonS3DatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonS3Dataset)(nil)).Elem()
}

func (i AmazonS3DatasetArgs) ToAmazonS3DatasetOutput() AmazonS3DatasetOutput {
	return i.ToAmazonS3DatasetOutputWithContext(context.Background())
}

func (i AmazonS3DatasetArgs) ToAmazonS3DatasetOutputWithContext(ctx context.Context) AmazonS3DatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonS3DatasetOutput)
}

// A single Amazon Simple Storage Service (S3) object or a set of S3 objects.
type AmazonS3DatasetOutput struct{ *pulumi.OutputState }

func (AmazonS3DatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonS3Dataset)(nil)).Elem()
}

func (o AmazonS3DatasetOutput) ToAmazonS3DatasetOutput() AmazonS3DatasetOutput {
	return o
}

func (o AmazonS3DatasetOutput) ToAmazonS3DatasetOutputWithContext(ctx context.Context) AmazonS3DatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AmazonS3DatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AmazonS3Dataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The name of the Amazon S3 bucket. Type: string (or Expression with resultType string).
func (o AmazonS3DatasetOutput) BucketName() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3Dataset) interface{} { return v.BucketName }).(pulumi.AnyOutput)
}

// The data compression method used for the Amazon S3 object.
func (o AmazonS3DatasetOutput) Compression() DatasetCompressionPtrOutput {
	return o.ApplyT(func(v AmazonS3Dataset) *DatasetCompression { return v.Compression }).(DatasetCompressionPtrOutput)
}

// Dataset description.
func (o AmazonS3DatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonS3Dataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AmazonS3DatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v AmazonS3Dataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// The format of files.
func (o AmazonS3DatasetOutput) Format() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3Dataset) interface{} { return v.Format }).(pulumi.AnyOutput)
}

// The key of the Amazon S3 object. Type: string (or Expression with resultType string).
func (o AmazonS3DatasetOutput) Key() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3Dataset) interface{} { return v.Key }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o AmazonS3DatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v AmazonS3Dataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// The end of S3 object's modified datetime. Type: string (or Expression with resultType string).
func (o AmazonS3DatasetOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3Dataset) interface{} { return v.ModifiedDatetimeEnd }).(pulumi.AnyOutput)
}

// The start of S3 object's modified datetime. Type: string (or Expression with resultType string).
func (o AmazonS3DatasetOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3Dataset) interface{} { return v.ModifiedDatetimeStart }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o AmazonS3DatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AmazonS3Dataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The prefix filter for the S3 object name. Type: string (or Expression with resultType string).
func (o AmazonS3DatasetOutput) Prefix() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3Dataset) interface{} { return v.Prefix }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AmazonS3DatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3Dataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AmazonS3DatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3Dataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'AmazonS3Object'.
func (o AmazonS3DatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonS3Dataset) string { return v.Type }).(pulumi.StringOutput)
}

// The version for the S3 object. Type: string (or Expression with resultType string).
func (o AmazonS3DatasetOutput) Version() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3Dataset) interface{} { return v.Version }).(pulumi.AnyOutput)
}

// A single Amazon Simple Storage Service (S3) object or a set of S3 objects.
type AmazonS3DatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The name of the Amazon S3 bucket. Type: string (or Expression with resultType string).
	BucketName interface{} `pulumi:"bucketName"`
	// The data compression method used for the Amazon S3 object.
	Compression *DatasetCompressionResponse `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// The format of files.
	Format interface{} `pulumi:"format"`
	// The key of the Amazon S3 object. Type: string (or Expression with resultType string).
	Key interface{} `pulumi:"key"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The end of S3 object's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of S3 object's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The prefix filter for the S3 object name. Type: string (or Expression with resultType string).
	Prefix interface{} `pulumi:"prefix"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'AmazonS3Object'.
	Type string `pulumi:"type"`
	// The version for the S3 object. Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
}

// A single Amazon Simple Storage Service (S3) object or a set of S3 objects.
type AmazonS3DatasetResponseOutput struct{ *pulumi.OutputState }

func (AmazonS3DatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonS3DatasetResponse)(nil)).Elem()
}

func (o AmazonS3DatasetResponseOutput) ToAmazonS3DatasetResponseOutput() AmazonS3DatasetResponseOutput {
	return o
}

func (o AmazonS3DatasetResponseOutput) ToAmazonS3DatasetResponseOutputWithContext(ctx context.Context) AmazonS3DatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AmazonS3DatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AmazonS3DatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The name of the Amazon S3 bucket. Type: string (or Expression with resultType string).
func (o AmazonS3DatasetResponseOutput) BucketName() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3DatasetResponse) interface{} { return v.BucketName }).(pulumi.AnyOutput)
}

// The data compression method used for the Amazon S3 object.
func (o AmazonS3DatasetResponseOutput) Compression() DatasetCompressionResponsePtrOutput {
	return o.ApplyT(func(v AmazonS3DatasetResponse) *DatasetCompressionResponse { return v.Compression }).(DatasetCompressionResponsePtrOutput)
}

// Dataset description.
func (o AmazonS3DatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonS3DatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AmazonS3DatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v AmazonS3DatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// The format of files.
func (o AmazonS3DatasetResponseOutput) Format() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3DatasetResponse) interface{} { return v.Format }).(pulumi.AnyOutput)
}

// The key of the Amazon S3 object. Type: string (or Expression with resultType string).
func (o AmazonS3DatasetResponseOutput) Key() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3DatasetResponse) interface{} { return v.Key }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o AmazonS3DatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AmazonS3DatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// The end of S3 object's modified datetime. Type: string (or Expression with resultType string).
func (o AmazonS3DatasetResponseOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3DatasetResponse) interface{} { return v.ModifiedDatetimeEnd }).(pulumi.AnyOutput)
}

// The start of S3 object's modified datetime. Type: string (or Expression with resultType string).
func (o AmazonS3DatasetResponseOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3DatasetResponse) interface{} { return v.ModifiedDatetimeStart }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o AmazonS3DatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AmazonS3DatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The prefix filter for the S3 object name. Type: string (or Expression with resultType string).
func (o AmazonS3DatasetResponseOutput) Prefix() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3DatasetResponse) interface{} { return v.Prefix }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AmazonS3DatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3DatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AmazonS3DatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3DatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'AmazonS3Object'.
func (o AmazonS3DatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonS3DatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The version for the S3 object. Type: string (or Expression with resultType string).
func (o AmazonS3DatasetResponseOutput) Version() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3DatasetResponse) interface{} { return v.Version }).(pulumi.AnyOutput)
}

// Linked service for Amazon S3.
type AmazonS3LinkedService struct {
	// The access key identifier of the Amazon S3 Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
	AccessKeyId interface{} `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type of S3. Allowed value: AccessKey (default) or TemporarySecurityCredentials. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The secret access key of the Amazon S3 Identity and Access Management (IAM) user.
	SecretAccessKey interface{} `pulumi:"secretAccessKey"`
	// This value specifies the endpoint to access with the S3 Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
	ServiceUrl interface{} `pulumi:"serviceUrl"`
	// The session token for the S3 temporary security credential.
	SessionToken interface{} `pulumi:"sessionToken"`
	// Type of linked service.
	// Expected value is 'AmazonS3'.
	Type string `pulumi:"type"`
}

// AmazonS3LinkedServiceInput is an input type that accepts AmazonS3LinkedServiceArgs and AmazonS3LinkedServiceOutput values.
// You can construct a concrete instance of `AmazonS3LinkedServiceInput` via:
//
//	AmazonS3LinkedServiceArgs{...}
type AmazonS3LinkedServiceInput interface {
	pulumi.Input

	ToAmazonS3LinkedServiceOutput() AmazonS3LinkedServiceOutput
	ToAmazonS3LinkedServiceOutputWithContext(context.Context) AmazonS3LinkedServiceOutput
}

// Linked service for Amazon S3.
type AmazonS3LinkedServiceArgs struct {
	// The access key identifier of the Amazon S3 Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
	AccessKeyId pulumi.Input `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication type of S3. Allowed value: AccessKey (default) or TemporarySecurityCredentials. Type: string (or Expression with resultType string).
	AuthenticationType pulumi.Input `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The secret access key of the Amazon S3 Identity and Access Management (IAM) user.
	SecretAccessKey pulumi.Input `pulumi:"secretAccessKey"`
	// This value specifies the endpoint to access with the S3 Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
	ServiceUrl pulumi.Input `pulumi:"serviceUrl"`
	// The session token for the S3 temporary security credential.
	SessionToken pulumi.Input `pulumi:"sessionToken"`
	// Type of linked service.
	// Expected value is 'AmazonS3'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AmazonS3LinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonS3LinkedService)(nil)).Elem()
}

func (i AmazonS3LinkedServiceArgs) ToAmazonS3LinkedServiceOutput() AmazonS3LinkedServiceOutput {
	return i.ToAmazonS3LinkedServiceOutputWithContext(context.Background())
}

func (i AmazonS3LinkedServiceArgs) ToAmazonS3LinkedServiceOutputWithContext(ctx context.Context) AmazonS3LinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonS3LinkedServiceOutput)
}

// Linked service for Amazon S3.
type AmazonS3LinkedServiceOutput struct{ *pulumi.OutputState }

func (AmazonS3LinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonS3LinkedService)(nil)).Elem()
}

func (o AmazonS3LinkedServiceOutput) ToAmazonS3LinkedServiceOutput() AmazonS3LinkedServiceOutput {
	return o
}

func (o AmazonS3LinkedServiceOutput) ToAmazonS3LinkedServiceOutputWithContext(ctx context.Context) AmazonS3LinkedServiceOutput {
	return o
}

// The access key identifier of the Amazon S3 Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
func (o AmazonS3LinkedServiceOutput) AccessKeyId() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3LinkedService) interface{} { return v.AccessKeyId }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o AmazonS3LinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AmazonS3LinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication type of S3. Allowed value: AccessKey (default) or TemporarySecurityCredentials. Type: string (or Expression with resultType string).
func (o AmazonS3LinkedServiceOutput) AuthenticationType() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3LinkedService) interface{} { return v.AuthenticationType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AmazonS3LinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AmazonS3LinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o AmazonS3LinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonS3LinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AmazonS3LinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonS3LinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AmazonS3LinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AmazonS3LinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The secret access key of the Amazon S3 Identity and Access Management (IAM) user.
func (o AmazonS3LinkedServiceOutput) SecretAccessKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3LinkedService) interface{} { return v.SecretAccessKey }).(pulumi.AnyOutput)
}

// This value specifies the endpoint to access with the S3 Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
func (o AmazonS3LinkedServiceOutput) ServiceUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3LinkedService) interface{} { return v.ServiceUrl }).(pulumi.AnyOutput)
}

// The session token for the S3 temporary security credential.
func (o AmazonS3LinkedServiceOutput) SessionToken() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3LinkedService) interface{} { return v.SessionToken }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AmazonS3'.
func (o AmazonS3LinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonS3LinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for Amazon S3.
type AmazonS3LinkedServiceResponse struct {
	// The access key identifier of the Amazon S3 Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
	AccessKeyId interface{} `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type of S3. Allowed value: AccessKey (default) or TemporarySecurityCredentials. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The secret access key of the Amazon S3 Identity and Access Management (IAM) user.
	SecretAccessKey interface{} `pulumi:"secretAccessKey"`
	// This value specifies the endpoint to access with the S3 Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
	ServiceUrl interface{} `pulumi:"serviceUrl"`
	// The session token for the S3 temporary security credential.
	SessionToken interface{} `pulumi:"sessionToken"`
	// Type of linked service.
	// Expected value is 'AmazonS3'.
	Type string `pulumi:"type"`
}

// Linked service for Amazon S3.
type AmazonS3LinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AmazonS3LinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonS3LinkedServiceResponse)(nil)).Elem()
}

func (o AmazonS3LinkedServiceResponseOutput) ToAmazonS3LinkedServiceResponseOutput() AmazonS3LinkedServiceResponseOutput {
	return o
}

func (o AmazonS3LinkedServiceResponseOutput) ToAmazonS3LinkedServiceResponseOutputWithContext(ctx context.Context) AmazonS3LinkedServiceResponseOutput {
	return o
}

// The access key identifier of the Amazon S3 Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
func (o AmazonS3LinkedServiceResponseOutput) AccessKeyId() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3LinkedServiceResponse) interface{} { return v.AccessKeyId }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o AmazonS3LinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AmazonS3LinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication type of S3. Allowed value: AccessKey (default) or TemporarySecurityCredentials. Type: string (or Expression with resultType string).
func (o AmazonS3LinkedServiceResponseOutput) AuthenticationType() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3LinkedServiceResponse) interface{} { return v.AuthenticationType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AmazonS3LinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AmazonS3LinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o AmazonS3LinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonS3LinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AmazonS3LinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmazonS3LinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AmazonS3LinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AmazonS3LinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The secret access key of the Amazon S3 Identity and Access Management (IAM) user.
func (o AmazonS3LinkedServiceResponseOutput) SecretAccessKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3LinkedServiceResponse) interface{} { return v.SecretAccessKey }).(pulumi.AnyOutput)
}

// This value specifies the endpoint to access with the S3 Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
func (o AmazonS3LinkedServiceResponseOutput) ServiceUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3LinkedServiceResponse) interface{} { return v.ServiceUrl }).(pulumi.AnyOutput)
}

// The session token for the S3 temporary security credential.
func (o AmazonS3LinkedServiceResponseOutput) SessionToken() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3LinkedServiceResponse) interface{} { return v.SessionToken }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AmazonS3'.
func (o AmazonS3LinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonS3LinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The location of amazon S3 dataset.
type AmazonS3Location struct {
	// Specify the bucketName of amazon S3. Type: string (or Expression with resultType string)
	BucketName interface{} `pulumi:"bucketName"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'AmazonS3Location'.
	Type string `pulumi:"type"`
	// Specify the version of amazon S3. Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
}

// AmazonS3LocationInput is an input type that accepts AmazonS3LocationArgs and AmazonS3LocationOutput values.
// You can construct a concrete instance of `AmazonS3LocationInput` via:
//
//	AmazonS3LocationArgs{...}
type AmazonS3LocationInput interface {
	pulumi.Input

	ToAmazonS3LocationOutput() AmazonS3LocationOutput
	ToAmazonS3LocationOutputWithContext(context.Context) AmazonS3LocationOutput
}

// The location of amazon S3 dataset.
type AmazonS3LocationArgs struct {
	// Specify the bucketName of amazon S3. Type: string (or Expression with resultType string)
	BucketName pulumi.Input `pulumi:"bucketName"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'AmazonS3Location'.
	Type pulumi.StringInput `pulumi:"type"`
	// Specify the version of amazon S3. Type: string (or Expression with resultType string).
	Version pulumi.Input `pulumi:"version"`
}

func (AmazonS3LocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonS3Location)(nil)).Elem()
}

func (i AmazonS3LocationArgs) ToAmazonS3LocationOutput() AmazonS3LocationOutput {
	return i.ToAmazonS3LocationOutputWithContext(context.Background())
}

func (i AmazonS3LocationArgs) ToAmazonS3LocationOutputWithContext(ctx context.Context) AmazonS3LocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonS3LocationOutput)
}

// The location of amazon S3 dataset.
type AmazonS3LocationOutput struct{ *pulumi.OutputState }

func (AmazonS3LocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonS3Location)(nil)).Elem()
}

func (o AmazonS3LocationOutput) ToAmazonS3LocationOutput() AmazonS3LocationOutput {
	return o
}

func (o AmazonS3LocationOutput) ToAmazonS3LocationOutputWithContext(ctx context.Context) AmazonS3LocationOutput {
	return o
}

// Specify the bucketName of amazon S3. Type: string (or Expression with resultType string)
func (o AmazonS3LocationOutput) BucketName() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3Location) interface{} { return v.BucketName }).(pulumi.AnyOutput)
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o AmazonS3LocationOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3Location) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o AmazonS3LocationOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3Location) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
// Expected value is 'AmazonS3Location'.
func (o AmazonS3LocationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonS3Location) string { return v.Type }).(pulumi.StringOutput)
}

// Specify the version of amazon S3. Type: string (or Expression with resultType string).
func (o AmazonS3LocationOutput) Version() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3Location) interface{} { return v.Version }).(pulumi.AnyOutput)
}

// The location of amazon S3 dataset.
type AmazonS3LocationResponse struct {
	// Specify the bucketName of amazon S3. Type: string (or Expression with resultType string)
	BucketName interface{} `pulumi:"bucketName"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'AmazonS3Location'.
	Type string `pulumi:"type"`
	// Specify the version of amazon S3. Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
}

// The location of amazon S3 dataset.
type AmazonS3LocationResponseOutput struct{ *pulumi.OutputState }

func (AmazonS3LocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonS3LocationResponse)(nil)).Elem()
}

func (o AmazonS3LocationResponseOutput) ToAmazonS3LocationResponseOutput() AmazonS3LocationResponseOutput {
	return o
}

func (o AmazonS3LocationResponseOutput) ToAmazonS3LocationResponseOutputWithContext(ctx context.Context) AmazonS3LocationResponseOutput {
	return o
}

// Specify the bucketName of amazon S3. Type: string (or Expression with resultType string)
func (o AmazonS3LocationResponseOutput) BucketName() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3LocationResponse) interface{} { return v.BucketName }).(pulumi.AnyOutput)
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o AmazonS3LocationResponseOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3LocationResponse) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o AmazonS3LocationResponseOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3LocationResponse) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
// Expected value is 'AmazonS3Location'.
func (o AmazonS3LocationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonS3LocationResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specify the version of amazon S3. Type: string (or Expression with resultType string).
func (o AmazonS3LocationResponseOutput) Version() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3LocationResponse) interface{} { return v.Version }).(pulumi.AnyOutput)
}

// Amazon S3 read settings.
type AmazonS3ReadSettings struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery interface{} `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// The prefix filter for the S3 object name. Type: string (or Expression with resultType string).
	Prefix interface{} `pulumi:"prefix"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'AmazonS3ReadSettings'.
	Type string `pulumi:"type"`
	// AmazonS3 wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// AmazonS3 wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// AmazonS3ReadSettingsInput is an input type that accepts AmazonS3ReadSettingsArgs and AmazonS3ReadSettingsOutput values.
// You can construct a concrete instance of `AmazonS3ReadSettingsInput` via:
//
//	AmazonS3ReadSettingsArgs{...}
type AmazonS3ReadSettingsInput interface {
	pulumi.Input

	ToAmazonS3ReadSettingsOutput() AmazonS3ReadSettingsOutput
	ToAmazonS3ReadSettingsOutputWithContext(context.Context) AmazonS3ReadSettingsOutput
}

// Amazon S3 read settings.
type AmazonS3ReadSettingsArgs struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion pulumi.Input `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery pulumi.Input `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath pulumi.Input `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd pulumi.Input `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart pulumi.Input `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath pulumi.Input `pulumi:"partitionRootPath"`
	// The prefix filter for the S3 object name. Type: string (or Expression with resultType string).
	Prefix pulumi.Input `pulumi:"prefix"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive pulumi.Input `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'AmazonS3ReadSettings'.
	Type pulumi.StringInput `pulumi:"type"`
	// AmazonS3 wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName pulumi.Input `pulumi:"wildcardFileName"`
	// AmazonS3 wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath pulumi.Input `pulumi:"wildcardFolderPath"`
}

func (AmazonS3ReadSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonS3ReadSettings)(nil)).Elem()
}

func (i AmazonS3ReadSettingsArgs) ToAmazonS3ReadSettingsOutput() AmazonS3ReadSettingsOutput {
	return i.ToAmazonS3ReadSettingsOutputWithContext(context.Background())
}

func (i AmazonS3ReadSettingsArgs) ToAmazonS3ReadSettingsOutputWithContext(ctx context.Context) AmazonS3ReadSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonS3ReadSettingsOutput)
}

func (i AmazonS3ReadSettingsArgs) ToAmazonS3ReadSettingsPtrOutput() AmazonS3ReadSettingsPtrOutput {
	return i.ToAmazonS3ReadSettingsPtrOutputWithContext(context.Background())
}

func (i AmazonS3ReadSettingsArgs) ToAmazonS3ReadSettingsPtrOutputWithContext(ctx context.Context) AmazonS3ReadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonS3ReadSettingsOutput).ToAmazonS3ReadSettingsPtrOutputWithContext(ctx)
}

// AmazonS3ReadSettingsPtrInput is an input type that accepts AmazonS3ReadSettingsArgs, AmazonS3ReadSettingsPtr and AmazonS3ReadSettingsPtrOutput values.
// You can construct a concrete instance of `AmazonS3ReadSettingsPtrInput` via:
//
//	        AmazonS3ReadSettingsArgs{...}
//
//	or:
//
//	        nil
type AmazonS3ReadSettingsPtrInput interface {
	pulumi.Input

	ToAmazonS3ReadSettingsPtrOutput() AmazonS3ReadSettingsPtrOutput
	ToAmazonS3ReadSettingsPtrOutputWithContext(context.Context) AmazonS3ReadSettingsPtrOutput
}

type amazonS3ReadSettingsPtrType AmazonS3ReadSettingsArgs

func AmazonS3ReadSettingsPtr(v *AmazonS3ReadSettingsArgs) AmazonS3ReadSettingsPtrInput {
	return (*amazonS3ReadSettingsPtrType)(v)
}

func (*amazonS3ReadSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AmazonS3ReadSettings)(nil)).Elem()
}

func (i *amazonS3ReadSettingsPtrType) ToAmazonS3ReadSettingsPtrOutput() AmazonS3ReadSettingsPtrOutput {
	return i.ToAmazonS3ReadSettingsPtrOutputWithContext(context.Background())
}

func (i *amazonS3ReadSettingsPtrType) ToAmazonS3ReadSettingsPtrOutputWithContext(ctx context.Context) AmazonS3ReadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmazonS3ReadSettingsPtrOutput)
}

// Amazon S3 read settings.
type AmazonS3ReadSettingsOutput struct{ *pulumi.OutputState }

func (AmazonS3ReadSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonS3ReadSettings)(nil)).Elem()
}

func (o AmazonS3ReadSettingsOutput) ToAmazonS3ReadSettingsOutput() AmazonS3ReadSettingsOutput {
	return o
}

func (o AmazonS3ReadSettingsOutput) ToAmazonS3ReadSettingsOutputWithContext(ctx context.Context) AmazonS3ReadSettingsOutput {
	return o
}

func (o AmazonS3ReadSettingsOutput) ToAmazonS3ReadSettingsPtrOutput() AmazonS3ReadSettingsPtrOutput {
	return o.ToAmazonS3ReadSettingsPtrOutputWithContext(context.Background())
}

func (o AmazonS3ReadSettingsOutput) ToAmazonS3ReadSettingsPtrOutputWithContext(ctx context.Context) AmazonS3ReadSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AmazonS3ReadSettings) *AmazonS3ReadSettings {
		return &v
	}).(AmazonS3ReadSettingsPtrOutput)
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AmazonS3ReadSettingsOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3ReadSettings) interface{} { return v.DeleteFilesAfterCompletion }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AmazonS3ReadSettingsOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3ReadSettings) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o AmazonS3ReadSettingsOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3ReadSettings) interface{} { return v.EnablePartitionDiscovery }).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o AmazonS3ReadSettingsOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3ReadSettings) interface{} { return v.FileListPath }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AmazonS3ReadSettingsOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3ReadSettings) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o AmazonS3ReadSettingsOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3ReadSettings) interface{} { return v.ModifiedDatetimeEnd }).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o AmazonS3ReadSettingsOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3ReadSettings) interface{} { return v.ModifiedDatetimeStart }).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o AmazonS3ReadSettingsOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3ReadSettings) interface{} { return v.PartitionRootPath }).(pulumi.AnyOutput)
}

// The prefix filter for the S3 object name. Type: string (or Expression with resultType string).
func (o AmazonS3ReadSettingsOutput) Prefix() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3ReadSettings) interface{} { return v.Prefix }).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o AmazonS3ReadSettingsOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3ReadSettings) interface{} { return v.Recursive }).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'AmazonS3ReadSettings'.
func (o AmazonS3ReadSettingsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonS3ReadSettings) string { return v.Type }).(pulumi.StringOutput)
}

// AmazonS3 wildcardFileName. Type: string (or Expression with resultType string).
func (o AmazonS3ReadSettingsOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3ReadSettings) interface{} { return v.WildcardFileName }).(pulumi.AnyOutput)
}

// AmazonS3 wildcardFolderPath. Type: string (or Expression with resultType string).
func (o AmazonS3ReadSettingsOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3ReadSettings) interface{} { return v.WildcardFolderPath }).(pulumi.AnyOutput)
}

type AmazonS3ReadSettingsPtrOutput struct{ *pulumi.OutputState }

func (AmazonS3ReadSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AmazonS3ReadSettings)(nil)).Elem()
}

func (o AmazonS3ReadSettingsPtrOutput) ToAmazonS3ReadSettingsPtrOutput() AmazonS3ReadSettingsPtrOutput {
	return o
}

func (o AmazonS3ReadSettingsPtrOutput) ToAmazonS3ReadSettingsPtrOutputWithContext(ctx context.Context) AmazonS3ReadSettingsPtrOutput {
	return o
}

func (o AmazonS3ReadSettingsPtrOutput) Elem() AmazonS3ReadSettingsOutput {
	return o.ApplyT(func(v *AmazonS3ReadSettings) AmazonS3ReadSettings {
		if v != nil {
			return *v
		}
		var ret AmazonS3ReadSettings
		return ret
	}).(AmazonS3ReadSettingsOutput)
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AmazonS3ReadSettingsPtrOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3ReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.DeleteFilesAfterCompletion
	}).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AmazonS3ReadSettingsPtrOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3ReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableMetricsCollection
	}).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o AmazonS3ReadSettingsPtrOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3ReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.EnablePartitionDiscovery
	}).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o AmazonS3ReadSettingsPtrOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3ReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.FileListPath
	}).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AmazonS3ReadSettingsPtrOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3ReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentConnections
	}).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o AmazonS3ReadSettingsPtrOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3ReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeEnd
	}).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o AmazonS3ReadSettingsPtrOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3ReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeStart
	}).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o AmazonS3ReadSettingsPtrOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3ReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionRootPath
	}).(pulumi.AnyOutput)
}

// The prefix filter for the S3 object name. Type: string (or Expression with resultType string).
func (o AmazonS3ReadSettingsPtrOutput) Prefix() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3ReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.Prefix
	}).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o AmazonS3ReadSettingsPtrOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3ReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.Recursive
	}).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'AmazonS3ReadSettings'.
func (o AmazonS3ReadSettingsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AmazonS3ReadSettings) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// AmazonS3 wildcardFileName. Type: string (or Expression with resultType string).
func (o AmazonS3ReadSettingsPtrOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3ReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFileName
	}).(pulumi.AnyOutput)
}

// AmazonS3 wildcardFolderPath. Type: string (or Expression with resultType string).
func (o AmazonS3ReadSettingsPtrOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3ReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFolderPath
	}).(pulumi.AnyOutput)
}

// Amazon S3 read settings.
type AmazonS3ReadSettingsResponse struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery interface{} `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// The prefix filter for the S3 object name. Type: string (or Expression with resultType string).
	Prefix interface{} `pulumi:"prefix"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'AmazonS3ReadSettings'.
	Type string `pulumi:"type"`
	// AmazonS3 wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// AmazonS3 wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// Amazon S3 read settings.
type AmazonS3ReadSettingsResponseOutput struct{ *pulumi.OutputState }

func (AmazonS3ReadSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmazonS3ReadSettingsResponse)(nil)).Elem()
}

func (o AmazonS3ReadSettingsResponseOutput) ToAmazonS3ReadSettingsResponseOutput() AmazonS3ReadSettingsResponseOutput {
	return o
}

func (o AmazonS3ReadSettingsResponseOutput) ToAmazonS3ReadSettingsResponseOutputWithContext(ctx context.Context) AmazonS3ReadSettingsResponseOutput {
	return o
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AmazonS3ReadSettingsResponseOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3ReadSettingsResponse) interface{} { return v.DeleteFilesAfterCompletion }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AmazonS3ReadSettingsResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3ReadSettingsResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o AmazonS3ReadSettingsResponseOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3ReadSettingsResponse) interface{} { return v.EnablePartitionDiscovery }).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o AmazonS3ReadSettingsResponseOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3ReadSettingsResponse) interface{} { return v.FileListPath }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AmazonS3ReadSettingsResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3ReadSettingsResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o AmazonS3ReadSettingsResponseOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3ReadSettingsResponse) interface{} { return v.ModifiedDatetimeEnd }).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o AmazonS3ReadSettingsResponseOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3ReadSettingsResponse) interface{} { return v.ModifiedDatetimeStart }).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o AmazonS3ReadSettingsResponseOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3ReadSettingsResponse) interface{} { return v.PartitionRootPath }).(pulumi.AnyOutput)
}

// The prefix filter for the S3 object name. Type: string (or Expression with resultType string).
func (o AmazonS3ReadSettingsResponseOutput) Prefix() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3ReadSettingsResponse) interface{} { return v.Prefix }).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o AmazonS3ReadSettingsResponseOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3ReadSettingsResponse) interface{} { return v.Recursive }).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'AmazonS3ReadSettings'.
func (o AmazonS3ReadSettingsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AmazonS3ReadSettingsResponse) string { return v.Type }).(pulumi.StringOutput)
}

// AmazonS3 wildcardFileName. Type: string (or Expression with resultType string).
func (o AmazonS3ReadSettingsResponseOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3ReadSettingsResponse) interface{} { return v.WildcardFileName }).(pulumi.AnyOutput)
}

// AmazonS3 wildcardFolderPath. Type: string (or Expression with resultType string).
func (o AmazonS3ReadSettingsResponseOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AmazonS3ReadSettingsResponse) interface{} { return v.WildcardFolderPath }).(pulumi.AnyOutput)
}

type AmazonS3ReadSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (AmazonS3ReadSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AmazonS3ReadSettingsResponse)(nil)).Elem()
}

func (o AmazonS3ReadSettingsResponsePtrOutput) ToAmazonS3ReadSettingsResponsePtrOutput() AmazonS3ReadSettingsResponsePtrOutput {
	return o
}

func (o AmazonS3ReadSettingsResponsePtrOutput) ToAmazonS3ReadSettingsResponsePtrOutputWithContext(ctx context.Context) AmazonS3ReadSettingsResponsePtrOutput {
	return o
}

func (o AmazonS3ReadSettingsResponsePtrOutput) Elem() AmazonS3ReadSettingsResponseOutput {
	return o.ApplyT(func(v *AmazonS3ReadSettingsResponse) AmazonS3ReadSettingsResponse {
		if v != nil {
			return *v
		}
		var ret AmazonS3ReadSettingsResponse
		return ret
	}).(AmazonS3ReadSettingsResponseOutput)
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AmazonS3ReadSettingsResponsePtrOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3ReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.DeleteFilesAfterCompletion
	}).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AmazonS3ReadSettingsResponsePtrOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3ReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableMetricsCollection
	}).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o AmazonS3ReadSettingsResponsePtrOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3ReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.EnablePartitionDiscovery
	}).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o AmazonS3ReadSettingsResponsePtrOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3ReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.FileListPath
	}).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AmazonS3ReadSettingsResponsePtrOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3ReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentConnections
	}).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o AmazonS3ReadSettingsResponsePtrOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3ReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeEnd
	}).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o AmazonS3ReadSettingsResponsePtrOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3ReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeStart
	}).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o AmazonS3ReadSettingsResponsePtrOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3ReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionRootPath
	}).(pulumi.AnyOutput)
}

// The prefix filter for the S3 object name. Type: string (or Expression with resultType string).
func (o AmazonS3ReadSettingsResponsePtrOutput) Prefix() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3ReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Prefix
	}).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o AmazonS3ReadSettingsResponsePtrOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3ReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Recursive
	}).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'AmazonS3ReadSettings'.
func (o AmazonS3ReadSettingsResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AmazonS3ReadSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// AmazonS3 wildcardFileName. Type: string (or Expression with resultType string).
func (o AmazonS3ReadSettingsResponsePtrOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3ReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFileName
	}).(pulumi.AnyOutput)
}

// AmazonS3 wildcardFolderPath. Type: string (or Expression with resultType string).
func (o AmazonS3ReadSettingsResponsePtrOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmazonS3ReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFolderPath
	}).(pulumi.AnyOutput)
}

// Linked service for AppFigures.
type AppFiguresLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client key for the AppFigures source.
	ClientKey interface{} `pulumi:"clientKey"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password of the AppFigures source.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'AppFigures'.
	Type string `pulumi:"type"`
	// The username of the Appfigures source. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// AppFiguresLinkedServiceInput is an input type that accepts AppFiguresLinkedServiceArgs and AppFiguresLinkedServiceOutput values.
// You can construct a concrete instance of `AppFiguresLinkedServiceInput` via:
//
//	AppFiguresLinkedServiceArgs{...}
type AppFiguresLinkedServiceInput interface {
	pulumi.Input

	ToAppFiguresLinkedServiceOutput() AppFiguresLinkedServiceOutput
	ToAppFiguresLinkedServiceOutputWithContext(context.Context) AppFiguresLinkedServiceOutput
}

// Linked service for AppFigures.
type AppFiguresLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The client key for the AppFigures source.
	ClientKey pulumi.Input `pulumi:"clientKey"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password of the AppFigures source.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'AppFigures'.
	Type pulumi.StringInput `pulumi:"type"`
	// The username of the Appfigures source. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (AppFiguresLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppFiguresLinkedService)(nil)).Elem()
}

func (i AppFiguresLinkedServiceArgs) ToAppFiguresLinkedServiceOutput() AppFiguresLinkedServiceOutput {
	return i.ToAppFiguresLinkedServiceOutputWithContext(context.Background())
}

func (i AppFiguresLinkedServiceArgs) ToAppFiguresLinkedServiceOutputWithContext(ctx context.Context) AppFiguresLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppFiguresLinkedServiceOutput)
}

// Linked service for AppFigures.
type AppFiguresLinkedServiceOutput struct{ *pulumi.OutputState }

func (AppFiguresLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppFiguresLinkedService)(nil)).Elem()
}

func (o AppFiguresLinkedServiceOutput) ToAppFiguresLinkedServiceOutput() AppFiguresLinkedServiceOutput {
	return o
}

func (o AppFiguresLinkedServiceOutput) ToAppFiguresLinkedServiceOutputWithContext(ctx context.Context) AppFiguresLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AppFiguresLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AppFiguresLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The client key for the AppFigures source.
func (o AppFiguresLinkedServiceOutput) ClientKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AppFiguresLinkedService) interface{} { return v.ClientKey }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AppFiguresLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AppFiguresLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o AppFiguresLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppFiguresLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AppFiguresLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AppFiguresLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The password of the AppFigures source.
func (o AppFiguresLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v AppFiguresLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AppFigures'.
func (o AppFiguresLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AppFiguresLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The username of the Appfigures source. Type: string (or Expression with resultType string).
func (o AppFiguresLinkedServiceOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v AppFiguresLinkedService) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// Linked service for AppFigures.
type AppFiguresLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The client key for the AppFigures source.
	ClientKey interface{} `pulumi:"clientKey"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password of the AppFigures source.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'AppFigures'.
	Type string `pulumi:"type"`
	// The username of the Appfigures source. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// Linked service for AppFigures.
type AppFiguresLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AppFiguresLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppFiguresLinkedServiceResponse)(nil)).Elem()
}

func (o AppFiguresLinkedServiceResponseOutput) ToAppFiguresLinkedServiceResponseOutput() AppFiguresLinkedServiceResponseOutput {
	return o
}

func (o AppFiguresLinkedServiceResponseOutput) ToAppFiguresLinkedServiceResponseOutputWithContext(ctx context.Context) AppFiguresLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AppFiguresLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AppFiguresLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The client key for the AppFigures source.
func (o AppFiguresLinkedServiceResponseOutput) ClientKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AppFiguresLinkedServiceResponse) interface{} { return v.ClientKey }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AppFiguresLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AppFiguresLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o AppFiguresLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppFiguresLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AppFiguresLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AppFiguresLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The password of the AppFigures source.
func (o AppFiguresLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v AppFiguresLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AppFigures'.
func (o AppFiguresLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AppFiguresLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The username of the Appfigures source. Type: string (or Expression with resultType string).
func (o AppFiguresLinkedServiceResponseOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v AppFiguresLinkedServiceResponse) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// Append value for a Variable of type Array.
type AppendVariableActivity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'AppendVariable'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
	// Value to be appended. Type: could be a static value matching type of the variable item or Expression with resultType matching type of the variable item
	Value interface{} `pulumi:"value"`
	// Name of the variable whose value needs to be appended to.
	VariableName *string `pulumi:"variableName"`
}

// AppendVariableActivityInput is an input type that accepts AppendVariableActivityArgs and AppendVariableActivityOutput values.
// You can construct a concrete instance of `AppendVariableActivityInput` via:
//
//	AppendVariableActivityArgs{...}
type AppendVariableActivityInput interface {
	pulumi.Input

	ToAppendVariableActivityOutput() AppendVariableActivityOutput
	ToAppendVariableActivityOutputWithContext(context.Context) AppendVariableActivityOutput
}

// Append value for a Variable of type Array.
type AppendVariableActivityArgs struct {
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs pulumi.StringPtrInput `pulumi:"onInactiveMarkAs"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Type of activity.
	// Expected value is 'AppendVariable'.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
	// Value to be appended. Type: could be a static value matching type of the variable item or Expression with resultType matching type of the variable item
	Value pulumi.Input `pulumi:"value"`
	// Name of the variable whose value needs to be appended to.
	VariableName pulumi.StringPtrInput `pulumi:"variableName"`
}

func (AppendVariableActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppendVariableActivity)(nil)).Elem()
}

func (i AppendVariableActivityArgs) ToAppendVariableActivityOutput() AppendVariableActivityOutput {
	return i.ToAppendVariableActivityOutputWithContext(context.Background())
}

func (i AppendVariableActivityArgs) ToAppendVariableActivityOutputWithContext(ctx context.Context) AppendVariableActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppendVariableActivityOutput)
}

// Append value for a Variable of type Array.
type AppendVariableActivityOutput struct{ *pulumi.OutputState }

func (AppendVariableActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppendVariableActivity)(nil)).Elem()
}

func (o AppendVariableActivityOutput) ToAppendVariableActivityOutput() AppendVariableActivityOutput {
	return o
}

func (o AppendVariableActivityOutput) ToAppendVariableActivityOutputWithContext(ctx context.Context) AppendVariableActivityOutput {
	return o
}

// Activity depends on condition.
func (o AppendVariableActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v AppendVariableActivity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o AppendVariableActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppendVariableActivity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Activity name.
func (o AppendVariableActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AppendVariableActivity) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o AppendVariableActivityOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppendVariableActivity) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o AppendVariableActivityOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppendVariableActivity) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'AppendVariable'.
func (o AppendVariableActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AppendVariableActivity) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o AppendVariableActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v AppendVariableActivity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

// Value to be appended. Type: could be a static value matching type of the variable item or Expression with resultType matching type of the variable item
func (o AppendVariableActivityOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v AppendVariableActivity) interface{} { return v.Value }).(pulumi.AnyOutput)
}

// Name of the variable whose value needs to be appended to.
func (o AppendVariableActivityOutput) VariableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppendVariableActivity) *string { return v.VariableName }).(pulumi.StringPtrOutput)
}

// Append value for a Variable of type Array.
type AppendVariableActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'AppendVariable'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
	// Value to be appended. Type: could be a static value matching type of the variable item or Expression with resultType matching type of the variable item
	Value interface{} `pulumi:"value"`
	// Name of the variable whose value needs to be appended to.
	VariableName *string `pulumi:"variableName"`
}

// Append value for a Variable of type Array.
type AppendVariableActivityResponseOutput struct{ *pulumi.OutputState }

func (AppendVariableActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppendVariableActivityResponse)(nil)).Elem()
}

func (o AppendVariableActivityResponseOutput) ToAppendVariableActivityResponseOutput() AppendVariableActivityResponseOutput {
	return o
}

func (o AppendVariableActivityResponseOutput) ToAppendVariableActivityResponseOutputWithContext(ctx context.Context) AppendVariableActivityResponseOutput {
	return o
}

// Activity depends on condition.
func (o AppendVariableActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v AppendVariableActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o AppendVariableActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppendVariableActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Activity name.
func (o AppendVariableActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AppendVariableActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o AppendVariableActivityResponseOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppendVariableActivityResponse) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o AppendVariableActivityResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppendVariableActivityResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'AppendVariable'.
func (o AppendVariableActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AppendVariableActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o AppendVariableActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v AppendVariableActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

// Value to be appended. Type: could be a static value matching type of the variable item or Expression with resultType matching type of the variable item
func (o AppendVariableActivityResponseOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v AppendVariableActivityResponse) interface{} { return v.Value }).(pulumi.AnyOutput)
}

// Name of the variable whose value needs to be appended to.
func (o AppendVariableActivityResponseOutput) VariableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppendVariableActivityResponse) *string { return v.VariableName }).(pulumi.StringPtrOutput)
}

// A wrapper for an ARM resource id
type ArmIdWrapperResponse struct {
	Id string `pulumi:"id"`
}

// A wrapper for an ARM resource id
type ArmIdWrapperResponseOutput struct{ *pulumi.OutputState }

func (ArmIdWrapperResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmIdWrapperResponse)(nil)).Elem()
}

func (o ArmIdWrapperResponseOutput) ToArmIdWrapperResponseOutput() ArmIdWrapperResponseOutput {
	return o
}

func (o ArmIdWrapperResponseOutput) ToArmIdWrapperResponseOutputWithContext(ctx context.Context) ArmIdWrapperResponseOutput {
	return o
}

func (o ArmIdWrapperResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ArmIdWrapperResponse) string { return v.Id }).(pulumi.StringOutput)
}

type ArmIdWrapperResponsePtrOutput struct{ *pulumi.OutputState }

func (ArmIdWrapperResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmIdWrapperResponse)(nil)).Elem()
}

func (o ArmIdWrapperResponsePtrOutput) ToArmIdWrapperResponsePtrOutput() ArmIdWrapperResponsePtrOutput {
	return o
}

func (o ArmIdWrapperResponsePtrOutput) ToArmIdWrapperResponsePtrOutputWithContext(ctx context.Context) ArmIdWrapperResponsePtrOutput {
	return o
}

func (o ArmIdWrapperResponsePtrOutput) Elem() ArmIdWrapperResponseOutput {
	return o.ApplyT(func(v *ArmIdWrapperResponse) ArmIdWrapperResponse {
		if v != nil {
			return *v
		}
		var ret ArmIdWrapperResponse
		return ret
	}).(ArmIdWrapperResponseOutput)
}

func (o ArmIdWrapperResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmIdWrapperResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Linked service for Asana.
type AsanaLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The api token for the Asana source.
	ApiToken interface{} `pulumi:"apiToken"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Asana'.
	Type string `pulumi:"type"`
}

// AsanaLinkedServiceInput is an input type that accepts AsanaLinkedServiceArgs and AsanaLinkedServiceOutput values.
// You can construct a concrete instance of `AsanaLinkedServiceInput` via:
//
//	AsanaLinkedServiceArgs{...}
type AsanaLinkedServiceInput interface {
	pulumi.Input

	ToAsanaLinkedServiceOutput() AsanaLinkedServiceOutput
	ToAsanaLinkedServiceOutputWithContext(context.Context) AsanaLinkedServiceOutput
}

// Linked service for Asana.
type AsanaLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The api token for the Asana source.
	ApiToken pulumi.Input `pulumi:"apiToken"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Asana'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AsanaLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AsanaLinkedService)(nil)).Elem()
}

func (i AsanaLinkedServiceArgs) ToAsanaLinkedServiceOutput() AsanaLinkedServiceOutput {
	return i.ToAsanaLinkedServiceOutputWithContext(context.Background())
}

func (i AsanaLinkedServiceArgs) ToAsanaLinkedServiceOutputWithContext(ctx context.Context) AsanaLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AsanaLinkedServiceOutput)
}

// Linked service for Asana.
type AsanaLinkedServiceOutput struct{ *pulumi.OutputState }

func (AsanaLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AsanaLinkedService)(nil)).Elem()
}

func (o AsanaLinkedServiceOutput) ToAsanaLinkedServiceOutput() AsanaLinkedServiceOutput {
	return o
}

func (o AsanaLinkedServiceOutput) ToAsanaLinkedServiceOutputWithContext(ctx context.Context) AsanaLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AsanaLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AsanaLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The api token for the Asana source.
func (o AsanaLinkedServiceOutput) ApiToken() pulumi.AnyOutput {
	return o.ApplyT(func(v AsanaLinkedService) interface{} { return v.ApiToken }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AsanaLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AsanaLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o AsanaLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AsanaLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AsanaLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AsanaLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AsanaLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AsanaLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
// Expected value is 'Asana'.
func (o AsanaLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AsanaLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for Asana.
type AsanaLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The api token for the Asana source.
	ApiToken interface{} `pulumi:"apiToken"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Asana'.
	Type string `pulumi:"type"`
}

// Linked service for Asana.
type AsanaLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AsanaLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AsanaLinkedServiceResponse)(nil)).Elem()
}

func (o AsanaLinkedServiceResponseOutput) ToAsanaLinkedServiceResponseOutput() AsanaLinkedServiceResponseOutput {
	return o
}

func (o AsanaLinkedServiceResponseOutput) ToAsanaLinkedServiceResponseOutputWithContext(ctx context.Context) AsanaLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AsanaLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AsanaLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The api token for the Asana source.
func (o AsanaLinkedServiceResponseOutput) ApiToken() pulumi.AnyOutput {
	return o.ApplyT(func(v AsanaLinkedServiceResponse) interface{} { return v.ApiToken }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AsanaLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AsanaLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o AsanaLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AsanaLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AsanaLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AsanaLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AsanaLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AsanaLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
// Expected value is 'Asana'.
func (o AsanaLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AsanaLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Avro dataset.
type AvroDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data avroCompressionCodec. Type: string (or Expression with resultType string).
	AvroCompressionCodec interface{} `pulumi:"avroCompressionCodec"`
	AvroCompressionLevel *int        `pulumi:"avroCompressionLevel"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The location of the avro storage.
	Location interface{} `pulumi:"location"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Avro'.
	Type string `pulumi:"type"`
}

// AvroDatasetInput is an input type that accepts AvroDatasetArgs and AvroDatasetOutput values.
// You can construct a concrete instance of `AvroDatasetInput` via:
//
//	AvroDatasetArgs{...}
type AvroDatasetInput interface {
	pulumi.Input

	ToAvroDatasetOutput() AvroDatasetOutput
	ToAvroDatasetOutputWithContext(context.Context) AvroDatasetOutput
}

// Avro dataset.
type AvroDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The data avroCompressionCodec. Type: string (or Expression with resultType string).
	AvroCompressionCodec pulumi.Input       `pulumi:"avroCompressionCodec"`
	AvroCompressionLevel pulumi.IntPtrInput `pulumi:"avroCompressionLevel"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// The location of the avro storage.
	Location pulumi.Input `pulumi:"location"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Avro'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AvroDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AvroDataset)(nil)).Elem()
}

func (i AvroDatasetArgs) ToAvroDatasetOutput() AvroDatasetOutput {
	return i.ToAvroDatasetOutputWithContext(context.Background())
}

func (i AvroDatasetArgs) ToAvroDatasetOutputWithContext(ctx context.Context) AvroDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvroDatasetOutput)
}

// Avro dataset.
type AvroDatasetOutput struct{ *pulumi.OutputState }

func (AvroDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AvroDataset)(nil)).Elem()
}

func (o AvroDatasetOutput) ToAvroDatasetOutput() AvroDatasetOutput {
	return o
}

func (o AvroDatasetOutput) ToAvroDatasetOutputWithContext(ctx context.Context) AvroDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AvroDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AvroDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The data avroCompressionCodec. Type: string (or Expression with resultType string).
func (o AvroDatasetOutput) AvroCompressionCodec() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroDataset) interface{} { return v.AvroCompressionCodec }).(pulumi.AnyOutput)
}

func (o AvroDatasetOutput) AvroCompressionLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AvroDataset) *int { return v.AvroCompressionLevel }).(pulumi.IntPtrOutput)
}

// Dataset description.
func (o AvroDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AvroDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AvroDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v AvroDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o AvroDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v AvroDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// The location of the avro storage.
func (o AvroDatasetOutput) Location() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroDataset) interface{} { return v.Location }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o AvroDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AvroDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AvroDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AvroDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'Avro'.
func (o AvroDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AvroDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Avro dataset.
type AvroDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data avroCompressionCodec. Type: string (or Expression with resultType string).
	AvroCompressionCodec interface{} `pulumi:"avroCompressionCodec"`
	AvroCompressionLevel *int        `pulumi:"avroCompressionLevel"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The location of the avro storage.
	Location interface{} `pulumi:"location"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Avro'.
	Type string `pulumi:"type"`
}

// Avro dataset.
type AvroDatasetResponseOutput struct{ *pulumi.OutputState }

func (AvroDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AvroDatasetResponse)(nil)).Elem()
}

func (o AvroDatasetResponseOutput) ToAvroDatasetResponseOutput() AvroDatasetResponseOutput {
	return o
}

func (o AvroDatasetResponseOutput) ToAvroDatasetResponseOutputWithContext(ctx context.Context) AvroDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AvroDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AvroDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The data avroCompressionCodec. Type: string (or Expression with resultType string).
func (o AvroDatasetResponseOutput) AvroCompressionCodec() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroDatasetResponse) interface{} { return v.AvroCompressionCodec }).(pulumi.AnyOutput)
}

func (o AvroDatasetResponseOutput) AvroCompressionLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AvroDatasetResponse) *int { return v.AvroCompressionLevel }).(pulumi.IntPtrOutput)
}

// Dataset description.
func (o AvroDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AvroDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AvroDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v AvroDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o AvroDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AvroDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// The location of the avro storage.
func (o AvroDatasetResponseOutput) Location() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroDatasetResponse) interface{} { return v.Location }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o AvroDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AvroDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AvroDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AvroDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'Avro'.
func (o AvroDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AvroDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The data stored in Avro format.
type AvroFormat struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer interface{} `pulumi:"deserializer"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer interface{} `pulumi:"serializer"`
	// Type of dataset storage format.
	// Expected value is 'AvroFormat'.
	Type string `pulumi:"type"`
}

// AvroFormatInput is an input type that accepts AvroFormatArgs and AvroFormatOutput values.
// You can construct a concrete instance of `AvroFormatInput` via:
//
//	AvroFormatArgs{...}
type AvroFormatInput interface {
	pulumi.Input

	ToAvroFormatOutput() AvroFormatOutput
	ToAvroFormatOutputWithContext(context.Context) AvroFormatOutput
}

// The data stored in Avro format.
type AvroFormatArgs struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer pulumi.Input `pulumi:"deserializer"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer pulumi.Input `pulumi:"serializer"`
	// Type of dataset storage format.
	// Expected value is 'AvroFormat'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AvroFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AvroFormat)(nil)).Elem()
}

func (i AvroFormatArgs) ToAvroFormatOutput() AvroFormatOutput {
	return i.ToAvroFormatOutputWithContext(context.Background())
}

func (i AvroFormatArgs) ToAvroFormatOutputWithContext(ctx context.Context) AvroFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvroFormatOutput)
}

func (i AvroFormatArgs) ToAvroFormatPtrOutput() AvroFormatPtrOutput {
	return i.ToAvroFormatPtrOutputWithContext(context.Background())
}

func (i AvroFormatArgs) ToAvroFormatPtrOutputWithContext(ctx context.Context) AvroFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvroFormatOutput).ToAvroFormatPtrOutputWithContext(ctx)
}

// AvroFormatPtrInput is an input type that accepts AvroFormatArgs, AvroFormatPtr and AvroFormatPtrOutput values.
// You can construct a concrete instance of `AvroFormatPtrInput` via:
//
//	        AvroFormatArgs{...}
//
//	or:
//
//	        nil
type AvroFormatPtrInput interface {
	pulumi.Input

	ToAvroFormatPtrOutput() AvroFormatPtrOutput
	ToAvroFormatPtrOutputWithContext(context.Context) AvroFormatPtrOutput
}

type avroFormatPtrType AvroFormatArgs

func AvroFormatPtr(v *AvroFormatArgs) AvroFormatPtrInput {
	return (*avroFormatPtrType)(v)
}

func (*avroFormatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AvroFormat)(nil)).Elem()
}

func (i *avroFormatPtrType) ToAvroFormatPtrOutput() AvroFormatPtrOutput {
	return i.ToAvroFormatPtrOutputWithContext(context.Background())
}

func (i *avroFormatPtrType) ToAvroFormatPtrOutputWithContext(ctx context.Context) AvroFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvroFormatPtrOutput)
}

// The data stored in Avro format.
type AvroFormatOutput struct{ *pulumi.OutputState }

func (AvroFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AvroFormat)(nil)).Elem()
}

func (o AvroFormatOutput) ToAvroFormatOutput() AvroFormatOutput {
	return o
}

func (o AvroFormatOutput) ToAvroFormatOutputWithContext(ctx context.Context) AvroFormatOutput {
	return o
}

func (o AvroFormatOutput) ToAvroFormatPtrOutput() AvroFormatPtrOutput {
	return o.ToAvroFormatPtrOutputWithContext(context.Background())
}

func (o AvroFormatOutput) ToAvroFormatPtrOutputWithContext(ctx context.Context) AvroFormatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AvroFormat) *AvroFormat {
		return &v
	}).(AvroFormatPtrOutput)
}

// Deserializer. Type: string (or Expression with resultType string).
func (o AvroFormatOutput) Deserializer() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroFormat) interface{} { return v.Deserializer }).(pulumi.AnyOutput)
}

// Serializer. Type: string (or Expression with resultType string).
func (o AvroFormatOutput) Serializer() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroFormat) interface{} { return v.Serializer }).(pulumi.AnyOutput)
}

// Type of dataset storage format.
// Expected value is 'AvroFormat'.
func (o AvroFormatOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AvroFormat) string { return v.Type }).(pulumi.StringOutput)
}

type AvroFormatPtrOutput struct{ *pulumi.OutputState }

func (AvroFormatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AvroFormat)(nil)).Elem()
}

func (o AvroFormatPtrOutput) ToAvroFormatPtrOutput() AvroFormatPtrOutput {
	return o
}

func (o AvroFormatPtrOutput) ToAvroFormatPtrOutputWithContext(ctx context.Context) AvroFormatPtrOutput {
	return o
}

func (o AvroFormatPtrOutput) Elem() AvroFormatOutput {
	return o.ApplyT(func(v *AvroFormat) AvroFormat {
		if v != nil {
			return *v
		}
		var ret AvroFormat
		return ret
	}).(AvroFormatOutput)
}

// Deserializer. Type: string (or Expression with resultType string).
func (o AvroFormatPtrOutput) Deserializer() pulumi.AnyOutput {
	return o.ApplyT(func(v *AvroFormat) interface{} {
		if v == nil {
			return nil
		}
		return v.Deserializer
	}).(pulumi.AnyOutput)
}

// Serializer. Type: string (or Expression with resultType string).
func (o AvroFormatPtrOutput) Serializer() pulumi.AnyOutput {
	return o.ApplyT(func(v *AvroFormat) interface{} {
		if v == nil {
			return nil
		}
		return v.Serializer
	}).(pulumi.AnyOutput)
}

// Type of dataset storage format.
// Expected value is 'AvroFormat'.
func (o AvroFormatPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AvroFormat) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The data stored in Avro format.
type AvroFormatResponse struct {
	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer interface{} `pulumi:"deserializer"`
	// Serializer. Type: string (or Expression with resultType string).
	Serializer interface{} `pulumi:"serializer"`
	// Type of dataset storage format.
	// Expected value is 'AvroFormat'.
	Type string `pulumi:"type"`
}

// The data stored in Avro format.
type AvroFormatResponseOutput struct{ *pulumi.OutputState }

func (AvroFormatResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AvroFormatResponse)(nil)).Elem()
}

func (o AvroFormatResponseOutput) ToAvroFormatResponseOutput() AvroFormatResponseOutput {
	return o
}

func (o AvroFormatResponseOutput) ToAvroFormatResponseOutputWithContext(ctx context.Context) AvroFormatResponseOutput {
	return o
}

// Deserializer. Type: string (or Expression with resultType string).
func (o AvroFormatResponseOutput) Deserializer() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroFormatResponse) interface{} { return v.Deserializer }).(pulumi.AnyOutput)
}

// Serializer. Type: string (or Expression with resultType string).
func (o AvroFormatResponseOutput) Serializer() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroFormatResponse) interface{} { return v.Serializer }).(pulumi.AnyOutput)
}

// Type of dataset storage format.
// Expected value is 'AvroFormat'.
func (o AvroFormatResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AvroFormatResponse) string { return v.Type }).(pulumi.StringOutput)
}

type AvroFormatResponsePtrOutput struct{ *pulumi.OutputState }

func (AvroFormatResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AvroFormatResponse)(nil)).Elem()
}

func (o AvroFormatResponsePtrOutput) ToAvroFormatResponsePtrOutput() AvroFormatResponsePtrOutput {
	return o
}

func (o AvroFormatResponsePtrOutput) ToAvroFormatResponsePtrOutputWithContext(ctx context.Context) AvroFormatResponsePtrOutput {
	return o
}

func (o AvroFormatResponsePtrOutput) Elem() AvroFormatResponseOutput {
	return o.ApplyT(func(v *AvroFormatResponse) AvroFormatResponse {
		if v != nil {
			return *v
		}
		var ret AvroFormatResponse
		return ret
	}).(AvroFormatResponseOutput)
}

// Deserializer. Type: string (or Expression with resultType string).
func (o AvroFormatResponsePtrOutput) Deserializer() pulumi.AnyOutput {
	return o.ApplyT(func(v *AvroFormatResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Deserializer
	}).(pulumi.AnyOutput)
}

// Serializer. Type: string (or Expression with resultType string).
func (o AvroFormatResponsePtrOutput) Serializer() pulumi.AnyOutput {
	return o.ApplyT(func(v *AvroFormatResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Serializer
	}).(pulumi.AnyOutput)
}

// Type of dataset storage format.
// Expected value is 'AvroFormat'.
func (o AvroFormatResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AvroFormatResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// A copy activity Avro sink.
type AvroSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Avro format settings.
	FormatSettings *AvroWriteSettings `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Avro store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy sink type.
	// Expected value is 'AvroSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// AvroSinkInput is an input type that accepts AvroSinkArgs and AvroSinkOutput values.
// You can construct a concrete instance of `AvroSinkInput` via:
//
//	AvroSinkArgs{...}
type AvroSinkInput interface {
	pulumi.Input

	ToAvroSinkOutput() AvroSinkOutput
	ToAvroSinkOutputWithContext(context.Context) AvroSinkOutput
}

// A copy activity Avro sink.
type AvroSinkArgs struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// Avro format settings.
	FormatSettings AvroWriteSettingsPtrInput `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount pulumi.Input `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait pulumi.Input `pulumi:"sinkRetryWait"`
	// Avro store settings.
	StoreSettings pulumi.Input `pulumi:"storeSettings"`
	// Copy sink type.
	// Expected value is 'AvroSink'.
	Type pulumi.StringInput `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize pulumi.Input `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout pulumi.Input `pulumi:"writeBatchTimeout"`
}

func (AvroSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AvroSink)(nil)).Elem()
}

func (i AvroSinkArgs) ToAvroSinkOutput() AvroSinkOutput {
	return i.ToAvroSinkOutputWithContext(context.Background())
}

func (i AvroSinkArgs) ToAvroSinkOutputWithContext(ctx context.Context) AvroSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvroSinkOutput)
}

// A copy activity Avro sink.
type AvroSinkOutput struct{ *pulumi.OutputState }

func (AvroSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AvroSink)(nil)).Elem()
}

func (o AvroSinkOutput) ToAvroSinkOutput() AvroSinkOutput {
	return o
}

func (o AvroSinkOutput) ToAvroSinkOutputWithContext(ctx context.Context) AvroSinkOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AvroSinkOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroSink) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Avro format settings.
func (o AvroSinkOutput) FormatSettings() AvroWriteSettingsPtrOutput {
	return o.ApplyT(func(v AvroSink) *AvroWriteSettings { return v.FormatSettings }).(AvroWriteSettingsPtrOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o AvroSinkOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroSink) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o AvroSinkOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroSink) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AvroSinkOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroSink) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Avro store settings.
func (o AvroSinkOutput) StoreSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroSink) interface{} { return v.StoreSettings }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'AvroSink'.
func (o AvroSinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AvroSink) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o AvroSinkOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroSink) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AvroSinkOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroSink) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity Avro sink.
type AvroSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Avro format settings.
	FormatSettings *AvroWriteSettingsResponse `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Avro store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy sink type.
	// Expected value is 'AvroSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Avro sink.
type AvroSinkResponseOutput struct{ *pulumi.OutputState }

func (AvroSinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AvroSinkResponse)(nil)).Elem()
}

func (o AvroSinkResponseOutput) ToAvroSinkResponseOutput() AvroSinkResponseOutput {
	return o
}

func (o AvroSinkResponseOutput) ToAvroSinkResponseOutputWithContext(ctx context.Context) AvroSinkResponseOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AvroSinkResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroSinkResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Avro format settings.
func (o AvroSinkResponseOutput) FormatSettings() AvroWriteSettingsResponsePtrOutput {
	return o.ApplyT(func(v AvroSinkResponse) *AvroWriteSettingsResponse { return v.FormatSettings }).(AvroWriteSettingsResponsePtrOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o AvroSinkResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroSinkResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o AvroSinkResponseOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroSinkResponse) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AvroSinkResponseOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroSinkResponse) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Avro store settings.
func (o AvroSinkResponseOutput) StoreSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroSinkResponse) interface{} { return v.StoreSettings }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'AvroSink'.
func (o AvroSinkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AvroSinkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o AvroSinkResponseOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroSinkResponse) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AvroSinkResponseOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroSinkResponse) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity Avro source.
type AvroSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Avro store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'AvroSource'.
	Type string `pulumi:"type"`
}

// AvroSourceInput is an input type that accepts AvroSourceArgs and AvroSourceOutput values.
// You can construct a concrete instance of `AvroSourceInput` via:
//
//	AvroSourceArgs{...}
type AvroSourceInput interface {
	pulumi.Input

	ToAvroSourceOutput() AvroSourceOutput
	ToAvroSourceOutputWithContext(context.Context) AvroSourceOutput
}

// A copy activity Avro source.
type AvroSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Avro store settings.
	StoreSettings pulumi.Input `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'AvroSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AvroSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AvroSource)(nil)).Elem()
}

func (i AvroSourceArgs) ToAvroSourceOutput() AvroSourceOutput {
	return i.ToAvroSourceOutputWithContext(context.Background())
}

func (i AvroSourceArgs) ToAvroSourceOutputWithContext(ctx context.Context) AvroSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvroSourceOutput)
}

// A copy activity Avro source.
type AvroSourceOutput struct{ *pulumi.OutputState }

func (AvroSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AvroSource)(nil)).Elem()
}

func (o AvroSourceOutput) ToAvroSourceOutput() AvroSourceOutput {
	return o
}

func (o AvroSourceOutput) ToAvroSourceOutputWithContext(ctx context.Context) AvroSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o AvroSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AvroSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AvroSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o AvroSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AvroSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Avro store settings.
func (o AvroSourceOutput) StoreSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroSource) interface{} { return v.StoreSettings }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'AvroSource'.
func (o AvroSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AvroSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Avro source.
type AvroSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Avro store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'AvroSource'.
	Type string `pulumi:"type"`
}

// A copy activity Avro source.
type AvroSourceResponseOutput struct{ *pulumi.OutputState }

func (AvroSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AvroSourceResponse)(nil)).Elem()
}

func (o AvroSourceResponseOutput) ToAvroSourceResponseOutput() AvroSourceResponseOutput {
	return o
}

func (o AvroSourceResponseOutput) ToAvroSourceResponseOutputWithContext(ctx context.Context) AvroSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o AvroSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AvroSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AvroSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o AvroSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AvroSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Avro store settings.
func (o AvroSourceResponseOutput) StoreSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroSourceResponse) interface{} { return v.StoreSettings }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'AvroSource'.
func (o AvroSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AvroSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Avro write settings.
type AvroWriteSettings struct {
	// Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
	FileNamePrefix interface{} `pulumi:"fileNamePrefix"`
	// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
	MaxRowsPerFile interface{} `pulumi:"maxRowsPerFile"`
	// Top level record name in write result, which is required in AVRO spec.
	RecordName *string `pulumi:"recordName"`
	// Record namespace in the write result.
	RecordNamespace *string `pulumi:"recordNamespace"`
	// The write setting type.
	// Expected value is 'AvroWriteSettings'.
	Type string `pulumi:"type"`
}

// AvroWriteSettingsInput is an input type that accepts AvroWriteSettingsArgs and AvroWriteSettingsOutput values.
// You can construct a concrete instance of `AvroWriteSettingsInput` via:
//
//	AvroWriteSettingsArgs{...}
type AvroWriteSettingsInput interface {
	pulumi.Input

	ToAvroWriteSettingsOutput() AvroWriteSettingsOutput
	ToAvroWriteSettingsOutputWithContext(context.Context) AvroWriteSettingsOutput
}

// Avro write settings.
type AvroWriteSettingsArgs struct {
	// Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
	FileNamePrefix pulumi.Input `pulumi:"fileNamePrefix"`
	// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
	MaxRowsPerFile pulumi.Input `pulumi:"maxRowsPerFile"`
	// Top level record name in write result, which is required in AVRO spec.
	RecordName pulumi.StringPtrInput `pulumi:"recordName"`
	// Record namespace in the write result.
	RecordNamespace pulumi.StringPtrInput `pulumi:"recordNamespace"`
	// The write setting type.
	// Expected value is 'AvroWriteSettings'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AvroWriteSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AvroWriteSettings)(nil)).Elem()
}

func (i AvroWriteSettingsArgs) ToAvroWriteSettingsOutput() AvroWriteSettingsOutput {
	return i.ToAvroWriteSettingsOutputWithContext(context.Background())
}

func (i AvroWriteSettingsArgs) ToAvroWriteSettingsOutputWithContext(ctx context.Context) AvroWriteSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvroWriteSettingsOutput)
}

func (i AvroWriteSettingsArgs) ToAvroWriteSettingsPtrOutput() AvroWriteSettingsPtrOutput {
	return i.ToAvroWriteSettingsPtrOutputWithContext(context.Background())
}

func (i AvroWriteSettingsArgs) ToAvroWriteSettingsPtrOutputWithContext(ctx context.Context) AvroWriteSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvroWriteSettingsOutput).ToAvroWriteSettingsPtrOutputWithContext(ctx)
}

// AvroWriteSettingsPtrInput is an input type that accepts AvroWriteSettingsArgs, AvroWriteSettingsPtr and AvroWriteSettingsPtrOutput values.
// You can construct a concrete instance of `AvroWriteSettingsPtrInput` via:
//
//	        AvroWriteSettingsArgs{...}
//
//	or:
//
//	        nil
type AvroWriteSettingsPtrInput interface {
	pulumi.Input

	ToAvroWriteSettingsPtrOutput() AvroWriteSettingsPtrOutput
	ToAvroWriteSettingsPtrOutputWithContext(context.Context) AvroWriteSettingsPtrOutput
}

type avroWriteSettingsPtrType AvroWriteSettingsArgs

func AvroWriteSettingsPtr(v *AvroWriteSettingsArgs) AvroWriteSettingsPtrInput {
	return (*avroWriteSettingsPtrType)(v)
}

func (*avroWriteSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AvroWriteSettings)(nil)).Elem()
}

func (i *avroWriteSettingsPtrType) ToAvroWriteSettingsPtrOutput() AvroWriteSettingsPtrOutput {
	return i.ToAvroWriteSettingsPtrOutputWithContext(context.Background())
}

func (i *avroWriteSettingsPtrType) ToAvroWriteSettingsPtrOutputWithContext(ctx context.Context) AvroWriteSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvroWriteSettingsPtrOutput)
}

// Avro write settings.
type AvroWriteSettingsOutput struct{ *pulumi.OutputState }

func (AvroWriteSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AvroWriteSettings)(nil)).Elem()
}

func (o AvroWriteSettingsOutput) ToAvroWriteSettingsOutput() AvroWriteSettingsOutput {
	return o
}

func (o AvroWriteSettingsOutput) ToAvroWriteSettingsOutputWithContext(ctx context.Context) AvroWriteSettingsOutput {
	return o
}

func (o AvroWriteSettingsOutput) ToAvroWriteSettingsPtrOutput() AvroWriteSettingsPtrOutput {
	return o.ToAvroWriteSettingsPtrOutputWithContext(context.Background())
}

func (o AvroWriteSettingsOutput) ToAvroWriteSettingsPtrOutputWithContext(ctx context.Context) AvroWriteSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AvroWriteSettings) *AvroWriteSettings {
		return &v
	}).(AvroWriteSettingsPtrOutput)
}

// Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
func (o AvroWriteSettingsOutput) FileNamePrefix() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroWriteSettings) interface{} { return v.FileNamePrefix }).(pulumi.AnyOutput)
}

// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
func (o AvroWriteSettingsOutput) MaxRowsPerFile() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroWriteSettings) interface{} { return v.MaxRowsPerFile }).(pulumi.AnyOutput)
}

// Top level record name in write result, which is required in AVRO spec.
func (o AvroWriteSettingsOutput) RecordName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AvroWriteSettings) *string { return v.RecordName }).(pulumi.StringPtrOutput)
}

// Record namespace in the write result.
func (o AvroWriteSettingsOutput) RecordNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AvroWriteSettings) *string { return v.RecordNamespace }).(pulumi.StringPtrOutput)
}

// The write setting type.
// Expected value is 'AvroWriteSettings'.
func (o AvroWriteSettingsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AvroWriteSettings) string { return v.Type }).(pulumi.StringOutput)
}

type AvroWriteSettingsPtrOutput struct{ *pulumi.OutputState }

func (AvroWriteSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AvroWriteSettings)(nil)).Elem()
}

func (o AvroWriteSettingsPtrOutput) ToAvroWriteSettingsPtrOutput() AvroWriteSettingsPtrOutput {
	return o
}

func (o AvroWriteSettingsPtrOutput) ToAvroWriteSettingsPtrOutputWithContext(ctx context.Context) AvroWriteSettingsPtrOutput {
	return o
}

func (o AvroWriteSettingsPtrOutput) Elem() AvroWriteSettingsOutput {
	return o.ApplyT(func(v *AvroWriteSettings) AvroWriteSettings {
		if v != nil {
			return *v
		}
		var ret AvroWriteSettings
		return ret
	}).(AvroWriteSettingsOutput)
}

// Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
func (o AvroWriteSettingsPtrOutput) FileNamePrefix() pulumi.AnyOutput {
	return o.ApplyT(func(v *AvroWriteSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.FileNamePrefix
	}).(pulumi.AnyOutput)
}

// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
func (o AvroWriteSettingsPtrOutput) MaxRowsPerFile() pulumi.AnyOutput {
	return o.ApplyT(func(v *AvroWriteSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxRowsPerFile
	}).(pulumi.AnyOutput)
}

// Top level record name in write result, which is required in AVRO spec.
func (o AvroWriteSettingsPtrOutput) RecordName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AvroWriteSettings) *string {
		if v == nil {
			return nil
		}
		return v.RecordName
	}).(pulumi.StringPtrOutput)
}

// Record namespace in the write result.
func (o AvroWriteSettingsPtrOutput) RecordNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AvroWriteSettings) *string {
		if v == nil {
			return nil
		}
		return v.RecordNamespace
	}).(pulumi.StringPtrOutput)
}

// The write setting type.
// Expected value is 'AvroWriteSettings'.
func (o AvroWriteSettingsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AvroWriteSettings) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Avro write settings.
type AvroWriteSettingsResponse struct {
	// Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
	FileNamePrefix interface{} `pulumi:"fileNamePrefix"`
	// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
	MaxRowsPerFile interface{} `pulumi:"maxRowsPerFile"`
	// Top level record name in write result, which is required in AVRO spec.
	RecordName *string `pulumi:"recordName"`
	// Record namespace in the write result.
	RecordNamespace *string `pulumi:"recordNamespace"`
	// The write setting type.
	// Expected value is 'AvroWriteSettings'.
	Type string `pulumi:"type"`
}

// Avro write settings.
type AvroWriteSettingsResponseOutput struct{ *pulumi.OutputState }

func (AvroWriteSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AvroWriteSettingsResponse)(nil)).Elem()
}

func (o AvroWriteSettingsResponseOutput) ToAvroWriteSettingsResponseOutput() AvroWriteSettingsResponseOutput {
	return o
}

func (o AvroWriteSettingsResponseOutput) ToAvroWriteSettingsResponseOutputWithContext(ctx context.Context) AvroWriteSettingsResponseOutput {
	return o
}

// Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
func (o AvroWriteSettingsResponseOutput) FileNamePrefix() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroWriteSettingsResponse) interface{} { return v.FileNamePrefix }).(pulumi.AnyOutput)
}

// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
func (o AvroWriteSettingsResponseOutput) MaxRowsPerFile() pulumi.AnyOutput {
	return o.ApplyT(func(v AvroWriteSettingsResponse) interface{} { return v.MaxRowsPerFile }).(pulumi.AnyOutput)
}

// Top level record name in write result, which is required in AVRO spec.
func (o AvroWriteSettingsResponseOutput) RecordName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AvroWriteSettingsResponse) *string { return v.RecordName }).(pulumi.StringPtrOutput)
}

// Record namespace in the write result.
func (o AvroWriteSettingsResponseOutput) RecordNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AvroWriteSettingsResponse) *string { return v.RecordNamespace }).(pulumi.StringPtrOutput)
}

// The write setting type.
// Expected value is 'AvroWriteSettings'.
func (o AvroWriteSettingsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AvroWriteSettingsResponse) string { return v.Type }).(pulumi.StringOutput)
}

type AvroWriteSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (AvroWriteSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AvroWriteSettingsResponse)(nil)).Elem()
}

func (o AvroWriteSettingsResponsePtrOutput) ToAvroWriteSettingsResponsePtrOutput() AvroWriteSettingsResponsePtrOutput {
	return o
}

func (o AvroWriteSettingsResponsePtrOutput) ToAvroWriteSettingsResponsePtrOutputWithContext(ctx context.Context) AvroWriteSettingsResponsePtrOutput {
	return o
}

func (o AvroWriteSettingsResponsePtrOutput) Elem() AvroWriteSettingsResponseOutput {
	return o.ApplyT(func(v *AvroWriteSettingsResponse) AvroWriteSettingsResponse {
		if v != nil {
			return *v
		}
		var ret AvroWriteSettingsResponse
		return ret
	}).(AvroWriteSettingsResponseOutput)
}

// Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
func (o AvroWriteSettingsResponsePtrOutput) FileNamePrefix() pulumi.AnyOutput {
	return o.ApplyT(func(v *AvroWriteSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.FileNamePrefix
	}).(pulumi.AnyOutput)
}

// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
func (o AvroWriteSettingsResponsePtrOutput) MaxRowsPerFile() pulumi.AnyOutput {
	return o.ApplyT(func(v *AvroWriteSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxRowsPerFile
	}).(pulumi.AnyOutput)
}

// Top level record name in write result, which is required in AVRO spec.
func (o AvroWriteSettingsResponsePtrOutput) RecordName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AvroWriteSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.RecordName
	}).(pulumi.StringPtrOutput)
}

// Record namespace in the write result.
func (o AvroWriteSettingsResponsePtrOutput) RecordNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AvroWriteSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.RecordNamespace
	}).(pulumi.StringPtrOutput)
}

// The write setting type.
// Expected value is 'AvroWriteSettings'.
func (o AvroWriteSettingsResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AvroWriteSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The express custom setup of installing Azure PowerShell.
type AzPowerShellSetup struct {
	// The type of custom setup.
	// Expected value is 'AzPowerShellSetup'.
	Type string `pulumi:"type"`
	// The required version of Azure PowerShell to install.
	Version string `pulumi:"version"`
}

// AzPowerShellSetupInput is an input type that accepts AzPowerShellSetupArgs and AzPowerShellSetupOutput values.
// You can construct a concrete instance of `AzPowerShellSetupInput` via:
//
//	AzPowerShellSetupArgs{...}
type AzPowerShellSetupInput interface {
	pulumi.Input

	ToAzPowerShellSetupOutput() AzPowerShellSetupOutput
	ToAzPowerShellSetupOutputWithContext(context.Context) AzPowerShellSetupOutput
}

// The express custom setup of installing Azure PowerShell.
type AzPowerShellSetupArgs struct {
	// The type of custom setup.
	// Expected value is 'AzPowerShellSetup'.
	Type pulumi.StringInput `pulumi:"type"`
	// The required version of Azure PowerShell to install.
	Version pulumi.StringInput `pulumi:"version"`
}

func (AzPowerShellSetupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzPowerShellSetup)(nil)).Elem()
}

func (i AzPowerShellSetupArgs) ToAzPowerShellSetupOutput() AzPowerShellSetupOutput {
	return i.ToAzPowerShellSetupOutputWithContext(context.Background())
}

func (i AzPowerShellSetupArgs) ToAzPowerShellSetupOutputWithContext(ctx context.Context) AzPowerShellSetupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzPowerShellSetupOutput)
}

// The express custom setup of installing Azure PowerShell.
type AzPowerShellSetupOutput struct{ *pulumi.OutputState }

func (AzPowerShellSetupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzPowerShellSetup)(nil)).Elem()
}

func (o AzPowerShellSetupOutput) ToAzPowerShellSetupOutput() AzPowerShellSetupOutput {
	return o
}

func (o AzPowerShellSetupOutput) ToAzPowerShellSetupOutputWithContext(ctx context.Context) AzPowerShellSetupOutput {
	return o
}

// The type of custom setup.
// Expected value is 'AzPowerShellSetup'.
func (o AzPowerShellSetupOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzPowerShellSetup) string { return v.Type }).(pulumi.StringOutput)
}

// The required version of Azure PowerShell to install.
func (o AzPowerShellSetupOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v AzPowerShellSetup) string { return v.Version }).(pulumi.StringOutput)
}

// The express custom setup of installing Azure PowerShell.
type AzPowerShellSetupResponse struct {
	// The type of custom setup.
	// Expected value is 'AzPowerShellSetup'.
	Type string `pulumi:"type"`
	// The required version of Azure PowerShell to install.
	Version string `pulumi:"version"`
}

// The express custom setup of installing Azure PowerShell.
type AzPowerShellSetupResponseOutput struct{ *pulumi.OutputState }

func (AzPowerShellSetupResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzPowerShellSetupResponse)(nil)).Elem()
}

func (o AzPowerShellSetupResponseOutput) ToAzPowerShellSetupResponseOutput() AzPowerShellSetupResponseOutput {
	return o
}

func (o AzPowerShellSetupResponseOutput) ToAzPowerShellSetupResponseOutputWithContext(ctx context.Context) AzPowerShellSetupResponseOutput {
	return o
}

// The type of custom setup.
// Expected value is 'AzPowerShellSetup'.
func (o AzPowerShellSetupResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzPowerShellSetupResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The required version of Azure PowerShell to install.
func (o AzPowerShellSetupResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v AzPowerShellSetupResponse) string { return v.Version }).(pulumi.StringOutput)
}

// Azure Batch linked service.
type AzureBatchLinkedService struct {
	// The Azure Batch account access key.
	AccessKey interface{} `pulumi:"accessKey"`
	// The Azure Batch account name. Type: string (or Expression with resultType string).
	AccountName interface{} `pulumi:"accountName"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The Azure Batch URI. Type: string (or Expression with resultType string).
	BatchUri interface{} `pulumi:"batchUri"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The Azure Storage linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure Batch pool name. Type: string (or Expression with resultType string).
	PoolName interface{} `pulumi:"poolName"`
	// Type of linked service.
	// Expected value is 'AzureBatch'.
	Type string `pulumi:"type"`
}

// AzureBatchLinkedServiceInput is an input type that accepts AzureBatchLinkedServiceArgs and AzureBatchLinkedServiceOutput values.
// You can construct a concrete instance of `AzureBatchLinkedServiceInput` via:
//
//	AzureBatchLinkedServiceArgs{...}
type AzureBatchLinkedServiceInput interface {
	pulumi.Input

	ToAzureBatchLinkedServiceOutput() AzureBatchLinkedServiceOutput
	ToAzureBatchLinkedServiceOutputWithContext(context.Context) AzureBatchLinkedServiceOutput
}

// Azure Batch linked service.
type AzureBatchLinkedServiceArgs struct {
	// The Azure Batch account access key.
	AccessKey pulumi.Input `pulumi:"accessKey"`
	// The Azure Batch account name. Type: string (or Expression with resultType string).
	AccountName pulumi.Input `pulumi:"accountName"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The Azure Batch URI. Type: string (or Expression with resultType string).
	BatchUri pulumi.Input `pulumi:"batchUri"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential CredentialReferencePtrInput `pulumi:"credential"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// The Azure Storage linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The Azure Batch pool name. Type: string (or Expression with resultType string).
	PoolName pulumi.Input `pulumi:"poolName"`
	// Type of linked service.
	// Expected value is 'AzureBatch'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureBatchLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBatchLinkedService)(nil)).Elem()
}

func (i AzureBatchLinkedServiceArgs) ToAzureBatchLinkedServiceOutput() AzureBatchLinkedServiceOutput {
	return i.ToAzureBatchLinkedServiceOutputWithContext(context.Background())
}

func (i AzureBatchLinkedServiceArgs) ToAzureBatchLinkedServiceOutputWithContext(ctx context.Context) AzureBatchLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBatchLinkedServiceOutput)
}

// Azure Batch linked service.
type AzureBatchLinkedServiceOutput struct{ *pulumi.OutputState }

func (AzureBatchLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBatchLinkedService)(nil)).Elem()
}

func (o AzureBatchLinkedServiceOutput) ToAzureBatchLinkedServiceOutput() AzureBatchLinkedServiceOutput {
	return o
}

func (o AzureBatchLinkedServiceOutput) ToAzureBatchLinkedServiceOutputWithContext(ctx context.Context) AzureBatchLinkedServiceOutput {
	return o
}

// The Azure Batch account access key.
func (o AzureBatchLinkedServiceOutput) AccessKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBatchLinkedService) interface{} { return v.AccessKey }).(pulumi.AnyOutput)
}

// The Azure Batch account name. Type: string (or Expression with resultType string).
func (o AzureBatchLinkedServiceOutput) AccountName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBatchLinkedService) interface{} { return v.AccountName }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o AzureBatchLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureBatchLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The Azure Batch URI. Type: string (or Expression with resultType string).
func (o AzureBatchLinkedServiceOutput) BatchUri() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBatchLinkedService) interface{} { return v.BatchUri }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureBatchLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzureBatchLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The credential reference containing authentication information.
func (o AzureBatchLinkedServiceOutput) Credential() CredentialReferencePtrOutput {
	return o.ApplyT(func(v AzureBatchLinkedService) *CredentialReference { return v.Credential }).(CredentialReferencePtrOutput)
}

// Linked service description.
func (o AzureBatchLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBatchLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AzureBatchLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBatchLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The Azure Storage linked service reference.
func (o AzureBatchLinkedServiceOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v AzureBatchLinkedService) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for linked service.
func (o AzureBatchLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureBatchLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The Azure Batch pool name. Type: string (or Expression with resultType string).
func (o AzureBatchLinkedServiceOutput) PoolName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBatchLinkedService) interface{} { return v.PoolName }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AzureBatch'.
func (o AzureBatchLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBatchLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Batch linked service.
type AzureBatchLinkedServiceResponse struct {
	// The Azure Batch account access key.
	AccessKey interface{} `pulumi:"accessKey"`
	// The Azure Batch account name. Type: string (or Expression with resultType string).
	AccountName interface{} `pulumi:"accountName"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The Azure Batch URI. Type: string (or Expression with resultType string).
	BatchUri interface{} `pulumi:"batchUri"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The Azure Storage linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure Batch pool name. Type: string (or Expression with resultType string).
	PoolName interface{} `pulumi:"poolName"`
	// Type of linked service.
	// Expected value is 'AzureBatch'.
	Type string `pulumi:"type"`
}

// Azure Batch linked service.
type AzureBatchLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureBatchLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBatchLinkedServiceResponse)(nil)).Elem()
}

func (o AzureBatchLinkedServiceResponseOutput) ToAzureBatchLinkedServiceResponseOutput() AzureBatchLinkedServiceResponseOutput {
	return o
}

func (o AzureBatchLinkedServiceResponseOutput) ToAzureBatchLinkedServiceResponseOutputWithContext(ctx context.Context) AzureBatchLinkedServiceResponseOutput {
	return o
}

// The Azure Batch account access key.
func (o AzureBatchLinkedServiceResponseOutput) AccessKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBatchLinkedServiceResponse) interface{} { return v.AccessKey }).(pulumi.AnyOutput)
}

// The Azure Batch account name. Type: string (or Expression with resultType string).
func (o AzureBatchLinkedServiceResponseOutput) AccountName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBatchLinkedServiceResponse) interface{} { return v.AccountName }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o AzureBatchLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureBatchLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The Azure Batch URI. Type: string (or Expression with resultType string).
func (o AzureBatchLinkedServiceResponseOutput) BatchUri() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBatchLinkedServiceResponse) interface{} { return v.BatchUri }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureBatchLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureBatchLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The credential reference containing authentication information.
func (o AzureBatchLinkedServiceResponseOutput) Credential() CredentialReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureBatchLinkedServiceResponse) *CredentialReferenceResponse { return v.Credential }).(CredentialReferenceResponsePtrOutput)
}

// Linked service description.
func (o AzureBatchLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBatchLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AzureBatchLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBatchLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The Azure Storage linked service reference.
func (o AzureBatchLinkedServiceResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AzureBatchLinkedServiceResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for linked service.
func (o AzureBatchLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureBatchLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The Azure Batch pool name. Type: string (or Expression with resultType string).
func (o AzureBatchLinkedServiceResponseOutput) PoolName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBatchLinkedServiceResponse) interface{} { return v.PoolName }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AzureBatch'.
func (o AzureBatchLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBatchLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Azure Blob storage.
type AzureBlobDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the blob storage.
	Compression *DatasetCompression `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The name of the Azure Blob. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// The path of the Azure Blob storage. Type: string (or Expression with resultType string).
	FolderPath interface{} `pulumi:"folderPath"`
	// The format of the Azure Blob storage.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The end of Azure Blob's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of Azure Blob's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The root of blob path. Type: string (or Expression with resultType string).
	TableRootLocation interface{} `pulumi:"tableRootLocation"`
	// Type of dataset.
	// Expected value is 'AzureBlob'.
	Type string `pulumi:"type"`
}

// AzureBlobDatasetInput is an input type that accepts AzureBlobDatasetArgs and AzureBlobDatasetOutput values.
// You can construct a concrete instance of `AzureBlobDatasetInput` via:
//
//	AzureBlobDatasetArgs{...}
type AzureBlobDatasetInput interface {
	pulumi.Input

	ToAzureBlobDatasetOutput() AzureBlobDatasetOutput
	ToAzureBlobDatasetOutputWithContext(context.Context) AzureBlobDatasetOutput
}

// The Azure Blob storage.
type AzureBlobDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The data compression method used for the blob storage.
	Compression DatasetCompressionPtrInput `pulumi:"compression"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The name of the Azure Blob. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// The path of the Azure Blob storage. Type: string (or Expression with resultType string).
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// The format of the Azure Blob storage.
	Format pulumi.Input `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// The end of Azure Blob's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd pulumi.Input `pulumi:"modifiedDatetimeEnd"`
	// The start of Azure Blob's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart pulumi.Input `pulumi:"modifiedDatetimeStart"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The root of blob path. Type: string (or Expression with resultType string).
	TableRootLocation pulumi.Input `pulumi:"tableRootLocation"`
	// Type of dataset.
	// Expected value is 'AzureBlob'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureBlobDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobDataset)(nil)).Elem()
}

func (i AzureBlobDatasetArgs) ToAzureBlobDatasetOutput() AzureBlobDatasetOutput {
	return i.ToAzureBlobDatasetOutputWithContext(context.Background())
}

func (i AzureBlobDatasetArgs) ToAzureBlobDatasetOutputWithContext(ctx context.Context) AzureBlobDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobDatasetOutput)
}

// The Azure Blob storage.
type AzureBlobDatasetOutput struct{ *pulumi.OutputState }

func (AzureBlobDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobDataset)(nil)).Elem()
}

func (o AzureBlobDatasetOutput) ToAzureBlobDatasetOutput() AzureBlobDatasetOutput {
	return o
}

func (o AzureBlobDatasetOutput) ToAzureBlobDatasetOutputWithContext(ctx context.Context) AzureBlobDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureBlobDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureBlobDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The data compression method used for the blob storage.
func (o AzureBlobDatasetOutput) Compression() DatasetCompressionPtrOutput {
	return o.ApplyT(func(v AzureBlobDataset) *DatasetCompression { return v.Compression }).(DatasetCompressionPtrOutput)
}

// Dataset description.
func (o AzureBlobDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the Azure Blob. Type: string (or Expression with resultType string).
func (o AzureBlobDatasetOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobDataset) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureBlobDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v AzureBlobDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// The path of the Azure Blob storage. Type: string (or Expression with resultType string).
func (o AzureBlobDatasetOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobDataset) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// The format of the Azure Blob storage.
func (o AzureBlobDatasetOutput) Format() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobDataset) interface{} { return v.Format }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o AzureBlobDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v AzureBlobDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// The end of Azure Blob's modified datetime. Type: string (or Expression with resultType string).
func (o AzureBlobDatasetOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobDataset) interface{} { return v.ModifiedDatetimeEnd }).(pulumi.AnyOutput)
}

// The start of Azure Blob's modified datetime. Type: string (or Expression with resultType string).
func (o AzureBlobDatasetOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobDataset) interface{} { return v.ModifiedDatetimeStart }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o AzureBlobDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureBlobDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureBlobDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureBlobDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The root of blob path. Type: string (or Expression with resultType string).
func (o AzureBlobDatasetOutput) TableRootLocation() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobDataset) interface{} { return v.TableRootLocation }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'AzureBlob'.
func (o AzureBlobDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Azure Blob storage.
type AzureBlobDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the blob storage.
	Compression *DatasetCompressionResponse `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The name of the Azure Blob. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// The path of the Azure Blob storage. Type: string (or Expression with resultType string).
	FolderPath interface{} `pulumi:"folderPath"`
	// The format of the Azure Blob storage.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The end of Azure Blob's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of Azure Blob's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The root of blob path. Type: string (or Expression with resultType string).
	TableRootLocation interface{} `pulumi:"tableRootLocation"`
	// Type of dataset.
	// Expected value is 'AzureBlob'.
	Type string `pulumi:"type"`
}

// The Azure Blob storage.
type AzureBlobDatasetResponseOutput struct{ *pulumi.OutputState }

func (AzureBlobDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobDatasetResponse)(nil)).Elem()
}

func (o AzureBlobDatasetResponseOutput) ToAzureBlobDatasetResponseOutput() AzureBlobDatasetResponseOutput {
	return o
}

func (o AzureBlobDatasetResponseOutput) ToAzureBlobDatasetResponseOutputWithContext(ctx context.Context) AzureBlobDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureBlobDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureBlobDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The data compression method used for the blob storage.
func (o AzureBlobDatasetResponseOutput) Compression() DatasetCompressionResponsePtrOutput {
	return o.ApplyT(func(v AzureBlobDatasetResponse) *DatasetCompressionResponse { return v.Compression }).(DatasetCompressionResponsePtrOutput)
}

// Dataset description.
func (o AzureBlobDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the Azure Blob. Type: string (or Expression with resultType string).
func (o AzureBlobDatasetResponseOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobDatasetResponse) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureBlobDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v AzureBlobDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// The path of the Azure Blob storage. Type: string (or Expression with resultType string).
func (o AzureBlobDatasetResponseOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobDatasetResponse) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// The format of the Azure Blob storage.
func (o AzureBlobDatasetResponseOutput) Format() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobDatasetResponse) interface{} { return v.Format }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o AzureBlobDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AzureBlobDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// The end of Azure Blob's modified datetime. Type: string (or Expression with resultType string).
func (o AzureBlobDatasetResponseOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobDatasetResponse) interface{} { return v.ModifiedDatetimeEnd }).(pulumi.AnyOutput)
}

// The start of Azure Blob's modified datetime. Type: string (or Expression with resultType string).
func (o AzureBlobDatasetResponseOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobDatasetResponse) interface{} { return v.ModifiedDatetimeStart }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o AzureBlobDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureBlobDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureBlobDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureBlobDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The root of blob path. Type: string (or Expression with resultType string).
func (o AzureBlobDatasetResponseOutput) TableRootLocation() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobDatasetResponse) interface{} { return v.TableRootLocation }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'AzureBlob'.
func (o AzureBlobDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Azure Data Lake Storage Gen2 storage.
type AzureBlobFSDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the blob storage.
	Compression *DatasetCompression `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The name of the Azure Data Lake Storage Gen2. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// The path of the Azure Data Lake Storage Gen2 storage. Type: string (or Expression with resultType string).
	FolderPath interface{} `pulumi:"folderPath"`
	// The format of the Azure Data Lake Storage Gen2 storage.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'AzureBlobFSFile'.
	Type string `pulumi:"type"`
}

// AzureBlobFSDatasetInput is an input type that accepts AzureBlobFSDatasetArgs and AzureBlobFSDatasetOutput values.
// You can construct a concrete instance of `AzureBlobFSDatasetInput` via:
//
//	AzureBlobFSDatasetArgs{...}
type AzureBlobFSDatasetInput interface {
	pulumi.Input

	ToAzureBlobFSDatasetOutput() AzureBlobFSDatasetOutput
	ToAzureBlobFSDatasetOutputWithContext(context.Context) AzureBlobFSDatasetOutput
}

// The Azure Data Lake Storage Gen2 storage.
type AzureBlobFSDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The data compression method used for the blob storage.
	Compression DatasetCompressionPtrInput `pulumi:"compression"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The name of the Azure Data Lake Storage Gen2. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// The path of the Azure Data Lake Storage Gen2 storage. Type: string (or Expression with resultType string).
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// The format of the Azure Data Lake Storage Gen2 storage.
	Format pulumi.Input `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'AzureBlobFSFile'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureBlobFSDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobFSDataset)(nil)).Elem()
}

func (i AzureBlobFSDatasetArgs) ToAzureBlobFSDatasetOutput() AzureBlobFSDatasetOutput {
	return i.ToAzureBlobFSDatasetOutputWithContext(context.Background())
}

func (i AzureBlobFSDatasetArgs) ToAzureBlobFSDatasetOutputWithContext(ctx context.Context) AzureBlobFSDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobFSDatasetOutput)
}

// The Azure Data Lake Storage Gen2 storage.
type AzureBlobFSDatasetOutput struct{ *pulumi.OutputState }

func (AzureBlobFSDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobFSDataset)(nil)).Elem()
}

func (o AzureBlobFSDatasetOutput) ToAzureBlobFSDatasetOutput() AzureBlobFSDatasetOutput {
	return o
}

func (o AzureBlobFSDatasetOutput) ToAzureBlobFSDatasetOutputWithContext(ctx context.Context) AzureBlobFSDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureBlobFSDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureBlobFSDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The data compression method used for the blob storage.
func (o AzureBlobFSDatasetOutput) Compression() DatasetCompressionPtrOutput {
	return o.ApplyT(func(v AzureBlobFSDataset) *DatasetCompression { return v.Compression }).(DatasetCompressionPtrOutput)
}

// Dataset description.
func (o AzureBlobFSDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobFSDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the Azure Data Lake Storage Gen2. Type: string (or Expression with resultType string).
func (o AzureBlobFSDatasetOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSDataset) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureBlobFSDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v AzureBlobFSDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// The path of the Azure Data Lake Storage Gen2 storage. Type: string (or Expression with resultType string).
func (o AzureBlobFSDatasetOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSDataset) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// The format of the Azure Data Lake Storage Gen2 storage.
func (o AzureBlobFSDatasetOutput) Format() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSDataset) interface{} { return v.Format }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o AzureBlobFSDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v AzureBlobFSDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o AzureBlobFSDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureBlobFSDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureBlobFSDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureBlobFSDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'AzureBlobFSFile'.
func (o AzureBlobFSDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobFSDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Azure Data Lake Storage Gen2 storage.
type AzureBlobFSDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the blob storage.
	Compression *DatasetCompressionResponse `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The name of the Azure Data Lake Storage Gen2. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// The path of the Azure Data Lake Storage Gen2 storage. Type: string (or Expression with resultType string).
	FolderPath interface{} `pulumi:"folderPath"`
	// The format of the Azure Data Lake Storage Gen2 storage.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'AzureBlobFSFile'.
	Type string `pulumi:"type"`
}

// The Azure Data Lake Storage Gen2 storage.
type AzureBlobFSDatasetResponseOutput struct{ *pulumi.OutputState }

func (AzureBlobFSDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobFSDatasetResponse)(nil)).Elem()
}

func (o AzureBlobFSDatasetResponseOutput) ToAzureBlobFSDatasetResponseOutput() AzureBlobFSDatasetResponseOutput {
	return o
}

func (o AzureBlobFSDatasetResponseOutput) ToAzureBlobFSDatasetResponseOutputWithContext(ctx context.Context) AzureBlobFSDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureBlobFSDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureBlobFSDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The data compression method used for the blob storage.
func (o AzureBlobFSDatasetResponseOutput) Compression() DatasetCompressionResponsePtrOutput {
	return o.ApplyT(func(v AzureBlobFSDatasetResponse) *DatasetCompressionResponse { return v.Compression }).(DatasetCompressionResponsePtrOutput)
}

// Dataset description.
func (o AzureBlobFSDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobFSDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the Azure Data Lake Storage Gen2. Type: string (or Expression with resultType string).
func (o AzureBlobFSDatasetResponseOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSDatasetResponse) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureBlobFSDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v AzureBlobFSDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// The path of the Azure Data Lake Storage Gen2 storage. Type: string (or Expression with resultType string).
func (o AzureBlobFSDatasetResponseOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSDatasetResponse) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// The format of the Azure Data Lake Storage Gen2 storage.
func (o AzureBlobFSDatasetResponseOutput) Format() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSDatasetResponse) interface{} { return v.Format }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o AzureBlobFSDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AzureBlobFSDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o AzureBlobFSDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureBlobFSDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureBlobFSDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureBlobFSDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'AzureBlobFSFile'.
func (o AzureBlobFSDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobFSDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Data Lake Storage Gen2 linked service.
type AzureBlobFSLinkedService struct {
	// Account key for the Azure Data Lake Storage Gen2 service. Type: string (or Expression with resultType string).
	AccountKey interface{} `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken interface{} `pulumi:"sasToken"`
	// SAS URI of the Azure Data Lake Storage Gen2 service. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri interface{} `pulumi:"sasUri"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential interface{} `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType interface{} `pulumi:"servicePrincipalCredentialType"`
	// The ID of the application used to authenticate against the Azure Data Lake Storage Gen2 account. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against the Azure Data Lake Storage Gen2 account.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureBlobFS'.
	Type string `pulumi:"type"`
	// Endpoint for the Azure Data Lake Storage Gen2 service. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
}

// AzureBlobFSLinkedServiceInput is an input type that accepts AzureBlobFSLinkedServiceArgs and AzureBlobFSLinkedServiceOutput values.
// You can construct a concrete instance of `AzureBlobFSLinkedServiceInput` via:
//
//	AzureBlobFSLinkedServiceArgs{...}
type AzureBlobFSLinkedServiceInput interface {
	pulumi.Input

	ToAzureBlobFSLinkedServiceOutput() AzureBlobFSLinkedServiceOutput
	ToAzureBlobFSLinkedServiceOutputWithContext(context.Context) AzureBlobFSLinkedServiceOutput
}

// Azure Data Lake Storage Gen2 linked service.
type AzureBlobFSLinkedServiceArgs struct {
	// Account key for the Azure Data Lake Storage Gen2 service. Type: string (or Expression with resultType string).
	AccountKey pulumi.Input `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType pulumi.Input `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential CredentialReferencePtrInput `pulumi:"credential"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken pulumi.Input `pulumi:"sasToken"`
	// SAS URI of the Azure Data Lake Storage Gen2 service. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri pulumi.Input `pulumi:"sasUri"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential pulumi.Input `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType pulumi.Input `pulumi:"servicePrincipalCredentialType"`
	// The ID of the application used to authenticate against the Azure Data Lake Storage Gen2 account. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against the Azure Data Lake Storage Gen2 account.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant pulumi.Input `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureBlobFS'.
	Type pulumi.StringInput `pulumi:"type"`
	// Endpoint for the Azure Data Lake Storage Gen2 service. Type: string (or Expression with resultType string).
	Url pulumi.Input `pulumi:"url"`
}

func (AzureBlobFSLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobFSLinkedService)(nil)).Elem()
}

func (i AzureBlobFSLinkedServiceArgs) ToAzureBlobFSLinkedServiceOutput() AzureBlobFSLinkedServiceOutput {
	return i.ToAzureBlobFSLinkedServiceOutputWithContext(context.Background())
}

func (i AzureBlobFSLinkedServiceArgs) ToAzureBlobFSLinkedServiceOutputWithContext(ctx context.Context) AzureBlobFSLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobFSLinkedServiceOutput)
}

// Azure Data Lake Storage Gen2 linked service.
type AzureBlobFSLinkedServiceOutput struct{ *pulumi.OutputState }

func (AzureBlobFSLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobFSLinkedService)(nil)).Elem()
}

func (o AzureBlobFSLinkedServiceOutput) ToAzureBlobFSLinkedServiceOutput() AzureBlobFSLinkedServiceOutput {
	return o
}

func (o AzureBlobFSLinkedServiceOutput) ToAzureBlobFSLinkedServiceOutputWithContext(ctx context.Context) AzureBlobFSLinkedServiceOutput {
	return o
}

// Account key for the Azure Data Lake Storage Gen2 service. Type: string (or Expression with resultType string).
func (o AzureBlobFSLinkedServiceOutput) AccountKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedService) interface{} { return v.AccountKey }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o AzureBlobFSLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
func (o AzureBlobFSLinkedServiceOutput) AzureCloudType() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedService) interface{} { return v.AzureCloudType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureBlobFSLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The credential reference containing authentication information.
func (o AzureBlobFSLinkedServiceOutput) Credential() CredentialReferencePtrOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedService) *CredentialReference { return v.Credential }).(CredentialReferencePtrOutput)
}

// Linked service description.
func (o AzureBlobFSLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AzureBlobFSLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AzureBlobFSLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The Azure key vault secret reference of sasToken in sas uri.
func (o AzureBlobFSLinkedServiceOutput) SasToken() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedService) interface{} { return v.SasToken }).(pulumi.AnyOutput)
}

// SAS URI of the Azure Data Lake Storage Gen2 service. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureBlobFSLinkedServiceOutput) SasUri() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedService) interface{} { return v.SasUri }).(pulumi.AnyOutput)
}

// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
func (o AzureBlobFSLinkedServiceOutput) ServicePrincipalCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedService) interface{} { return v.ServicePrincipalCredential }).(pulumi.AnyOutput)
}

// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
func (o AzureBlobFSLinkedServiceOutput) ServicePrincipalCredentialType() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedService) interface{} { return v.ServicePrincipalCredentialType }).(pulumi.AnyOutput)
}

// The ID of the application used to authenticate against the Azure Data Lake Storage Gen2 account. Type: string (or Expression with resultType string).
func (o AzureBlobFSLinkedServiceOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedService) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The Key of the application used to authenticate against the Azure Data Lake Storage Gen2 account.
func (o AzureBlobFSLinkedServiceOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedService) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureBlobFSLinkedServiceOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedService) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AzureBlobFS'.
func (o AzureBlobFSLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Endpoint for the Azure Data Lake Storage Gen2 service. Type: string (or Expression with resultType string).
func (o AzureBlobFSLinkedServiceOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedService) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// Azure Data Lake Storage Gen2 linked service.
type AzureBlobFSLinkedServiceResponse struct {
	// Account key for the Azure Data Lake Storage Gen2 service. Type: string (or Expression with resultType string).
	AccountKey interface{} `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken interface{} `pulumi:"sasToken"`
	// SAS URI of the Azure Data Lake Storage Gen2 service. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri interface{} `pulumi:"sasUri"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential interface{} `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType interface{} `pulumi:"servicePrincipalCredentialType"`
	// The ID of the application used to authenticate against the Azure Data Lake Storage Gen2 account. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against the Azure Data Lake Storage Gen2 account.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureBlobFS'.
	Type string `pulumi:"type"`
	// Endpoint for the Azure Data Lake Storage Gen2 service. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
}

// Azure Data Lake Storage Gen2 linked service.
type AzureBlobFSLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureBlobFSLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobFSLinkedServiceResponse)(nil)).Elem()
}

func (o AzureBlobFSLinkedServiceResponseOutput) ToAzureBlobFSLinkedServiceResponseOutput() AzureBlobFSLinkedServiceResponseOutput {
	return o
}

func (o AzureBlobFSLinkedServiceResponseOutput) ToAzureBlobFSLinkedServiceResponseOutputWithContext(ctx context.Context) AzureBlobFSLinkedServiceResponseOutput {
	return o
}

// Account key for the Azure Data Lake Storage Gen2 service. Type: string (or Expression with resultType string).
func (o AzureBlobFSLinkedServiceResponseOutput) AccountKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedServiceResponse) interface{} { return v.AccountKey }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o AzureBlobFSLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
func (o AzureBlobFSLinkedServiceResponseOutput) AzureCloudType() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedServiceResponse) interface{} { return v.AzureCloudType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureBlobFSLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The credential reference containing authentication information.
func (o AzureBlobFSLinkedServiceResponseOutput) Credential() CredentialReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedServiceResponse) *CredentialReferenceResponse { return v.Credential }).(CredentialReferenceResponsePtrOutput)
}

// Linked service description.
func (o AzureBlobFSLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AzureBlobFSLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AzureBlobFSLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The Azure key vault secret reference of sasToken in sas uri.
func (o AzureBlobFSLinkedServiceResponseOutput) SasToken() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedServiceResponse) interface{} { return v.SasToken }).(pulumi.AnyOutput)
}

// SAS URI of the Azure Data Lake Storage Gen2 service. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureBlobFSLinkedServiceResponseOutput) SasUri() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedServiceResponse) interface{} { return v.SasUri }).(pulumi.AnyOutput)
}

// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
func (o AzureBlobFSLinkedServiceResponseOutput) ServicePrincipalCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedServiceResponse) interface{} { return v.ServicePrincipalCredential }).(pulumi.AnyOutput)
}

// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
func (o AzureBlobFSLinkedServiceResponseOutput) ServicePrincipalCredentialType() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedServiceResponse) interface{} { return v.ServicePrincipalCredentialType }).(pulumi.AnyOutput)
}

// The ID of the application used to authenticate against the Azure Data Lake Storage Gen2 account. Type: string (or Expression with resultType string).
func (o AzureBlobFSLinkedServiceResponseOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedServiceResponse) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The Key of the application used to authenticate against the Azure Data Lake Storage Gen2 account.
func (o AzureBlobFSLinkedServiceResponseOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedServiceResponse) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureBlobFSLinkedServiceResponseOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedServiceResponse) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AzureBlobFS'.
func (o AzureBlobFSLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Endpoint for the Azure Data Lake Storage Gen2 service. Type: string (or Expression with resultType string).
func (o AzureBlobFSLinkedServiceResponseOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLinkedServiceResponse) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// The location of azure blobFS dataset.
type AzureBlobFSLocation struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the fileSystem of azure blobFS. Type: string (or Expression with resultType string).
	FileSystem interface{} `pulumi:"fileSystem"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'AzureBlobFSLocation'.
	Type string `pulumi:"type"`
}

// AzureBlobFSLocationInput is an input type that accepts AzureBlobFSLocationArgs and AzureBlobFSLocationOutput values.
// You can construct a concrete instance of `AzureBlobFSLocationInput` via:
//
//	AzureBlobFSLocationArgs{...}
type AzureBlobFSLocationInput interface {
	pulumi.Input

	ToAzureBlobFSLocationOutput() AzureBlobFSLocationOutput
	ToAzureBlobFSLocationOutputWithContext(context.Context) AzureBlobFSLocationOutput
}

// The location of azure blobFS dataset.
type AzureBlobFSLocationArgs struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// Specify the fileSystem of azure blobFS. Type: string (or Expression with resultType string).
	FileSystem pulumi.Input `pulumi:"fileSystem"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'AzureBlobFSLocation'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureBlobFSLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobFSLocation)(nil)).Elem()
}

func (i AzureBlobFSLocationArgs) ToAzureBlobFSLocationOutput() AzureBlobFSLocationOutput {
	return i.ToAzureBlobFSLocationOutputWithContext(context.Background())
}

func (i AzureBlobFSLocationArgs) ToAzureBlobFSLocationOutputWithContext(ctx context.Context) AzureBlobFSLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobFSLocationOutput)
}

// The location of azure blobFS dataset.
type AzureBlobFSLocationOutput struct{ *pulumi.OutputState }

func (AzureBlobFSLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobFSLocation)(nil)).Elem()
}

func (o AzureBlobFSLocationOutput) ToAzureBlobFSLocationOutput() AzureBlobFSLocationOutput {
	return o
}

func (o AzureBlobFSLocationOutput) ToAzureBlobFSLocationOutputWithContext(ctx context.Context) AzureBlobFSLocationOutput {
	return o
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o AzureBlobFSLocationOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLocation) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the fileSystem of azure blobFS. Type: string (or Expression with resultType string).
func (o AzureBlobFSLocationOutput) FileSystem() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLocation) interface{} { return v.FileSystem }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o AzureBlobFSLocationOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLocation) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
// Expected value is 'AzureBlobFSLocation'.
func (o AzureBlobFSLocationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobFSLocation) string { return v.Type }).(pulumi.StringOutput)
}

// The location of azure blobFS dataset.
type AzureBlobFSLocationResponse struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the fileSystem of azure blobFS. Type: string (or Expression with resultType string).
	FileSystem interface{} `pulumi:"fileSystem"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'AzureBlobFSLocation'.
	Type string `pulumi:"type"`
}

// The location of azure blobFS dataset.
type AzureBlobFSLocationResponseOutput struct{ *pulumi.OutputState }

func (AzureBlobFSLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobFSLocationResponse)(nil)).Elem()
}

func (o AzureBlobFSLocationResponseOutput) ToAzureBlobFSLocationResponseOutput() AzureBlobFSLocationResponseOutput {
	return o
}

func (o AzureBlobFSLocationResponseOutput) ToAzureBlobFSLocationResponseOutputWithContext(ctx context.Context) AzureBlobFSLocationResponseOutput {
	return o
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o AzureBlobFSLocationResponseOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLocationResponse) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the fileSystem of azure blobFS. Type: string (or Expression with resultType string).
func (o AzureBlobFSLocationResponseOutput) FileSystem() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLocationResponse) interface{} { return v.FileSystem }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o AzureBlobFSLocationResponseOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSLocationResponse) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
// Expected value is 'AzureBlobFSLocation'.
func (o AzureBlobFSLocationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobFSLocationResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure blobFS read settings.
type AzureBlobFSReadSettings struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery interface{} `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'AzureBlobFSReadSettings'.
	Type string `pulumi:"type"`
	// Azure blobFS wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Azure blobFS wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// AzureBlobFSReadSettingsInput is an input type that accepts AzureBlobFSReadSettingsArgs and AzureBlobFSReadSettingsOutput values.
// You can construct a concrete instance of `AzureBlobFSReadSettingsInput` via:
//
//	AzureBlobFSReadSettingsArgs{...}
type AzureBlobFSReadSettingsInput interface {
	pulumi.Input

	ToAzureBlobFSReadSettingsOutput() AzureBlobFSReadSettingsOutput
	ToAzureBlobFSReadSettingsOutputWithContext(context.Context) AzureBlobFSReadSettingsOutput
}

// Azure blobFS read settings.
type AzureBlobFSReadSettingsArgs struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion pulumi.Input `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery pulumi.Input `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath pulumi.Input `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd pulumi.Input `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart pulumi.Input `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath pulumi.Input `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive pulumi.Input `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'AzureBlobFSReadSettings'.
	Type pulumi.StringInput `pulumi:"type"`
	// Azure blobFS wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName pulumi.Input `pulumi:"wildcardFileName"`
	// Azure blobFS wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath pulumi.Input `pulumi:"wildcardFolderPath"`
}

func (AzureBlobFSReadSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobFSReadSettings)(nil)).Elem()
}

func (i AzureBlobFSReadSettingsArgs) ToAzureBlobFSReadSettingsOutput() AzureBlobFSReadSettingsOutput {
	return i.ToAzureBlobFSReadSettingsOutputWithContext(context.Background())
}

func (i AzureBlobFSReadSettingsArgs) ToAzureBlobFSReadSettingsOutputWithContext(ctx context.Context) AzureBlobFSReadSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobFSReadSettingsOutput)
}

func (i AzureBlobFSReadSettingsArgs) ToAzureBlobFSReadSettingsPtrOutput() AzureBlobFSReadSettingsPtrOutput {
	return i.ToAzureBlobFSReadSettingsPtrOutputWithContext(context.Background())
}

func (i AzureBlobFSReadSettingsArgs) ToAzureBlobFSReadSettingsPtrOutputWithContext(ctx context.Context) AzureBlobFSReadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobFSReadSettingsOutput).ToAzureBlobFSReadSettingsPtrOutputWithContext(ctx)
}

// AzureBlobFSReadSettingsPtrInput is an input type that accepts AzureBlobFSReadSettingsArgs, AzureBlobFSReadSettingsPtr and AzureBlobFSReadSettingsPtrOutput values.
// You can construct a concrete instance of `AzureBlobFSReadSettingsPtrInput` via:
//
//	        AzureBlobFSReadSettingsArgs{...}
//
//	or:
//
//	        nil
type AzureBlobFSReadSettingsPtrInput interface {
	pulumi.Input

	ToAzureBlobFSReadSettingsPtrOutput() AzureBlobFSReadSettingsPtrOutput
	ToAzureBlobFSReadSettingsPtrOutputWithContext(context.Context) AzureBlobFSReadSettingsPtrOutput
}

type azureBlobFSReadSettingsPtrType AzureBlobFSReadSettingsArgs

func AzureBlobFSReadSettingsPtr(v *AzureBlobFSReadSettingsArgs) AzureBlobFSReadSettingsPtrInput {
	return (*azureBlobFSReadSettingsPtrType)(v)
}

func (*azureBlobFSReadSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureBlobFSReadSettings)(nil)).Elem()
}

func (i *azureBlobFSReadSettingsPtrType) ToAzureBlobFSReadSettingsPtrOutput() AzureBlobFSReadSettingsPtrOutput {
	return i.ToAzureBlobFSReadSettingsPtrOutputWithContext(context.Background())
}

func (i *azureBlobFSReadSettingsPtrType) ToAzureBlobFSReadSettingsPtrOutputWithContext(ctx context.Context) AzureBlobFSReadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobFSReadSettingsPtrOutput)
}

// Azure blobFS read settings.
type AzureBlobFSReadSettingsOutput struct{ *pulumi.OutputState }

func (AzureBlobFSReadSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobFSReadSettings)(nil)).Elem()
}

func (o AzureBlobFSReadSettingsOutput) ToAzureBlobFSReadSettingsOutput() AzureBlobFSReadSettingsOutput {
	return o
}

func (o AzureBlobFSReadSettingsOutput) ToAzureBlobFSReadSettingsOutputWithContext(ctx context.Context) AzureBlobFSReadSettingsOutput {
	return o
}

func (o AzureBlobFSReadSettingsOutput) ToAzureBlobFSReadSettingsPtrOutput() AzureBlobFSReadSettingsPtrOutput {
	return o.ToAzureBlobFSReadSettingsPtrOutputWithContext(context.Background())
}

func (o AzureBlobFSReadSettingsOutput) ToAzureBlobFSReadSettingsPtrOutputWithContext(ctx context.Context) AzureBlobFSReadSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureBlobFSReadSettings) *AzureBlobFSReadSettings {
		return &v
	}).(AzureBlobFSReadSettingsPtrOutput)
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobFSReadSettingsOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSReadSettings) interface{} { return v.DeleteFilesAfterCompletion }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobFSReadSettingsOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSReadSettings) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobFSReadSettingsOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSReadSettings) interface{} { return v.EnablePartitionDiscovery }).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o AzureBlobFSReadSettingsOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSReadSettings) interface{} { return v.FileListPath }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureBlobFSReadSettingsOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSReadSettings) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o AzureBlobFSReadSettingsOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSReadSettings) interface{} { return v.ModifiedDatetimeEnd }).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o AzureBlobFSReadSettingsOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSReadSettings) interface{} { return v.ModifiedDatetimeStart }).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o AzureBlobFSReadSettingsOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSReadSettings) interface{} { return v.PartitionRootPath }).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobFSReadSettingsOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSReadSettings) interface{} { return v.Recursive }).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'AzureBlobFSReadSettings'.
func (o AzureBlobFSReadSettingsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobFSReadSettings) string { return v.Type }).(pulumi.StringOutput)
}

// Azure blobFS wildcardFileName. Type: string (or Expression with resultType string).
func (o AzureBlobFSReadSettingsOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSReadSettings) interface{} { return v.WildcardFileName }).(pulumi.AnyOutput)
}

// Azure blobFS wildcardFolderPath. Type: string (or Expression with resultType string).
func (o AzureBlobFSReadSettingsOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSReadSettings) interface{} { return v.WildcardFolderPath }).(pulumi.AnyOutput)
}

type AzureBlobFSReadSettingsPtrOutput struct{ *pulumi.OutputState }

func (AzureBlobFSReadSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureBlobFSReadSettings)(nil)).Elem()
}

func (o AzureBlobFSReadSettingsPtrOutput) ToAzureBlobFSReadSettingsPtrOutput() AzureBlobFSReadSettingsPtrOutput {
	return o
}

func (o AzureBlobFSReadSettingsPtrOutput) ToAzureBlobFSReadSettingsPtrOutputWithContext(ctx context.Context) AzureBlobFSReadSettingsPtrOutput {
	return o
}

func (o AzureBlobFSReadSettingsPtrOutput) Elem() AzureBlobFSReadSettingsOutput {
	return o.ApplyT(func(v *AzureBlobFSReadSettings) AzureBlobFSReadSettings {
		if v != nil {
			return *v
		}
		var ret AzureBlobFSReadSettings
		return ret
	}).(AzureBlobFSReadSettingsOutput)
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobFSReadSettingsPtrOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobFSReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.DeleteFilesAfterCompletion
	}).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobFSReadSettingsPtrOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobFSReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableMetricsCollection
	}).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobFSReadSettingsPtrOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobFSReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.EnablePartitionDiscovery
	}).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o AzureBlobFSReadSettingsPtrOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobFSReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.FileListPath
	}).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureBlobFSReadSettingsPtrOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobFSReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentConnections
	}).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o AzureBlobFSReadSettingsPtrOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobFSReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeEnd
	}).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o AzureBlobFSReadSettingsPtrOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobFSReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeStart
	}).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o AzureBlobFSReadSettingsPtrOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobFSReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionRootPath
	}).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobFSReadSettingsPtrOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobFSReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.Recursive
	}).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'AzureBlobFSReadSettings'.
func (o AzureBlobFSReadSettingsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureBlobFSReadSettings) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Azure blobFS wildcardFileName. Type: string (or Expression with resultType string).
func (o AzureBlobFSReadSettingsPtrOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobFSReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFileName
	}).(pulumi.AnyOutput)
}

// Azure blobFS wildcardFolderPath. Type: string (or Expression with resultType string).
func (o AzureBlobFSReadSettingsPtrOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobFSReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFolderPath
	}).(pulumi.AnyOutput)
}

// Azure blobFS read settings.
type AzureBlobFSReadSettingsResponse struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery interface{} `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'AzureBlobFSReadSettings'.
	Type string `pulumi:"type"`
	// Azure blobFS wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Azure blobFS wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// Azure blobFS read settings.
type AzureBlobFSReadSettingsResponseOutput struct{ *pulumi.OutputState }

func (AzureBlobFSReadSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobFSReadSettingsResponse)(nil)).Elem()
}

func (o AzureBlobFSReadSettingsResponseOutput) ToAzureBlobFSReadSettingsResponseOutput() AzureBlobFSReadSettingsResponseOutput {
	return o
}

func (o AzureBlobFSReadSettingsResponseOutput) ToAzureBlobFSReadSettingsResponseOutputWithContext(ctx context.Context) AzureBlobFSReadSettingsResponseOutput {
	return o
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobFSReadSettingsResponseOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSReadSettingsResponse) interface{} { return v.DeleteFilesAfterCompletion }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobFSReadSettingsResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSReadSettingsResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobFSReadSettingsResponseOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSReadSettingsResponse) interface{} { return v.EnablePartitionDiscovery }).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o AzureBlobFSReadSettingsResponseOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSReadSettingsResponse) interface{} { return v.FileListPath }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureBlobFSReadSettingsResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSReadSettingsResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o AzureBlobFSReadSettingsResponseOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSReadSettingsResponse) interface{} { return v.ModifiedDatetimeEnd }).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o AzureBlobFSReadSettingsResponseOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSReadSettingsResponse) interface{} { return v.ModifiedDatetimeStart }).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o AzureBlobFSReadSettingsResponseOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSReadSettingsResponse) interface{} { return v.PartitionRootPath }).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobFSReadSettingsResponseOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSReadSettingsResponse) interface{} { return v.Recursive }).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'AzureBlobFSReadSettings'.
func (o AzureBlobFSReadSettingsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobFSReadSettingsResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure blobFS wildcardFileName. Type: string (or Expression with resultType string).
func (o AzureBlobFSReadSettingsResponseOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSReadSettingsResponse) interface{} { return v.WildcardFileName }).(pulumi.AnyOutput)
}

// Azure blobFS wildcardFolderPath. Type: string (or Expression with resultType string).
func (o AzureBlobFSReadSettingsResponseOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSReadSettingsResponse) interface{} { return v.WildcardFolderPath }).(pulumi.AnyOutput)
}

type AzureBlobFSReadSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureBlobFSReadSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureBlobFSReadSettingsResponse)(nil)).Elem()
}

func (o AzureBlobFSReadSettingsResponsePtrOutput) ToAzureBlobFSReadSettingsResponsePtrOutput() AzureBlobFSReadSettingsResponsePtrOutput {
	return o
}

func (o AzureBlobFSReadSettingsResponsePtrOutput) ToAzureBlobFSReadSettingsResponsePtrOutputWithContext(ctx context.Context) AzureBlobFSReadSettingsResponsePtrOutput {
	return o
}

func (o AzureBlobFSReadSettingsResponsePtrOutput) Elem() AzureBlobFSReadSettingsResponseOutput {
	return o.ApplyT(func(v *AzureBlobFSReadSettingsResponse) AzureBlobFSReadSettingsResponse {
		if v != nil {
			return *v
		}
		var ret AzureBlobFSReadSettingsResponse
		return ret
	}).(AzureBlobFSReadSettingsResponseOutput)
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobFSReadSettingsResponsePtrOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobFSReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.DeleteFilesAfterCompletion
	}).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobFSReadSettingsResponsePtrOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobFSReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableMetricsCollection
	}).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobFSReadSettingsResponsePtrOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobFSReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.EnablePartitionDiscovery
	}).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o AzureBlobFSReadSettingsResponsePtrOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobFSReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.FileListPath
	}).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureBlobFSReadSettingsResponsePtrOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobFSReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentConnections
	}).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o AzureBlobFSReadSettingsResponsePtrOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobFSReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeEnd
	}).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o AzureBlobFSReadSettingsResponsePtrOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobFSReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeStart
	}).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o AzureBlobFSReadSettingsResponsePtrOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobFSReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionRootPath
	}).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobFSReadSettingsResponsePtrOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobFSReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Recursive
	}).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'AzureBlobFSReadSettings'.
func (o AzureBlobFSReadSettingsResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureBlobFSReadSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Azure blobFS wildcardFileName. Type: string (or Expression with resultType string).
func (o AzureBlobFSReadSettingsResponsePtrOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobFSReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFileName
	}).(pulumi.AnyOutput)
}

// Azure blobFS wildcardFolderPath. Type: string (or Expression with resultType string).
func (o AzureBlobFSReadSettingsResponsePtrOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobFSReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFolderPath
	}).(pulumi.AnyOutput)
}

// A copy activity Azure Data Lake Storage Gen2 sink.
type AzureBlobFSSink struct {
	// The type of copy behavior for copy sink. Type: string (or Expression with resultType string).
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
	Metadata []MetadataItem `pulumi:"metadata"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureBlobFSSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// AzureBlobFSSinkInput is an input type that accepts AzureBlobFSSinkArgs and AzureBlobFSSinkOutput values.
// You can construct a concrete instance of `AzureBlobFSSinkInput` via:
//
//	AzureBlobFSSinkArgs{...}
type AzureBlobFSSinkInput interface {
	pulumi.Input

	ToAzureBlobFSSinkOutput() AzureBlobFSSinkOutput
	ToAzureBlobFSSinkOutputWithContext(context.Context) AzureBlobFSSinkOutput
}

// A copy activity Azure Data Lake Storage Gen2 sink.
type AzureBlobFSSinkArgs struct {
	// The type of copy behavior for copy sink. Type: string (or Expression with resultType string).
	CopyBehavior pulumi.Input `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
	Metadata MetadataItemArrayInput `pulumi:"metadata"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount pulumi.Input `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait pulumi.Input `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureBlobFSSink'.
	Type pulumi.StringInput `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize pulumi.Input `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout pulumi.Input `pulumi:"writeBatchTimeout"`
}

func (AzureBlobFSSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobFSSink)(nil)).Elem()
}

func (i AzureBlobFSSinkArgs) ToAzureBlobFSSinkOutput() AzureBlobFSSinkOutput {
	return i.ToAzureBlobFSSinkOutputWithContext(context.Background())
}

func (i AzureBlobFSSinkArgs) ToAzureBlobFSSinkOutputWithContext(ctx context.Context) AzureBlobFSSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobFSSinkOutput)
}

// A copy activity Azure Data Lake Storage Gen2 sink.
type AzureBlobFSSinkOutput struct{ *pulumi.OutputState }

func (AzureBlobFSSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobFSSink)(nil)).Elem()
}

func (o AzureBlobFSSinkOutput) ToAzureBlobFSSinkOutput() AzureBlobFSSinkOutput {
	return o
}

func (o AzureBlobFSSinkOutput) ToAzureBlobFSSinkOutputWithContext(ctx context.Context) AzureBlobFSSinkOutput {
	return o
}

// The type of copy behavior for copy sink. Type: string (or Expression with resultType string).
func (o AzureBlobFSSinkOutput) CopyBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSSink) interface{} { return v.CopyBehavior }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobFSSinkOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSSink) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o AzureBlobFSSinkOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSSink) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
func (o AzureBlobFSSinkOutput) Metadata() MetadataItemArrayOutput {
	return o.ApplyT(func(v AzureBlobFSSink) []MetadataItem { return v.Metadata }).(MetadataItemArrayOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o AzureBlobFSSinkOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSSink) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureBlobFSSinkOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSSink) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'AzureBlobFSSink'.
func (o AzureBlobFSSinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobFSSink) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o AzureBlobFSSinkOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSSink) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureBlobFSSinkOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSSink) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity Azure Data Lake Storage Gen2 sink.
type AzureBlobFSSinkResponse struct {
	// The type of copy behavior for copy sink. Type: string (or Expression with resultType string).
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
	Metadata []MetadataItemResponse `pulumi:"metadata"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureBlobFSSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Azure Data Lake Storage Gen2 sink.
type AzureBlobFSSinkResponseOutput struct{ *pulumi.OutputState }

func (AzureBlobFSSinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobFSSinkResponse)(nil)).Elem()
}

func (o AzureBlobFSSinkResponseOutput) ToAzureBlobFSSinkResponseOutput() AzureBlobFSSinkResponseOutput {
	return o
}

func (o AzureBlobFSSinkResponseOutput) ToAzureBlobFSSinkResponseOutputWithContext(ctx context.Context) AzureBlobFSSinkResponseOutput {
	return o
}

// The type of copy behavior for copy sink. Type: string (or Expression with resultType string).
func (o AzureBlobFSSinkResponseOutput) CopyBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSSinkResponse) interface{} { return v.CopyBehavior }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobFSSinkResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSSinkResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o AzureBlobFSSinkResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSSinkResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
func (o AzureBlobFSSinkResponseOutput) Metadata() MetadataItemResponseArrayOutput {
	return o.ApplyT(func(v AzureBlobFSSinkResponse) []MetadataItemResponse { return v.Metadata }).(MetadataItemResponseArrayOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o AzureBlobFSSinkResponseOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSSinkResponse) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureBlobFSSinkResponseOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSSinkResponse) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'AzureBlobFSSink'.
func (o AzureBlobFSSinkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobFSSinkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o AzureBlobFSSinkResponseOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSSinkResponse) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureBlobFSSinkResponseOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSSinkResponse) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity Azure BlobFS source.
type AzureBlobFSSource struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// Number of header lines to skip from each blob. Type: integer (or Expression with resultType integer).
	SkipHeaderLineCount interface{} `pulumi:"skipHeaderLineCount"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Treat empty as null. Type: boolean (or Expression with resultType boolean).
	TreatEmptyAsNull interface{} `pulumi:"treatEmptyAsNull"`
	// Copy source type.
	// Expected value is 'AzureBlobFSSource'.
	Type string `pulumi:"type"`
}

// AzureBlobFSSourceInput is an input type that accepts AzureBlobFSSourceArgs and AzureBlobFSSourceOutput values.
// You can construct a concrete instance of `AzureBlobFSSourceInput` via:
//
//	AzureBlobFSSourceArgs{...}
type AzureBlobFSSourceInput interface {
	pulumi.Input

	ToAzureBlobFSSourceOutput() AzureBlobFSSourceOutput
	ToAzureBlobFSSourceOutputWithContext(context.Context) AzureBlobFSSourceOutput
}

// A copy activity Azure BlobFS source.
type AzureBlobFSSourceArgs struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive pulumi.Input `pulumi:"recursive"`
	// Number of header lines to skip from each blob. Type: integer (or Expression with resultType integer).
	SkipHeaderLineCount pulumi.Input `pulumi:"skipHeaderLineCount"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Treat empty as null. Type: boolean (or Expression with resultType boolean).
	TreatEmptyAsNull pulumi.Input `pulumi:"treatEmptyAsNull"`
	// Copy source type.
	// Expected value is 'AzureBlobFSSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureBlobFSSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobFSSource)(nil)).Elem()
}

func (i AzureBlobFSSourceArgs) ToAzureBlobFSSourceOutput() AzureBlobFSSourceOutput {
	return i.ToAzureBlobFSSourceOutputWithContext(context.Background())
}

func (i AzureBlobFSSourceArgs) ToAzureBlobFSSourceOutputWithContext(ctx context.Context) AzureBlobFSSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobFSSourceOutput)
}

// A copy activity Azure BlobFS source.
type AzureBlobFSSourceOutput struct{ *pulumi.OutputState }

func (AzureBlobFSSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobFSSource)(nil)).Elem()
}

func (o AzureBlobFSSourceOutput) ToAzureBlobFSSourceOutput() AzureBlobFSSourceOutput {
	return o
}

func (o AzureBlobFSSourceOutput) ToAzureBlobFSSourceOutputWithContext(ctx context.Context) AzureBlobFSSourceOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobFSSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureBlobFSSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobFSSourceOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSSource) interface{} { return v.Recursive }).(pulumi.AnyOutput)
}

// Number of header lines to skip from each blob. Type: integer (or Expression with resultType integer).
func (o AzureBlobFSSourceOutput) SkipHeaderLineCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSSource) interface{} { return v.SkipHeaderLineCount }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o AzureBlobFSSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureBlobFSSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Treat empty as null. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobFSSourceOutput) TreatEmptyAsNull() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSSource) interface{} { return v.TreatEmptyAsNull }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'AzureBlobFSSource'.
func (o AzureBlobFSSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobFSSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Azure BlobFS source.
type AzureBlobFSSourceResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// Number of header lines to skip from each blob. Type: integer (or Expression with resultType integer).
	SkipHeaderLineCount interface{} `pulumi:"skipHeaderLineCount"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Treat empty as null. Type: boolean (or Expression with resultType boolean).
	TreatEmptyAsNull interface{} `pulumi:"treatEmptyAsNull"`
	// Copy source type.
	// Expected value is 'AzureBlobFSSource'.
	Type string `pulumi:"type"`
}

// A copy activity Azure BlobFS source.
type AzureBlobFSSourceResponseOutput struct{ *pulumi.OutputState }

func (AzureBlobFSSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobFSSourceResponse)(nil)).Elem()
}

func (o AzureBlobFSSourceResponseOutput) ToAzureBlobFSSourceResponseOutput() AzureBlobFSSourceResponseOutput {
	return o
}

func (o AzureBlobFSSourceResponseOutput) ToAzureBlobFSSourceResponseOutputWithContext(ctx context.Context) AzureBlobFSSourceResponseOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobFSSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureBlobFSSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobFSSourceResponseOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSSourceResponse) interface{} { return v.Recursive }).(pulumi.AnyOutput)
}

// Number of header lines to skip from each blob. Type: integer (or Expression with resultType integer).
func (o AzureBlobFSSourceResponseOutput) SkipHeaderLineCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSSourceResponse) interface{} { return v.SkipHeaderLineCount }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o AzureBlobFSSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureBlobFSSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Treat empty as null. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobFSSourceResponseOutput) TreatEmptyAsNull() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSSourceResponse) interface{} { return v.TreatEmptyAsNull }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'AzureBlobFSSource'.
func (o AzureBlobFSSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobFSSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure blobFS write settings.
type AzureBlobFSWriteSettings struct {
	// Indicates the block size(MB) when writing data to blob. Type: integer (or Expression with resultType integer).
	BlockSizeInMB interface{} `pulumi:"blockSizeInMB"`
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
	Metadata []MetadataItem `pulumi:"metadata"`
	// The write setting type.
	// Expected value is 'AzureBlobFSWriteSettings'.
	Type string `pulumi:"type"`
}

// AzureBlobFSWriteSettingsInput is an input type that accepts AzureBlobFSWriteSettingsArgs and AzureBlobFSWriteSettingsOutput values.
// You can construct a concrete instance of `AzureBlobFSWriteSettingsInput` via:
//
//	AzureBlobFSWriteSettingsArgs{...}
type AzureBlobFSWriteSettingsInput interface {
	pulumi.Input

	ToAzureBlobFSWriteSettingsOutput() AzureBlobFSWriteSettingsOutput
	ToAzureBlobFSWriteSettingsOutputWithContext(context.Context) AzureBlobFSWriteSettingsOutput
}

// Azure blobFS write settings.
type AzureBlobFSWriteSettingsArgs struct {
	// Indicates the block size(MB) when writing data to blob. Type: integer (or Expression with resultType integer).
	BlockSizeInMB pulumi.Input `pulumi:"blockSizeInMB"`
	// The type of copy behavior for copy sink.
	CopyBehavior pulumi.Input `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
	Metadata MetadataItemArrayInput `pulumi:"metadata"`
	// The write setting type.
	// Expected value is 'AzureBlobFSWriteSettings'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureBlobFSWriteSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobFSWriteSettings)(nil)).Elem()
}

func (i AzureBlobFSWriteSettingsArgs) ToAzureBlobFSWriteSettingsOutput() AzureBlobFSWriteSettingsOutput {
	return i.ToAzureBlobFSWriteSettingsOutputWithContext(context.Background())
}

func (i AzureBlobFSWriteSettingsArgs) ToAzureBlobFSWriteSettingsOutputWithContext(ctx context.Context) AzureBlobFSWriteSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobFSWriteSettingsOutput)
}

func (i AzureBlobFSWriteSettingsArgs) ToAzureBlobFSWriteSettingsPtrOutput() AzureBlobFSWriteSettingsPtrOutput {
	return i.ToAzureBlobFSWriteSettingsPtrOutputWithContext(context.Background())
}

func (i AzureBlobFSWriteSettingsArgs) ToAzureBlobFSWriteSettingsPtrOutputWithContext(ctx context.Context) AzureBlobFSWriteSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobFSWriteSettingsOutput).ToAzureBlobFSWriteSettingsPtrOutputWithContext(ctx)
}

// AzureBlobFSWriteSettingsPtrInput is an input type that accepts AzureBlobFSWriteSettingsArgs, AzureBlobFSWriteSettingsPtr and AzureBlobFSWriteSettingsPtrOutput values.
// You can construct a concrete instance of `AzureBlobFSWriteSettingsPtrInput` via:
//
//	        AzureBlobFSWriteSettingsArgs{...}
//
//	or:
//
//	        nil
type AzureBlobFSWriteSettingsPtrInput interface {
	pulumi.Input

	ToAzureBlobFSWriteSettingsPtrOutput() AzureBlobFSWriteSettingsPtrOutput
	ToAzureBlobFSWriteSettingsPtrOutputWithContext(context.Context) AzureBlobFSWriteSettingsPtrOutput
}

type azureBlobFSWriteSettingsPtrType AzureBlobFSWriteSettingsArgs

func AzureBlobFSWriteSettingsPtr(v *AzureBlobFSWriteSettingsArgs) AzureBlobFSWriteSettingsPtrInput {
	return (*azureBlobFSWriteSettingsPtrType)(v)
}

func (*azureBlobFSWriteSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureBlobFSWriteSettings)(nil)).Elem()
}

func (i *azureBlobFSWriteSettingsPtrType) ToAzureBlobFSWriteSettingsPtrOutput() AzureBlobFSWriteSettingsPtrOutput {
	return i.ToAzureBlobFSWriteSettingsPtrOutputWithContext(context.Background())
}

func (i *azureBlobFSWriteSettingsPtrType) ToAzureBlobFSWriteSettingsPtrOutputWithContext(ctx context.Context) AzureBlobFSWriteSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobFSWriteSettingsPtrOutput)
}

// Azure blobFS write settings.
type AzureBlobFSWriteSettingsOutput struct{ *pulumi.OutputState }

func (AzureBlobFSWriteSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobFSWriteSettings)(nil)).Elem()
}

func (o AzureBlobFSWriteSettingsOutput) ToAzureBlobFSWriteSettingsOutput() AzureBlobFSWriteSettingsOutput {
	return o
}

func (o AzureBlobFSWriteSettingsOutput) ToAzureBlobFSWriteSettingsOutputWithContext(ctx context.Context) AzureBlobFSWriteSettingsOutput {
	return o
}

func (o AzureBlobFSWriteSettingsOutput) ToAzureBlobFSWriteSettingsPtrOutput() AzureBlobFSWriteSettingsPtrOutput {
	return o.ToAzureBlobFSWriteSettingsPtrOutputWithContext(context.Background())
}

func (o AzureBlobFSWriteSettingsOutput) ToAzureBlobFSWriteSettingsPtrOutputWithContext(ctx context.Context) AzureBlobFSWriteSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureBlobFSWriteSettings) *AzureBlobFSWriteSettings {
		return &v
	}).(AzureBlobFSWriteSettingsPtrOutput)
}

// Indicates the block size(MB) when writing data to blob. Type: integer (or Expression with resultType integer).
func (o AzureBlobFSWriteSettingsOutput) BlockSizeInMB() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSWriteSettings) interface{} { return v.BlockSizeInMB }).(pulumi.AnyOutput)
}

// The type of copy behavior for copy sink.
func (o AzureBlobFSWriteSettingsOutput) CopyBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSWriteSettings) interface{} { return v.CopyBehavior }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobFSWriteSettingsOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSWriteSettings) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureBlobFSWriteSettingsOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSWriteSettings) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
func (o AzureBlobFSWriteSettingsOutput) Metadata() MetadataItemArrayOutput {
	return o.ApplyT(func(v AzureBlobFSWriteSettings) []MetadataItem { return v.Metadata }).(MetadataItemArrayOutput)
}

// The write setting type.
// Expected value is 'AzureBlobFSWriteSettings'.
func (o AzureBlobFSWriteSettingsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobFSWriteSettings) string { return v.Type }).(pulumi.StringOutput)
}

type AzureBlobFSWriteSettingsPtrOutput struct{ *pulumi.OutputState }

func (AzureBlobFSWriteSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureBlobFSWriteSettings)(nil)).Elem()
}

func (o AzureBlobFSWriteSettingsPtrOutput) ToAzureBlobFSWriteSettingsPtrOutput() AzureBlobFSWriteSettingsPtrOutput {
	return o
}

func (o AzureBlobFSWriteSettingsPtrOutput) ToAzureBlobFSWriteSettingsPtrOutputWithContext(ctx context.Context) AzureBlobFSWriteSettingsPtrOutput {
	return o
}

func (o AzureBlobFSWriteSettingsPtrOutput) Elem() AzureBlobFSWriteSettingsOutput {
	return o.ApplyT(func(v *AzureBlobFSWriteSettings) AzureBlobFSWriteSettings {
		if v != nil {
			return *v
		}
		var ret AzureBlobFSWriteSettings
		return ret
	}).(AzureBlobFSWriteSettingsOutput)
}

// Indicates the block size(MB) when writing data to blob. Type: integer (or Expression with resultType integer).
func (o AzureBlobFSWriteSettingsPtrOutput) BlockSizeInMB() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobFSWriteSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.BlockSizeInMB
	}).(pulumi.AnyOutput)
}

// The type of copy behavior for copy sink.
func (o AzureBlobFSWriteSettingsPtrOutput) CopyBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobFSWriteSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.CopyBehavior
	}).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobFSWriteSettingsPtrOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobFSWriteSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableMetricsCollection
	}).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureBlobFSWriteSettingsPtrOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobFSWriteSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentConnections
	}).(pulumi.AnyOutput)
}

// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
func (o AzureBlobFSWriteSettingsPtrOutput) Metadata() MetadataItemArrayOutput {
	return o.ApplyT(func(v *AzureBlobFSWriteSettings) []MetadataItem {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(MetadataItemArrayOutput)
}

// The write setting type.
// Expected value is 'AzureBlobFSWriteSettings'.
func (o AzureBlobFSWriteSettingsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureBlobFSWriteSettings) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Azure blobFS write settings.
type AzureBlobFSWriteSettingsResponse struct {
	// Indicates the block size(MB) when writing data to blob. Type: integer (or Expression with resultType integer).
	BlockSizeInMB interface{} `pulumi:"blockSizeInMB"`
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
	Metadata []MetadataItemResponse `pulumi:"metadata"`
	// The write setting type.
	// Expected value is 'AzureBlobFSWriteSettings'.
	Type string `pulumi:"type"`
}

// Azure blobFS write settings.
type AzureBlobFSWriteSettingsResponseOutput struct{ *pulumi.OutputState }

func (AzureBlobFSWriteSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobFSWriteSettingsResponse)(nil)).Elem()
}

func (o AzureBlobFSWriteSettingsResponseOutput) ToAzureBlobFSWriteSettingsResponseOutput() AzureBlobFSWriteSettingsResponseOutput {
	return o
}

func (o AzureBlobFSWriteSettingsResponseOutput) ToAzureBlobFSWriteSettingsResponseOutputWithContext(ctx context.Context) AzureBlobFSWriteSettingsResponseOutput {
	return o
}

// Indicates the block size(MB) when writing data to blob. Type: integer (or Expression with resultType integer).
func (o AzureBlobFSWriteSettingsResponseOutput) BlockSizeInMB() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSWriteSettingsResponse) interface{} { return v.BlockSizeInMB }).(pulumi.AnyOutput)
}

// The type of copy behavior for copy sink.
func (o AzureBlobFSWriteSettingsResponseOutput) CopyBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSWriteSettingsResponse) interface{} { return v.CopyBehavior }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobFSWriteSettingsResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSWriteSettingsResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureBlobFSWriteSettingsResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobFSWriteSettingsResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
func (o AzureBlobFSWriteSettingsResponseOutput) Metadata() MetadataItemResponseArrayOutput {
	return o.ApplyT(func(v AzureBlobFSWriteSettingsResponse) []MetadataItemResponse { return v.Metadata }).(MetadataItemResponseArrayOutput)
}

// The write setting type.
// Expected value is 'AzureBlobFSWriteSettings'.
func (o AzureBlobFSWriteSettingsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobFSWriteSettingsResponse) string { return v.Type }).(pulumi.StringOutput)
}

type AzureBlobFSWriteSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureBlobFSWriteSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureBlobFSWriteSettingsResponse)(nil)).Elem()
}

func (o AzureBlobFSWriteSettingsResponsePtrOutput) ToAzureBlobFSWriteSettingsResponsePtrOutput() AzureBlobFSWriteSettingsResponsePtrOutput {
	return o
}

func (o AzureBlobFSWriteSettingsResponsePtrOutput) ToAzureBlobFSWriteSettingsResponsePtrOutputWithContext(ctx context.Context) AzureBlobFSWriteSettingsResponsePtrOutput {
	return o
}

func (o AzureBlobFSWriteSettingsResponsePtrOutput) Elem() AzureBlobFSWriteSettingsResponseOutput {
	return o.ApplyT(func(v *AzureBlobFSWriteSettingsResponse) AzureBlobFSWriteSettingsResponse {
		if v != nil {
			return *v
		}
		var ret AzureBlobFSWriteSettingsResponse
		return ret
	}).(AzureBlobFSWriteSettingsResponseOutput)
}

// Indicates the block size(MB) when writing data to blob. Type: integer (or Expression with resultType integer).
func (o AzureBlobFSWriteSettingsResponsePtrOutput) BlockSizeInMB() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobFSWriteSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.BlockSizeInMB
	}).(pulumi.AnyOutput)
}

// The type of copy behavior for copy sink.
func (o AzureBlobFSWriteSettingsResponsePtrOutput) CopyBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobFSWriteSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.CopyBehavior
	}).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobFSWriteSettingsResponsePtrOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobFSWriteSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableMetricsCollection
	}).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureBlobFSWriteSettingsResponsePtrOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobFSWriteSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentConnections
	}).(pulumi.AnyOutput)
}

// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
func (o AzureBlobFSWriteSettingsResponsePtrOutput) Metadata() MetadataItemResponseArrayOutput {
	return o.ApplyT(func(v *AzureBlobFSWriteSettingsResponse) []MetadataItemResponse {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(MetadataItemResponseArrayOutput)
}

// The write setting type.
// Expected value is 'AzureBlobFSWriteSettings'.
func (o AzureBlobFSWriteSettingsResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureBlobFSWriteSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The azure blob storage linked service.
type AzureBlobStorageLinkedService struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey *AzureKeyVaultSecretReference `pulumi:"accountKey"`
	// Specify the kind of your storage account. Allowed values are: Storage (general purpose v1), StorageV2 (general purpose v2), BlobStorage, or BlockBlobStorage. Type: string (or Expression with resultType string).
	AccountKind interface{} `pulumi:"accountKind"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The type used for authentication. Type: string.
	AuthenticationType *string `pulumi:"authenticationType"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri, serviceEndpoint property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Container uri of the Azure Blob Storage resource only support for anonymous access. Type: string (or Expression with resultType string).
	ContainerUri interface{} `pulumi:"containerUri"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken *AzureKeyVaultSecretReference `pulumi:"sasToken"`
	// SAS URI of the Azure Blob Storage resource. It is mutually exclusive with connectionString, serviceEndpoint property. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri interface{} `pulumi:"sasUri"`
	// Blob service endpoint of the Azure Blob Storage resource. It is mutually exclusive with connectionString, sasUri property.
	ServiceEndpoint interface{} `pulumi:"serviceEndpoint"`
	// The ID of the service principal used to authenticate against Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Data Warehouse.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureBlobStorage'.
	Type string `pulumi:"type"`
}

// AzureBlobStorageLinkedServiceInput is an input type that accepts AzureBlobStorageLinkedServiceArgs and AzureBlobStorageLinkedServiceOutput values.
// You can construct a concrete instance of `AzureBlobStorageLinkedServiceInput` via:
//
//	AzureBlobStorageLinkedServiceArgs{...}
type AzureBlobStorageLinkedServiceInput interface {
	pulumi.Input

	ToAzureBlobStorageLinkedServiceOutput() AzureBlobStorageLinkedServiceOutput
	ToAzureBlobStorageLinkedServiceOutputWithContext(context.Context) AzureBlobStorageLinkedServiceOutput
}

// The azure blob storage linked service.
type AzureBlobStorageLinkedServiceArgs struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey AzureKeyVaultSecretReferencePtrInput `pulumi:"accountKey"`
	// Specify the kind of your storage account. Allowed values are: Storage (general purpose v1), StorageV2 (general purpose v2), BlobStorage, or BlockBlobStorage. Type: string (or Expression with resultType string).
	AccountKind pulumi.Input `pulumi:"accountKind"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The type used for authentication. Type: string.
	AuthenticationType pulumi.StringPtrInput `pulumi:"authenticationType"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType pulumi.Input `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri, serviceEndpoint property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Container uri of the Azure Blob Storage resource only support for anonymous access. Type: string (or Expression with resultType string).
	ContainerUri pulumi.Input `pulumi:"containerUri"`
	// The credential reference containing authentication information.
	Credential CredentialReferencePtrInput `pulumi:"credential"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken AzureKeyVaultSecretReferencePtrInput `pulumi:"sasToken"`
	// SAS URI of the Azure Blob Storage resource. It is mutually exclusive with connectionString, serviceEndpoint property. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri pulumi.Input `pulumi:"sasUri"`
	// Blob service endpoint of the Azure Blob Storage resource. It is mutually exclusive with connectionString, sasUri property.
	ServiceEndpoint pulumi.Input `pulumi:"serviceEndpoint"`
	// The ID of the service principal used to authenticate against Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Data Warehouse.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant pulumi.Input `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureBlobStorage'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureBlobStorageLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobStorageLinkedService)(nil)).Elem()
}

func (i AzureBlobStorageLinkedServiceArgs) ToAzureBlobStorageLinkedServiceOutput() AzureBlobStorageLinkedServiceOutput {
	return i.ToAzureBlobStorageLinkedServiceOutputWithContext(context.Background())
}

func (i AzureBlobStorageLinkedServiceArgs) ToAzureBlobStorageLinkedServiceOutputWithContext(ctx context.Context) AzureBlobStorageLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobStorageLinkedServiceOutput)
}

// The azure blob storage linked service.
type AzureBlobStorageLinkedServiceOutput struct{ *pulumi.OutputState }

func (AzureBlobStorageLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobStorageLinkedService)(nil)).Elem()
}

func (o AzureBlobStorageLinkedServiceOutput) ToAzureBlobStorageLinkedServiceOutput() AzureBlobStorageLinkedServiceOutput {
	return o
}

func (o AzureBlobStorageLinkedServiceOutput) ToAzureBlobStorageLinkedServiceOutputWithContext(ctx context.Context) AzureBlobStorageLinkedServiceOutput {
	return o
}

// The Azure key vault secret reference of accountKey in connection string.
func (o AzureBlobStorageLinkedServiceOutput) AccountKey() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedService) *AzureKeyVaultSecretReference { return v.AccountKey }).(AzureKeyVaultSecretReferencePtrOutput)
}

// Specify the kind of your storage account. Allowed values are: Storage (general purpose v1), StorageV2 (general purpose v2), BlobStorage, or BlockBlobStorage. Type: string (or Expression with resultType string).
func (o AzureBlobStorageLinkedServiceOutput) AccountKind() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedService) interface{} { return v.AccountKind }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o AzureBlobStorageLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The type used for authentication. Type: string.
func (o AzureBlobStorageLinkedServiceOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedService) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
func (o AzureBlobStorageLinkedServiceOutput) AzureCloudType() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedService) interface{} { return v.AzureCloudType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureBlobStorageLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The connection string. It is mutually exclusive with sasUri, serviceEndpoint property. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureBlobStorageLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Container uri of the Azure Blob Storage resource only support for anonymous access. Type: string (or Expression with resultType string).
func (o AzureBlobStorageLinkedServiceOutput) ContainerUri() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedService) interface{} { return v.ContainerUri }).(pulumi.AnyOutput)
}

// The credential reference containing authentication information.
func (o AzureBlobStorageLinkedServiceOutput) Credential() CredentialReferencePtrOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedService) *CredentialReference { return v.Credential }).(CredentialReferencePtrOutput)
}

// Linked service description.
func (o AzureBlobStorageLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AzureBlobStorageLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AzureBlobStorageLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The Azure key vault secret reference of sasToken in sas uri.
func (o AzureBlobStorageLinkedServiceOutput) SasToken() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedService) *AzureKeyVaultSecretReference { return v.SasToken }).(AzureKeyVaultSecretReferencePtrOutput)
}

// SAS URI of the Azure Blob Storage resource. It is mutually exclusive with connectionString, serviceEndpoint property. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureBlobStorageLinkedServiceOutput) SasUri() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedService) interface{} { return v.SasUri }).(pulumi.AnyOutput)
}

// Blob service endpoint of the Azure Blob Storage resource. It is mutually exclusive with connectionString, sasUri property.
func (o AzureBlobStorageLinkedServiceOutput) ServiceEndpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedService) interface{} { return v.ServiceEndpoint }).(pulumi.AnyOutput)
}

// The ID of the service principal used to authenticate against Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
func (o AzureBlobStorageLinkedServiceOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedService) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The key of the service principal used to authenticate against Azure SQL Data Warehouse.
func (o AzureBlobStorageLinkedServiceOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedService) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureBlobStorageLinkedServiceOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedService) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AzureBlobStorage'.
func (o AzureBlobStorageLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The azure blob storage linked service.
type AzureBlobStorageLinkedServiceResponse struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey *AzureKeyVaultSecretReferenceResponse `pulumi:"accountKey"`
	// Specify the kind of your storage account. Allowed values are: Storage (general purpose v1), StorageV2 (general purpose v2), BlobStorage, or BlockBlobStorage. Type: string (or Expression with resultType string).
	AccountKind interface{} `pulumi:"accountKind"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The type used for authentication. Type: string.
	AuthenticationType *string `pulumi:"authenticationType"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri, serviceEndpoint property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Container uri of the Azure Blob Storage resource only support for anonymous access. Type: string (or Expression with resultType string).
	ContainerUri interface{} `pulumi:"containerUri"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken *AzureKeyVaultSecretReferenceResponse `pulumi:"sasToken"`
	// SAS URI of the Azure Blob Storage resource. It is mutually exclusive with connectionString, serviceEndpoint property. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri interface{} `pulumi:"sasUri"`
	// Blob service endpoint of the Azure Blob Storage resource. It is mutually exclusive with connectionString, sasUri property.
	ServiceEndpoint interface{} `pulumi:"serviceEndpoint"`
	// The ID of the service principal used to authenticate against Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Data Warehouse.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureBlobStorage'.
	Type string `pulumi:"type"`
}

// The azure blob storage linked service.
type AzureBlobStorageLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureBlobStorageLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobStorageLinkedServiceResponse)(nil)).Elem()
}

func (o AzureBlobStorageLinkedServiceResponseOutput) ToAzureBlobStorageLinkedServiceResponseOutput() AzureBlobStorageLinkedServiceResponseOutput {
	return o
}

func (o AzureBlobStorageLinkedServiceResponseOutput) ToAzureBlobStorageLinkedServiceResponseOutputWithContext(ctx context.Context) AzureBlobStorageLinkedServiceResponseOutput {
	return o
}

// The Azure key vault secret reference of accountKey in connection string.
func (o AzureBlobStorageLinkedServiceResponseOutput) AccountKey() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse {
		return v.AccountKey
	}).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// Specify the kind of your storage account. Allowed values are: Storage (general purpose v1), StorageV2 (general purpose v2), BlobStorage, or BlockBlobStorage. Type: string (or Expression with resultType string).
func (o AzureBlobStorageLinkedServiceResponseOutput) AccountKind() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedServiceResponse) interface{} { return v.AccountKind }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o AzureBlobStorageLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The type used for authentication. Type: string.
func (o AzureBlobStorageLinkedServiceResponseOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedServiceResponse) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
func (o AzureBlobStorageLinkedServiceResponseOutput) AzureCloudType() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedServiceResponse) interface{} { return v.AzureCloudType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureBlobStorageLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The connection string. It is mutually exclusive with sasUri, serviceEndpoint property. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureBlobStorageLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Container uri of the Azure Blob Storage resource only support for anonymous access. Type: string (or Expression with resultType string).
func (o AzureBlobStorageLinkedServiceResponseOutput) ContainerUri() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedServiceResponse) interface{} { return v.ContainerUri }).(pulumi.AnyOutput)
}

// The credential reference containing authentication information.
func (o AzureBlobStorageLinkedServiceResponseOutput) Credential() CredentialReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedServiceResponse) *CredentialReferenceResponse { return v.Credential }).(CredentialReferenceResponsePtrOutput)
}

// Linked service description.
func (o AzureBlobStorageLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AzureBlobStorageLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AzureBlobStorageLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The Azure key vault secret reference of sasToken in sas uri.
func (o AzureBlobStorageLinkedServiceResponseOutput) SasToken() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse { return v.SasToken }).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// SAS URI of the Azure Blob Storage resource. It is mutually exclusive with connectionString, serviceEndpoint property. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureBlobStorageLinkedServiceResponseOutput) SasUri() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedServiceResponse) interface{} { return v.SasUri }).(pulumi.AnyOutput)
}

// Blob service endpoint of the Azure Blob Storage resource. It is mutually exclusive with connectionString, sasUri property.
func (o AzureBlobStorageLinkedServiceResponseOutput) ServiceEndpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedServiceResponse) interface{} { return v.ServiceEndpoint }).(pulumi.AnyOutput)
}

// The ID of the service principal used to authenticate against Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
func (o AzureBlobStorageLinkedServiceResponseOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedServiceResponse) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The key of the service principal used to authenticate against Azure SQL Data Warehouse.
func (o AzureBlobStorageLinkedServiceResponseOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedServiceResponse) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureBlobStorageLinkedServiceResponseOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedServiceResponse) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AzureBlobStorage'.
func (o AzureBlobStorageLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobStorageLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The location of azure blob dataset.
type AzureBlobStorageLocation struct {
	// Specify the container of azure blob. Type: string (or Expression with resultType string).
	Container interface{} `pulumi:"container"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'AzureBlobStorageLocation'.
	Type string `pulumi:"type"`
}

// AzureBlobStorageLocationInput is an input type that accepts AzureBlobStorageLocationArgs and AzureBlobStorageLocationOutput values.
// You can construct a concrete instance of `AzureBlobStorageLocationInput` via:
//
//	AzureBlobStorageLocationArgs{...}
type AzureBlobStorageLocationInput interface {
	pulumi.Input

	ToAzureBlobStorageLocationOutput() AzureBlobStorageLocationOutput
	ToAzureBlobStorageLocationOutputWithContext(context.Context) AzureBlobStorageLocationOutput
}

// The location of azure blob dataset.
type AzureBlobStorageLocationArgs struct {
	// Specify the container of azure blob. Type: string (or Expression with resultType string).
	Container pulumi.Input `pulumi:"container"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'AzureBlobStorageLocation'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureBlobStorageLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobStorageLocation)(nil)).Elem()
}

func (i AzureBlobStorageLocationArgs) ToAzureBlobStorageLocationOutput() AzureBlobStorageLocationOutput {
	return i.ToAzureBlobStorageLocationOutputWithContext(context.Background())
}

func (i AzureBlobStorageLocationArgs) ToAzureBlobStorageLocationOutputWithContext(ctx context.Context) AzureBlobStorageLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobStorageLocationOutput)
}

// The location of azure blob dataset.
type AzureBlobStorageLocationOutput struct{ *pulumi.OutputState }

func (AzureBlobStorageLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobStorageLocation)(nil)).Elem()
}

func (o AzureBlobStorageLocationOutput) ToAzureBlobStorageLocationOutput() AzureBlobStorageLocationOutput {
	return o
}

func (o AzureBlobStorageLocationOutput) ToAzureBlobStorageLocationOutputWithContext(ctx context.Context) AzureBlobStorageLocationOutput {
	return o
}

// Specify the container of azure blob. Type: string (or Expression with resultType string).
func (o AzureBlobStorageLocationOutput) Container() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageLocation) interface{} { return v.Container }).(pulumi.AnyOutput)
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o AzureBlobStorageLocationOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageLocation) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o AzureBlobStorageLocationOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageLocation) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
// Expected value is 'AzureBlobStorageLocation'.
func (o AzureBlobStorageLocationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobStorageLocation) string { return v.Type }).(pulumi.StringOutput)
}

// The location of azure blob dataset.
type AzureBlobStorageLocationResponse struct {
	// Specify the container of azure blob. Type: string (or Expression with resultType string).
	Container interface{} `pulumi:"container"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'AzureBlobStorageLocation'.
	Type string `pulumi:"type"`
}

// The location of azure blob dataset.
type AzureBlobStorageLocationResponseOutput struct{ *pulumi.OutputState }

func (AzureBlobStorageLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobStorageLocationResponse)(nil)).Elem()
}

func (o AzureBlobStorageLocationResponseOutput) ToAzureBlobStorageLocationResponseOutput() AzureBlobStorageLocationResponseOutput {
	return o
}

func (o AzureBlobStorageLocationResponseOutput) ToAzureBlobStorageLocationResponseOutputWithContext(ctx context.Context) AzureBlobStorageLocationResponseOutput {
	return o
}

// Specify the container of azure blob. Type: string (or Expression with resultType string).
func (o AzureBlobStorageLocationResponseOutput) Container() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageLocationResponse) interface{} { return v.Container }).(pulumi.AnyOutput)
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o AzureBlobStorageLocationResponseOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageLocationResponse) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o AzureBlobStorageLocationResponseOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageLocationResponse) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
// Expected value is 'AzureBlobStorageLocation'.
func (o AzureBlobStorageLocationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobStorageLocationResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure blob read settings.
type AzureBlobStorageReadSettings struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery interface{} `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// The prefix filter for the Azure Blob name. Type: string (or Expression with resultType string).
	Prefix interface{} `pulumi:"prefix"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'AzureBlobStorageReadSettings'.
	Type string `pulumi:"type"`
	// Azure blob wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Azure blob wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// AzureBlobStorageReadSettingsInput is an input type that accepts AzureBlobStorageReadSettingsArgs and AzureBlobStorageReadSettingsOutput values.
// You can construct a concrete instance of `AzureBlobStorageReadSettingsInput` via:
//
//	AzureBlobStorageReadSettingsArgs{...}
type AzureBlobStorageReadSettingsInput interface {
	pulumi.Input

	ToAzureBlobStorageReadSettingsOutput() AzureBlobStorageReadSettingsOutput
	ToAzureBlobStorageReadSettingsOutputWithContext(context.Context) AzureBlobStorageReadSettingsOutput
}

// Azure blob read settings.
type AzureBlobStorageReadSettingsArgs struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion pulumi.Input `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery pulumi.Input `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath pulumi.Input `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd pulumi.Input `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart pulumi.Input `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath pulumi.Input `pulumi:"partitionRootPath"`
	// The prefix filter for the Azure Blob name. Type: string (or Expression with resultType string).
	Prefix pulumi.Input `pulumi:"prefix"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive pulumi.Input `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'AzureBlobStorageReadSettings'.
	Type pulumi.StringInput `pulumi:"type"`
	// Azure blob wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName pulumi.Input `pulumi:"wildcardFileName"`
	// Azure blob wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath pulumi.Input `pulumi:"wildcardFolderPath"`
}

func (AzureBlobStorageReadSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobStorageReadSettings)(nil)).Elem()
}

func (i AzureBlobStorageReadSettingsArgs) ToAzureBlobStorageReadSettingsOutput() AzureBlobStorageReadSettingsOutput {
	return i.ToAzureBlobStorageReadSettingsOutputWithContext(context.Background())
}

func (i AzureBlobStorageReadSettingsArgs) ToAzureBlobStorageReadSettingsOutputWithContext(ctx context.Context) AzureBlobStorageReadSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobStorageReadSettingsOutput)
}

func (i AzureBlobStorageReadSettingsArgs) ToAzureBlobStorageReadSettingsPtrOutput() AzureBlobStorageReadSettingsPtrOutput {
	return i.ToAzureBlobStorageReadSettingsPtrOutputWithContext(context.Background())
}

func (i AzureBlobStorageReadSettingsArgs) ToAzureBlobStorageReadSettingsPtrOutputWithContext(ctx context.Context) AzureBlobStorageReadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobStorageReadSettingsOutput).ToAzureBlobStorageReadSettingsPtrOutputWithContext(ctx)
}

// AzureBlobStorageReadSettingsPtrInput is an input type that accepts AzureBlobStorageReadSettingsArgs, AzureBlobStorageReadSettingsPtr and AzureBlobStorageReadSettingsPtrOutput values.
// You can construct a concrete instance of `AzureBlobStorageReadSettingsPtrInput` via:
//
//	        AzureBlobStorageReadSettingsArgs{...}
//
//	or:
//
//	        nil
type AzureBlobStorageReadSettingsPtrInput interface {
	pulumi.Input

	ToAzureBlobStorageReadSettingsPtrOutput() AzureBlobStorageReadSettingsPtrOutput
	ToAzureBlobStorageReadSettingsPtrOutputWithContext(context.Context) AzureBlobStorageReadSettingsPtrOutput
}

type azureBlobStorageReadSettingsPtrType AzureBlobStorageReadSettingsArgs

func AzureBlobStorageReadSettingsPtr(v *AzureBlobStorageReadSettingsArgs) AzureBlobStorageReadSettingsPtrInput {
	return (*azureBlobStorageReadSettingsPtrType)(v)
}

func (*azureBlobStorageReadSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureBlobStorageReadSettings)(nil)).Elem()
}

func (i *azureBlobStorageReadSettingsPtrType) ToAzureBlobStorageReadSettingsPtrOutput() AzureBlobStorageReadSettingsPtrOutput {
	return i.ToAzureBlobStorageReadSettingsPtrOutputWithContext(context.Background())
}

func (i *azureBlobStorageReadSettingsPtrType) ToAzureBlobStorageReadSettingsPtrOutputWithContext(ctx context.Context) AzureBlobStorageReadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobStorageReadSettingsPtrOutput)
}

// Azure blob read settings.
type AzureBlobStorageReadSettingsOutput struct{ *pulumi.OutputState }

func (AzureBlobStorageReadSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobStorageReadSettings)(nil)).Elem()
}

func (o AzureBlobStorageReadSettingsOutput) ToAzureBlobStorageReadSettingsOutput() AzureBlobStorageReadSettingsOutput {
	return o
}

func (o AzureBlobStorageReadSettingsOutput) ToAzureBlobStorageReadSettingsOutputWithContext(ctx context.Context) AzureBlobStorageReadSettingsOutput {
	return o
}

func (o AzureBlobStorageReadSettingsOutput) ToAzureBlobStorageReadSettingsPtrOutput() AzureBlobStorageReadSettingsPtrOutput {
	return o.ToAzureBlobStorageReadSettingsPtrOutputWithContext(context.Background())
}

func (o AzureBlobStorageReadSettingsOutput) ToAzureBlobStorageReadSettingsPtrOutputWithContext(ctx context.Context) AzureBlobStorageReadSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureBlobStorageReadSettings) *AzureBlobStorageReadSettings {
		return &v
	}).(AzureBlobStorageReadSettingsPtrOutput)
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobStorageReadSettingsOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageReadSettings) interface{} { return v.DeleteFilesAfterCompletion }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobStorageReadSettingsOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageReadSettings) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobStorageReadSettingsOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageReadSettings) interface{} { return v.EnablePartitionDiscovery }).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o AzureBlobStorageReadSettingsOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageReadSettings) interface{} { return v.FileListPath }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureBlobStorageReadSettingsOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageReadSettings) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o AzureBlobStorageReadSettingsOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageReadSettings) interface{} { return v.ModifiedDatetimeEnd }).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o AzureBlobStorageReadSettingsOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageReadSettings) interface{} { return v.ModifiedDatetimeStart }).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o AzureBlobStorageReadSettingsOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageReadSettings) interface{} { return v.PartitionRootPath }).(pulumi.AnyOutput)
}

// The prefix filter for the Azure Blob name. Type: string (or Expression with resultType string).
func (o AzureBlobStorageReadSettingsOutput) Prefix() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageReadSettings) interface{} { return v.Prefix }).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobStorageReadSettingsOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageReadSettings) interface{} { return v.Recursive }).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'AzureBlobStorageReadSettings'.
func (o AzureBlobStorageReadSettingsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobStorageReadSettings) string { return v.Type }).(pulumi.StringOutput)
}

// Azure blob wildcardFileName. Type: string (or Expression with resultType string).
func (o AzureBlobStorageReadSettingsOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageReadSettings) interface{} { return v.WildcardFileName }).(pulumi.AnyOutput)
}

// Azure blob wildcardFolderPath. Type: string (or Expression with resultType string).
func (o AzureBlobStorageReadSettingsOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageReadSettings) interface{} { return v.WildcardFolderPath }).(pulumi.AnyOutput)
}

type AzureBlobStorageReadSettingsPtrOutput struct{ *pulumi.OutputState }

func (AzureBlobStorageReadSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureBlobStorageReadSettings)(nil)).Elem()
}

func (o AzureBlobStorageReadSettingsPtrOutput) ToAzureBlobStorageReadSettingsPtrOutput() AzureBlobStorageReadSettingsPtrOutput {
	return o
}

func (o AzureBlobStorageReadSettingsPtrOutput) ToAzureBlobStorageReadSettingsPtrOutputWithContext(ctx context.Context) AzureBlobStorageReadSettingsPtrOutput {
	return o
}

func (o AzureBlobStorageReadSettingsPtrOutput) Elem() AzureBlobStorageReadSettingsOutput {
	return o.ApplyT(func(v *AzureBlobStorageReadSettings) AzureBlobStorageReadSettings {
		if v != nil {
			return *v
		}
		var ret AzureBlobStorageReadSettings
		return ret
	}).(AzureBlobStorageReadSettingsOutput)
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobStorageReadSettingsPtrOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.DeleteFilesAfterCompletion
	}).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobStorageReadSettingsPtrOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableMetricsCollection
	}).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobStorageReadSettingsPtrOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.EnablePartitionDiscovery
	}).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o AzureBlobStorageReadSettingsPtrOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.FileListPath
	}).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureBlobStorageReadSettingsPtrOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentConnections
	}).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o AzureBlobStorageReadSettingsPtrOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeEnd
	}).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o AzureBlobStorageReadSettingsPtrOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeStart
	}).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o AzureBlobStorageReadSettingsPtrOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionRootPath
	}).(pulumi.AnyOutput)
}

// The prefix filter for the Azure Blob name. Type: string (or Expression with resultType string).
func (o AzureBlobStorageReadSettingsPtrOutput) Prefix() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.Prefix
	}).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobStorageReadSettingsPtrOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.Recursive
	}).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'AzureBlobStorageReadSettings'.
func (o AzureBlobStorageReadSettingsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureBlobStorageReadSettings) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Azure blob wildcardFileName. Type: string (or Expression with resultType string).
func (o AzureBlobStorageReadSettingsPtrOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFileName
	}).(pulumi.AnyOutput)
}

// Azure blob wildcardFolderPath. Type: string (or Expression with resultType string).
func (o AzureBlobStorageReadSettingsPtrOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFolderPath
	}).(pulumi.AnyOutput)
}

// Azure blob read settings.
type AzureBlobStorageReadSettingsResponse struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery interface{} `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// The prefix filter for the Azure Blob name. Type: string (or Expression with resultType string).
	Prefix interface{} `pulumi:"prefix"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'AzureBlobStorageReadSettings'.
	Type string `pulumi:"type"`
	// Azure blob wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Azure blob wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// Azure blob read settings.
type AzureBlobStorageReadSettingsResponseOutput struct{ *pulumi.OutputState }

func (AzureBlobStorageReadSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobStorageReadSettingsResponse)(nil)).Elem()
}

func (o AzureBlobStorageReadSettingsResponseOutput) ToAzureBlobStorageReadSettingsResponseOutput() AzureBlobStorageReadSettingsResponseOutput {
	return o
}

func (o AzureBlobStorageReadSettingsResponseOutput) ToAzureBlobStorageReadSettingsResponseOutputWithContext(ctx context.Context) AzureBlobStorageReadSettingsResponseOutput {
	return o
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobStorageReadSettingsResponseOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageReadSettingsResponse) interface{} { return v.DeleteFilesAfterCompletion }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobStorageReadSettingsResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageReadSettingsResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobStorageReadSettingsResponseOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageReadSettingsResponse) interface{} { return v.EnablePartitionDiscovery }).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o AzureBlobStorageReadSettingsResponseOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageReadSettingsResponse) interface{} { return v.FileListPath }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureBlobStorageReadSettingsResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageReadSettingsResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o AzureBlobStorageReadSettingsResponseOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageReadSettingsResponse) interface{} { return v.ModifiedDatetimeEnd }).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o AzureBlobStorageReadSettingsResponseOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageReadSettingsResponse) interface{} { return v.ModifiedDatetimeStart }).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o AzureBlobStorageReadSettingsResponseOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageReadSettingsResponse) interface{} { return v.PartitionRootPath }).(pulumi.AnyOutput)
}

// The prefix filter for the Azure Blob name. Type: string (or Expression with resultType string).
func (o AzureBlobStorageReadSettingsResponseOutput) Prefix() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageReadSettingsResponse) interface{} { return v.Prefix }).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobStorageReadSettingsResponseOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageReadSettingsResponse) interface{} { return v.Recursive }).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'AzureBlobStorageReadSettings'.
func (o AzureBlobStorageReadSettingsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobStorageReadSettingsResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure blob wildcardFileName. Type: string (or Expression with resultType string).
func (o AzureBlobStorageReadSettingsResponseOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageReadSettingsResponse) interface{} { return v.WildcardFileName }).(pulumi.AnyOutput)
}

// Azure blob wildcardFolderPath. Type: string (or Expression with resultType string).
func (o AzureBlobStorageReadSettingsResponseOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageReadSettingsResponse) interface{} { return v.WildcardFolderPath }).(pulumi.AnyOutput)
}

type AzureBlobStorageReadSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureBlobStorageReadSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureBlobStorageReadSettingsResponse)(nil)).Elem()
}

func (o AzureBlobStorageReadSettingsResponsePtrOutput) ToAzureBlobStorageReadSettingsResponsePtrOutput() AzureBlobStorageReadSettingsResponsePtrOutput {
	return o
}

func (o AzureBlobStorageReadSettingsResponsePtrOutput) ToAzureBlobStorageReadSettingsResponsePtrOutputWithContext(ctx context.Context) AzureBlobStorageReadSettingsResponsePtrOutput {
	return o
}

func (o AzureBlobStorageReadSettingsResponsePtrOutput) Elem() AzureBlobStorageReadSettingsResponseOutput {
	return o.ApplyT(func(v *AzureBlobStorageReadSettingsResponse) AzureBlobStorageReadSettingsResponse {
		if v != nil {
			return *v
		}
		var ret AzureBlobStorageReadSettingsResponse
		return ret
	}).(AzureBlobStorageReadSettingsResponseOutput)
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobStorageReadSettingsResponsePtrOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.DeleteFilesAfterCompletion
	}).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobStorageReadSettingsResponsePtrOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableMetricsCollection
	}).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobStorageReadSettingsResponsePtrOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.EnablePartitionDiscovery
	}).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o AzureBlobStorageReadSettingsResponsePtrOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.FileListPath
	}).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureBlobStorageReadSettingsResponsePtrOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentConnections
	}).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o AzureBlobStorageReadSettingsResponsePtrOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeEnd
	}).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o AzureBlobStorageReadSettingsResponsePtrOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeStart
	}).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o AzureBlobStorageReadSettingsResponsePtrOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionRootPath
	}).(pulumi.AnyOutput)
}

// The prefix filter for the Azure Blob name. Type: string (or Expression with resultType string).
func (o AzureBlobStorageReadSettingsResponsePtrOutput) Prefix() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Prefix
	}).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobStorageReadSettingsResponsePtrOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Recursive
	}).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'AzureBlobStorageReadSettings'.
func (o AzureBlobStorageReadSettingsResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureBlobStorageReadSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Azure blob wildcardFileName. Type: string (or Expression with resultType string).
func (o AzureBlobStorageReadSettingsResponsePtrOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFileName
	}).(pulumi.AnyOutput)
}

// Azure blob wildcardFolderPath. Type: string (or Expression with resultType string).
func (o AzureBlobStorageReadSettingsResponsePtrOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFolderPath
	}).(pulumi.AnyOutput)
}

// Azure blob write settings.
type AzureBlobStorageWriteSettings struct {
	// Indicates the block size(MB) when writing data to blob. Type: integer (or Expression with resultType integer).
	BlockSizeInMB interface{} `pulumi:"blockSizeInMB"`
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
	Metadata []MetadataItem `pulumi:"metadata"`
	// The write setting type.
	// Expected value is 'AzureBlobStorageWriteSettings'.
	Type string `pulumi:"type"`
}

// AzureBlobStorageWriteSettingsInput is an input type that accepts AzureBlobStorageWriteSettingsArgs and AzureBlobStorageWriteSettingsOutput values.
// You can construct a concrete instance of `AzureBlobStorageWriteSettingsInput` via:
//
//	AzureBlobStorageWriteSettingsArgs{...}
type AzureBlobStorageWriteSettingsInput interface {
	pulumi.Input

	ToAzureBlobStorageWriteSettingsOutput() AzureBlobStorageWriteSettingsOutput
	ToAzureBlobStorageWriteSettingsOutputWithContext(context.Context) AzureBlobStorageWriteSettingsOutput
}

// Azure blob write settings.
type AzureBlobStorageWriteSettingsArgs struct {
	// Indicates the block size(MB) when writing data to blob. Type: integer (or Expression with resultType integer).
	BlockSizeInMB pulumi.Input `pulumi:"blockSizeInMB"`
	// The type of copy behavior for copy sink.
	CopyBehavior pulumi.Input `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
	Metadata MetadataItemArrayInput `pulumi:"metadata"`
	// The write setting type.
	// Expected value is 'AzureBlobStorageWriteSettings'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureBlobStorageWriteSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobStorageWriteSettings)(nil)).Elem()
}

func (i AzureBlobStorageWriteSettingsArgs) ToAzureBlobStorageWriteSettingsOutput() AzureBlobStorageWriteSettingsOutput {
	return i.ToAzureBlobStorageWriteSettingsOutputWithContext(context.Background())
}

func (i AzureBlobStorageWriteSettingsArgs) ToAzureBlobStorageWriteSettingsOutputWithContext(ctx context.Context) AzureBlobStorageWriteSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobStorageWriteSettingsOutput)
}

func (i AzureBlobStorageWriteSettingsArgs) ToAzureBlobStorageWriteSettingsPtrOutput() AzureBlobStorageWriteSettingsPtrOutput {
	return i.ToAzureBlobStorageWriteSettingsPtrOutputWithContext(context.Background())
}

func (i AzureBlobStorageWriteSettingsArgs) ToAzureBlobStorageWriteSettingsPtrOutputWithContext(ctx context.Context) AzureBlobStorageWriteSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobStorageWriteSettingsOutput).ToAzureBlobStorageWriteSettingsPtrOutputWithContext(ctx)
}

// AzureBlobStorageWriteSettingsPtrInput is an input type that accepts AzureBlobStorageWriteSettingsArgs, AzureBlobStorageWriteSettingsPtr and AzureBlobStorageWriteSettingsPtrOutput values.
// You can construct a concrete instance of `AzureBlobStorageWriteSettingsPtrInput` via:
//
//	        AzureBlobStorageWriteSettingsArgs{...}
//
//	or:
//
//	        nil
type AzureBlobStorageWriteSettingsPtrInput interface {
	pulumi.Input

	ToAzureBlobStorageWriteSettingsPtrOutput() AzureBlobStorageWriteSettingsPtrOutput
	ToAzureBlobStorageWriteSettingsPtrOutputWithContext(context.Context) AzureBlobStorageWriteSettingsPtrOutput
}

type azureBlobStorageWriteSettingsPtrType AzureBlobStorageWriteSettingsArgs

func AzureBlobStorageWriteSettingsPtr(v *AzureBlobStorageWriteSettingsArgs) AzureBlobStorageWriteSettingsPtrInput {
	return (*azureBlobStorageWriteSettingsPtrType)(v)
}

func (*azureBlobStorageWriteSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureBlobStorageWriteSettings)(nil)).Elem()
}

func (i *azureBlobStorageWriteSettingsPtrType) ToAzureBlobStorageWriteSettingsPtrOutput() AzureBlobStorageWriteSettingsPtrOutput {
	return i.ToAzureBlobStorageWriteSettingsPtrOutputWithContext(context.Background())
}

func (i *azureBlobStorageWriteSettingsPtrType) ToAzureBlobStorageWriteSettingsPtrOutputWithContext(ctx context.Context) AzureBlobStorageWriteSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobStorageWriteSettingsPtrOutput)
}

// Azure blob write settings.
type AzureBlobStorageWriteSettingsOutput struct{ *pulumi.OutputState }

func (AzureBlobStorageWriteSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobStorageWriteSettings)(nil)).Elem()
}

func (o AzureBlobStorageWriteSettingsOutput) ToAzureBlobStorageWriteSettingsOutput() AzureBlobStorageWriteSettingsOutput {
	return o
}

func (o AzureBlobStorageWriteSettingsOutput) ToAzureBlobStorageWriteSettingsOutputWithContext(ctx context.Context) AzureBlobStorageWriteSettingsOutput {
	return o
}

func (o AzureBlobStorageWriteSettingsOutput) ToAzureBlobStorageWriteSettingsPtrOutput() AzureBlobStorageWriteSettingsPtrOutput {
	return o.ToAzureBlobStorageWriteSettingsPtrOutputWithContext(context.Background())
}

func (o AzureBlobStorageWriteSettingsOutput) ToAzureBlobStorageWriteSettingsPtrOutputWithContext(ctx context.Context) AzureBlobStorageWriteSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureBlobStorageWriteSettings) *AzureBlobStorageWriteSettings {
		return &v
	}).(AzureBlobStorageWriteSettingsPtrOutput)
}

// Indicates the block size(MB) when writing data to blob. Type: integer (or Expression with resultType integer).
func (o AzureBlobStorageWriteSettingsOutput) BlockSizeInMB() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageWriteSettings) interface{} { return v.BlockSizeInMB }).(pulumi.AnyOutput)
}

// The type of copy behavior for copy sink.
func (o AzureBlobStorageWriteSettingsOutput) CopyBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageWriteSettings) interface{} { return v.CopyBehavior }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobStorageWriteSettingsOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageWriteSettings) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureBlobStorageWriteSettingsOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageWriteSettings) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
func (o AzureBlobStorageWriteSettingsOutput) Metadata() MetadataItemArrayOutput {
	return o.ApplyT(func(v AzureBlobStorageWriteSettings) []MetadataItem { return v.Metadata }).(MetadataItemArrayOutput)
}

// The write setting type.
// Expected value is 'AzureBlobStorageWriteSettings'.
func (o AzureBlobStorageWriteSettingsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobStorageWriteSettings) string { return v.Type }).(pulumi.StringOutput)
}

type AzureBlobStorageWriteSettingsPtrOutput struct{ *pulumi.OutputState }

func (AzureBlobStorageWriteSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureBlobStorageWriteSettings)(nil)).Elem()
}

func (o AzureBlobStorageWriteSettingsPtrOutput) ToAzureBlobStorageWriteSettingsPtrOutput() AzureBlobStorageWriteSettingsPtrOutput {
	return o
}

func (o AzureBlobStorageWriteSettingsPtrOutput) ToAzureBlobStorageWriteSettingsPtrOutputWithContext(ctx context.Context) AzureBlobStorageWriteSettingsPtrOutput {
	return o
}

func (o AzureBlobStorageWriteSettingsPtrOutput) Elem() AzureBlobStorageWriteSettingsOutput {
	return o.ApplyT(func(v *AzureBlobStorageWriteSettings) AzureBlobStorageWriteSettings {
		if v != nil {
			return *v
		}
		var ret AzureBlobStorageWriteSettings
		return ret
	}).(AzureBlobStorageWriteSettingsOutput)
}

// Indicates the block size(MB) when writing data to blob. Type: integer (or Expression with resultType integer).
func (o AzureBlobStorageWriteSettingsPtrOutput) BlockSizeInMB() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobStorageWriteSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.BlockSizeInMB
	}).(pulumi.AnyOutput)
}

// The type of copy behavior for copy sink.
func (o AzureBlobStorageWriteSettingsPtrOutput) CopyBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobStorageWriteSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.CopyBehavior
	}).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobStorageWriteSettingsPtrOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobStorageWriteSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableMetricsCollection
	}).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureBlobStorageWriteSettingsPtrOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobStorageWriteSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentConnections
	}).(pulumi.AnyOutput)
}

// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
func (o AzureBlobStorageWriteSettingsPtrOutput) Metadata() MetadataItemArrayOutput {
	return o.ApplyT(func(v *AzureBlobStorageWriteSettings) []MetadataItem {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(MetadataItemArrayOutput)
}

// The write setting type.
// Expected value is 'AzureBlobStorageWriteSettings'.
func (o AzureBlobStorageWriteSettingsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureBlobStorageWriteSettings) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Azure blob write settings.
type AzureBlobStorageWriteSettingsResponse struct {
	// Indicates the block size(MB) when writing data to blob. Type: integer (or Expression with resultType integer).
	BlockSizeInMB interface{} `pulumi:"blockSizeInMB"`
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
	Metadata []MetadataItemResponse `pulumi:"metadata"`
	// The write setting type.
	// Expected value is 'AzureBlobStorageWriteSettings'.
	Type string `pulumi:"type"`
}

// Azure blob write settings.
type AzureBlobStorageWriteSettingsResponseOutput struct{ *pulumi.OutputState }

func (AzureBlobStorageWriteSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobStorageWriteSettingsResponse)(nil)).Elem()
}

func (o AzureBlobStorageWriteSettingsResponseOutput) ToAzureBlobStorageWriteSettingsResponseOutput() AzureBlobStorageWriteSettingsResponseOutput {
	return o
}

func (o AzureBlobStorageWriteSettingsResponseOutput) ToAzureBlobStorageWriteSettingsResponseOutputWithContext(ctx context.Context) AzureBlobStorageWriteSettingsResponseOutput {
	return o
}

// Indicates the block size(MB) when writing data to blob. Type: integer (or Expression with resultType integer).
func (o AzureBlobStorageWriteSettingsResponseOutput) BlockSizeInMB() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageWriteSettingsResponse) interface{} { return v.BlockSizeInMB }).(pulumi.AnyOutput)
}

// The type of copy behavior for copy sink.
func (o AzureBlobStorageWriteSettingsResponseOutput) CopyBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageWriteSettingsResponse) interface{} { return v.CopyBehavior }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobStorageWriteSettingsResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageWriteSettingsResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureBlobStorageWriteSettingsResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobStorageWriteSettingsResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
func (o AzureBlobStorageWriteSettingsResponseOutput) Metadata() MetadataItemResponseArrayOutput {
	return o.ApplyT(func(v AzureBlobStorageWriteSettingsResponse) []MetadataItemResponse { return v.Metadata }).(MetadataItemResponseArrayOutput)
}

// The write setting type.
// Expected value is 'AzureBlobStorageWriteSettings'.
func (o AzureBlobStorageWriteSettingsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobStorageWriteSettingsResponse) string { return v.Type }).(pulumi.StringOutput)
}

type AzureBlobStorageWriteSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureBlobStorageWriteSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureBlobStorageWriteSettingsResponse)(nil)).Elem()
}

func (o AzureBlobStorageWriteSettingsResponsePtrOutput) ToAzureBlobStorageWriteSettingsResponsePtrOutput() AzureBlobStorageWriteSettingsResponsePtrOutput {
	return o
}

func (o AzureBlobStorageWriteSettingsResponsePtrOutput) ToAzureBlobStorageWriteSettingsResponsePtrOutputWithContext(ctx context.Context) AzureBlobStorageWriteSettingsResponsePtrOutput {
	return o
}

func (o AzureBlobStorageWriteSettingsResponsePtrOutput) Elem() AzureBlobStorageWriteSettingsResponseOutput {
	return o.ApplyT(func(v *AzureBlobStorageWriteSettingsResponse) AzureBlobStorageWriteSettingsResponse {
		if v != nil {
			return *v
		}
		var ret AzureBlobStorageWriteSettingsResponse
		return ret
	}).(AzureBlobStorageWriteSettingsResponseOutput)
}

// Indicates the block size(MB) when writing data to blob. Type: integer (or Expression with resultType integer).
func (o AzureBlobStorageWriteSettingsResponsePtrOutput) BlockSizeInMB() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobStorageWriteSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.BlockSizeInMB
	}).(pulumi.AnyOutput)
}

// The type of copy behavior for copy sink.
func (o AzureBlobStorageWriteSettingsResponsePtrOutput) CopyBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobStorageWriteSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.CopyBehavior
	}).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureBlobStorageWriteSettingsResponsePtrOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobStorageWriteSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableMetricsCollection
	}).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureBlobStorageWriteSettingsResponsePtrOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureBlobStorageWriteSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentConnections
	}).(pulumi.AnyOutput)
}

// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
func (o AzureBlobStorageWriteSettingsResponsePtrOutput) Metadata() MetadataItemResponseArrayOutput {
	return o.ApplyT(func(v *AzureBlobStorageWriteSettingsResponse) []MetadataItemResponse {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(MetadataItemResponseArrayOutput)
}

// The write setting type.
// Expected value is 'AzureBlobStorageWriteSettings'.
func (o AzureBlobStorageWriteSettingsResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureBlobStorageWriteSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Azure Data Explorer command activity.
type AzureDataExplorerCommandActivity struct {
	// A control command, according to the Azure Data Explorer command syntax. Type: string (or Expression with resultType string).
	Command interface{} `pulumi:"command"`
	// Control command timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9]))..)
	CommandTimeout interface{} `pulumi:"commandTimeout"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'AzureDataExplorerCommand'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// AzureDataExplorerCommandActivityInput is an input type that accepts AzureDataExplorerCommandActivityArgs and AzureDataExplorerCommandActivityOutput values.
// You can construct a concrete instance of `AzureDataExplorerCommandActivityInput` via:
//
//	AzureDataExplorerCommandActivityArgs{...}
type AzureDataExplorerCommandActivityInput interface {
	pulumi.Input

	ToAzureDataExplorerCommandActivityOutput() AzureDataExplorerCommandActivityOutput
	ToAzureDataExplorerCommandActivityOutputWithContext(context.Context) AzureDataExplorerCommandActivityOutput
}

// Azure Data Explorer command activity.
type AzureDataExplorerCommandActivityArgs struct {
	// A control command, according to the Azure Data Explorer command syntax. Type: string (or Expression with resultType string).
	Command pulumi.Input `pulumi:"command"`
	// Control command timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9]))..)
	CommandTimeout pulumi.Input `pulumi:"commandTimeout"`
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferencePtrInput `pulumi:"linkedServiceName"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs pulumi.StringPtrInput `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy ActivityPolicyPtrInput `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Type of activity.
	// Expected value is 'AzureDataExplorerCommand'.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
}

func (AzureDataExplorerCommandActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataExplorerCommandActivity)(nil)).Elem()
}

func (i AzureDataExplorerCommandActivityArgs) ToAzureDataExplorerCommandActivityOutput() AzureDataExplorerCommandActivityOutput {
	return i.ToAzureDataExplorerCommandActivityOutputWithContext(context.Background())
}

func (i AzureDataExplorerCommandActivityArgs) ToAzureDataExplorerCommandActivityOutputWithContext(ctx context.Context) AzureDataExplorerCommandActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDataExplorerCommandActivityOutput)
}

// Azure Data Explorer command activity.
type AzureDataExplorerCommandActivityOutput struct{ *pulumi.OutputState }

func (AzureDataExplorerCommandActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataExplorerCommandActivity)(nil)).Elem()
}

func (o AzureDataExplorerCommandActivityOutput) ToAzureDataExplorerCommandActivityOutput() AzureDataExplorerCommandActivityOutput {
	return o
}

func (o AzureDataExplorerCommandActivityOutput) ToAzureDataExplorerCommandActivityOutputWithContext(ctx context.Context) AzureDataExplorerCommandActivityOutput {
	return o
}

// A control command, according to the Azure Data Explorer command syntax. Type: string (or Expression with resultType string).
func (o AzureDataExplorerCommandActivityOutput) Command() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerCommandActivity) interface{} { return v.Command }).(pulumi.AnyOutput)
}

// Control command timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9]))..)
func (o AzureDataExplorerCommandActivityOutput) CommandTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerCommandActivity) interface{} { return v.CommandTimeout }).(pulumi.AnyOutput)
}

// Activity depends on condition.
func (o AzureDataExplorerCommandActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v AzureDataExplorerCommandActivity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o AzureDataExplorerCommandActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataExplorerCommandActivity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o AzureDataExplorerCommandActivityOutput) LinkedServiceName() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v AzureDataExplorerCommandActivity) *LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferencePtrOutput)
}

// Activity name.
func (o AzureDataExplorerCommandActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataExplorerCommandActivity) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o AzureDataExplorerCommandActivityOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataExplorerCommandActivity) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o AzureDataExplorerCommandActivityOutput) Policy() ActivityPolicyPtrOutput {
	return o.ApplyT(func(v AzureDataExplorerCommandActivity) *ActivityPolicy { return v.Policy }).(ActivityPolicyPtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o AzureDataExplorerCommandActivityOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataExplorerCommandActivity) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'AzureDataExplorerCommand'.
func (o AzureDataExplorerCommandActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataExplorerCommandActivity) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o AzureDataExplorerCommandActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v AzureDataExplorerCommandActivity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

// Azure Data Explorer command activity.
type AzureDataExplorerCommandActivityResponse struct {
	// A control command, according to the Azure Data Explorer command syntax. Type: string (or Expression with resultType string).
	Command interface{} `pulumi:"command"`
	// Control command timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9]))..)
	CommandTimeout interface{} `pulumi:"commandTimeout"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'AzureDataExplorerCommand'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Azure Data Explorer command activity.
type AzureDataExplorerCommandActivityResponseOutput struct{ *pulumi.OutputState }

func (AzureDataExplorerCommandActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataExplorerCommandActivityResponse)(nil)).Elem()
}

func (o AzureDataExplorerCommandActivityResponseOutput) ToAzureDataExplorerCommandActivityResponseOutput() AzureDataExplorerCommandActivityResponseOutput {
	return o
}

func (o AzureDataExplorerCommandActivityResponseOutput) ToAzureDataExplorerCommandActivityResponseOutputWithContext(ctx context.Context) AzureDataExplorerCommandActivityResponseOutput {
	return o
}

// A control command, according to the Azure Data Explorer command syntax. Type: string (or Expression with resultType string).
func (o AzureDataExplorerCommandActivityResponseOutput) Command() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerCommandActivityResponse) interface{} { return v.Command }).(pulumi.AnyOutput)
}

// Control command timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9]))..)
func (o AzureDataExplorerCommandActivityResponseOutput) CommandTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerCommandActivityResponse) interface{} { return v.CommandTimeout }).(pulumi.AnyOutput)
}

// Activity depends on condition.
func (o AzureDataExplorerCommandActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v AzureDataExplorerCommandActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o AzureDataExplorerCommandActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataExplorerCommandActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o AzureDataExplorerCommandActivityResponseOutput) LinkedServiceName() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureDataExplorerCommandActivityResponse) *LinkedServiceReferenceResponse {
		return v.LinkedServiceName
	}).(LinkedServiceReferenceResponsePtrOutput)
}

// Activity name.
func (o AzureDataExplorerCommandActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataExplorerCommandActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o AzureDataExplorerCommandActivityResponseOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataExplorerCommandActivityResponse) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o AzureDataExplorerCommandActivityResponseOutput) Policy() ActivityPolicyResponsePtrOutput {
	return o.ApplyT(func(v AzureDataExplorerCommandActivityResponse) *ActivityPolicyResponse { return v.Policy }).(ActivityPolicyResponsePtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o AzureDataExplorerCommandActivityResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataExplorerCommandActivityResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'AzureDataExplorerCommand'.
func (o AzureDataExplorerCommandActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataExplorerCommandActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o AzureDataExplorerCommandActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v AzureDataExplorerCommandActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

// Azure Data Explorer (Kusto) linked service.
type AzureDataExplorerLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Database name for connection. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The endpoint of Azure Data Explorer (the engine's endpoint). URL will be in the format https://<clusterName>.<regionName>.kusto.windows.net. Type: string (or Expression with resultType string)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The ID of the service principal used to authenticate against Azure Data Explorer. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Kusto.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureDataExplorer'.
	Type string `pulumi:"type"`
}

// AzureDataExplorerLinkedServiceInput is an input type that accepts AzureDataExplorerLinkedServiceArgs and AzureDataExplorerLinkedServiceOutput values.
// You can construct a concrete instance of `AzureDataExplorerLinkedServiceInput` via:
//
//	AzureDataExplorerLinkedServiceArgs{...}
type AzureDataExplorerLinkedServiceInput interface {
	pulumi.Input

	ToAzureDataExplorerLinkedServiceOutput() AzureDataExplorerLinkedServiceOutput
	ToAzureDataExplorerLinkedServiceOutputWithContext(context.Context) AzureDataExplorerLinkedServiceOutput
}

// Azure Data Explorer (Kusto) linked service.
type AzureDataExplorerLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential CredentialReferencePtrInput `pulumi:"credential"`
	// Database name for connection. Type: string (or Expression with resultType string).
	Database pulumi.Input `pulumi:"database"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The endpoint of Azure Data Explorer (the engine's endpoint). URL will be in the format https://<clusterName>.<regionName>.kusto.windows.net. Type: string (or Expression with resultType string)
	Endpoint pulumi.Input `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The ID of the service principal used to authenticate against Azure Data Explorer. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Kusto.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant pulumi.Input `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureDataExplorer'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureDataExplorerLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataExplorerLinkedService)(nil)).Elem()
}

func (i AzureDataExplorerLinkedServiceArgs) ToAzureDataExplorerLinkedServiceOutput() AzureDataExplorerLinkedServiceOutput {
	return i.ToAzureDataExplorerLinkedServiceOutputWithContext(context.Background())
}

func (i AzureDataExplorerLinkedServiceArgs) ToAzureDataExplorerLinkedServiceOutputWithContext(ctx context.Context) AzureDataExplorerLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDataExplorerLinkedServiceOutput)
}

// Azure Data Explorer (Kusto) linked service.
type AzureDataExplorerLinkedServiceOutput struct{ *pulumi.OutputState }

func (AzureDataExplorerLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataExplorerLinkedService)(nil)).Elem()
}

func (o AzureDataExplorerLinkedServiceOutput) ToAzureDataExplorerLinkedServiceOutput() AzureDataExplorerLinkedServiceOutput {
	return o
}

func (o AzureDataExplorerLinkedServiceOutput) ToAzureDataExplorerLinkedServiceOutputWithContext(ctx context.Context) AzureDataExplorerLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzureDataExplorerLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureDataExplorerLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AzureDataExplorerLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzureDataExplorerLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The credential reference containing authentication information.
func (o AzureDataExplorerLinkedServiceOutput) Credential() CredentialReferencePtrOutput {
	return o.ApplyT(func(v AzureDataExplorerLinkedService) *CredentialReference { return v.Credential }).(CredentialReferencePtrOutput)
}

// Database name for connection. Type: string (or Expression with resultType string).
func (o AzureDataExplorerLinkedServiceOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerLinkedService) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AzureDataExplorerLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataExplorerLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The endpoint of Azure Data Explorer (the engine's endpoint). URL will be in the format https://<clusterName>.<regionName>.kusto.windows.net. Type: string (or Expression with resultType string)
func (o AzureDataExplorerLinkedServiceOutput) Endpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerLinkedService) interface{} { return v.Endpoint }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureDataExplorerLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureDataExplorerLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The ID of the service principal used to authenticate against Azure Data Explorer. Type: string (or Expression with resultType string).
func (o AzureDataExplorerLinkedServiceOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerLinkedService) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The key of the service principal used to authenticate against Kusto.
func (o AzureDataExplorerLinkedServiceOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerLinkedService) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureDataExplorerLinkedServiceOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerLinkedService) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AzureDataExplorer'.
func (o AzureDataExplorerLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataExplorerLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Data Explorer (Kusto) linked service.
type AzureDataExplorerLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Database name for connection. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The endpoint of Azure Data Explorer (the engine's endpoint). URL will be in the format https://<clusterName>.<regionName>.kusto.windows.net. Type: string (or Expression with resultType string)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The ID of the service principal used to authenticate against Azure Data Explorer. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Kusto.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureDataExplorer'.
	Type string `pulumi:"type"`
}

// Azure Data Explorer (Kusto) linked service.
type AzureDataExplorerLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureDataExplorerLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataExplorerLinkedServiceResponse)(nil)).Elem()
}

func (o AzureDataExplorerLinkedServiceResponseOutput) ToAzureDataExplorerLinkedServiceResponseOutput() AzureDataExplorerLinkedServiceResponseOutput {
	return o
}

func (o AzureDataExplorerLinkedServiceResponseOutput) ToAzureDataExplorerLinkedServiceResponseOutputWithContext(ctx context.Context) AzureDataExplorerLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzureDataExplorerLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureDataExplorerLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AzureDataExplorerLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureDataExplorerLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The credential reference containing authentication information.
func (o AzureDataExplorerLinkedServiceResponseOutput) Credential() CredentialReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureDataExplorerLinkedServiceResponse) *CredentialReferenceResponse { return v.Credential }).(CredentialReferenceResponsePtrOutput)
}

// Database name for connection. Type: string (or Expression with resultType string).
func (o AzureDataExplorerLinkedServiceResponseOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerLinkedServiceResponse) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AzureDataExplorerLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataExplorerLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The endpoint of Azure Data Explorer (the engine's endpoint). URL will be in the format https://<clusterName>.<regionName>.kusto.windows.net. Type: string (or Expression with resultType string)
func (o AzureDataExplorerLinkedServiceResponseOutput) Endpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerLinkedServiceResponse) interface{} { return v.Endpoint }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureDataExplorerLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureDataExplorerLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The ID of the service principal used to authenticate against Azure Data Explorer. Type: string (or Expression with resultType string).
func (o AzureDataExplorerLinkedServiceResponseOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerLinkedServiceResponse) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The key of the service principal used to authenticate against Kusto.
func (o AzureDataExplorerLinkedServiceResponseOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerLinkedServiceResponse) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureDataExplorerLinkedServiceResponseOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerLinkedServiceResponse) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AzureDataExplorer'.
func (o AzureDataExplorerLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataExplorerLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Azure Data Explorer sink.
type AzureDataExplorerSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// If set to true, any aggregation will be skipped. Default is false. Type: boolean.
	FlushImmediately interface{} `pulumi:"flushImmediately"`
	// An explicit column mapping description provided in a json format. Type: string.
	IngestionMappingAsJson interface{} `pulumi:"ingestionMappingAsJson"`
	// A name of a pre-created csv mapping that was defined on the target Kusto table. Type: string.
	IngestionMappingName interface{} `pulumi:"ingestionMappingName"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureDataExplorerSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// AzureDataExplorerSinkInput is an input type that accepts AzureDataExplorerSinkArgs and AzureDataExplorerSinkOutput values.
// You can construct a concrete instance of `AzureDataExplorerSinkInput` via:
//
//	AzureDataExplorerSinkArgs{...}
type AzureDataExplorerSinkInput interface {
	pulumi.Input

	ToAzureDataExplorerSinkOutput() AzureDataExplorerSinkOutput
	ToAzureDataExplorerSinkOutputWithContext(context.Context) AzureDataExplorerSinkOutput
}

// A copy activity Azure Data Explorer sink.
type AzureDataExplorerSinkArgs struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// If set to true, any aggregation will be skipped. Default is false. Type: boolean.
	FlushImmediately pulumi.Input `pulumi:"flushImmediately"`
	// An explicit column mapping description provided in a json format. Type: string.
	IngestionMappingAsJson pulumi.Input `pulumi:"ingestionMappingAsJson"`
	// A name of a pre-created csv mapping that was defined on the target Kusto table. Type: string.
	IngestionMappingName pulumi.Input `pulumi:"ingestionMappingName"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount pulumi.Input `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait pulumi.Input `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureDataExplorerSink'.
	Type pulumi.StringInput `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize pulumi.Input `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout pulumi.Input `pulumi:"writeBatchTimeout"`
}

func (AzureDataExplorerSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataExplorerSink)(nil)).Elem()
}

func (i AzureDataExplorerSinkArgs) ToAzureDataExplorerSinkOutput() AzureDataExplorerSinkOutput {
	return i.ToAzureDataExplorerSinkOutputWithContext(context.Background())
}

func (i AzureDataExplorerSinkArgs) ToAzureDataExplorerSinkOutputWithContext(ctx context.Context) AzureDataExplorerSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDataExplorerSinkOutput)
}

// A copy activity Azure Data Explorer sink.
type AzureDataExplorerSinkOutput struct{ *pulumi.OutputState }

func (AzureDataExplorerSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataExplorerSink)(nil)).Elem()
}

func (o AzureDataExplorerSinkOutput) ToAzureDataExplorerSinkOutput() AzureDataExplorerSinkOutput {
	return o
}

func (o AzureDataExplorerSinkOutput) ToAzureDataExplorerSinkOutputWithContext(ctx context.Context) AzureDataExplorerSinkOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureDataExplorerSinkOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerSink) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// If set to true, any aggregation will be skipped. Default is false. Type: boolean.
func (o AzureDataExplorerSinkOutput) FlushImmediately() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerSink) interface{} { return v.FlushImmediately }).(pulumi.AnyOutput)
}

// An explicit column mapping description provided in a json format. Type: string.
func (o AzureDataExplorerSinkOutput) IngestionMappingAsJson() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerSink) interface{} { return v.IngestionMappingAsJson }).(pulumi.AnyOutput)
}

// A name of a pre-created csv mapping that was defined on the target Kusto table. Type: string.
func (o AzureDataExplorerSinkOutput) IngestionMappingName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerSink) interface{} { return v.IngestionMappingName }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o AzureDataExplorerSinkOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerSink) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o AzureDataExplorerSinkOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerSink) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureDataExplorerSinkOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerSink) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'AzureDataExplorerSink'.
func (o AzureDataExplorerSinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataExplorerSink) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o AzureDataExplorerSinkOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerSink) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureDataExplorerSinkOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerSink) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity Azure Data Explorer sink.
type AzureDataExplorerSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// If set to true, any aggregation will be skipped. Default is false. Type: boolean.
	FlushImmediately interface{} `pulumi:"flushImmediately"`
	// An explicit column mapping description provided in a json format. Type: string.
	IngestionMappingAsJson interface{} `pulumi:"ingestionMappingAsJson"`
	// A name of a pre-created csv mapping that was defined on the target Kusto table. Type: string.
	IngestionMappingName interface{} `pulumi:"ingestionMappingName"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureDataExplorerSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Azure Data Explorer sink.
type AzureDataExplorerSinkResponseOutput struct{ *pulumi.OutputState }

func (AzureDataExplorerSinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataExplorerSinkResponse)(nil)).Elem()
}

func (o AzureDataExplorerSinkResponseOutput) ToAzureDataExplorerSinkResponseOutput() AzureDataExplorerSinkResponseOutput {
	return o
}

func (o AzureDataExplorerSinkResponseOutput) ToAzureDataExplorerSinkResponseOutputWithContext(ctx context.Context) AzureDataExplorerSinkResponseOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureDataExplorerSinkResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerSinkResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// If set to true, any aggregation will be skipped. Default is false. Type: boolean.
func (o AzureDataExplorerSinkResponseOutput) FlushImmediately() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerSinkResponse) interface{} { return v.FlushImmediately }).(pulumi.AnyOutput)
}

// An explicit column mapping description provided in a json format. Type: string.
func (o AzureDataExplorerSinkResponseOutput) IngestionMappingAsJson() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerSinkResponse) interface{} { return v.IngestionMappingAsJson }).(pulumi.AnyOutput)
}

// A name of a pre-created csv mapping that was defined on the target Kusto table. Type: string.
func (o AzureDataExplorerSinkResponseOutput) IngestionMappingName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerSinkResponse) interface{} { return v.IngestionMappingName }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o AzureDataExplorerSinkResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerSinkResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o AzureDataExplorerSinkResponseOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerSinkResponse) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureDataExplorerSinkResponseOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerSinkResponse) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'AzureDataExplorerSink'.
func (o AzureDataExplorerSinkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataExplorerSinkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o AzureDataExplorerSinkResponseOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerSinkResponse) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureDataExplorerSinkResponseOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerSinkResponse) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity Azure Data Explorer (Kusto) source.
type AzureDataExplorerSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The name of the Boolean option that controls whether truncation is applied to result-sets that go beyond a certain row-count limit.
	NoTruncation interface{} `pulumi:"noTruncation"`
	// Database query. Should be a Kusto Query Language (KQL) query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9]))..
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzureDataExplorerSource'.
	Type string `pulumi:"type"`
}

// AzureDataExplorerSourceInput is an input type that accepts AzureDataExplorerSourceArgs and AzureDataExplorerSourceOutput values.
// You can construct a concrete instance of `AzureDataExplorerSourceInput` via:
//
//	AzureDataExplorerSourceArgs{...}
type AzureDataExplorerSourceInput interface {
	pulumi.Input

	ToAzureDataExplorerSourceOutput() AzureDataExplorerSourceOutput
	ToAzureDataExplorerSourceOutputWithContext(context.Context) AzureDataExplorerSourceOutput
}

// A copy activity Azure Data Explorer (Kusto) source.
type AzureDataExplorerSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// The name of the Boolean option that controls whether truncation is applied to result-sets that go beyond a certain row-count limit.
	NoTruncation pulumi.Input `pulumi:"noTruncation"`
	// Database query. Should be a Kusto Query Language (KQL) query. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9]))..
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzureDataExplorerSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureDataExplorerSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataExplorerSource)(nil)).Elem()
}

func (i AzureDataExplorerSourceArgs) ToAzureDataExplorerSourceOutput() AzureDataExplorerSourceOutput {
	return i.ToAzureDataExplorerSourceOutputWithContext(context.Background())
}

func (i AzureDataExplorerSourceArgs) ToAzureDataExplorerSourceOutputWithContext(ctx context.Context) AzureDataExplorerSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDataExplorerSourceOutput)
}

// A copy activity Azure Data Explorer (Kusto) source.
type AzureDataExplorerSourceOutput struct{ *pulumi.OutputState }

func (AzureDataExplorerSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataExplorerSource)(nil)).Elem()
}

func (o AzureDataExplorerSourceOutput) ToAzureDataExplorerSourceOutput() AzureDataExplorerSourceOutput {
	return o
}

func (o AzureDataExplorerSourceOutput) ToAzureDataExplorerSourceOutputWithContext(ctx context.Context) AzureDataExplorerSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o AzureDataExplorerSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureDataExplorerSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureDataExplorerSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The name of the Boolean option that controls whether truncation is applied to result-sets that go beyond a certain row-count limit.
func (o AzureDataExplorerSourceOutput) NoTruncation() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerSource) interface{} { return v.NoTruncation }).(pulumi.AnyOutput)
}

// Database query. Should be a Kusto Query Language (KQL) query. Type: string (or Expression with resultType string).
func (o AzureDataExplorerSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9]))..
func (o AzureDataExplorerSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o AzureDataExplorerSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureDataExplorerSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'AzureDataExplorerSource'.
func (o AzureDataExplorerSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataExplorerSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Azure Data Explorer (Kusto) source.
type AzureDataExplorerSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The name of the Boolean option that controls whether truncation is applied to result-sets that go beyond a certain row-count limit.
	NoTruncation interface{} `pulumi:"noTruncation"`
	// Database query. Should be a Kusto Query Language (KQL) query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9]))..
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzureDataExplorerSource'.
	Type string `pulumi:"type"`
}

// A copy activity Azure Data Explorer (Kusto) source.
type AzureDataExplorerSourceResponseOutput struct{ *pulumi.OutputState }

func (AzureDataExplorerSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataExplorerSourceResponse)(nil)).Elem()
}

func (o AzureDataExplorerSourceResponseOutput) ToAzureDataExplorerSourceResponseOutput() AzureDataExplorerSourceResponseOutput {
	return o
}

func (o AzureDataExplorerSourceResponseOutput) ToAzureDataExplorerSourceResponseOutputWithContext(ctx context.Context) AzureDataExplorerSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o AzureDataExplorerSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureDataExplorerSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureDataExplorerSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The name of the Boolean option that controls whether truncation is applied to result-sets that go beyond a certain row-count limit.
func (o AzureDataExplorerSourceResponseOutput) NoTruncation() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerSourceResponse) interface{} { return v.NoTruncation }).(pulumi.AnyOutput)
}

// Database query. Should be a Kusto Query Language (KQL) query. Type: string (or Expression with resultType string).
func (o AzureDataExplorerSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9]))..
func (o AzureDataExplorerSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o AzureDataExplorerSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureDataExplorerSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'AzureDataExplorerSource'.
func (o AzureDataExplorerSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataExplorerSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Azure Data Explorer (Kusto) dataset.
type AzureDataExplorerTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure Data Explorer database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'AzureDataExplorerTable'.
	Type string `pulumi:"type"`
}

// AzureDataExplorerTableDatasetInput is an input type that accepts AzureDataExplorerTableDatasetArgs and AzureDataExplorerTableDatasetOutput values.
// You can construct a concrete instance of `AzureDataExplorerTableDatasetInput` via:
//
//	AzureDataExplorerTableDatasetArgs{...}
type AzureDataExplorerTableDatasetInput interface {
	pulumi.Input

	ToAzureDataExplorerTableDatasetOutput() AzureDataExplorerTableDatasetOutput
	ToAzureDataExplorerTableDatasetOutputWithContext(context.Context) AzureDataExplorerTableDatasetOutput
}

// The Azure Data Explorer (Kusto) dataset.
type AzureDataExplorerTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Azure Data Explorer database. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'AzureDataExplorerTable'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureDataExplorerTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataExplorerTableDataset)(nil)).Elem()
}

func (i AzureDataExplorerTableDatasetArgs) ToAzureDataExplorerTableDatasetOutput() AzureDataExplorerTableDatasetOutput {
	return i.ToAzureDataExplorerTableDatasetOutputWithContext(context.Background())
}

func (i AzureDataExplorerTableDatasetArgs) ToAzureDataExplorerTableDatasetOutputWithContext(ctx context.Context) AzureDataExplorerTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDataExplorerTableDatasetOutput)
}

// The Azure Data Explorer (Kusto) dataset.
type AzureDataExplorerTableDatasetOutput struct{ *pulumi.OutputState }

func (AzureDataExplorerTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataExplorerTableDataset)(nil)).Elem()
}

func (o AzureDataExplorerTableDatasetOutput) ToAzureDataExplorerTableDatasetOutput() AzureDataExplorerTableDatasetOutput {
	return o
}

func (o AzureDataExplorerTableDatasetOutput) ToAzureDataExplorerTableDatasetOutputWithContext(ctx context.Context) AzureDataExplorerTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureDataExplorerTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureDataExplorerTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AzureDataExplorerTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataExplorerTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureDataExplorerTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v AzureDataExplorerTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o AzureDataExplorerTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v AzureDataExplorerTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o AzureDataExplorerTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureDataExplorerTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureDataExplorerTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureDataExplorerTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Azure Data Explorer database. Type: string (or Expression with resultType string).
func (o AzureDataExplorerTableDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerTableDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'AzureDataExplorerTable'.
func (o AzureDataExplorerTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataExplorerTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Azure Data Explorer (Kusto) dataset.
type AzureDataExplorerTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure Data Explorer database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'AzureDataExplorerTable'.
	Type string `pulumi:"type"`
}

// The Azure Data Explorer (Kusto) dataset.
type AzureDataExplorerTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (AzureDataExplorerTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataExplorerTableDatasetResponse)(nil)).Elem()
}

func (o AzureDataExplorerTableDatasetResponseOutput) ToAzureDataExplorerTableDatasetResponseOutput() AzureDataExplorerTableDatasetResponseOutput {
	return o
}

func (o AzureDataExplorerTableDatasetResponseOutput) ToAzureDataExplorerTableDatasetResponseOutputWithContext(ctx context.Context) AzureDataExplorerTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureDataExplorerTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureDataExplorerTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AzureDataExplorerTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataExplorerTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureDataExplorerTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v AzureDataExplorerTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o AzureDataExplorerTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AzureDataExplorerTableDatasetResponse) LinkedServiceReferenceResponse {
		return v.LinkedServiceName
	}).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o AzureDataExplorerTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureDataExplorerTableDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureDataExplorerTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureDataExplorerTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Azure Data Explorer database. Type: string (or Expression with resultType string).
func (o AzureDataExplorerTableDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataExplorerTableDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'AzureDataExplorerTable'.
func (o AzureDataExplorerTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataExplorerTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Data Lake Analytics linked service.
type AzureDataLakeAnalyticsLinkedService struct {
	// The Azure Data Lake Analytics account name. Type: string (or Expression with resultType string).
	AccountName interface{} `pulumi:"accountName"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Azure Data Lake Analytics URI Type: string (or Expression with resultType string).
	DataLakeAnalyticsUri interface{} `pulumi:"dataLakeAnalyticsUri"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Data Lake Analytics account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string).
	ResourceGroupName interface{} `pulumi:"resourceGroupName"`
	// The ID of the application used to authenticate against the Azure Data Lake Analytics account. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against the Azure Data Lake Analytics account.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Data Lake Analytics account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string).
	SubscriptionId interface{} `pulumi:"subscriptionId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureDataLakeAnalytics'.
	Type string `pulumi:"type"`
}

// AzureDataLakeAnalyticsLinkedServiceInput is an input type that accepts AzureDataLakeAnalyticsLinkedServiceArgs and AzureDataLakeAnalyticsLinkedServiceOutput values.
// You can construct a concrete instance of `AzureDataLakeAnalyticsLinkedServiceInput` via:
//
//	AzureDataLakeAnalyticsLinkedServiceArgs{...}
type AzureDataLakeAnalyticsLinkedServiceInput interface {
	pulumi.Input

	ToAzureDataLakeAnalyticsLinkedServiceOutput() AzureDataLakeAnalyticsLinkedServiceOutput
	ToAzureDataLakeAnalyticsLinkedServiceOutputWithContext(context.Context) AzureDataLakeAnalyticsLinkedServiceOutput
}

// Azure Data Lake Analytics linked service.
type AzureDataLakeAnalyticsLinkedServiceArgs struct {
	// The Azure Data Lake Analytics account name. Type: string (or Expression with resultType string).
	AccountName pulumi.Input `pulumi:"accountName"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Azure Data Lake Analytics URI Type: string (or Expression with resultType string).
	DataLakeAnalyticsUri pulumi.Input `pulumi:"dataLakeAnalyticsUri"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Data Lake Analytics account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string).
	ResourceGroupName pulumi.Input `pulumi:"resourceGroupName"`
	// The ID of the application used to authenticate against the Azure Data Lake Analytics account. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against the Azure Data Lake Analytics account.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// Data Lake Analytics account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string).
	SubscriptionId pulumi.Input `pulumi:"subscriptionId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant pulumi.Input `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureDataLakeAnalytics'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureDataLakeAnalyticsLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeAnalyticsLinkedService)(nil)).Elem()
}

func (i AzureDataLakeAnalyticsLinkedServiceArgs) ToAzureDataLakeAnalyticsLinkedServiceOutput() AzureDataLakeAnalyticsLinkedServiceOutput {
	return i.ToAzureDataLakeAnalyticsLinkedServiceOutputWithContext(context.Background())
}

func (i AzureDataLakeAnalyticsLinkedServiceArgs) ToAzureDataLakeAnalyticsLinkedServiceOutputWithContext(ctx context.Context) AzureDataLakeAnalyticsLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDataLakeAnalyticsLinkedServiceOutput)
}

// Azure Data Lake Analytics linked service.
type AzureDataLakeAnalyticsLinkedServiceOutput struct{ *pulumi.OutputState }

func (AzureDataLakeAnalyticsLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeAnalyticsLinkedService)(nil)).Elem()
}

func (o AzureDataLakeAnalyticsLinkedServiceOutput) ToAzureDataLakeAnalyticsLinkedServiceOutput() AzureDataLakeAnalyticsLinkedServiceOutput {
	return o
}

func (o AzureDataLakeAnalyticsLinkedServiceOutput) ToAzureDataLakeAnalyticsLinkedServiceOutputWithContext(ctx context.Context) AzureDataLakeAnalyticsLinkedServiceOutput {
	return o
}

// The Azure Data Lake Analytics account name. Type: string (or Expression with resultType string).
func (o AzureDataLakeAnalyticsLinkedServiceOutput) AccountName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedService) interface{} { return v.AccountName }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o AzureDataLakeAnalyticsLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AzureDataLakeAnalyticsLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Azure Data Lake Analytics URI Type: string (or Expression with resultType string).
func (o AzureDataLakeAnalyticsLinkedServiceOutput) DataLakeAnalyticsUri() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedService) interface{} { return v.DataLakeAnalyticsUri }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AzureDataLakeAnalyticsLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AzureDataLakeAnalyticsLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AzureDataLakeAnalyticsLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Data Lake Analytics account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string).
func (o AzureDataLakeAnalyticsLinkedServiceOutput) ResourceGroupName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedService) interface{} { return v.ResourceGroupName }).(pulumi.AnyOutput)
}

// The ID of the application used to authenticate against the Azure Data Lake Analytics account. Type: string (or Expression with resultType string).
func (o AzureDataLakeAnalyticsLinkedServiceOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedService) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The Key of the application used to authenticate against the Azure Data Lake Analytics account.
func (o AzureDataLakeAnalyticsLinkedServiceOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedService) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// Data Lake Analytics account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string).
func (o AzureDataLakeAnalyticsLinkedServiceOutput) SubscriptionId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedService) interface{} { return v.SubscriptionId }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureDataLakeAnalyticsLinkedServiceOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedService) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AzureDataLakeAnalytics'.
func (o AzureDataLakeAnalyticsLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Data Lake Analytics linked service.
type AzureDataLakeAnalyticsLinkedServiceResponse struct {
	// The Azure Data Lake Analytics account name. Type: string (or Expression with resultType string).
	AccountName interface{} `pulumi:"accountName"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Azure Data Lake Analytics URI Type: string (or Expression with resultType string).
	DataLakeAnalyticsUri interface{} `pulumi:"dataLakeAnalyticsUri"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Data Lake Analytics account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string).
	ResourceGroupName interface{} `pulumi:"resourceGroupName"`
	// The ID of the application used to authenticate against the Azure Data Lake Analytics account. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against the Azure Data Lake Analytics account.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Data Lake Analytics account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string).
	SubscriptionId interface{} `pulumi:"subscriptionId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureDataLakeAnalytics'.
	Type string `pulumi:"type"`
}

// Azure Data Lake Analytics linked service.
type AzureDataLakeAnalyticsLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureDataLakeAnalyticsLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeAnalyticsLinkedServiceResponse)(nil)).Elem()
}

func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) ToAzureDataLakeAnalyticsLinkedServiceResponseOutput() AzureDataLakeAnalyticsLinkedServiceResponseOutput {
	return o
}

func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) ToAzureDataLakeAnalyticsLinkedServiceResponseOutputWithContext(ctx context.Context) AzureDataLakeAnalyticsLinkedServiceResponseOutput {
	return o
}

// The Azure Data Lake Analytics account name. Type: string (or Expression with resultType string).
func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) AccountName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedServiceResponse) interface{} { return v.AccountName }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Azure Data Lake Analytics URI Type: string (or Expression with resultType string).
func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) DataLakeAnalyticsUri() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedServiceResponse) interface{} { return v.DataLakeAnalyticsUri }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Data Lake Analytics account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string).
func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) ResourceGroupName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedServiceResponse) interface{} { return v.ResourceGroupName }).(pulumi.AnyOutput)
}

// The ID of the application used to authenticate against the Azure Data Lake Analytics account. Type: string (or Expression with resultType string).
func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedServiceResponse) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The Key of the application used to authenticate against the Azure Data Lake Analytics account.
func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedServiceResponse) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// Data Lake Analytics account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string).
func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) SubscriptionId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedServiceResponse) interface{} { return v.SubscriptionId }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedServiceResponse) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AzureDataLakeAnalytics'.
func (o AzureDataLakeAnalyticsLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeAnalyticsLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Data Lake Store dataset.
type AzureDataLakeStoreDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the item(s) in the Azure Data Lake Store.
	Compression *DatasetCompression `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The name of the file in the Azure Data Lake Store. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Path to the folder in the Azure Data Lake Store. Type: string (or Expression with resultType string).
	FolderPath interface{} `pulumi:"folderPath"`
	// The format of the Data Lake Store.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'AzureDataLakeStoreFile'.
	Type string `pulumi:"type"`
}

// AzureDataLakeStoreDatasetInput is an input type that accepts AzureDataLakeStoreDatasetArgs and AzureDataLakeStoreDatasetOutput values.
// You can construct a concrete instance of `AzureDataLakeStoreDatasetInput` via:
//
//	AzureDataLakeStoreDatasetArgs{...}
type AzureDataLakeStoreDatasetInput interface {
	pulumi.Input

	ToAzureDataLakeStoreDatasetOutput() AzureDataLakeStoreDatasetOutput
	ToAzureDataLakeStoreDatasetOutputWithContext(context.Context) AzureDataLakeStoreDatasetOutput
}

// Azure Data Lake Store dataset.
type AzureDataLakeStoreDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The data compression method used for the item(s) in the Azure Data Lake Store.
	Compression DatasetCompressionPtrInput `pulumi:"compression"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The name of the file in the Azure Data Lake Store. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Path to the folder in the Azure Data Lake Store. Type: string (or Expression with resultType string).
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// The format of the Data Lake Store.
	Format pulumi.Input `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'AzureDataLakeStoreFile'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureDataLakeStoreDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeStoreDataset)(nil)).Elem()
}

func (i AzureDataLakeStoreDatasetArgs) ToAzureDataLakeStoreDatasetOutput() AzureDataLakeStoreDatasetOutput {
	return i.ToAzureDataLakeStoreDatasetOutputWithContext(context.Background())
}

func (i AzureDataLakeStoreDatasetArgs) ToAzureDataLakeStoreDatasetOutputWithContext(ctx context.Context) AzureDataLakeStoreDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDataLakeStoreDatasetOutput)
}

// Azure Data Lake Store dataset.
type AzureDataLakeStoreDatasetOutput struct{ *pulumi.OutputState }

func (AzureDataLakeStoreDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeStoreDataset)(nil)).Elem()
}

func (o AzureDataLakeStoreDatasetOutput) ToAzureDataLakeStoreDatasetOutput() AzureDataLakeStoreDatasetOutput {
	return o
}

func (o AzureDataLakeStoreDatasetOutput) ToAzureDataLakeStoreDatasetOutputWithContext(ctx context.Context) AzureDataLakeStoreDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureDataLakeStoreDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The data compression method used for the item(s) in the Azure Data Lake Store.
func (o AzureDataLakeStoreDatasetOutput) Compression() DatasetCompressionPtrOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDataset) *DatasetCompression { return v.Compression }).(DatasetCompressionPtrOutput)
}

// Dataset description.
func (o AzureDataLakeStoreDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the file in the Azure Data Lake Store. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreDatasetOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDataset) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureDataLakeStoreDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Path to the folder in the Azure Data Lake Store. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreDatasetOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDataset) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// The format of the Data Lake Store.
func (o AzureDataLakeStoreDatasetOutput) Format() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDataset) interface{} { return v.Format }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o AzureDataLakeStoreDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o AzureDataLakeStoreDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureDataLakeStoreDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureDataLakeStoreDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'AzureDataLakeStoreFile'.
func (o AzureDataLakeStoreDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Data Lake Store dataset.
type AzureDataLakeStoreDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the item(s) in the Azure Data Lake Store.
	Compression *DatasetCompressionResponse `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The name of the file in the Azure Data Lake Store. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Path to the folder in the Azure Data Lake Store. Type: string (or Expression with resultType string).
	FolderPath interface{} `pulumi:"folderPath"`
	// The format of the Data Lake Store.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'AzureDataLakeStoreFile'.
	Type string `pulumi:"type"`
}

// Azure Data Lake Store dataset.
type AzureDataLakeStoreDatasetResponseOutput struct{ *pulumi.OutputState }

func (AzureDataLakeStoreDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeStoreDatasetResponse)(nil)).Elem()
}

func (o AzureDataLakeStoreDatasetResponseOutput) ToAzureDataLakeStoreDatasetResponseOutput() AzureDataLakeStoreDatasetResponseOutput {
	return o
}

func (o AzureDataLakeStoreDatasetResponseOutput) ToAzureDataLakeStoreDatasetResponseOutputWithContext(ctx context.Context) AzureDataLakeStoreDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureDataLakeStoreDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The data compression method used for the item(s) in the Azure Data Lake Store.
func (o AzureDataLakeStoreDatasetResponseOutput) Compression() DatasetCompressionResponsePtrOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDatasetResponse) *DatasetCompressionResponse { return v.Compression }).(DatasetCompressionResponsePtrOutput)
}

// Dataset description.
func (o AzureDataLakeStoreDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the file in the Azure Data Lake Store. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreDatasetResponseOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDatasetResponse) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureDataLakeStoreDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Path to the folder in the Azure Data Lake Store. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreDatasetResponseOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDatasetResponse) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// The format of the Data Lake Store.
func (o AzureDataLakeStoreDatasetResponseOutput) Format() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDatasetResponse) interface{} { return v.Format }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o AzureDataLakeStoreDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o AzureDataLakeStoreDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureDataLakeStoreDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureDataLakeStoreDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'AzureDataLakeStoreFile'.
func (o AzureDataLakeStoreDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeStoreDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Data Lake Store linked service.
type AzureDataLakeStoreLinkedService struct {
	// Data Lake Store account name. Type: string (or Expression with resultType string).
	AccountName interface{} `pulumi:"accountName"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Data Lake Store service URI. Type: string (or Expression with resultType string).
	DataLakeStoreUri interface{} `pulumi:"dataLakeStoreUri"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Data Lake Store account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string).
	ResourceGroupName interface{} `pulumi:"resourceGroupName"`
	// The ID of the application used to authenticate against the Azure Data Lake Store account. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against the Azure Data Lake Store account.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Data Lake Store account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string).
	SubscriptionId interface{} `pulumi:"subscriptionId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureDataLakeStore'.
	Type string `pulumi:"type"`
}

// AzureDataLakeStoreLinkedServiceInput is an input type that accepts AzureDataLakeStoreLinkedServiceArgs and AzureDataLakeStoreLinkedServiceOutput values.
// You can construct a concrete instance of `AzureDataLakeStoreLinkedServiceInput` via:
//
//	AzureDataLakeStoreLinkedServiceArgs{...}
type AzureDataLakeStoreLinkedServiceInput interface {
	pulumi.Input

	ToAzureDataLakeStoreLinkedServiceOutput() AzureDataLakeStoreLinkedServiceOutput
	ToAzureDataLakeStoreLinkedServiceOutputWithContext(context.Context) AzureDataLakeStoreLinkedServiceOutput
}

// Azure Data Lake Store linked service.
type AzureDataLakeStoreLinkedServiceArgs struct {
	// Data Lake Store account name. Type: string (or Expression with resultType string).
	AccountName pulumi.Input `pulumi:"accountName"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType pulumi.Input `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential CredentialReferencePtrInput `pulumi:"credential"`
	// Data Lake Store service URI. Type: string (or Expression with resultType string).
	DataLakeStoreUri pulumi.Input `pulumi:"dataLakeStoreUri"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Data Lake Store account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string).
	ResourceGroupName pulumi.Input `pulumi:"resourceGroupName"`
	// The ID of the application used to authenticate against the Azure Data Lake Store account. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against the Azure Data Lake Store account.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// Data Lake Store account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string).
	SubscriptionId pulumi.Input `pulumi:"subscriptionId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant pulumi.Input `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureDataLakeStore'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureDataLakeStoreLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeStoreLinkedService)(nil)).Elem()
}

func (i AzureDataLakeStoreLinkedServiceArgs) ToAzureDataLakeStoreLinkedServiceOutput() AzureDataLakeStoreLinkedServiceOutput {
	return i.ToAzureDataLakeStoreLinkedServiceOutputWithContext(context.Background())
}

func (i AzureDataLakeStoreLinkedServiceArgs) ToAzureDataLakeStoreLinkedServiceOutputWithContext(ctx context.Context) AzureDataLakeStoreLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDataLakeStoreLinkedServiceOutput)
}

// Azure Data Lake Store linked service.
type AzureDataLakeStoreLinkedServiceOutput struct{ *pulumi.OutputState }

func (AzureDataLakeStoreLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeStoreLinkedService)(nil)).Elem()
}

func (o AzureDataLakeStoreLinkedServiceOutput) ToAzureDataLakeStoreLinkedServiceOutput() AzureDataLakeStoreLinkedServiceOutput {
	return o
}

func (o AzureDataLakeStoreLinkedServiceOutput) ToAzureDataLakeStoreLinkedServiceOutputWithContext(ctx context.Context) AzureDataLakeStoreLinkedServiceOutput {
	return o
}

// Data Lake Store account name. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreLinkedServiceOutput) AccountName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedService) interface{} { return v.AccountName }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o AzureDataLakeStoreLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreLinkedServiceOutput) AzureCloudType() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedService) interface{} { return v.AzureCloudType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureDataLakeStoreLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The credential reference containing authentication information.
func (o AzureDataLakeStoreLinkedServiceOutput) Credential() CredentialReferencePtrOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedService) *CredentialReference { return v.Credential }).(CredentialReferencePtrOutput)
}

// Data Lake Store service URI. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreLinkedServiceOutput) DataLakeStoreUri() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedService) interface{} { return v.DataLakeStoreUri }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AzureDataLakeStoreLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AzureDataLakeStoreLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AzureDataLakeStoreLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Data Lake Store account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreLinkedServiceOutput) ResourceGroupName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedService) interface{} { return v.ResourceGroupName }).(pulumi.AnyOutput)
}

// The ID of the application used to authenticate against the Azure Data Lake Store account. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreLinkedServiceOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedService) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The Key of the application used to authenticate against the Azure Data Lake Store account.
func (o AzureDataLakeStoreLinkedServiceOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedService) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// Data Lake Store account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreLinkedServiceOutput) SubscriptionId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedService) interface{} { return v.SubscriptionId }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreLinkedServiceOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedService) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AzureDataLakeStore'.
func (o AzureDataLakeStoreLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Data Lake Store linked service.
type AzureDataLakeStoreLinkedServiceResponse struct {
	// Data Lake Store account name. Type: string (or Expression with resultType string).
	AccountName interface{} `pulumi:"accountName"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Data Lake Store service URI. Type: string (or Expression with resultType string).
	DataLakeStoreUri interface{} `pulumi:"dataLakeStoreUri"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Data Lake Store account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string).
	ResourceGroupName interface{} `pulumi:"resourceGroupName"`
	// The ID of the application used to authenticate against the Azure Data Lake Store account. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The Key of the application used to authenticate against the Azure Data Lake Store account.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Data Lake Store account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string).
	SubscriptionId interface{} `pulumi:"subscriptionId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureDataLakeStore'.
	Type string `pulumi:"type"`
}

// Azure Data Lake Store linked service.
type AzureDataLakeStoreLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureDataLakeStoreLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeStoreLinkedServiceResponse)(nil)).Elem()
}

func (o AzureDataLakeStoreLinkedServiceResponseOutput) ToAzureDataLakeStoreLinkedServiceResponseOutput() AzureDataLakeStoreLinkedServiceResponseOutput {
	return o
}

func (o AzureDataLakeStoreLinkedServiceResponseOutput) ToAzureDataLakeStoreLinkedServiceResponseOutputWithContext(ctx context.Context) AzureDataLakeStoreLinkedServiceResponseOutput {
	return o
}

// Data Lake Store account name. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreLinkedServiceResponseOutput) AccountName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedServiceResponse) interface{} { return v.AccountName }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o AzureDataLakeStoreLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreLinkedServiceResponseOutput) AzureCloudType() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedServiceResponse) interface{} { return v.AzureCloudType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureDataLakeStoreLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The credential reference containing authentication information.
func (o AzureDataLakeStoreLinkedServiceResponseOutput) Credential() CredentialReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedServiceResponse) *CredentialReferenceResponse { return v.Credential }).(CredentialReferenceResponsePtrOutput)
}

// Data Lake Store service URI. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreLinkedServiceResponseOutput) DataLakeStoreUri() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedServiceResponse) interface{} { return v.DataLakeStoreUri }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AzureDataLakeStoreLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AzureDataLakeStoreLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AzureDataLakeStoreLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Data Lake Store account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreLinkedServiceResponseOutput) ResourceGroupName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedServiceResponse) interface{} { return v.ResourceGroupName }).(pulumi.AnyOutput)
}

// The ID of the application used to authenticate against the Azure Data Lake Store account. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreLinkedServiceResponseOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedServiceResponse) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The Key of the application used to authenticate against the Azure Data Lake Store account.
func (o AzureDataLakeStoreLinkedServiceResponseOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedServiceResponse) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// Data Lake Store account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreLinkedServiceResponseOutput) SubscriptionId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedServiceResponse) interface{} { return v.SubscriptionId }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreLinkedServiceResponseOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedServiceResponse) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AzureDataLakeStore'.
func (o AzureDataLakeStoreLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The location of azure data lake store dataset.
type AzureDataLakeStoreLocation struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'AzureDataLakeStoreLocation'.
	Type string `pulumi:"type"`
}

// AzureDataLakeStoreLocationInput is an input type that accepts AzureDataLakeStoreLocationArgs and AzureDataLakeStoreLocationOutput values.
// You can construct a concrete instance of `AzureDataLakeStoreLocationInput` via:
//
//	AzureDataLakeStoreLocationArgs{...}
type AzureDataLakeStoreLocationInput interface {
	pulumi.Input

	ToAzureDataLakeStoreLocationOutput() AzureDataLakeStoreLocationOutput
	ToAzureDataLakeStoreLocationOutputWithContext(context.Context) AzureDataLakeStoreLocationOutput
}

// The location of azure data lake store dataset.
type AzureDataLakeStoreLocationArgs struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'AzureDataLakeStoreLocation'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureDataLakeStoreLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeStoreLocation)(nil)).Elem()
}

func (i AzureDataLakeStoreLocationArgs) ToAzureDataLakeStoreLocationOutput() AzureDataLakeStoreLocationOutput {
	return i.ToAzureDataLakeStoreLocationOutputWithContext(context.Background())
}

func (i AzureDataLakeStoreLocationArgs) ToAzureDataLakeStoreLocationOutputWithContext(ctx context.Context) AzureDataLakeStoreLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDataLakeStoreLocationOutput)
}

// The location of azure data lake store dataset.
type AzureDataLakeStoreLocationOutput struct{ *pulumi.OutputState }

func (AzureDataLakeStoreLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeStoreLocation)(nil)).Elem()
}

func (o AzureDataLakeStoreLocationOutput) ToAzureDataLakeStoreLocationOutput() AzureDataLakeStoreLocationOutput {
	return o
}

func (o AzureDataLakeStoreLocationOutput) ToAzureDataLakeStoreLocationOutputWithContext(ctx context.Context) AzureDataLakeStoreLocationOutput {
	return o
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreLocationOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLocation) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o AzureDataLakeStoreLocationOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLocation) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
// Expected value is 'AzureDataLakeStoreLocation'.
func (o AzureDataLakeStoreLocationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLocation) string { return v.Type }).(pulumi.StringOutput)
}

// The location of azure data lake store dataset.
type AzureDataLakeStoreLocationResponse struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'AzureDataLakeStoreLocation'.
	Type string `pulumi:"type"`
}

// The location of azure data lake store dataset.
type AzureDataLakeStoreLocationResponseOutput struct{ *pulumi.OutputState }

func (AzureDataLakeStoreLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeStoreLocationResponse)(nil)).Elem()
}

func (o AzureDataLakeStoreLocationResponseOutput) ToAzureDataLakeStoreLocationResponseOutput() AzureDataLakeStoreLocationResponseOutput {
	return o
}

func (o AzureDataLakeStoreLocationResponseOutput) ToAzureDataLakeStoreLocationResponseOutputWithContext(ctx context.Context) AzureDataLakeStoreLocationResponseOutput {
	return o
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreLocationResponseOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLocationResponse) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o AzureDataLakeStoreLocationResponseOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLocationResponse) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
// Expected value is 'AzureDataLakeStoreLocation'.
func (o AzureDataLakeStoreLocationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeStoreLocationResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure data lake store read settings.
type AzureDataLakeStoreReadSettings struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery interface{} `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// Lists files after the value (exclusive) based on file/folder names’ lexicographical order. Applies under the folderPath in data set, and filter files/sub-folders under the folderPath. Type: string (or Expression with resultType string).
	ListAfter interface{} `pulumi:"listAfter"`
	// Lists files before the value (inclusive) based on file/folder names’ lexicographical order. Applies under the folderPath in data set, and filter files/sub-folders under the folderPath. Type: string (or Expression with resultType string).
	ListBefore interface{} `pulumi:"listBefore"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'AzureDataLakeStoreReadSettings'.
	Type string `pulumi:"type"`
	// ADLS wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// ADLS wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// AzureDataLakeStoreReadSettingsInput is an input type that accepts AzureDataLakeStoreReadSettingsArgs and AzureDataLakeStoreReadSettingsOutput values.
// You can construct a concrete instance of `AzureDataLakeStoreReadSettingsInput` via:
//
//	AzureDataLakeStoreReadSettingsArgs{...}
type AzureDataLakeStoreReadSettingsInput interface {
	pulumi.Input

	ToAzureDataLakeStoreReadSettingsOutput() AzureDataLakeStoreReadSettingsOutput
	ToAzureDataLakeStoreReadSettingsOutputWithContext(context.Context) AzureDataLakeStoreReadSettingsOutput
}

// Azure data lake store read settings.
type AzureDataLakeStoreReadSettingsArgs struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion pulumi.Input `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery pulumi.Input `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath pulumi.Input `pulumi:"fileListPath"`
	// Lists files after the value (exclusive) based on file/folder names’ lexicographical order. Applies under the folderPath in data set, and filter files/sub-folders under the folderPath. Type: string (or Expression with resultType string).
	ListAfter pulumi.Input `pulumi:"listAfter"`
	// Lists files before the value (inclusive) based on file/folder names’ lexicographical order. Applies under the folderPath in data set, and filter files/sub-folders under the folderPath. Type: string (or Expression with resultType string).
	ListBefore pulumi.Input `pulumi:"listBefore"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd pulumi.Input `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart pulumi.Input `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath pulumi.Input `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive pulumi.Input `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'AzureDataLakeStoreReadSettings'.
	Type pulumi.StringInput `pulumi:"type"`
	// ADLS wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName pulumi.Input `pulumi:"wildcardFileName"`
	// ADLS wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath pulumi.Input `pulumi:"wildcardFolderPath"`
}

func (AzureDataLakeStoreReadSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeStoreReadSettings)(nil)).Elem()
}

func (i AzureDataLakeStoreReadSettingsArgs) ToAzureDataLakeStoreReadSettingsOutput() AzureDataLakeStoreReadSettingsOutput {
	return i.ToAzureDataLakeStoreReadSettingsOutputWithContext(context.Background())
}

func (i AzureDataLakeStoreReadSettingsArgs) ToAzureDataLakeStoreReadSettingsOutputWithContext(ctx context.Context) AzureDataLakeStoreReadSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDataLakeStoreReadSettingsOutput)
}

func (i AzureDataLakeStoreReadSettingsArgs) ToAzureDataLakeStoreReadSettingsPtrOutput() AzureDataLakeStoreReadSettingsPtrOutput {
	return i.ToAzureDataLakeStoreReadSettingsPtrOutputWithContext(context.Background())
}

func (i AzureDataLakeStoreReadSettingsArgs) ToAzureDataLakeStoreReadSettingsPtrOutputWithContext(ctx context.Context) AzureDataLakeStoreReadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDataLakeStoreReadSettingsOutput).ToAzureDataLakeStoreReadSettingsPtrOutputWithContext(ctx)
}

// AzureDataLakeStoreReadSettingsPtrInput is an input type that accepts AzureDataLakeStoreReadSettingsArgs, AzureDataLakeStoreReadSettingsPtr and AzureDataLakeStoreReadSettingsPtrOutput values.
// You can construct a concrete instance of `AzureDataLakeStoreReadSettingsPtrInput` via:
//
//	        AzureDataLakeStoreReadSettingsArgs{...}
//
//	or:
//
//	        nil
type AzureDataLakeStoreReadSettingsPtrInput interface {
	pulumi.Input

	ToAzureDataLakeStoreReadSettingsPtrOutput() AzureDataLakeStoreReadSettingsPtrOutput
	ToAzureDataLakeStoreReadSettingsPtrOutputWithContext(context.Context) AzureDataLakeStoreReadSettingsPtrOutput
}

type azureDataLakeStoreReadSettingsPtrType AzureDataLakeStoreReadSettingsArgs

func AzureDataLakeStoreReadSettingsPtr(v *AzureDataLakeStoreReadSettingsArgs) AzureDataLakeStoreReadSettingsPtrInput {
	return (*azureDataLakeStoreReadSettingsPtrType)(v)
}

func (*azureDataLakeStoreReadSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureDataLakeStoreReadSettings)(nil)).Elem()
}

func (i *azureDataLakeStoreReadSettingsPtrType) ToAzureDataLakeStoreReadSettingsPtrOutput() AzureDataLakeStoreReadSettingsPtrOutput {
	return i.ToAzureDataLakeStoreReadSettingsPtrOutputWithContext(context.Background())
}

func (i *azureDataLakeStoreReadSettingsPtrType) ToAzureDataLakeStoreReadSettingsPtrOutputWithContext(ctx context.Context) AzureDataLakeStoreReadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDataLakeStoreReadSettingsPtrOutput)
}

// Azure data lake store read settings.
type AzureDataLakeStoreReadSettingsOutput struct{ *pulumi.OutputState }

func (AzureDataLakeStoreReadSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeStoreReadSettings)(nil)).Elem()
}

func (o AzureDataLakeStoreReadSettingsOutput) ToAzureDataLakeStoreReadSettingsOutput() AzureDataLakeStoreReadSettingsOutput {
	return o
}

func (o AzureDataLakeStoreReadSettingsOutput) ToAzureDataLakeStoreReadSettingsOutputWithContext(ctx context.Context) AzureDataLakeStoreReadSettingsOutput {
	return o
}

func (o AzureDataLakeStoreReadSettingsOutput) ToAzureDataLakeStoreReadSettingsPtrOutput() AzureDataLakeStoreReadSettingsPtrOutput {
	return o.ToAzureDataLakeStoreReadSettingsPtrOutputWithContext(context.Background())
}

func (o AzureDataLakeStoreReadSettingsOutput) ToAzureDataLakeStoreReadSettingsPtrOutputWithContext(ctx context.Context) AzureDataLakeStoreReadSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureDataLakeStoreReadSettings) *AzureDataLakeStoreReadSettings {
		return &v
	}).(AzureDataLakeStoreReadSettingsPtrOutput)
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureDataLakeStoreReadSettingsOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreReadSettings) interface{} { return v.DeleteFilesAfterCompletion }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureDataLakeStoreReadSettingsOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreReadSettings) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o AzureDataLakeStoreReadSettingsOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreReadSettings) interface{} { return v.EnablePartitionDiscovery }).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreReadSettingsOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreReadSettings) interface{} { return v.FileListPath }).(pulumi.AnyOutput)
}

// Lists files after the value (exclusive) based on file/folder names’ lexicographical order. Applies under the folderPath in data set, and filter files/sub-folders under the folderPath. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreReadSettingsOutput) ListAfter() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreReadSettings) interface{} { return v.ListAfter }).(pulumi.AnyOutput)
}

// Lists files before the value (inclusive) based on file/folder names’ lexicographical order. Applies under the folderPath in data set, and filter files/sub-folders under the folderPath. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreReadSettingsOutput) ListBefore() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreReadSettings) interface{} { return v.ListBefore }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureDataLakeStoreReadSettingsOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreReadSettings) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreReadSettingsOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreReadSettings) interface{} { return v.ModifiedDatetimeEnd }).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreReadSettingsOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreReadSettings) interface{} { return v.ModifiedDatetimeStart }).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreReadSettingsOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreReadSettings) interface{} { return v.PartitionRootPath }).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o AzureDataLakeStoreReadSettingsOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreReadSettings) interface{} { return v.Recursive }).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'AzureDataLakeStoreReadSettings'.
func (o AzureDataLakeStoreReadSettingsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeStoreReadSettings) string { return v.Type }).(pulumi.StringOutput)
}

// ADLS wildcardFileName. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreReadSettingsOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreReadSettings) interface{} { return v.WildcardFileName }).(pulumi.AnyOutput)
}

// ADLS wildcardFolderPath. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreReadSettingsOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreReadSettings) interface{} { return v.WildcardFolderPath }).(pulumi.AnyOutput)
}

type AzureDataLakeStoreReadSettingsPtrOutput struct{ *pulumi.OutputState }

func (AzureDataLakeStoreReadSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureDataLakeStoreReadSettings)(nil)).Elem()
}

func (o AzureDataLakeStoreReadSettingsPtrOutput) ToAzureDataLakeStoreReadSettingsPtrOutput() AzureDataLakeStoreReadSettingsPtrOutput {
	return o
}

func (o AzureDataLakeStoreReadSettingsPtrOutput) ToAzureDataLakeStoreReadSettingsPtrOutputWithContext(ctx context.Context) AzureDataLakeStoreReadSettingsPtrOutput {
	return o
}

func (o AzureDataLakeStoreReadSettingsPtrOutput) Elem() AzureDataLakeStoreReadSettingsOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreReadSettings) AzureDataLakeStoreReadSettings {
		if v != nil {
			return *v
		}
		var ret AzureDataLakeStoreReadSettings
		return ret
	}).(AzureDataLakeStoreReadSettingsOutput)
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureDataLakeStoreReadSettingsPtrOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.DeleteFilesAfterCompletion
	}).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureDataLakeStoreReadSettingsPtrOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableMetricsCollection
	}).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o AzureDataLakeStoreReadSettingsPtrOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.EnablePartitionDiscovery
	}).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreReadSettingsPtrOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.FileListPath
	}).(pulumi.AnyOutput)
}

// Lists files after the value (exclusive) based on file/folder names’ lexicographical order. Applies under the folderPath in data set, and filter files/sub-folders under the folderPath. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreReadSettingsPtrOutput) ListAfter() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.ListAfter
	}).(pulumi.AnyOutput)
}

// Lists files before the value (inclusive) based on file/folder names’ lexicographical order. Applies under the folderPath in data set, and filter files/sub-folders under the folderPath. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreReadSettingsPtrOutput) ListBefore() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.ListBefore
	}).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureDataLakeStoreReadSettingsPtrOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentConnections
	}).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreReadSettingsPtrOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeEnd
	}).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreReadSettingsPtrOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeStart
	}).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreReadSettingsPtrOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionRootPath
	}).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o AzureDataLakeStoreReadSettingsPtrOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.Recursive
	}).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'AzureDataLakeStoreReadSettings'.
func (o AzureDataLakeStoreReadSettingsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreReadSettings) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// ADLS wildcardFileName. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreReadSettingsPtrOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFileName
	}).(pulumi.AnyOutput)
}

// ADLS wildcardFolderPath. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreReadSettingsPtrOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFolderPath
	}).(pulumi.AnyOutput)
}

// Azure data lake store read settings.
type AzureDataLakeStoreReadSettingsResponse struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery interface{} `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// Lists files after the value (exclusive) based on file/folder names’ lexicographical order. Applies under the folderPath in data set, and filter files/sub-folders under the folderPath. Type: string (or Expression with resultType string).
	ListAfter interface{} `pulumi:"listAfter"`
	// Lists files before the value (inclusive) based on file/folder names’ lexicographical order. Applies under the folderPath in data set, and filter files/sub-folders under the folderPath. Type: string (or Expression with resultType string).
	ListBefore interface{} `pulumi:"listBefore"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'AzureDataLakeStoreReadSettings'.
	Type string `pulumi:"type"`
	// ADLS wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// ADLS wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// Azure data lake store read settings.
type AzureDataLakeStoreReadSettingsResponseOutput struct{ *pulumi.OutputState }

func (AzureDataLakeStoreReadSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeStoreReadSettingsResponse)(nil)).Elem()
}

func (o AzureDataLakeStoreReadSettingsResponseOutput) ToAzureDataLakeStoreReadSettingsResponseOutput() AzureDataLakeStoreReadSettingsResponseOutput {
	return o
}

func (o AzureDataLakeStoreReadSettingsResponseOutput) ToAzureDataLakeStoreReadSettingsResponseOutputWithContext(ctx context.Context) AzureDataLakeStoreReadSettingsResponseOutput {
	return o
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureDataLakeStoreReadSettingsResponseOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreReadSettingsResponse) interface{} { return v.DeleteFilesAfterCompletion }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureDataLakeStoreReadSettingsResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreReadSettingsResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o AzureDataLakeStoreReadSettingsResponseOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreReadSettingsResponse) interface{} { return v.EnablePartitionDiscovery }).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreReadSettingsResponseOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreReadSettingsResponse) interface{} { return v.FileListPath }).(pulumi.AnyOutput)
}

// Lists files after the value (exclusive) based on file/folder names’ lexicographical order. Applies under the folderPath in data set, and filter files/sub-folders under the folderPath. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreReadSettingsResponseOutput) ListAfter() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreReadSettingsResponse) interface{} { return v.ListAfter }).(pulumi.AnyOutput)
}

// Lists files before the value (inclusive) based on file/folder names’ lexicographical order. Applies under the folderPath in data set, and filter files/sub-folders under the folderPath. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreReadSettingsResponseOutput) ListBefore() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreReadSettingsResponse) interface{} { return v.ListBefore }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureDataLakeStoreReadSettingsResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreReadSettingsResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreReadSettingsResponseOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreReadSettingsResponse) interface{} { return v.ModifiedDatetimeEnd }).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreReadSettingsResponseOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreReadSettingsResponse) interface{} { return v.ModifiedDatetimeStart }).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreReadSettingsResponseOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreReadSettingsResponse) interface{} { return v.PartitionRootPath }).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o AzureDataLakeStoreReadSettingsResponseOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreReadSettingsResponse) interface{} { return v.Recursive }).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'AzureDataLakeStoreReadSettings'.
func (o AzureDataLakeStoreReadSettingsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeStoreReadSettingsResponse) string { return v.Type }).(pulumi.StringOutput)
}

// ADLS wildcardFileName. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreReadSettingsResponseOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreReadSettingsResponse) interface{} { return v.WildcardFileName }).(pulumi.AnyOutput)
}

// ADLS wildcardFolderPath. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreReadSettingsResponseOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreReadSettingsResponse) interface{} { return v.WildcardFolderPath }).(pulumi.AnyOutput)
}

type AzureDataLakeStoreReadSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureDataLakeStoreReadSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureDataLakeStoreReadSettingsResponse)(nil)).Elem()
}

func (o AzureDataLakeStoreReadSettingsResponsePtrOutput) ToAzureDataLakeStoreReadSettingsResponsePtrOutput() AzureDataLakeStoreReadSettingsResponsePtrOutput {
	return o
}

func (o AzureDataLakeStoreReadSettingsResponsePtrOutput) ToAzureDataLakeStoreReadSettingsResponsePtrOutputWithContext(ctx context.Context) AzureDataLakeStoreReadSettingsResponsePtrOutput {
	return o
}

func (o AzureDataLakeStoreReadSettingsResponsePtrOutput) Elem() AzureDataLakeStoreReadSettingsResponseOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreReadSettingsResponse) AzureDataLakeStoreReadSettingsResponse {
		if v != nil {
			return *v
		}
		var ret AzureDataLakeStoreReadSettingsResponse
		return ret
	}).(AzureDataLakeStoreReadSettingsResponseOutput)
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureDataLakeStoreReadSettingsResponsePtrOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.DeleteFilesAfterCompletion
	}).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureDataLakeStoreReadSettingsResponsePtrOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableMetricsCollection
	}).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o AzureDataLakeStoreReadSettingsResponsePtrOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.EnablePartitionDiscovery
	}).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreReadSettingsResponsePtrOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.FileListPath
	}).(pulumi.AnyOutput)
}

// Lists files after the value (exclusive) based on file/folder names’ lexicographical order. Applies under the folderPath in data set, and filter files/sub-folders under the folderPath. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreReadSettingsResponsePtrOutput) ListAfter() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.ListAfter
	}).(pulumi.AnyOutput)
}

// Lists files before the value (inclusive) based on file/folder names’ lexicographical order. Applies under the folderPath in data set, and filter files/sub-folders under the folderPath. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreReadSettingsResponsePtrOutput) ListBefore() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.ListBefore
	}).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureDataLakeStoreReadSettingsResponsePtrOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentConnections
	}).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreReadSettingsResponsePtrOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeEnd
	}).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreReadSettingsResponsePtrOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeStart
	}).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreReadSettingsResponsePtrOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionRootPath
	}).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o AzureDataLakeStoreReadSettingsResponsePtrOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Recursive
	}).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'AzureDataLakeStoreReadSettings'.
func (o AzureDataLakeStoreReadSettingsResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreReadSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// ADLS wildcardFileName. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreReadSettingsResponsePtrOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFileName
	}).(pulumi.AnyOutput)
}

// ADLS wildcardFolderPath. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreReadSettingsResponsePtrOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFolderPath
	}).(pulumi.AnyOutput)
}

// A copy activity Azure Data Lake Store sink.
type AzureDataLakeStoreSink struct {
	// The type of copy behavior for copy sink. Type: string (or Expression with resultType string).
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Single File Parallel.
	EnableAdlsSingleFileParallel interface{} `pulumi:"enableAdlsSingleFileParallel"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureDataLakeStoreSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// AzureDataLakeStoreSinkInput is an input type that accepts AzureDataLakeStoreSinkArgs and AzureDataLakeStoreSinkOutput values.
// You can construct a concrete instance of `AzureDataLakeStoreSinkInput` via:
//
//	AzureDataLakeStoreSinkArgs{...}
type AzureDataLakeStoreSinkInput interface {
	pulumi.Input

	ToAzureDataLakeStoreSinkOutput() AzureDataLakeStoreSinkOutput
	ToAzureDataLakeStoreSinkOutputWithContext(context.Context) AzureDataLakeStoreSinkOutput
}

// A copy activity Azure Data Lake Store sink.
type AzureDataLakeStoreSinkArgs struct {
	// The type of copy behavior for copy sink. Type: string (or Expression with resultType string).
	CopyBehavior pulumi.Input `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// Single File Parallel.
	EnableAdlsSingleFileParallel pulumi.Input `pulumi:"enableAdlsSingleFileParallel"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount pulumi.Input `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait pulumi.Input `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureDataLakeStoreSink'.
	Type pulumi.StringInput `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize pulumi.Input `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout pulumi.Input `pulumi:"writeBatchTimeout"`
}

func (AzureDataLakeStoreSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeStoreSink)(nil)).Elem()
}

func (i AzureDataLakeStoreSinkArgs) ToAzureDataLakeStoreSinkOutput() AzureDataLakeStoreSinkOutput {
	return i.ToAzureDataLakeStoreSinkOutputWithContext(context.Background())
}

func (i AzureDataLakeStoreSinkArgs) ToAzureDataLakeStoreSinkOutputWithContext(ctx context.Context) AzureDataLakeStoreSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDataLakeStoreSinkOutput)
}

// A copy activity Azure Data Lake Store sink.
type AzureDataLakeStoreSinkOutput struct{ *pulumi.OutputState }

func (AzureDataLakeStoreSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeStoreSink)(nil)).Elem()
}

func (o AzureDataLakeStoreSinkOutput) ToAzureDataLakeStoreSinkOutput() AzureDataLakeStoreSinkOutput {
	return o
}

func (o AzureDataLakeStoreSinkOutput) ToAzureDataLakeStoreSinkOutputWithContext(ctx context.Context) AzureDataLakeStoreSinkOutput {
	return o
}

// The type of copy behavior for copy sink. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreSinkOutput) CopyBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreSink) interface{} { return v.CopyBehavior }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureDataLakeStoreSinkOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreSink) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Single File Parallel.
func (o AzureDataLakeStoreSinkOutput) EnableAdlsSingleFileParallel() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreSink) interface{} { return v.EnableAdlsSingleFileParallel }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o AzureDataLakeStoreSinkOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreSink) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o AzureDataLakeStoreSinkOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreSink) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureDataLakeStoreSinkOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreSink) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'AzureDataLakeStoreSink'.
func (o AzureDataLakeStoreSinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeStoreSink) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o AzureDataLakeStoreSinkOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreSink) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureDataLakeStoreSinkOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreSink) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity Azure Data Lake Store sink.
type AzureDataLakeStoreSinkResponse struct {
	// The type of copy behavior for copy sink. Type: string (or Expression with resultType string).
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Single File Parallel.
	EnableAdlsSingleFileParallel interface{} `pulumi:"enableAdlsSingleFileParallel"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureDataLakeStoreSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Azure Data Lake Store sink.
type AzureDataLakeStoreSinkResponseOutput struct{ *pulumi.OutputState }

func (AzureDataLakeStoreSinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeStoreSinkResponse)(nil)).Elem()
}

func (o AzureDataLakeStoreSinkResponseOutput) ToAzureDataLakeStoreSinkResponseOutput() AzureDataLakeStoreSinkResponseOutput {
	return o
}

func (o AzureDataLakeStoreSinkResponseOutput) ToAzureDataLakeStoreSinkResponseOutputWithContext(ctx context.Context) AzureDataLakeStoreSinkResponseOutput {
	return o
}

// The type of copy behavior for copy sink. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreSinkResponseOutput) CopyBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreSinkResponse) interface{} { return v.CopyBehavior }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureDataLakeStoreSinkResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreSinkResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Single File Parallel.
func (o AzureDataLakeStoreSinkResponseOutput) EnableAdlsSingleFileParallel() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreSinkResponse) interface{} { return v.EnableAdlsSingleFileParallel }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o AzureDataLakeStoreSinkResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreSinkResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o AzureDataLakeStoreSinkResponseOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreSinkResponse) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureDataLakeStoreSinkResponseOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreSinkResponse) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'AzureDataLakeStoreSink'.
func (o AzureDataLakeStoreSinkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeStoreSinkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o AzureDataLakeStoreSinkResponseOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreSinkResponse) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureDataLakeStoreSinkResponseOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreSinkResponse) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity Azure Data Lake source.
type AzureDataLakeStoreSource struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzureDataLakeStoreSource'.
	Type string `pulumi:"type"`
}

// AzureDataLakeStoreSourceInput is an input type that accepts AzureDataLakeStoreSourceArgs and AzureDataLakeStoreSourceOutput values.
// You can construct a concrete instance of `AzureDataLakeStoreSourceInput` via:
//
//	AzureDataLakeStoreSourceArgs{...}
type AzureDataLakeStoreSourceInput interface {
	pulumi.Input

	ToAzureDataLakeStoreSourceOutput() AzureDataLakeStoreSourceOutput
	ToAzureDataLakeStoreSourceOutputWithContext(context.Context) AzureDataLakeStoreSourceOutput
}

// A copy activity Azure Data Lake source.
type AzureDataLakeStoreSourceArgs struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive pulumi.Input `pulumi:"recursive"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzureDataLakeStoreSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureDataLakeStoreSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeStoreSource)(nil)).Elem()
}

func (i AzureDataLakeStoreSourceArgs) ToAzureDataLakeStoreSourceOutput() AzureDataLakeStoreSourceOutput {
	return i.ToAzureDataLakeStoreSourceOutputWithContext(context.Background())
}

func (i AzureDataLakeStoreSourceArgs) ToAzureDataLakeStoreSourceOutputWithContext(ctx context.Context) AzureDataLakeStoreSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDataLakeStoreSourceOutput)
}

// A copy activity Azure Data Lake source.
type AzureDataLakeStoreSourceOutput struct{ *pulumi.OutputState }

func (AzureDataLakeStoreSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeStoreSource)(nil)).Elem()
}

func (o AzureDataLakeStoreSourceOutput) ToAzureDataLakeStoreSourceOutput() AzureDataLakeStoreSourceOutput {
	return o
}

func (o AzureDataLakeStoreSourceOutput) ToAzureDataLakeStoreSourceOutputWithContext(ctx context.Context) AzureDataLakeStoreSourceOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureDataLakeStoreSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureDataLakeStoreSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o AzureDataLakeStoreSourceOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreSource) interface{} { return v.Recursive }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o AzureDataLakeStoreSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureDataLakeStoreSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'AzureDataLakeStoreSource'.
func (o AzureDataLakeStoreSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeStoreSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Azure Data Lake source.
type AzureDataLakeStoreSourceResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzureDataLakeStoreSource'.
	Type string `pulumi:"type"`
}

// A copy activity Azure Data Lake source.
type AzureDataLakeStoreSourceResponseOutput struct{ *pulumi.OutputState }

func (AzureDataLakeStoreSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeStoreSourceResponse)(nil)).Elem()
}

func (o AzureDataLakeStoreSourceResponseOutput) ToAzureDataLakeStoreSourceResponseOutput() AzureDataLakeStoreSourceResponseOutput {
	return o
}

func (o AzureDataLakeStoreSourceResponseOutput) ToAzureDataLakeStoreSourceResponseOutputWithContext(ctx context.Context) AzureDataLakeStoreSourceResponseOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureDataLakeStoreSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureDataLakeStoreSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o AzureDataLakeStoreSourceResponseOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreSourceResponse) interface{} { return v.Recursive }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o AzureDataLakeStoreSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureDataLakeStoreSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'AzureDataLakeStoreSource'.
func (o AzureDataLakeStoreSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeStoreSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure data lake store write settings.
type AzureDataLakeStoreWriteSettings struct {
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies the expiry time of the written files. The time is applied to the UTC time zone in the format of "2018-12-01T05:00:00Z". Default value is NULL. Type: string (or Expression with resultType string).
	ExpiryDateTime interface{} `pulumi:"expiryDateTime"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
	Metadata []MetadataItem `pulumi:"metadata"`
	// The write setting type.
	// Expected value is 'AzureDataLakeStoreWriteSettings'.
	Type string `pulumi:"type"`
}

// AzureDataLakeStoreWriteSettingsInput is an input type that accepts AzureDataLakeStoreWriteSettingsArgs and AzureDataLakeStoreWriteSettingsOutput values.
// You can construct a concrete instance of `AzureDataLakeStoreWriteSettingsInput` via:
//
//	AzureDataLakeStoreWriteSettingsArgs{...}
type AzureDataLakeStoreWriteSettingsInput interface {
	pulumi.Input

	ToAzureDataLakeStoreWriteSettingsOutput() AzureDataLakeStoreWriteSettingsOutput
	ToAzureDataLakeStoreWriteSettingsOutputWithContext(context.Context) AzureDataLakeStoreWriteSettingsOutput
}

// Azure data lake store write settings.
type AzureDataLakeStoreWriteSettingsArgs struct {
	// The type of copy behavior for copy sink.
	CopyBehavior pulumi.Input `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// Specifies the expiry time of the written files. The time is applied to the UTC time zone in the format of "2018-12-01T05:00:00Z". Default value is NULL. Type: string (or Expression with resultType string).
	ExpiryDateTime pulumi.Input `pulumi:"expiryDateTime"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
	Metadata MetadataItemArrayInput `pulumi:"metadata"`
	// The write setting type.
	// Expected value is 'AzureDataLakeStoreWriteSettings'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureDataLakeStoreWriteSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeStoreWriteSettings)(nil)).Elem()
}

func (i AzureDataLakeStoreWriteSettingsArgs) ToAzureDataLakeStoreWriteSettingsOutput() AzureDataLakeStoreWriteSettingsOutput {
	return i.ToAzureDataLakeStoreWriteSettingsOutputWithContext(context.Background())
}

func (i AzureDataLakeStoreWriteSettingsArgs) ToAzureDataLakeStoreWriteSettingsOutputWithContext(ctx context.Context) AzureDataLakeStoreWriteSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDataLakeStoreWriteSettingsOutput)
}

func (i AzureDataLakeStoreWriteSettingsArgs) ToAzureDataLakeStoreWriteSettingsPtrOutput() AzureDataLakeStoreWriteSettingsPtrOutput {
	return i.ToAzureDataLakeStoreWriteSettingsPtrOutputWithContext(context.Background())
}

func (i AzureDataLakeStoreWriteSettingsArgs) ToAzureDataLakeStoreWriteSettingsPtrOutputWithContext(ctx context.Context) AzureDataLakeStoreWriteSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDataLakeStoreWriteSettingsOutput).ToAzureDataLakeStoreWriteSettingsPtrOutputWithContext(ctx)
}

// AzureDataLakeStoreWriteSettingsPtrInput is an input type that accepts AzureDataLakeStoreWriteSettingsArgs, AzureDataLakeStoreWriteSettingsPtr and AzureDataLakeStoreWriteSettingsPtrOutput values.
// You can construct a concrete instance of `AzureDataLakeStoreWriteSettingsPtrInput` via:
//
//	        AzureDataLakeStoreWriteSettingsArgs{...}
//
//	or:
//
//	        nil
type AzureDataLakeStoreWriteSettingsPtrInput interface {
	pulumi.Input

	ToAzureDataLakeStoreWriteSettingsPtrOutput() AzureDataLakeStoreWriteSettingsPtrOutput
	ToAzureDataLakeStoreWriteSettingsPtrOutputWithContext(context.Context) AzureDataLakeStoreWriteSettingsPtrOutput
}

type azureDataLakeStoreWriteSettingsPtrType AzureDataLakeStoreWriteSettingsArgs

func AzureDataLakeStoreWriteSettingsPtr(v *AzureDataLakeStoreWriteSettingsArgs) AzureDataLakeStoreWriteSettingsPtrInput {
	return (*azureDataLakeStoreWriteSettingsPtrType)(v)
}

func (*azureDataLakeStoreWriteSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureDataLakeStoreWriteSettings)(nil)).Elem()
}

func (i *azureDataLakeStoreWriteSettingsPtrType) ToAzureDataLakeStoreWriteSettingsPtrOutput() AzureDataLakeStoreWriteSettingsPtrOutput {
	return i.ToAzureDataLakeStoreWriteSettingsPtrOutputWithContext(context.Background())
}

func (i *azureDataLakeStoreWriteSettingsPtrType) ToAzureDataLakeStoreWriteSettingsPtrOutputWithContext(ctx context.Context) AzureDataLakeStoreWriteSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDataLakeStoreWriteSettingsPtrOutput)
}

// Azure data lake store write settings.
type AzureDataLakeStoreWriteSettingsOutput struct{ *pulumi.OutputState }

func (AzureDataLakeStoreWriteSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeStoreWriteSettings)(nil)).Elem()
}

func (o AzureDataLakeStoreWriteSettingsOutput) ToAzureDataLakeStoreWriteSettingsOutput() AzureDataLakeStoreWriteSettingsOutput {
	return o
}

func (o AzureDataLakeStoreWriteSettingsOutput) ToAzureDataLakeStoreWriteSettingsOutputWithContext(ctx context.Context) AzureDataLakeStoreWriteSettingsOutput {
	return o
}

func (o AzureDataLakeStoreWriteSettingsOutput) ToAzureDataLakeStoreWriteSettingsPtrOutput() AzureDataLakeStoreWriteSettingsPtrOutput {
	return o.ToAzureDataLakeStoreWriteSettingsPtrOutputWithContext(context.Background())
}

func (o AzureDataLakeStoreWriteSettingsOutput) ToAzureDataLakeStoreWriteSettingsPtrOutputWithContext(ctx context.Context) AzureDataLakeStoreWriteSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureDataLakeStoreWriteSettings) *AzureDataLakeStoreWriteSettings {
		return &v
	}).(AzureDataLakeStoreWriteSettingsPtrOutput)
}

// The type of copy behavior for copy sink.
func (o AzureDataLakeStoreWriteSettingsOutput) CopyBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreWriteSettings) interface{} { return v.CopyBehavior }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureDataLakeStoreWriteSettingsOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreWriteSettings) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Specifies the expiry time of the written files. The time is applied to the UTC time zone in the format of "2018-12-01T05:00:00Z". Default value is NULL. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreWriteSettingsOutput) ExpiryDateTime() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreWriteSettings) interface{} { return v.ExpiryDateTime }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureDataLakeStoreWriteSettingsOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreWriteSettings) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
func (o AzureDataLakeStoreWriteSettingsOutput) Metadata() MetadataItemArrayOutput {
	return o.ApplyT(func(v AzureDataLakeStoreWriteSettings) []MetadataItem { return v.Metadata }).(MetadataItemArrayOutput)
}

// The write setting type.
// Expected value is 'AzureDataLakeStoreWriteSettings'.
func (o AzureDataLakeStoreWriteSettingsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeStoreWriteSettings) string { return v.Type }).(pulumi.StringOutput)
}

type AzureDataLakeStoreWriteSettingsPtrOutput struct{ *pulumi.OutputState }

func (AzureDataLakeStoreWriteSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureDataLakeStoreWriteSettings)(nil)).Elem()
}

func (o AzureDataLakeStoreWriteSettingsPtrOutput) ToAzureDataLakeStoreWriteSettingsPtrOutput() AzureDataLakeStoreWriteSettingsPtrOutput {
	return o
}

func (o AzureDataLakeStoreWriteSettingsPtrOutput) ToAzureDataLakeStoreWriteSettingsPtrOutputWithContext(ctx context.Context) AzureDataLakeStoreWriteSettingsPtrOutput {
	return o
}

func (o AzureDataLakeStoreWriteSettingsPtrOutput) Elem() AzureDataLakeStoreWriteSettingsOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreWriteSettings) AzureDataLakeStoreWriteSettings {
		if v != nil {
			return *v
		}
		var ret AzureDataLakeStoreWriteSettings
		return ret
	}).(AzureDataLakeStoreWriteSettingsOutput)
}

// The type of copy behavior for copy sink.
func (o AzureDataLakeStoreWriteSettingsPtrOutput) CopyBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreWriteSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.CopyBehavior
	}).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureDataLakeStoreWriteSettingsPtrOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreWriteSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableMetricsCollection
	}).(pulumi.AnyOutput)
}

// Specifies the expiry time of the written files. The time is applied to the UTC time zone in the format of "2018-12-01T05:00:00Z". Default value is NULL. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreWriteSettingsPtrOutput) ExpiryDateTime() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreWriteSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.ExpiryDateTime
	}).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureDataLakeStoreWriteSettingsPtrOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreWriteSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentConnections
	}).(pulumi.AnyOutput)
}

// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
func (o AzureDataLakeStoreWriteSettingsPtrOutput) Metadata() MetadataItemArrayOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreWriteSettings) []MetadataItem {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(MetadataItemArrayOutput)
}

// The write setting type.
// Expected value is 'AzureDataLakeStoreWriteSettings'.
func (o AzureDataLakeStoreWriteSettingsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreWriteSettings) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Azure data lake store write settings.
type AzureDataLakeStoreWriteSettingsResponse struct {
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies the expiry time of the written files. The time is applied to the UTC time zone in the format of "2018-12-01T05:00:00Z". Default value is NULL. Type: string (or Expression with resultType string).
	ExpiryDateTime interface{} `pulumi:"expiryDateTime"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
	Metadata []MetadataItemResponse `pulumi:"metadata"`
	// The write setting type.
	// Expected value is 'AzureDataLakeStoreWriteSettings'.
	Type string `pulumi:"type"`
}

// Azure data lake store write settings.
type AzureDataLakeStoreWriteSettingsResponseOutput struct{ *pulumi.OutputState }

func (AzureDataLakeStoreWriteSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeStoreWriteSettingsResponse)(nil)).Elem()
}

func (o AzureDataLakeStoreWriteSettingsResponseOutput) ToAzureDataLakeStoreWriteSettingsResponseOutput() AzureDataLakeStoreWriteSettingsResponseOutput {
	return o
}

func (o AzureDataLakeStoreWriteSettingsResponseOutput) ToAzureDataLakeStoreWriteSettingsResponseOutputWithContext(ctx context.Context) AzureDataLakeStoreWriteSettingsResponseOutput {
	return o
}

// The type of copy behavior for copy sink.
func (o AzureDataLakeStoreWriteSettingsResponseOutput) CopyBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreWriteSettingsResponse) interface{} { return v.CopyBehavior }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureDataLakeStoreWriteSettingsResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreWriteSettingsResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Specifies the expiry time of the written files. The time is applied to the UTC time zone in the format of "2018-12-01T05:00:00Z". Default value is NULL. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreWriteSettingsResponseOutput) ExpiryDateTime() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreWriteSettingsResponse) interface{} { return v.ExpiryDateTime }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureDataLakeStoreWriteSettingsResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeStoreWriteSettingsResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
func (o AzureDataLakeStoreWriteSettingsResponseOutput) Metadata() MetadataItemResponseArrayOutput {
	return o.ApplyT(func(v AzureDataLakeStoreWriteSettingsResponse) []MetadataItemResponse { return v.Metadata }).(MetadataItemResponseArrayOutput)
}

// The write setting type.
// Expected value is 'AzureDataLakeStoreWriteSettings'.
func (o AzureDataLakeStoreWriteSettingsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeStoreWriteSettingsResponse) string { return v.Type }).(pulumi.StringOutput)
}

type AzureDataLakeStoreWriteSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureDataLakeStoreWriteSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureDataLakeStoreWriteSettingsResponse)(nil)).Elem()
}

func (o AzureDataLakeStoreWriteSettingsResponsePtrOutput) ToAzureDataLakeStoreWriteSettingsResponsePtrOutput() AzureDataLakeStoreWriteSettingsResponsePtrOutput {
	return o
}

func (o AzureDataLakeStoreWriteSettingsResponsePtrOutput) ToAzureDataLakeStoreWriteSettingsResponsePtrOutputWithContext(ctx context.Context) AzureDataLakeStoreWriteSettingsResponsePtrOutput {
	return o
}

func (o AzureDataLakeStoreWriteSettingsResponsePtrOutput) Elem() AzureDataLakeStoreWriteSettingsResponseOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreWriteSettingsResponse) AzureDataLakeStoreWriteSettingsResponse {
		if v != nil {
			return *v
		}
		var ret AzureDataLakeStoreWriteSettingsResponse
		return ret
	}).(AzureDataLakeStoreWriteSettingsResponseOutput)
}

// The type of copy behavior for copy sink.
func (o AzureDataLakeStoreWriteSettingsResponsePtrOutput) CopyBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreWriteSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.CopyBehavior
	}).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureDataLakeStoreWriteSettingsResponsePtrOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreWriteSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableMetricsCollection
	}).(pulumi.AnyOutput)
}

// Specifies the expiry time of the written files. The time is applied to the UTC time zone in the format of "2018-12-01T05:00:00Z". Default value is NULL. Type: string (or Expression with resultType string).
func (o AzureDataLakeStoreWriteSettingsResponsePtrOutput) ExpiryDateTime() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreWriteSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.ExpiryDateTime
	}).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureDataLakeStoreWriteSettingsResponsePtrOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreWriteSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentConnections
	}).(pulumi.AnyOutput)
}

// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
func (o AzureDataLakeStoreWriteSettingsResponsePtrOutput) Metadata() MetadataItemResponseArrayOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreWriteSettingsResponse) []MetadataItemResponse {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(MetadataItemResponseArrayOutput)
}

// The write setting type.
// Expected value is 'AzureDataLakeStoreWriteSettings'.
func (o AzureDataLakeStoreWriteSettingsResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreWriteSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Azure Databricks Delta Lake dataset.
type AzureDatabricksDeltaLakeDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The database name of delta table. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The name of delta table. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'AzureDatabricksDeltaLakeDataset'.
	Type string `pulumi:"type"`
}

// AzureDatabricksDeltaLakeDatasetInput is an input type that accepts AzureDatabricksDeltaLakeDatasetArgs and AzureDatabricksDeltaLakeDatasetOutput values.
// You can construct a concrete instance of `AzureDatabricksDeltaLakeDatasetInput` via:
//
//	AzureDatabricksDeltaLakeDatasetArgs{...}
type AzureDatabricksDeltaLakeDatasetInput interface {
	pulumi.Input

	ToAzureDatabricksDeltaLakeDatasetOutput() AzureDatabricksDeltaLakeDatasetOutput
	ToAzureDatabricksDeltaLakeDatasetOutputWithContext(context.Context) AzureDatabricksDeltaLakeDatasetOutput
}

// Azure Databricks Delta Lake dataset.
type AzureDatabricksDeltaLakeDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The database name of delta table. Type: string (or Expression with resultType string).
	Database pulumi.Input `pulumi:"database"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The name of delta table. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'AzureDatabricksDeltaLakeDataset'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureDatabricksDeltaLakeDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDatabricksDeltaLakeDataset)(nil)).Elem()
}

func (i AzureDatabricksDeltaLakeDatasetArgs) ToAzureDatabricksDeltaLakeDatasetOutput() AzureDatabricksDeltaLakeDatasetOutput {
	return i.ToAzureDatabricksDeltaLakeDatasetOutputWithContext(context.Background())
}

func (i AzureDatabricksDeltaLakeDatasetArgs) ToAzureDatabricksDeltaLakeDatasetOutputWithContext(ctx context.Context) AzureDatabricksDeltaLakeDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDatabricksDeltaLakeDatasetOutput)
}

// Azure Databricks Delta Lake dataset.
type AzureDatabricksDeltaLakeDatasetOutput struct{ *pulumi.OutputState }

func (AzureDatabricksDeltaLakeDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDatabricksDeltaLakeDataset)(nil)).Elem()
}

func (o AzureDatabricksDeltaLakeDatasetOutput) ToAzureDatabricksDeltaLakeDatasetOutput() AzureDatabricksDeltaLakeDatasetOutput {
	return o
}

func (o AzureDatabricksDeltaLakeDatasetOutput) ToAzureDatabricksDeltaLakeDatasetOutputWithContext(ctx context.Context) AzureDatabricksDeltaLakeDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureDatabricksDeltaLakeDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The database name of delta table. Type: string (or Expression with resultType string).
func (o AzureDatabricksDeltaLakeDatasetOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeDataset) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Dataset description.
func (o AzureDatabricksDeltaLakeDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureDatabricksDeltaLakeDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o AzureDatabricksDeltaLakeDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o AzureDatabricksDeltaLakeDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureDatabricksDeltaLakeDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureDatabricksDeltaLakeDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The name of delta table. Type: string (or Expression with resultType string).
func (o AzureDatabricksDeltaLakeDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'AzureDatabricksDeltaLakeDataset'.
func (o AzureDatabricksDeltaLakeDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Databricks Delta Lake dataset.
type AzureDatabricksDeltaLakeDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The database name of delta table. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The name of delta table. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'AzureDatabricksDeltaLakeDataset'.
	Type string `pulumi:"type"`
}

// Azure Databricks Delta Lake dataset.
type AzureDatabricksDeltaLakeDatasetResponseOutput struct{ *pulumi.OutputState }

func (AzureDatabricksDeltaLakeDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDatabricksDeltaLakeDatasetResponse)(nil)).Elem()
}

func (o AzureDatabricksDeltaLakeDatasetResponseOutput) ToAzureDatabricksDeltaLakeDatasetResponseOutput() AzureDatabricksDeltaLakeDatasetResponseOutput {
	return o
}

func (o AzureDatabricksDeltaLakeDatasetResponseOutput) ToAzureDatabricksDeltaLakeDatasetResponseOutputWithContext(ctx context.Context) AzureDatabricksDeltaLakeDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureDatabricksDeltaLakeDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The database name of delta table. Type: string (or Expression with resultType string).
func (o AzureDatabricksDeltaLakeDatasetResponseOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeDatasetResponse) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Dataset description.
func (o AzureDatabricksDeltaLakeDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureDatabricksDeltaLakeDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o AzureDatabricksDeltaLakeDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeDatasetResponse) LinkedServiceReferenceResponse {
		return v.LinkedServiceName
	}).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o AzureDatabricksDeltaLakeDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureDatabricksDeltaLakeDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureDatabricksDeltaLakeDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The name of delta table. Type: string (or Expression with resultType string).
func (o AzureDatabricksDeltaLakeDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'AzureDatabricksDeltaLakeDataset'.
func (o AzureDatabricksDeltaLakeDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Databricks Delta Lake export command settings.
type AzureDatabricksDeltaLakeExportCommand struct {
	// Specify the date format for the csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
	DateFormat interface{} `pulumi:"dateFormat"`
	// Specify the timestamp format for the csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
	TimestampFormat interface{} `pulumi:"timestampFormat"`
	// The export setting type.
	// Expected value is 'AzureDatabricksDeltaLakeExportCommand'.
	Type string `pulumi:"type"`
}

// AzureDatabricksDeltaLakeExportCommandInput is an input type that accepts AzureDatabricksDeltaLakeExportCommandArgs and AzureDatabricksDeltaLakeExportCommandOutput values.
// You can construct a concrete instance of `AzureDatabricksDeltaLakeExportCommandInput` via:
//
//	AzureDatabricksDeltaLakeExportCommandArgs{...}
type AzureDatabricksDeltaLakeExportCommandInput interface {
	pulumi.Input

	ToAzureDatabricksDeltaLakeExportCommandOutput() AzureDatabricksDeltaLakeExportCommandOutput
	ToAzureDatabricksDeltaLakeExportCommandOutputWithContext(context.Context) AzureDatabricksDeltaLakeExportCommandOutput
}

// Azure Databricks Delta Lake export command settings.
type AzureDatabricksDeltaLakeExportCommandArgs struct {
	// Specify the date format for the csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
	DateFormat pulumi.Input `pulumi:"dateFormat"`
	// Specify the timestamp format for the csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
	TimestampFormat pulumi.Input `pulumi:"timestampFormat"`
	// The export setting type.
	// Expected value is 'AzureDatabricksDeltaLakeExportCommand'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureDatabricksDeltaLakeExportCommandArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDatabricksDeltaLakeExportCommand)(nil)).Elem()
}

func (i AzureDatabricksDeltaLakeExportCommandArgs) ToAzureDatabricksDeltaLakeExportCommandOutput() AzureDatabricksDeltaLakeExportCommandOutput {
	return i.ToAzureDatabricksDeltaLakeExportCommandOutputWithContext(context.Background())
}

func (i AzureDatabricksDeltaLakeExportCommandArgs) ToAzureDatabricksDeltaLakeExportCommandOutputWithContext(ctx context.Context) AzureDatabricksDeltaLakeExportCommandOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDatabricksDeltaLakeExportCommandOutput)
}

func (i AzureDatabricksDeltaLakeExportCommandArgs) ToAzureDatabricksDeltaLakeExportCommandPtrOutput() AzureDatabricksDeltaLakeExportCommandPtrOutput {
	return i.ToAzureDatabricksDeltaLakeExportCommandPtrOutputWithContext(context.Background())
}

func (i AzureDatabricksDeltaLakeExportCommandArgs) ToAzureDatabricksDeltaLakeExportCommandPtrOutputWithContext(ctx context.Context) AzureDatabricksDeltaLakeExportCommandPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDatabricksDeltaLakeExportCommandOutput).ToAzureDatabricksDeltaLakeExportCommandPtrOutputWithContext(ctx)
}

// AzureDatabricksDeltaLakeExportCommandPtrInput is an input type that accepts AzureDatabricksDeltaLakeExportCommandArgs, AzureDatabricksDeltaLakeExportCommandPtr and AzureDatabricksDeltaLakeExportCommandPtrOutput values.
// You can construct a concrete instance of `AzureDatabricksDeltaLakeExportCommandPtrInput` via:
//
//	        AzureDatabricksDeltaLakeExportCommandArgs{...}
//
//	or:
//
//	        nil
type AzureDatabricksDeltaLakeExportCommandPtrInput interface {
	pulumi.Input

	ToAzureDatabricksDeltaLakeExportCommandPtrOutput() AzureDatabricksDeltaLakeExportCommandPtrOutput
	ToAzureDatabricksDeltaLakeExportCommandPtrOutputWithContext(context.Context) AzureDatabricksDeltaLakeExportCommandPtrOutput
}

type azureDatabricksDeltaLakeExportCommandPtrType AzureDatabricksDeltaLakeExportCommandArgs

func AzureDatabricksDeltaLakeExportCommandPtr(v *AzureDatabricksDeltaLakeExportCommandArgs) AzureDatabricksDeltaLakeExportCommandPtrInput {
	return (*azureDatabricksDeltaLakeExportCommandPtrType)(v)
}

func (*azureDatabricksDeltaLakeExportCommandPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureDatabricksDeltaLakeExportCommand)(nil)).Elem()
}

func (i *azureDatabricksDeltaLakeExportCommandPtrType) ToAzureDatabricksDeltaLakeExportCommandPtrOutput() AzureDatabricksDeltaLakeExportCommandPtrOutput {
	return i.ToAzureDatabricksDeltaLakeExportCommandPtrOutputWithContext(context.Background())
}

func (i *azureDatabricksDeltaLakeExportCommandPtrType) ToAzureDatabricksDeltaLakeExportCommandPtrOutputWithContext(ctx context.Context) AzureDatabricksDeltaLakeExportCommandPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDatabricksDeltaLakeExportCommandPtrOutput)
}

// Azure Databricks Delta Lake export command settings.
type AzureDatabricksDeltaLakeExportCommandOutput struct{ *pulumi.OutputState }

func (AzureDatabricksDeltaLakeExportCommandOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDatabricksDeltaLakeExportCommand)(nil)).Elem()
}

func (o AzureDatabricksDeltaLakeExportCommandOutput) ToAzureDatabricksDeltaLakeExportCommandOutput() AzureDatabricksDeltaLakeExportCommandOutput {
	return o
}

func (o AzureDatabricksDeltaLakeExportCommandOutput) ToAzureDatabricksDeltaLakeExportCommandOutputWithContext(ctx context.Context) AzureDatabricksDeltaLakeExportCommandOutput {
	return o
}

func (o AzureDatabricksDeltaLakeExportCommandOutput) ToAzureDatabricksDeltaLakeExportCommandPtrOutput() AzureDatabricksDeltaLakeExportCommandPtrOutput {
	return o.ToAzureDatabricksDeltaLakeExportCommandPtrOutputWithContext(context.Background())
}

func (o AzureDatabricksDeltaLakeExportCommandOutput) ToAzureDatabricksDeltaLakeExportCommandPtrOutputWithContext(ctx context.Context) AzureDatabricksDeltaLakeExportCommandPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureDatabricksDeltaLakeExportCommand) *AzureDatabricksDeltaLakeExportCommand {
		return &v
	}).(AzureDatabricksDeltaLakeExportCommandPtrOutput)
}

// Specify the date format for the csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
func (o AzureDatabricksDeltaLakeExportCommandOutput) DateFormat() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeExportCommand) interface{} { return v.DateFormat }).(pulumi.AnyOutput)
}

// Specify the timestamp format for the csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
func (o AzureDatabricksDeltaLakeExportCommandOutput) TimestampFormat() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeExportCommand) interface{} { return v.TimestampFormat }).(pulumi.AnyOutput)
}

// The export setting type.
// Expected value is 'AzureDatabricksDeltaLakeExportCommand'.
func (o AzureDatabricksDeltaLakeExportCommandOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeExportCommand) string { return v.Type }).(pulumi.StringOutput)
}

type AzureDatabricksDeltaLakeExportCommandPtrOutput struct{ *pulumi.OutputState }

func (AzureDatabricksDeltaLakeExportCommandPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureDatabricksDeltaLakeExportCommand)(nil)).Elem()
}

func (o AzureDatabricksDeltaLakeExportCommandPtrOutput) ToAzureDatabricksDeltaLakeExportCommandPtrOutput() AzureDatabricksDeltaLakeExportCommandPtrOutput {
	return o
}

func (o AzureDatabricksDeltaLakeExportCommandPtrOutput) ToAzureDatabricksDeltaLakeExportCommandPtrOutputWithContext(ctx context.Context) AzureDatabricksDeltaLakeExportCommandPtrOutput {
	return o
}

func (o AzureDatabricksDeltaLakeExportCommandPtrOutput) Elem() AzureDatabricksDeltaLakeExportCommandOutput {
	return o.ApplyT(func(v *AzureDatabricksDeltaLakeExportCommand) AzureDatabricksDeltaLakeExportCommand {
		if v != nil {
			return *v
		}
		var ret AzureDatabricksDeltaLakeExportCommand
		return ret
	}).(AzureDatabricksDeltaLakeExportCommandOutput)
}

// Specify the date format for the csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
func (o AzureDatabricksDeltaLakeExportCommandPtrOutput) DateFormat() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureDatabricksDeltaLakeExportCommand) interface{} {
		if v == nil {
			return nil
		}
		return v.DateFormat
	}).(pulumi.AnyOutput)
}

// Specify the timestamp format for the csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
func (o AzureDatabricksDeltaLakeExportCommandPtrOutput) TimestampFormat() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureDatabricksDeltaLakeExportCommand) interface{} {
		if v == nil {
			return nil
		}
		return v.TimestampFormat
	}).(pulumi.AnyOutput)
}

// The export setting type.
// Expected value is 'AzureDatabricksDeltaLakeExportCommand'.
func (o AzureDatabricksDeltaLakeExportCommandPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDatabricksDeltaLakeExportCommand) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Azure Databricks Delta Lake export command settings.
type AzureDatabricksDeltaLakeExportCommandResponse struct {
	// Specify the date format for the csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
	DateFormat interface{} `pulumi:"dateFormat"`
	// Specify the timestamp format for the csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
	TimestampFormat interface{} `pulumi:"timestampFormat"`
	// The export setting type.
	// Expected value is 'AzureDatabricksDeltaLakeExportCommand'.
	Type string `pulumi:"type"`
}

// Azure Databricks Delta Lake export command settings.
type AzureDatabricksDeltaLakeExportCommandResponseOutput struct{ *pulumi.OutputState }

func (AzureDatabricksDeltaLakeExportCommandResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDatabricksDeltaLakeExportCommandResponse)(nil)).Elem()
}

func (o AzureDatabricksDeltaLakeExportCommandResponseOutput) ToAzureDatabricksDeltaLakeExportCommandResponseOutput() AzureDatabricksDeltaLakeExportCommandResponseOutput {
	return o
}

func (o AzureDatabricksDeltaLakeExportCommandResponseOutput) ToAzureDatabricksDeltaLakeExportCommandResponseOutputWithContext(ctx context.Context) AzureDatabricksDeltaLakeExportCommandResponseOutput {
	return o
}

// Specify the date format for the csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
func (o AzureDatabricksDeltaLakeExportCommandResponseOutput) DateFormat() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeExportCommandResponse) interface{} { return v.DateFormat }).(pulumi.AnyOutput)
}

// Specify the timestamp format for the csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
func (o AzureDatabricksDeltaLakeExportCommandResponseOutput) TimestampFormat() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeExportCommandResponse) interface{} { return v.TimestampFormat }).(pulumi.AnyOutput)
}

// The export setting type.
// Expected value is 'AzureDatabricksDeltaLakeExportCommand'.
func (o AzureDatabricksDeltaLakeExportCommandResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeExportCommandResponse) string { return v.Type }).(pulumi.StringOutput)
}

type AzureDatabricksDeltaLakeExportCommandResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureDatabricksDeltaLakeExportCommandResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureDatabricksDeltaLakeExportCommandResponse)(nil)).Elem()
}

func (o AzureDatabricksDeltaLakeExportCommandResponsePtrOutput) ToAzureDatabricksDeltaLakeExportCommandResponsePtrOutput() AzureDatabricksDeltaLakeExportCommandResponsePtrOutput {
	return o
}

func (o AzureDatabricksDeltaLakeExportCommandResponsePtrOutput) ToAzureDatabricksDeltaLakeExportCommandResponsePtrOutputWithContext(ctx context.Context) AzureDatabricksDeltaLakeExportCommandResponsePtrOutput {
	return o
}

func (o AzureDatabricksDeltaLakeExportCommandResponsePtrOutput) Elem() AzureDatabricksDeltaLakeExportCommandResponseOutput {
	return o.ApplyT(func(v *AzureDatabricksDeltaLakeExportCommandResponse) AzureDatabricksDeltaLakeExportCommandResponse {
		if v != nil {
			return *v
		}
		var ret AzureDatabricksDeltaLakeExportCommandResponse
		return ret
	}).(AzureDatabricksDeltaLakeExportCommandResponseOutput)
}

// Specify the date format for the csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
func (o AzureDatabricksDeltaLakeExportCommandResponsePtrOutput) DateFormat() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureDatabricksDeltaLakeExportCommandResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.DateFormat
	}).(pulumi.AnyOutput)
}

// Specify the timestamp format for the csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
func (o AzureDatabricksDeltaLakeExportCommandResponsePtrOutput) TimestampFormat() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureDatabricksDeltaLakeExportCommandResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.TimestampFormat
	}).(pulumi.AnyOutput)
}

// The export setting type.
// Expected value is 'AzureDatabricksDeltaLakeExportCommand'.
func (o AzureDatabricksDeltaLakeExportCommandResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDatabricksDeltaLakeExportCommandResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Azure Databricks Delta Lake import command settings.
type AzureDatabricksDeltaLakeImportCommand struct {
	// Specify the date format for csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
	DateFormat interface{} `pulumi:"dateFormat"`
	// Specify the timestamp format for csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
	TimestampFormat interface{} `pulumi:"timestampFormat"`
	// The import setting type.
	// Expected value is 'AzureDatabricksDeltaLakeImportCommand'.
	Type string `pulumi:"type"`
}

// AzureDatabricksDeltaLakeImportCommandInput is an input type that accepts AzureDatabricksDeltaLakeImportCommandArgs and AzureDatabricksDeltaLakeImportCommandOutput values.
// You can construct a concrete instance of `AzureDatabricksDeltaLakeImportCommandInput` via:
//
//	AzureDatabricksDeltaLakeImportCommandArgs{...}
type AzureDatabricksDeltaLakeImportCommandInput interface {
	pulumi.Input

	ToAzureDatabricksDeltaLakeImportCommandOutput() AzureDatabricksDeltaLakeImportCommandOutput
	ToAzureDatabricksDeltaLakeImportCommandOutputWithContext(context.Context) AzureDatabricksDeltaLakeImportCommandOutput
}

// Azure Databricks Delta Lake import command settings.
type AzureDatabricksDeltaLakeImportCommandArgs struct {
	// Specify the date format for csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
	DateFormat pulumi.Input `pulumi:"dateFormat"`
	// Specify the timestamp format for csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
	TimestampFormat pulumi.Input `pulumi:"timestampFormat"`
	// The import setting type.
	// Expected value is 'AzureDatabricksDeltaLakeImportCommand'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureDatabricksDeltaLakeImportCommandArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDatabricksDeltaLakeImportCommand)(nil)).Elem()
}

func (i AzureDatabricksDeltaLakeImportCommandArgs) ToAzureDatabricksDeltaLakeImportCommandOutput() AzureDatabricksDeltaLakeImportCommandOutput {
	return i.ToAzureDatabricksDeltaLakeImportCommandOutputWithContext(context.Background())
}

func (i AzureDatabricksDeltaLakeImportCommandArgs) ToAzureDatabricksDeltaLakeImportCommandOutputWithContext(ctx context.Context) AzureDatabricksDeltaLakeImportCommandOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDatabricksDeltaLakeImportCommandOutput)
}

func (i AzureDatabricksDeltaLakeImportCommandArgs) ToAzureDatabricksDeltaLakeImportCommandPtrOutput() AzureDatabricksDeltaLakeImportCommandPtrOutput {
	return i.ToAzureDatabricksDeltaLakeImportCommandPtrOutputWithContext(context.Background())
}

func (i AzureDatabricksDeltaLakeImportCommandArgs) ToAzureDatabricksDeltaLakeImportCommandPtrOutputWithContext(ctx context.Context) AzureDatabricksDeltaLakeImportCommandPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDatabricksDeltaLakeImportCommandOutput).ToAzureDatabricksDeltaLakeImportCommandPtrOutputWithContext(ctx)
}

// AzureDatabricksDeltaLakeImportCommandPtrInput is an input type that accepts AzureDatabricksDeltaLakeImportCommandArgs, AzureDatabricksDeltaLakeImportCommandPtr and AzureDatabricksDeltaLakeImportCommandPtrOutput values.
// You can construct a concrete instance of `AzureDatabricksDeltaLakeImportCommandPtrInput` via:
//
//	        AzureDatabricksDeltaLakeImportCommandArgs{...}
//
//	or:
//
//	        nil
type AzureDatabricksDeltaLakeImportCommandPtrInput interface {
	pulumi.Input

	ToAzureDatabricksDeltaLakeImportCommandPtrOutput() AzureDatabricksDeltaLakeImportCommandPtrOutput
	ToAzureDatabricksDeltaLakeImportCommandPtrOutputWithContext(context.Context) AzureDatabricksDeltaLakeImportCommandPtrOutput
}

type azureDatabricksDeltaLakeImportCommandPtrType AzureDatabricksDeltaLakeImportCommandArgs

func AzureDatabricksDeltaLakeImportCommandPtr(v *AzureDatabricksDeltaLakeImportCommandArgs) AzureDatabricksDeltaLakeImportCommandPtrInput {
	return (*azureDatabricksDeltaLakeImportCommandPtrType)(v)
}

func (*azureDatabricksDeltaLakeImportCommandPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureDatabricksDeltaLakeImportCommand)(nil)).Elem()
}

func (i *azureDatabricksDeltaLakeImportCommandPtrType) ToAzureDatabricksDeltaLakeImportCommandPtrOutput() AzureDatabricksDeltaLakeImportCommandPtrOutput {
	return i.ToAzureDatabricksDeltaLakeImportCommandPtrOutputWithContext(context.Background())
}

func (i *azureDatabricksDeltaLakeImportCommandPtrType) ToAzureDatabricksDeltaLakeImportCommandPtrOutputWithContext(ctx context.Context) AzureDatabricksDeltaLakeImportCommandPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDatabricksDeltaLakeImportCommandPtrOutput)
}

// Azure Databricks Delta Lake import command settings.
type AzureDatabricksDeltaLakeImportCommandOutput struct{ *pulumi.OutputState }

func (AzureDatabricksDeltaLakeImportCommandOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDatabricksDeltaLakeImportCommand)(nil)).Elem()
}

func (o AzureDatabricksDeltaLakeImportCommandOutput) ToAzureDatabricksDeltaLakeImportCommandOutput() AzureDatabricksDeltaLakeImportCommandOutput {
	return o
}

func (o AzureDatabricksDeltaLakeImportCommandOutput) ToAzureDatabricksDeltaLakeImportCommandOutputWithContext(ctx context.Context) AzureDatabricksDeltaLakeImportCommandOutput {
	return o
}

func (o AzureDatabricksDeltaLakeImportCommandOutput) ToAzureDatabricksDeltaLakeImportCommandPtrOutput() AzureDatabricksDeltaLakeImportCommandPtrOutput {
	return o.ToAzureDatabricksDeltaLakeImportCommandPtrOutputWithContext(context.Background())
}

func (o AzureDatabricksDeltaLakeImportCommandOutput) ToAzureDatabricksDeltaLakeImportCommandPtrOutputWithContext(ctx context.Context) AzureDatabricksDeltaLakeImportCommandPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureDatabricksDeltaLakeImportCommand) *AzureDatabricksDeltaLakeImportCommand {
		return &v
	}).(AzureDatabricksDeltaLakeImportCommandPtrOutput)
}

// Specify the date format for csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
func (o AzureDatabricksDeltaLakeImportCommandOutput) DateFormat() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeImportCommand) interface{} { return v.DateFormat }).(pulumi.AnyOutput)
}

// Specify the timestamp format for csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
func (o AzureDatabricksDeltaLakeImportCommandOutput) TimestampFormat() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeImportCommand) interface{} { return v.TimestampFormat }).(pulumi.AnyOutput)
}

// The import setting type.
// Expected value is 'AzureDatabricksDeltaLakeImportCommand'.
func (o AzureDatabricksDeltaLakeImportCommandOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeImportCommand) string { return v.Type }).(pulumi.StringOutput)
}

type AzureDatabricksDeltaLakeImportCommandPtrOutput struct{ *pulumi.OutputState }

func (AzureDatabricksDeltaLakeImportCommandPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureDatabricksDeltaLakeImportCommand)(nil)).Elem()
}

func (o AzureDatabricksDeltaLakeImportCommandPtrOutput) ToAzureDatabricksDeltaLakeImportCommandPtrOutput() AzureDatabricksDeltaLakeImportCommandPtrOutput {
	return o
}

func (o AzureDatabricksDeltaLakeImportCommandPtrOutput) ToAzureDatabricksDeltaLakeImportCommandPtrOutputWithContext(ctx context.Context) AzureDatabricksDeltaLakeImportCommandPtrOutput {
	return o
}

func (o AzureDatabricksDeltaLakeImportCommandPtrOutput) Elem() AzureDatabricksDeltaLakeImportCommandOutput {
	return o.ApplyT(func(v *AzureDatabricksDeltaLakeImportCommand) AzureDatabricksDeltaLakeImportCommand {
		if v != nil {
			return *v
		}
		var ret AzureDatabricksDeltaLakeImportCommand
		return ret
	}).(AzureDatabricksDeltaLakeImportCommandOutput)
}

// Specify the date format for csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
func (o AzureDatabricksDeltaLakeImportCommandPtrOutput) DateFormat() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureDatabricksDeltaLakeImportCommand) interface{} {
		if v == nil {
			return nil
		}
		return v.DateFormat
	}).(pulumi.AnyOutput)
}

// Specify the timestamp format for csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
func (o AzureDatabricksDeltaLakeImportCommandPtrOutput) TimestampFormat() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureDatabricksDeltaLakeImportCommand) interface{} {
		if v == nil {
			return nil
		}
		return v.TimestampFormat
	}).(pulumi.AnyOutput)
}

// The import setting type.
// Expected value is 'AzureDatabricksDeltaLakeImportCommand'.
func (o AzureDatabricksDeltaLakeImportCommandPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDatabricksDeltaLakeImportCommand) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Azure Databricks Delta Lake import command settings.
type AzureDatabricksDeltaLakeImportCommandResponse struct {
	// Specify the date format for csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
	DateFormat interface{} `pulumi:"dateFormat"`
	// Specify the timestamp format for csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
	TimestampFormat interface{} `pulumi:"timestampFormat"`
	// The import setting type.
	// Expected value is 'AzureDatabricksDeltaLakeImportCommand'.
	Type string `pulumi:"type"`
}

// Azure Databricks Delta Lake import command settings.
type AzureDatabricksDeltaLakeImportCommandResponseOutput struct{ *pulumi.OutputState }

func (AzureDatabricksDeltaLakeImportCommandResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDatabricksDeltaLakeImportCommandResponse)(nil)).Elem()
}

func (o AzureDatabricksDeltaLakeImportCommandResponseOutput) ToAzureDatabricksDeltaLakeImportCommandResponseOutput() AzureDatabricksDeltaLakeImportCommandResponseOutput {
	return o
}

func (o AzureDatabricksDeltaLakeImportCommandResponseOutput) ToAzureDatabricksDeltaLakeImportCommandResponseOutputWithContext(ctx context.Context) AzureDatabricksDeltaLakeImportCommandResponseOutput {
	return o
}

// Specify the date format for csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
func (o AzureDatabricksDeltaLakeImportCommandResponseOutput) DateFormat() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeImportCommandResponse) interface{} { return v.DateFormat }).(pulumi.AnyOutput)
}

// Specify the timestamp format for csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
func (o AzureDatabricksDeltaLakeImportCommandResponseOutput) TimestampFormat() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeImportCommandResponse) interface{} { return v.TimestampFormat }).(pulumi.AnyOutput)
}

// The import setting type.
// Expected value is 'AzureDatabricksDeltaLakeImportCommand'.
func (o AzureDatabricksDeltaLakeImportCommandResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeImportCommandResponse) string { return v.Type }).(pulumi.StringOutput)
}

type AzureDatabricksDeltaLakeImportCommandResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureDatabricksDeltaLakeImportCommandResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureDatabricksDeltaLakeImportCommandResponse)(nil)).Elem()
}

func (o AzureDatabricksDeltaLakeImportCommandResponsePtrOutput) ToAzureDatabricksDeltaLakeImportCommandResponsePtrOutput() AzureDatabricksDeltaLakeImportCommandResponsePtrOutput {
	return o
}

func (o AzureDatabricksDeltaLakeImportCommandResponsePtrOutput) ToAzureDatabricksDeltaLakeImportCommandResponsePtrOutputWithContext(ctx context.Context) AzureDatabricksDeltaLakeImportCommandResponsePtrOutput {
	return o
}

func (o AzureDatabricksDeltaLakeImportCommandResponsePtrOutput) Elem() AzureDatabricksDeltaLakeImportCommandResponseOutput {
	return o.ApplyT(func(v *AzureDatabricksDeltaLakeImportCommandResponse) AzureDatabricksDeltaLakeImportCommandResponse {
		if v != nil {
			return *v
		}
		var ret AzureDatabricksDeltaLakeImportCommandResponse
		return ret
	}).(AzureDatabricksDeltaLakeImportCommandResponseOutput)
}

// Specify the date format for csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
func (o AzureDatabricksDeltaLakeImportCommandResponsePtrOutput) DateFormat() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureDatabricksDeltaLakeImportCommandResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.DateFormat
	}).(pulumi.AnyOutput)
}

// Specify the timestamp format for csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
func (o AzureDatabricksDeltaLakeImportCommandResponsePtrOutput) TimestampFormat() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureDatabricksDeltaLakeImportCommandResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.TimestampFormat
	}).(pulumi.AnyOutput)
}

// The import setting type.
// Expected value is 'AzureDatabricksDeltaLakeImportCommand'.
func (o AzureDatabricksDeltaLakeImportCommandResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDatabricksDeltaLakeImportCommandResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Azure Databricks Delta Lake linked service.
type AzureDatabricksDeltaLakeLinkedService struct {
	// Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/latest/authentication.html. Type: string, SecureString or AzureKeyVaultSecretReference.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The id of an existing interactive cluster that will be used for all runs of this job. Type: string (or Expression with resultType string).
	ClusterId interface{} `pulumi:"clusterId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// <REGION>.azuredatabricks.net, domain name of your Databricks deployment. Type: string (or Expression with resultType string).
	Domain interface{} `pulumi:"domain"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'AzureDatabricksDeltaLake'.
	Type string `pulumi:"type"`
	// Workspace resource id for databricks REST API. Type: string (or Expression with resultType string).
	WorkspaceResourceId interface{} `pulumi:"workspaceResourceId"`
}

// AzureDatabricksDeltaLakeLinkedServiceInput is an input type that accepts AzureDatabricksDeltaLakeLinkedServiceArgs and AzureDatabricksDeltaLakeLinkedServiceOutput values.
// You can construct a concrete instance of `AzureDatabricksDeltaLakeLinkedServiceInput` via:
//
//	AzureDatabricksDeltaLakeLinkedServiceArgs{...}
type AzureDatabricksDeltaLakeLinkedServiceInput interface {
	pulumi.Input

	ToAzureDatabricksDeltaLakeLinkedServiceOutput() AzureDatabricksDeltaLakeLinkedServiceOutput
	ToAzureDatabricksDeltaLakeLinkedServiceOutputWithContext(context.Context) AzureDatabricksDeltaLakeLinkedServiceOutput
}

// Azure Databricks Delta Lake linked service.
type AzureDatabricksDeltaLakeLinkedServiceArgs struct {
	// Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/latest/authentication.html. Type: string, SecureString or AzureKeyVaultSecretReference.
	AccessToken pulumi.Input `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The id of an existing interactive cluster that will be used for all runs of this job. Type: string (or Expression with resultType string).
	ClusterId pulumi.Input `pulumi:"clusterId"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential CredentialReferencePtrInput `pulumi:"credential"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// <REGION>.azuredatabricks.net, domain name of your Databricks deployment. Type: string (or Expression with resultType string).
	Domain pulumi.Input `pulumi:"domain"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'AzureDatabricksDeltaLake'.
	Type pulumi.StringInput `pulumi:"type"`
	// Workspace resource id for databricks REST API. Type: string (or Expression with resultType string).
	WorkspaceResourceId pulumi.Input `pulumi:"workspaceResourceId"`
}

func (AzureDatabricksDeltaLakeLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDatabricksDeltaLakeLinkedService)(nil)).Elem()
}

func (i AzureDatabricksDeltaLakeLinkedServiceArgs) ToAzureDatabricksDeltaLakeLinkedServiceOutput() AzureDatabricksDeltaLakeLinkedServiceOutput {
	return i.ToAzureDatabricksDeltaLakeLinkedServiceOutputWithContext(context.Background())
}

func (i AzureDatabricksDeltaLakeLinkedServiceArgs) ToAzureDatabricksDeltaLakeLinkedServiceOutputWithContext(ctx context.Context) AzureDatabricksDeltaLakeLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDatabricksDeltaLakeLinkedServiceOutput)
}

// Azure Databricks Delta Lake linked service.
type AzureDatabricksDeltaLakeLinkedServiceOutput struct{ *pulumi.OutputState }

func (AzureDatabricksDeltaLakeLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDatabricksDeltaLakeLinkedService)(nil)).Elem()
}

func (o AzureDatabricksDeltaLakeLinkedServiceOutput) ToAzureDatabricksDeltaLakeLinkedServiceOutput() AzureDatabricksDeltaLakeLinkedServiceOutput {
	return o
}

func (o AzureDatabricksDeltaLakeLinkedServiceOutput) ToAzureDatabricksDeltaLakeLinkedServiceOutputWithContext(ctx context.Context) AzureDatabricksDeltaLakeLinkedServiceOutput {
	return o
}

// Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/latest/authentication.html. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureDatabricksDeltaLakeLinkedServiceOutput) AccessToken() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeLinkedService) interface{} { return v.AccessToken }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o AzureDatabricksDeltaLakeLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The id of an existing interactive cluster that will be used for all runs of this job. Type: string (or Expression with resultType string).
func (o AzureDatabricksDeltaLakeLinkedServiceOutput) ClusterId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeLinkedService) interface{} { return v.ClusterId }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureDatabricksDeltaLakeLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The credential reference containing authentication information.
func (o AzureDatabricksDeltaLakeLinkedServiceOutput) Credential() CredentialReferencePtrOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeLinkedService) *CredentialReference { return v.Credential }).(CredentialReferencePtrOutput)
}

// Linked service description.
func (o AzureDatabricksDeltaLakeLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// <REGION>.azuredatabricks.net, domain name of your Databricks deployment. Type: string (or Expression with resultType string).
func (o AzureDatabricksDeltaLakeLinkedServiceOutput) Domain() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeLinkedService) interface{} { return v.Domain }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AzureDatabricksDeltaLakeLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AzureDatabricksDeltaLakeLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
// Expected value is 'AzureDatabricksDeltaLake'.
func (o AzureDatabricksDeltaLakeLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Workspace resource id for databricks REST API. Type: string (or Expression with resultType string).
func (o AzureDatabricksDeltaLakeLinkedServiceOutput) WorkspaceResourceId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeLinkedService) interface{} { return v.WorkspaceResourceId }).(pulumi.AnyOutput)
}

// Azure Databricks Delta Lake linked service.
type AzureDatabricksDeltaLakeLinkedServiceResponse struct {
	// Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/latest/authentication.html. Type: string, SecureString or AzureKeyVaultSecretReference.
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The id of an existing interactive cluster that will be used for all runs of this job. Type: string (or Expression with resultType string).
	ClusterId interface{} `pulumi:"clusterId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// <REGION>.azuredatabricks.net, domain name of your Databricks deployment. Type: string (or Expression with resultType string).
	Domain interface{} `pulumi:"domain"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'AzureDatabricksDeltaLake'.
	Type string `pulumi:"type"`
	// Workspace resource id for databricks REST API. Type: string (or Expression with resultType string).
	WorkspaceResourceId interface{} `pulumi:"workspaceResourceId"`
}

// Azure Databricks Delta Lake linked service.
type AzureDatabricksDeltaLakeLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureDatabricksDeltaLakeLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDatabricksDeltaLakeLinkedServiceResponse)(nil)).Elem()
}

func (o AzureDatabricksDeltaLakeLinkedServiceResponseOutput) ToAzureDatabricksDeltaLakeLinkedServiceResponseOutput() AzureDatabricksDeltaLakeLinkedServiceResponseOutput {
	return o
}

func (o AzureDatabricksDeltaLakeLinkedServiceResponseOutput) ToAzureDatabricksDeltaLakeLinkedServiceResponseOutputWithContext(ctx context.Context) AzureDatabricksDeltaLakeLinkedServiceResponseOutput {
	return o
}

// Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/latest/authentication.html. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureDatabricksDeltaLakeLinkedServiceResponseOutput) AccessToken() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeLinkedServiceResponse) interface{} { return v.AccessToken }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o AzureDatabricksDeltaLakeLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The id of an existing interactive cluster that will be used for all runs of this job. Type: string (or Expression with resultType string).
func (o AzureDatabricksDeltaLakeLinkedServiceResponseOutput) ClusterId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeLinkedServiceResponse) interface{} { return v.ClusterId }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureDatabricksDeltaLakeLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The credential reference containing authentication information.
func (o AzureDatabricksDeltaLakeLinkedServiceResponseOutput) Credential() CredentialReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeLinkedServiceResponse) *CredentialReferenceResponse {
		return v.Credential
	}).(CredentialReferenceResponsePtrOutput)
}

// Linked service description.
func (o AzureDatabricksDeltaLakeLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// <REGION>.azuredatabricks.net, domain name of your Databricks deployment. Type: string (or Expression with resultType string).
func (o AzureDatabricksDeltaLakeLinkedServiceResponseOutput) Domain() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeLinkedServiceResponse) interface{} { return v.Domain }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AzureDatabricksDeltaLakeLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AzureDatabricksDeltaLakeLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
// Expected value is 'AzureDatabricksDeltaLake'.
func (o AzureDatabricksDeltaLakeLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Workspace resource id for databricks REST API. Type: string (or Expression with resultType string).
func (o AzureDatabricksDeltaLakeLinkedServiceResponseOutput) WorkspaceResourceId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeLinkedServiceResponse) interface{} { return v.WorkspaceResourceId }).(pulumi.AnyOutput)
}

// A copy activity Azure Databricks Delta Lake sink.
type AzureDatabricksDeltaLakeSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Azure Databricks Delta Lake import settings.
	ImportSettings *AzureDatabricksDeltaLakeImportCommand `pulumi:"importSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureDatabricksDeltaLakeSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// AzureDatabricksDeltaLakeSinkInput is an input type that accepts AzureDatabricksDeltaLakeSinkArgs and AzureDatabricksDeltaLakeSinkOutput values.
// You can construct a concrete instance of `AzureDatabricksDeltaLakeSinkInput` via:
//
//	AzureDatabricksDeltaLakeSinkArgs{...}
type AzureDatabricksDeltaLakeSinkInput interface {
	pulumi.Input

	ToAzureDatabricksDeltaLakeSinkOutput() AzureDatabricksDeltaLakeSinkOutput
	ToAzureDatabricksDeltaLakeSinkOutputWithContext(context.Context) AzureDatabricksDeltaLakeSinkOutput
}

// A copy activity Azure Databricks Delta Lake sink.
type AzureDatabricksDeltaLakeSinkArgs struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// Azure Databricks Delta Lake import settings.
	ImportSettings AzureDatabricksDeltaLakeImportCommandPtrInput `pulumi:"importSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript pulumi.Input `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount pulumi.Input `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait pulumi.Input `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureDatabricksDeltaLakeSink'.
	Type pulumi.StringInput `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize pulumi.Input `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout pulumi.Input `pulumi:"writeBatchTimeout"`
}

func (AzureDatabricksDeltaLakeSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDatabricksDeltaLakeSink)(nil)).Elem()
}

func (i AzureDatabricksDeltaLakeSinkArgs) ToAzureDatabricksDeltaLakeSinkOutput() AzureDatabricksDeltaLakeSinkOutput {
	return i.ToAzureDatabricksDeltaLakeSinkOutputWithContext(context.Background())
}

func (i AzureDatabricksDeltaLakeSinkArgs) ToAzureDatabricksDeltaLakeSinkOutputWithContext(ctx context.Context) AzureDatabricksDeltaLakeSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDatabricksDeltaLakeSinkOutput)
}

// A copy activity Azure Databricks Delta Lake sink.
type AzureDatabricksDeltaLakeSinkOutput struct{ *pulumi.OutputState }

func (AzureDatabricksDeltaLakeSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDatabricksDeltaLakeSink)(nil)).Elem()
}

func (o AzureDatabricksDeltaLakeSinkOutput) ToAzureDatabricksDeltaLakeSinkOutput() AzureDatabricksDeltaLakeSinkOutput {
	return o
}

func (o AzureDatabricksDeltaLakeSinkOutput) ToAzureDatabricksDeltaLakeSinkOutputWithContext(ctx context.Context) AzureDatabricksDeltaLakeSinkOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureDatabricksDeltaLakeSinkOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeSink) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Azure Databricks Delta Lake import settings.
func (o AzureDatabricksDeltaLakeSinkOutput) ImportSettings() AzureDatabricksDeltaLakeImportCommandPtrOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeSink) *AzureDatabricksDeltaLakeImportCommand { return v.ImportSettings }).(AzureDatabricksDeltaLakeImportCommandPtrOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o AzureDatabricksDeltaLakeSinkOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeSink) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// SQL pre-copy script. Type: string (or Expression with resultType string).
func (o AzureDatabricksDeltaLakeSinkOutput) PreCopyScript() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeSink) interface{} { return v.PreCopyScript }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o AzureDatabricksDeltaLakeSinkOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeSink) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureDatabricksDeltaLakeSinkOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeSink) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'AzureDatabricksDeltaLakeSink'.
func (o AzureDatabricksDeltaLakeSinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeSink) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o AzureDatabricksDeltaLakeSinkOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeSink) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureDatabricksDeltaLakeSinkOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeSink) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity Azure Databricks Delta Lake sink.
type AzureDatabricksDeltaLakeSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Azure Databricks Delta Lake import settings.
	ImportSettings *AzureDatabricksDeltaLakeImportCommandResponse `pulumi:"importSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureDatabricksDeltaLakeSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Azure Databricks Delta Lake sink.
type AzureDatabricksDeltaLakeSinkResponseOutput struct{ *pulumi.OutputState }

func (AzureDatabricksDeltaLakeSinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDatabricksDeltaLakeSinkResponse)(nil)).Elem()
}

func (o AzureDatabricksDeltaLakeSinkResponseOutput) ToAzureDatabricksDeltaLakeSinkResponseOutput() AzureDatabricksDeltaLakeSinkResponseOutput {
	return o
}

func (o AzureDatabricksDeltaLakeSinkResponseOutput) ToAzureDatabricksDeltaLakeSinkResponseOutputWithContext(ctx context.Context) AzureDatabricksDeltaLakeSinkResponseOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureDatabricksDeltaLakeSinkResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeSinkResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Azure Databricks Delta Lake import settings.
func (o AzureDatabricksDeltaLakeSinkResponseOutput) ImportSettings() AzureDatabricksDeltaLakeImportCommandResponsePtrOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeSinkResponse) *AzureDatabricksDeltaLakeImportCommandResponse {
		return v.ImportSettings
	}).(AzureDatabricksDeltaLakeImportCommandResponsePtrOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o AzureDatabricksDeltaLakeSinkResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeSinkResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// SQL pre-copy script. Type: string (or Expression with resultType string).
func (o AzureDatabricksDeltaLakeSinkResponseOutput) PreCopyScript() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeSinkResponse) interface{} { return v.PreCopyScript }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o AzureDatabricksDeltaLakeSinkResponseOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeSinkResponse) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureDatabricksDeltaLakeSinkResponseOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeSinkResponse) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'AzureDatabricksDeltaLakeSink'.
func (o AzureDatabricksDeltaLakeSinkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeSinkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o AzureDatabricksDeltaLakeSinkResponseOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeSinkResponse) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureDatabricksDeltaLakeSinkResponseOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeSinkResponse) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity Azure Databricks Delta Lake source.
type AzureDatabricksDeltaLakeSource struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Azure Databricks Delta Lake export settings.
	ExportSettings *AzureDatabricksDeltaLakeExportCommand `pulumi:"exportSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Azure Databricks Delta Lake Sql query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzureDatabricksDeltaLakeSource'.
	Type string `pulumi:"type"`
}

// AzureDatabricksDeltaLakeSourceInput is an input type that accepts AzureDatabricksDeltaLakeSourceArgs and AzureDatabricksDeltaLakeSourceOutput values.
// You can construct a concrete instance of `AzureDatabricksDeltaLakeSourceInput` via:
//
//	AzureDatabricksDeltaLakeSourceArgs{...}
type AzureDatabricksDeltaLakeSourceInput interface {
	pulumi.Input

	ToAzureDatabricksDeltaLakeSourceOutput() AzureDatabricksDeltaLakeSourceOutput
	ToAzureDatabricksDeltaLakeSourceOutputWithContext(context.Context) AzureDatabricksDeltaLakeSourceOutput
}

// A copy activity Azure Databricks Delta Lake source.
type AzureDatabricksDeltaLakeSourceArgs struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// Azure Databricks Delta Lake export settings.
	ExportSettings AzureDatabricksDeltaLakeExportCommandPtrInput `pulumi:"exportSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Azure Databricks Delta Lake Sql query. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzureDatabricksDeltaLakeSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureDatabricksDeltaLakeSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDatabricksDeltaLakeSource)(nil)).Elem()
}

func (i AzureDatabricksDeltaLakeSourceArgs) ToAzureDatabricksDeltaLakeSourceOutput() AzureDatabricksDeltaLakeSourceOutput {
	return i.ToAzureDatabricksDeltaLakeSourceOutputWithContext(context.Background())
}

func (i AzureDatabricksDeltaLakeSourceArgs) ToAzureDatabricksDeltaLakeSourceOutputWithContext(ctx context.Context) AzureDatabricksDeltaLakeSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDatabricksDeltaLakeSourceOutput)
}

// A copy activity Azure Databricks Delta Lake source.
type AzureDatabricksDeltaLakeSourceOutput struct{ *pulumi.OutputState }

func (AzureDatabricksDeltaLakeSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDatabricksDeltaLakeSource)(nil)).Elem()
}

func (o AzureDatabricksDeltaLakeSourceOutput) ToAzureDatabricksDeltaLakeSourceOutput() AzureDatabricksDeltaLakeSourceOutput {
	return o
}

func (o AzureDatabricksDeltaLakeSourceOutput) ToAzureDatabricksDeltaLakeSourceOutputWithContext(ctx context.Context) AzureDatabricksDeltaLakeSourceOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureDatabricksDeltaLakeSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Azure Databricks Delta Lake export settings.
func (o AzureDatabricksDeltaLakeSourceOutput) ExportSettings() AzureDatabricksDeltaLakeExportCommandPtrOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeSource) *AzureDatabricksDeltaLakeExportCommand { return v.ExportSettings }).(AzureDatabricksDeltaLakeExportCommandPtrOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureDatabricksDeltaLakeSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Azure Databricks Delta Lake Sql query. Type: string (or Expression with resultType string).
func (o AzureDatabricksDeltaLakeSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o AzureDatabricksDeltaLakeSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureDatabricksDeltaLakeSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'AzureDatabricksDeltaLakeSource'.
func (o AzureDatabricksDeltaLakeSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Azure Databricks Delta Lake source.
type AzureDatabricksDeltaLakeSourceResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Azure Databricks Delta Lake export settings.
	ExportSettings *AzureDatabricksDeltaLakeExportCommandResponse `pulumi:"exportSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Azure Databricks Delta Lake Sql query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzureDatabricksDeltaLakeSource'.
	Type string `pulumi:"type"`
}

// A copy activity Azure Databricks Delta Lake source.
type AzureDatabricksDeltaLakeSourceResponseOutput struct{ *pulumi.OutputState }

func (AzureDatabricksDeltaLakeSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDatabricksDeltaLakeSourceResponse)(nil)).Elem()
}

func (o AzureDatabricksDeltaLakeSourceResponseOutput) ToAzureDatabricksDeltaLakeSourceResponseOutput() AzureDatabricksDeltaLakeSourceResponseOutput {
	return o
}

func (o AzureDatabricksDeltaLakeSourceResponseOutput) ToAzureDatabricksDeltaLakeSourceResponseOutputWithContext(ctx context.Context) AzureDatabricksDeltaLakeSourceResponseOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureDatabricksDeltaLakeSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Azure Databricks Delta Lake export settings.
func (o AzureDatabricksDeltaLakeSourceResponseOutput) ExportSettings() AzureDatabricksDeltaLakeExportCommandResponsePtrOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeSourceResponse) *AzureDatabricksDeltaLakeExportCommandResponse {
		return v.ExportSettings
	}).(AzureDatabricksDeltaLakeExportCommandResponsePtrOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureDatabricksDeltaLakeSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Azure Databricks Delta Lake Sql query. Type: string (or Expression with resultType string).
func (o AzureDatabricksDeltaLakeSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o AzureDatabricksDeltaLakeSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureDatabricksDeltaLakeSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'AzureDatabricksDeltaLakeSource'.
func (o AzureDatabricksDeltaLakeSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDatabricksDeltaLakeSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Databricks linked service.
type AzureDatabricksLinkedService struct {
	// Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/latest/authentication.html. Type: string (or Expression with resultType string).
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Required to specify MSI, if using Workspace resource id for databricks REST API. Type: string (or Expression with resultType string).
	Authentication interface{} `pulumi:"authentication"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// <REGION>.azuredatabricks.net, domain name of your Databricks deployment. Type: string (or Expression with resultType string).
	Domain interface{} `pulumi:"domain"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The id of an existing interactive cluster that will be used for all runs of this activity. Type: string (or Expression with resultType string).
	ExistingClusterId interface{} `pulumi:"existingClusterId"`
	// The id of an existing instance pool that will be used for all runs of this activity. Type: string (or Expression with resultType string).
	InstancePoolId interface{} `pulumi:"instancePoolId"`
	// Additional tags for cluster resources. This property is ignored in instance pool configurations.
	NewClusterCustomTags map[string]interface{} `pulumi:"newClusterCustomTags"`
	// The driver node type for the new job cluster. This property is ignored in instance pool configurations. Type: string (or Expression with resultType string).
	NewClusterDriverNodeType interface{} `pulumi:"newClusterDriverNodeType"`
	// Enable the elastic disk on the new cluster. This property is now ignored, and takes the default elastic disk behavior in Databricks (elastic disks are always enabled). Type: boolean (or Expression with resultType boolean).
	NewClusterEnableElasticDisk interface{} `pulumi:"newClusterEnableElasticDisk"`
	// User-defined initialization scripts for the new cluster. Type: array of strings (or Expression with resultType array of strings).
	NewClusterInitScripts interface{} `pulumi:"newClusterInitScripts"`
	// Specify a location to deliver Spark driver, worker, and event logs. Type: string (or Expression with resultType string).
	NewClusterLogDestination interface{} `pulumi:"newClusterLogDestination"`
	// The node type of the new job cluster. This property is required if newClusterVersion is specified and instancePoolId is not specified. If instancePoolId is specified, this property is ignored. Type: string (or Expression with resultType string).
	NewClusterNodeType interface{} `pulumi:"newClusterNodeType"`
	// If not using an existing interactive cluster, this specifies the number of worker nodes to use for the new job cluster or instance pool. For new job clusters, this a string-formatted Int32, like '1' means numOfWorker is 1 or '1:10' means auto-scale from 1 (min) to 10 (max). For instance pools, this is a string-formatted Int32, and can only specify a fixed number of worker nodes, such as '2'. Required if newClusterVersion is specified. Type: string (or Expression with resultType string).
	NewClusterNumOfWorker interface{} `pulumi:"newClusterNumOfWorker"`
	// A set of optional, user-specified Spark configuration key-value pairs.
	NewClusterSparkConf map[string]interface{} `pulumi:"newClusterSparkConf"`
	// A set of optional, user-specified Spark environment variables key-value pairs.
	NewClusterSparkEnvVars map[string]interface{} `pulumi:"newClusterSparkEnvVars"`
	// If not using an existing interactive cluster, this specifies the Spark version of a new job cluster or instance pool nodes created for each run of this activity. Required if instancePoolId is specified. Type: string (or Expression with resultType string).
	NewClusterVersion interface{} `pulumi:"newClusterVersion"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The policy id for limiting the ability to configure clusters based on a user defined set of rules. Type: string (or Expression with resultType string).
	PolicyId interface{} `pulumi:"policyId"`
	// Type of linked service.
	// Expected value is 'AzureDatabricks'.
	Type string `pulumi:"type"`
	// Workspace resource id for databricks REST API. Type: string (or Expression with resultType string).
	WorkspaceResourceId interface{} `pulumi:"workspaceResourceId"`
}

// AzureDatabricksLinkedServiceInput is an input type that accepts AzureDatabricksLinkedServiceArgs and AzureDatabricksLinkedServiceOutput values.
// You can construct a concrete instance of `AzureDatabricksLinkedServiceInput` via:
//
//	AzureDatabricksLinkedServiceArgs{...}
type AzureDatabricksLinkedServiceInput interface {
	pulumi.Input

	ToAzureDatabricksLinkedServiceOutput() AzureDatabricksLinkedServiceOutput
	ToAzureDatabricksLinkedServiceOutputWithContext(context.Context) AzureDatabricksLinkedServiceOutput
}

// Azure Databricks linked service.
type AzureDatabricksLinkedServiceArgs struct {
	// Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/latest/authentication.html. Type: string (or Expression with resultType string).
	AccessToken pulumi.Input `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Required to specify MSI, if using Workspace resource id for databricks REST API. Type: string (or Expression with resultType string).
	Authentication pulumi.Input `pulumi:"authentication"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential CredentialReferencePtrInput `pulumi:"credential"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// <REGION>.azuredatabricks.net, domain name of your Databricks deployment. Type: string (or Expression with resultType string).
	Domain pulumi.Input `pulumi:"domain"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// The id of an existing interactive cluster that will be used for all runs of this activity. Type: string (or Expression with resultType string).
	ExistingClusterId pulumi.Input `pulumi:"existingClusterId"`
	// The id of an existing instance pool that will be used for all runs of this activity. Type: string (or Expression with resultType string).
	InstancePoolId pulumi.Input `pulumi:"instancePoolId"`
	// Additional tags for cluster resources. This property is ignored in instance pool configurations.
	NewClusterCustomTags pulumi.MapInput `pulumi:"newClusterCustomTags"`
	// The driver node type for the new job cluster. This property is ignored in instance pool configurations. Type: string (or Expression with resultType string).
	NewClusterDriverNodeType pulumi.Input `pulumi:"newClusterDriverNodeType"`
	// Enable the elastic disk on the new cluster. This property is now ignored, and takes the default elastic disk behavior in Databricks (elastic disks are always enabled). Type: boolean (or Expression with resultType boolean).
	NewClusterEnableElasticDisk pulumi.Input `pulumi:"newClusterEnableElasticDisk"`
	// User-defined initialization scripts for the new cluster. Type: array of strings (or Expression with resultType array of strings).
	NewClusterInitScripts pulumi.Input `pulumi:"newClusterInitScripts"`
	// Specify a location to deliver Spark driver, worker, and event logs. Type: string (or Expression with resultType string).
	NewClusterLogDestination pulumi.Input `pulumi:"newClusterLogDestination"`
	// The node type of the new job cluster. This property is required if newClusterVersion is specified and instancePoolId is not specified. If instancePoolId is specified, this property is ignored. Type: string (or Expression with resultType string).
	NewClusterNodeType pulumi.Input `pulumi:"newClusterNodeType"`
	// If not using an existing interactive cluster, this specifies the number of worker nodes to use for the new job cluster or instance pool. For new job clusters, this a string-formatted Int32, like '1' means numOfWorker is 1 or '1:10' means auto-scale from 1 (min) to 10 (max). For instance pools, this is a string-formatted Int32, and can only specify a fixed number of worker nodes, such as '2'. Required if newClusterVersion is specified. Type: string (or Expression with resultType string).
	NewClusterNumOfWorker pulumi.Input `pulumi:"newClusterNumOfWorker"`
	// A set of optional, user-specified Spark configuration key-value pairs.
	NewClusterSparkConf pulumi.MapInput `pulumi:"newClusterSparkConf"`
	// A set of optional, user-specified Spark environment variables key-value pairs.
	NewClusterSparkEnvVars pulumi.MapInput `pulumi:"newClusterSparkEnvVars"`
	// If not using an existing interactive cluster, this specifies the Spark version of a new job cluster or instance pool nodes created for each run of this activity. Required if instancePoolId is specified. Type: string (or Expression with resultType string).
	NewClusterVersion pulumi.Input `pulumi:"newClusterVersion"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The policy id for limiting the ability to configure clusters based on a user defined set of rules. Type: string (or Expression with resultType string).
	PolicyId pulumi.Input `pulumi:"policyId"`
	// Type of linked service.
	// Expected value is 'AzureDatabricks'.
	Type pulumi.StringInput `pulumi:"type"`
	// Workspace resource id for databricks REST API. Type: string (or Expression with resultType string).
	WorkspaceResourceId pulumi.Input `pulumi:"workspaceResourceId"`
}

func (AzureDatabricksLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDatabricksLinkedService)(nil)).Elem()
}

func (i AzureDatabricksLinkedServiceArgs) ToAzureDatabricksLinkedServiceOutput() AzureDatabricksLinkedServiceOutput {
	return i.ToAzureDatabricksLinkedServiceOutputWithContext(context.Background())
}

func (i AzureDatabricksLinkedServiceArgs) ToAzureDatabricksLinkedServiceOutputWithContext(ctx context.Context) AzureDatabricksLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDatabricksLinkedServiceOutput)
}

// Azure Databricks linked service.
type AzureDatabricksLinkedServiceOutput struct{ *pulumi.OutputState }

func (AzureDatabricksLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDatabricksLinkedService)(nil)).Elem()
}

func (o AzureDatabricksLinkedServiceOutput) ToAzureDatabricksLinkedServiceOutput() AzureDatabricksLinkedServiceOutput {
	return o
}

func (o AzureDatabricksLinkedServiceOutput) ToAzureDatabricksLinkedServiceOutputWithContext(ctx context.Context) AzureDatabricksLinkedServiceOutput {
	return o
}

// Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/latest/authentication.html. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceOutput) AccessToken() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedService) interface{} { return v.AccessToken }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o AzureDatabricksLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Required to specify MSI, if using Workspace resource id for databricks REST API. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceOutput) Authentication() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedService) interface{} { return v.Authentication }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureDatabricksLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The credential reference containing authentication information.
func (o AzureDatabricksLinkedServiceOutput) Credential() CredentialReferencePtrOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedService) *CredentialReference { return v.Credential }).(CredentialReferencePtrOutput)
}

// Linked service description.
func (o AzureDatabricksLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// <REGION>.azuredatabricks.net, domain name of your Databricks deployment. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceOutput) Domain() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedService) interface{} { return v.Domain }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AzureDatabricksLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The id of an existing interactive cluster that will be used for all runs of this activity. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceOutput) ExistingClusterId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedService) interface{} { return v.ExistingClusterId }).(pulumi.AnyOutput)
}

// The id of an existing instance pool that will be used for all runs of this activity. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceOutput) InstancePoolId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedService) interface{} { return v.InstancePoolId }).(pulumi.AnyOutput)
}

// Additional tags for cluster resources. This property is ignored in instance pool configurations.
func (o AzureDatabricksLinkedServiceOutput) NewClusterCustomTags() pulumi.MapOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedService) map[string]interface{} { return v.NewClusterCustomTags }).(pulumi.MapOutput)
}

// The driver node type for the new job cluster. This property is ignored in instance pool configurations. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceOutput) NewClusterDriverNodeType() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedService) interface{} { return v.NewClusterDriverNodeType }).(pulumi.AnyOutput)
}

// Enable the elastic disk on the new cluster. This property is now ignored, and takes the default elastic disk behavior in Databricks (elastic disks are always enabled). Type: boolean (or Expression with resultType boolean).
func (o AzureDatabricksLinkedServiceOutput) NewClusterEnableElasticDisk() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedService) interface{} { return v.NewClusterEnableElasticDisk }).(pulumi.AnyOutput)
}

// User-defined initialization scripts for the new cluster. Type: array of strings (or Expression with resultType array of strings).
func (o AzureDatabricksLinkedServiceOutput) NewClusterInitScripts() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedService) interface{} { return v.NewClusterInitScripts }).(pulumi.AnyOutput)
}

// Specify a location to deliver Spark driver, worker, and event logs. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceOutput) NewClusterLogDestination() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedService) interface{} { return v.NewClusterLogDestination }).(pulumi.AnyOutput)
}

// The node type of the new job cluster. This property is required if newClusterVersion is specified and instancePoolId is not specified. If instancePoolId is specified, this property is ignored. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceOutput) NewClusterNodeType() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedService) interface{} { return v.NewClusterNodeType }).(pulumi.AnyOutput)
}

// If not using an existing interactive cluster, this specifies the number of worker nodes to use for the new job cluster or instance pool. For new job clusters, this a string-formatted Int32, like '1' means numOfWorker is 1 or '1:10' means auto-scale from 1 (min) to 10 (max). For instance pools, this is a string-formatted Int32, and can only specify a fixed number of worker nodes, such as '2'. Required if newClusterVersion is specified. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceOutput) NewClusterNumOfWorker() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedService) interface{} { return v.NewClusterNumOfWorker }).(pulumi.AnyOutput)
}

// A set of optional, user-specified Spark configuration key-value pairs.
func (o AzureDatabricksLinkedServiceOutput) NewClusterSparkConf() pulumi.MapOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedService) map[string]interface{} { return v.NewClusterSparkConf }).(pulumi.MapOutput)
}

// A set of optional, user-specified Spark environment variables key-value pairs.
func (o AzureDatabricksLinkedServiceOutput) NewClusterSparkEnvVars() pulumi.MapOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedService) map[string]interface{} { return v.NewClusterSparkEnvVars }).(pulumi.MapOutput)
}

// If not using an existing interactive cluster, this specifies the Spark version of a new job cluster or instance pool nodes created for each run of this activity. Required if instancePoolId is specified. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceOutput) NewClusterVersion() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedService) interface{} { return v.NewClusterVersion }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureDatabricksLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The policy id for limiting the ability to configure clusters based on a user defined set of rules. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceOutput) PolicyId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedService) interface{} { return v.PolicyId }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AzureDatabricks'.
func (o AzureDatabricksLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Workspace resource id for databricks REST API. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceOutput) WorkspaceResourceId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedService) interface{} { return v.WorkspaceResourceId }).(pulumi.AnyOutput)
}

// Azure Databricks linked service.
type AzureDatabricksLinkedServiceResponse struct {
	// Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/latest/authentication.html. Type: string (or Expression with resultType string).
	AccessToken interface{} `pulumi:"accessToken"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Required to specify MSI, if using Workspace resource id for databricks REST API. Type: string (or Expression with resultType string).
	Authentication interface{} `pulumi:"authentication"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// <REGION>.azuredatabricks.net, domain name of your Databricks deployment. Type: string (or Expression with resultType string).
	Domain interface{} `pulumi:"domain"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The id of an existing interactive cluster that will be used for all runs of this activity. Type: string (or Expression with resultType string).
	ExistingClusterId interface{} `pulumi:"existingClusterId"`
	// The id of an existing instance pool that will be used for all runs of this activity. Type: string (or Expression with resultType string).
	InstancePoolId interface{} `pulumi:"instancePoolId"`
	// Additional tags for cluster resources. This property is ignored in instance pool configurations.
	NewClusterCustomTags map[string]interface{} `pulumi:"newClusterCustomTags"`
	// The driver node type for the new job cluster. This property is ignored in instance pool configurations. Type: string (or Expression with resultType string).
	NewClusterDriverNodeType interface{} `pulumi:"newClusterDriverNodeType"`
	// Enable the elastic disk on the new cluster. This property is now ignored, and takes the default elastic disk behavior in Databricks (elastic disks are always enabled). Type: boolean (or Expression with resultType boolean).
	NewClusterEnableElasticDisk interface{} `pulumi:"newClusterEnableElasticDisk"`
	// User-defined initialization scripts for the new cluster. Type: array of strings (or Expression with resultType array of strings).
	NewClusterInitScripts interface{} `pulumi:"newClusterInitScripts"`
	// Specify a location to deliver Spark driver, worker, and event logs. Type: string (or Expression with resultType string).
	NewClusterLogDestination interface{} `pulumi:"newClusterLogDestination"`
	// The node type of the new job cluster. This property is required if newClusterVersion is specified and instancePoolId is not specified. If instancePoolId is specified, this property is ignored. Type: string (or Expression with resultType string).
	NewClusterNodeType interface{} `pulumi:"newClusterNodeType"`
	// If not using an existing interactive cluster, this specifies the number of worker nodes to use for the new job cluster or instance pool. For new job clusters, this a string-formatted Int32, like '1' means numOfWorker is 1 or '1:10' means auto-scale from 1 (min) to 10 (max). For instance pools, this is a string-formatted Int32, and can only specify a fixed number of worker nodes, such as '2'. Required if newClusterVersion is specified. Type: string (or Expression with resultType string).
	NewClusterNumOfWorker interface{} `pulumi:"newClusterNumOfWorker"`
	// A set of optional, user-specified Spark configuration key-value pairs.
	NewClusterSparkConf map[string]interface{} `pulumi:"newClusterSparkConf"`
	// A set of optional, user-specified Spark environment variables key-value pairs.
	NewClusterSparkEnvVars map[string]interface{} `pulumi:"newClusterSparkEnvVars"`
	// If not using an existing interactive cluster, this specifies the Spark version of a new job cluster or instance pool nodes created for each run of this activity. Required if instancePoolId is specified. Type: string (or Expression with resultType string).
	NewClusterVersion interface{} `pulumi:"newClusterVersion"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The policy id for limiting the ability to configure clusters based on a user defined set of rules. Type: string (or Expression with resultType string).
	PolicyId interface{} `pulumi:"policyId"`
	// Type of linked service.
	// Expected value is 'AzureDatabricks'.
	Type string `pulumi:"type"`
	// Workspace resource id for databricks REST API. Type: string (or Expression with resultType string).
	WorkspaceResourceId interface{} `pulumi:"workspaceResourceId"`
}

// Azure Databricks linked service.
type AzureDatabricksLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureDatabricksLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDatabricksLinkedServiceResponse)(nil)).Elem()
}

func (o AzureDatabricksLinkedServiceResponseOutput) ToAzureDatabricksLinkedServiceResponseOutput() AzureDatabricksLinkedServiceResponseOutput {
	return o
}

func (o AzureDatabricksLinkedServiceResponseOutput) ToAzureDatabricksLinkedServiceResponseOutputWithContext(ctx context.Context) AzureDatabricksLinkedServiceResponseOutput {
	return o
}

// Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/latest/authentication.html. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceResponseOutput) AccessToken() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) interface{} { return v.AccessToken }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o AzureDatabricksLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Required to specify MSI, if using Workspace resource id for databricks REST API. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceResponseOutput) Authentication() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) interface{} { return v.Authentication }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureDatabricksLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The credential reference containing authentication information.
func (o AzureDatabricksLinkedServiceResponseOutput) Credential() CredentialReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) *CredentialReferenceResponse { return v.Credential }).(CredentialReferenceResponsePtrOutput)
}

// Linked service description.
func (o AzureDatabricksLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// <REGION>.azuredatabricks.net, domain name of your Databricks deployment. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceResponseOutput) Domain() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) interface{} { return v.Domain }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AzureDatabricksLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The id of an existing interactive cluster that will be used for all runs of this activity. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceResponseOutput) ExistingClusterId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) interface{} { return v.ExistingClusterId }).(pulumi.AnyOutput)
}

// The id of an existing instance pool that will be used for all runs of this activity. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceResponseOutput) InstancePoolId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) interface{} { return v.InstancePoolId }).(pulumi.AnyOutput)
}

// Additional tags for cluster resources. This property is ignored in instance pool configurations.
func (o AzureDatabricksLinkedServiceResponseOutput) NewClusterCustomTags() pulumi.MapOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) map[string]interface{} { return v.NewClusterCustomTags }).(pulumi.MapOutput)
}

// The driver node type for the new job cluster. This property is ignored in instance pool configurations. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceResponseOutput) NewClusterDriverNodeType() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) interface{} { return v.NewClusterDriverNodeType }).(pulumi.AnyOutput)
}

// Enable the elastic disk on the new cluster. This property is now ignored, and takes the default elastic disk behavior in Databricks (elastic disks are always enabled). Type: boolean (or Expression with resultType boolean).
func (o AzureDatabricksLinkedServiceResponseOutput) NewClusterEnableElasticDisk() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) interface{} { return v.NewClusterEnableElasticDisk }).(pulumi.AnyOutput)
}

// User-defined initialization scripts for the new cluster. Type: array of strings (or Expression with resultType array of strings).
func (o AzureDatabricksLinkedServiceResponseOutput) NewClusterInitScripts() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) interface{} { return v.NewClusterInitScripts }).(pulumi.AnyOutput)
}

// Specify a location to deliver Spark driver, worker, and event logs. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceResponseOutput) NewClusterLogDestination() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) interface{} { return v.NewClusterLogDestination }).(pulumi.AnyOutput)
}

// The node type of the new job cluster. This property is required if newClusterVersion is specified and instancePoolId is not specified. If instancePoolId is specified, this property is ignored. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceResponseOutput) NewClusterNodeType() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) interface{} { return v.NewClusterNodeType }).(pulumi.AnyOutput)
}

// If not using an existing interactive cluster, this specifies the number of worker nodes to use for the new job cluster or instance pool. For new job clusters, this a string-formatted Int32, like '1' means numOfWorker is 1 or '1:10' means auto-scale from 1 (min) to 10 (max). For instance pools, this is a string-formatted Int32, and can only specify a fixed number of worker nodes, such as '2'. Required if newClusterVersion is specified. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceResponseOutput) NewClusterNumOfWorker() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) interface{} { return v.NewClusterNumOfWorker }).(pulumi.AnyOutput)
}

// A set of optional, user-specified Spark configuration key-value pairs.
func (o AzureDatabricksLinkedServiceResponseOutput) NewClusterSparkConf() pulumi.MapOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) map[string]interface{} { return v.NewClusterSparkConf }).(pulumi.MapOutput)
}

// A set of optional, user-specified Spark environment variables key-value pairs.
func (o AzureDatabricksLinkedServiceResponseOutput) NewClusterSparkEnvVars() pulumi.MapOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) map[string]interface{} { return v.NewClusterSparkEnvVars }).(pulumi.MapOutput)
}

// If not using an existing interactive cluster, this specifies the Spark version of a new job cluster or instance pool nodes created for each run of this activity. Required if instancePoolId is specified. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceResponseOutput) NewClusterVersion() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) interface{} { return v.NewClusterVersion }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureDatabricksLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The policy id for limiting the ability to configure clusters based on a user defined set of rules. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceResponseOutput) PolicyId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) interface{} { return v.PolicyId }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AzureDatabricks'.
func (o AzureDatabricksLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Workspace resource id for databricks REST API. Type: string (or Expression with resultType string).
func (o AzureDatabricksLinkedServiceResponseOutput) WorkspaceResourceId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDatabricksLinkedServiceResponse) interface{} { return v.WorkspaceResourceId }).(pulumi.AnyOutput)
}

// Azure File Storage linked service.
type AzureFileStorageLinkedService struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey *AzureKeyVaultSecretReference `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The azure file share name. It is required when auth with accountKey/sasToken. Type: string (or Expression with resultType string).
	FileShare interface{} `pulumi:"fileShare"`
	// Host name of the server. Type: string (or Expression with resultType string).
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to logon the server.
	Password interface{} `pulumi:"password"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken *AzureKeyVaultSecretReference `pulumi:"sasToken"`
	// SAS URI of the Azure File resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri interface{} `pulumi:"sasUri"`
	// The azure file share snapshot version. Type: string (or Expression with resultType string).
	Snapshot interface{} `pulumi:"snapshot"`
	// Type of linked service.
	// Expected value is 'AzureFileStorage'.
	Type string `pulumi:"type"`
	// User ID to logon the server. Type: string (or Expression with resultType string).
	UserId interface{} `pulumi:"userId"`
}

// AzureFileStorageLinkedServiceInput is an input type that accepts AzureFileStorageLinkedServiceArgs and AzureFileStorageLinkedServiceOutput values.
// You can construct a concrete instance of `AzureFileStorageLinkedServiceInput` via:
//
//	AzureFileStorageLinkedServiceArgs{...}
type AzureFileStorageLinkedServiceInput interface {
	pulumi.Input

	ToAzureFileStorageLinkedServiceOutput() AzureFileStorageLinkedServiceOutput
	ToAzureFileStorageLinkedServiceOutputWithContext(context.Context) AzureFileStorageLinkedServiceOutput
}

// Azure File Storage linked service.
type AzureFileStorageLinkedServiceArgs struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey AzureKeyVaultSecretReferencePtrInput `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// The azure file share name. It is required when auth with accountKey/sasToken. Type: string (or Expression with resultType string).
	FileShare pulumi.Input `pulumi:"fileShare"`
	// Host name of the server. Type: string (or Expression with resultType string).
	Host pulumi.Input `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password to logon the server.
	Password pulumi.Input `pulumi:"password"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken AzureKeyVaultSecretReferencePtrInput `pulumi:"sasToken"`
	// SAS URI of the Azure File resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri pulumi.Input `pulumi:"sasUri"`
	// The azure file share snapshot version. Type: string (or Expression with resultType string).
	Snapshot pulumi.Input `pulumi:"snapshot"`
	// Type of linked service.
	// Expected value is 'AzureFileStorage'.
	Type pulumi.StringInput `pulumi:"type"`
	// User ID to logon the server. Type: string (or Expression with resultType string).
	UserId pulumi.Input `pulumi:"userId"`
}

func (AzureFileStorageLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileStorageLinkedService)(nil)).Elem()
}

func (i AzureFileStorageLinkedServiceArgs) ToAzureFileStorageLinkedServiceOutput() AzureFileStorageLinkedServiceOutput {
	return i.ToAzureFileStorageLinkedServiceOutputWithContext(context.Background())
}

func (i AzureFileStorageLinkedServiceArgs) ToAzureFileStorageLinkedServiceOutputWithContext(ctx context.Context) AzureFileStorageLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileStorageLinkedServiceOutput)
}

// Azure File Storage linked service.
type AzureFileStorageLinkedServiceOutput struct{ *pulumi.OutputState }

func (AzureFileStorageLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileStorageLinkedService)(nil)).Elem()
}

func (o AzureFileStorageLinkedServiceOutput) ToAzureFileStorageLinkedServiceOutput() AzureFileStorageLinkedServiceOutput {
	return o
}

func (o AzureFileStorageLinkedServiceOutput) ToAzureFileStorageLinkedServiceOutputWithContext(ctx context.Context) AzureFileStorageLinkedServiceOutput {
	return o
}

// The Azure key vault secret reference of accountKey in connection string.
func (o AzureFileStorageLinkedServiceOutput) AccountKey() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedService) *AzureKeyVaultSecretReference { return v.AccountKey }).(AzureKeyVaultSecretReferencePtrOutput)
}

// List of tags that can be used for describing the linked service.
func (o AzureFileStorageLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AzureFileStorageLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureFileStorageLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AzureFileStorageLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AzureFileStorageLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The azure file share name. It is required when auth with accountKey/sasToken. Type: string (or Expression with resultType string).
func (o AzureFileStorageLinkedServiceOutput) FileShare() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedService) interface{} { return v.FileShare }).(pulumi.AnyOutput)
}

// Host name of the server. Type: string (or Expression with resultType string).
func (o AzureFileStorageLinkedServiceOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedService) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureFileStorageLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Password to logon the server.
func (o AzureFileStorageLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The Azure key vault secret reference of sasToken in sas uri.
func (o AzureFileStorageLinkedServiceOutput) SasToken() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedService) *AzureKeyVaultSecretReference { return v.SasToken }).(AzureKeyVaultSecretReferencePtrOutput)
}

// SAS URI of the Azure File resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureFileStorageLinkedServiceOutput) SasUri() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedService) interface{} { return v.SasUri }).(pulumi.AnyOutput)
}

// The azure file share snapshot version. Type: string (or Expression with resultType string).
func (o AzureFileStorageLinkedServiceOutput) Snapshot() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedService) interface{} { return v.Snapshot }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AzureFileStorage'.
func (o AzureFileStorageLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// User ID to logon the server. Type: string (or Expression with resultType string).
func (o AzureFileStorageLinkedServiceOutput) UserId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedService) interface{} { return v.UserId }).(pulumi.AnyOutput)
}

// Azure File Storage linked service.
type AzureFileStorageLinkedServiceResponse struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey *AzureKeyVaultSecretReferenceResponse `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The azure file share name. It is required when auth with accountKey/sasToken. Type: string (or Expression with resultType string).
	FileShare interface{} `pulumi:"fileShare"`
	// Host name of the server. Type: string (or Expression with resultType string).
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to logon the server.
	Password interface{} `pulumi:"password"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken *AzureKeyVaultSecretReferenceResponse `pulumi:"sasToken"`
	// SAS URI of the Azure File resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri interface{} `pulumi:"sasUri"`
	// The azure file share snapshot version. Type: string (or Expression with resultType string).
	Snapshot interface{} `pulumi:"snapshot"`
	// Type of linked service.
	// Expected value is 'AzureFileStorage'.
	Type string `pulumi:"type"`
	// User ID to logon the server. Type: string (or Expression with resultType string).
	UserId interface{} `pulumi:"userId"`
}

// Azure File Storage linked service.
type AzureFileStorageLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureFileStorageLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileStorageLinkedServiceResponse)(nil)).Elem()
}

func (o AzureFileStorageLinkedServiceResponseOutput) ToAzureFileStorageLinkedServiceResponseOutput() AzureFileStorageLinkedServiceResponseOutput {
	return o
}

func (o AzureFileStorageLinkedServiceResponseOutput) ToAzureFileStorageLinkedServiceResponseOutputWithContext(ctx context.Context) AzureFileStorageLinkedServiceResponseOutput {
	return o
}

// The Azure key vault secret reference of accountKey in connection string.
func (o AzureFileStorageLinkedServiceResponseOutput) AccountKey() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse {
		return v.AccountKey
	}).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// List of tags that can be used for describing the linked service.
func (o AzureFileStorageLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AzureFileStorageLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureFileStorageLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AzureFileStorageLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AzureFileStorageLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The azure file share name. It is required when auth with accountKey/sasToken. Type: string (or Expression with resultType string).
func (o AzureFileStorageLinkedServiceResponseOutput) FileShare() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedServiceResponse) interface{} { return v.FileShare }).(pulumi.AnyOutput)
}

// Host name of the server. Type: string (or Expression with resultType string).
func (o AzureFileStorageLinkedServiceResponseOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedServiceResponse) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureFileStorageLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Password to logon the server.
func (o AzureFileStorageLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The Azure key vault secret reference of sasToken in sas uri.
func (o AzureFileStorageLinkedServiceResponseOutput) SasToken() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse { return v.SasToken }).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// SAS URI of the Azure File resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureFileStorageLinkedServiceResponseOutput) SasUri() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedServiceResponse) interface{} { return v.SasUri }).(pulumi.AnyOutput)
}

// The azure file share snapshot version. Type: string (or Expression with resultType string).
func (o AzureFileStorageLinkedServiceResponseOutput) Snapshot() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedServiceResponse) interface{} { return v.Snapshot }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AzureFileStorage'.
func (o AzureFileStorageLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User ID to logon the server. Type: string (or Expression with resultType string).
func (o AzureFileStorageLinkedServiceResponseOutput) UserId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageLinkedServiceResponse) interface{} { return v.UserId }).(pulumi.AnyOutput)
}

// The location of file server dataset.
type AzureFileStorageLocation struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'AzureFileStorageLocation'.
	Type string `pulumi:"type"`
}

// AzureFileStorageLocationInput is an input type that accepts AzureFileStorageLocationArgs and AzureFileStorageLocationOutput values.
// You can construct a concrete instance of `AzureFileStorageLocationInput` via:
//
//	AzureFileStorageLocationArgs{...}
type AzureFileStorageLocationInput interface {
	pulumi.Input

	ToAzureFileStorageLocationOutput() AzureFileStorageLocationOutput
	ToAzureFileStorageLocationOutputWithContext(context.Context) AzureFileStorageLocationOutput
}

// The location of file server dataset.
type AzureFileStorageLocationArgs struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'AzureFileStorageLocation'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureFileStorageLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileStorageLocation)(nil)).Elem()
}

func (i AzureFileStorageLocationArgs) ToAzureFileStorageLocationOutput() AzureFileStorageLocationOutput {
	return i.ToAzureFileStorageLocationOutputWithContext(context.Background())
}

func (i AzureFileStorageLocationArgs) ToAzureFileStorageLocationOutputWithContext(ctx context.Context) AzureFileStorageLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileStorageLocationOutput)
}

// The location of file server dataset.
type AzureFileStorageLocationOutput struct{ *pulumi.OutputState }

func (AzureFileStorageLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileStorageLocation)(nil)).Elem()
}

func (o AzureFileStorageLocationOutput) ToAzureFileStorageLocationOutput() AzureFileStorageLocationOutput {
	return o
}

func (o AzureFileStorageLocationOutput) ToAzureFileStorageLocationOutputWithContext(ctx context.Context) AzureFileStorageLocationOutput {
	return o
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o AzureFileStorageLocationOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageLocation) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o AzureFileStorageLocationOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageLocation) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
// Expected value is 'AzureFileStorageLocation'.
func (o AzureFileStorageLocationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileStorageLocation) string { return v.Type }).(pulumi.StringOutput)
}

// The location of file server dataset.
type AzureFileStorageLocationResponse struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'AzureFileStorageLocation'.
	Type string `pulumi:"type"`
}

// The location of file server dataset.
type AzureFileStorageLocationResponseOutput struct{ *pulumi.OutputState }

func (AzureFileStorageLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileStorageLocationResponse)(nil)).Elem()
}

func (o AzureFileStorageLocationResponseOutput) ToAzureFileStorageLocationResponseOutput() AzureFileStorageLocationResponseOutput {
	return o
}

func (o AzureFileStorageLocationResponseOutput) ToAzureFileStorageLocationResponseOutputWithContext(ctx context.Context) AzureFileStorageLocationResponseOutput {
	return o
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o AzureFileStorageLocationResponseOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageLocationResponse) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o AzureFileStorageLocationResponseOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageLocationResponse) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
// Expected value is 'AzureFileStorageLocation'.
func (o AzureFileStorageLocationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileStorageLocationResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure File Storage read settings.
type AzureFileStorageReadSettings struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery interface{} `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// The prefix filter for the Azure File name starting from root path. Type: string (or Expression with resultType string).
	Prefix interface{} `pulumi:"prefix"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'AzureFileStorageReadSettings'.
	Type string `pulumi:"type"`
	// Azure File Storage wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Azure File Storage wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// AzureFileStorageReadSettingsInput is an input type that accepts AzureFileStorageReadSettingsArgs and AzureFileStorageReadSettingsOutput values.
// You can construct a concrete instance of `AzureFileStorageReadSettingsInput` via:
//
//	AzureFileStorageReadSettingsArgs{...}
type AzureFileStorageReadSettingsInput interface {
	pulumi.Input

	ToAzureFileStorageReadSettingsOutput() AzureFileStorageReadSettingsOutput
	ToAzureFileStorageReadSettingsOutputWithContext(context.Context) AzureFileStorageReadSettingsOutput
}

// Azure File Storage read settings.
type AzureFileStorageReadSettingsArgs struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion pulumi.Input `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery pulumi.Input `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath pulumi.Input `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd pulumi.Input `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart pulumi.Input `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath pulumi.Input `pulumi:"partitionRootPath"`
	// The prefix filter for the Azure File name starting from root path. Type: string (or Expression with resultType string).
	Prefix pulumi.Input `pulumi:"prefix"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive pulumi.Input `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'AzureFileStorageReadSettings'.
	Type pulumi.StringInput `pulumi:"type"`
	// Azure File Storage wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName pulumi.Input `pulumi:"wildcardFileName"`
	// Azure File Storage wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath pulumi.Input `pulumi:"wildcardFolderPath"`
}

func (AzureFileStorageReadSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileStorageReadSettings)(nil)).Elem()
}

func (i AzureFileStorageReadSettingsArgs) ToAzureFileStorageReadSettingsOutput() AzureFileStorageReadSettingsOutput {
	return i.ToAzureFileStorageReadSettingsOutputWithContext(context.Background())
}

func (i AzureFileStorageReadSettingsArgs) ToAzureFileStorageReadSettingsOutputWithContext(ctx context.Context) AzureFileStorageReadSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileStorageReadSettingsOutput)
}

func (i AzureFileStorageReadSettingsArgs) ToAzureFileStorageReadSettingsPtrOutput() AzureFileStorageReadSettingsPtrOutput {
	return i.ToAzureFileStorageReadSettingsPtrOutputWithContext(context.Background())
}

func (i AzureFileStorageReadSettingsArgs) ToAzureFileStorageReadSettingsPtrOutputWithContext(ctx context.Context) AzureFileStorageReadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileStorageReadSettingsOutput).ToAzureFileStorageReadSettingsPtrOutputWithContext(ctx)
}

// AzureFileStorageReadSettingsPtrInput is an input type that accepts AzureFileStorageReadSettingsArgs, AzureFileStorageReadSettingsPtr and AzureFileStorageReadSettingsPtrOutput values.
// You can construct a concrete instance of `AzureFileStorageReadSettingsPtrInput` via:
//
//	        AzureFileStorageReadSettingsArgs{...}
//
//	or:
//
//	        nil
type AzureFileStorageReadSettingsPtrInput interface {
	pulumi.Input

	ToAzureFileStorageReadSettingsPtrOutput() AzureFileStorageReadSettingsPtrOutput
	ToAzureFileStorageReadSettingsPtrOutputWithContext(context.Context) AzureFileStorageReadSettingsPtrOutput
}

type azureFileStorageReadSettingsPtrType AzureFileStorageReadSettingsArgs

func AzureFileStorageReadSettingsPtr(v *AzureFileStorageReadSettingsArgs) AzureFileStorageReadSettingsPtrInput {
	return (*azureFileStorageReadSettingsPtrType)(v)
}

func (*azureFileStorageReadSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureFileStorageReadSettings)(nil)).Elem()
}

func (i *azureFileStorageReadSettingsPtrType) ToAzureFileStorageReadSettingsPtrOutput() AzureFileStorageReadSettingsPtrOutput {
	return i.ToAzureFileStorageReadSettingsPtrOutputWithContext(context.Background())
}

func (i *azureFileStorageReadSettingsPtrType) ToAzureFileStorageReadSettingsPtrOutputWithContext(ctx context.Context) AzureFileStorageReadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileStorageReadSettingsPtrOutput)
}

// Azure File Storage read settings.
type AzureFileStorageReadSettingsOutput struct{ *pulumi.OutputState }

func (AzureFileStorageReadSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileStorageReadSettings)(nil)).Elem()
}

func (o AzureFileStorageReadSettingsOutput) ToAzureFileStorageReadSettingsOutput() AzureFileStorageReadSettingsOutput {
	return o
}

func (o AzureFileStorageReadSettingsOutput) ToAzureFileStorageReadSettingsOutputWithContext(ctx context.Context) AzureFileStorageReadSettingsOutput {
	return o
}

func (o AzureFileStorageReadSettingsOutput) ToAzureFileStorageReadSettingsPtrOutput() AzureFileStorageReadSettingsPtrOutput {
	return o.ToAzureFileStorageReadSettingsPtrOutputWithContext(context.Background())
}

func (o AzureFileStorageReadSettingsOutput) ToAzureFileStorageReadSettingsPtrOutputWithContext(ctx context.Context) AzureFileStorageReadSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureFileStorageReadSettings) *AzureFileStorageReadSettings {
		return &v
	}).(AzureFileStorageReadSettingsPtrOutput)
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureFileStorageReadSettingsOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageReadSettings) interface{} { return v.DeleteFilesAfterCompletion }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureFileStorageReadSettingsOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageReadSettings) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o AzureFileStorageReadSettingsOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageReadSettings) interface{} { return v.EnablePartitionDiscovery }).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o AzureFileStorageReadSettingsOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageReadSettings) interface{} { return v.FileListPath }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureFileStorageReadSettingsOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageReadSettings) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o AzureFileStorageReadSettingsOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageReadSettings) interface{} { return v.ModifiedDatetimeEnd }).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o AzureFileStorageReadSettingsOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageReadSettings) interface{} { return v.ModifiedDatetimeStart }).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o AzureFileStorageReadSettingsOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageReadSettings) interface{} { return v.PartitionRootPath }).(pulumi.AnyOutput)
}

// The prefix filter for the Azure File name starting from root path. Type: string (or Expression with resultType string).
func (o AzureFileStorageReadSettingsOutput) Prefix() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageReadSettings) interface{} { return v.Prefix }).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o AzureFileStorageReadSettingsOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageReadSettings) interface{} { return v.Recursive }).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'AzureFileStorageReadSettings'.
func (o AzureFileStorageReadSettingsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileStorageReadSettings) string { return v.Type }).(pulumi.StringOutput)
}

// Azure File Storage wildcardFileName. Type: string (or Expression with resultType string).
func (o AzureFileStorageReadSettingsOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageReadSettings) interface{} { return v.WildcardFileName }).(pulumi.AnyOutput)
}

// Azure File Storage wildcardFolderPath. Type: string (or Expression with resultType string).
func (o AzureFileStorageReadSettingsOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageReadSettings) interface{} { return v.WildcardFolderPath }).(pulumi.AnyOutput)
}

type AzureFileStorageReadSettingsPtrOutput struct{ *pulumi.OutputState }

func (AzureFileStorageReadSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureFileStorageReadSettings)(nil)).Elem()
}

func (o AzureFileStorageReadSettingsPtrOutput) ToAzureFileStorageReadSettingsPtrOutput() AzureFileStorageReadSettingsPtrOutput {
	return o
}

func (o AzureFileStorageReadSettingsPtrOutput) ToAzureFileStorageReadSettingsPtrOutputWithContext(ctx context.Context) AzureFileStorageReadSettingsPtrOutput {
	return o
}

func (o AzureFileStorageReadSettingsPtrOutput) Elem() AzureFileStorageReadSettingsOutput {
	return o.ApplyT(func(v *AzureFileStorageReadSettings) AzureFileStorageReadSettings {
		if v != nil {
			return *v
		}
		var ret AzureFileStorageReadSettings
		return ret
	}).(AzureFileStorageReadSettingsOutput)
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureFileStorageReadSettingsPtrOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureFileStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.DeleteFilesAfterCompletion
	}).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureFileStorageReadSettingsPtrOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureFileStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableMetricsCollection
	}).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o AzureFileStorageReadSettingsPtrOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureFileStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.EnablePartitionDiscovery
	}).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o AzureFileStorageReadSettingsPtrOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureFileStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.FileListPath
	}).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureFileStorageReadSettingsPtrOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureFileStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentConnections
	}).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o AzureFileStorageReadSettingsPtrOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureFileStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeEnd
	}).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o AzureFileStorageReadSettingsPtrOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureFileStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeStart
	}).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o AzureFileStorageReadSettingsPtrOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureFileStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionRootPath
	}).(pulumi.AnyOutput)
}

// The prefix filter for the Azure File name starting from root path. Type: string (or Expression with resultType string).
func (o AzureFileStorageReadSettingsPtrOutput) Prefix() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureFileStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.Prefix
	}).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o AzureFileStorageReadSettingsPtrOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureFileStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.Recursive
	}).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'AzureFileStorageReadSettings'.
func (o AzureFileStorageReadSettingsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFileStorageReadSettings) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Azure File Storage wildcardFileName. Type: string (or Expression with resultType string).
func (o AzureFileStorageReadSettingsPtrOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureFileStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFileName
	}).(pulumi.AnyOutput)
}

// Azure File Storage wildcardFolderPath. Type: string (or Expression with resultType string).
func (o AzureFileStorageReadSettingsPtrOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureFileStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFolderPath
	}).(pulumi.AnyOutput)
}

// Azure File Storage read settings.
type AzureFileStorageReadSettingsResponse struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery interface{} `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// The prefix filter for the Azure File name starting from root path. Type: string (or Expression with resultType string).
	Prefix interface{} `pulumi:"prefix"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'AzureFileStorageReadSettings'.
	Type string `pulumi:"type"`
	// Azure File Storage wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Azure File Storage wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// Azure File Storage read settings.
type AzureFileStorageReadSettingsResponseOutput struct{ *pulumi.OutputState }

func (AzureFileStorageReadSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileStorageReadSettingsResponse)(nil)).Elem()
}

func (o AzureFileStorageReadSettingsResponseOutput) ToAzureFileStorageReadSettingsResponseOutput() AzureFileStorageReadSettingsResponseOutput {
	return o
}

func (o AzureFileStorageReadSettingsResponseOutput) ToAzureFileStorageReadSettingsResponseOutputWithContext(ctx context.Context) AzureFileStorageReadSettingsResponseOutput {
	return o
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureFileStorageReadSettingsResponseOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageReadSettingsResponse) interface{} { return v.DeleteFilesAfterCompletion }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureFileStorageReadSettingsResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageReadSettingsResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o AzureFileStorageReadSettingsResponseOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageReadSettingsResponse) interface{} { return v.EnablePartitionDiscovery }).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o AzureFileStorageReadSettingsResponseOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageReadSettingsResponse) interface{} { return v.FileListPath }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureFileStorageReadSettingsResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageReadSettingsResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o AzureFileStorageReadSettingsResponseOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageReadSettingsResponse) interface{} { return v.ModifiedDatetimeEnd }).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o AzureFileStorageReadSettingsResponseOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageReadSettingsResponse) interface{} { return v.ModifiedDatetimeStart }).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o AzureFileStorageReadSettingsResponseOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageReadSettingsResponse) interface{} { return v.PartitionRootPath }).(pulumi.AnyOutput)
}

// The prefix filter for the Azure File name starting from root path. Type: string (or Expression with resultType string).
func (o AzureFileStorageReadSettingsResponseOutput) Prefix() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageReadSettingsResponse) interface{} { return v.Prefix }).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o AzureFileStorageReadSettingsResponseOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageReadSettingsResponse) interface{} { return v.Recursive }).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'AzureFileStorageReadSettings'.
func (o AzureFileStorageReadSettingsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileStorageReadSettingsResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure File Storage wildcardFileName. Type: string (or Expression with resultType string).
func (o AzureFileStorageReadSettingsResponseOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageReadSettingsResponse) interface{} { return v.WildcardFileName }).(pulumi.AnyOutput)
}

// Azure File Storage wildcardFolderPath. Type: string (or Expression with resultType string).
func (o AzureFileStorageReadSettingsResponseOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageReadSettingsResponse) interface{} { return v.WildcardFolderPath }).(pulumi.AnyOutput)
}

type AzureFileStorageReadSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureFileStorageReadSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureFileStorageReadSettingsResponse)(nil)).Elem()
}

func (o AzureFileStorageReadSettingsResponsePtrOutput) ToAzureFileStorageReadSettingsResponsePtrOutput() AzureFileStorageReadSettingsResponsePtrOutput {
	return o
}

func (o AzureFileStorageReadSettingsResponsePtrOutput) ToAzureFileStorageReadSettingsResponsePtrOutputWithContext(ctx context.Context) AzureFileStorageReadSettingsResponsePtrOutput {
	return o
}

func (o AzureFileStorageReadSettingsResponsePtrOutput) Elem() AzureFileStorageReadSettingsResponseOutput {
	return o.ApplyT(func(v *AzureFileStorageReadSettingsResponse) AzureFileStorageReadSettingsResponse {
		if v != nil {
			return *v
		}
		var ret AzureFileStorageReadSettingsResponse
		return ret
	}).(AzureFileStorageReadSettingsResponseOutput)
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureFileStorageReadSettingsResponsePtrOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureFileStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.DeleteFilesAfterCompletion
	}).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureFileStorageReadSettingsResponsePtrOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureFileStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableMetricsCollection
	}).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o AzureFileStorageReadSettingsResponsePtrOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureFileStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.EnablePartitionDiscovery
	}).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o AzureFileStorageReadSettingsResponsePtrOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureFileStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.FileListPath
	}).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureFileStorageReadSettingsResponsePtrOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureFileStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentConnections
	}).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o AzureFileStorageReadSettingsResponsePtrOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureFileStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeEnd
	}).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o AzureFileStorageReadSettingsResponsePtrOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureFileStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeStart
	}).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o AzureFileStorageReadSettingsResponsePtrOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureFileStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionRootPath
	}).(pulumi.AnyOutput)
}

// The prefix filter for the Azure File name starting from root path. Type: string (or Expression with resultType string).
func (o AzureFileStorageReadSettingsResponsePtrOutput) Prefix() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureFileStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Prefix
	}).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o AzureFileStorageReadSettingsResponsePtrOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureFileStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Recursive
	}).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'AzureFileStorageReadSettings'.
func (o AzureFileStorageReadSettingsResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFileStorageReadSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Azure File Storage wildcardFileName. Type: string (or Expression with resultType string).
func (o AzureFileStorageReadSettingsResponsePtrOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureFileStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFileName
	}).(pulumi.AnyOutput)
}

// Azure File Storage wildcardFolderPath. Type: string (or Expression with resultType string).
func (o AzureFileStorageReadSettingsResponsePtrOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureFileStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFolderPath
	}).(pulumi.AnyOutput)
}

// Azure File Storage write settings.
type AzureFileStorageWriteSettings struct {
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
	Metadata []MetadataItem `pulumi:"metadata"`
	// The write setting type.
	// Expected value is 'AzureFileStorageWriteSettings'.
	Type string `pulumi:"type"`
}

// AzureFileStorageWriteSettingsInput is an input type that accepts AzureFileStorageWriteSettingsArgs and AzureFileStorageWriteSettingsOutput values.
// You can construct a concrete instance of `AzureFileStorageWriteSettingsInput` via:
//
//	AzureFileStorageWriteSettingsArgs{...}
type AzureFileStorageWriteSettingsInput interface {
	pulumi.Input

	ToAzureFileStorageWriteSettingsOutput() AzureFileStorageWriteSettingsOutput
	ToAzureFileStorageWriteSettingsOutputWithContext(context.Context) AzureFileStorageWriteSettingsOutput
}

// Azure File Storage write settings.
type AzureFileStorageWriteSettingsArgs struct {
	// The type of copy behavior for copy sink.
	CopyBehavior pulumi.Input `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
	Metadata MetadataItemArrayInput `pulumi:"metadata"`
	// The write setting type.
	// Expected value is 'AzureFileStorageWriteSettings'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureFileStorageWriteSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileStorageWriteSettings)(nil)).Elem()
}

func (i AzureFileStorageWriteSettingsArgs) ToAzureFileStorageWriteSettingsOutput() AzureFileStorageWriteSettingsOutput {
	return i.ToAzureFileStorageWriteSettingsOutputWithContext(context.Background())
}

func (i AzureFileStorageWriteSettingsArgs) ToAzureFileStorageWriteSettingsOutputWithContext(ctx context.Context) AzureFileStorageWriteSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileStorageWriteSettingsOutput)
}

func (i AzureFileStorageWriteSettingsArgs) ToAzureFileStorageWriteSettingsPtrOutput() AzureFileStorageWriteSettingsPtrOutput {
	return i.ToAzureFileStorageWriteSettingsPtrOutputWithContext(context.Background())
}

func (i AzureFileStorageWriteSettingsArgs) ToAzureFileStorageWriteSettingsPtrOutputWithContext(ctx context.Context) AzureFileStorageWriteSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileStorageWriteSettingsOutput).ToAzureFileStorageWriteSettingsPtrOutputWithContext(ctx)
}

// AzureFileStorageWriteSettingsPtrInput is an input type that accepts AzureFileStorageWriteSettingsArgs, AzureFileStorageWriteSettingsPtr and AzureFileStorageWriteSettingsPtrOutput values.
// You can construct a concrete instance of `AzureFileStorageWriteSettingsPtrInput` via:
//
//	        AzureFileStorageWriteSettingsArgs{...}
//
//	or:
//
//	        nil
type AzureFileStorageWriteSettingsPtrInput interface {
	pulumi.Input

	ToAzureFileStorageWriteSettingsPtrOutput() AzureFileStorageWriteSettingsPtrOutput
	ToAzureFileStorageWriteSettingsPtrOutputWithContext(context.Context) AzureFileStorageWriteSettingsPtrOutput
}

type azureFileStorageWriteSettingsPtrType AzureFileStorageWriteSettingsArgs

func AzureFileStorageWriteSettingsPtr(v *AzureFileStorageWriteSettingsArgs) AzureFileStorageWriteSettingsPtrInput {
	return (*azureFileStorageWriteSettingsPtrType)(v)
}

func (*azureFileStorageWriteSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureFileStorageWriteSettings)(nil)).Elem()
}

func (i *azureFileStorageWriteSettingsPtrType) ToAzureFileStorageWriteSettingsPtrOutput() AzureFileStorageWriteSettingsPtrOutput {
	return i.ToAzureFileStorageWriteSettingsPtrOutputWithContext(context.Background())
}

func (i *azureFileStorageWriteSettingsPtrType) ToAzureFileStorageWriteSettingsPtrOutputWithContext(ctx context.Context) AzureFileStorageWriteSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileStorageWriteSettingsPtrOutput)
}

// Azure File Storage write settings.
type AzureFileStorageWriteSettingsOutput struct{ *pulumi.OutputState }

func (AzureFileStorageWriteSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileStorageWriteSettings)(nil)).Elem()
}

func (o AzureFileStorageWriteSettingsOutput) ToAzureFileStorageWriteSettingsOutput() AzureFileStorageWriteSettingsOutput {
	return o
}

func (o AzureFileStorageWriteSettingsOutput) ToAzureFileStorageWriteSettingsOutputWithContext(ctx context.Context) AzureFileStorageWriteSettingsOutput {
	return o
}

func (o AzureFileStorageWriteSettingsOutput) ToAzureFileStorageWriteSettingsPtrOutput() AzureFileStorageWriteSettingsPtrOutput {
	return o.ToAzureFileStorageWriteSettingsPtrOutputWithContext(context.Background())
}

func (o AzureFileStorageWriteSettingsOutput) ToAzureFileStorageWriteSettingsPtrOutputWithContext(ctx context.Context) AzureFileStorageWriteSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureFileStorageWriteSettings) *AzureFileStorageWriteSettings {
		return &v
	}).(AzureFileStorageWriteSettingsPtrOutput)
}

// The type of copy behavior for copy sink.
func (o AzureFileStorageWriteSettingsOutput) CopyBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageWriteSettings) interface{} { return v.CopyBehavior }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureFileStorageWriteSettingsOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageWriteSettings) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureFileStorageWriteSettingsOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageWriteSettings) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
func (o AzureFileStorageWriteSettingsOutput) Metadata() MetadataItemArrayOutput {
	return o.ApplyT(func(v AzureFileStorageWriteSettings) []MetadataItem { return v.Metadata }).(MetadataItemArrayOutput)
}

// The write setting type.
// Expected value is 'AzureFileStorageWriteSettings'.
func (o AzureFileStorageWriteSettingsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileStorageWriteSettings) string { return v.Type }).(pulumi.StringOutput)
}

type AzureFileStorageWriteSettingsPtrOutput struct{ *pulumi.OutputState }

func (AzureFileStorageWriteSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureFileStorageWriteSettings)(nil)).Elem()
}

func (o AzureFileStorageWriteSettingsPtrOutput) ToAzureFileStorageWriteSettingsPtrOutput() AzureFileStorageWriteSettingsPtrOutput {
	return o
}

func (o AzureFileStorageWriteSettingsPtrOutput) ToAzureFileStorageWriteSettingsPtrOutputWithContext(ctx context.Context) AzureFileStorageWriteSettingsPtrOutput {
	return o
}

func (o AzureFileStorageWriteSettingsPtrOutput) Elem() AzureFileStorageWriteSettingsOutput {
	return o.ApplyT(func(v *AzureFileStorageWriteSettings) AzureFileStorageWriteSettings {
		if v != nil {
			return *v
		}
		var ret AzureFileStorageWriteSettings
		return ret
	}).(AzureFileStorageWriteSettingsOutput)
}

// The type of copy behavior for copy sink.
func (o AzureFileStorageWriteSettingsPtrOutput) CopyBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureFileStorageWriteSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.CopyBehavior
	}).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureFileStorageWriteSettingsPtrOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureFileStorageWriteSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableMetricsCollection
	}).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureFileStorageWriteSettingsPtrOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureFileStorageWriteSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentConnections
	}).(pulumi.AnyOutput)
}

// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
func (o AzureFileStorageWriteSettingsPtrOutput) Metadata() MetadataItemArrayOutput {
	return o.ApplyT(func(v *AzureFileStorageWriteSettings) []MetadataItem {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(MetadataItemArrayOutput)
}

// The write setting type.
// Expected value is 'AzureFileStorageWriteSettings'.
func (o AzureFileStorageWriteSettingsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFileStorageWriteSettings) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Azure File Storage write settings.
type AzureFileStorageWriteSettingsResponse struct {
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
	Metadata []MetadataItemResponse `pulumi:"metadata"`
	// The write setting type.
	// Expected value is 'AzureFileStorageWriteSettings'.
	Type string `pulumi:"type"`
}

// Azure File Storage write settings.
type AzureFileStorageWriteSettingsResponseOutput struct{ *pulumi.OutputState }

func (AzureFileStorageWriteSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileStorageWriteSettingsResponse)(nil)).Elem()
}

func (o AzureFileStorageWriteSettingsResponseOutput) ToAzureFileStorageWriteSettingsResponseOutput() AzureFileStorageWriteSettingsResponseOutput {
	return o
}

func (o AzureFileStorageWriteSettingsResponseOutput) ToAzureFileStorageWriteSettingsResponseOutputWithContext(ctx context.Context) AzureFileStorageWriteSettingsResponseOutput {
	return o
}

// The type of copy behavior for copy sink.
func (o AzureFileStorageWriteSettingsResponseOutput) CopyBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageWriteSettingsResponse) interface{} { return v.CopyBehavior }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureFileStorageWriteSettingsResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageWriteSettingsResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureFileStorageWriteSettingsResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileStorageWriteSettingsResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
func (o AzureFileStorageWriteSettingsResponseOutput) Metadata() MetadataItemResponseArrayOutput {
	return o.ApplyT(func(v AzureFileStorageWriteSettingsResponse) []MetadataItemResponse { return v.Metadata }).(MetadataItemResponseArrayOutput)
}

// The write setting type.
// Expected value is 'AzureFileStorageWriteSettings'.
func (o AzureFileStorageWriteSettingsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileStorageWriteSettingsResponse) string { return v.Type }).(pulumi.StringOutput)
}

type AzureFileStorageWriteSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureFileStorageWriteSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureFileStorageWriteSettingsResponse)(nil)).Elem()
}

func (o AzureFileStorageWriteSettingsResponsePtrOutput) ToAzureFileStorageWriteSettingsResponsePtrOutput() AzureFileStorageWriteSettingsResponsePtrOutput {
	return o
}

func (o AzureFileStorageWriteSettingsResponsePtrOutput) ToAzureFileStorageWriteSettingsResponsePtrOutputWithContext(ctx context.Context) AzureFileStorageWriteSettingsResponsePtrOutput {
	return o
}

func (o AzureFileStorageWriteSettingsResponsePtrOutput) Elem() AzureFileStorageWriteSettingsResponseOutput {
	return o.ApplyT(func(v *AzureFileStorageWriteSettingsResponse) AzureFileStorageWriteSettingsResponse {
		if v != nil {
			return *v
		}
		var ret AzureFileStorageWriteSettingsResponse
		return ret
	}).(AzureFileStorageWriteSettingsResponseOutput)
}

// The type of copy behavior for copy sink.
func (o AzureFileStorageWriteSettingsResponsePtrOutput) CopyBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureFileStorageWriteSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.CopyBehavior
	}).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureFileStorageWriteSettingsResponsePtrOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureFileStorageWriteSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableMetricsCollection
	}).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureFileStorageWriteSettingsResponsePtrOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureFileStorageWriteSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentConnections
	}).(pulumi.AnyOutput)
}

// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
func (o AzureFileStorageWriteSettingsResponsePtrOutput) Metadata() MetadataItemResponseArrayOutput {
	return o.ApplyT(func(v *AzureFileStorageWriteSettingsResponse) []MetadataItemResponse {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(MetadataItemResponseArrayOutput)
}

// The write setting type.
// Expected value is 'AzureFileStorageWriteSettings'.
func (o AzureFileStorageWriteSettingsResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFileStorageWriteSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Azure Function activity.
type AzureFunctionActivity struct {
	// Represents the payload that will be sent to the endpoint. Required for POST/PUT method, not allowed for GET method Type: string (or Expression with resultType string).
	Body interface{} `pulumi:"body"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Name of the Function that the Azure Function Activity will call. Type: string (or Expression with resultType string)
	FunctionName interface{} `pulumi:"functionName"`
	// Represents the headers that will be sent to the request. For example, to set the language and type on a request: "headers" : { "Accept-Language": "en-us", "Content-Type": "application/json" }. Type: string (or Expression with resultType string).
	Headers map[string]string `pulumi:"headers"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Rest API method for target endpoint.
	Method string `pulumi:"method"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'AzureFunctionActivity'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// AzureFunctionActivityInput is an input type that accepts AzureFunctionActivityArgs and AzureFunctionActivityOutput values.
// You can construct a concrete instance of `AzureFunctionActivityInput` via:
//
//	AzureFunctionActivityArgs{...}
type AzureFunctionActivityInput interface {
	pulumi.Input

	ToAzureFunctionActivityOutput() AzureFunctionActivityOutput
	ToAzureFunctionActivityOutputWithContext(context.Context) AzureFunctionActivityOutput
}

// Azure Function activity.
type AzureFunctionActivityArgs struct {
	// Represents the payload that will be sent to the endpoint. Required for POST/PUT method, not allowed for GET method Type: string (or Expression with resultType string).
	Body pulumi.Input `pulumi:"body"`
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Name of the Function that the Azure Function Activity will call. Type: string (or Expression with resultType string)
	FunctionName pulumi.Input `pulumi:"functionName"`
	// Represents the headers that will be sent to the request. For example, to set the language and type on a request: "headers" : { "Accept-Language": "en-us", "Content-Type": "application/json" }. Type: string (or Expression with resultType string).
	Headers pulumi.StringMapInput `pulumi:"headers"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferencePtrInput `pulumi:"linkedServiceName"`
	// Rest API method for target endpoint.
	Method pulumi.StringInput `pulumi:"method"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs pulumi.StringPtrInput `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy ActivityPolicyPtrInput `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Type of activity.
	// Expected value is 'AzureFunctionActivity'.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
}

func (AzureFunctionActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFunctionActivity)(nil)).Elem()
}

func (i AzureFunctionActivityArgs) ToAzureFunctionActivityOutput() AzureFunctionActivityOutput {
	return i.ToAzureFunctionActivityOutputWithContext(context.Background())
}

func (i AzureFunctionActivityArgs) ToAzureFunctionActivityOutputWithContext(ctx context.Context) AzureFunctionActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFunctionActivityOutput)
}

// Azure Function activity.
type AzureFunctionActivityOutput struct{ *pulumi.OutputState }

func (AzureFunctionActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFunctionActivity)(nil)).Elem()
}

func (o AzureFunctionActivityOutput) ToAzureFunctionActivityOutput() AzureFunctionActivityOutput {
	return o
}

func (o AzureFunctionActivityOutput) ToAzureFunctionActivityOutputWithContext(ctx context.Context) AzureFunctionActivityOutput {
	return o
}

// Represents the payload that will be sent to the endpoint. Required for POST/PUT method, not allowed for GET method Type: string (or Expression with resultType string).
func (o AzureFunctionActivityOutput) Body() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFunctionActivity) interface{} { return v.Body }).(pulumi.AnyOutput)
}

// Activity depends on condition.
func (o AzureFunctionActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v AzureFunctionActivity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o AzureFunctionActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFunctionActivity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Name of the Function that the Azure Function Activity will call. Type: string (or Expression with resultType string)
func (o AzureFunctionActivityOutput) FunctionName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFunctionActivity) interface{} { return v.FunctionName }).(pulumi.AnyOutput)
}

// Represents the headers that will be sent to the request. For example, to set the language and type on a request: "headers" : { "Accept-Language": "en-us", "Content-Type": "application/json" }. Type: string (or Expression with resultType string).
func (o AzureFunctionActivityOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureFunctionActivity) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

// Linked service reference.
func (o AzureFunctionActivityOutput) LinkedServiceName() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v AzureFunctionActivity) *LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferencePtrOutput)
}

// Rest API method for target endpoint.
func (o AzureFunctionActivityOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionActivity) string { return v.Method }).(pulumi.StringOutput)
}

// Activity name.
func (o AzureFunctionActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionActivity) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o AzureFunctionActivityOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFunctionActivity) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o AzureFunctionActivityOutput) Policy() ActivityPolicyPtrOutput {
	return o.ApplyT(func(v AzureFunctionActivity) *ActivityPolicy { return v.Policy }).(ActivityPolicyPtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o AzureFunctionActivityOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFunctionActivity) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'AzureFunctionActivity'.
func (o AzureFunctionActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionActivity) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o AzureFunctionActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v AzureFunctionActivity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

// Azure Function activity.
type AzureFunctionActivityResponse struct {
	// Represents the payload that will be sent to the endpoint. Required for POST/PUT method, not allowed for GET method Type: string (or Expression with resultType string).
	Body interface{} `pulumi:"body"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Name of the Function that the Azure Function Activity will call. Type: string (or Expression with resultType string)
	FunctionName interface{} `pulumi:"functionName"`
	// Represents the headers that will be sent to the request. For example, to set the language and type on a request: "headers" : { "Accept-Language": "en-us", "Content-Type": "application/json" }. Type: string (or Expression with resultType string).
	Headers map[string]string `pulumi:"headers"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Rest API method for target endpoint.
	Method string `pulumi:"method"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'AzureFunctionActivity'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Azure Function activity.
type AzureFunctionActivityResponseOutput struct{ *pulumi.OutputState }

func (AzureFunctionActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFunctionActivityResponse)(nil)).Elem()
}

func (o AzureFunctionActivityResponseOutput) ToAzureFunctionActivityResponseOutput() AzureFunctionActivityResponseOutput {
	return o
}

func (o AzureFunctionActivityResponseOutput) ToAzureFunctionActivityResponseOutputWithContext(ctx context.Context) AzureFunctionActivityResponseOutput {
	return o
}

// Represents the payload that will be sent to the endpoint. Required for POST/PUT method, not allowed for GET method Type: string (or Expression with resultType string).
func (o AzureFunctionActivityResponseOutput) Body() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFunctionActivityResponse) interface{} { return v.Body }).(pulumi.AnyOutput)
}

// Activity depends on condition.
func (o AzureFunctionActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v AzureFunctionActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o AzureFunctionActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFunctionActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Name of the Function that the Azure Function Activity will call. Type: string (or Expression with resultType string)
func (o AzureFunctionActivityResponseOutput) FunctionName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFunctionActivityResponse) interface{} { return v.FunctionName }).(pulumi.AnyOutput)
}

// Represents the headers that will be sent to the request. For example, to set the language and type on a request: "headers" : { "Accept-Language": "en-us", "Content-Type": "application/json" }. Type: string (or Expression with resultType string).
func (o AzureFunctionActivityResponseOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureFunctionActivityResponse) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

// Linked service reference.
func (o AzureFunctionActivityResponseOutput) LinkedServiceName() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureFunctionActivityResponse) *LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponsePtrOutput)
}

// Rest API method for target endpoint.
func (o AzureFunctionActivityResponseOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionActivityResponse) string { return v.Method }).(pulumi.StringOutput)
}

// Activity name.
func (o AzureFunctionActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o AzureFunctionActivityResponseOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFunctionActivityResponse) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o AzureFunctionActivityResponseOutput) Policy() ActivityPolicyResponsePtrOutput {
	return o.ApplyT(func(v AzureFunctionActivityResponse) *ActivityPolicyResponse { return v.Policy }).(ActivityPolicyResponsePtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o AzureFunctionActivityResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFunctionActivityResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'AzureFunctionActivity'.
func (o AzureFunctionActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o AzureFunctionActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v AzureFunctionActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

// Azure Function linked service.
type AzureFunctionLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication (Required to specify MSI) used to connect to AzureFunction. Type: string (or Expression with resultType string).
	Authentication interface{} `pulumi:"authentication"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The endpoint of the Azure Function App. URL will be in the format https://<accountName>.azurewebsites.net. Type: string (or Expression with resultType string).
	FunctionAppUrl interface{} `pulumi:"functionAppUrl"`
	// Function or Host key for Azure Function App.
	FunctionKey interface{} `pulumi:"functionKey"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Allowed token audiences for azure function. Type: string (or Expression with resultType string).
	ResourceId interface{} `pulumi:"resourceId"`
	// Type of linked service.
	// Expected value is 'AzureFunction'.
	Type string `pulumi:"type"`
}

// AzureFunctionLinkedServiceInput is an input type that accepts AzureFunctionLinkedServiceArgs and AzureFunctionLinkedServiceOutput values.
// You can construct a concrete instance of `AzureFunctionLinkedServiceInput` via:
//
//	AzureFunctionLinkedServiceArgs{...}
type AzureFunctionLinkedServiceInput interface {
	pulumi.Input

	ToAzureFunctionLinkedServiceOutput() AzureFunctionLinkedServiceOutput
	ToAzureFunctionLinkedServiceOutputWithContext(context.Context) AzureFunctionLinkedServiceOutput
}

// Azure Function linked service.
type AzureFunctionLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Type of authentication (Required to specify MSI) used to connect to AzureFunction. Type: string (or Expression with resultType string).
	Authentication pulumi.Input `pulumi:"authentication"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential CredentialReferencePtrInput `pulumi:"credential"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// The endpoint of the Azure Function App. URL will be in the format https://<accountName>.azurewebsites.net. Type: string (or Expression with resultType string).
	FunctionAppUrl pulumi.Input `pulumi:"functionAppUrl"`
	// Function or Host key for Azure Function App.
	FunctionKey pulumi.Input `pulumi:"functionKey"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Allowed token audiences for azure function. Type: string (or Expression with resultType string).
	ResourceId pulumi.Input `pulumi:"resourceId"`
	// Type of linked service.
	// Expected value is 'AzureFunction'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureFunctionLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFunctionLinkedService)(nil)).Elem()
}

func (i AzureFunctionLinkedServiceArgs) ToAzureFunctionLinkedServiceOutput() AzureFunctionLinkedServiceOutput {
	return i.ToAzureFunctionLinkedServiceOutputWithContext(context.Background())
}

func (i AzureFunctionLinkedServiceArgs) ToAzureFunctionLinkedServiceOutputWithContext(ctx context.Context) AzureFunctionLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFunctionLinkedServiceOutput)
}

// Azure Function linked service.
type AzureFunctionLinkedServiceOutput struct{ *pulumi.OutputState }

func (AzureFunctionLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFunctionLinkedService)(nil)).Elem()
}

func (o AzureFunctionLinkedServiceOutput) ToAzureFunctionLinkedServiceOutput() AzureFunctionLinkedServiceOutput {
	return o
}

func (o AzureFunctionLinkedServiceOutput) ToAzureFunctionLinkedServiceOutputWithContext(ctx context.Context) AzureFunctionLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzureFunctionLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureFunctionLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Type of authentication (Required to specify MSI) used to connect to AzureFunction. Type: string (or Expression with resultType string).
func (o AzureFunctionLinkedServiceOutput) Authentication() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFunctionLinkedService) interface{} { return v.Authentication }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureFunctionLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzureFunctionLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The credential reference containing authentication information.
func (o AzureFunctionLinkedServiceOutput) Credential() CredentialReferencePtrOutput {
	return o.ApplyT(func(v AzureFunctionLinkedService) *CredentialReference { return v.Credential }).(CredentialReferencePtrOutput)
}

// Linked service description.
func (o AzureFunctionLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFunctionLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AzureFunctionLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFunctionLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The endpoint of the Azure Function App. URL will be in the format https://<accountName>.azurewebsites.net. Type: string (or Expression with resultType string).
func (o AzureFunctionLinkedServiceOutput) FunctionAppUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFunctionLinkedService) interface{} { return v.FunctionAppUrl }).(pulumi.AnyOutput)
}

// Function or Host key for Azure Function App.
func (o AzureFunctionLinkedServiceOutput) FunctionKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFunctionLinkedService) interface{} { return v.FunctionKey }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureFunctionLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureFunctionLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Allowed token audiences for azure function. Type: string (or Expression with resultType string).
func (o AzureFunctionLinkedServiceOutput) ResourceId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFunctionLinkedService) interface{} { return v.ResourceId }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AzureFunction'.
func (o AzureFunctionLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Function linked service.
type AzureFunctionLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication (Required to specify MSI) used to connect to AzureFunction. Type: string (or Expression with resultType string).
	Authentication interface{} `pulumi:"authentication"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The endpoint of the Azure Function App. URL will be in the format https://<accountName>.azurewebsites.net. Type: string (or Expression with resultType string).
	FunctionAppUrl interface{} `pulumi:"functionAppUrl"`
	// Function or Host key for Azure Function App.
	FunctionKey interface{} `pulumi:"functionKey"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Allowed token audiences for azure function. Type: string (or Expression with resultType string).
	ResourceId interface{} `pulumi:"resourceId"`
	// Type of linked service.
	// Expected value is 'AzureFunction'.
	Type string `pulumi:"type"`
}

// Azure Function linked service.
type AzureFunctionLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureFunctionLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFunctionLinkedServiceResponse)(nil)).Elem()
}

func (o AzureFunctionLinkedServiceResponseOutput) ToAzureFunctionLinkedServiceResponseOutput() AzureFunctionLinkedServiceResponseOutput {
	return o
}

func (o AzureFunctionLinkedServiceResponseOutput) ToAzureFunctionLinkedServiceResponseOutputWithContext(ctx context.Context) AzureFunctionLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzureFunctionLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureFunctionLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Type of authentication (Required to specify MSI) used to connect to AzureFunction. Type: string (or Expression with resultType string).
func (o AzureFunctionLinkedServiceResponseOutput) Authentication() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFunctionLinkedServiceResponse) interface{} { return v.Authentication }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureFunctionLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureFunctionLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The credential reference containing authentication information.
func (o AzureFunctionLinkedServiceResponseOutput) Credential() CredentialReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureFunctionLinkedServiceResponse) *CredentialReferenceResponse { return v.Credential }).(CredentialReferenceResponsePtrOutput)
}

// Linked service description.
func (o AzureFunctionLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFunctionLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AzureFunctionLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFunctionLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The endpoint of the Azure Function App. URL will be in the format https://<accountName>.azurewebsites.net. Type: string (or Expression with resultType string).
func (o AzureFunctionLinkedServiceResponseOutput) FunctionAppUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFunctionLinkedServiceResponse) interface{} { return v.FunctionAppUrl }).(pulumi.AnyOutput)
}

// Function or Host key for Azure Function App.
func (o AzureFunctionLinkedServiceResponseOutput) FunctionKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFunctionLinkedServiceResponse) interface{} { return v.FunctionKey }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureFunctionLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureFunctionLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Allowed token audiences for azure function. Type: string (or Expression with resultType string).
func (o AzureFunctionLinkedServiceResponseOutput) ResourceId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFunctionLinkedServiceResponse) interface{} { return v.ResourceId }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AzureFunction'.
func (o AzureFunctionLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Key Vault linked service.
type AzureKeyVaultLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The base URL of the Azure Key Vault. e.g. https://myakv.vault.azure.net Type: string (or Expression with resultType string).
	BaseUrl interface{} `pulumi:"baseUrl"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'AzureKeyVault'.
	Type string `pulumi:"type"`
}

// AzureKeyVaultLinkedServiceInput is an input type that accepts AzureKeyVaultLinkedServiceArgs and AzureKeyVaultLinkedServiceOutput values.
// You can construct a concrete instance of `AzureKeyVaultLinkedServiceInput` via:
//
//	AzureKeyVaultLinkedServiceArgs{...}
type AzureKeyVaultLinkedServiceInput interface {
	pulumi.Input

	ToAzureKeyVaultLinkedServiceOutput() AzureKeyVaultLinkedServiceOutput
	ToAzureKeyVaultLinkedServiceOutputWithContext(context.Context) AzureKeyVaultLinkedServiceOutput
}

// Azure Key Vault linked service.
type AzureKeyVaultLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The base URL of the Azure Key Vault. e.g. https://myakv.vault.azure.net Type: string (or Expression with resultType string).
	BaseUrl pulumi.Input `pulumi:"baseUrl"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential CredentialReferencePtrInput `pulumi:"credential"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'AzureKeyVault'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureKeyVaultLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureKeyVaultLinkedService)(nil)).Elem()
}

func (i AzureKeyVaultLinkedServiceArgs) ToAzureKeyVaultLinkedServiceOutput() AzureKeyVaultLinkedServiceOutput {
	return i.ToAzureKeyVaultLinkedServiceOutputWithContext(context.Background())
}

func (i AzureKeyVaultLinkedServiceArgs) ToAzureKeyVaultLinkedServiceOutputWithContext(ctx context.Context) AzureKeyVaultLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureKeyVaultLinkedServiceOutput)
}

// Azure Key Vault linked service.
type AzureKeyVaultLinkedServiceOutput struct{ *pulumi.OutputState }

func (AzureKeyVaultLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureKeyVaultLinkedService)(nil)).Elem()
}

func (o AzureKeyVaultLinkedServiceOutput) ToAzureKeyVaultLinkedServiceOutput() AzureKeyVaultLinkedServiceOutput {
	return o
}

func (o AzureKeyVaultLinkedServiceOutput) ToAzureKeyVaultLinkedServiceOutputWithContext(ctx context.Context) AzureKeyVaultLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzureKeyVaultLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureKeyVaultLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The base URL of the Azure Key Vault. e.g. https://myakv.vault.azure.net Type: string (or Expression with resultType string).
func (o AzureKeyVaultLinkedServiceOutput) BaseUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureKeyVaultLinkedService) interface{} { return v.BaseUrl }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureKeyVaultLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzureKeyVaultLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The credential reference containing authentication information.
func (o AzureKeyVaultLinkedServiceOutput) Credential() CredentialReferencePtrOutput {
	return o.ApplyT(func(v AzureKeyVaultLinkedService) *CredentialReference { return v.Credential }).(CredentialReferencePtrOutput)
}

// Linked service description.
func (o AzureKeyVaultLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureKeyVaultLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AzureKeyVaultLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureKeyVaultLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
// Expected value is 'AzureKeyVault'.
func (o AzureKeyVaultLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureKeyVaultLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Key Vault linked service.
type AzureKeyVaultLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The base URL of the Azure Key Vault. e.g. https://myakv.vault.azure.net Type: string (or Expression with resultType string).
	BaseUrl interface{} `pulumi:"baseUrl"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'AzureKeyVault'.
	Type string `pulumi:"type"`
}

// Azure Key Vault linked service.
type AzureKeyVaultLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureKeyVaultLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureKeyVaultLinkedServiceResponse)(nil)).Elem()
}

func (o AzureKeyVaultLinkedServiceResponseOutput) ToAzureKeyVaultLinkedServiceResponseOutput() AzureKeyVaultLinkedServiceResponseOutput {
	return o
}

func (o AzureKeyVaultLinkedServiceResponseOutput) ToAzureKeyVaultLinkedServiceResponseOutputWithContext(ctx context.Context) AzureKeyVaultLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzureKeyVaultLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureKeyVaultLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The base URL of the Azure Key Vault. e.g. https://myakv.vault.azure.net Type: string (or Expression with resultType string).
func (o AzureKeyVaultLinkedServiceResponseOutput) BaseUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureKeyVaultLinkedServiceResponse) interface{} { return v.BaseUrl }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureKeyVaultLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureKeyVaultLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The credential reference containing authentication information.
func (o AzureKeyVaultLinkedServiceResponseOutput) Credential() CredentialReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureKeyVaultLinkedServiceResponse) *CredentialReferenceResponse { return v.Credential }).(CredentialReferenceResponsePtrOutput)
}

// Linked service description.
func (o AzureKeyVaultLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureKeyVaultLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AzureKeyVaultLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureKeyVaultLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
// Expected value is 'AzureKeyVault'.
func (o AzureKeyVaultLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureKeyVaultLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Key Vault secret reference.
type AzureKeyVaultSecretReference struct {
	// The name of the secret in Azure Key Vault. Type: string (or Expression with resultType string).
	SecretName interface{} `pulumi:"secretName"`
	// The version of the secret in Azure Key Vault. The default value is the latest version of the secret. Type: string (or Expression with resultType string).
	SecretVersion interface{} `pulumi:"secretVersion"`
	// The Azure Key Vault linked service reference.
	Store LinkedServiceReference `pulumi:"store"`
	// Type of the secret.
	// Expected value is 'AzureKeyVaultSecret'.
	Type string `pulumi:"type"`
}

// AzureKeyVaultSecretReferenceInput is an input type that accepts AzureKeyVaultSecretReferenceArgs and AzureKeyVaultSecretReferenceOutput values.
// You can construct a concrete instance of `AzureKeyVaultSecretReferenceInput` via:
//
//	AzureKeyVaultSecretReferenceArgs{...}
type AzureKeyVaultSecretReferenceInput interface {
	pulumi.Input

	ToAzureKeyVaultSecretReferenceOutput() AzureKeyVaultSecretReferenceOutput
	ToAzureKeyVaultSecretReferenceOutputWithContext(context.Context) AzureKeyVaultSecretReferenceOutput
}

// Azure Key Vault secret reference.
type AzureKeyVaultSecretReferenceArgs struct {
	// The name of the secret in Azure Key Vault. Type: string (or Expression with resultType string).
	SecretName pulumi.Input `pulumi:"secretName"`
	// The version of the secret in Azure Key Vault. The default value is the latest version of the secret. Type: string (or Expression with resultType string).
	SecretVersion pulumi.Input `pulumi:"secretVersion"`
	// The Azure Key Vault linked service reference.
	Store LinkedServiceReferenceInput `pulumi:"store"`
	// Type of the secret.
	// Expected value is 'AzureKeyVaultSecret'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureKeyVaultSecretReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureKeyVaultSecretReference)(nil)).Elem()
}

func (i AzureKeyVaultSecretReferenceArgs) ToAzureKeyVaultSecretReferenceOutput() AzureKeyVaultSecretReferenceOutput {
	return i.ToAzureKeyVaultSecretReferenceOutputWithContext(context.Background())
}

func (i AzureKeyVaultSecretReferenceArgs) ToAzureKeyVaultSecretReferenceOutputWithContext(ctx context.Context) AzureKeyVaultSecretReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureKeyVaultSecretReferenceOutput)
}

func (i AzureKeyVaultSecretReferenceArgs) ToAzureKeyVaultSecretReferencePtrOutput() AzureKeyVaultSecretReferencePtrOutput {
	return i.ToAzureKeyVaultSecretReferencePtrOutputWithContext(context.Background())
}

func (i AzureKeyVaultSecretReferenceArgs) ToAzureKeyVaultSecretReferencePtrOutputWithContext(ctx context.Context) AzureKeyVaultSecretReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureKeyVaultSecretReferenceOutput).ToAzureKeyVaultSecretReferencePtrOutputWithContext(ctx)
}

// AzureKeyVaultSecretReferencePtrInput is an input type that accepts AzureKeyVaultSecretReferenceArgs, AzureKeyVaultSecretReferencePtr and AzureKeyVaultSecretReferencePtrOutput values.
// You can construct a concrete instance of `AzureKeyVaultSecretReferencePtrInput` via:
//
//	        AzureKeyVaultSecretReferenceArgs{...}
//
//	or:
//
//	        nil
type AzureKeyVaultSecretReferencePtrInput interface {
	pulumi.Input

	ToAzureKeyVaultSecretReferencePtrOutput() AzureKeyVaultSecretReferencePtrOutput
	ToAzureKeyVaultSecretReferencePtrOutputWithContext(context.Context) AzureKeyVaultSecretReferencePtrOutput
}

type azureKeyVaultSecretReferencePtrType AzureKeyVaultSecretReferenceArgs

func AzureKeyVaultSecretReferencePtr(v *AzureKeyVaultSecretReferenceArgs) AzureKeyVaultSecretReferencePtrInput {
	return (*azureKeyVaultSecretReferencePtrType)(v)
}

func (*azureKeyVaultSecretReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureKeyVaultSecretReference)(nil)).Elem()
}

func (i *azureKeyVaultSecretReferencePtrType) ToAzureKeyVaultSecretReferencePtrOutput() AzureKeyVaultSecretReferencePtrOutput {
	return i.ToAzureKeyVaultSecretReferencePtrOutputWithContext(context.Background())
}

func (i *azureKeyVaultSecretReferencePtrType) ToAzureKeyVaultSecretReferencePtrOutputWithContext(ctx context.Context) AzureKeyVaultSecretReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureKeyVaultSecretReferencePtrOutput)
}

// Azure Key Vault secret reference.
type AzureKeyVaultSecretReferenceOutput struct{ *pulumi.OutputState }

func (AzureKeyVaultSecretReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureKeyVaultSecretReference)(nil)).Elem()
}

func (o AzureKeyVaultSecretReferenceOutput) ToAzureKeyVaultSecretReferenceOutput() AzureKeyVaultSecretReferenceOutput {
	return o
}

func (o AzureKeyVaultSecretReferenceOutput) ToAzureKeyVaultSecretReferenceOutputWithContext(ctx context.Context) AzureKeyVaultSecretReferenceOutput {
	return o
}

func (o AzureKeyVaultSecretReferenceOutput) ToAzureKeyVaultSecretReferencePtrOutput() AzureKeyVaultSecretReferencePtrOutput {
	return o.ToAzureKeyVaultSecretReferencePtrOutputWithContext(context.Background())
}

func (o AzureKeyVaultSecretReferenceOutput) ToAzureKeyVaultSecretReferencePtrOutputWithContext(ctx context.Context) AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureKeyVaultSecretReference) *AzureKeyVaultSecretReference {
		return &v
	}).(AzureKeyVaultSecretReferencePtrOutput)
}

// The name of the secret in Azure Key Vault. Type: string (or Expression with resultType string).
func (o AzureKeyVaultSecretReferenceOutput) SecretName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureKeyVaultSecretReference) interface{} { return v.SecretName }).(pulumi.AnyOutput)
}

// The version of the secret in Azure Key Vault. The default value is the latest version of the secret. Type: string (or Expression with resultType string).
func (o AzureKeyVaultSecretReferenceOutput) SecretVersion() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureKeyVaultSecretReference) interface{} { return v.SecretVersion }).(pulumi.AnyOutput)
}

// The Azure Key Vault linked service reference.
func (o AzureKeyVaultSecretReferenceOutput) Store() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v AzureKeyVaultSecretReference) LinkedServiceReference { return v.Store }).(LinkedServiceReferenceOutput)
}

// Type of the secret.
// Expected value is 'AzureKeyVaultSecret'.
func (o AzureKeyVaultSecretReferenceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureKeyVaultSecretReference) string { return v.Type }).(pulumi.StringOutput)
}

type AzureKeyVaultSecretReferencePtrOutput struct{ *pulumi.OutputState }

func (AzureKeyVaultSecretReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureKeyVaultSecretReference)(nil)).Elem()
}

func (o AzureKeyVaultSecretReferencePtrOutput) ToAzureKeyVaultSecretReferencePtrOutput() AzureKeyVaultSecretReferencePtrOutput {
	return o
}

func (o AzureKeyVaultSecretReferencePtrOutput) ToAzureKeyVaultSecretReferencePtrOutputWithContext(ctx context.Context) AzureKeyVaultSecretReferencePtrOutput {
	return o
}

func (o AzureKeyVaultSecretReferencePtrOutput) Elem() AzureKeyVaultSecretReferenceOutput {
	return o.ApplyT(func(v *AzureKeyVaultSecretReference) AzureKeyVaultSecretReference {
		if v != nil {
			return *v
		}
		var ret AzureKeyVaultSecretReference
		return ret
	}).(AzureKeyVaultSecretReferenceOutput)
}

// The name of the secret in Azure Key Vault. Type: string (or Expression with resultType string).
func (o AzureKeyVaultSecretReferencePtrOutput) SecretName() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureKeyVaultSecretReference) interface{} {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.AnyOutput)
}

// The version of the secret in Azure Key Vault. The default value is the latest version of the secret. Type: string (or Expression with resultType string).
func (o AzureKeyVaultSecretReferencePtrOutput) SecretVersion() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureKeyVaultSecretReference) interface{} {
		if v == nil {
			return nil
		}
		return v.SecretVersion
	}).(pulumi.AnyOutput)
}

// The Azure Key Vault linked service reference.
func (o AzureKeyVaultSecretReferencePtrOutput) Store() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v *AzureKeyVaultSecretReference) *LinkedServiceReference {
		if v == nil {
			return nil
		}
		return &v.Store
	}).(LinkedServiceReferencePtrOutput)
}

// Type of the secret.
// Expected value is 'AzureKeyVaultSecret'.
func (o AzureKeyVaultSecretReferencePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureKeyVaultSecretReference) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Azure Key Vault secret reference.
type AzureKeyVaultSecretReferenceResponse struct {
	// The name of the secret in Azure Key Vault. Type: string (or Expression with resultType string).
	SecretName interface{} `pulumi:"secretName"`
	// The version of the secret in Azure Key Vault. The default value is the latest version of the secret. Type: string (or Expression with resultType string).
	SecretVersion interface{} `pulumi:"secretVersion"`
	// The Azure Key Vault linked service reference.
	Store LinkedServiceReferenceResponse `pulumi:"store"`
	// Type of the secret.
	// Expected value is 'AzureKeyVaultSecret'.
	Type string `pulumi:"type"`
}

// Azure Key Vault secret reference.
type AzureKeyVaultSecretReferenceResponseOutput struct{ *pulumi.OutputState }

func (AzureKeyVaultSecretReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureKeyVaultSecretReferenceResponse)(nil)).Elem()
}

func (o AzureKeyVaultSecretReferenceResponseOutput) ToAzureKeyVaultSecretReferenceResponseOutput() AzureKeyVaultSecretReferenceResponseOutput {
	return o
}

func (o AzureKeyVaultSecretReferenceResponseOutput) ToAzureKeyVaultSecretReferenceResponseOutputWithContext(ctx context.Context) AzureKeyVaultSecretReferenceResponseOutput {
	return o
}

// The name of the secret in Azure Key Vault. Type: string (or Expression with resultType string).
func (o AzureKeyVaultSecretReferenceResponseOutput) SecretName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureKeyVaultSecretReferenceResponse) interface{} { return v.SecretName }).(pulumi.AnyOutput)
}

// The version of the secret in Azure Key Vault. The default value is the latest version of the secret. Type: string (or Expression with resultType string).
func (o AzureKeyVaultSecretReferenceResponseOutput) SecretVersion() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureKeyVaultSecretReferenceResponse) interface{} { return v.SecretVersion }).(pulumi.AnyOutput)
}

// The Azure Key Vault linked service reference.
func (o AzureKeyVaultSecretReferenceResponseOutput) Store() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AzureKeyVaultSecretReferenceResponse) LinkedServiceReferenceResponse { return v.Store }).(LinkedServiceReferenceResponseOutput)
}

// Type of the secret.
// Expected value is 'AzureKeyVaultSecret'.
func (o AzureKeyVaultSecretReferenceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureKeyVaultSecretReferenceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type AzureKeyVaultSecretReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureKeyVaultSecretReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureKeyVaultSecretReferenceResponse)(nil)).Elem()
}

func (o AzureKeyVaultSecretReferenceResponsePtrOutput) ToAzureKeyVaultSecretReferenceResponsePtrOutput() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o
}

func (o AzureKeyVaultSecretReferenceResponsePtrOutput) ToAzureKeyVaultSecretReferenceResponsePtrOutputWithContext(ctx context.Context) AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o
}

func (o AzureKeyVaultSecretReferenceResponsePtrOutput) Elem() AzureKeyVaultSecretReferenceResponseOutput {
	return o.ApplyT(func(v *AzureKeyVaultSecretReferenceResponse) AzureKeyVaultSecretReferenceResponse {
		if v != nil {
			return *v
		}
		var ret AzureKeyVaultSecretReferenceResponse
		return ret
	}).(AzureKeyVaultSecretReferenceResponseOutput)
}

// The name of the secret in Azure Key Vault. Type: string (or Expression with resultType string).
func (o AzureKeyVaultSecretReferenceResponsePtrOutput) SecretName() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureKeyVaultSecretReferenceResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.AnyOutput)
}

// The version of the secret in Azure Key Vault. The default value is the latest version of the secret. Type: string (or Expression with resultType string).
func (o AzureKeyVaultSecretReferenceResponsePtrOutput) SecretVersion() pulumi.AnyOutput {
	return o.ApplyT(func(v *AzureKeyVaultSecretReferenceResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.SecretVersion
	}).(pulumi.AnyOutput)
}

// The Azure Key Vault linked service reference.
func (o AzureKeyVaultSecretReferenceResponsePtrOutput) Store() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v *AzureKeyVaultSecretReferenceResponse) *LinkedServiceReferenceResponse {
		if v == nil {
			return nil
		}
		return &v.Store
	}).(LinkedServiceReferenceResponsePtrOutput)
}

// Type of the secret.
// Expected value is 'AzureKeyVaultSecret'.
func (o AzureKeyVaultSecretReferenceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureKeyVaultSecretReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Azure ML Batch Execution activity.
type AzureMLBatchExecutionActivity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Key,Value pairs to be passed to the Azure ML Batch Execution Service endpoint. Keys must match the names of web service parameters defined in the published Azure ML web service. Values will be passed in the GlobalParameters property of the Azure ML batch execution request.
	GlobalParameters map[string]interface{} `pulumi:"globalParameters"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'AzureMLBatchExecution'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
	// Key,Value pairs, mapping the names of Azure ML endpoint's Web Service Inputs to AzureMLWebServiceFile objects specifying the input Blob locations.. This information will be passed in the WebServiceInputs property of the Azure ML batch execution request.
	WebServiceInputs map[string]AzureMLWebServiceFile `pulumi:"webServiceInputs"`
	// Key,Value pairs, mapping the names of Azure ML endpoint's Web Service Outputs to AzureMLWebServiceFile objects specifying the output Blob locations. This information will be passed in the WebServiceOutputs property of the Azure ML batch execution request.
	WebServiceOutputs map[string]AzureMLWebServiceFile `pulumi:"webServiceOutputs"`
}

// AzureMLBatchExecutionActivityInput is an input type that accepts AzureMLBatchExecutionActivityArgs and AzureMLBatchExecutionActivityOutput values.
// You can construct a concrete instance of `AzureMLBatchExecutionActivityInput` via:
//
//	AzureMLBatchExecutionActivityArgs{...}
type AzureMLBatchExecutionActivityInput interface {
	pulumi.Input

	ToAzureMLBatchExecutionActivityOutput() AzureMLBatchExecutionActivityOutput
	ToAzureMLBatchExecutionActivityOutputWithContext(context.Context) AzureMLBatchExecutionActivityOutput
}

// Azure ML Batch Execution activity.
type AzureMLBatchExecutionActivityArgs struct {
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Key,Value pairs to be passed to the Azure ML Batch Execution Service endpoint. Keys must match the names of web service parameters defined in the published Azure ML web service. Values will be passed in the GlobalParameters property of the Azure ML batch execution request.
	GlobalParameters pulumi.MapInput `pulumi:"globalParameters"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferencePtrInput `pulumi:"linkedServiceName"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs pulumi.StringPtrInput `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy ActivityPolicyPtrInput `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Type of activity.
	// Expected value is 'AzureMLBatchExecution'.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
	// Key,Value pairs, mapping the names of Azure ML endpoint's Web Service Inputs to AzureMLWebServiceFile objects specifying the input Blob locations.. This information will be passed in the WebServiceInputs property of the Azure ML batch execution request.
	WebServiceInputs AzureMLWebServiceFileMapInput `pulumi:"webServiceInputs"`
	// Key,Value pairs, mapping the names of Azure ML endpoint's Web Service Outputs to AzureMLWebServiceFile objects specifying the output Blob locations. This information will be passed in the WebServiceOutputs property of the Azure ML batch execution request.
	WebServiceOutputs AzureMLWebServiceFileMapInput `pulumi:"webServiceOutputs"`
}

func (AzureMLBatchExecutionActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMLBatchExecutionActivity)(nil)).Elem()
}

func (i AzureMLBatchExecutionActivityArgs) ToAzureMLBatchExecutionActivityOutput() AzureMLBatchExecutionActivityOutput {
	return i.ToAzureMLBatchExecutionActivityOutputWithContext(context.Background())
}

func (i AzureMLBatchExecutionActivityArgs) ToAzureMLBatchExecutionActivityOutputWithContext(ctx context.Context) AzureMLBatchExecutionActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMLBatchExecutionActivityOutput)
}

// Azure ML Batch Execution activity.
type AzureMLBatchExecutionActivityOutput struct{ *pulumi.OutputState }

func (AzureMLBatchExecutionActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMLBatchExecutionActivity)(nil)).Elem()
}

func (o AzureMLBatchExecutionActivityOutput) ToAzureMLBatchExecutionActivityOutput() AzureMLBatchExecutionActivityOutput {
	return o
}

func (o AzureMLBatchExecutionActivityOutput) ToAzureMLBatchExecutionActivityOutputWithContext(ctx context.Context) AzureMLBatchExecutionActivityOutput {
	return o
}

// Activity depends on condition.
func (o AzureMLBatchExecutionActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v AzureMLBatchExecutionActivity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o AzureMLBatchExecutionActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMLBatchExecutionActivity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Key,Value pairs to be passed to the Azure ML Batch Execution Service endpoint. Keys must match the names of web service parameters defined in the published Azure ML web service. Values will be passed in the GlobalParameters property of the Azure ML batch execution request.
func (o AzureMLBatchExecutionActivityOutput) GlobalParameters() pulumi.MapOutput {
	return o.ApplyT(func(v AzureMLBatchExecutionActivity) map[string]interface{} { return v.GlobalParameters }).(pulumi.MapOutput)
}

// Linked service reference.
func (o AzureMLBatchExecutionActivityOutput) LinkedServiceName() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v AzureMLBatchExecutionActivity) *LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferencePtrOutput)
}

// Activity name.
func (o AzureMLBatchExecutionActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMLBatchExecutionActivity) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o AzureMLBatchExecutionActivityOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMLBatchExecutionActivity) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o AzureMLBatchExecutionActivityOutput) Policy() ActivityPolicyPtrOutput {
	return o.ApplyT(func(v AzureMLBatchExecutionActivity) *ActivityPolicy { return v.Policy }).(ActivityPolicyPtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o AzureMLBatchExecutionActivityOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMLBatchExecutionActivity) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'AzureMLBatchExecution'.
func (o AzureMLBatchExecutionActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMLBatchExecutionActivity) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o AzureMLBatchExecutionActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v AzureMLBatchExecutionActivity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

// Key,Value pairs, mapping the names of Azure ML endpoint's Web Service Inputs to AzureMLWebServiceFile objects specifying the input Blob locations.. This information will be passed in the WebServiceInputs property of the Azure ML batch execution request.
func (o AzureMLBatchExecutionActivityOutput) WebServiceInputs() AzureMLWebServiceFileMapOutput {
	return o.ApplyT(func(v AzureMLBatchExecutionActivity) map[string]AzureMLWebServiceFile { return v.WebServiceInputs }).(AzureMLWebServiceFileMapOutput)
}

// Key,Value pairs, mapping the names of Azure ML endpoint's Web Service Outputs to AzureMLWebServiceFile objects specifying the output Blob locations. This information will be passed in the WebServiceOutputs property of the Azure ML batch execution request.
func (o AzureMLBatchExecutionActivityOutput) WebServiceOutputs() AzureMLWebServiceFileMapOutput {
	return o.ApplyT(func(v AzureMLBatchExecutionActivity) map[string]AzureMLWebServiceFile { return v.WebServiceOutputs }).(AzureMLWebServiceFileMapOutput)
}

// Azure ML Batch Execution activity.
type AzureMLBatchExecutionActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Key,Value pairs to be passed to the Azure ML Batch Execution Service endpoint. Keys must match the names of web service parameters defined in the published Azure ML web service. Values will be passed in the GlobalParameters property of the Azure ML batch execution request.
	GlobalParameters map[string]interface{} `pulumi:"globalParameters"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'AzureMLBatchExecution'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
	// Key,Value pairs, mapping the names of Azure ML endpoint's Web Service Inputs to AzureMLWebServiceFile objects specifying the input Blob locations.. This information will be passed in the WebServiceInputs property of the Azure ML batch execution request.
	WebServiceInputs map[string]AzureMLWebServiceFileResponse `pulumi:"webServiceInputs"`
	// Key,Value pairs, mapping the names of Azure ML endpoint's Web Service Outputs to AzureMLWebServiceFile objects specifying the output Blob locations. This information will be passed in the WebServiceOutputs property of the Azure ML batch execution request.
	WebServiceOutputs map[string]AzureMLWebServiceFileResponse `pulumi:"webServiceOutputs"`
}

// Azure ML Batch Execution activity.
type AzureMLBatchExecutionActivityResponseOutput struct{ *pulumi.OutputState }

func (AzureMLBatchExecutionActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMLBatchExecutionActivityResponse)(nil)).Elem()
}

func (o AzureMLBatchExecutionActivityResponseOutput) ToAzureMLBatchExecutionActivityResponseOutput() AzureMLBatchExecutionActivityResponseOutput {
	return o
}

func (o AzureMLBatchExecutionActivityResponseOutput) ToAzureMLBatchExecutionActivityResponseOutputWithContext(ctx context.Context) AzureMLBatchExecutionActivityResponseOutput {
	return o
}

// Activity depends on condition.
func (o AzureMLBatchExecutionActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v AzureMLBatchExecutionActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o AzureMLBatchExecutionActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMLBatchExecutionActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Key,Value pairs to be passed to the Azure ML Batch Execution Service endpoint. Keys must match the names of web service parameters defined in the published Azure ML web service. Values will be passed in the GlobalParameters property of the Azure ML batch execution request.
func (o AzureMLBatchExecutionActivityResponseOutput) GlobalParameters() pulumi.MapOutput {
	return o.ApplyT(func(v AzureMLBatchExecutionActivityResponse) map[string]interface{} { return v.GlobalParameters }).(pulumi.MapOutput)
}

// Linked service reference.
func (o AzureMLBatchExecutionActivityResponseOutput) LinkedServiceName() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureMLBatchExecutionActivityResponse) *LinkedServiceReferenceResponse {
		return v.LinkedServiceName
	}).(LinkedServiceReferenceResponsePtrOutput)
}

// Activity name.
func (o AzureMLBatchExecutionActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMLBatchExecutionActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o AzureMLBatchExecutionActivityResponseOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMLBatchExecutionActivityResponse) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o AzureMLBatchExecutionActivityResponseOutput) Policy() ActivityPolicyResponsePtrOutput {
	return o.ApplyT(func(v AzureMLBatchExecutionActivityResponse) *ActivityPolicyResponse { return v.Policy }).(ActivityPolicyResponsePtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o AzureMLBatchExecutionActivityResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMLBatchExecutionActivityResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'AzureMLBatchExecution'.
func (o AzureMLBatchExecutionActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMLBatchExecutionActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o AzureMLBatchExecutionActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v AzureMLBatchExecutionActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

// Key,Value pairs, mapping the names of Azure ML endpoint's Web Service Inputs to AzureMLWebServiceFile objects specifying the input Blob locations.. This information will be passed in the WebServiceInputs property of the Azure ML batch execution request.
func (o AzureMLBatchExecutionActivityResponseOutput) WebServiceInputs() AzureMLWebServiceFileResponseMapOutput {
	return o.ApplyT(func(v AzureMLBatchExecutionActivityResponse) map[string]AzureMLWebServiceFileResponse {
		return v.WebServiceInputs
	}).(AzureMLWebServiceFileResponseMapOutput)
}

// Key,Value pairs, mapping the names of Azure ML endpoint's Web Service Outputs to AzureMLWebServiceFile objects specifying the output Blob locations. This information will be passed in the WebServiceOutputs property of the Azure ML batch execution request.
func (o AzureMLBatchExecutionActivityResponseOutput) WebServiceOutputs() AzureMLWebServiceFileResponseMapOutput {
	return o.ApplyT(func(v AzureMLBatchExecutionActivityResponse) map[string]AzureMLWebServiceFileResponse {
		return v.WebServiceOutputs
	}).(AzureMLWebServiceFileResponseMapOutput)
}

// Azure ML Execute Pipeline activity.
type AzureMLExecutePipelineActivity struct {
	// Whether to continue execution of other steps in the PipelineRun if a step fails. This information will be passed in the continueOnStepFailure property of the published pipeline execution request. Type: boolean (or Expression with resultType boolean).
	ContinueOnStepFailure interface{} `pulumi:"continueOnStepFailure"`
	// Dictionary used for changing data path assignments without retraining. Values will be passed in the dataPathAssignments property of the published pipeline execution request. Type: object (or Expression with resultType object).
	DataPathAssignments interface{} `pulumi:"dataPathAssignments"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Run history experiment name of the pipeline run. This information will be passed in the ExperimentName property of the published pipeline execution request. Type: string (or Expression with resultType string).
	ExperimentName interface{} `pulumi:"experimentName"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// The parent Azure ML Service pipeline run id. This information will be passed in the ParentRunId property of the published pipeline execution request. Type: string (or Expression with resultType string).
	MlParentRunId interface{} `pulumi:"mlParentRunId"`
	// ID of the published Azure ML pipeline endpoint. Type: string (or Expression with resultType string).
	MlPipelineEndpointId interface{} `pulumi:"mlPipelineEndpointId"`
	// ID of the published Azure ML pipeline. Type: string (or Expression with resultType string).
	MlPipelineId interface{} `pulumi:"mlPipelineId"`
	// Key,Value pairs to be passed to the published Azure ML pipeline endpoint. Keys must match the names of pipeline parameters defined in the published pipeline. Values will be passed in the ParameterAssignments property of the published pipeline execution request. Type: object with key value pairs (or Expression with resultType object).
	MlPipelineParameters interface{} `pulumi:"mlPipelineParameters"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'AzureMLExecutePipeline'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
	// Version of the published Azure ML pipeline endpoint. Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
}

// AzureMLExecutePipelineActivityInput is an input type that accepts AzureMLExecutePipelineActivityArgs and AzureMLExecutePipelineActivityOutput values.
// You can construct a concrete instance of `AzureMLExecutePipelineActivityInput` via:
//
//	AzureMLExecutePipelineActivityArgs{...}
type AzureMLExecutePipelineActivityInput interface {
	pulumi.Input

	ToAzureMLExecutePipelineActivityOutput() AzureMLExecutePipelineActivityOutput
	ToAzureMLExecutePipelineActivityOutputWithContext(context.Context) AzureMLExecutePipelineActivityOutput
}

// Azure ML Execute Pipeline activity.
type AzureMLExecutePipelineActivityArgs struct {
	// Whether to continue execution of other steps in the PipelineRun if a step fails. This information will be passed in the continueOnStepFailure property of the published pipeline execution request. Type: boolean (or Expression with resultType boolean).
	ContinueOnStepFailure pulumi.Input `pulumi:"continueOnStepFailure"`
	// Dictionary used for changing data path assignments without retraining. Values will be passed in the dataPathAssignments property of the published pipeline execution request. Type: object (or Expression with resultType object).
	DataPathAssignments pulumi.Input `pulumi:"dataPathAssignments"`
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Run history experiment name of the pipeline run. This information will be passed in the ExperimentName property of the published pipeline execution request. Type: string (or Expression with resultType string).
	ExperimentName pulumi.Input `pulumi:"experimentName"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferencePtrInput `pulumi:"linkedServiceName"`
	// The parent Azure ML Service pipeline run id. This information will be passed in the ParentRunId property of the published pipeline execution request. Type: string (or Expression with resultType string).
	MlParentRunId pulumi.Input `pulumi:"mlParentRunId"`
	// ID of the published Azure ML pipeline endpoint. Type: string (or Expression with resultType string).
	MlPipelineEndpointId pulumi.Input `pulumi:"mlPipelineEndpointId"`
	// ID of the published Azure ML pipeline. Type: string (or Expression with resultType string).
	MlPipelineId pulumi.Input `pulumi:"mlPipelineId"`
	// Key,Value pairs to be passed to the published Azure ML pipeline endpoint. Keys must match the names of pipeline parameters defined in the published pipeline. Values will be passed in the ParameterAssignments property of the published pipeline execution request. Type: object with key value pairs (or Expression with resultType object).
	MlPipelineParameters pulumi.Input `pulumi:"mlPipelineParameters"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs pulumi.StringPtrInput `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy ActivityPolicyPtrInput `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Type of activity.
	// Expected value is 'AzureMLExecutePipeline'.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
	// Version of the published Azure ML pipeline endpoint. Type: string (or Expression with resultType string).
	Version pulumi.Input `pulumi:"version"`
}

func (AzureMLExecutePipelineActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMLExecutePipelineActivity)(nil)).Elem()
}

func (i AzureMLExecutePipelineActivityArgs) ToAzureMLExecutePipelineActivityOutput() AzureMLExecutePipelineActivityOutput {
	return i.ToAzureMLExecutePipelineActivityOutputWithContext(context.Background())
}

func (i AzureMLExecutePipelineActivityArgs) ToAzureMLExecutePipelineActivityOutputWithContext(ctx context.Context) AzureMLExecutePipelineActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMLExecutePipelineActivityOutput)
}

// Azure ML Execute Pipeline activity.
type AzureMLExecutePipelineActivityOutput struct{ *pulumi.OutputState }

func (AzureMLExecutePipelineActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMLExecutePipelineActivity)(nil)).Elem()
}

func (o AzureMLExecutePipelineActivityOutput) ToAzureMLExecutePipelineActivityOutput() AzureMLExecutePipelineActivityOutput {
	return o
}

func (o AzureMLExecutePipelineActivityOutput) ToAzureMLExecutePipelineActivityOutputWithContext(ctx context.Context) AzureMLExecutePipelineActivityOutput {
	return o
}

// Whether to continue execution of other steps in the PipelineRun if a step fails. This information will be passed in the continueOnStepFailure property of the published pipeline execution request. Type: boolean (or Expression with resultType boolean).
func (o AzureMLExecutePipelineActivityOutput) ContinueOnStepFailure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLExecutePipelineActivity) interface{} { return v.ContinueOnStepFailure }).(pulumi.AnyOutput)
}

// Dictionary used for changing data path assignments without retraining. Values will be passed in the dataPathAssignments property of the published pipeline execution request. Type: object (or Expression with resultType object).
func (o AzureMLExecutePipelineActivityOutput) DataPathAssignments() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLExecutePipelineActivity) interface{} { return v.DataPathAssignments }).(pulumi.AnyOutput)
}

// Activity depends on condition.
func (o AzureMLExecutePipelineActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v AzureMLExecutePipelineActivity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o AzureMLExecutePipelineActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMLExecutePipelineActivity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Run history experiment name of the pipeline run. This information will be passed in the ExperimentName property of the published pipeline execution request. Type: string (or Expression with resultType string).
func (o AzureMLExecutePipelineActivityOutput) ExperimentName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLExecutePipelineActivity) interface{} { return v.ExperimentName }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o AzureMLExecutePipelineActivityOutput) LinkedServiceName() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v AzureMLExecutePipelineActivity) *LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferencePtrOutput)
}

// The parent Azure ML Service pipeline run id. This information will be passed in the ParentRunId property of the published pipeline execution request. Type: string (or Expression with resultType string).
func (o AzureMLExecutePipelineActivityOutput) MlParentRunId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLExecutePipelineActivity) interface{} { return v.MlParentRunId }).(pulumi.AnyOutput)
}

// ID of the published Azure ML pipeline endpoint. Type: string (or Expression with resultType string).
func (o AzureMLExecutePipelineActivityOutput) MlPipelineEndpointId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLExecutePipelineActivity) interface{} { return v.MlPipelineEndpointId }).(pulumi.AnyOutput)
}

// ID of the published Azure ML pipeline. Type: string (or Expression with resultType string).
func (o AzureMLExecutePipelineActivityOutput) MlPipelineId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLExecutePipelineActivity) interface{} { return v.MlPipelineId }).(pulumi.AnyOutput)
}

// Key,Value pairs to be passed to the published Azure ML pipeline endpoint. Keys must match the names of pipeline parameters defined in the published pipeline. Values will be passed in the ParameterAssignments property of the published pipeline execution request. Type: object with key value pairs (or Expression with resultType object).
func (o AzureMLExecutePipelineActivityOutput) MlPipelineParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLExecutePipelineActivity) interface{} { return v.MlPipelineParameters }).(pulumi.AnyOutput)
}

// Activity name.
func (o AzureMLExecutePipelineActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMLExecutePipelineActivity) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o AzureMLExecutePipelineActivityOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMLExecutePipelineActivity) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o AzureMLExecutePipelineActivityOutput) Policy() ActivityPolicyPtrOutput {
	return o.ApplyT(func(v AzureMLExecutePipelineActivity) *ActivityPolicy { return v.Policy }).(ActivityPolicyPtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o AzureMLExecutePipelineActivityOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMLExecutePipelineActivity) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'AzureMLExecutePipeline'.
func (o AzureMLExecutePipelineActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMLExecutePipelineActivity) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o AzureMLExecutePipelineActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v AzureMLExecutePipelineActivity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

// Version of the published Azure ML pipeline endpoint. Type: string (or Expression with resultType string).
func (o AzureMLExecutePipelineActivityOutput) Version() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLExecutePipelineActivity) interface{} { return v.Version }).(pulumi.AnyOutput)
}

// Azure ML Execute Pipeline activity.
type AzureMLExecutePipelineActivityResponse struct {
	// Whether to continue execution of other steps in the PipelineRun if a step fails. This information will be passed in the continueOnStepFailure property of the published pipeline execution request. Type: boolean (or Expression with resultType boolean).
	ContinueOnStepFailure interface{} `pulumi:"continueOnStepFailure"`
	// Dictionary used for changing data path assignments without retraining. Values will be passed in the dataPathAssignments property of the published pipeline execution request. Type: object (or Expression with resultType object).
	DataPathAssignments interface{} `pulumi:"dataPathAssignments"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Run history experiment name of the pipeline run. This information will be passed in the ExperimentName property of the published pipeline execution request. Type: string (or Expression with resultType string).
	ExperimentName interface{} `pulumi:"experimentName"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The parent Azure ML Service pipeline run id. This information will be passed in the ParentRunId property of the published pipeline execution request. Type: string (or Expression with resultType string).
	MlParentRunId interface{} `pulumi:"mlParentRunId"`
	// ID of the published Azure ML pipeline endpoint. Type: string (or Expression with resultType string).
	MlPipelineEndpointId interface{} `pulumi:"mlPipelineEndpointId"`
	// ID of the published Azure ML pipeline. Type: string (or Expression with resultType string).
	MlPipelineId interface{} `pulumi:"mlPipelineId"`
	// Key,Value pairs to be passed to the published Azure ML pipeline endpoint. Keys must match the names of pipeline parameters defined in the published pipeline. Values will be passed in the ParameterAssignments property of the published pipeline execution request. Type: object with key value pairs (or Expression with resultType object).
	MlPipelineParameters interface{} `pulumi:"mlPipelineParameters"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'AzureMLExecutePipeline'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
	// Version of the published Azure ML pipeline endpoint. Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
}

// Azure ML Execute Pipeline activity.
type AzureMLExecutePipelineActivityResponseOutput struct{ *pulumi.OutputState }

func (AzureMLExecutePipelineActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMLExecutePipelineActivityResponse)(nil)).Elem()
}

func (o AzureMLExecutePipelineActivityResponseOutput) ToAzureMLExecutePipelineActivityResponseOutput() AzureMLExecutePipelineActivityResponseOutput {
	return o
}

func (o AzureMLExecutePipelineActivityResponseOutput) ToAzureMLExecutePipelineActivityResponseOutputWithContext(ctx context.Context) AzureMLExecutePipelineActivityResponseOutput {
	return o
}

// Whether to continue execution of other steps in the PipelineRun if a step fails. This information will be passed in the continueOnStepFailure property of the published pipeline execution request. Type: boolean (or Expression with resultType boolean).
func (o AzureMLExecutePipelineActivityResponseOutput) ContinueOnStepFailure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLExecutePipelineActivityResponse) interface{} { return v.ContinueOnStepFailure }).(pulumi.AnyOutput)
}

// Dictionary used for changing data path assignments without retraining. Values will be passed in the dataPathAssignments property of the published pipeline execution request. Type: object (or Expression with resultType object).
func (o AzureMLExecutePipelineActivityResponseOutput) DataPathAssignments() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLExecutePipelineActivityResponse) interface{} { return v.DataPathAssignments }).(pulumi.AnyOutput)
}

// Activity depends on condition.
func (o AzureMLExecutePipelineActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v AzureMLExecutePipelineActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o AzureMLExecutePipelineActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMLExecutePipelineActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Run history experiment name of the pipeline run. This information will be passed in the ExperimentName property of the published pipeline execution request. Type: string (or Expression with resultType string).
func (o AzureMLExecutePipelineActivityResponseOutput) ExperimentName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLExecutePipelineActivityResponse) interface{} { return v.ExperimentName }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o AzureMLExecutePipelineActivityResponseOutput) LinkedServiceName() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureMLExecutePipelineActivityResponse) *LinkedServiceReferenceResponse {
		return v.LinkedServiceName
	}).(LinkedServiceReferenceResponsePtrOutput)
}

// The parent Azure ML Service pipeline run id. This information will be passed in the ParentRunId property of the published pipeline execution request. Type: string (or Expression with resultType string).
func (o AzureMLExecutePipelineActivityResponseOutput) MlParentRunId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLExecutePipelineActivityResponse) interface{} { return v.MlParentRunId }).(pulumi.AnyOutput)
}

// ID of the published Azure ML pipeline endpoint. Type: string (or Expression with resultType string).
func (o AzureMLExecutePipelineActivityResponseOutput) MlPipelineEndpointId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLExecutePipelineActivityResponse) interface{} { return v.MlPipelineEndpointId }).(pulumi.AnyOutput)
}

// ID of the published Azure ML pipeline. Type: string (or Expression with resultType string).
func (o AzureMLExecutePipelineActivityResponseOutput) MlPipelineId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLExecutePipelineActivityResponse) interface{} { return v.MlPipelineId }).(pulumi.AnyOutput)
}

// Key,Value pairs to be passed to the published Azure ML pipeline endpoint. Keys must match the names of pipeline parameters defined in the published pipeline. Values will be passed in the ParameterAssignments property of the published pipeline execution request. Type: object with key value pairs (or Expression with resultType object).
func (o AzureMLExecutePipelineActivityResponseOutput) MlPipelineParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLExecutePipelineActivityResponse) interface{} { return v.MlPipelineParameters }).(pulumi.AnyOutput)
}

// Activity name.
func (o AzureMLExecutePipelineActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMLExecutePipelineActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o AzureMLExecutePipelineActivityResponseOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMLExecutePipelineActivityResponse) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o AzureMLExecutePipelineActivityResponseOutput) Policy() ActivityPolicyResponsePtrOutput {
	return o.ApplyT(func(v AzureMLExecutePipelineActivityResponse) *ActivityPolicyResponse { return v.Policy }).(ActivityPolicyResponsePtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o AzureMLExecutePipelineActivityResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMLExecutePipelineActivityResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'AzureMLExecutePipeline'.
func (o AzureMLExecutePipelineActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMLExecutePipelineActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o AzureMLExecutePipelineActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v AzureMLExecutePipelineActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

// Version of the published Azure ML pipeline endpoint. Type: string (or Expression with resultType string).
func (o AzureMLExecutePipelineActivityResponseOutput) Version() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLExecutePipelineActivityResponse) interface{} { return v.Version }).(pulumi.AnyOutput)
}

// Azure ML Studio Web Service linked service.
type AzureMLLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The API key for accessing the Azure ML model endpoint.
	ApiKey interface{} `pulumi:"apiKey"`
	// Type of authentication (Required to specify MSI) used to connect to AzureML. Type: string (or Expression with resultType string).
	Authentication interface{} `pulumi:"authentication"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The Batch Execution REST URL for an Azure ML Studio Web Service endpoint. Type: string (or Expression with resultType string).
	MlEndpoint interface{} `pulumi:"mlEndpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The ID of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML Studio web service. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML Studio web service.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureML'.
	Type string `pulumi:"type"`
	// The Update Resource REST URL for an Azure ML Studio Web Service endpoint. Type: string (or Expression with resultType string).
	UpdateResourceEndpoint interface{} `pulumi:"updateResourceEndpoint"`
}

// AzureMLLinkedServiceInput is an input type that accepts AzureMLLinkedServiceArgs and AzureMLLinkedServiceOutput values.
// You can construct a concrete instance of `AzureMLLinkedServiceInput` via:
//
//	AzureMLLinkedServiceArgs{...}
type AzureMLLinkedServiceInput interface {
	pulumi.Input

	ToAzureMLLinkedServiceOutput() AzureMLLinkedServiceOutput
	ToAzureMLLinkedServiceOutputWithContext(context.Context) AzureMLLinkedServiceOutput
}

// Azure ML Studio Web Service linked service.
type AzureMLLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The API key for accessing the Azure ML model endpoint.
	ApiKey pulumi.Input `pulumi:"apiKey"`
	// Type of authentication (Required to specify MSI) used to connect to AzureML. Type: string (or Expression with resultType string).
	Authentication pulumi.Input `pulumi:"authentication"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// The Batch Execution REST URL for an Azure ML Studio Web Service endpoint. Type: string (or Expression with resultType string).
	MlEndpoint pulumi.Input `pulumi:"mlEndpoint"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The ID of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML Studio web service. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML Studio web service.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant pulumi.Input `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureML'.
	Type pulumi.StringInput `pulumi:"type"`
	// The Update Resource REST URL for an Azure ML Studio Web Service endpoint. Type: string (or Expression with resultType string).
	UpdateResourceEndpoint pulumi.Input `pulumi:"updateResourceEndpoint"`
}

func (AzureMLLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMLLinkedService)(nil)).Elem()
}

func (i AzureMLLinkedServiceArgs) ToAzureMLLinkedServiceOutput() AzureMLLinkedServiceOutput {
	return i.ToAzureMLLinkedServiceOutputWithContext(context.Background())
}

func (i AzureMLLinkedServiceArgs) ToAzureMLLinkedServiceOutputWithContext(ctx context.Context) AzureMLLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMLLinkedServiceOutput)
}

// Azure ML Studio Web Service linked service.
type AzureMLLinkedServiceOutput struct{ *pulumi.OutputState }

func (AzureMLLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMLLinkedService)(nil)).Elem()
}

func (o AzureMLLinkedServiceOutput) ToAzureMLLinkedServiceOutput() AzureMLLinkedServiceOutput {
	return o
}

func (o AzureMLLinkedServiceOutput) ToAzureMLLinkedServiceOutputWithContext(ctx context.Context) AzureMLLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzureMLLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureMLLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The API key for accessing the Azure ML model endpoint.
func (o AzureMLLinkedServiceOutput) ApiKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLLinkedService) interface{} { return v.ApiKey }).(pulumi.AnyOutput)
}

// Type of authentication (Required to specify MSI) used to connect to AzureML. Type: string (or Expression with resultType string).
func (o AzureMLLinkedServiceOutput) Authentication() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLLinkedService) interface{} { return v.Authentication }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureMLLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzureMLLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o AzureMLLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMLLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AzureMLLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMLLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The Batch Execution REST URL for an Azure ML Studio Web Service endpoint. Type: string (or Expression with resultType string).
func (o AzureMLLinkedServiceOutput) MlEndpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLLinkedService) interface{} { return v.MlEndpoint }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureMLLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureMLLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The ID of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML Studio web service. Type: string (or Expression with resultType string).
func (o AzureMLLinkedServiceOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLLinkedService) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The key of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML Studio web service.
func (o AzureMLLinkedServiceOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLLinkedService) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureMLLinkedServiceOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLLinkedService) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AzureML'.
func (o AzureMLLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMLLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The Update Resource REST URL for an Azure ML Studio Web Service endpoint. Type: string (or Expression with resultType string).
func (o AzureMLLinkedServiceOutput) UpdateResourceEndpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLLinkedService) interface{} { return v.UpdateResourceEndpoint }).(pulumi.AnyOutput)
}

// Azure ML Studio Web Service linked service.
type AzureMLLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The API key for accessing the Azure ML model endpoint.
	ApiKey interface{} `pulumi:"apiKey"`
	// Type of authentication (Required to specify MSI) used to connect to AzureML. Type: string (or Expression with resultType string).
	Authentication interface{} `pulumi:"authentication"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The Batch Execution REST URL for an Azure ML Studio Web Service endpoint. Type: string (or Expression with resultType string).
	MlEndpoint interface{} `pulumi:"mlEndpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The ID of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML Studio web service. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML Studio web service.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureML'.
	Type string `pulumi:"type"`
	// The Update Resource REST URL for an Azure ML Studio Web Service endpoint. Type: string (or Expression with resultType string).
	UpdateResourceEndpoint interface{} `pulumi:"updateResourceEndpoint"`
}

// Azure ML Studio Web Service linked service.
type AzureMLLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureMLLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMLLinkedServiceResponse)(nil)).Elem()
}

func (o AzureMLLinkedServiceResponseOutput) ToAzureMLLinkedServiceResponseOutput() AzureMLLinkedServiceResponseOutput {
	return o
}

func (o AzureMLLinkedServiceResponseOutput) ToAzureMLLinkedServiceResponseOutputWithContext(ctx context.Context) AzureMLLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzureMLLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureMLLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The API key for accessing the Azure ML model endpoint.
func (o AzureMLLinkedServiceResponseOutput) ApiKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLLinkedServiceResponse) interface{} { return v.ApiKey }).(pulumi.AnyOutput)
}

// Type of authentication (Required to specify MSI) used to connect to AzureML. Type: string (or Expression with resultType string).
func (o AzureMLLinkedServiceResponseOutput) Authentication() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLLinkedServiceResponse) interface{} { return v.Authentication }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureMLLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureMLLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o AzureMLLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMLLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AzureMLLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMLLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The Batch Execution REST URL for an Azure ML Studio Web Service endpoint. Type: string (or Expression with resultType string).
func (o AzureMLLinkedServiceResponseOutput) MlEndpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLLinkedServiceResponse) interface{} { return v.MlEndpoint }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureMLLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureMLLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The ID of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML Studio web service. Type: string (or Expression with resultType string).
func (o AzureMLLinkedServiceResponseOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLLinkedServiceResponse) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The key of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML Studio web service.
func (o AzureMLLinkedServiceResponseOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLLinkedServiceResponse) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureMLLinkedServiceResponseOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLLinkedServiceResponse) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AzureML'.
func (o AzureMLLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMLLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Update Resource REST URL for an Azure ML Studio Web Service endpoint. Type: string (or Expression with resultType string).
func (o AzureMLLinkedServiceResponseOutput) UpdateResourceEndpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLLinkedServiceResponse) interface{} { return v.UpdateResourceEndpoint }).(pulumi.AnyOutput)
}

// Azure ML Service linked service.
type AzureMLServiceLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication (Required to specify MSI) used to connect to AzureML. Type: string (or Expression with resultType string).
	Authentication interface{} `pulumi:"authentication"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Azure ML Service workspace name. Type: string (or Expression with resultType string).
	MlWorkspaceName interface{} `pulumi:"mlWorkspaceName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Azure ML Service workspace resource group name. Type: string (or Expression with resultType string).
	ResourceGroupName interface{} `pulumi:"resourceGroupName"`
	// The ID of the service principal used to authenticate against the endpoint of a published Azure ML Service pipeline. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against the endpoint of a published Azure ML Service pipeline.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Azure ML Service workspace subscription ID. Type: string (or Expression with resultType string).
	SubscriptionId interface{} `pulumi:"subscriptionId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureMLService'.
	Type string `pulumi:"type"`
}

// AzureMLServiceLinkedServiceInput is an input type that accepts AzureMLServiceLinkedServiceArgs and AzureMLServiceLinkedServiceOutput values.
// You can construct a concrete instance of `AzureMLServiceLinkedServiceInput` via:
//
//	AzureMLServiceLinkedServiceArgs{...}
type AzureMLServiceLinkedServiceInput interface {
	pulumi.Input

	ToAzureMLServiceLinkedServiceOutput() AzureMLServiceLinkedServiceOutput
	ToAzureMLServiceLinkedServiceOutputWithContext(context.Context) AzureMLServiceLinkedServiceOutput
}

// Azure ML Service linked service.
type AzureMLServiceLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Type of authentication (Required to specify MSI) used to connect to AzureML. Type: string (or Expression with resultType string).
	Authentication pulumi.Input `pulumi:"authentication"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Azure ML Service workspace name. Type: string (or Expression with resultType string).
	MlWorkspaceName pulumi.Input `pulumi:"mlWorkspaceName"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Azure ML Service workspace resource group name. Type: string (or Expression with resultType string).
	ResourceGroupName pulumi.Input `pulumi:"resourceGroupName"`
	// The ID of the service principal used to authenticate against the endpoint of a published Azure ML Service pipeline. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against the endpoint of a published Azure ML Service pipeline.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// Azure ML Service workspace subscription ID. Type: string (or Expression with resultType string).
	SubscriptionId pulumi.Input `pulumi:"subscriptionId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant pulumi.Input `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureMLService'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureMLServiceLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMLServiceLinkedService)(nil)).Elem()
}

func (i AzureMLServiceLinkedServiceArgs) ToAzureMLServiceLinkedServiceOutput() AzureMLServiceLinkedServiceOutput {
	return i.ToAzureMLServiceLinkedServiceOutputWithContext(context.Background())
}

func (i AzureMLServiceLinkedServiceArgs) ToAzureMLServiceLinkedServiceOutputWithContext(ctx context.Context) AzureMLServiceLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMLServiceLinkedServiceOutput)
}

// Azure ML Service linked service.
type AzureMLServiceLinkedServiceOutput struct{ *pulumi.OutputState }

func (AzureMLServiceLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMLServiceLinkedService)(nil)).Elem()
}

func (o AzureMLServiceLinkedServiceOutput) ToAzureMLServiceLinkedServiceOutput() AzureMLServiceLinkedServiceOutput {
	return o
}

func (o AzureMLServiceLinkedServiceOutput) ToAzureMLServiceLinkedServiceOutputWithContext(ctx context.Context) AzureMLServiceLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzureMLServiceLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Type of authentication (Required to specify MSI) used to connect to AzureML. Type: string (or Expression with resultType string).
func (o AzureMLServiceLinkedServiceOutput) Authentication() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedService) interface{} { return v.Authentication }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureMLServiceLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o AzureMLServiceLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AzureMLServiceLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Azure ML Service workspace name. Type: string (or Expression with resultType string).
func (o AzureMLServiceLinkedServiceOutput) MlWorkspaceName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedService) interface{} { return v.MlWorkspaceName }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureMLServiceLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Azure ML Service workspace resource group name. Type: string (or Expression with resultType string).
func (o AzureMLServiceLinkedServiceOutput) ResourceGroupName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedService) interface{} { return v.ResourceGroupName }).(pulumi.AnyOutput)
}

// The ID of the service principal used to authenticate against the endpoint of a published Azure ML Service pipeline. Type: string (or Expression with resultType string).
func (o AzureMLServiceLinkedServiceOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedService) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The key of the service principal used to authenticate against the endpoint of a published Azure ML Service pipeline.
func (o AzureMLServiceLinkedServiceOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedService) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// Azure ML Service workspace subscription ID. Type: string (or Expression with resultType string).
func (o AzureMLServiceLinkedServiceOutput) SubscriptionId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedService) interface{} { return v.SubscriptionId }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureMLServiceLinkedServiceOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedService) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AzureMLService'.
func (o AzureMLServiceLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Azure ML Service linked service.
type AzureMLServiceLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Type of authentication (Required to specify MSI) used to connect to AzureML. Type: string (or Expression with resultType string).
	Authentication interface{} `pulumi:"authentication"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Azure ML Service workspace name. Type: string (or Expression with resultType string).
	MlWorkspaceName interface{} `pulumi:"mlWorkspaceName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Azure ML Service workspace resource group name. Type: string (or Expression with resultType string).
	ResourceGroupName interface{} `pulumi:"resourceGroupName"`
	// The ID of the service principal used to authenticate against the endpoint of a published Azure ML Service pipeline. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against the endpoint of a published Azure ML Service pipeline.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Azure ML Service workspace subscription ID. Type: string (or Expression with resultType string).
	SubscriptionId interface{} `pulumi:"subscriptionId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureMLService'.
	Type string `pulumi:"type"`
}

// Azure ML Service linked service.
type AzureMLServiceLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureMLServiceLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMLServiceLinkedServiceResponse)(nil)).Elem()
}

func (o AzureMLServiceLinkedServiceResponseOutput) ToAzureMLServiceLinkedServiceResponseOutput() AzureMLServiceLinkedServiceResponseOutput {
	return o
}

func (o AzureMLServiceLinkedServiceResponseOutput) ToAzureMLServiceLinkedServiceResponseOutputWithContext(ctx context.Context) AzureMLServiceLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzureMLServiceLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Type of authentication (Required to specify MSI) used to connect to AzureML. Type: string (or Expression with resultType string).
func (o AzureMLServiceLinkedServiceResponseOutput) Authentication() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedServiceResponse) interface{} { return v.Authentication }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureMLServiceLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o AzureMLServiceLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AzureMLServiceLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Azure ML Service workspace name. Type: string (or Expression with resultType string).
func (o AzureMLServiceLinkedServiceResponseOutput) MlWorkspaceName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedServiceResponse) interface{} { return v.MlWorkspaceName }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureMLServiceLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Azure ML Service workspace resource group name. Type: string (or Expression with resultType string).
func (o AzureMLServiceLinkedServiceResponseOutput) ResourceGroupName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedServiceResponse) interface{} { return v.ResourceGroupName }).(pulumi.AnyOutput)
}

// The ID of the service principal used to authenticate against the endpoint of a published Azure ML Service pipeline. Type: string (or Expression with resultType string).
func (o AzureMLServiceLinkedServiceResponseOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedServiceResponse) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The key of the service principal used to authenticate against the endpoint of a published Azure ML Service pipeline.
func (o AzureMLServiceLinkedServiceResponseOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedServiceResponse) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// Azure ML Service workspace subscription ID. Type: string (or Expression with resultType string).
func (o AzureMLServiceLinkedServiceResponseOutput) SubscriptionId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedServiceResponse) interface{} { return v.SubscriptionId }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureMLServiceLinkedServiceResponseOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedServiceResponse) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AzureMLService'.
func (o AzureMLServiceLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMLServiceLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure ML Update Resource management activity.
type AzureMLUpdateResourceActivity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// The relative file path in trainedModelLinkedService to represent the .ilearner file that will be uploaded by the update operation.  Type: string (or Expression with resultType string).
	TrainedModelFilePath interface{} `pulumi:"trainedModelFilePath"`
	// Name of Azure Storage linked service holding the .ilearner file that will be uploaded by the update operation.
	TrainedModelLinkedServiceName LinkedServiceReference `pulumi:"trainedModelLinkedServiceName"`
	// Name of the Trained Model module in the Web Service experiment to be updated. Type: string (or Expression with resultType string).
	TrainedModelName interface{} `pulumi:"trainedModelName"`
	// Type of activity.
	// Expected value is 'AzureMLUpdateResource'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// AzureMLUpdateResourceActivityInput is an input type that accepts AzureMLUpdateResourceActivityArgs and AzureMLUpdateResourceActivityOutput values.
// You can construct a concrete instance of `AzureMLUpdateResourceActivityInput` via:
//
//	AzureMLUpdateResourceActivityArgs{...}
type AzureMLUpdateResourceActivityInput interface {
	pulumi.Input

	ToAzureMLUpdateResourceActivityOutput() AzureMLUpdateResourceActivityOutput
	ToAzureMLUpdateResourceActivityOutputWithContext(context.Context) AzureMLUpdateResourceActivityOutput
}

// Azure ML Update Resource management activity.
type AzureMLUpdateResourceActivityArgs struct {
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferencePtrInput `pulumi:"linkedServiceName"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs pulumi.StringPtrInput `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy ActivityPolicyPtrInput `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State pulumi.StringPtrInput `pulumi:"state"`
	// The relative file path in trainedModelLinkedService to represent the .ilearner file that will be uploaded by the update operation.  Type: string (or Expression with resultType string).
	TrainedModelFilePath pulumi.Input `pulumi:"trainedModelFilePath"`
	// Name of Azure Storage linked service holding the .ilearner file that will be uploaded by the update operation.
	TrainedModelLinkedServiceName LinkedServiceReferenceInput `pulumi:"trainedModelLinkedServiceName"`
	// Name of the Trained Model module in the Web Service experiment to be updated. Type: string (or Expression with resultType string).
	TrainedModelName pulumi.Input `pulumi:"trainedModelName"`
	// Type of activity.
	// Expected value is 'AzureMLUpdateResource'.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
}

func (AzureMLUpdateResourceActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMLUpdateResourceActivity)(nil)).Elem()
}

func (i AzureMLUpdateResourceActivityArgs) ToAzureMLUpdateResourceActivityOutput() AzureMLUpdateResourceActivityOutput {
	return i.ToAzureMLUpdateResourceActivityOutputWithContext(context.Background())
}

func (i AzureMLUpdateResourceActivityArgs) ToAzureMLUpdateResourceActivityOutputWithContext(ctx context.Context) AzureMLUpdateResourceActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMLUpdateResourceActivityOutput)
}

// Azure ML Update Resource management activity.
type AzureMLUpdateResourceActivityOutput struct{ *pulumi.OutputState }

func (AzureMLUpdateResourceActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMLUpdateResourceActivity)(nil)).Elem()
}

func (o AzureMLUpdateResourceActivityOutput) ToAzureMLUpdateResourceActivityOutput() AzureMLUpdateResourceActivityOutput {
	return o
}

func (o AzureMLUpdateResourceActivityOutput) ToAzureMLUpdateResourceActivityOutputWithContext(ctx context.Context) AzureMLUpdateResourceActivityOutput {
	return o
}

// Activity depends on condition.
func (o AzureMLUpdateResourceActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v AzureMLUpdateResourceActivity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o AzureMLUpdateResourceActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMLUpdateResourceActivity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o AzureMLUpdateResourceActivityOutput) LinkedServiceName() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v AzureMLUpdateResourceActivity) *LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferencePtrOutput)
}

// Activity name.
func (o AzureMLUpdateResourceActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMLUpdateResourceActivity) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o AzureMLUpdateResourceActivityOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMLUpdateResourceActivity) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o AzureMLUpdateResourceActivityOutput) Policy() ActivityPolicyPtrOutput {
	return o.ApplyT(func(v AzureMLUpdateResourceActivity) *ActivityPolicy { return v.Policy }).(ActivityPolicyPtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o AzureMLUpdateResourceActivityOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMLUpdateResourceActivity) *string { return v.State }).(pulumi.StringPtrOutput)
}

// The relative file path in trainedModelLinkedService to represent the .ilearner file that will be uploaded by the update operation.  Type: string (or Expression with resultType string).
func (o AzureMLUpdateResourceActivityOutput) TrainedModelFilePath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLUpdateResourceActivity) interface{} { return v.TrainedModelFilePath }).(pulumi.AnyOutput)
}

// Name of Azure Storage linked service holding the .ilearner file that will be uploaded by the update operation.
func (o AzureMLUpdateResourceActivityOutput) TrainedModelLinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v AzureMLUpdateResourceActivity) LinkedServiceReference { return v.TrainedModelLinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Name of the Trained Model module in the Web Service experiment to be updated. Type: string (or Expression with resultType string).
func (o AzureMLUpdateResourceActivityOutput) TrainedModelName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLUpdateResourceActivity) interface{} { return v.TrainedModelName }).(pulumi.AnyOutput)
}

// Type of activity.
// Expected value is 'AzureMLUpdateResource'.
func (o AzureMLUpdateResourceActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMLUpdateResourceActivity) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o AzureMLUpdateResourceActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v AzureMLUpdateResourceActivity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

// Azure ML Update Resource management activity.
type AzureMLUpdateResourceActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// The relative file path in trainedModelLinkedService to represent the .ilearner file that will be uploaded by the update operation.  Type: string (or Expression with resultType string).
	TrainedModelFilePath interface{} `pulumi:"trainedModelFilePath"`
	// Name of Azure Storage linked service holding the .ilearner file that will be uploaded by the update operation.
	TrainedModelLinkedServiceName LinkedServiceReferenceResponse `pulumi:"trainedModelLinkedServiceName"`
	// Name of the Trained Model module in the Web Service experiment to be updated. Type: string (or Expression with resultType string).
	TrainedModelName interface{} `pulumi:"trainedModelName"`
	// Type of activity.
	// Expected value is 'AzureMLUpdateResource'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Azure ML Update Resource management activity.
type AzureMLUpdateResourceActivityResponseOutput struct{ *pulumi.OutputState }

func (AzureMLUpdateResourceActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMLUpdateResourceActivityResponse)(nil)).Elem()
}

func (o AzureMLUpdateResourceActivityResponseOutput) ToAzureMLUpdateResourceActivityResponseOutput() AzureMLUpdateResourceActivityResponseOutput {
	return o
}

func (o AzureMLUpdateResourceActivityResponseOutput) ToAzureMLUpdateResourceActivityResponseOutputWithContext(ctx context.Context) AzureMLUpdateResourceActivityResponseOutput {
	return o
}

// Activity depends on condition.
func (o AzureMLUpdateResourceActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v AzureMLUpdateResourceActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o AzureMLUpdateResourceActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMLUpdateResourceActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o AzureMLUpdateResourceActivityResponseOutput) LinkedServiceName() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureMLUpdateResourceActivityResponse) *LinkedServiceReferenceResponse {
		return v.LinkedServiceName
	}).(LinkedServiceReferenceResponsePtrOutput)
}

// Activity name.
func (o AzureMLUpdateResourceActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMLUpdateResourceActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o AzureMLUpdateResourceActivityResponseOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMLUpdateResourceActivityResponse) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o AzureMLUpdateResourceActivityResponseOutput) Policy() ActivityPolicyResponsePtrOutput {
	return o.ApplyT(func(v AzureMLUpdateResourceActivityResponse) *ActivityPolicyResponse { return v.Policy }).(ActivityPolicyResponsePtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o AzureMLUpdateResourceActivityResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMLUpdateResourceActivityResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// The relative file path in trainedModelLinkedService to represent the .ilearner file that will be uploaded by the update operation.  Type: string (or Expression with resultType string).
func (o AzureMLUpdateResourceActivityResponseOutput) TrainedModelFilePath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLUpdateResourceActivityResponse) interface{} { return v.TrainedModelFilePath }).(pulumi.AnyOutput)
}

// Name of Azure Storage linked service holding the .ilearner file that will be uploaded by the update operation.
func (o AzureMLUpdateResourceActivityResponseOutput) TrainedModelLinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AzureMLUpdateResourceActivityResponse) LinkedServiceReferenceResponse {
		return v.TrainedModelLinkedServiceName
	}).(LinkedServiceReferenceResponseOutput)
}

// Name of the Trained Model module in the Web Service experiment to be updated. Type: string (or Expression with resultType string).
func (o AzureMLUpdateResourceActivityResponseOutput) TrainedModelName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLUpdateResourceActivityResponse) interface{} { return v.TrainedModelName }).(pulumi.AnyOutput)
}

// Type of activity.
// Expected value is 'AzureMLUpdateResource'.
func (o AzureMLUpdateResourceActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMLUpdateResourceActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o AzureMLUpdateResourceActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v AzureMLUpdateResourceActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

// Azure ML WebService Input/Output file
type AzureMLWebServiceFile struct {
	// The relative file path, including container name, in the Azure Blob Storage specified by the LinkedService. Type: string (or Expression with resultType string).
	FilePath interface{} `pulumi:"filePath"`
	// Reference to an Azure Storage LinkedService, where Azure ML WebService Input/Output file located.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
}

// AzureMLWebServiceFileInput is an input type that accepts AzureMLWebServiceFileArgs and AzureMLWebServiceFileOutput values.
// You can construct a concrete instance of `AzureMLWebServiceFileInput` via:
//
//	AzureMLWebServiceFileArgs{...}
type AzureMLWebServiceFileInput interface {
	pulumi.Input

	ToAzureMLWebServiceFileOutput() AzureMLWebServiceFileOutput
	ToAzureMLWebServiceFileOutputWithContext(context.Context) AzureMLWebServiceFileOutput
}

// Azure ML WebService Input/Output file
type AzureMLWebServiceFileArgs struct {
	// The relative file path, including container name, in the Azure Blob Storage specified by the LinkedService. Type: string (or Expression with resultType string).
	FilePath pulumi.Input `pulumi:"filePath"`
	// Reference to an Azure Storage LinkedService, where Azure ML WebService Input/Output file located.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
}

func (AzureMLWebServiceFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMLWebServiceFile)(nil)).Elem()
}

func (i AzureMLWebServiceFileArgs) ToAzureMLWebServiceFileOutput() AzureMLWebServiceFileOutput {
	return i.ToAzureMLWebServiceFileOutputWithContext(context.Background())
}

func (i AzureMLWebServiceFileArgs) ToAzureMLWebServiceFileOutputWithContext(ctx context.Context) AzureMLWebServiceFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMLWebServiceFileOutput)
}

// AzureMLWebServiceFileMapInput is an input type that accepts AzureMLWebServiceFileMap and AzureMLWebServiceFileMapOutput values.
// You can construct a concrete instance of `AzureMLWebServiceFileMapInput` via:
//
//	AzureMLWebServiceFileMap{ "key": AzureMLWebServiceFileArgs{...} }
type AzureMLWebServiceFileMapInput interface {
	pulumi.Input

	ToAzureMLWebServiceFileMapOutput() AzureMLWebServiceFileMapOutput
	ToAzureMLWebServiceFileMapOutputWithContext(context.Context) AzureMLWebServiceFileMapOutput
}

type AzureMLWebServiceFileMap map[string]AzureMLWebServiceFileInput

func (AzureMLWebServiceFileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AzureMLWebServiceFile)(nil)).Elem()
}

func (i AzureMLWebServiceFileMap) ToAzureMLWebServiceFileMapOutput() AzureMLWebServiceFileMapOutput {
	return i.ToAzureMLWebServiceFileMapOutputWithContext(context.Background())
}

func (i AzureMLWebServiceFileMap) ToAzureMLWebServiceFileMapOutputWithContext(ctx context.Context) AzureMLWebServiceFileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMLWebServiceFileMapOutput)
}

// Azure ML WebService Input/Output file
type AzureMLWebServiceFileOutput struct{ *pulumi.OutputState }

func (AzureMLWebServiceFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMLWebServiceFile)(nil)).Elem()
}

func (o AzureMLWebServiceFileOutput) ToAzureMLWebServiceFileOutput() AzureMLWebServiceFileOutput {
	return o
}

func (o AzureMLWebServiceFileOutput) ToAzureMLWebServiceFileOutputWithContext(ctx context.Context) AzureMLWebServiceFileOutput {
	return o
}

// The relative file path, including container name, in the Azure Blob Storage specified by the LinkedService. Type: string (or Expression with resultType string).
func (o AzureMLWebServiceFileOutput) FilePath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLWebServiceFile) interface{} { return v.FilePath }).(pulumi.AnyOutput)
}

// Reference to an Azure Storage LinkedService, where Azure ML WebService Input/Output file located.
func (o AzureMLWebServiceFileOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v AzureMLWebServiceFile) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

type AzureMLWebServiceFileMapOutput struct{ *pulumi.OutputState }

func (AzureMLWebServiceFileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AzureMLWebServiceFile)(nil)).Elem()
}

func (o AzureMLWebServiceFileMapOutput) ToAzureMLWebServiceFileMapOutput() AzureMLWebServiceFileMapOutput {
	return o
}

func (o AzureMLWebServiceFileMapOutput) ToAzureMLWebServiceFileMapOutputWithContext(ctx context.Context) AzureMLWebServiceFileMapOutput {
	return o
}

func (o AzureMLWebServiceFileMapOutput) MapIndex(k pulumi.StringInput) AzureMLWebServiceFileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AzureMLWebServiceFile {
		return vs[0].(map[string]AzureMLWebServiceFile)[vs[1].(string)]
	}).(AzureMLWebServiceFileOutput)
}

// Azure ML WebService Input/Output file
type AzureMLWebServiceFileResponse struct {
	// The relative file path, including container name, in the Azure Blob Storage specified by the LinkedService. Type: string (or Expression with resultType string).
	FilePath interface{} `pulumi:"filePath"`
	// Reference to an Azure Storage LinkedService, where Azure ML WebService Input/Output file located.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
}

// Azure ML WebService Input/Output file
type AzureMLWebServiceFileResponseOutput struct{ *pulumi.OutputState }

func (AzureMLWebServiceFileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMLWebServiceFileResponse)(nil)).Elem()
}

func (o AzureMLWebServiceFileResponseOutput) ToAzureMLWebServiceFileResponseOutput() AzureMLWebServiceFileResponseOutput {
	return o
}

func (o AzureMLWebServiceFileResponseOutput) ToAzureMLWebServiceFileResponseOutputWithContext(ctx context.Context) AzureMLWebServiceFileResponseOutput {
	return o
}

// The relative file path, including container name, in the Azure Blob Storage specified by the LinkedService. Type: string (or Expression with resultType string).
func (o AzureMLWebServiceFileResponseOutput) FilePath() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMLWebServiceFileResponse) interface{} { return v.FilePath }).(pulumi.AnyOutput)
}

// Reference to an Azure Storage LinkedService, where Azure ML WebService Input/Output file located.
func (o AzureMLWebServiceFileResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AzureMLWebServiceFileResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

type AzureMLWebServiceFileResponseMapOutput struct{ *pulumi.OutputState }

func (AzureMLWebServiceFileResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AzureMLWebServiceFileResponse)(nil)).Elem()
}

func (o AzureMLWebServiceFileResponseMapOutput) ToAzureMLWebServiceFileResponseMapOutput() AzureMLWebServiceFileResponseMapOutput {
	return o
}

func (o AzureMLWebServiceFileResponseMapOutput) ToAzureMLWebServiceFileResponseMapOutputWithContext(ctx context.Context) AzureMLWebServiceFileResponseMapOutput {
	return o
}

func (o AzureMLWebServiceFileResponseMapOutput) MapIndex(k pulumi.StringInput) AzureMLWebServiceFileResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AzureMLWebServiceFileResponse {
		return vs[0].(map[string]AzureMLWebServiceFileResponse)[vs[1].(string)]
	}).(AzureMLWebServiceFileResponseOutput)
}

// Azure Database for MariaDB linked service.
type AzureMariaDBLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReference `pulumi:"pwd"`
	// Type of linked service.
	// Expected value is 'AzureMariaDB'.
	Type string `pulumi:"type"`
}

// AzureMariaDBLinkedServiceInput is an input type that accepts AzureMariaDBLinkedServiceArgs and AzureMariaDBLinkedServiceOutput values.
// You can construct a concrete instance of `AzureMariaDBLinkedServiceInput` via:
//
//	AzureMariaDBLinkedServiceArgs{...}
type AzureMariaDBLinkedServiceInput interface {
	pulumi.Input

	ToAzureMariaDBLinkedServiceOutput() AzureMariaDBLinkedServiceOutput
	ToAzureMariaDBLinkedServiceOutputWithContext(context.Context) AzureMariaDBLinkedServiceOutput
}

// Azure Database for MariaDB linked service.
type AzureMariaDBLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd AzureKeyVaultSecretReferencePtrInput `pulumi:"pwd"`
	// Type of linked service.
	// Expected value is 'AzureMariaDB'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureMariaDBLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMariaDBLinkedService)(nil)).Elem()
}

func (i AzureMariaDBLinkedServiceArgs) ToAzureMariaDBLinkedServiceOutput() AzureMariaDBLinkedServiceOutput {
	return i.ToAzureMariaDBLinkedServiceOutputWithContext(context.Background())
}

func (i AzureMariaDBLinkedServiceArgs) ToAzureMariaDBLinkedServiceOutputWithContext(ctx context.Context) AzureMariaDBLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMariaDBLinkedServiceOutput)
}

// Azure Database for MariaDB linked service.
type AzureMariaDBLinkedServiceOutput struct{ *pulumi.OutputState }

func (AzureMariaDBLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMariaDBLinkedService)(nil)).Elem()
}

func (o AzureMariaDBLinkedServiceOutput) ToAzureMariaDBLinkedServiceOutput() AzureMariaDBLinkedServiceOutput {
	return o
}

func (o AzureMariaDBLinkedServiceOutput) ToAzureMariaDBLinkedServiceOutputWithContext(ctx context.Context) AzureMariaDBLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzureMariaDBLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureMariaDBLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AzureMariaDBLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzureMariaDBLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureMariaDBLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMariaDBLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AzureMariaDBLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMariaDBLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AzureMariaDBLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMariaDBLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AzureMariaDBLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureMariaDBLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o AzureMariaDBLinkedServiceOutput) Pwd() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v AzureMariaDBLinkedService) *AzureKeyVaultSecretReference { return v.Pwd }).(AzureKeyVaultSecretReferencePtrOutput)
}

// Type of linked service.
// Expected value is 'AzureMariaDB'.
func (o AzureMariaDBLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMariaDBLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Database for MariaDB linked service.
type AzureMariaDBLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReferenceResponse `pulumi:"pwd"`
	// Type of linked service.
	// Expected value is 'AzureMariaDB'.
	Type string `pulumi:"type"`
}

// Azure Database for MariaDB linked service.
type AzureMariaDBLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureMariaDBLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMariaDBLinkedServiceResponse)(nil)).Elem()
}

func (o AzureMariaDBLinkedServiceResponseOutput) ToAzureMariaDBLinkedServiceResponseOutput() AzureMariaDBLinkedServiceResponseOutput {
	return o
}

func (o AzureMariaDBLinkedServiceResponseOutput) ToAzureMariaDBLinkedServiceResponseOutputWithContext(ctx context.Context) AzureMariaDBLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzureMariaDBLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureMariaDBLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AzureMariaDBLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureMariaDBLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureMariaDBLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMariaDBLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AzureMariaDBLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMariaDBLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AzureMariaDBLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMariaDBLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AzureMariaDBLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureMariaDBLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o AzureMariaDBLinkedServiceResponseOutput) Pwd() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureMariaDBLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse { return v.Pwd }).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// Type of linked service.
// Expected value is 'AzureMariaDB'.
func (o AzureMariaDBLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMariaDBLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Azure MariaDB source.
type AzureMariaDBSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzureMariaDBSource'.
	Type string `pulumi:"type"`
}

// AzureMariaDBSourceInput is an input type that accepts AzureMariaDBSourceArgs and AzureMariaDBSourceOutput values.
// You can construct a concrete instance of `AzureMariaDBSourceInput` via:
//
//	AzureMariaDBSourceArgs{...}
type AzureMariaDBSourceInput interface {
	pulumi.Input

	ToAzureMariaDBSourceOutput() AzureMariaDBSourceOutput
	ToAzureMariaDBSourceOutputWithContext(context.Context) AzureMariaDBSourceOutput
}

// A copy activity Azure MariaDB source.
type AzureMariaDBSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzureMariaDBSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureMariaDBSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMariaDBSource)(nil)).Elem()
}

func (i AzureMariaDBSourceArgs) ToAzureMariaDBSourceOutput() AzureMariaDBSourceOutput {
	return i.ToAzureMariaDBSourceOutputWithContext(context.Background())
}

func (i AzureMariaDBSourceArgs) ToAzureMariaDBSourceOutputWithContext(ctx context.Context) AzureMariaDBSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMariaDBSourceOutput)
}

// A copy activity Azure MariaDB source.
type AzureMariaDBSourceOutput struct{ *pulumi.OutputState }

func (AzureMariaDBSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMariaDBSource)(nil)).Elem()
}

func (o AzureMariaDBSourceOutput) ToAzureMariaDBSourceOutput() AzureMariaDBSourceOutput {
	return o
}

func (o AzureMariaDBSourceOutput) ToAzureMariaDBSourceOutputWithContext(ctx context.Context) AzureMariaDBSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o AzureMariaDBSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMariaDBSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureMariaDBSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMariaDBSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureMariaDBSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMariaDBSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o AzureMariaDBSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMariaDBSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureMariaDBSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMariaDBSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o AzureMariaDBSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMariaDBSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureMariaDBSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMariaDBSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'AzureMariaDBSource'.
func (o AzureMariaDBSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMariaDBSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Azure MariaDB source.
type AzureMariaDBSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzureMariaDBSource'.
	Type string `pulumi:"type"`
}

// A copy activity Azure MariaDB source.
type AzureMariaDBSourceResponseOutput struct{ *pulumi.OutputState }

func (AzureMariaDBSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMariaDBSourceResponse)(nil)).Elem()
}

func (o AzureMariaDBSourceResponseOutput) ToAzureMariaDBSourceResponseOutput() AzureMariaDBSourceResponseOutput {
	return o
}

func (o AzureMariaDBSourceResponseOutput) ToAzureMariaDBSourceResponseOutputWithContext(ctx context.Context) AzureMariaDBSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o AzureMariaDBSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMariaDBSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureMariaDBSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMariaDBSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureMariaDBSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMariaDBSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o AzureMariaDBSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMariaDBSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureMariaDBSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMariaDBSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o AzureMariaDBSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMariaDBSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureMariaDBSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMariaDBSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'AzureMariaDBSource'.
func (o AzureMariaDBSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMariaDBSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Database for MariaDB dataset.
type AzureMariaDBTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzureMariaDBTable'.
	Type string `pulumi:"type"`
}

// AzureMariaDBTableDatasetInput is an input type that accepts AzureMariaDBTableDatasetArgs and AzureMariaDBTableDatasetOutput values.
// You can construct a concrete instance of `AzureMariaDBTableDatasetInput` via:
//
//	AzureMariaDBTableDatasetArgs{...}
type AzureMariaDBTableDatasetInput interface {
	pulumi.Input

	ToAzureMariaDBTableDatasetOutput() AzureMariaDBTableDatasetOutput
	ToAzureMariaDBTableDatasetOutputWithContext(context.Context) AzureMariaDBTableDatasetOutput
}

// Azure Database for MariaDB dataset.
type AzureMariaDBTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzureMariaDBTable'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureMariaDBTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMariaDBTableDataset)(nil)).Elem()
}

func (i AzureMariaDBTableDatasetArgs) ToAzureMariaDBTableDatasetOutput() AzureMariaDBTableDatasetOutput {
	return i.ToAzureMariaDBTableDatasetOutputWithContext(context.Background())
}

func (i AzureMariaDBTableDatasetArgs) ToAzureMariaDBTableDatasetOutputWithContext(ctx context.Context) AzureMariaDBTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMariaDBTableDatasetOutput)
}

// Azure Database for MariaDB dataset.
type AzureMariaDBTableDatasetOutput struct{ *pulumi.OutputState }

func (AzureMariaDBTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMariaDBTableDataset)(nil)).Elem()
}

func (o AzureMariaDBTableDatasetOutput) ToAzureMariaDBTableDatasetOutput() AzureMariaDBTableDatasetOutput {
	return o
}

func (o AzureMariaDBTableDatasetOutput) ToAzureMariaDBTableDatasetOutputWithContext(ctx context.Context) AzureMariaDBTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureMariaDBTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureMariaDBTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AzureMariaDBTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMariaDBTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureMariaDBTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v AzureMariaDBTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o AzureMariaDBTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v AzureMariaDBTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o AzureMariaDBTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureMariaDBTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureMariaDBTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMariaDBTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureMariaDBTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMariaDBTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o AzureMariaDBTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMariaDBTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'AzureMariaDBTable'.
func (o AzureMariaDBTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMariaDBTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Database for MariaDB dataset.
type AzureMariaDBTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzureMariaDBTable'.
	Type string `pulumi:"type"`
}

// Azure Database for MariaDB dataset.
type AzureMariaDBTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (AzureMariaDBTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMariaDBTableDatasetResponse)(nil)).Elem()
}

func (o AzureMariaDBTableDatasetResponseOutput) ToAzureMariaDBTableDatasetResponseOutput() AzureMariaDBTableDatasetResponseOutput {
	return o
}

func (o AzureMariaDBTableDatasetResponseOutput) ToAzureMariaDBTableDatasetResponseOutputWithContext(ctx context.Context) AzureMariaDBTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureMariaDBTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureMariaDBTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AzureMariaDBTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMariaDBTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureMariaDBTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v AzureMariaDBTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o AzureMariaDBTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AzureMariaDBTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o AzureMariaDBTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureMariaDBTableDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureMariaDBTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMariaDBTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureMariaDBTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMariaDBTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o AzureMariaDBTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMariaDBTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'AzureMariaDBTable'.
func (o AzureMariaDBTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMariaDBTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure MySQL database linked service.
type AzureMySqlLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'AzureMySql'.
	Type string `pulumi:"type"`
}

// AzureMySqlLinkedServiceInput is an input type that accepts AzureMySqlLinkedServiceArgs and AzureMySqlLinkedServiceOutput values.
// You can construct a concrete instance of `AzureMySqlLinkedServiceInput` via:
//
//	AzureMySqlLinkedServiceArgs{...}
type AzureMySqlLinkedServiceInput interface {
	pulumi.Input

	ToAzureMySqlLinkedServiceOutput() AzureMySqlLinkedServiceOutput
	ToAzureMySqlLinkedServiceOutputWithContext(context.Context) AzureMySqlLinkedServiceOutput
}

// Azure MySQL database linked service.
type AzureMySqlLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password AzureKeyVaultSecretReferencePtrInput `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'AzureMySql'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureMySqlLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMySqlLinkedService)(nil)).Elem()
}

func (i AzureMySqlLinkedServiceArgs) ToAzureMySqlLinkedServiceOutput() AzureMySqlLinkedServiceOutput {
	return i.ToAzureMySqlLinkedServiceOutputWithContext(context.Background())
}

func (i AzureMySqlLinkedServiceArgs) ToAzureMySqlLinkedServiceOutputWithContext(ctx context.Context) AzureMySqlLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMySqlLinkedServiceOutput)
}

// Azure MySQL database linked service.
type AzureMySqlLinkedServiceOutput struct{ *pulumi.OutputState }

func (AzureMySqlLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMySqlLinkedService)(nil)).Elem()
}

func (o AzureMySqlLinkedServiceOutput) ToAzureMySqlLinkedServiceOutput() AzureMySqlLinkedServiceOutput {
	return o
}

func (o AzureMySqlLinkedServiceOutput) ToAzureMySqlLinkedServiceOutputWithContext(ctx context.Context) AzureMySqlLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzureMySqlLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureMySqlLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AzureMySqlLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzureMySqlLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureMySqlLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AzureMySqlLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AzureMySqlLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AzureMySqlLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureMySqlLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o AzureMySqlLinkedServiceOutput) Password() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v AzureMySqlLinkedService) *AzureKeyVaultSecretReference { return v.Password }).(AzureKeyVaultSecretReferencePtrOutput)
}

// Type of linked service.
// Expected value is 'AzureMySql'.
func (o AzureMySqlLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMySqlLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Azure MySQL database linked service.
type AzureMySqlLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReferenceResponse `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'AzureMySql'.
	Type string `pulumi:"type"`
}

// Azure MySQL database linked service.
type AzureMySqlLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureMySqlLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMySqlLinkedServiceResponse)(nil)).Elem()
}

func (o AzureMySqlLinkedServiceResponseOutput) ToAzureMySqlLinkedServiceResponseOutput() AzureMySqlLinkedServiceResponseOutput {
	return o
}

func (o AzureMySqlLinkedServiceResponseOutput) ToAzureMySqlLinkedServiceResponseOutputWithContext(ctx context.Context) AzureMySqlLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzureMySqlLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureMySqlLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AzureMySqlLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureMySqlLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureMySqlLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AzureMySqlLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AzureMySqlLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AzureMySqlLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureMySqlLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o AzureMySqlLinkedServiceResponseOutput) Password() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureMySqlLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse { return v.Password }).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// Type of linked service.
// Expected value is 'AzureMySql'.
func (o AzureMySqlLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMySqlLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Azure MySql sink.
type AzureMySqlSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to execute before starting the copy. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureMySqlSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// AzureMySqlSinkInput is an input type that accepts AzureMySqlSinkArgs and AzureMySqlSinkOutput values.
// You can construct a concrete instance of `AzureMySqlSinkInput` via:
//
//	AzureMySqlSinkArgs{...}
type AzureMySqlSinkInput interface {
	pulumi.Input

	ToAzureMySqlSinkOutput() AzureMySqlSinkOutput
	ToAzureMySqlSinkOutputWithContext(context.Context) AzureMySqlSinkOutput
}

// A copy activity Azure MySql sink.
type AzureMySqlSinkArgs struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// A query to execute before starting the copy. Type: string (or Expression with resultType string).
	PreCopyScript pulumi.Input `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount pulumi.Input `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait pulumi.Input `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureMySqlSink'.
	Type pulumi.StringInput `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize pulumi.Input `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout pulumi.Input `pulumi:"writeBatchTimeout"`
}

func (AzureMySqlSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMySqlSink)(nil)).Elem()
}

func (i AzureMySqlSinkArgs) ToAzureMySqlSinkOutput() AzureMySqlSinkOutput {
	return i.ToAzureMySqlSinkOutputWithContext(context.Background())
}

func (i AzureMySqlSinkArgs) ToAzureMySqlSinkOutputWithContext(ctx context.Context) AzureMySqlSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMySqlSinkOutput)
}

// A copy activity Azure MySql sink.
type AzureMySqlSinkOutput struct{ *pulumi.OutputState }

func (AzureMySqlSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMySqlSink)(nil)).Elem()
}

func (o AzureMySqlSinkOutput) ToAzureMySqlSinkOutput() AzureMySqlSinkOutput {
	return o
}

func (o AzureMySqlSinkOutput) ToAzureMySqlSinkOutputWithContext(ctx context.Context) AzureMySqlSinkOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureMySqlSinkOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlSink) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o AzureMySqlSinkOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlSink) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to execute before starting the copy. Type: string (or Expression with resultType string).
func (o AzureMySqlSinkOutput) PreCopyScript() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlSink) interface{} { return v.PreCopyScript }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o AzureMySqlSinkOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlSink) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureMySqlSinkOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlSink) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'AzureMySqlSink'.
func (o AzureMySqlSinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMySqlSink) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o AzureMySqlSinkOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlSink) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureMySqlSinkOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlSink) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity Azure MySql sink.
type AzureMySqlSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to execute before starting the copy. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureMySqlSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Azure MySql sink.
type AzureMySqlSinkResponseOutput struct{ *pulumi.OutputState }

func (AzureMySqlSinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMySqlSinkResponse)(nil)).Elem()
}

func (o AzureMySqlSinkResponseOutput) ToAzureMySqlSinkResponseOutput() AzureMySqlSinkResponseOutput {
	return o
}

func (o AzureMySqlSinkResponseOutput) ToAzureMySqlSinkResponseOutputWithContext(ctx context.Context) AzureMySqlSinkResponseOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureMySqlSinkResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlSinkResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o AzureMySqlSinkResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlSinkResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to execute before starting the copy. Type: string (or Expression with resultType string).
func (o AzureMySqlSinkResponseOutput) PreCopyScript() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlSinkResponse) interface{} { return v.PreCopyScript }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o AzureMySqlSinkResponseOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlSinkResponse) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureMySqlSinkResponseOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlSinkResponse) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'AzureMySqlSink'.
func (o AzureMySqlSinkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMySqlSinkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o AzureMySqlSinkResponseOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlSinkResponse) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureMySqlSinkResponseOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlSinkResponse) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity Azure MySQL source.
type AzureMySqlSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzureMySqlSource'.
	Type string `pulumi:"type"`
}

// AzureMySqlSourceInput is an input type that accepts AzureMySqlSourceArgs and AzureMySqlSourceOutput values.
// You can construct a concrete instance of `AzureMySqlSourceInput` via:
//
//	AzureMySqlSourceArgs{...}
type AzureMySqlSourceInput interface {
	pulumi.Input

	ToAzureMySqlSourceOutput() AzureMySqlSourceOutput
	ToAzureMySqlSourceOutputWithContext(context.Context) AzureMySqlSourceOutput
}

// A copy activity Azure MySQL source.
type AzureMySqlSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzureMySqlSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureMySqlSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMySqlSource)(nil)).Elem()
}

func (i AzureMySqlSourceArgs) ToAzureMySqlSourceOutput() AzureMySqlSourceOutput {
	return i.ToAzureMySqlSourceOutputWithContext(context.Background())
}

func (i AzureMySqlSourceArgs) ToAzureMySqlSourceOutputWithContext(ctx context.Context) AzureMySqlSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMySqlSourceOutput)
}

// A copy activity Azure MySQL source.
type AzureMySqlSourceOutput struct{ *pulumi.OutputState }

func (AzureMySqlSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMySqlSource)(nil)).Elem()
}

func (o AzureMySqlSourceOutput) ToAzureMySqlSourceOutput() AzureMySqlSourceOutput {
	return o
}

func (o AzureMySqlSourceOutput) ToAzureMySqlSourceOutputWithContext(ctx context.Context) AzureMySqlSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o AzureMySqlSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureMySqlSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureMySqlSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Database query. Type: string (or Expression with resultType string).
func (o AzureMySqlSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureMySqlSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o AzureMySqlSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureMySqlSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'AzureMySqlSource'.
func (o AzureMySqlSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMySqlSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Azure MySQL source.
type AzureMySqlSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzureMySqlSource'.
	Type string `pulumi:"type"`
}

// A copy activity Azure MySQL source.
type AzureMySqlSourceResponseOutput struct{ *pulumi.OutputState }

func (AzureMySqlSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMySqlSourceResponse)(nil)).Elem()
}

func (o AzureMySqlSourceResponseOutput) ToAzureMySqlSourceResponseOutput() AzureMySqlSourceResponseOutput {
	return o
}

func (o AzureMySqlSourceResponseOutput) ToAzureMySqlSourceResponseOutputWithContext(ctx context.Context) AzureMySqlSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o AzureMySqlSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureMySqlSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureMySqlSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Database query. Type: string (or Expression with resultType string).
func (o AzureMySqlSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureMySqlSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o AzureMySqlSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureMySqlSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'AzureMySqlSource'.
func (o AzureMySqlSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMySqlSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Azure MySQL database dataset.
type AzureMySqlTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The name of Azure MySQL database table. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// The Azure MySQL database table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzureMySqlTable'.
	Type string `pulumi:"type"`
}

// AzureMySqlTableDatasetInput is an input type that accepts AzureMySqlTableDatasetArgs and AzureMySqlTableDatasetOutput values.
// You can construct a concrete instance of `AzureMySqlTableDatasetInput` via:
//
//	AzureMySqlTableDatasetArgs{...}
type AzureMySqlTableDatasetInput interface {
	pulumi.Input

	ToAzureMySqlTableDatasetOutput() AzureMySqlTableDatasetOutput
	ToAzureMySqlTableDatasetOutputWithContext(context.Context) AzureMySqlTableDatasetOutput
}

// The Azure MySQL database dataset.
type AzureMySqlTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The name of Azure MySQL database table. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// The Azure MySQL database table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzureMySqlTable'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureMySqlTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMySqlTableDataset)(nil)).Elem()
}

func (i AzureMySqlTableDatasetArgs) ToAzureMySqlTableDatasetOutput() AzureMySqlTableDatasetOutput {
	return i.ToAzureMySqlTableDatasetOutputWithContext(context.Background())
}

func (i AzureMySqlTableDatasetArgs) ToAzureMySqlTableDatasetOutputWithContext(ctx context.Context) AzureMySqlTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMySqlTableDatasetOutput)
}

// The Azure MySQL database dataset.
type AzureMySqlTableDatasetOutput struct{ *pulumi.OutputState }

func (AzureMySqlTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMySqlTableDataset)(nil)).Elem()
}

func (o AzureMySqlTableDatasetOutput) ToAzureMySqlTableDatasetOutput() AzureMySqlTableDatasetOutput {
	return o
}

func (o AzureMySqlTableDatasetOutput) ToAzureMySqlTableDatasetOutputWithContext(ctx context.Context) AzureMySqlTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureMySqlTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureMySqlTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AzureMySqlTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureMySqlTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v AzureMySqlTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o AzureMySqlTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v AzureMySqlTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o AzureMySqlTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureMySqlTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureMySqlTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureMySqlTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The name of Azure MySQL database table. Type: string (or Expression with resultType string).
func (o AzureMySqlTableDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlTableDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// The Azure MySQL database table name. Type: string (or Expression with resultType string).
func (o AzureMySqlTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'AzureMySqlTable'.
func (o AzureMySqlTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMySqlTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Azure MySQL database dataset.
type AzureMySqlTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The name of Azure MySQL database table. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// The Azure MySQL database table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzureMySqlTable'.
	Type string `pulumi:"type"`
}

// The Azure MySQL database dataset.
type AzureMySqlTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (AzureMySqlTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMySqlTableDatasetResponse)(nil)).Elem()
}

func (o AzureMySqlTableDatasetResponseOutput) ToAzureMySqlTableDatasetResponseOutput() AzureMySqlTableDatasetResponseOutput {
	return o
}

func (o AzureMySqlTableDatasetResponseOutput) ToAzureMySqlTableDatasetResponseOutputWithContext(ctx context.Context) AzureMySqlTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureMySqlTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureMySqlTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AzureMySqlTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureMySqlTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v AzureMySqlTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o AzureMySqlTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AzureMySqlTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o AzureMySqlTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureMySqlTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureMySqlTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureMySqlTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The name of Azure MySQL database table. Type: string (or Expression with resultType string).
func (o AzureMySqlTableDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlTableDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// The Azure MySQL database table name. Type: string (or Expression with resultType string).
func (o AzureMySqlTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureMySqlTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'AzureMySqlTable'.
func (o AzureMySqlTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMySqlTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure PostgreSQL linked service.
type AzurePostgreSqlLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'AzurePostgreSql'.
	Type string `pulumi:"type"`
}

// AzurePostgreSqlLinkedServiceInput is an input type that accepts AzurePostgreSqlLinkedServiceArgs and AzurePostgreSqlLinkedServiceOutput values.
// You can construct a concrete instance of `AzurePostgreSqlLinkedServiceInput` via:
//
//	AzurePostgreSqlLinkedServiceArgs{...}
type AzurePostgreSqlLinkedServiceInput interface {
	pulumi.Input

	ToAzurePostgreSqlLinkedServiceOutput() AzurePostgreSqlLinkedServiceOutput
	ToAzurePostgreSqlLinkedServiceOutputWithContext(context.Context) AzurePostgreSqlLinkedServiceOutput
}

// Azure PostgreSQL linked service.
type AzurePostgreSqlLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password AzureKeyVaultSecretReferencePtrInput `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'AzurePostgreSql'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzurePostgreSqlLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzurePostgreSqlLinkedService)(nil)).Elem()
}

func (i AzurePostgreSqlLinkedServiceArgs) ToAzurePostgreSqlLinkedServiceOutput() AzurePostgreSqlLinkedServiceOutput {
	return i.ToAzurePostgreSqlLinkedServiceOutputWithContext(context.Background())
}

func (i AzurePostgreSqlLinkedServiceArgs) ToAzurePostgreSqlLinkedServiceOutputWithContext(ctx context.Context) AzurePostgreSqlLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzurePostgreSqlLinkedServiceOutput)
}

// Azure PostgreSQL linked service.
type AzurePostgreSqlLinkedServiceOutput struct{ *pulumi.OutputState }

func (AzurePostgreSqlLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzurePostgreSqlLinkedService)(nil)).Elem()
}

func (o AzurePostgreSqlLinkedServiceOutput) ToAzurePostgreSqlLinkedServiceOutput() AzurePostgreSqlLinkedServiceOutput {
	return o
}

func (o AzurePostgreSqlLinkedServiceOutput) ToAzurePostgreSqlLinkedServiceOutputWithContext(ctx context.Context) AzurePostgreSqlLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzurePostgreSqlLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzurePostgreSqlLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AzurePostgreSqlLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzurePostgreSqlLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AzurePostgreSqlLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AzurePostgreSqlLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AzurePostgreSqlLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzurePostgreSqlLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o AzurePostgreSqlLinkedServiceOutput) Password() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlLinkedService) *AzureKeyVaultSecretReference { return v.Password }).(AzureKeyVaultSecretReferencePtrOutput)
}

// Type of linked service.
// Expected value is 'AzurePostgreSql'.
func (o AzurePostgreSqlLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzurePostgreSqlLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Azure PostgreSQL linked service.
type AzurePostgreSqlLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReferenceResponse `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'AzurePostgreSql'.
	Type string `pulumi:"type"`
}

// Azure PostgreSQL linked service.
type AzurePostgreSqlLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzurePostgreSqlLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzurePostgreSqlLinkedServiceResponse)(nil)).Elem()
}

func (o AzurePostgreSqlLinkedServiceResponseOutput) ToAzurePostgreSqlLinkedServiceResponseOutput() AzurePostgreSqlLinkedServiceResponseOutput {
	return o
}

func (o AzurePostgreSqlLinkedServiceResponseOutput) ToAzurePostgreSqlLinkedServiceResponseOutputWithContext(ctx context.Context) AzurePostgreSqlLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzurePostgreSqlLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzurePostgreSqlLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AzurePostgreSqlLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzurePostgreSqlLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AzurePostgreSqlLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AzurePostgreSqlLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AzurePostgreSqlLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzurePostgreSqlLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o AzurePostgreSqlLinkedServiceResponseOutput) Password() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse { return v.Password }).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// Type of linked service.
// Expected value is 'AzurePostgreSql'.
func (o AzurePostgreSqlLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzurePostgreSqlLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Azure PostgreSQL sink.
type AzurePostgreSqlSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to execute before starting the copy. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzurePostgreSqlSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// AzurePostgreSqlSinkInput is an input type that accepts AzurePostgreSqlSinkArgs and AzurePostgreSqlSinkOutput values.
// You can construct a concrete instance of `AzurePostgreSqlSinkInput` via:
//
//	AzurePostgreSqlSinkArgs{...}
type AzurePostgreSqlSinkInput interface {
	pulumi.Input

	ToAzurePostgreSqlSinkOutput() AzurePostgreSqlSinkOutput
	ToAzurePostgreSqlSinkOutputWithContext(context.Context) AzurePostgreSqlSinkOutput
}

// A copy activity Azure PostgreSQL sink.
type AzurePostgreSqlSinkArgs struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// A query to execute before starting the copy. Type: string (or Expression with resultType string).
	PreCopyScript pulumi.Input `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount pulumi.Input `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait pulumi.Input `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzurePostgreSqlSink'.
	Type pulumi.StringInput `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize pulumi.Input `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout pulumi.Input `pulumi:"writeBatchTimeout"`
}

func (AzurePostgreSqlSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzurePostgreSqlSink)(nil)).Elem()
}

func (i AzurePostgreSqlSinkArgs) ToAzurePostgreSqlSinkOutput() AzurePostgreSqlSinkOutput {
	return i.ToAzurePostgreSqlSinkOutputWithContext(context.Background())
}

func (i AzurePostgreSqlSinkArgs) ToAzurePostgreSqlSinkOutputWithContext(ctx context.Context) AzurePostgreSqlSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzurePostgreSqlSinkOutput)
}

// A copy activity Azure PostgreSQL sink.
type AzurePostgreSqlSinkOutput struct{ *pulumi.OutputState }

func (AzurePostgreSqlSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzurePostgreSqlSink)(nil)).Elem()
}

func (o AzurePostgreSqlSinkOutput) ToAzurePostgreSqlSinkOutput() AzurePostgreSqlSinkOutput {
	return o
}

func (o AzurePostgreSqlSinkOutput) ToAzurePostgreSqlSinkOutputWithContext(ctx context.Context) AzurePostgreSqlSinkOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzurePostgreSqlSinkOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlSink) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o AzurePostgreSqlSinkOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlSink) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to execute before starting the copy. Type: string (or Expression with resultType string).
func (o AzurePostgreSqlSinkOutput) PreCopyScript() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlSink) interface{} { return v.PreCopyScript }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o AzurePostgreSqlSinkOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlSink) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzurePostgreSqlSinkOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlSink) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'AzurePostgreSqlSink'.
func (o AzurePostgreSqlSinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzurePostgreSqlSink) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o AzurePostgreSqlSinkOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlSink) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzurePostgreSqlSinkOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlSink) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity Azure PostgreSQL sink.
type AzurePostgreSqlSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to execute before starting the copy. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzurePostgreSqlSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Azure PostgreSQL sink.
type AzurePostgreSqlSinkResponseOutput struct{ *pulumi.OutputState }

func (AzurePostgreSqlSinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzurePostgreSqlSinkResponse)(nil)).Elem()
}

func (o AzurePostgreSqlSinkResponseOutput) ToAzurePostgreSqlSinkResponseOutput() AzurePostgreSqlSinkResponseOutput {
	return o
}

func (o AzurePostgreSqlSinkResponseOutput) ToAzurePostgreSqlSinkResponseOutputWithContext(ctx context.Context) AzurePostgreSqlSinkResponseOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzurePostgreSqlSinkResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlSinkResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o AzurePostgreSqlSinkResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlSinkResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to execute before starting the copy. Type: string (or Expression with resultType string).
func (o AzurePostgreSqlSinkResponseOutput) PreCopyScript() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlSinkResponse) interface{} { return v.PreCopyScript }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o AzurePostgreSqlSinkResponseOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlSinkResponse) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzurePostgreSqlSinkResponseOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlSinkResponse) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'AzurePostgreSqlSink'.
func (o AzurePostgreSqlSinkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzurePostgreSqlSinkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o AzurePostgreSqlSinkResponseOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlSinkResponse) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzurePostgreSqlSinkResponseOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlSinkResponse) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity Azure PostgreSQL source.
type AzurePostgreSqlSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzurePostgreSqlSource'.
	Type string `pulumi:"type"`
}

// AzurePostgreSqlSourceInput is an input type that accepts AzurePostgreSqlSourceArgs and AzurePostgreSqlSourceOutput values.
// You can construct a concrete instance of `AzurePostgreSqlSourceInput` via:
//
//	AzurePostgreSqlSourceArgs{...}
type AzurePostgreSqlSourceInput interface {
	pulumi.Input

	ToAzurePostgreSqlSourceOutput() AzurePostgreSqlSourceOutput
	ToAzurePostgreSqlSourceOutputWithContext(context.Context) AzurePostgreSqlSourceOutput
}

// A copy activity Azure PostgreSQL source.
type AzurePostgreSqlSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzurePostgreSqlSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzurePostgreSqlSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzurePostgreSqlSource)(nil)).Elem()
}

func (i AzurePostgreSqlSourceArgs) ToAzurePostgreSqlSourceOutput() AzurePostgreSqlSourceOutput {
	return i.ToAzurePostgreSqlSourceOutputWithContext(context.Background())
}

func (i AzurePostgreSqlSourceArgs) ToAzurePostgreSqlSourceOutputWithContext(ctx context.Context) AzurePostgreSqlSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzurePostgreSqlSourceOutput)
}

// A copy activity Azure PostgreSQL source.
type AzurePostgreSqlSourceOutput struct{ *pulumi.OutputState }

func (AzurePostgreSqlSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzurePostgreSqlSource)(nil)).Elem()
}

func (o AzurePostgreSqlSourceOutput) ToAzurePostgreSqlSourceOutput() AzurePostgreSqlSourceOutput {
	return o
}

func (o AzurePostgreSqlSourceOutput) ToAzurePostgreSqlSourceOutputWithContext(ctx context.Context) AzurePostgreSqlSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o AzurePostgreSqlSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzurePostgreSqlSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzurePostgreSqlSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o AzurePostgreSqlSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzurePostgreSqlSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o AzurePostgreSqlSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzurePostgreSqlSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'AzurePostgreSqlSource'.
func (o AzurePostgreSqlSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzurePostgreSqlSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Azure PostgreSQL source.
type AzurePostgreSqlSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzurePostgreSqlSource'.
	Type string `pulumi:"type"`
}

// A copy activity Azure PostgreSQL source.
type AzurePostgreSqlSourceResponseOutput struct{ *pulumi.OutputState }

func (AzurePostgreSqlSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzurePostgreSqlSourceResponse)(nil)).Elem()
}

func (o AzurePostgreSqlSourceResponseOutput) ToAzurePostgreSqlSourceResponseOutput() AzurePostgreSqlSourceResponseOutput {
	return o
}

func (o AzurePostgreSqlSourceResponseOutput) ToAzurePostgreSqlSourceResponseOutputWithContext(ctx context.Context) AzurePostgreSqlSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o AzurePostgreSqlSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzurePostgreSqlSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzurePostgreSqlSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o AzurePostgreSqlSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzurePostgreSqlSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o AzurePostgreSqlSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzurePostgreSqlSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'AzurePostgreSqlSource'.
func (o AzurePostgreSqlSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzurePostgreSqlSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure PostgreSQL dataset.
type AzurePostgreSqlTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure PostgreSQL database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// The table name of the Azure PostgreSQL database which includes both schema and table. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzurePostgreSqlTable'.
	Type string `pulumi:"type"`
}

// AzurePostgreSqlTableDatasetInput is an input type that accepts AzurePostgreSqlTableDatasetArgs and AzurePostgreSqlTableDatasetOutput values.
// You can construct a concrete instance of `AzurePostgreSqlTableDatasetInput` via:
//
//	AzurePostgreSqlTableDatasetArgs{...}
type AzurePostgreSqlTableDatasetInput interface {
	pulumi.Input

	ToAzurePostgreSqlTableDatasetOutput() AzurePostgreSqlTableDatasetOutput
	ToAzurePostgreSqlTableDatasetOutputWithContext(context.Context) AzurePostgreSqlTableDatasetOutput
}

// Azure PostgreSQL dataset.
type AzurePostgreSqlTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Azure PostgreSQL database. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// The table name of the Azure PostgreSQL database which includes both schema and table. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzurePostgreSqlTable'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzurePostgreSqlTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzurePostgreSqlTableDataset)(nil)).Elem()
}

func (i AzurePostgreSqlTableDatasetArgs) ToAzurePostgreSqlTableDatasetOutput() AzurePostgreSqlTableDatasetOutput {
	return i.ToAzurePostgreSqlTableDatasetOutputWithContext(context.Background())
}

func (i AzurePostgreSqlTableDatasetArgs) ToAzurePostgreSqlTableDatasetOutputWithContext(ctx context.Context) AzurePostgreSqlTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzurePostgreSqlTableDatasetOutput)
}

// Azure PostgreSQL dataset.
type AzurePostgreSqlTableDatasetOutput struct{ *pulumi.OutputState }

func (AzurePostgreSqlTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzurePostgreSqlTableDataset)(nil)).Elem()
}

func (o AzurePostgreSqlTableDatasetOutput) ToAzurePostgreSqlTableDatasetOutput() AzurePostgreSqlTableDatasetOutput {
	return o
}

func (o AzurePostgreSqlTableDatasetOutput) ToAzurePostgreSqlTableDatasetOutputWithContext(ctx context.Context) AzurePostgreSqlTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzurePostgreSqlTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AzurePostgreSqlTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzurePostgreSqlTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o AzurePostgreSqlTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o AzurePostgreSqlTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzurePostgreSqlTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzurePostgreSqlTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Azure PostgreSQL database. Type: string (or Expression with resultType string).
func (o AzurePostgreSqlTableDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// The table name of the Azure PostgreSQL database which includes both schema and table. Type: string (or Expression with resultType string).
func (o AzurePostgreSqlTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'AzurePostgreSqlTable'.
func (o AzurePostgreSqlTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Azure PostgreSQL dataset.
type AzurePostgreSqlTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure PostgreSQL database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// The table name of the Azure PostgreSQL database which includes both schema and table. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzurePostgreSqlTable'.
	Type string `pulumi:"type"`
}

// Azure PostgreSQL dataset.
type AzurePostgreSqlTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (AzurePostgreSqlTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzurePostgreSqlTableDatasetResponse)(nil)).Elem()
}

func (o AzurePostgreSqlTableDatasetResponseOutput) ToAzurePostgreSqlTableDatasetResponseOutput() AzurePostgreSqlTableDatasetResponseOutput {
	return o
}

func (o AzurePostgreSqlTableDatasetResponseOutput) ToAzurePostgreSqlTableDatasetResponseOutputWithContext(ctx context.Context) AzurePostgreSqlTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzurePostgreSqlTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AzurePostgreSqlTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzurePostgreSqlTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o AzurePostgreSqlTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o AzurePostgreSqlTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzurePostgreSqlTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzurePostgreSqlTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Azure PostgreSQL database. Type: string (or Expression with resultType string).
func (o AzurePostgreSqlTableDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// The table name of the Azure PostgreSQL database which includes both schema and table. Type: string (or Expression with resultType string).
func (o AzurePostgreSqlTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'AzurePostgreSqlTable'.
func (o AzurePostgreSqlTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzurePostgreSqlTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Azure Queue sink.
type AzureQueueSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureQueueSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// AzureQueueSinkInput is an input type that accepts AzureQueueSinkArgs and AzureQueueSinkOutput values.
// You can construct a concrete instance of `AzureQueueSinkInput` via:
//
//	AzureQueueSinkArgs{...}
type AzureQueueSinkInput interface {
	pulumi.Input

	ToAzureQueueSinkOutput() AzureQueueSinkOutput
	ToAzureQueueSinkOutputWithContext(context.Context) AzureQueueSinkOutput
}

// A copy activity Azure Queue sink.
type AzureQueueSinkArgs struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount pulumi.Input `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait pulumi.Input `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureQueueSink'.
	Type pulumi.StringInput `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize pulumi.Input `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout pulumi.Input `pulumi:"writeBatchTimeout"`
}

func (AzureQueueSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureQueueSink)(nil)).Elem()
}

func (i AzureQueueSinkArgs) ToAzureQueueSinkOutput() AzureQueueSinkOutput {
	return i.ToAzureQueueSinkOutputWithContext(context.Background())
}

func (i AzureQueueSinkArgs) ToAzureQueueSinkOutputWithContext(ctx context.Context) AzureQueueSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureQueueSinkOutput)
}

// A copy activity Azure Queue sink.
type AzureQueueSinkOutput struct{ *pulumi.OutputState }

func (AzureQueueSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureQueueSink)(nil)).Elem()
}

func (o AzureQueueSinkOutput) ToAzureQueueSinkOutput() AzureQueueSinkOutput {
	return o
}

func (o AzureQueueSinkOutput) ToAzureQueueSinkOutputWithContext(ctx context.Context) AzureQueueSinkOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureQueueSinkOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureQueueSink) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o AzureQueueSinkOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureQueueSink) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o AzureQueueSinkOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureQueueSink) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureQueueSinkOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureQueueSink) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'AzureQueueSink'.
func (o AzureQueueSinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureQueueSink) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o AzureQueueSinkOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureQueueSink) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureQueueSinkOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureQueueSink) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity Azure Queue sink.
type AzureQueueSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureQueueSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Azure Queue sink.
type AzureQueueSinkResponseOutput struct{ *pulumi.OutputState }

func (AzureQueueSinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureQueueSinkResponse)(nil)).Elem()
}

func (o AzureQueueSinkResponseOutput) ToAzureQueueSinkResponseOutput() AzureQueueSinkResponseOutput {
	return o
}

func (o AzureQueueSinkResponseOutput) ToAzureQueueSinkResponseOutputWithContext(ctx context.Context) AzureQueueSinkResponseOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureQueueSinkResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureQueueSinkResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o AzureQueueSinkResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureQueueSinkResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o AzureQueueSinkResponseOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureQueueSinkResponse) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureQueueSinkResponseOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureQueueSinkResponse) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'AzureQueueSink'.
func (o AzureQueueSinkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureQueueSinkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o AzureQueueSinkResponseOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureQueueSinkResponse) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureQueueSinkResponseOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureQueueSinkResponse) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// The Azure Search Index.
type AzureSearchIndexDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// The name of the Azure Search Index. Type: string (or Expression with resultType string).
	IndexName interface{} `pulumi:"indexName"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'AzureSearchIndex'.
	Type string `pulumi:"type"`
}

// AzureSearchIndexDatasetInput is an input type that accepts AzureSearchIndexDatasetArgs and AzureSearchIndexDatasetOutput values.
// You can construct a concrete instance of `AzureSearchIndexDatasetInput` via:
//
//	AzureSearchIndexDatasetArgs{...}
type AzureSearchIndexDatasetInput interface {
	pulumi.Input

	ToAzureSearchIndexDatasetOutput() AzureSearchIndexDatasetOutput
	ToAzureSearchIndexDatasetOutputWithContext(context.Context) AzureSearchIndexDatasetOutput
}

// The Azure Search Index.
type AzureSearchIndexDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// The name of the Azure Search Index. Type: string (or Expression with resultType string).
	IndexName pulumi.Input `pulumi:"indexName"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'AzureSearchIndex'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureSearchIndexDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSearchIndexDataset)(nil)).Elem()
}

func (i AzureSearchIndexDatasetArgs) ToAzureSearchIndexDatasetOutput() AzureSearchIndexDatasetOutput {
	return i.ToAzureSearchIndexDatasetOutputWithContext(context.Background())
}

func (i AzureSearchIndexDatasetArgs) ToAzureSearchIndexDatasetOutputWithContext(ctx context.Context) AzureSearchIndexDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSearchIndexDatasetOutput)
}

// The Azure Search Index.
type AzureSearchIndexDatasetOutput struct{ *pulumi.OutputState }

func (AzureSearchIndexDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSearchIndexDataset)(nil)).Elem()
}

func (o AzureSearchIndexDatasetOutput) ToAzureSearchIndexDatasetOutput() AzureSearchIndexDatasetOutput {
	return o
}

func (o AzureSearchIndexDatasetOutput) ToAzureSearchIndexDatasetOutputWithContext(ctx context.Context) AzureSearchIndexDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureSearchIndexDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureSearchIndexDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AzureSearchIndexDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSearchIndexDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureSearchIndexDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v AzureSearchIndexDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// The name of the Azure Search Index. Type: string (or Expression with resultType string).
func (o AzureSearchIndexDatasetOutput) IndexName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSearchIndexDataset) interface{} { return v.IndexName }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o AzureSearchIndexDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v AzureSearchIndexDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o AzureSearchIndexDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureSearchIndexDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureSearchIndexDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSearchIndexDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureSearchIndexDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSearchIndexDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'AzureSearchIndex'.
func (o AzureSearchIndexDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSearchIndexDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Azure Search Index.
type AzureSearchIndexDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// The name of the Azure Search Index. Type: string (or Expression with resultType string).
	IndexName interface{} `pulumi:"indexName"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'AzureSearchIndex'.
	Type string `pulumi:"type"`
}

// The Azure Search Index.
type AzureSearchIndexDatasetResponseOutput struct{ *pulumi.OutputState }

func (AzureSearchIndexDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSearchIndexDatasetResponse)(nil)).Elem()
}

func (o AzureSearchIndexDatasetResponseOutput) ToAzureSearchIndexDatasetResponseOutput() AzureSearchIndexDatasetResponseOutput {
	return o
}

func (o AzureSearchIndexDatasetResponseOutput) ToAzureSearchIndexDatasetResponseOutputWithContext(ctx context.Context) AzureSearchIndexDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureSearchIndexDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureSearchIndexDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AzureSearchIndexDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSearchIndexDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureSearchIndexDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v AzureSearchIndexDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// The name of the Azure Search Index. Type: string (or Expression with resultType string).
func (o AzureSearchIndexDatasetResponseOutput) IndexName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSearchIndexDatasetResponse) interface{} { return v.IndexName }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o AzureSearchIndexDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AzureSearchIndexDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o AzureSearchIndexDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureSearchIndexDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureSearchIndexDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSearchIndexDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureSearchIndexDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSearchIndexDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'AzureSearchIndex'.
func (o AzureSearchIndexDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSearchIndexDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Azure Search Index sink.
type AzureSearchIndexSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureSearchIndexSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Specify the write behavior when upserting documents into Azure Search Index.
	WriteBehavior *string `pulumi:"writeBehavior"`
}

// AzureSearchIndexSinkInput is an input type that accepts AzureSearchIndexSinkArgs and AzureSearchIndexSinkOutput values.
// You can construct a concrete instance of `AzureSearchIndexSinkInput` via:
//
//	AzureSearchIndexSinkArgs{...}
type AzureSearchIndexSinkInput interface {
	pulumi.Input

	ToAzureSearchIndexSinkOutput() AzureSearchIndexSinkOutput
	ToAzureSearchIndexSinkOutputWithContext(context.Context) AzureSearchIndexSinkOutput
}

// A copy activity Azure Search Index sink.
type AzureSearchIndexSinkArgs struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount pulumi.Input `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait pulumi.Input `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureSearchIndexSink'.
	Type pulumi.StringInput `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize pulumi.Input `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout pulumi.Input `pulumi:"writeBatchTimeout"`
	// Specify the write behavior when upserting documents into Azure Search Index.
	WriteBehavior pulumi.StringPtrInput `pulumi:"writeBehavior"`
}

func (AzureSearchIndexSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSearchIndexSink)(nil)).Elem()
}

func (i AzureSearchIndexSinkArgs) ToAzureSearchIndexSinkOutput() AzureSearchIndexSinkOutput {
	return i.ToAzureSearchIndexSinkOutputWithContext(context.Background())
}

func (i AzureSearchIndexSinkArgs) ToAzureSearchIndexSinkOutputWithContext(ctx context.Context) AzureSearchIndexSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSearchIndexSinkOutput)
}

// A copy activity Azure Search Index sink.
type AzureSearchIndexSinkOutput struct{ *pulumi.OutputState }

func (AzureSearchIndexSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSearchIndexSink)(nil)).Elem()
}

func (o AzureSearchIndexSinkOutput) ToAzureSearchIndexSinkOutput() AzureSearchIndexSinkOutput {
	return o
}

func (o AzureSearchIndexSinkOutput) ToAzureSearchIndexSinkOutputWithContext(ctx context.Context) AzureSearchIndexSinkOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureSearchIndexSinkOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSearchIndexSink) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o AzureSearchIndexSinkOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSearchIndexSink) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o AzureSearchIndexSinkOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSearchIndexSink) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureSearchIndexSinkOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSearchIndexSink) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'AzureSearchIndexSink'.
func (o AzureSearchIndexSinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSearchIndexSink) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o AzureSearchIndexSinkOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSearchIndexSink) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureSearchIndexSinkOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSearchIndexSink) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// Specify the write behavior when upserting documents into Azure Search Index.
func (o AzureSearchIndexSinkOutput) WriteBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSearchIndexSink) *string { return v.WriteBehavior }).(pulumi.StringPtrOutput)
}

// A copy activity Azure Search Index sink.
type AzureSearchIndexSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureSearchIndexSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Specify the write behavior when upserting documents into Azure Search Index.
	WriteBehavior *string `pulumi:"writeBehavior"`
}

// A copy activity Azure Search Index sink.
type AzureSearchIndexSinkResponseOutput struct{ *pulumi.OutputState }

func (AzureSearchIndexSinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSearchIndexSinkResponse)(nil)).Elem()
}

func (o AzureSearchIndexSinkResponseOutput) ToAzureSearchIndexSinkResponseOutput() AzureSearchIndexSinkResponseOutput {
	return o
}

func (o AzureSearchIndexSinkResponseOutput) ToAzureSearchIndexSinkResponseOutputWithContext(ctx context.Context) AzureSearchIndexSinkResponseOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureSearchIndexSinkResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSearchIndexSinkResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o AzureSearchIndexSinkResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSearchIndexSinkResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o AzureSearchIndexSinkResponseOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSearchIndexSinkResponse) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureSearchIndexSinkResponseOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSearchIndexSinkResponse) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'AzureSearchIndexSink'.
func (o AzureSearchIndexSinkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSearchIndexSinkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o AzureSearchIndexSinkResponseOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSearchIndexSinkResponse) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureSearchIndexSinkResponseOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSearchIndexSinkResponse) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// Specify the write behavior when upserting documents into Azure Search Index.
func (o AzureSearchIndexSinkResponseOutput) WriteBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSearchIndexSinkResponse) *string { return v.WriteBehavior }).(pulumi.StringPtrOutput)
}

// Linked service for Windows Azure Search Service.
type AzureSearchLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Admin Key for Azure Search service
	Key interface{} `pulumi:"key"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'AzureSearch'.
	Type string `pulumi:"type"`
	// URL for Azure Search service. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
}

// AzureSearchLinkedServiceInput is an input type that accepts AzureSearchLinkedServiceArgs and AzureSearchLinkedServiceOutput values.
// You can construct a concrete instance of `AzureSearchLinkedServiceInput` via:
//
//	AzureSearchLinkedServiceArgs{...}
type AzureSearchLinkedServiceInput interface {
	pulumi.Input

	ToAzureSearchLinkedServiceOutput() AzureSearchLinkedServiceOutput
	ToAzureSearchLinkedServiceOutputWithContext(context.Context) AzureSearchLinkedServiceOutput
}

// Linked service for Windows Azure Search Service.
type AzureSearchLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Admin Key for Azure Search service
	Key pulumi.Input `pulumi:"key"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'AzureSearch'.
	Type pulumi.StringInput `pulumi:"type"`
	// URL for Azure Search service. Type: string (or Expression with resultType string).
	Url pulumi.Input `pulumi:"url"`
}

func (AzureSearchLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSearchLinkedService)(nil)).Elem()
}

func (i AzureSearchLinkedServiceArgs) ToAzureSearchLinkedServiceOutput() AzureSearchLinkedServiceOutput {
	return i.ToAzureSearchLinkedServiceOutputWithContext(context.Background())
}

func (i AzureSearchLinkedServiceArgs) ToAzureSearchLinkedServiceOutputWithContext(ctx context.Context) AzureSearchLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSearchLinkedServiceOutput)
}

// Linked service for Windows Azure Search Service.
type AzureSearchLinkedServiceOutput struct{ *pulumi.OutputState }

func (AzureSearchLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSearchLinkedService)(nil)).Elem()
}

func (o AzureSearchLinkedServiceOutput) ToAzureSearchLinkedServiceOutput() AzureSearchLinkedServiceOutput {
	return o
}

func (o AzureSearchLinkedServiceOutput) ToAzureSearchLinkedServiceOutputWithContext(ctx context.Context) AzureSearchLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzureSearchLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureSearchLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AzureSearchLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzureSearchLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o AzureSearchLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSearchLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AzureSearchLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSearchLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Admin Key for Azure Search service
func (o AzureSearchLinkedServiceOutput) Key() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSearchLinkedService) interface{} { return v.Key }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureSearchLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureSearchLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
// Expected value is 'AzureSearch'.
func (o AzureSearchLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSearchLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// URL for Azure Search service. Type: string (or Expression with resultType string).
func (o AzureSearchLinkedServiceOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSearchLinkedService) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// Linked service for Windows Azure Search Service.
type AzureSearchLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Admin Key for Azure Search service
	Key interface{} `pulumi:"key"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'AzureSearch'.
	Type string `pulumi:"type"`
	// URL for Azure Search service. Type: string (or Expression with resultType string).
	Url interface{} `pulumi:"url"`
}

// Linked service for Windows Azure Search Service.
type AzureSearchLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureSearchLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSearchLinkedServiceResponse)(nil)).Elem()
}

func (o AzureSearchLinkedServiceResponseOutput) ToAzureSearchLinkedServiceResponseOutput() AzureSearchLinkedServiceResponseOutput {
	return o
}

func (o AzureSearchLinkedServiceResponseOutput) ToAzureSearchLinkedServiceResponseOutputWithContext(ctx context.Context) AzureSearchLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzureSearchLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureSearchLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AzureSearchLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureSearchLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o AzureSearchLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSearchLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AzureSearchLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSearchLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Admin Key for Azure Search service
func (o AzureSearchLinkedServiceResponseOutput) Key() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSearchLinkedServiceResponse) interface{} { return v.Key }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureSearchLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureSearchLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
// Expected value is 'AzureSearch'.
func (o AzureSearchLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSearchLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// URL for Azure Search service. Type: string (or Expression with resultType string).
func (o AzureSearchLinkedServiceResponseOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSearchLinkedServiceResponse) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// Azure SQL Data Warehouse linked service.
type AzureSqlDWLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference `pulumi:"password"`
	// The ID of the service principal used to authenticate against Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Data Warehouse.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureSqlDW'.
	Type string `pulumi:"type"`
}

// AzureSqlDWLinkedServiceInput is an input type that accepts AzureSqlDWLinkedServiceArgs and AzureSqlDWLinkedServiceOutput values.
// You can construct a concrete instance of `AzureSqlDWLinkedServiceInput` via:
//
//	AzureSqlDWLinkedServiceArgs{...}
type AzureSqlDWLinkedServiceInput interface {
	pulumi.Input

	ToAzureSqlDWLinkedServiceOutput() AzureSqlDWLinkedServiceOutput
	ToAzureSqlDWLinkedServiceOutputWithContext(context.Context) AzureSqlDWLinkedServiceOutput
}

// Azure SQL Data Warehouse linked service.
type AzureSqlDWLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType pulumi.Input `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// The credential reference containing authentication information.
	Credential CredentialReferencePtrInput `pulumi:"credential"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password AzureKeyVaultSecretReferencePtrInput `pulumi:"password"`
	// The ID of the service principal used to authenticate against Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Data Warehouse.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant pulumi.Input `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureSqlDW'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureSqlDWLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlDWLinkedService)(nil)).Elem()
}

func (i AzureSqlDWLinkedServiceArgs) ToAzureSqlDWLinkedServiceOutput() AzureSqlDWLinkedServiceOutput {
	return i.ToAzureSqlDWLinkedServiceOutputWithContext(context.Background())
}

func (i AzureSqlDWLinkedServiceArgs) ToAzureSqlDWLinkedServiceOutputWithContext(ctx context.Context) AzureSqlDWLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSqlDWLinkedServiceOutput)
}

// Azure SQL Data Warehouse linked service.
type AzureSqlDWLinkedServiceOutput struct{ *pulumi.OutputState }

func (AzureSqlDWLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlDWLinkedService)(nil)).Elem()
}

func (o AzureSqlDWLinkedServiceOutput) ToAzureSqlDWLinkedServiceOutput() AzureSqlDWLinkedServiceOutput {
	return o
}

func (o AzureSqlDWLinkedServiceOutput) ToAzureSqlDWLinkedServiceOutputWithContext(ctx context.Context) AzureSqlDWLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzureSqlDWLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
func (o AzureSqlDWLinkedServiceOutput) AzureCloudType() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedService) interface{} { return v.AzureCloudType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureSqlDWLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureSqlDWLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// The credential reference containing authentication information.
func (o AzureSqlDWLinkedServiceOutput) Credential() CredentialReferencePtrOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedService) *CredentialReference { return v.Credential }).(CredentialReferencePtrOutput)
}

// Linked service description.
func (o AzureSqlDWLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AzureSqlDWLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AzureSqlDWLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o AzureSqlDWLinkedServiceOutput) Password() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedService) *AzureKeyVaultSecretReference { return v.Password }).(AzureKeyVaultSecretReferencePtrOutput)
}

// The ID of the service principal used to authenticate against Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
func (o AzureSqlDWLinkedServiceOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedService) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The key of the service principal used to authenticate against Azure SQL Data Warehouse.
func (o AzureSqlDWLinkedServiceOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedService) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureSqlDWLinkedServiceOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedService) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AzureSqlDW'.
func (o AzureSqlDWLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Azure SQL Data Warehouse linked service.
type AzureSqlDWLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReferenceResponse `pulumi:"password"`
	// The ID of the service principal used to authenticate against Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Data Warehouse.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureSqlDW'.
	Type string `pulumi:"type"`
}

// Azure SQL Data Warehouse linked service.
type AzureSqlDWLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureSqlDWLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlDWLinkedServiceResponse)(nil)).Elem()
}

func (o AzureSqlDWLinkedServiceResponseOutput) ToAzureSqlDWLinkedServiceResponseOutput() AzureSqlDWLinkedServiceResponseOutput {
	return o
}

func (o AzureSqlDWLinkedServiceResponseOutput) ToAzureSqlDWLinkedServiceResponseOutputWithContext(ctx context.Context) AzureSqlDWLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzureSqlDWLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
func (o AzureSqlDWLinkedServiceResponseOutput) AzureCloudType() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedServiceResponse) interface{} { return v.AzureCloudType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureSqlDWLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureSqlDWLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// The credential reference containing authentication information.
func (o AzureSqlDWLinkedServiceResponseOutput) Credential() CredentialReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedServiceResponse) *CredentialReferenceResponse { return v.Credential }).(CredentialReferenceResponsePtrOutput)
}

// Linked service description.
func (o AzureSqlDWLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AzureSqlDWLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AzureSqlDWLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o AzureSqlDWLinkedServiceResponseOutput) Password() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse { return v.Password }).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// The ID of the service principal used to authenticate against Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
func (o AzureSqlDWLinkedServiceResponseOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedServiceResponse) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The key of the service principal used to authenticate against Azure SQL Data Warehouse.
func (o AzureSqlDWLinkedServiceResponseOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedServiceResponse) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureSqlDWLinkedServiceResponseOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedServiceResponse) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AzureSqlDW'.
func (o AzureSqlDWLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSqlDWLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Azure SQL Data Warehouse dataset.
type AzureSqlDWTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzureSqlDWTable'.
	Type string `pulumi:"type"`
}

// AzureSqlDWTableDatasetInput is an input type that accepts AzureSqlDWTableDatasetArgs and AzureSqlDWTableDatasetOutput values.
// You can construct a concrete instance of `AzureSqlDWTableDatasetInput` via:
//
//	AzureSqlDWTableDatasetArgs{...}
type AzureSqlDWTableDatasetInput interface {
	pulumi.Input

	ToAzureSqlDWTableDatasetOutput() AzureSqlDWTableDatasetOutput
	ToAzureSqlDWTableDatasetOutputWithContext(context.Context) AzureSqlDWTableDatasetOutput
}

// The Azure SQL Data Warehouse dataset.
type AzureSqlDWTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzureSqlDWTable'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureSqlDWTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlDWTableDataset)(nil)).Elem()
}

func (i AzureSqlDWTableDatasetArgs) ToAzureSqlDWTableDatasetOutput() AzureSqlDWTableDatasetOutput {
	return i.ToAzureSqlDWTableDatasetOutputWithContext(context.Background())
}

func (i AzureSqlDWTableDatasetArgs) ToAzureSqlDWTableDatasetOutputWithContext(ctx context.Context) AzureSqlDWTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSqlDWTableDatasetOutput)
}

// The Azure SQL Data Warehouse dataset.
type AzureSqlDWTableDatasetOutput struct{ *pulumi.OutputState }

func (AzureSqlDWTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlDWTableDataset)(nil)).Elem()
}

func (o AzureSqlDWTableDatasetOutput) ToAzureSqlDWTableDatasetOutput() AzureSqlDWTableDatasetOutput {
	return o
}

func (o AzureSqlDWTableDatasetOutput) ToAzureSqlDWTableDatasetOutputWithContext(ctx context.Context) AzureSqlDWTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureSqlDWTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureSqlDWTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AzureSqlDWTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDWTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureSqlDWTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v AzureSqlDWTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o AzureSqlDWTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v AzureSqlDWTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o AzureSqlDWTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureSqlDWTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureSqlDWTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDWTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureSqlDWTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDWTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
func (o AzureSqlDWTableDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDWTableDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o AzureSqlDWTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDWTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'AzureSqlDWTable'.
func (o AzureSqlDWTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSqlDWTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Azure SQL Data Warehouse dataset.
type AzureSqlDWTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzureSqlDWTable'.
	Type string `pulumi:"type"`
}

// The Azure SQL Data Warehouse dataset.
type AzureSqlDWTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (AzureSqlDWTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlDWTableDatasetResponse)(nil)).Elem()
}

func (o AzureSqlDWTableDatasetResponseOutput) ToAzureSqlDWTableDatasetResponseOutput() AzureSqlDWTableDatasetResponseOutput {
	return o
}

func (o AzureSqlDWTableDatasetResponseOutput) ToAzureSqlDWTableDatasetResponseOutputWithContext(ctx context.Context) AzureSqlDWTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureSqlDWTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureSqlDWTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AzureSqlDWTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDWTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureSqlDWTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v AzureSqlDWTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o AzureSqlDWTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AzureSqlDWTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o AzureSqlDWTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureSqlDWTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureSqlDWTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDWTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureSqlDWTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDWTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
func (o AzureSqlDWTableDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDWTableDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o AzureSqlDWTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDWTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'AzureSqlDWTable'.
func (o AzureSqlDWTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSqlDWTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Microsoft Azure SQL Database linked service.
type AzureSqlDatabaseLinkedService struct {
	// Sql always encrypted properties.
	AlwaysEncryptedSettings *SqlAlwaysEncryptedProperties `pulumi:"alwaysEncryptedSettings"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference `pulumi:"password"`
	// The ID of the service principal used to authenticate against Azure SQL Database. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Database.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureSqlDatabase'.
	Type string `pulumi:"type"`
}

// AzureSqlDatabaseLinkedServiceInput is an input type that accepts AzureSqlDatabaseLinkedServiceArgs and AzureSqlDatabaseLinkedServiceOutput values.
// You can construct a concrete instance of `AzureSqlDatabaseLinkedServiceInput` via:
//
//	AzureSqlDatabaseLinkedServiceArgs{...}
type AzureSqlDatabaseLinkedServiceInput interface {
	pulumi.Input

	ToAzureSqlDatabaseLinkedServiceOutput() AzureSqlDatabaseLinkedServiceOutput
	ToAzureSqlDatabaseLinkedServiceOutputWithContext(context.Context) AzureSqlDatabaseLinkedServiceOutput
}

// Microsoft Azure SQL Database linked service.
type AzureSqlDatabaseLinkedServiceArgs struct {
	// Sql always encrypted properties.
	AlwaysEncryptedSettings SqlAlwaysEncryptedPropertiesPtrInput `pulumi:"alwaysEncryptedSettings"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType pulumi.Input `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// The credential reference containing authentication information.
	Credential CredentialReferencePtrInput `pulumi:"credential"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password AzureKeyVaultSecretReferencePtrInput `pulumi:"password"`
	// The ID of the service principal used to authenticate against Azure SQL Database. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Database.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant pulumi.Input `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureSqlDatabase'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureSqlDatabaseLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlDatabaseLinkedService)(nil)).Elem()
}

func (i AzureSqlDatabaseLinkedServiceArgs) ToAzureSqlDatabaseLinkedServiceOutput() AzureSqlDatabaseLinkedServiceOutput {
	return i.ToAzureSqlDatabaseLinkedServiceOutputWithContext(context.Background())
}

func (i AzureSqlDatabaseLinkedServiceArgs) ToAzureSqlDatabaseLinkedServiceOutputWithContext(ctx context.Context) AzureSqlDatabaseLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSqlDatabaseLinkedServiceOutput)
}

// Microsoft Azure SQL Database linked service.
type AzureSqlDatabaseLinkedServiceOutput struct{ *pulumi.OutputState }

func (AzureSqlDatabaseLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlDatabaseLinkedService)(nil)).Elem()
}

func (o AzureSqlDatabaseLinkedServiceOutput) ToAzureSqlDatabaseLinkedServiceOutput() AzureSqlDatabaseLinkedServiceOutput {
	return o
}

func (o AzureSqlDatabaseLinkedServiceOutput) ToAzureSqlDatabaseLinkedServiceOutputWithContext(ctx context.Context) AzureSqlDatabaseLinkedServiceOutput {
	return o
}

// Sql always encrypted properties.
func (o AzureSqlDatabaseLinkedServiceOutput) AlwaysEncryptedSettings() SqlAlwaysEncryptedPropertiesPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedService) *SqlAlwaysEncryptedProperties { return v.AlwaysEncryptedSettings }).(SqlAlwaysEncryptedPropertiesPtrOutput)
}

// List of tags that can be used for describing the linked service.
func (o AzureSqlDatabaseLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
func (o AzureSqlDatabaseLinkedServiceOutput) AzureCloudType() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedService) interface{} { return v.AzureCloudType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureSqlDatabaseLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureSqlDatabaseLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// The credential reference containing authentication information.
func (o AzureSqlDatabaseLinkedServiceOutput) Credential() CredentialReferencePtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedService) *CredentialReference { return v.Credential }).(CredentialReferencePtrOutput)
}

// Linked service description.
func (o AzureSqlDatabaseLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AzureSqlDatabaseLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AzureSqlDatabaseLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o AzureSqlDatabaseLinkedServiceOutput) Password() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedService) *AzureKeyVaultSecretReference { return v.Password }).(AzureKeyVaultSecretReferencePtrOutput)
}

// The ID of the service principal used to authenticate against Azure SQL Database. Type: string (or Expression with resultType string).
func (o AzureSqlDatabaseLinkedServiceOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedService) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The key of the service principal used to authenticate against Azure SQL Database.
func (o AzureSqlDatabaseLinkedServiceOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedService) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureSqlDatabaseLinkedServiceOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedService) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AzureSqlDatabase'.
func (o AzureSqlDatabaseLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Microsoft Azure SQL Database linked service.
type AzureSqlDatabaseLinkedServiceResponse struct {
	// Sql always encrypted properties.
	AlwaysEncryptedSettings *SqlAlwaysEncryptedPropertiesResponse `pulumi:"alwaysEncryptedSettings"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReferenceResponse `pulumi:"password"`
	// The ID of the service principal used to authenticate against Azure SQL Database. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Database.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureSqlDatabase'.
	Type string `pulumi:"type"`
}

// Microsoft Azure SQL Database linked service.
type AzureSqlDatabaseLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureSqlDatabaseLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlDatabaseLinkedServiceResponse)(nil)).Elem()
}

func (o AzureSqlDatabaseLinkedServiceResponseOutput) ToAzureSqlDatabaseLinkedServiceResponseOutput() AzureSqlDatabaseLinkedServiceResponseOutput {
	return o
}

func (o AzureSqlDatabaseLinkedServiceResponseOutput) ToAzureSqlDatabaseLinkedServiceResponseOutputWithContext(ctx context.Context) AzureSqlDatabaseLinkedServiceResponseOutput {
	return o
}

// Sql always encrypted properties.
func (o AzureSqlDatabaseLinkedServiceResponseOutput) AlwaysEncryptedSettings() SqlAlwaysEncryptedPropertiesResponsePtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedServiceResponse) *SqlAlwaysEncryptedPropertiesResponse {
		return v.AlwaysEncryptedSettings
	}).(SqlAlwaysEncryptedPropertiesResponsePtrOutput)
}

// List of tags that can be used for describing the linked service.
func (o AzureSqlDatabaseLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
func (o AzureSqlDatabaseLinkedServiceResponseOutput) AzureCloudType() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedServiceResponse) interface{} { return v.AzureCloudType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureSqlDatabaseLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureSqlDatabaseLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// The credential reference containing authentication information.
func (o AzureSqlDatabaseLinkedServiceResponseOutput) Credential() CredentialReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedServiceResponse) *CredentialReferenceResponse { return v.Credential }).(CredentialReferenceResponsePtrOutput)
}

// Linked service description.
func (o AzureSqlDatabaseLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AzureSqlDatabaseLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AzureSqlDatabaseLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o AzureSqlDatabaseLinkedServiceResponseOutput) Password() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse { return v.Password }).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// The ID of the service principal used to authenticate against Azure SQL Database. Type: string (or Expression with resultType string).
func (o AzureSqlDatabaseLinkedServiceResponseOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedServiceResponse) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The key of the service principal used to authenticate against Azure SQL Database.
func (o AzureSqlDatabaseLinkedServiceResponseOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedServiceResponse) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureSqlDatabaseLinkedServiceResponseOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedServiceResponse) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AzureSqlDatabase'.
func (o AzureSqlDatabaseLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSqlDatabaseLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure SQL Managed Instance linked service.
type AzureSqlMILinkedService struct {
	// Sql always encrypted properties.
	AlwaysEncryptedSettings *SqlAlwaysEncryptedProperties `pulumi:"alwaysEncryptedSettings"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference `pulumi:"password"`
	// The ID of the service principal used to authenticate against Azure SQL Managed Instance. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Managed Instance.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureSqlMI'.
	Type string `pulumi:"type"`
}

// AzureSqlMILinkedServiceInput is an input type that accepts AzureSqlMILinkedServiceArgs and AzureSqlMILinkedServiceOutput values.
// You can construct a concrete instance of `AzureSqlMILinkedServiceInput` via:
//
//	AzureSqlMILinkedServiceArgs{...}
type AzureSqlMILinkedServiceInput interface {
	pulumi.Input

	ToAzureSqlMILinkedServiceOutput() AzureSqlMILinkedServiceOutput
	ToAzureSqlMILinkedServiceOutputWithContext(context.Context) AzureSqlMILinkedServiceOutput
}

// Azure SQL Managed Instance linked service.
type AzureSqlMILinkedServiceArgs struct {
	// Sql always encrypted properties.
	AlwaysEncryptedSettings SqlAlwaysEncryptedPropertiesPtrInput `pulumi:"alwaysEncryptedSettings"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType pulumi.Input `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// The credential reference containing authentication information.
	Credential CredentialReferencePtrInput `pulumi:"credential"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password AzureKeyVaultSecretReferencePtrInput `pulumi:"password"`
	// The ID of the service principal used to authenticate against Azure SQL Managed Instance. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Managed Instance.
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant pulumi.Input `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureSqlMI'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureSqlMILinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlMILinkedService)(nil)).Elem()
}

func (i AzureSqlMILinkedServiceArgs) ToAzureSqlMILinkedServiceOutput() AzureSqlMILinkedServiceOutput {
	return i.ToAzureSqlMILinkedServiceOutputWithContext(context.Background())
}

func (i AzureSqlMILinkedServiceArgs) ToAzureSqlMILinkedServiceOutputWithContext(ctx context.Context) AzureSqlMILinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSqlMILinkedServiceOutput)
}

// Azure SQL Managed Instance linked service.
type AzureSqlMILinkedServiceOutput struct{ *pulumi.OutputState }

func (AzureSqlMILinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlMILinkedService)(nil)).Elem()
}

func (o AzureSqlMILinkedServiceOutput) ToAzureSqlMILinkedServiceOutput() AzureSqlMILinkedServiceOutput {
	return o
}

func (o AzureSqlMILinkedServiceOutput) ToAzureSqlMILinkedServiceOutputWithContext(ctx context.Context) AzureSqlMILinkedServiceOutput {
	return o
}

// Sql always encrypted properties.
func (o AzureSqlMILinkedServiceOutput) AlwaysEncryptedSettings() SqlAlwaysEncryptedPropertiesPtrOutput {
	return o.ApplyT(func(v AzureSqlMILinkedService) *SqlAlwaysEncryptedProperties { return v.AlwaysEncryptedSettings }).(SqlAlwaysEncryptedPropertiesPtrOutput)
}

// List of tags that can be used for describing the linked service.
func (o AzureSqlMILinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureSqlMILinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
func (o AzureSqlMILinkedServiceOutput) AzureCloudType() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlMILinkedService) interface{} { return v.AzureCloudType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureSqlMILinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzureSqlMILinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureSqlMILinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlMILinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// The credential reference containing authentication information.
func (o AzureSqlMILinkedServiceOutput) Credential() CredentialReferencePtrOutput {
	return o.ApplyT(func(v AzureSqlMILinkedService) *CredentialReference { return v.Credential }).(CredentialReferencePtrOutput)
}

// Linked service description.
func (o AzureSqlMILinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlMILinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AzureSqlMILinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlMILinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AzureSqlMILinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureSqlMILinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o AzureSqlMILinkedServiceOutput) Password() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v AzureSqlMILinkedService) *AzureKeyVaultSecretReference { return v.Password }).(AzureKeyVaultSecretReferencePtrOutput)
}

// The ID of the service principal used to authenticate against Azure SQL Managed Instance. Type: string (or Expression with resultType string).
func (o AzureSqlMILinkedServiceOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlMILinkedService) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The key of the service principal used to authenticate against Azure SQL Managed Instance.
func (o AzureSqlMILinkedServiceOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlMILinkedService) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureSqlMILinkedServiceOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlMILinkedService) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AzureSqlMI'.
func (o AzureSqlMILinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSqlMILinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Azure SQL Managed Instance linked service.
type AzureSqlMILinkedServiceResponse struct {
	// Sql always encrypted properties.
	AlwaysEncryptedSettings *SqlAlwaysEncryptedPropertiesResponse `pulumi:"alwaysEncryptedSettings"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReferenceResponse `pulumi:"password"`
	// The ID of the service principal used to authenticate against Azure SQL Managed Instance. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The key of the service principal used to authenticate against Azure SQL Managed Instance.
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'AzureSqlMI'.
	Type string `pulumi:"type"`
}

// Azure SQL Managed Instance linked service.
type AzureSqlMILinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureSqlMILinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlMILinkedServiceResponse)(nil)).Elem()
}

func (o AzureSqlMILinkedServiceResponseOutput) ToAzureSqlMILinkedServiceResponseOutput() AzureSqlMILinkedServiceResponseOutput {
	return o
}

func (o AzureSqlMILinkedServiceResponseOutput) ToAzureSqlMILinkedServiceResponseOutputWithContext(ctx context.Context) AzureSqlMILinkedServiceResponseOutput {
	return o
}

// Sql always encrypted properties.
func (o AzureSqlMILinkedServiceResponseOutput) AlwaysEncryptedSettings() SqlAlwaysEncryptedPropertiesResponsePtrOutput {
	return o.ApplyT(func(v AzureSqlMILinkedServiceResponse) *SqlAlwaysEncryptedPropertiesResponse {
		return v.AlwaysEncryptedSettings
	}).(SqlAlwaysEncryptedPropertiesResponsePtrOutput)
}

// List of tags that can be used for describing the linked service.
func (o AzureSqlMILinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureSqlMILinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
func (o AzureSqlMILinkedServiceResponseOutput) AzureCloudType() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlMILinkedServiceResponse) interface{} { return v.AzureCloudType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureSqlMILinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureSqlMILinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureSqlMILinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlMILinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// The credential reference containing authentication information.
func (o AzureSqlMILinkedServiceResponseOutput) Credential() CredentialReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureSqlMILinkedServiceResponse) *CredentialReferenceResponse { return v.Credential }).(CredentialReferenceResponsePtrOutput)
}

// Linked service description.
func (o AzureSqlMILinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlMILinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AzureSqlMILinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlMILinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AzureSqlMILinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureSqlMILinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o AzureSqlMILinkedServiceResponseOutput) Password() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureSqlMILinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse { return v.Password }).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// The ID of the service principal used to authenticate against Azure SQL Managed Instance. Type: string (or Expression with resultType string).
func (o AzureSqlMILinkedServiceResponseOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlMILinkedServiceResponse) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The key of the service principal used to authenticate against Azure SQL Managed Instance.
func (o AzureSqlMILinkedServiceResponseOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlMILinkedServiceResponse) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o AzureSqlMILinkedServiceResponseOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlMILinkedServiceResponse) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AzureSqlMI'.
func (o AzureSqlMILinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSqlMILinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Azure SQL Managed Instance dataset.
type AzureSqlMITableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure SQL Managed Instance dataset. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzureSqlMITable'.
	Type string `pulumi:"type"`
}

// AzureSqlMITableDatasetInput is an input type that accepts AzureSqlMITableDatasetArgs and AzureSqlMITableDatasetOutput values.
// You can construct a concrete instance of `AzureSqlMITableDatasetInput` via:
//
//	AzureSqlMITableDatasetArgs{...}
type AzureSqlMITableDatasetInput interface {
	pulumi.Input

	ToAzureSqlMITableDatasetOutput() AzureSqlMITableDatasetOutput
	ToAzureSqlMITableDatasetOutputWithContext(context.Context) AzureSqlMITableDatasetOutput
}

// The Azure SQL Managed Instance dataset.
type AzureSqlMITableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Azure SQL Managed Instance dataset. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzureSqlMITable'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureSqlMITableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlMITableDataset)(nil)).Elem()
}

func (i AzureSqlMITableDatasetArgs) ToAzureSqlMITableDatasetOutput() AzureSqlMITableDatasetOutput {
	return i.ToAzureSqlMITableDatasetOutputWithContext(context.Background())
}

func (i AzureSqlMITableDatasetArgs) ToAzureSqlMITableDatasetOutputWithContext(ctx context.Context) AzureSqlMITableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSqlMITableDatasetOutput)
}

// The Azure SQL Managed Instance dataset.
type AzureSqlMITableDatasetOutput struct{ *pulumi.OutputState }

func (AzureSqlMITableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlMITableDataset)(nil)).Elem()
}

func (o AzureSqlMITableDatasetOutput) ToAzureSqlMITableDatasetOutput() AzureSqlMITableDatasetOutput {
	return o
}

func (o AzureSqlMITableDatasetOutput) ToAzureSqlMITableDatasetOutputWithContext(ctx context.Context) AzureSqlMITableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureSqlMITableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureSqlMITableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AzureSqlMITableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlMITableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureSqlMITableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v AzureSqlMITableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o AzureSqlMITableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v AzureSqlMITableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o AzureSqlMITableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureSqlMITableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureSqlMITableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlMITableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureSqlMITableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlMITableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Azure SQL Managed Instance dataset. Type: string (or Expression with resultType string).
func (o AzureSqlMITableDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlMITableDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o AzureSqlMITableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlMITableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'AzureSqlMITable'.
func (o AzureSqlMITableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSqlMITableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Azure SQL Managed Instance dataset.
type AzureSqlMITableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure SQL Managed Instance dataset. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzureSqlMITable'.
	Type string `pulumi:"type"`
}

// The Azure SQL Managed Instance dataset.
type AzureSqlMITableDatasetResponseOutput struct{ *pulumi.OutputState }

func (AzureSqlMITableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlMITableDatasetResponse)(nil)).Elem()
}

func (o AzureSqlMITableDatasetResponseOutput) ToAzureSqlMITableDatasetResponseOutput() AzureSqlMITableDatasetResponseOutput {
	return o
}

func (o AzureSqlMITableDatasetResponseOutput) ToAzureSqlMITableDatasetResponseOutputWithContext(ctx context.Context) AzureSqlMITableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureSqlMITableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureSqlMITableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AzureSqlMITableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlMITableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureSqlMITableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v AzureSqlMITableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o AzureSqlMITableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AzureSqlMITableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o AzureSqlMITableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureSqlMITableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureSqlMITableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlMITableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureSqlMITableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlMITableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Azure SQL Managed Instance dataset. Type: string (or Expression with resultType string).
func (o AzureSqlMITableDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlMITableDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o AzureSqlMITableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlMITableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'AzureSqlMITable'.
func (o AzureSqlMITableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSqlMITableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Azure SQL sink.
type AzureSqlSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// SQL writer stored procedure name. Type: string (or Expression with resultType string).
	SqlWriterStoredProcedureName interface{} `pulumi:"sqlWriterStoredProcedureName"`
	// SQL writer table type. Type: string (or Expression with resultType string).
	SqlWriterTableType interface{} `pulumi:"sqlWriterTableType"`
	// Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean).
	SqlWriterUseTableLock interface{} `pulumi:"sqlWriterUseTableLock"`
	// SQL stored procedure parameters.
	StoredProcedureParameters interface{} `pulumi:"storedProcedureParameters"`
	// The stored procedure parameter name of the table type. Type: string (or Expression with resultType string).
	StoredProcedureTableTypeParameterName interface{} `pulumi:"storedProcedureTableTypeParameterName"`
	// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
	TableOption interface{} `pulumi:"tableOption"`
	// Copy sink type.
	// Expected value is 'AzureSqlSink'.
	Type string `pulumi:"type"`
	// SQL upsert settings.
	UpsertSettings *SqlUpsertSettings `pulumi:"upsertSettings"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Write behavior when copying data into Azure SQL. Type: SqlWriteBehaviorEnum (or Expression with resultType SqlWriteBehaviorEnum)
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// AzureSqlSinkInput is an input type that accepts AzureSqlSinkArgs and AzureSqlSinkOutput values.
// You can construct a concrete instance of `AzureSqlSinkInput` via:
//
//	AzureSqlSinkArgs{...}
type AzureSqlSinkInput interface {
	pulumi.Input

	ToAzureSqlSinkOutput() AzureSqlSinkOutput
	ToAzureSqlSinkOutputWithContext(context.Context) AzureSqlSinkOutput
}

// A copy activity Azure SQL sink.
type AzureSqlSinkArgs struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript pulumi.Input `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount pulumi.Input `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait pulumi.Input `pulumi:"sinkRetryWait"`
	// SQL writer stored procedure name. Type: string (or Expression with resultType string).
	SqlWriterStoredProcedureName pulumi.Input `pulumi:"sqlWriterStoredProcedureName"`
	// SQL writer table type. Type: string (or Expression with resultType string).
	SqlWriterTableType pulumi.Input `pulumi:"sqlWriterTableType"`
	// Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean).
	SqlWriterUseTableLock pulumi.Input `pulumi:"sqlWriterUseTableLock"`
	// SQL stored procedure parameters.
	StoredProcedureParameters pulumi.Input `pulumi:"storedProcedureParameters"`
	// The stored procedure parameter name of the table type. Type: string (or Expression with resultType string).
	StoredProcedureTableTypeParameterName pulumi.Input `pulumi:"storedProcedureTableTypeParameterName"`
	// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
	TableOption pulumi.Input `pulumi:"tableOption"`
	// Copy sink type.
	// Expected value is 'AzureSqlSink'.
	Type pulumi.StringInput `pulumi:"type"`
	// SQL upsert settings.
	UpsertSettings SqlUpsertSettingsPtrInput `pulumi:"upsertSettings"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize pulumi.Input `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout pulumi.Input `pulumi:"writeBatchTimeout"`
	// Write behavior when copying data into Azure SQL. Type: SqlWriteBehaviorEnum (or Expression with resultType SqlWriteBehaviorEnum)
	WriteBehavior pulumi.Input `pulumi:"writeBehavior"`
}

func (AzureSqlSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlSink)(nil)).Elem()
}

func (i AzureSqlSinkArgs) ToAzureSqlSinkOutput() AzureSqlSinkOutput {
	return i.ToAzureSqlSinkOutputWithContext(context.Background())
}

func (i AzureSqlSinkArgs) ToAzureSqlSinkOutputWithContext(ctx context.Context) AzureSqlSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSqlSinkOutput)
}

// A copy activity Azure SQL sink.
type AzureSqlSinkOutput struct{ *pulumi.OutputState }

func (AzureSqlSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlSink)(nil)).Elem()
}

func (o AzureSqlSinkOutput) ToAzureSqlSinkOutput() AzureSqlSinkOutput {
	return o
}

func (o AzureSqlSinkOutput) ToAzureSqlSinkOutputWithContext(ctx context.Context) AzureSqlSinkOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureSqlSinkOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSink) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o AzureSqlSinkOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSink) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// SQL pre-copy script. Type: string (or Expression with resultType string).
func (o AzureSqlSinkOutput) PreCopyScript() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSink) interface{} { return v.PreCopyScript }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o AzureSqlSinkOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSink) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureSqlSinkOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSink) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// SQL writer stored procedure name. Type: string (or Expression with resultType string).
func (o AzureSqlSinkOutput) SqlWriterStoredProcedureName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSink) interface{} { return v.SqlWriterStoredProcedureName }).(pulumi.AnyOutput)
}

// SQL writer table type. Type: string (or Expression with resultType string).
func (o AzureSqlSinkOutput) SqlWriterTableType() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSink) interface{} { return v.SqlWriterTableType }).(pulumi.AnyOutput)
}

// Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean).
func (o AzureSqlSinkOutput) SqlWriterUseTableLock() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSink) interface{} { return v.SqlWriterUseTableLock }).(pulumi.AnyOutput)
}

// SQL stored procedure parameters.
func (o AzureSqlSinkOutput) StoredProcedureParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSink) interface{} { return v.StoredProcedureParameters }).(pulumi.AnyOutput)
}

// The stored procedure parameter name of the table type. Type: string (or Expression with resultType string).
func (o AzureSqlSinkOutput) StoredProcedureTableTypeParameterName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSink) interface{} { return v.StoredProcedureTableTypeParameterName }).(pulumi.AnyOutput)
}

// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
func (o AzureSqlSinkOutput) TableOption() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSink) interface{} { return v.TableOption }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'AzureSqlSink'.
func (o AzureSqlSinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSqlSink) string { return v.Type }).(pulumi.StringOutput)
}

// SQL upsert settings.
func (o AzureSqlSinkOutput) UpsertSettings() SqlUpsertSettingsPtrOutput {
	return o.ApplyT(func(v AzureSqlSink) *SqlUpsertSettings { return v.UpsertSettings }).(SqlUpsertSettingsPtrOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o AzureSqlSinkOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSink) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureSqlSinkOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSink) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// Write behavior when copying data into Azure SQL. Type: SqlWriteBehaviorEnum (or Expression with resultType SqlWriteBehaviorEnum)
func (o AzureSqlSinkOutput) WriteBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSink) interface{} { return v.WriteBehavior }).(pulumi.AnyOutput)
}

// A copy activity Azure SQL sink.
type AzureSqlSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript interface{} `pulumi:"preCopyScript"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// SQL writer stored procedure name. Type: string (or Expression with resultType string).
	SqlWriterStoredProcedureName interface{} `pulumi:"sqlWriterStoredProcedureName"`
	// SQL writer table type. Type: string (or Expression with resultType string).
	SqlWriterTableType interface{} `pulumi:"sqlWriterTableType"`
	// Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean).
	SqlWriterUseTableLock interface{} `pulumi:"sqlWriterUseTableLock"`
	// SQL stored procedure parameters.
	StoredProcedureParameters interface{} `pulumi:"storedProcedureParameters"`
	// The stored procedure parameter name of the table type. Type: string (or Expression with resultType string).
	StoredProcedureTableTypeParameterName interface{} `pulumi:"storedProcedureTableTypeParameterName"`
	// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
	TableOption interface{} `pulumi:"tableOption"`
	// Copy sink type.
	// Expected value is 'AzureSqlSink'.
	Type string `pulumi:"type"`
	// SQL upsert settings.
	UpsertSettings *SqlUpsertSettingsResponse `pulumi:"upsertSettings"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Write behavior when copying data into Azure SQL. Type: SqlWriteBehaviorEnum (or Expression with resultType SqlWriteBehaviorEnum)
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// A copy activity Azure SQL sink.
type AzureSqlSinkResponseOutput struct{ *pulumi.OutputState }

func (AzureSqlSinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlSinkResponse)(nil)).Elem()
}

func (o AzureSqlSinkResponseOutput) ToAzureSqlSinkResponseOutput() AzureSqlSinkResponseOutput {
	return o
}

func (o AzureSqlSinkResponseOutput) ToAzureSqlSinkResponseOutputWithContext(ctx context.Context) AzureSqlSinkResponseOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureSqlSinkResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSinkResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o AzureSqlSinkResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSinkResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// SQL pre-copy script. Type: string (or Expression with resultType string).
func (o AzureSqlSinkResponseOutput) PreCopyScript() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSinkResponse) interface{} { return v.PreCopyScript }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o AzureSqlSinkResponseOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSinkResponse) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureSqlSinkResponseOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSinkResponse) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// SQL writer stored procedure name. Type: string (or Expression with resultType string).
func (o AzureSqlSinkResponseOutput) SqlWriterStoredProcedureName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSinkResponse) interface{} { return v.SqlWriterStoredProcedureName }).(pulumi.AnyOutput)
}

// SQL writer table type. Type: string (or Expression with resultType string).
func (o AzureSqlSinkResponseOutput) SqlWriterTableType() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSinkResponse) interface{} { return v.SqlWriterTableType }).(pulumi.AnyOutput)
}

// Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean).
func (o AzureSqlSinkResponseOutput) SqlWriterUseTableLock() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSinkResponse) interface{} { return v.SqlWriterUseTableLock }).(pulumi.AnyOutput)
}

// SQL stored procedure parameters.
func (o AzureSqlSinkResponseOutput) StoredProcedureParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSinkResponse) interface{} { return v.StoredProcedureParameters }).(pulumi.AnyOutput)
}

// The stored procedure parameter name of the table type. Type: string (or Expression with resultType string).
func (o AzureSqlSinkResponseOutput) StoredProcedureTableTypeParameterName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSinkResponse) interface{} { return v.StoredProcedureTableTypeParameterName }).(pulumi.AnyOutput)
}

// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression with resultType string).
func (o AzureSqlSinkResponseOutput) TableOption() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSinkResponse) interface{} { return v.TableOption }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'AzureSqlSink'.
func (o AzureSqlSinkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSqlSinkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// SQL upsert settings.
func (o AzureSqlSinkResponseOutput) UpsertSettings() SqlUpsertSettingsResponsePtrOutput {
	return o.ApplyT(func(v AzureSqlSinkResponse) *SqlUpsertSettingsResponse { return v.UpsertSettings }).(SqlUpsertSettingsResponsePtrOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o AzureSqlSinkResponseOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSinkResponse) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureSqlSinkResponseOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSinkResponse) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// Write behavior when copying data into Azure SQL. Type: SqlWriteBehaviorEnum (or Expression with resultType SqlWriteBehaviorEnum)
func (o AzureSqlSinkResponseOutput) WriteBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSinkResponse) interface{} { return v.WriteBehavior }).(pulumi.AnyOutput)
}

// A copy activity Azure SQL source.
type AzureSqlSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string).
	IsolationLevel interface{} `pulumi:"isolationLevel"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange". Type: string (or Expression with resultType string).
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for Sql source partitioning.
	PartitionSettings *SqlPartitionSettings `pulumi:"partitionSettings"`
	// Which additional types to produce.
	ProduceAdditionalTypes interface{} `pulumi:"produceAdditionalTypes"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// SQL reader query. Type: string (or Expression with resultType string).
	SqlReaderQuery interface{} `pulumi:"sqlReaderQuery"`
	// Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
	SqlReaderStoredProcedureName interface{} `pulumi:"sqlReaderStoredProcedureName"`
	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
	StoredProcedureParameters interface{} `pulumi:"storedProcedureParameters"`
	// Copy source type.
	// Expected value is 'AzureSqlSource'.
	Type string `pulumi:"type"`
}

// AzureSqlSourceInput is an input type that accepts AzureSqlSourceArgs and AzureSqlSourceOutput values.
// You can construct a concrete instance of `AzureSqlSourceInput` via:
//
//	AzureSqlSourceArgs{...}
type AzureSqlSourceInput interface {
	pulumi.Input

	ToAzureSqlSourceOutput() AzureSqlSourceOutput
	ToAzureSqlSourceOutputWithContext(context.Context) AzureSqlSourceOutput
}

// A copy activity Azure SQL source.
type AzureSqlSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string).
	IsolationLevel pulumi.Input `pulumi:"isolationLevel"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange". Type: string (or Expression with resultType string).
	PartitionOption pulumi.Input `pulumi:"partitionOption"`
	// The settings that will be leveraged for Sql source partitioning.
	PartitionSettings SqlPartitionSettingsPtrInput `pulumi:"partitionSettings"`
	// Which additional types to produce.
	ProduceAdditionalTypes pulumi.Input `pulumi:"produceAdditionalTypes"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// SQL reader query. Type: string (or Expression with resultType string).
	SqlReaderQuery pulumi.Input `pulumi:"sqlReaderQuery"`
	// Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
	SqlReaderStoredProcedureName pulumi.Input `pulumi:"sqlReaderStoredProcedureName"`
	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
	StoredProcedureParameters pulumi.Input `pulumi:"storedProcedureParameters"`
	// Copy source type.
	// Expected value is 'AzureSqlSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureSqlSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlSource)(nil)).Elem()
}

func (i AzureSqlSourceArgs) ToAzureSqlSourceOutput() AzureSqlSourceOutput {
	return i.ToAzureSqlSourceOutputWithContext(context.Background())
}

func (i AzureSqlSourceArgs) ToAzureSqlSourceOutputWithContext(ctx context.Context) AzureSqlSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSqlSourceOutput)
}

// A copy activity Azure SQL source.
type AzureSqlSourceOutput struct{ *pulumi.OutputState }

func (AzureSqlSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlSource)(nil)).Elem()
}

func (o AzureSqlSourceOutput) ToAzureSqlSourceOutput() AzureSqlSourceOutput {
	return o
}

func (o AzureSqlSourceOutput) ToAzureSqlSourceOutputWithContext(ctx context.Context) AzureSqlSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o AzureSqlSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureSqlSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string).
func (o AzureSqlSourceOutput) IsolationLevel() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSource) interface{} { return v.IsolationLevel }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureSqlSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange". Type: string (or Expression with resultType string).
func (o AzureSqlSourceOutput) PartitionOption() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSource) interface{} { return v.PartitionOption }).(pulumi.AnyOutput)
}

// The settings that will be leveraged for Sql source partitioning.
func (o AzureSqlSourceOutput) PartitionSettings() SqlPartitionSettingsPtrOutput {
	return o.ApplyT(func(v AzureSqlSource) *SqlPartitionSettings { return v.PartitionSettings }).(SqlPartitionSettingsPtrOutput)
}

// Which additional types to produce.
func (o AzureSqlSourceOutput) ProduceAdditionalTypes() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSource) interface{} { return v.ProduceAdditionalTypes }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureSqlSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o AzureSqlSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureSqlSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// SQL reader query. Type: string (or Expression with resultType string).
func (o AzureSqlSourceOutput) SqlReaderQuery() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSource) interface{} { return v.SqlReaderQuery }).(pulumi.AnyOutput)
}

// Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
func (o AzureSqlSourceOutput) SqlReaderStoredProcedureName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSource) interface{} { return v.SqlReaderStoredProcedureName }).(pulumi.AnyOutput)
}

// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
func (o AzureSqlSourceOutput) StoredProcedureParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSource) interface{} { return v.StoredProcedureParameters }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'AzureSqlSource'.
func (o AzureSqlSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSqlSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Azure SQL source.
type AzureSqlSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string).
	IsolationLevel interface{} `pulumi:"isolationLevel"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange". Type: string (or Expression with resultType string).
	PartitionOption interface{} `pulumi:"partitionOption"`
	// The settings that will be leveraged for Sql source partitioning.
	PartitionSettings *SqlPartitionSettingsResponse `pulumi:"partitionSettings"`
	// Which additional types to produce.
	ProduceAdditionalTypes interface{} `pulumi:"produceAdditionalTypes"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// SQL reader query. Type: string (or Expression with resultType string).
	SqlReaderQuery interface{} `pulumi:"sqlReaderQuery"`
	// Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
	SqlReaderStoredProcedureName interface{} `pulumi:"sqlReaderStoredProcedureName"`
	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
	StoredProcedureParameters interface{} `pulumi:"storedProcedureParameters"`
	// Copy source type.
	// Expected value is 'AzureSqlSource'.
	Type string `pulumi:"type"`
}

// A copy activity Azure SQL source.
type AzureSqlSourceResponseOutput struct{ *pulumi.OutputState }

func (AzureSqlSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlSourceResponse)(nil)).Elem()
}

func (o AzureSqlSourceResponseOutput) ToAzureSqlSourceResponseOutput() AzureSqlSourceResponseOutput {
	return o
}

func (o AzureSqlSourceResponseOutput) ToAzureSqlSourceResponseOutputWithContext(ctx context.Context) AzureSqlSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o AzureSqlSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureSqlSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string).
func (o AzureSqlSourceResponseOutput) IsolationLevel() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSourceResponse) interface{} { return v.IsolationLevel }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureSqlSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable", "DynamicRange". Type: string (or Expression with resultType string).
func (o AzureSqlSourceResponseOutput) PartitionOption() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSourceResponse) interface{} { return v.PartitionOption }).(pulumi.AnyOutput)
}

// The settings that will be leveraged for Sql source partitioning.
func (o AzureSqlSourceResponseOutput) PartitionSettings() SqlPartitionSettingsResponsePtrOutput {
	return o.ApplyT(func(v AzureSqlSourceResponse) *SqlPartitionSettingsResponse { return v.PartitionSettings }).(SqlPartitionSettingsResponsePtrOutput)
}

// Which additional types to produce.
func (o AzureSqlSourceResponseOutput) ProduceAdditionalTypes() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSourceResponse) interface{} { return v.ProduceAdditionalTypes }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureSqlSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o AzureSqlSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureSqlSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// SQL reader query. Type: string (or Expression with resultType string).
func (o AzureSqlSourceResponseOutput) SqlReaderQuery() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSourceResponse) interface{} { return v.SqlReaderQuery }).(pulumi.AnyOutput)
}

// Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string).
func (o AzureSqlSourceResponseOutput) SqlReaderStoredProcedureName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSourceResponse) interface{} { return v.SqlReaderStoredProcedureName }).(pulumi.AnyOutput)
}

// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
func (o AzureSqlSourceResponseOutput) StoredProcedureParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlSourceResponse) interface{} { return v.StoredProcedureParameters }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'AzureSqlSource'.
func (o AzureSqlSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSqlSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Azure SQL Server database dataset.
type AzureSqlTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure SQL database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzureSqlTable'.
	Type string `pulumi:"type"`
}

// AzureSqlTableDatasetInput is an input type that accepts AzureSqlTableDatasetArgs and AzureSqlTableDatasetOutput values.
// You can construct a concrete instance of `AzureSqlTableDatasetInput` via:
//
//	AzureSqlTableDatasetArgs{...}
type AzureSqlTableDatasetInput interface {
	pulumi.Input

	ToAzureSqlTableDatasetOutput() AzureSqlTableDatasetOutput
	ToAzureSqlTableDatasetOutputWithContext(context.Context) AzureSqlTableDatasetOutput
}

// The Azure SQL Server database dataset.
type AzureSqlTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Azure SQL database. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzureSqlTable'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureSqlTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlTableDataset)(nil)).Elem()
}

func (i AzureSqlTableDatasetArgs) ToAzureSqlTableDatasetOutput() AzureSqlTableDatasetOutput {
	return i.ToAzureSqlTableDatasetOutputWithContext(context.Background())
}

func (i AzureSqlTableDatasetArgs) ToAzureSqlTableDatasetOutputWithContext(ctx context.Context) AzureSqlTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSqlTableDatasetOutput)
}

// The Azure SQL Server database dataset.
type AzureSqlTableDatasetOutput struct{ *pulumi.OutputState }

func (AzureSqlTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlTableDataset)(nil)).Elem()
}

func (o AzureSqlTableDatasetOutput) ToAzureSqlTableDatasetOutput() AzureSqlTableDatasetOutput {
	return o
}

func (o AzureSqlTableDatasetOutput) ToAzureSqlTableDatasetOutputWithContext(ctx context.Context) AzureSqlTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureSqlTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureSqlTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AzureSqlTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureSqlTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v AzureSqlTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o AzureSqlTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v AzureSqlTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o AzureSqlTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureSqlTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureSqlTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureSqlTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Azure SQL database. Type: string (or Expression with resultType string).
func (o AzureSqlTableDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlTableDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o AzureSqlTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'AzureSqlTable'.
func (o AzureSqlTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSqlTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Azure SQL Server database dataset.
type AzureSqlTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure SQL database. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzureSqlTable'.
	Type string `pulumi:"type"`
}

// The Azure SQL Server database dataset.
type AzureSqlTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (AzureSqlTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlTableDatasetResponse)(nil)).Elem()
}

func (o AzureSqlTableDatasetResponseOutput) ToAzureSqlTableDatasetResponseOutput() AzureSqlTableDatasetResponseOutput {
	return o
}

func (o AzureSqlTableDatasetResponseOutput) ToAzureSqlTableDatasetResponseOutputWithContext(ctx context.Context) AzureSqlTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureSqlTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureSqlTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AzureSqlTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureSqlTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v AzureSqlTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o AzureSqlTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AzureSqlTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o AzureSqlTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureSqlTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureSqlTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureSqlTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Azure SQL database. Type: string (or Expression with resultType string).
func (o AzureSqlTableDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlTableDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o AzureSqlTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSqlTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'AzureSqlTable'.
func (o AzureSqlTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSqlTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The storage account linked service.
type AzureStorageLinkedService struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey *AzureKeyVaultSecretReference `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken *AzureKeyVaultSecretReference `pulumi:"sasToken"`
	// SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri interface{} `pulumi:"sasUri"`
	// Type of linked service.
	// Expected value is 'AzureStorage'.
	Type string `pulumi:"type"`
}

// AzureStorageLinkedServiceInput is an input type that accepts AzureStorageLinkedServiceArgs and AzureStorageLinkedServiceOutput values.
// You can construct a concrete instance of `AzureStorageLinkedServiceInput` via:
//
//	AzureStorageLinkedServiceArgs{...}
type AzureStorageLinkedServiceInput interface {
	pulumi.Input

	ToAzureStorageLinkedServiceOutput() AzureStorageLinkedServiceOutput
	ToAzureStorageLinkedServiceOutputWithContext(context.Context) AzureStorageLinkedServiceOutput
}

// The storage account linked service.
type AzureStorageLinkedServiceArgs struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey AzureKeyVaultSecretReferencePtrInput `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken AzureKeyVaultSecretReferencePtrInput `pulumi:"sasToken"`
	// SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri pulumi.Input `pulumi:"sasUri"`
	// Type of linked service.
	// Expected value is 'AzureStorage'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureStorageLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureStorageLinkedService)(nil)).Elem()
}

func (i AzureStorageLinkedServiceArgs) ToAzureStorageLinkedServiceOutput() AzureStorageLinkedServiceOutput {
	return i.ToAzureStorageLinkedServiceOutputWithContext(context.Background())
}

func (i AzureStorageLinkedServiceArgs) ToAzureStorageLinkedServiceOutputWithContext(ctx context.Context) AzureStorageLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureStorageLinkedServiceOutput)
}

// The storage account linked service.
type AzureStorageLinkedServiceOutput struct{ *pulumi.OutputState }

func (AzureStorageLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureStorageLinkedService)(nil)).Elem()
}

func (o AzureStorageLinkedServiceOutput) ToAzureStorageLinkedServiceOutput() AzureStorageLinkedServiceOutput {
	return o
}

func (o AzureStorageLinkedServiceOutput) ToAzureStorageLinkedServiceOutputWithContext(ctx context.Context) AzureStorageLinkedServiceOutput {
	return o
}

// The Azure key vault secret reference of accountKey in connection string.
func (o AzureStorageLinkedServiceOutput) AccountKey() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v AzureStorageLinkedService) *AzureKeyVaultSecretReference { return v.AccountKey }).(AzureKeyVaultSecretReferencePtrOutput)
}

// List of tags that can be used for describing the linked service.
func (o AzureStorageLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureStorageLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AzureStorageLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzureStorageLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureStorageLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureStorageLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AzureStorageLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureStorageLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AzureStorageLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureStorageLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AzureStorageLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureStorageLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The Azure key vault secret reference of sasToken in sas uri.
func (o AzureStorageLinkedServiceOutput) SasToken() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v AzureStorageLinkedService) *AzureKeyVaultSecretReference { return v.SasToken }).(AzureKeyVaultSecretReferencePtrOutput)
}

// SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureStorageLinkedServiceOutput) SasUri() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureStorageLinkedService) interface{} { return v.SasUri }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AzureStorage'.
func (o AzureStorageLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureStorageLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The storage account linked service.
type AzureStorageLinkedServiceResponse struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey *AzureKeyVaultSecretReferenceResponse `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken *AzureKeyVaultSecretReferenceResponse `pulumi:"sasToken"`
	// SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri interface{} `pulumi:"sasUri"`
	// Type of linked service.
	// Expected value is 'AzureStorage'.
	Type string `pulumi:"type"`
}

// The storage account linked service.
type AzureStorageLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureStorageLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureStorageLinkedServiceResponse)(nil)).Elem()
}

func (o AzureStorageLinkedServiceResponseOutput) ToAzureStorageLinkedServiceResponseOutput() AzureStorageLinkedServiceResponseOutput {
	return o
}

func (o AzureStorageLinkedServiceResponseOutput) ToAzureStorageLinkedServiceResponseOutputWithContext(ctx context.Context) AzureStorageLinkedServiceResponseOutput {
	return o
}

// The Azure key vault secret reference of accountKey in connection string.
func (o AzureStorageLinkedServiceResponseOutput) AccountKey() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureStorageLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse { return v.AccountKey }).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// List of tags that can be used for describing the linked service.
func (o AzureStorageLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureStorageLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AzureStorageLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureStorageLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureStorageLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureStorageLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AzureStorageLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureStorageLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AzureStorageLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureStorageLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AzureStorageLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureStorageLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The Azure key vault secret reference of sasToken in sas uri.
func (o AzureStorageLinkedServiceResponseOutput) SasToken() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureStorageLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse { return v.SasToken }).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureStorageLinkedServiceResponseOutput) SasUri() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureStorageLinkedServiceResponse) interface{} { return v.SasUri }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AzureStorage'.
func (o AzureStorageLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureStorageLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Azure Synapse Analytics (Artifacts) linked service.
type AzureSynapseArtifactsLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Required to specify MSI, if using system assigned managed identity as authentication method. Type: string (or Expression with resultType string).
	Authentication interface{} `pulumi:"authentication"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// https://<workspacename>.dev.azuresynapse.net, Azure Synapse Analytics workspace URL. Type: string (or Expression with resultType string).
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'AzureSynapseArtifacts'.
	Type string `pulumi:"type"`
	// The resource ID of the Synapse workspace. The format should be: /subscriptions/{subscriptionID}/resourceGroups/{resourceGroup}/providers/Microsoft.Synapse/workspaces/{workspaceName}. Type: string (or Expression with resultType string).
	WorkspaceResourceId interface{} `pulumi:"workspaceResourceId"`
}

// AzureSynapseArtifactsLinkedServiceInput is an input type that accepts AzureSynapseArtifactsLinkedServiceArgs and AzureSynapseArtifactsLinkedServiceOutput values.
// You can construct a concrete instance of `AzureSynapseArtifactsLinkedServiceInput` via:
//
//	AzureSynapseArtifactsLinkedServiceArgs{...}
type AzureSynapseArtifactsLinkedServiceInput interface {
	pulumi.Input

	ToAzureSynapseArtifactsLinkedServiceOutput() AzureSynapseArtifactsLinkedServiceOutput
	ToAzureSynapseArtifactsLinkedServiceOutputWithContext(context.Context) AzureSynapseArtifactsLinkedServiceOutput
}

// Azure Synapse Analytics (Artifacts) linked service.
type AzureSynapseArtifactsLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Required to specify MSI, if using system assigned managed identity as authentication method. Type: string (or Expression with resultType string).
	Authentication pulumi.Input `pulumi:"authentication"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// https://<workspacename>.dev.azuresynapse.net, Azure Synapse Analytics workspace URL. Type: string (or Expression with resultType string).
	Endpoint pulumi.Input `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'AzureSynapseArtifacts'.
	Type pulumi.StringInput `pulumi:"type"`
	// The resource ID of the Synapse workspace. The format should be: /subscriptions/{subscriptionID}/resourceGroups/{resourceGroup}/providers/Microsoft.Synapse/workspaces/{workspaceName}. Type: string (or Expression with resultType string).
	WorkspaceResourceId pulumi.Input `pulumi:"workspaceResourceId"`
}

func (AzureSynapseArtifactsLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSynapseArtifactsLinkedService)(nil)).Elem()
}

func (i AzureSynapseArtifactsLinkedServiceArgs) ToAzureSynapseArtifactsLinkedServiceOutput() AzureSynapseArtifactsLinkedServiceOutput {
	return i.ToAzureSynapseArtifactsLinkedServiceOutputWithContext(context.Background())
}

func (i AzureSynapseArtifactsLinkedServiceArgs) ToAzureSynapseArtifactsLinkedServiceOutputWithContext(ctx context.Context) AzureSynapseArtifactsLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSynapseArtifactsLinkedServiceOutput)
}

// Azure Synapse Analytics (Artifacts) linked service.
type AzureSynapseArtifactsLinkedServiceOutput struct{ *pulumi.OutputState }

func (AzureSynapseArtifactsLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSynapseArtifactsLinkedService)(nil)).Elem()
}

func (o AzureSynapseArtifactsLinkedServiceOutput) ToAzureSynapseArtifactsLinkedServiceOutput() AzureSynapseArtifactsLinkedServiceOutput {
	return o
}

func (o AzureSynapseArtifactsLinkedServiceOutput) ToAzureSynapseArtifactsLinkedServiceOutputWithContext(ctx context.Context) AzureSynapseArtifactsLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzureSynapseArtifactsLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureSynapseArtifactsLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Required to specify MSI, if using system assigned managed identity as authentication method. Type: string (or Expression with resultType string).
func (o AzureSynapseArtifactsLinkedServiceOutput) Authentication() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSynapseArtifactsLinkedService) interface{} { return v.Authentication }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureSynapseArtifactsLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzureSynapseArtifactsLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o AzureSynapseArtifactsLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSynapseArtifactsLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// https://<workspacename>.dev.azuresynapse.net, Azure Synapse Analytics workspace URL. Type: string (or Expression with resultType string).
func (o AzureSynapseArtifactsLinkedServiceOutput) Endpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSynapseArtifactsLinkedService) interface{} { return v.Endpoint }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureSynapseArtifactsLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureSynapseArtifactsLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
// Expected value is 'AzureSynapseArtifacts'.
func (o AzureSynapseArtifactsLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSynapseArtifactsLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The resource ID of the Synapse workspace. The format should be: /subscriptions/{subscriptionID}/resourceGroups/{resourceGroup}/providers/Microsoft.Synapse/workspaces/{workspaceName}. Type: string (or Expression with resultType string).
func (o AzureSynapseArtifactsLinkedServiceOutput) WorkspaceResourceId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSynapseArtifactsLinkedService) interface{} { return v.WorkspaceResourceId }).(pulumi.AnyOutput)
}

// Azure Synapse Analytics (Artifacts) linked service.
type AzureSynapseArtifactsLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Required to specify MSI, if using system assigned managed identity as authentication method. Type: string (or Expression with resultType string).
	Authentication interface{} `pulumi:"authentication"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// https://<workspacename>.dev.azuresynapse.net, Azure Synapse Analytics workspace URL. Type: string (or Expression with resultType string).
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'AzureSynapseArtifacts'.
	Type string `pulumi:"type"`
	// The resource ID of the Synapse workspace. The format should be: /subscriptions/{subscriptionID}/resourceGroups/{resourceGroup}/providers/Microsoft.Synapse/workspaces/{workspaceName}. Type: string (or Expression with resultType string).
	WorkspaceResourceId interface{} `pulumi:"workspaceResourceId"`
}

// Azure Synapse Analytics (Artifacts) linked service.
type AzureSynapseArtifactsLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureSynapseArtifactsLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSynapseArtifactsLinkedServiceResponse)(nil)).Elem()
}

func (o AzureSynapseArtifactsLinkedServiceResponseOutput) ToAzureSynapseArtifactsLinkedServiceResponseOutput() AzureSynapseArtifactsLinkedServiceResponseOutput {
	return o
}

func (o AzureSynapseArtifactsLinkedServiceResponseOutput) ToAzureSynapseArtifactsLinkedServiceResponseOutputWithContext(ctx context.Context) AzureSynapseArtifactsLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o AzureSynapseArtifactsLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureSynapseArtifactsLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Required to specify MSI, if using system assigned managed identity as authentication method. Type: string (or Expression with resultType string).
func (o AzureSynapseArtifactsLinkedServiceResponseOutput) Authentication() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSynapseArtifactsLinkedServiceResponse) interface{} { return v.Authentication }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o AzureSynapseArtifactsLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureSynapseArtifactsLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o AzureSynapseArtifactsLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSynapseArtifactsLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// https://<workspacename>.dev.azuresynapse.net, Azure Synapse Analytics workspace URL. Type: string (or Expression with resultType string).
func (o AzureSynapseArtifactsLinkedServiceResponseOutput) Endpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSynapseArtifactsLinkedServiceResponse) interface{} { return v.Endpoint }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o AzureSynapseArtifactsLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureSynapseArtifactsLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
// Expected value is 'AzureSynapseArtifacts'.
func (o AzureSynapseArtifactsLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSynapseArtifactsLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The resource ID of the Synapse workspace. The format should be: /subscriptions/{subscriptionID}/resourceGroups/{resourceGroup}/providers/Microsoft.Synapse/workspaces/{workspaceName}. Type: string (or Expression with resultType string).
func (o AzureSynapseArtifactsLinkedServiceResponseOutput) WorkspaceResourceId() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureSynapseArtifactsLinkedServiceResponse) interface{} { return v.WorkspaceResourceId }).(pulumi.AnyOutput)
}

// The Azure Table storage dataset.
type AzureTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure Table storage. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzureTable'.
	Type string `pulumi:"type"`
}

// AzureTableDatasetInput is an input type that accepts AzureTableDatasetArgs and AzureTableDatasetOutput values.
// You can construct a concrete instance of `AzureTableDatasetInput` via:
//
//	AzureTableDatasetArgs{...}
type AzureTableDatasetInput interface {
	pulumi.Input

	ToAzureTableDatasetOutput() AzureTableDatasetOutput
	ToAzureTableDatasetOutputWithContext(context.Context) AzureTableDatasetOutput
}

// The Azure Table storage dataset.
type AzureTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Azure Table storage. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzureTable'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureTableDataset)(nil)).Elem()
}

func (i AzureTableDatasetArgs) ToAzureTableDatasetOutput() AzureTableDatasetOutput {
	return i.ToAzureTableDatasetOutputWithContext(context.Background())
}

func (i AzureTableDatasetArgs) ToAzureTableDatasetOutputWithContext(ctx context.Context) AzureTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureTableDatasetOutput)
}

// The Azure Table storage dataset.
type AzureTableDatasetOutput struct{ *pulumi.OutputState }

func (AzureTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureTableDataset)(nil)).Elem()
}

func (o AzureTableDatasetOutput) ToAzureTableDatasetOutput() AzureTableDatasetOutput {
	return o
}

func (o AzureTableDatasetOutput) ToAzureTableDatasetOutputWithContext(ctx context.Context) AzureTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AzureTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v AzureTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o AzureTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v AzureTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o AzureTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Azure Table storage. Type: string (or Expression with resultType string).
func (o AzureTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'AzureTable'.
func (o AzureTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Azure Table storage dataset.
type AzureTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Azure Table storage. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'AzureTable'.
	Type string `pulumi:"type"`
}

// The Azure Table storage dataset.
type AzureTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (AzureTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureTableDatasetResponse)(nil)).Elem()
}

func (o AzureTableDatasetResponseOutput) ToAzureTableDatasetResponseOutput() AzureTableDatasetResponseOutput {
	return o
}

func (o AzureTableDatasetResponseOutput) ToAzureTableDatasetResponseOutputWithContext(ctx context.Context) AzureTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o AzureTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o AzureTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o AzureTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v AzureTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o AzureTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v AzureTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o AzureTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o AzureTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o AzureTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Azure Table storage. Type: string (or Expression with resultType string).
func (o AzureTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'AzureTable'.
func (o AzureTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Azure Table sink.
type AzureTableSink struct {
	// Azure Table default partition key value. Type: string (or Expression with resultType string).
	AzureTableDefaultPartitionKeyValue interface{} `pulumi:"azureTableDefaultPartitionKeyValue"`
	// Azure Table insert type. Type: string (or Expression with resultType string).
	AzureTableInsertType interface{} `pulumi:"azureTableInsertType"`
	// Azure Table partition key name. Type: string (or Expression with resultType string).
	AzureTablePartitionKeyName interface{} `pulumi:"azureTablePartitionKeyName"`
	// Azure Table row key name. Type: string (or Expression with resultType string).
	AzureTableRowKeyName interface{} `pulumi:"azureTableRowKeyName"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureTableSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// AzureTableSinkInput is an input type that accepts AzureTableSinkArgs and AzureTableSinkOutput values.
// You can construct a concrete instance of `AzureTableSinkInput` via:
//
//	AzureTableSinkArgs{...}
type AzureTableSinkInput interface {
	pulumi.Input

	ToAzureTableSinkOutput() AzureTableSinkOutput
	ToAzureTableSinkOutputWithContext(context.Context) AzureTableSinkOutput
}

// A copy activity Azure Table sink.
type AzureTableSinkArgs struct {
	// Azure Table default partition key value. Type: string (or Expression with resultType string).
	AzureTableDefaultPartitionKeyValue pulumi.Input `pulumi:"azureTableDefaultPartitionKeyValue"`
	// Azure Table insert type. Type: string (or Expression with resultType string).
	AzureTableInsertType pulumi.Input `pulumi:"azureTableInsertType"`
	// Azure Table partition key name. Type: string (or Expression with resultType string).
	AzureTablePartitionKeyName pulumi.Input `pulumi:"azureTablePartitionKeyName"`
	// Azure Table row key name. Type: string (or Expression with resultType string).
	AzureTableRowKeyName pulumi.Input `pulumi:"azureTableRowKeyName"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount pulumi.Input `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait pulumi.Input `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureTableSink'.
	Type pulumi.StringInput `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize pulumi.Input `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout pulumi.Input `pulumi:"writeBatchTimeout"`
}

func (AzureTableSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureTableSink)(nil)).Elem()
}

func (i AzureTableSinkArgs) ToAzureTableSinkOutput() AzureTableSinkOutput {
	return i.ToAzureTableSinkOutputWithContext(context.Background())
}

func (i AzureTableSinkArgs) ToAzureTableSinkOutputWithContext(ctx context.Context) AzureTableSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureTableSinkOutput)
}

// A copy activity Azure Table sink.
type AzureTableSinkOutput struct{ *pulumi.OutputState }

func (AzureTableSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureTableSink)(nil)).Elem()
}

func (o AzureTableSinkOutput) ToAzureTableSinkOutput() AzureTableSinkOutput {
	return o
}

func (o AzureTableSinkOutput) ToAzureTableSinkOutputWithContext(ctx context.Context) AzureTableSinkOutput {
	return o
}

// Azure Table default partition key value. Type: string (or Expression with resultType string).
func (o AzureTableSinkOutput) AzureTableDefaultPartitionKeyValue() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableSink) interface{} { return v.AzureTableDefaultPartitionKeyValue }).(pulumi.AnyOutput)
}

// Azure Table insert type. Type: string (or Expression with resultType string).
func (o AzureTableSinkOutput) AzureTableInsertType() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableSink) interface{} { return v.AzureTableInsertType }).(pulumi.AnyOutput)
}

// Azure Table partition key name. Type: string (or Expression with resultType string).
func (o AzureTableSinkOutput) AzureTablePartitionKeyName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableSink) interface{} { return v.AzureTablePartitionKeyName }).(pulumi.AnyOutput)
}

// Azure Table row key name. Type: string (or Expression with resultType string).
func (o AzureTableSinkOutput) AzureTableRowKeyName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableSink) interface{} { return v.AzureTableRowKeyName }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureTableSinkOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableSink) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o AzureTableSinkOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableSink) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o AzureTableSinkOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableSink) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureTableSinkOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableSink) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'AzureTableSink'.
func (o AzureTableSinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureTableSink) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o AzureTableSinkOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableSink) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureTableSinkOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableSink) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity Azure Table sink.
type AzureTableSinkResponse struct {
	// Azure Table default partition key value. Type: string (or Expression with resultType string).
	AzureTableDefaultPartitionKeyValue interface{} `pulumi:"azureTableDefaultPartitionKeyValue"`
	// Azure Table insert type. Type: string (or Expression with resultType string).
	AzureTableInsertType interface{} `pulumi:"azureTableInsertType"`
	// Azure Table partition key name. Type: string (or Expression with resultType string).
	AzureTablePartitionKeyName interface{} `pulumi:"azureTablePartitionKeyName"`
	// Azure Table row key name. Type: string (or Expression with resultType string).
	AzureTableRowKeyName interface{} `pulumi:"azureTableRowKeyName"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'AzureTableSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Azure Table sink.
type AzureTableSinkResponseOutput struct{ *pulumi.OutputState }

func (AzureTableSinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureTableSinkResponse)(nil)).Elem()
}

func (o AzureTableSinkResponseOutput) ToAzureTableSinkResponseOutput() AzureTableSinkResponseOutput {
	return o
}

func (o AzureTableSinkResponseOutput) ToAzureTableSinkResponseOutputWithContext(ctx context.Context) AzureTableSinkResponseOutput {
	return o
}

// Azure Table default partition key value. Type: string (or Expression with resultType string).
func (o AzureTableSinkResponseOutput) AzureTableDefaultPartitionKeyValue() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableSinkResponse) interface{} { return v.AzureTableDefaultPartitionKeyValue }).(pulumi.AnyOutput)
}

// Azure Table insert type. Type: string (or Expression with resultType string).
func (o AzureTableSinkResponseOutput) AzureTableInsertType() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableSinkResponse) interface{} { return v.AzureTableInsertType }).(pulumi.AnyOutput)
}

// Azure Table partition key name. Type: string (or Expression with resultType string).
func (o AzureTableSinkResponseOutput) AzureTablePartitionKeyName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableSinkResponse) interface{} { return v.AzureTablePartitionKeyName }).(pulumi.AnyOutput)
}

// Azure Table row key name. Type: string (or Expression with resultType string).
func (o AzureTableSinkResponseOutput) AzureTableRowKeyName() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableSinkResponse) interface{} { return v.AzureTableRowKeyName }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureTableSinkResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableSinkResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o AzureTableSinkResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableSinkResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o AzureTableSinkResponseOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableSinkResponse) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureTableSinkResponseOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableSinkResponse) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'AzureTableSink'.
func (o AzureTableSinkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureTableSinkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o AzureTableSinkResponseOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableSinkResponse) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureTableSinkResponseOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableSinkResponse) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity Azure Table source.
type AzureTableSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// Azure Table source ignore table not found. Type: boolean (or Expression with resultType boolean).
	AzureTableSourceIgnoreTableNotFound interface{} `pulumi:"azureTableSourceIgnoreTableNotFound"`
	// Azure Table source query. Type: string (or Expression with resultType string).
	AzureTableSourceQuery interface{} `pulumi:"azureTableSourceQuery"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzureTableSource'.
	Type string `pulumi:"type"`
}

// AzureTableSourceInput is an input type that accepts AzureTableSourceArgs and AzureTableSourceOutput values.
// You can construct a concrete instance of `AzureTableSourceInput` via:
//
//	AzureTableSourceArgs{...}
type AzureTableSourceInput interface {
	pulumi.Input

	ToAzureTableSourceOutput() AzureTableSourceOutput
	ToAzureTableSourceOutputWithContext(context.Context) AzureTableSourceOutput
}

// A copy activity Azure Table source.
type AzureTableSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// Azure Table source ignore table not found. Type: boolean (or Expression with resultType boolean).
	AzureTableSourceIgnoreTableNotFound pulumi.Input `pulumi:"azureTableSourceIgnoreTableNotFound"`
	// Azure Table source query. Type: string (or Expression with resultType string).
	AzureTableSourceQuery pulumi.Input `pulumi:"azureTableSourceQuery"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzureTableSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureTableSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureTableSource)(nil)).Elem()
}

func (i AzureTableSourceArgs) ToAzureTableSourceOutput() AzureTableSourceOutput {
	return i.ToAzureTableSourceOutputWithContext(context.Background())
}

func (i AzureTableSourceArgs) ToAzureTableSourceOutputWithContext(ctx context.Context) AzureTableSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureTableSourceOutput)
}

// A copy activity Azure Table source.
type AzureTableSourceOutput struct{ *pulumi.OutputState }

func (AzureTableSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureTableSource)(nil)).Elem()
}

func (o AzureTableSourceOutput) ToAzureTableSourceOutput() AzureTableSourceOutput {
	return o
}

func (o AzureTableSourceOutput) ToAzureTableSourceOutputWithContext(ctx context.Context) AzureTableSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o AzureTableSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// Azure Table source ignore table not found. Type: boolean (or Expression with resultType boolean).
func (o AzureTableSourceOutput) AzureTableSourceIgnoreTableNotFound() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableSource) interface{} { return v.AzureTableSourceIgnoreTableNotFound }).(pulumi.AnyOutput)
}

// Azure Table source query. Type: string (or Expression with resultType string).
func (o AzureTableSourceOutput) AzureTableSourceQuery() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableSource) interface{} { return v.AzureTableSourceQuery }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureTableSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureTableSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureTableSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o AzureTableSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureTableSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'AzureTableSource'.
func (o AzureTableSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureTableSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Azure Table source.
type AzureTableSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// Azure Table source ignore table not found. Type: boolean (or Expression with resultType boolean).
	AzureTableSourceIgnoreTableNotFound interface{} `pulumi:"azureTableSourceIgnoreTableNotFound"`
	// Azure Table source query. Type: string (or Expression with resultType string).
	AzureTableSourceQuery interface{} `pulumi:"azureTableSourceQuery"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'AzureTableSource'.
	Type string `pulumi:"type"`
}

// A copy activity Azure Table source.
type AzureTableSourceResponseOutput struct{ *pulumi.OutputState }

func (AzureTableSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureTableSourceResponse)(nil)).Elem()
}

func (o AzureTableSourceResponseOutput) ToAzureTableSourceResponseOutput() AzureTableSourceResponseOutput {
	return o
}

func (o AzureTableSourceResponseOutput) ToAzureTableSourceResponseOutputWithContext(ctx context.Context) AzureTableSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o AzureTableSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// Azure Table source ignore table not found. Type: boolean (or Expression with resultType boolean).
func (o AzureTableSourceResponseOutput) AzureTableSourceIgnoreTableNotFound() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableSourceResponse) interface{} { return v.AzureTableSourceIgnoreTableNotFound }).(pulumi.AnyOutput)
}

// Azure Table source query. Type: string (or Expression with resultType string).
func (o AzureTableSourceResponseOutput) AzureTableSourceQuery() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableSourceResponse) interface{} { return v.AzureTableSourceQuery }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o AzureTableSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o AzureTableSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureTableSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o AzureTableSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o AzureTableSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'AzureTableSource'.
func (o AzureTableSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureTableSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The azure table storage linked service.
type AzureTableStorageLinkedService struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey *AzureKeyVaultSecretReference `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken *AzureKeyVaultSecretReference `pulumi:"sasToken"`
	// SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri interface{} `pulumi:"sasUri"`
	// Type of linked service.
	// Expected value is 'AzureTableStorage'.
	Type string `pulumi:"type"`
}

// AzureTableStorageLinkedServiceInput is an input type that accepts AzureTableStorageLinkedServiceArgs and AzureTableStorageLinkedServiceOutput values.
// You can construct a concrete instance of `AzureTableStorageLinkedServiceInput` via:
//
//	AzureTableStorageLinkedServiceArgs{...}
type AzureTableStorageLinkedServiceInput interface {
	pulumi.Input

	ToAzureTableStorageLinkedServiceOutput() AzureTableStorageLinkedServiceOutput
	ToAzureTableStorageLinkedServiceOutputWithContext(context.Context) AzureTableStorageLinkedServiceOutput
}

// The azure table storage linked service.
type AzureTableStorageLinkedServiceArgs struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey AzureKeyVaultSecretReferencePtrInput `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken AzureKeyVaultSecretReferencePtrInput `pulumi:"sasToken"`
	// SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri pulumi.Input `pulumi:"sasUri"`
	// Type of linked service.
	// Expected value is 'AzureTableStorage'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureTableStorageLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureTableStorageLinkedService)(nil)).Elem()
}

func (i AzureTableStorageLinkedServiceArgs) ToAzureTableStorageLinkedServiceOutput() AzureTableStorageLinkedServiceOutput {
	return i.ToAzureTableStorageLinkedServiceOutputWithContext(context.Background())
}

func (i AzureTableStorageLinkedServiceArgs) ToAzureTableStorageLinkedServiceOutputWithContext(ctx context.Context) AzureTableStorageLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureTableStorageLinkedServiceOutput)
}

// The azure table storage linked service.
type AzureTableStorageLinkedServiceOutput struct{ *pulumi.OutputState }

func (AzureTableStorageLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureTableStorageLinkedService)(nil)).Elem()
}

func (o AzureTableStorageLinkedServiceOutput) ToAzureTableStorageLinkedServiceOutput() AzureTableStorageLinkedServiceOutput {
	return o
}

func (o AzureTableStorageLinkedServiceOutput) ToAzureTableStorageLinkedServiceOutputWithContext(ctx context.Context) AzureTableStorageLinkedServiceOutput {
	return o
}

// The Azure key vault secret reference of accountKey in connection string.
func (o AzureTableStorageLinkedServiceOutput) AccountKey() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v AzureTableStorageLinkedService) *AzureKeyVaultSecretReference { return v.AccountKey }).(AzureKeyVaultSecretReferencePtrOutput)
}

// List of tags that can be used for describing the linked service.
func (o AzureTableStorageLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureTableStorageLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AzureTableStorageLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v AzureTableStorageLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureTableStorageLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableStorageLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AzureTableStorageLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureTableStorageLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AzureTableStorageLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureTableStorageLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AzureTableStorageLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v AzureTableStorageLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The Azure key vault secret reference of sasToken in sas uri.
func (o AzureTableStorageLinkedServiceOutput) SasToken() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v AzureTableStorageLinkedService) *AzureKeyVaultSecretReference { return v.SasToken }).(AzureKeyVaultSecretReferencePtrOutput)
}

// SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureTableStorageLinkedServiceOutput) SasUri() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableStorageLinkedService) interface{} { return v.SasUri }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AzureTableStorage'.
func (o AzureTableStorageLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureTableStorageLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The azure table storage linked service.
type AzureTableStorageLinkedServiceResponse struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey *AzureKeyVaultSecretReferenceResponse `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken *AzureKeyVaultSecretReferenceResponse `pulumi:"sasToken"`
	// SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasUri interface{} `pulumi:"sasUri"`
	// Type of linked service.
	// Expected value is 'AzureTableStorage'.
	Type string `pulumi:"type"`
}

// The azure table storage linked service.
type AzureTableStorageLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (AzureTableStorageLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureTableStorageLinkedServiceResponse)(nil)).Elem()
}

func (o AzureTableStorageLinkedServiceResponseOutput) ToAzureTableStorageLinkedServiceResponseOutput() AzureTableStorageLinkedServiceResponseOutput {
	return o
}

func (o AzureTableStorageLinkedServiceResponseOutput) ToAzureTableStorageLinkedServiceResponseOutputWithContext(ctx context.Context) AzureTableStorageLinkedServiceResponseOutput {
	return o
}

// The Azure key vault secret reference of accountKey in connection string.
func (o AzureTableStorageLinkedServiceResponseOutput) AccountKey() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureTableStorageLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse {
		return v.AccountKey
	}).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// List of tags that can be used for describing the linked service.
func (o AzureTableStorageLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v AzureTableStorageLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o AzureTableStorageLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureTableStorageLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureTableStorageLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableStorageLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o AzureTableStorageLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureTableStorageLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o AzureTableStorageLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureTableStorageLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o AzureTableStorageLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v AzureTableStorageLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The Azure key vault secret reference of sasToken in sas uri.
func (o AzureTableStorageLinkedServiceResponseOutput) SasToken() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v AzureTableStorageLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse {
		return v.SasToken
	}).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o AzureTableStorageLinkedServiceResponseOutput) SasUri() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureTableStorageLinkedServiceResponse) interface{} { return v.SasUri }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'AzureTableStorage'.
func (o AzureTableStorageLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureTableStorageLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Big data pool reference type.
type BigDataPoolParametrizationReference struct {
	// Reference big data pool name. Type: string (or Expression with resultType string).
	ReferenceName interface{} `pulumi:"referenceName"`
	// Big data pool reference type.
	Type string `pulumi:"type"`
}

// BigDataPoolParametrizationReferenceInput is an input type that accepts BigDataPoolParametrizationReferenceArgs and BigDataPoolParametrizationReferenceOutput values.
// You can construct a concrete instance of `BigDataPoolParametrizationReferenceInput` via:
//
//	BigDataPoolParametrizationReferenceArgs{...}
type BigDataPoolParametrizationReferenceInput interface {
	pulumi.Input

	ToBigDataPoolParametrizationReferenceOutput() BigDataPoolParametrizationReferenceOutput
	ToBigDataPoolParametrizationReferenceOutputWithContext(context.Context) BigDataPoolParametrizationReferenceOutput
}

// Big data pool reference type.
type BigDataPoolParametrizationReferenceArgs struct {
	// Reference big data pool name. Type: string (or Expression with resultType string).
	ReferenceName pulumi.Input `pulumi:"referenceName"`
	// Big data pool reference type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (BigDataPoolParametrizationReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BigDataPoolParametrizationReference)(nil)).Elem()
}

func (i BigDataPoolParametrizationReferenceArgs) ToBigDataPoolParametrizationReferenceOutput() BigDataPoolParametrizationReferenceOutput {
	return i.ToBigDataPoolParametrizationReferenceOutputWithContext(context.Background())
}

func (i BigDataPoolParametrizationReferenceArgs) ToBigDataPoolParametrizationReferenceOutputWithContext(ctx context.Context) BigDataPoolParametrizationReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigDataPoolParametrizationReferenceOutput)
}

func (i BigDataPoolParametrizationReferenceArgs) ToBigDataPoolParametrizationReferencePtrOutput() BigDataPoolParametrizationReferencePtrOutput {
	return i.ToBigDataPoolParametrizationReferencePtrOutputWithContext(context.Background())
}

func (i BigDataPoolParametrizationReferenceArgs) ToBigDataPoolParametrizationReferencePtrOutputWithContext(ctx context.Context) BigDataPoolParametrizationReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigDataPoolParametrizationReferenceOutput).ToBigDataPoolParametrizationReferencePtrOutputWithContext(ctx)
}

// BigDataPoolParametrizationReferencePtrInput is an input type that accepts BigDataPoolParametrizationReferenceArgs, BigDataPoolParametrizationReferencePtr and BigDataPoolParametrizationReferencePtrOutput values.
// You can construct a concrete instance of `BigDataPoolParametrizationReferencePtrInput` via:
//
//	        BigDataPoolParametrizationReferenceArgs{...}
//
//	or:
//
//	        nil
type BigDataPoolParametrizationReferencePtrInput interface {
	pulumi.Input

	ToBigDataPoolParametrizationReferencePtrOutput() BigDataPoolParametrizationReferencePtrOutput
	ToBigDataPoolParametrizationReferencePtrOutputWithContext(context.Context) BigDataPoolParametrizationReferencePtrOutput
}

type bigDataPoolParametrizationReferencePtrType BigDataPoolParametrizationReferenceArgs

func BigDataPoolParametrizationReferencePtr(v *BigDataPoolParametrizationReferenceArgs) BigDataPoolParametrizationReferencePtrInput {
	return (*bigDataPoolParametrizationReferencePtrType)(v)
}

func (*bigDataPoolParametrizationReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BigDataPoolParametrizationReference)(nil)).Elem()
}

func (i *bigDataPoolParametrizationReferencePtrType) ToBigDataPoolParametrizationReferencePtrOutput() BigDataPoolParametrizationReferencePtrOutput {
	return i.ToBigDataPoolParametrizationReferencePtrOutputWithContext(context.Background())
}

func (i *bigDataPoolParametrizationReferencePtrType) ToBigDataPoolParametrizationReferencePtrOutputWithContext(ctx context.Context) BigDataPoolParametrizationReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigDataPoolParametrizationReferencePtrOutput)
}

// Big data pool reference type.
type BigDataPoolParametrizationReferenceOutput struct{ *pulumi.OutputState }

func (BigDataPoolParametrizationReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigDataPoolParametrizationReference)(nil)).Elem()
}

func (o BigDataPoolParametrizationReferenceOutput) ToBigDataPoolParametrizationReferenceOutput() BigDataPoolParametrizationReferenceOutput {
	return o
}

func (o BigDataPoolParametrizationReferenceOutput) ToBigDataPoolParametrizationReferenceOutputWithContext(ctx context.Context) BigDataPoolParametrizationReferenceOutput {
	return o
}

func (o BigDataPoolParametrizationReferenceOutput) ToBigDataPoolParametrizationReferencePtrOutput() BigDataPoolParametrizationReferencePtrOutput {
	return o.ToBigDataPoolParametrizationReferencePtrOutputWithContext(context.Background())
}

func (o BigDataPoolParametrizationReferenceOutput) ToBigDataPoolParametrizationReferencePtrOutputWithContext(ctx context.Context) BigDataPoolParametrizationReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BigDataPoolParametrizationReference) *BigDataPoolParametrizationReference {
		return &v
	}).(BigDataPoolParametrizationReferencePtrOutput)
}

// Reference big data pool name. Type: string (or Expression with resultType string).
func (o BigDataPoolParametrizationReferenceOutput) ReferenceName() pulumi.AnyOutput {
	return o.ApplyT(func(v BigDataPoolParametrizationReference) interface{} { return v.ReferenceName }).(pulumi.AnyOutput)
}

// Big data pool reference type.
func (o BigDataPoolParametrizationReferenceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BigDataPoolParametrizationReference) string { return v.Type }).(pulumi.StringOutput)
}

type BigDataPoolParametrizationReferencePtrOutput struct{ *pulumi.OutputState }

func (BigDataPoolParametrizationReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BigDataPoolParametrizationReference)(nil)).Elem()
}

func (o BigDataPoolParametrizationReferencePtrOutput) ToBigDataPoolParametrizationReferencePtrOutput() BigDataPoolParametrizationReferencePtrOutput {
	return o
}

func (o BigDataPoolParametrizationReferencePtrOutput) ToBigDataPoolParametrizationReferencePtrOutputWithContext(ctx context.Context) BigDataPoolParametrizationReferencePtrOutput {
	return o
}

func (o BigDataPoolParametrizationReferencePtrOutput) Elem() BigDataPoolParametrizationReferenceOutput {
	return o.ApplyT(func(v *BigDataPoolParametrizationReference) BigDataPoolParametrizationReference {
		if v != nil {
			return *v
		}
		var ret BigDataPoolParametrizationReference
		return ret
	}).(BigDataPoolParametrizationReferenceOutput)
}

// Reference big data pool name. Type: string (or Expression with resultType string).
func (o BigDataPoolParametrizationReferencePtrOutput) ReferenceName() pulumi.AnyOutput {
	return o.ApplyT(func(v *BigDataPoolParametrizationReference) interface{} {
		if v == nil {
			return nil
		}
		return v.ReferenceName
	}).(pulumi.AnyOutput)
}

// Big data pool reference type.
func (o BigDataPoolParametrizationReferencePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BigDataPoolParametrizationReference) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Big data pool reference type.
type BigDataPoolParametrizationReferenceResponse struct {
	// Reference big data pool name. Type: string (or Expression with resultType string).
	ReferenceName interface{} `pulumi:"referenceName"`
	// Big data pool reference type.
	Type string `pulumi:"type"`
}

// Big data pool reference type.
type BigDataPoolParametrizationReferenceResponseOutput struct{ *pulumi.OutputState }

func (BigDataPoolParametrizationReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigDataPoolParametrizationReferenceResponse)(nil)).Elem()
}

func (o BigDataPoolParametrizationReferenceResponseOutput) ToBigDataPoolParametrizationReferenceResponseOutput() BigDataPoolParametrizationReferenceResponseOutput {
	return o
}

func (o BigDataPoolParametrizationReferenceResponseOutput) ToBigDataPoolParametrizationReferenceResponseOutputWithContext(ctx context.Context) BigDataPoolParametrizationReferenceResponseOutput {
	return o
}

// Reference big data pool name. Type: string (or Expression with resultType string).
func (o BigDataPoolParametrizationReferenceResponseOutput) ReferenceName() pulumi.AnyOutput {
	return o.ApplyT(func(v BigDataPoolParametrizationReferenceResponse) interface{} { return v.ReferenceName }).(pulumi.AnyOutput)
}

// Big data pool reference type.
func (o BigDataPoolParametrizationReferenceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BigDataPoolParametrizationReferenceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type BigDataPoolParametrizationReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (BigDataPoolParametrizationReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BigDataPoolParametrizationReferenceResponse)(nil)).Elem()
}

func (o BigDataPoolParametrizationReferenceResponsePtrOutput) ToBigDataPoolParametrizationReferenceResponsePtrOutput() BigDataPoolParametrizationReferenceResponsePtrOutput {
	return o
}

func (o BigDataPoolParametrizationReferenceResponsePtrOutput) ToBigDataPoolParametrizationReferenceResponsePtrOutputWithContext(ctx context.Context) BigDataPoolParametrizationReferenceResponsePtrOutput {
	return o
}

func (o BigDataPoolParametrizationReferenceResponsePtrOutput) Elem() BigDataPoolParametrizationReferenceResponseOutput {
	return o.ApplyT(func(v *BigDataPoolParametrizationReferenceResponse) BigDataPoolParametrizationReferenceResponse {
		if v != nil {
			return *v
		}
		var ret BigDataPoolParametrizationReferenceResponse
		return ret
	}).(BigDataPoolParametrizationReferenceResponseOutput)
}

// Reference big data pool name. Type: string (or Expression with resultType string).
func (o BigDataPoolParametrizationReferenceResponsePtrOutput) ReferenceName() pulumi.AnyOutput {
	return o.ApplyT(func(v *BigDataPoolParametrizationReferenceResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.ReferenceName
	}).(pulumi.AnyOutput)
}

// Big data pool reference type.
func (o BigDataPoolParametrizationReferenceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BigDataPoolParametrizationReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Binary dataset.
type BinaryDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the binary dataset.
	Compression *DatasetCompression `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The location of the Binary storage.
	Location interface{} `pulumi:"location"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Binary'.
	Type string `pulumi:"type"`
}

// BinaryDatasetInput is an input type that accepts BinaryDatasetArgs and BinaryDatasetOutput values.
// You can construct a concrete instance of `BinaryDatasetInput` via:
//
//	BinaryDatasetArgs{...}
type BinaryDatasetInput interface {
	pulumi.Input

	ToBinaryDatasetOutput() BinaryDatasetOutput
	ToBinaryDatasetOutputWithContext(context.Context) BinaryDatasetOutput
}

// Binary dataset.
type BinaryDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The data compression method used for the binary dataset.
	Compression DatasetCompressionPtrInput `pulumi:"compression"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// The location of the Binary storage.
	Location pulumi.Input `pulumi:"location"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Binary'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (BinaryDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BinaryDataset)(nil)).Elem()
}

func (i BinaryDatasetArgs) ToBinaryDatasetOutput() BinaryDatasetOutput {
	return i.ToBinaryDatasetOutputWithContext(context.Background())
}

func (i BinaryDatasetArgs) ToBinaryDatasetOutputWithContext(ctx context.Context) BinaryDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BinaryDatasetOutput)
}

// Binary dataset.
type BinaryDatasetOutput struct{ *pulumi.OutputState }

func (BinaryDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BinaryDataset)(nil)).Elem()
}

func (o BinaryDatasetOutput) ToBinaryDatasetOutput() BinaryDatasetOutput {
	return o
}

func (o BinaryDatasetOutput) ToBinaryDatasetOutputWithContext(ctx context.Context) BinaryDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o BinaryDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v BinaryDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The data compression method used for the binary dataset.
func (o BinaryDatasetOutput) Compression() DatasetCompressionPtrOutput {
	return o.ApplyT(func(v BinaryDataset) *DatasetCompression { return v.Compression }).(DatasetCompressionPtrOutput)
}

// Dataset description.
func (o BinaryDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BinaryDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o BinaryDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v BinaryDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o BinaryDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v BinaryDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// The location of the Binary storage.
func (o BinaryDatasetOutput) Location() pulumi.AnyOutput {
	return o.ApplyT(func(v BinaryDataset) interface{} { return v.Location }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o BinaryDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v BinaryDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o BinaryDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v BinaryDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o BinaryDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v BinaryDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'Binary'.
func (o BinaryDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BinaryDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Binary dataset.
type BinaryDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the binary dataset.
	Compression *DatasetCompressionResponse `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The location of the Binary storage.
	Location interface{} `pulumi:"location"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Binary'.
	Type string `pulumi:"type"`
}

// Binary dataset.
type BinaryDatasetResponseOutput struct{ *pulumi.OutputState }

func (BinaryDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BinaryDatasetResponse)(nil)).Elem()
}

func (o BinaryDatasetResponseOutput) ToBinaryDatasetResponseOutput() BinaryDatasetResponseOutput {
	return o
}

func (o BinaryDatasetResponseOutput) ToBinaryDatasetResponseOutputWithContext(ctx context.Context) BinaryDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o BinaryDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v BinaryDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The data compression method used for the binary dataset.
func (o BinaryDatasetResponseOutput) Compression() DatasetCompressionResponsePtrOutput {
	return o.ApplyT(func(v BinaryDatasetResponse) *DatasetCompressionResponse { return v.Compression }).(DatasetCompressionResponsePtrOutput)
}

// Dataset description.
func (o BinaryDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BinaryDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o BinaryDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v BinaryDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o BinaryDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v BinaryDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// The location of the Binary storage.
func (o BinaryDatasetResponseOutput) Location() pulumi.AnyOutput {
	return o.ApplyT(func(v BinaryDatasetResponse) interface{} { return v.Location }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o BinaryDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v BinaryDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o BinaryDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v BinaryDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o BinaryDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v BinaryDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'Binary'.
func (o BinaryDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BinaryDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Binary read settings.
type BinaryReadSettings struct {
	// Compression settings.
	CompressionProperties interface{} `pulumi:"compressionProperties"`
	// The read setting type.
	// Expected value is 'BinaryReadSettings'.
	Type string `pulumi:"type"`
}

// BinaryReadSettingsInput is an input type that accepts BinaryReadSettingsArgs and BinaryReadSettingsOutput values.
// You can construct a concrete instance of `BinaryReadSettingsInput` via:
//
//	BinaryReadSettingsArgs{...}
type BinaryReadSettingsInput interface {
	pulumi.Input

	ToBinaryReadSettingsOutput() BinaryReadSettingsOutput
	ToBinaryReadSettingsOutputWithContext(context.Context) BinaryReadSettingsOutput
}

// Binary read settings.
type BinaryReadSettingsArgs struct {
	// Compression settings.
	CompressionProperties pulumi.Input `pulumi:"compressionProperties"`
	// The read setting type.
	// Expected value is 'BinaryReadSettings'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (BinaryReadSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BinaryReadSettings)(nil)).Elem()
}

func (i BinaryReadSettingsArgs) ToBinaryReadSettingsOutput() BinaryReadSettingsOutput {
	return i.ToBinaryReadSettingsOutputWithContext(context.Background())
}

func (i BinaryReadSettingsArgs) ToBinaryReadSettingsOutputWithContext(ctx context.Context) BinaryReadSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BinaryReadSettingsOutput)
}

func (i BinaryReadSettingsArgs) ToBinaryReadSettingsPtrOutput() BinaryReadSettingsPtrOutput {
	return i.ToBinaryReadSettingsPtrOutputWithContext(context.Background())
}

func (i BinaryReadSettingsArgs) ToBinaryReadSettingsPtrOutputWithContext(ctx context.Context) BinaryReadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BinaryReadSettingsOutput).ToBinaryReadSettingsPtrOutputWithContext(ctx)
}

// BinaryReadSettingsPtrInput is an input type that accepts BinaryReadSettingsArgs, BinaryReadSettingsPtr and BinaryReadSettingsPtrOutput values.
// You can construct a concrete instance of `BinaryReadSettingsPtrInput` via:
//
//	        BinaryReadSettingsArgs{...}
//
//	or:
//
//	        nil
type BinaryReadSettingsPtrInput interface {
	pulumi.Input

	ToBinaryReadSettingsPtrOutput() BinaryReadSettingsPtrOutput
	ToBinaryReadSettingsPtrOutputWithContext(context.Context) BinaryReadSettingsPtrOutput
}

type binaryReadSettingsPtrType BinaryReadSettingsArgs

func BinaryReadSettingsPtr(v *BinaryReadSettingsArgs) BinaryReadSettingsPtrInput {
	return (*binaryReadSettingsPtrType)(v)
}

func (*binaryReadSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BinaryReadSettings)(nil)).Elem()
}

func (i *binaryReadSettingsPtrType) ToBinaryReadSettingsPtrOutput() BinaryReadSettingsPtrOutput {
	return i.ToBinaryReadSettingsPtrOutputWithContext(context.Background())
}

func (i *binaryReadSettingsPtrType) ToBinaryReadSettingsPtrOutputWithContext(ctx context.Context) BinaryReadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BinaryReadSettingsPtrOutput)
}

// Binary read settings.
type BinaryReadSettingsOutput struct{ *pulumi.OutputState }

func (BinaryReadSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BinaryReadSettings)(nil)).Elem()
}

func (o BinaryReadSettingsOutput) ToBinaryReadSettingsOutput() BinaryReadSettingsOutput {
	return o
}

func (o BinaryReadSettingsOutput) ToBinaryReadSettingsOutputWithContext(ctx context.Context) BinaryReadSettingsOutput {
	return o
}

func (o BinaryReadSettingsOutput) ToBinaryReadSettingsPtrOutput() BinaryReadSettingsPtrOutput {
	return o.ToBinaryReadSettingsPtrOutputWithContext(context.Background())
}

func (o BinaryReadSettingsOutput) ToBinaryReadSettingsPtrOutputWithContext(ctx context.Context) BinaryReadSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BinaryReadSettings) *BinaryReadSettings {
		return &v
	}).(BinaryReadSettingsPtrOutput)
}

// Compression settings.
func (o BinaryReadSettingsOutput) CompressionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v BinaryReadSettings) interface{} { return v.CompressionProperties }).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'BinaryReadSettings'.
func (o BinaryReadSettingsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BinaryReadSettings) string { return v.Type }).(pulumi.StringOutput)
}

type BinaryReadSettingsPtrOutput struct{ *pulumi.OutputState }

func (BinaryReadSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BinaryReadSettings)(nil)).Elem()
}

func (o BinaryReadSettingsPtrOutput) ToBinaryReadSettingsPtrOutput() BinaryReadSettingsPtrOutput {
	return o
}

func (o BinaryReadSettingsPtrOutput) ToBinaryReadSettingsPtrOutputWithContext(ctx context.Context) BinaryReadSettingsPtrOutput {
	return o
}

func (o BinaryReadSettingsPtrOutput) Elem() BinaryReadSettingsOutput {
	return o.ApplyT(func(v *BinaryReadSettings) BinaryReadSettings {
		if v != nil {
			return *v
		}
		var ret BinaryReadSettings
		return ret
	}).(BinaryReadSettingsOutput)
}

// Compression settings.
func (o BinaryReadSettingsPtrOutput) CompressionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v *BinaryReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.CompressionProperties
	}).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'BinaryReadSettings'.
func (o BinaryReadSettingsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BinaryReadSettings) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Binary read settings.
type BinaryReadSettingsResponse struct {
	// Compression settings.
	CompressionProperties interface{} `pulumi:"compressionProperties"`
	// The read setting type.
	// Expected value is 'BinaryReadSettings'.
	Type string `pulumi:"type"`
}

// Binary read settings.
type BinaryReadSettingsResponseOutput struct{ *pulumi.OutputState }

func (BinaryReadSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BinaryReadSettingsResponse)(nil)).Elem()
}

func (o BinaryReadSettingsResponseOutput) ToBinaryReadSettingsResponseOutput() BinaryReadSettingsResponseOutput {
	return o
}

func (o BinaryReadSettingsResponseOutput) ToBinaryReadSettingsResponseOutputWithContext(ctx context.Context) BinaryReadSettingsResponseOutput {
	return o
}

// Compression settings.
func (o BinaryReadSettingsResponseOutput) CompressionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v BinaryReadSettingsResponse) interface{} { return v.CompressionProperties }).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'BinaryReadSettings'.
func (o BinaryReadSettingsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BinaryReadSettingsResponse) string { return v.Type }).(pulumi.StringOutput)
}

type BinaryReadSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (BinaryReadSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BinaryReadSettingsResponse)(nil)).Elem()
}

func (o BinaryReadSettingsResponsePtrOutput) ToBinaryReadSettingsResponsePtrOutput() BinaryReadSettingsResponsePtrOutput {
	return o
}

func (o BinaryReadSettingsResponsePtrOutput) ToBinaryReadSettingsResponsePtrOutputWithContext(ctx context.Context) BinaryReadSettingsResponsePtrOutput {
	return o
}

func (o BinaryReadSettingsResponsePtrOutput) Elem() BinaryReadSettingsResponseOutput {
	return o.ApplyT(func(v *BinaryReadSettingsResponse) BinaryReadSettingsResponse {
		if v != nil {
			return *v
		}
		var ret BinaryReadSettingsResponse
		return ret
	}).(BinaryReadSettingsResponseOutput)
}

// Compression settings.
func (o BinaryReadSettingsResponsePtrOutput) CompressionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v *BinaryReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.CompressionProperties
	}).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'BinaryReadSettings'.
func (o BinaryReadSettingsResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BinaryReadSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// A copy activity Binary sink.
type BinarySink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Binary store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy sink type.
	// Expected value is 'BinarySink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// BinarySinkInput is an input type that accepts BinarySinkArgs and BinarySinkOutput values.
// You can construct a concrete instance of `BinarySinkInput` via:
//
//	BinarySinkArgs{...}
type BinarySinkInput interface {
	pulumi.Input

	ToBinarySinkOutput() BinarySinkOutput
	ToBinarySinkOutputWithContext(context.Context) BinarySinkOutput
}

// A copy activity Binary sink.
type BinarySinkArgs struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount pulumi.Input `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait pulumi.Input `pulumi:"sinkRetryWait"`
	// Binary store settings.
	StoreSettings pulumi.Input `pulumi:"storeSettings"`
	// Copy sink type.
	// Expected value is 'BinarySink'.
	Type pulumi.StringInput `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize pulumi.Input `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout pulumi.Input `pulumi:"writeBatchTimeout"`
}

func (BinarySinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BinarySink)(nil)).Elem()
}

func (i BinarySinkArgs) ToBinarySinkOutput() BinarySinkOutput {
	return i.ToBinarySinkOutputWithContext(context.Background())
}

func (i BinarySinkArgs) ToBinarySinkOutputWithContext(ctx context.Context) BinarySinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BinarySinkOutput)
}

// A copy activity Binary sink.
type BinarySinkOutput struct{ *pulumi.OutputState }

func (BinarySinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BinarySink)(nil)).Elem()
}

func (o BinarySinkOutput) ToBinarySinkOutput() BinarySinkOutput {
	return o
}

func (o BinarySinkOutput) ToBinarySinkOutputWithContext(ctx context.Context) BinarySinkOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o BinarySinkOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v BinarySink) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o BinarySinkOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v BinarySink) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o BinarySinkOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v BinarySink) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o BinarySinkOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v BinarySink) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Binary store settings.
func (o BinarySinkOutput) StoreSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v BinarySink) interface{} { return v.StoreSettings }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'BinarySink'.
func (o BinarySinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BinarySink) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o BinarySinkOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v BinarySink) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o BinarySinkOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v BinarySink) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity Binary sink.
type BinarySinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Binary store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy sink type.
	// Expected value is 'BinarySink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Binary sink.
type BinarySinkResponseOutput struct{ *pulumi.OutputState }

func (BinarySinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BinarySinkResponse)(nil)).Elem()
}

func (o BinarySinkResponseOutput) ToBinarySinkResponseOutput() BinarySinkResponseOutput {
	return o
}

func (o BinarySinkResponseOutput) ToBinarySinkResponseOutputWithContext(ctx context.Context) BinarySinkResponseOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o BinarySinkResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v BinarySinkResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o BinarySinkResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v BinarySinkResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o BinarySinkResponseOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v BinarySinkResponse) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o BinarySinkResponseOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v BinarySinkResponse) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Binary store settings.
func (o BinarySinkResponseOutput) StoreSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v BinarySinkResponse) interface{} { return v.StoreSettings }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'BinarySink'.
func (o BinarySinkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BinarySinkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o BinarySinkResponseOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v BinarySinkResponse) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o BinarySinkResponseOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v BinarySinkResponse) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity Binary source.
type BinarySource struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Binary format settings.
	FormatSettings *BinaryReadSettings `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Binary store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'BinarySource'.
	Type string `pulumi:"type"`
}

// BinarySourceInput is an input type that accepts BinarySourceArgs and BinarySourceOutput values.
// You can construct a concrete instance of `BinarySourceInput` via:
//
//	BinarySourceArgs{...}
type BinarySourceInput interface {
	pulumi.Input

	ToBinarySourceOutput() BinarySourceOutput
	ToBinarySourceOutputWithContext(context.Context) BinarySourceOutput
}

// A copy activity Binary source.
type BinarySourceArgs struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// Binary format settings.
	FormatSettings BinaryReadSettingsPtrInput `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Binary store settings.
	StoreSettings pulumi.Input `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'BinarySource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (BinarySourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BinarySource)(nil)).Elem()
}

func (i BinarySourceArgs) ToBinarySourceOutput() BinarySourceOutput {
	return i.ToBinarySourceOutputWithContext(context.Background())
}

func (i BinarySourceArgs) ToBinarySourceOutputWithContext(ctx context.Context) BinarySourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BinarySourceOutput)
}

// A copy activity Binary source.
type BinarySourceOutput struct{ *pulumi.OutputState }

func (BinarySourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BinarySource)(nil)).Elem()
}

func (o BinarySourceOutput) ToBinarySourceOutput() BinarySourceOutput {
	return o
}

func (o BinarySourceOutput) ToBinarySourceOutputWithContext(ctx context.Context) BinarySourceOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o BinarySourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v BinarySource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Binary format settings.
func (o BinarySourceOutput) FormatSettings() BinaryReadSettingsPtrOutput {
	return o.ApplyT(func(v BinarySource) *BinaryReadSettings { return v.FormatSettings }).(BinaryReadSettingsPtrOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o BinarySourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v BinarySource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o BinarySourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v BinarySource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o BinarySourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v BinarySource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Binary store settings.
func (o BinarySourceOutput) StoreSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v BinarySource) interface{} { return v.StoreSettings }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'BinarySource'.
func (o BinarySourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BinarySource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Binary source.
type BinarySourceResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Binary format settings.
	FormatSettings *BinaryReadSettingsResponse `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Binary store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'BinarySource'.
	Type string `pulumi:"type"`
}

// A copy activity Binary source.
type BinarySourceResponseOutput struct{ *pulumi.OutputState }

func (BinarySourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BinarySourceResponse)(nil)).Elem()
}

func (o BinarySourceResponseOutput) ToBinarySourceResponseOutput() BinarySourceResponseOutput {
	return o
}

func (o BinarySourceResponseOutput) ToBinarySourceResponseOutputWithContext(ctx context.Context) BinarySourceResponseOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o BinarySourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v BinarySourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Binary format settings.
func (o BinarySourceResponseOutput) FormatSettings() BinaryReadSettingsResponsePtrOutput {
	return o.ApplyT(func(v BinarySourceResponse) *BinaryReadSettingsResponse { return v.FormatSettings }).(BinaryReadSettingsResponsePtrOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o BinarySourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v BinarySourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o BinarySourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v BinarySourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o BinarySourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v BinarySourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Binary store settings.
func (o BinarySourceResponseOutput) StoreSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v BinarySourceResponse) interface{} { return v.StoreSettings }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'BinarySource'.
func (o BinarySourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BinarySourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Trigger that runs every time a Blob event occurs.
type BlobEventsTrigger struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// The blob path must begin with the pattern provided for trigger to fire. For example, '/records/blobs/december/' will only fire the trigger for blobs in the december folder under the records container. At least one of these must be provided: blobPathBeginsWith, blobPathEndsWith.
	BlobPathBeginsWith *string `pulumi:"blobPathBeginsWith"`
	// The blob path must end with the pattern provided for trigger to fire. For example, 'december/boxes.csv' will only fire the trigger for blobs named boxes in a december folder. At least one of these must be provided: blobPathBeginsWith, blobPathEndsWith.
	BlobPathEndsWith *string `pulumi:"blobPathEndsWith"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// The type of events that cause this trigger to fire.
	Events []string `pulumi:"events"`
	// If set to true, blobs with zero bytes will be ignored.
	IgnoreEmptyBlobs *bool `pulumi:"ignoreEmptyBlobs"`
	// Pipelines that need to be started.
	Pipelines []TriggerPipelineReference `pulumi:"pipelines"`
	// The ARM resource ID of the Storage Account.
	Scope string `pulumi:"scope"`
	// Trigger type.
	// Expected value is 'BlobEventsTrigger'.
	Type string `pulumi:"type"`
}

// BlobEventsTriggerInput is an input type that accepts BlobEventsTriggerArgs and BlobEventsTriggerOutput values.
// You can construct a concrete instance of `BlobEventsTriggerInput` via:
//
//	BlobEventsTriggerArgs{...}
type BlobEventsTriggerInput interface {
	pulumi.Input

	ToBlobEventsTriggerOutput() BlobEventsTriggerOutput
	ToBlobEventsTriggerOutputWithContext(context.Context) BlobEventsTriggerOutput
}

// Trigger that runs every time a Blob event occurs.
type BlobEventsTriggerArgs struct {
	// List of tags that can be used for describing the trigger.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The blob path must begin with the pattern provided for trigger to fire. For example, '/records/blobs/december/' will only fire the trigger for blobs in the december folder under the records container. At least one of these must be provided: blobPathBeginsWith, blobPathEndsWith.
	BlobPathBeginsWith pulumi.StringPtrInput `pulumi:"blobPathBeginsWith"`
	// The blob path must end with the pattern provided for trigger to fire. For example, 'december/boxes.csv' will only fire the trigger for blobs named boxes in a december folder. At least one of these must be provided: blobPathBeginsWith, blobPathEndsWith.
	BlobPathEndsWith pulumi.StringPtrInput `pulumi:"blobPathEndsWith"`
	// Trigger description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The type of events that cause this trigger to fire.
	Events pulumi.StringArrayInput `pulumi:"events"`
	// If set to true, blobs with zero bytes will be ignored.
	IgnoreEmptyBlobs pulumi.BoolPtrInput `pulumi:"ignoreEmptyBlobs"`
	// Pipelines that need to be started.
	Pipelines TriggerPipelineReferenceArrayInput `pulumi:"pipelines"`
	// The ARM resource ID of the Storage Account.
	Scope pulumi.StringInput `pulumi:"scope"`
	// Trigger type.
	// Expected value is 'BlobEventsTrigger'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (BlobEventsTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobEventsTrigger)(nil)).Elem()
}

func (i BlobEventsTriggerArgs) ToBlobEventsTriggerOutput() BlobEventsTriggerOutput {
	return i.ToBlobEventsTriggerOutputWithContext(context.Background())
}

func (i BlobEventsTriggerArgs) ToBlobEventsTriggerOutputWithContext(ctx context.Context) BlobEventsTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobEventsTriggerOutput)
}

// Trigger that runs every time a Blob event occurs.
type BlobEventsTriggerOutput struct{ *pulumi.OutputState }

func (BlobEventsTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobEventsTrigger)(nil)).Elem()
}

func (o BlobEventsTriggerOutput) ToBlobEventsTriggerOutput() BlobEventsTriggerOutput {
	return o
}

func (o BlobEventsTriggerOutput) ToBlobEventsTriggerOutputWithContext(ctx context.Context) BlobEventsTriggerOutput {
	return o
}

// List of tags that can be used for describing the trigger.
func (o BlobEventsTriggerOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v BlobEventsTrigger) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The blob path must begin with the pattern provided for trigger to fire. For example, '/records/blobs/december/' will only fire the trigger for blobs in the december folder under the records container. At least one of these must be provided: blobPathBeginsWith, blobPathEndsWith.
func (o BlobEventsTriggerOutput) BlobPathBeginsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobEventsTrigger) *string { return v.BlobPathBeginsWith }).(pulumi.StringPtrOutput)
}

// The blob path must end with the pattern provided for trigger to fire. For example, 'december/boxes.csv' will only fire the trigger for blobs named boxes in a december folder. At least one of these must be provided: blobPathBeginsWith, blobPathEndsWith.
func (o BlobEventsTriggerOutput) BlobPathEndsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobEventsTrigger) *string { return v.BlobPathEndsWith }).(pulumi.StringPtrOutput)
}

// Trigger description.
func (o BlobEventsTriggerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobEventsTrigger) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The type of events that cause this trigger to fire.
func (o BlobEventsTriggerOutput) Events() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BlobEventsTrigger) []string { return v.Events }).(pulumi.StringArrayOutput)
}

// If set to true, blobs with zero bytes will be ignored.
func (o BlobEventsTriggerOutput) IgnoreEmptyBlobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BlobEventsTrigger) *bool { return v.IgnoreEmptyBlobs }).(pulumi.BoolPtrOutput)
}

// Pipelines that need to be started.
func (o BlobEventsTriggerOutput) Pipelines() TriggerPipelineReferenceArrayOutput {
	return o.ApplyT(func(v BlobEventsTrigger) []TriggerPipelineReference { return v.Pipelines }).(TriggerPipelineReferenceArrayOutput)
}

// The ARM resource ID of the Storage Account.
func (o BlobEventsTriggerOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v BlobEventsTrigger) string { return v.Scope }).(pulumi.StringOutput)
}

// Trigger type.
// Expected value is 'BlobEventsTrigger'.
func (o BlobEventsTriggerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BlobEventsTrigger) string { return v.Type }).(pulumi.StringOutput)
}

// Trigger that runs every time a Blob event occurs.
type BlobEventsTriggerResponse struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// The blob path must begin with the pattern provided for trigger to fire. For example, '/records/blobs/december/' will only fire the trigger for blobs in the december folder under the records container. At least one of these must be provided: blobPathBeginsWith, blobPathEndsWith.
	BlobPathBeginsWith *string `pulumi:"blobPathBeginsWith"`
	// The blob path must end with the pattern provided for trigger to fire. For example, 'december/boxes.csv' will only fire the trigger for blobs named boxes in a december folder. At least one of these must be provided: blobPathBeginsWith, blobPathEndsWith.
	BlobPathEndsWith *string `pulumi:"blobPathEndsWith"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// The type of events that cause this trigger to fire.
	Events []string `pulumi:"events"`
	// If set to true, blobs with zero bytes will be ignored.
	IgnoreEmptyBlobs *bool `pulumi:"ignoreEmptyBlobs"`
	// Pipelines that need to be started.
	Pipelines []TriggerPipelineReferenceResponse `pulumi:"pipelines"`
	// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState string `pulumi:"runtimeState"`
	// The ARM resource ID of the Storage Account.
	Scope string `pulumi:"scope"`
	// Trigger type.
	// Expected value is 'BlobEventsTrigger'.
	Type string `pulumi:"type"`
}

// Trigger that runs every time a Blob event occurs.
type BlobEventsTriggerResponseOutput struct{ *pulumi.OutputState }

func (BlobEventsTriggerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobEventsTriggerResponse)(nil)).Elem()
}

func (o BlobEventsTriggerResponseOutput) ToBlobEventsTriggerResponseOutput() BlobEventsTriggerResponseOutput {
	return o
}

func (o BlobEventsTriggerResponseOutput) ToBlobEventsTriggerResponseOutputWithContext(ctx context.Context) BlobEventsTriggerResponseOutput {
	return o
}

// List of tags that can be used for describing the trigger.
func (o BlobEventsTriggerResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v BlobEventsTriggerResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The blob path must begin with the pattern provided for trigger to fire. For example, '/records/blobs/december/' will only fire the trigger for blobs in the december folder under the records container. At least one of these must be provided: blobPathBeginsWith, blobPathEndsWith.
func (o BlobEventsTriggerResponseOutput) BlobPathBeginsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobEventsTriggerResponse) *string { return v.BlobPathBeginsWith }).(pulumi.StringPtrOutput)
}

// The blob path must end with the pattern provided for trigger to fire. For example, 'december/boxes.csv' will only fire the trigger for blobs named boxes in a december folder. At least one of these must be provided: blobPathBeginsWith, blobPathEndsWith.
func (o BlobEventsTriggerResponseOutput) BlobPathEndsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobEventsTriggerResponse) *string { return v.BlobPathEndsWith }).(pulumi.StringPtrOutput)
}

// Trigger description.
func (o BlobEventsTriggerResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobEventsTriggerResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The type of events that cause this trigger to fire.
func (o BlobEventsTriggerResponseOutput) Events() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BlobEventsTriggerResponse) []string { return v.Events }).(pulumi.StringArrayOutput)
}

// If set to true, blobs with zero bytes will be ignored.
func (o BlobEventsTriggerResponseOutput) IgnoreEmptyBlobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BlobEventsTriggerResponse) *bool { return v.IgnoreEmptyBlobs }).(pulumi.BoolPtrOutput)
}

// Pipelines that need to be started.
func (o BlobEventsTriggerResponseOutput) Pipelines() TriggerPipelineReferenceResponseArrayOutput {
	return o.ApplyT(func(v BlobEventsTriggerResponse) []TriggerPipelineReferenceResponse { return v.Pipelines }).(TriggerPipelineReferenceResponseArrayOutput)
}

// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
func (o BlobEventsTriggerResponseOutput) RuntimeState() pulumi.StringOutput {
	return o.ApplyT(func(v BlobEventsTriggerResponse) string { return v.RuntimeState }).(pulumi.StringOutput)
}

// The ARM resource ID of the Storage Account.
func (o BlobEventsTriggerResponseOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v BlobEventsTriggerResponse) string { return v.Scope }).(pulumi.StringOutput)
}

// Trigger type.
// Expected value is 'BlobEventsTrigger'.
func (o BlobEventsTriggerResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BlobEventsTriggerResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Azure Blob sink.
type BlobSink struct {
	// Blob writer add header. Type: boolean (or Expression with resultType boolean).
	BlobWriterAddHeader interface{} `pulumi:"blobWriterAddHeader"`
	// Blob writer date time format. Type: string (or Expression with resultType string).
	BlobWriterDateTimeFormat interface{} `pulumi:"blobWriterDateTimeFormat"`
	// Blob writer overwrite files. Type: boolean (or Expression with resultType boolean).
	BlobWriterOverwriteFiles interface{} `pulumi:"blobWriterOverwriteFiles"`
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
	Metadata []MetadataItem `pulumi:"metadata"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'BlobSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// BlobSinkInput is an input type that accepts BlobSinkArgs and BlobSinkOutput values.
// You can construct a concrete instance of `BlobSinkInput` via:
//
//	BlobSinkArgs{...}
type BlobSinkInput interface {
	pulumi.Input

	ToBlobSinkOutput() BlobSinkOutput
	ToBlobSinkOutputWithContext(context.Context) BlobSinkOutput
}

// A copy activity Azure Blob sink.
type BlobSinkArgs struct {
	// Blob writer add header. Type: boolean (or Expression with resultType boolean).
	BlobWriterAddHeader pulumi.Input `pulumi:"blobWriterAddHeader"`
	// Blob writer date time format. Type: string (or Expression with resultType string).
	BlobWriterDateTimeFormat pulumi.Input `pulumi:"blobWriterDateTimeFormat"`
	// Blob writer overwrite files. Type: boolean (or Expression with resultType boolean).
	BlobWriterOverwriteFiles pulumi.Input `pulumi:"blobWriterOverwriteFiles"`
	// The type of copy behavior for copy sink.
	CopyBehavior pulumi.Input `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
	Metadata MetadataItemArrayInput `pulumi:"metadata"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount pulumi.Input `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait pulumi.Input `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'BlobSink'.
	Type pulumi.StringInput `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize pulumi.Input `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout pulumi.Input `pulumi:"writeBatchTimeout"`
}

func (BlobSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobSink)(nil)).Elem()
}

func (i BlobSinkArgs) ToBlobSinkOutput() BlobSinkOutput {
	return i.ToBlobSinkOutputWithContext(context.Background())
}

func (i BlobSinkArgs) ToBlobSinkOutputWithContext(ctx context.Context) BlobSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobSinkOutput)
}

// A copy activity Azure Blob sink.
type BlobSinkOutput struct{ *pulumi.OutputState }

func (BlobSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobSink)(nil)).Elem()
}

func (o BlobSinkOutput) ToBlobSinkOutput() BlobSinkOutput {
	return o
}

func (o BlobSinkOutput) ToBlobSinkOutputWithContext(ctx context.Context) BlobSinkOutput {
	return o
}

// Blob writer add header. Type: boolean (or Expression with resultType boolean).
func (o BlobSinkOutput) BlobWriterAddHeader() pulumi.AnyOutput {
	return o.ApplyT(func(v BlobSink) interface{} { return v.BlobWriterAddHeader }).(pulumi.AnyOutput)
}

// Blob writer date time format. Type: string (or Expression with resultType string).
func (o BlobSinkOutput) BlobWriterDateTimeFormat() pulumi.AnyOutput {
	return o.ApplyT(func(v BlobSink) interface{} { return v.BlobWriterDateTimeFormat }).(pulumi.AnyOutput)
}

// Blob writer overwrite files. Type: boolean (or Expression with resultType boolean).
func (o BlobSinkOutput) BlobWriterOverwriteFiles() pulumi.AnyOutput {
	return o.ApplyT(func(v BlobSink) interface{} { return v.BlobWriterOverwriteFiles }).(pulumi.AnyOutput)
}

// The type of copy behavior for copy sink.
func (o BlobSinkOutput) CopyBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v BlobSink) interface{} { return v.CopyBehavior }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o BlobSinkOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v BlobSink) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o BlobSinkOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v BlobSink) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
func (o BlobSinkOutput) Metadata() MetadataItemArrayOutput {
	return o.ApplyT(func(v BlobSink) []MetadataItem { return v.Metadata }).(MetadataItemArrayOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o BlobSinkOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v BlobSink) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o BlobSinkOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v BlobSink) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'BlobSink'.
func (o BlobSinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BlobSink) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o BlobSinkOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v BlobSink) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o BlobSinkOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v BlobSink) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity Azure Blob sink.
type BlobSinkResponse struct {
	// Blob writer add header. Type: boolean (or Expression with resultType boolean).
	BlobWriterAddHeader interface{} `pulumi:"blobWriterAddHeader"`
	// Blob writer date time format. Type: string (or Expression with resultType string).
	BlobWriterDateTimeFormat interface{} `pulumi:"blobWriterDateTimeFormat"`
	// Blob writer overwrite files. Type: boolean (or Expression with resultType boolean).
	BlobWriterOverwriteFiles interface{} `pulumi:"blobWriterOverwriteFiles"`
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
	Metadata []MetadataItemResponse `pulumi:"metadata"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'BlobSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity Azure Blob sink.
type BlobSinkResponseOutput struct{ *pulumi.OutputState }

func (BlobSinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobSinkResponse)(nil)).Elem()
}

func (o BlobSinkResponseOutput) ToBlobSinkResponseOutput() BlobSinkResponseOutput {
	return o
}

func (o BlobSinkResponseOutput) ToBlobSinkResponseOutputWithContext(ctx context.Context) BlobSinkResponseOutput {
	return o
}

// Blob writer add header. Type: boolean (or Expression with resultType boolean).
func (o BlobSinkResponseOutput) BlobWriterAddHeader() pulumi.AnyOutput {
	return o.ApplyT(func(v BlobSinkResponse) interface{} { return v.BlobWriterAddHeader }).(pulumi.AnyOutput)
}

// Blob writer date time format. Type: string (or Expression with resultType string).
func (o BlobSinkResponseOutput) BlobWriterDateTimeFormat() pulumi.AnyOutput {
	return o.ApplyT(func(v BlobSinkResponse) interface{} { return v.BlobWriterDateTimeFormat }).(pulumi.AnyOutput)
}

// Blob writer overwrite files. Type: boolean (or Expression with resultType boolean).
func (o BlobSinkResponseOutput) BlobWriterOverwriteFiles() pulumi.AnyOutput {
	return o.ApplyT(func(v BlobSinkResponse) interface{} { return v.BlobWriterOverwriteFiles }).(pulumi.AnyOutput)
}

// The type of copy behavior for copy sink.
func (o BlobSinkResponseOutput) CopyBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v BlobSinkResponse) interface{} { return v.CopyBehavior }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o BlobSinkResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v BlobSinkResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o BlobSinkResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v BlobSinkResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
func (o BlobSinkResponseOutput) Metadata() MetadataItemResponseArrayOutput {
	return o.ApplyT(func(v BlobSinkResponse) []MetadataItemResponse { return v.Metadata }).(MetadataItemResponseArrayOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o BlobSinkResponseOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v BlobSinkResponse) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o BlobSinkResponseOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v BlobSinkResponse) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'BlobSink'.
func (o BlobSinkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BlobSinkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o BlobSinkResponseOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v BlobSinkResponse) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o BlobSinkResponseOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v BlobSinkResponse) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity Azure Blob source.
type BlobSource struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// Number of header lines to skip from each blob. Type: integer (or Expression with resultType integer).
	SkipHeaderLineCount interface{} `pulumi:"skipHeaderLineCount"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Treat empty as null. Type: boolean (or Expression with resultType boolean).
	TreatEmptyAsNull interface{} `pulumi:"treatEmptyAsNull"`
	// Copy source type.
	// Expected value is 'BlobSource'.
	Type string `pulumi:"type"`
}

// BlobSourceInput is an input type that accepts BlobSourceArgs and BlobSourceOutput values.
// You can construct a concrete instance of `BlobSourceInput` via:
//
//	BlobSourceArgs{...}
type BlobSourceInput interface {
	pulumi.Input

	ToBlobSourceOutput() BlobSourceOutput
	ToBlobSourceOutputWithContext(context.Context) BlobSourceOutput
}

// A copy activity Azure Blob source.
type BlobSourceArgs struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive pulumi.Input `pulumi:"recursive"`
	// Number of header lines to skip from each blob. Type: integer (or Expression with resultType integer).
	SkipHeaderLineCount pulumi.Input `pulumi:"skipHeaderLineCount"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Treat empty as null. Type: boolean (or Expression with resultType boolean).
	TreatEmptyAsNull pulumi.Input `pulumi:"treatEmptyAsNull"`
	// Copy source type.
	// Expected value is 'BlobSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (BlobSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobSource)(nil)).Elem()
}

func (i BlobSourceArgs) ToBlobSourceOutput() BlobSourceOutput {
	return i.ToBlobSourceOutputWithContext(context.Background())
}

func (i BlobSourceArgs) ToBlobSourceOutputWithContext(ctx context.Context) BlobSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobSourceOutput)
}

// A copy activity Azure Blob source.
type BlobSourceOutput struct{ *pulumi.OutputState }

func (BlobSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobSource)(nil)).Elem()
}

func (o BlobSourceOutput) ToBlobSourceOutput() BlobSourceOutput {
	return o
}

func (o BlobSourceOutput) ToBlobSourceOutputWithContext(ctx context.Context) BlobSourceOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o BlobSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v BlobSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o BlobSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v BlobSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o BlobSourceOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v BlobSource) interface{} { return v.Recursive }).(pulumi.AnyOutput)
}

// Number of header lines to skip from each blob. Type: integer (or Expression with resultType integer).
func (o BlobSourceOutput) SkipHeaderLineCount() pulumi.AnyOutput {
	return o.ApplyT(func(v BlobSource) interface{} { return v.SkipHeaderLineCount }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o BlobSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v BlobSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o BlobSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v BlobSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Treat empty as null. Type: boolean (or Expression with resultType boolean).
func (o BlobSourceOutput) TreatEmptyAsNull() pulumi.AnyOutput {
	return o.ApplyT(func(v BlobSource) interface{} { return v.TreatEmptyAsNull }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'BlobSource'.
func (o BlobSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BlobSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Azure Blob source.
type BlobSourceResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// Number of header lines to skip from each blob. Type: integer (or Expression with resultType integer).
	SkipHeaderLineCount interface{} `pulumi:"skipHeaderLineCount"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Treat empty as null. Type: boolean (or Expression with resultType boolean).
	TreatEmptyAsNull interface{} `pulumi:"treatEmptyAsNull"`
	// Copy source type.
	// Expected value is 'BlobSource'.
	Type string `pulumi:"type"`
}

// A copy activity Azure Blob source.
type BlobSourceResponseOutput struct{ *pulumi.OutputState }

func (BlobSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobSourceResponse)(nil)).Elem()
}

func (o BlobSourceResponseOutput) ToBlobSourceResponseOutput() BlobSourceResponseOutput {
	return o
}

func (o BlobSourceResponseOutput) ToBlobSourceResponseOutputWithContext(ctx context.Context) BlobSourceResponseOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o BlobSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v BlobSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o BlobSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v BlobSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o BlobSourceResponseOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v BlobSourceResponse) interface{} { return v.Recursive }).(pulumi.AnyOutput)
}

// Number of header lines to skip from each blob. Type: integer (or Expression with resultType integer).
func (o BlobSourceResponseOutput) SkipHeaderLineCount() pulumi.AnyOutput {
	return o.ApplyT(func(v BlobSourceResponse) interface{} { return v.SkipHeaderLineCount }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o BlobSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v BlobSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o BlobSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v BlobSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Treat empty as null. Type: boolean (or Expression with resultType boolean).
func (o BlobSourceResponseOutput) TreatEmptyAsNull() pulumi.AnyOutput {
	return o.ApplyT(func(v BlobSourceResponse) interface{} { return v.TreatEmptyAsNull }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'BlobSource'.
func (o BlobSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BlobSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Trigger that runs every time the selected Blob container changes.
type BlobTrigger struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// The path of the container/folder that will trigger the pipeline.
	FolderPath string `pulumi:"folderPath"`
	// The Azure Storage linked service reference.
	LinkedService LinkedServiceReference `pulumi:"linkedService"`
	// The max number of parallel files to handle when it is triggered.
	MaxConcurrency int `pulumi:"maxConcurrency"`
	// Pipelines that need to be started.
	Pipelines []TriggerPipelineReference `pulumi:"pipelines"`
	// Trigger type.
	// Expected value is 'BlobTrigger'.
	Type string `pulumi:"type"`
}

// BlobTriggerInput is an input type that accepts BlobTriggerArgs and BlobTriggerOutput values.
// You can construct a concrete instance of `BlobTriggerInput` via:
//
//	BlobTriggerArgs{...}
type BlobTriggerInput interface {
	pulumi.Input

	ToBlobTriggerOutput() BlobTriggerOutput
	ToBlobTriggerOutputWithContext(context.Context) BlobTriggerOutput
}

// Trigger that runs every time the selected Blob container changes.
type BlobTriggerArgs struct {
	// List of tags that can be used for describing the trigger.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Trigger description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The path of the container/folder that will trigger the pipeline.
	FolderPath pulumi.StringInput `pulumi:"folderPath"`
	// The Azure Storage linked service reference.
	LinkedService LinkedServiceReferenceInput `pulumi:"linkedService"`
	// The max number of parallel files to handle when it is triggered.
	MaxConcurrency pulumi.IntInput `pulumi:"maxConcurrency"`
	// Pipelines that need to be started.
	Pipelines TriggerPipelineReferenceArrayInput `pulumi:"pipelines"`
	// Trigger type.
	// Expected value is 'BlobTrigger'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (BlobTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobTrigger)(nil)).Elem()
}

func (i BlobTriggerArgs) ToBlobTriggerOutput() BlobTriggerOutput {
	return i.ToBlobTriggerOutputWithContext(context.Background())
}

func (i BlobTriggerArgs) ToBlobTriggerOutputWithContext(ctx context.Context) BlobTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobTriggerOutput)
}

// Trigger that runs every time the selected Blob container changes.
type BlobTriggerOutput struct{ *pulumi.OutputState }

func (BlobTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobTrigger)(nil)).Elem()
}

func (o BlobTriggerOutput) ToBlobTriggerOutput() BlobTriggerOutput {
	return o
}

func (o BlobTriggerOutput) ToBlobTriggerOutputWithContext(ctx context.Context) BlobTriggerOutput {
	return o
}

// List of tags that can be used for describing the trigger.
func (o BlobTriggerOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v BlobTrigger) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Trigger description.
func (o BlobTriggerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobTrigger) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The path of the container/folder that will trigger the pipeline.
func (o BlobTriggerOutput) FolderPath() pulumi.StringOutput {
	return o.ApplyT(func(v BlobTrigger) string { return v.FolderPath }).(pulumi.StringOutput)
}

// The Azure Storage linked service reference.
func (o BlobTriggerOutput) LinkedService() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v BlobTrigger) LinkedServiceReference { return v.LinkedService }).(LinkedServiceReferenceOutput)
}

// The max number of parallel files to handle when it is triggered.
func (o BlobTriggerOutput) MaxConcurrency() pulumi.IntOutput {
	return o.ApplyT(func(v BlobTrigger) int { return v.MaxConcurrency }).(pulumi.IntOutput)
}

// Pipelines that need to be started.
func (o BlobTriggerOutput) Pipelines() TriggerPipelineReferenceArrayOutput {
	return o.ApplyT(func(v BlobTrigger) []TriggerPipelineReference { return v.Pipelines }).(TriggerPipelineReferenceArrayOutput)
}

// Trigger type.
// Expected value is 'BlobTrigger'.
func (o BlobTriggerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BlobTrigger) string { return v.Type }).(pulumi.StringOutput)
}

// Trigger that runs every time the selected Blob container changes.
type BlobTriggerResponse struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// The path of the container/folder that will trigger the pipeline.
	FolderPath string `pulumi:"folderPath"`
	// The Azure Storage linked service reference.
	LinkedService LinkedServiceReferenceResponse `pulumi:"linkedService"`
	// The max number of parallel files to handle when it is triggered.
	MaxConcurrency int `pulumi:"maxConcurrency"`
	// Pipelines that need to be started.
	Pipelines []TriggerPipelineReferenceResponse `pulumi:"pipelines"`
	// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState string `pulumi:"runtimeState"`
	// Trigger type.
	// Expected value is 'BlobTrigger'.
	Type string `pulumi:"type"`
}

// Trigger that runs every time the selected Blob container changes.
type BlobTriggerResponseOutput struct{ *pulumi.OutputState }

func (BlobTriggerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobTriggerResponse)(nil)).Elem()
}

func (o BlobTriggerResponseOutput) ToBlobTriggerResponseOutput() BlobTriggerResponseOutput {
	return o
}

func (o BlobTriggerResponseOutput) ToBlobTriggerResponseOutputWithContext(ctx context.Context) BlobTriggerResponseOutput {
	return o
}

// List of tags that can be used for describing the trigger.
func (o BlobTriggerResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v BlobTriggerResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Trigger description.
func (o BlobTriggerResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobTriggerResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The path of the container/folder that will trigger the pipeline.
func (o BlobTriggerResponseOutput) FolderPath() pulumi.StringOutput {
	return o.ApplyT(func(v BlobTriggerResponse) string { return v.FolderPath }).(pulumi.StringOutput)
}

// The Azure Storage linked service reference.
func (o BlobTriggerResponseOutput) LinkedService() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v BlobTriggerResponse) LinkedServiceReferenceResponse { return v.LinkedService }).(LinkedServiceReferenceResponseOutput)
}

// The max number of parallel files to handle when it is triggered.
func (o BlobTriggerResponseOutput) MaxConcurrency() pulumi.IntOutput {
	return o.ApplyT(func(v BlobTriggerResponse) int { return v.MaxConcurrency }).(pulumi.IntOutput)
}

// Pipelines that need to be started.
func (o BlobTriggerResponseOutput) Pipelines() TriggerPipelineReferenceResponseArrayOutput {
	return o.ApplyT(func(v BlobTriggerResponse) []TriggerPipelineReferenceResponse { return v.Pipelines }).(TriggerPipelineReferenceResponseArrayOutput)
}

// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
func (o BlobTriggerResponseOutput) RuntimeState() pulumi.StringOutput {
	return o.ApplyT(func(v BlobTriggerResponse) string { return v.RuntimeState }).(pulumi.StringOutput)
}

// Trigger type.
// Expected value is 'BlobTrigger'.
func (o BlobTriggerResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BlobTriggerResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Managed Identity used for CMK.
type CMKIdentityDefinition struct {
	// The resource id of the user assigned identity to authenticate to customer's key vault.
	UserAssignedIdentity *string `pulumi:"userAssignedIdentity"`
}

// CMKIdentityDefinitionInput is an input type that accepts CMKIdentityDefinitionArgs and CMKIdentityDefinitionOutput values.
// You can construct a concrete instance of `CMKIdentityDefinitionInput` via:
//
//	CMKIdentityDefinitionArgs{...}
type CMKIdentityDefinitionInput interface {
	pulumi.Input

	ToCMKIdentityDefinitionOutput() CMKIdentityDefinitionOutput
	ToCMKIdentityDefinitionOutputWithContext(context.Context) CMKIdentityDefinitionOutput
}

// Managed Identity used for CMK.
type CMKIdentityDefinitionArgs struct {
	// The resource id of the user assigned identity to authenticate to customer's key vault.
	UserAssignedIdentity pulumi.StringPtrInput `pulumi:"userAssignedIdentity"`
}

func (CMKIdentityDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CMKIdentityDefinition)(nil)).Elem()
}

func (i CMKIdentityDefinitionArgs) ToCMKIdentityDefinitionOutput() CMKIdentityDefinitionOutput {
	return i.ToCMKIdentityDefinitionOutputWithContext(context.Background())
}

func (i CMKIdentityDefinitionArgs) ToCMKIdentityDefinitionOutputWithContext(ctx context.Context) CMKIdentityDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CMKIdentityDefinitionOutput)
}

func (i CMKIdentityDefinitionArgs) ToCMKIdentityDefinitionPtrOutput() CMKIdentityDefinitionPtrOutput {
	return i.ToCMKIdentityDefinitionPtrOutputWithContext(context.Background())
}

func (i CMKIdentityDefinitionArgs) ToCMKIdentityDefinitionPtrOutputWithContext(ctx context.Context) CMKIdentityDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CMKIdentityDefinitionOutput).ToCMKIdentityDefinitionPtrOutputWithContext(ctx)
}

// CMKIdentityDefinitionPtrInput is an input type that accepts CMKIdentityDefinitionArgs, CMKIdentityDefinitionPtr and CMKIdentityDefinitionPtrOutput values.
// You can construct a concrete instance of `CMKIdentityDefinitionPtrInput` via:
//
//	        CMKIdentityDefinitionArgs{...}
//
//	or:
//
//	        nil
type CMKIdentityDefinitionPtrInput interface {
	pulumi.Input

	ToCMKIdentityDefinitionPtrOutput() CMKIdentityDefinitionPtrOutput
	ToCMKIdentityDefinitionPtrOutputWithContext(context.Context) CMKIdentityDefinitionPtrOutput
}

type cmkidentityDefinitionPtrType CMKIdentityDefinitionArgs

func CMKIdentityDefinitionPtr(v *CMKIdentityDefinitionArgs) CMKIdentityDefinitionPtrInput {
	return (*cmkidentityDefinitionPtrType)(v)
}

func (*cmkidentityDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CMKIdentityDefinition)(nil)).Elem()
}

func (i *cmkidentityDefinitionPtrType) ToCMKIdentityDefinitionPtrOutput() CMKIdentityDefinitionPtrOutput {
	return i.ToCMKIdentityDefinitionPtrOutputWithContext(context.Background())
}

func (i *cmkidentityDefinitionPtrType) ToCMKIdentityDefinitionPtrOutputWithContext(ctx context.Context) CMKIdentityDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CMKIdentityDefinitionPtrOutput)
}

// Managed Identity used for CMK.
type CMKIdentityDefinitionOutput struct{ *pulumi.OutputState }

func (CMKIdentityDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CMKIdentityDefinition)(nil)).Elem()
}

func (o CMKIdentityDefinitionOutput) ToCMKIdentityDefinitionOutput() CMKIdentityDefinitionOutput {
	return o
}

func (o CMKIdentityDefinitionOutput) ToCMKIdentityDefinitionOutputWithContext(ctx context.Context) CMKIdentityDefinitionOutput {
	return o
}

func (o CMKIdentityDefinitionOutput) ToCMKIdentityDefinitionPtrOutput() CMKIdentityDefinitionPtrOutput {
	return o.ToCMKIdentityDefinitionPtrOutputWithContext(context.Background())
}

func (o CMKIdentityDefinitionOutput) ToCMKIdentityDefinitionPtrOutputWithContext(ctx context.Context) CMKIdentityDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CMKIdentityDefinition) *CMKIdentityDefinition {
		return &v
	}).(CMKIdentityDefinitionPtrOutput)
}

// The resource id of the user assigned identity to authenticate to customer's key vault.
func (o CMKIdentityDefinitionOutput) UserAssignedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CMKIdentityDefinition) *string { return v.UserAssignedIdentity }).(pulumi.StringPtrOutput)
}

type CMKIdentityDefinitionPtrOutput struct{ *pulumi.OutputState }

func (CMKIdentityDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CMKIdentityDefinition)(nil)).Elem()
}

func (o CMKIdentityDefinitionPtrOutput) ToCMKIdentityDefinitionPtrOutput() CMKIdentityDefinitionPtrOutput {
	return o
}

func (o CMKIdentityDefinitionPtrOutput) ToCMKIdentityDefinitionPtrOutputWithContext(ctx context.Context) CMKIdentityDefinitionPtrOutput {
	return o
}

func (o CMKIdentityDefinitionPtrOutput) Elem() CMKIdentityDefinitionOutput {
	return o.ApplyT(func(v *CMKIdentityDefinition) CMKIdentityDefinition {
		if v != nil {
			return *v
		}
		var ret CMKIdentityDefinition
		return ret
	}).(CMKIdentityDefinitionOutput)
}

// The resource id of the user assigned identity to authenticate to customer's key vault.
func (o CMKIdentityDefinitionPtrOutput) UserAssignedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CMKIdentityDefinition) *string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentity
	}).(pulumi.StringPtrOutput)
}

// Managed Identity used for CMK.
type CMKIdentityDefinitionResponse struct {
	// The resource id of the user assigned identity to authenticate to customer's key vault.
	UserAssignedIdentity *string `pulumi:"userAssignedIdentity"`
}

// Managed Identity used for CMK.
type CMKIdentityDefinitionResponseOutput struct{ *pulumi.OutputState }

func (CMKIdentityDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CMKIdentityDefinitionResponse)(nil)).Elem()
}

func (o CMKIdentityDefinitionResponseOutput) ToCMKIdentityDefinitionResponseOutput() CMKIdentityDefinitionResponseOutput {
	return o
}

func (o CMKIdentityDefinitionResponseOutput) ToCMKIdentityDefinitionResponseOutputWithContext(ctx context.Context) CMKIdentityDefinitionResponseOutput {
	return o
}

// The resource id of the user assigned identity to authenticate to customer's key vault.
func (o CMKIdentityDefinitionResponseOutput) UserAssignedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CMKIdentityDefinitionResponse) *string { return v.UserAssignedIdentity }).(pulumi.StringPtrOutput)
}

type CMKIdentityDefinitionResponsePtrOutput struct{ *pulumi.OutputState }

func (CMKIdentityDefinitionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CMKIdentityDefinitionResponse)(nil)).Elem()
}

func (o CMKIdentityDefinitionResponsePtrOutput) ToCMKIdentityDefinitionResponsePtrOutput() CMKIdentityDefinitionResponsePtrOutput {
	return o
}

func (o CMKIdentityDefinitionResponsePtrOutput) ToCMKIdentityDefinitionResponsePtrOutputWithContext(ctx context.Context) CMKIdentityDefinitionResponsePtrOutput {
	return o
}

func (o CMKIdentityDefinitionResponsePtrOutput) Elem() CMKIdentityDefinitionResponseOutput {
	return o.ApplyT(func(v *CMKIdentityDefinitionResponse) CMKIdentityDefinitionResponse {
		if v != nil {
			return *v
		}
		var ret CMKIdentityDefinitionResponse
		return ret
	}).(CMKIdentityDefinitionResponseOutput)
}

// The resource id of the user assigned identity to authenticate to customer's key vault.
func (o CMKIdentityDefinitionResponsePtrOutput) UserAssignedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CMKIdentityDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentity
	}).(pulumi.StringPtrOutput)
}

// Linked service for Cassandra data source.
type CassandraLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// AuthenticationType to be used for connection. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Host name for connection. Type: string (or Expression with resultType string).
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// The port for the connection. Type: integer (or Expression with resultType integer).
	Port interface{} `pulumi:"port"`
	// Type of linked service.
	// Expected value is 'Cassandra'.
	Type string `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// CassandraLinkedServiceInput is an input type that accepts CassandraLinkedServiceArgs and CassandraLinkedServiceOutput values.
// You can construct a concrete instance of `CassandraLinkedServiceInput` via:
//
//	CassandraLinkedServiceArgs{...}
type CassandraLinkedServiceInput interface {
	pulumi.Input

	ToCassandraLinkedServiceOutput() CassandraLinkedServiceOutput
	ToCassandraLinkedServiceOutputWithContext(context.Context) CassandraLinkedServiceOutput
}

// Linked service for Cassandra data source.
type CassandraLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// AuthenticationType to be used for connection. Type: string (or Expression with resultType string).
	AuthenticationType pulumi.Input `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Host name for connection. Type: string (or Expression with resultType string).
	Host pulumi.Input `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password for authentication.
	Password pulumi.Input `pulumi:"password"`
	// The port for the connection. Type: integer (or Expression with resultType integer).
	Port pulumi.Input `pulumi:"port"`
	// Type of linked service.
	// Expected value is 'Cassandra'.
	Type pulumi.StringInput `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username pulumi.Input `pulumi:"username"`
}

func (CassandraLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraLinkedService)(nil)).Elem()
}

func (i CassandraLinkedServiceArgs) ToCassandraLinkedServiceOutput() CassandraLinkedServiceOutput {
	return i.ToCassandraLinkedServiceOutputWithContext(context.Background())
}

func (i CassandraLinkedServiceArgs) ToCassandraLinkedServiceOutputWithContext(ctx context.Context) CassandraLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraLinkedServiceOutput)
}

// Linked service for Cassandra data source.
type CassandraLinkedServiceOutput struct{ *pulumi.OutputState }

func (CassandraLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraLinkedService)(nil)).Elem()
}

func (o CassandraLinkedServiceOutput) ToCassandraLinkedServiceOutput() CassandraLinkedServiceOutput {
	return o
}

func (o CassandraLinkedServiceOutput) ToCassandraLinkedServiceOutputWithContext(ctx context.Context) CassandraLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o CassandraLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CassandraLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// AuthenticationType to be used for connection. Type: string (or Expression with resultType string).
func (o CassandraLinkedServiceOutput) AuthenticationType() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraLinkedService) interface{} { return v.AuthenticationType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o CassandraLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v CassandraLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o CassandraLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CassandraLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o CassandraLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CassandraLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Host name for connection. Type: string (or Expression with resultType string).
func (o CassandraLinkedServiceOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraLinkedService) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o CassandraLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v CassandraLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Password for authentication.
func (o CassandraLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The port for the connection. Type: integer (or Expression with resultType integer).
func (o CassandraLinkedServiceOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraLinkedService) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Cassandra'.
func (o CassandraLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CassandraLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Username for authentication. Type: string (or Expression with resultType string).
func (o CassandraLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Linked service for Cassandra data source.
type CassandraLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// AuthenticationType to be used for connection. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Host name for connection. Type: string (or Expression with resultType string).
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// The port for the connection. Type: integer (or Expression with resultType integer).
	Port interface{} `pulumi:"port"`
	// Type of linked service.
	// Expected value is 'Cassandra'.
	Type string `pulumi:"type"`
	// Username for authentication. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// Linked service for Cassandra data source.
type CassandraLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (CassandraLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraLinkedServiceResponse)(nil)).Elem()
}

func (o CassandraLinkedServiceResponseOutput) ToCassandraLinkedServiceResponseOutput() CassandraLinkedServiceResponseOutput {
	return o
}

func (o CassandraLinkedServiceResponseOutput) ToCassandraLinkedServiceResponseOutputWithContext(ctx context.Context) CassandraLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o CassandraLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CassandraLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// AuthenticationType to be used for connection. Type: string (or Expression with resultType string).
func (o CassandraLinkedServiceResponseOutput) AuthenticationType() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraLinkedServiceResponse) interface{} { return v.AuthenticationType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o CassandraLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v CassandraLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o CassandraLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CassandraLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o CassandraLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CassandraLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Host name for connection. Type: string (or Expression with resultType string).
func (o CassandraLinkedServiceResponseOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraLinkedServiceResponse) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o CassandraLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v CassandraLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password for authentication.
func (o CassandraLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The port for the connection. Type: integer (or Expression with resultType integer).
func (o CassandraLinkedServiceResponseOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraLinkedServiceResponse) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Cassandra'.
func (o CassandraLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CassandraLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Username for authentication. Type: string (or Expression with resultType string).
func (o CassandraLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// A copy activity source for a Cassandra database.
type CassandraSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// The consistency level specifies how many Cassandra servers must respond to a read request before returning data to the client application. Cassandra checks the specified number of Cassandra servers for data to satisfy the read request. Must be one of cassandraSourceReadConsistencyLevels. The default value is 'ONE'. It is case-insensitive.
	ConsistencyLevel *string `pulumi:"consistencyLevel"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Should be a SQL-92 query expression or Cassandra Query Language (CQL) command. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'CassandraSource'.
	Type string `pulumi:"type"`
}

// CassandraSourceInput is an input type that accepts CassandraSourceArgs and CassandraSourceOutput values.
// You can construct a concrete instance of `CassandraSourceInput` via:
//
//	CassandraSourceArgs{...}
type CassandraSourceInput interface {
	pulumi.Input

	ToCassandraSourceOutput() CassandraSourceOutput
	ToCassandraSourceOutputWithContext(context.Context) CassandraSourceOutput
}

// A copy activity source for a Cassandra database.
type CassandraSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// The consistency level specifies how many Cassandra servers must respond to a read request before returning data to the client application. Cassandra checks the specified number of Cassandra servers for data to satisfy the read request. Must be one of cassandraSourceReadConsistencyLevels. The default value is 'ONE'. It is case-insensitive.
	ConsistencyLevel pulumi.StringPtrInput `pulumi:"consistencyLevel"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Database query. Should be a SQL-92 query expression or Cassandra Query Language (CQL) command. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'CassandraSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CassandraSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraSource)(nil)).Elem()
}

func (i CassandraSourceArgs) ToCassandraSourceOutput() CassandraSourceOutput {
	return i.ToCassandraSourceOutputWithContext(context.Background())
}

func (i CassandraSourceArgs) ToCassandraSourceOutputWithContext(ctx context.Context) CassandraSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraSourceOutput)
}

// A copy activity source for a Cassandra database.
type CassandraSourceOutput struct{ *pulumi.OutputState }

func (CassandraSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraSource)(nil)).Elem()
}

func (o CassandraSourceOutput) ToCassandraSourceOutput() CassandraSourceOutput {
	return o
}

func (o CassandraSourceOutput) ToCassandraSourceOutputWithContext(ctx context.Context) CassandraSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o CassandraSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// The consistency level specifies how many Cassandra servers must respond to a read request before returning data to the client application. Cassandra checks the specified number of Cassandra servers for data to satisfy the read request. Must be one of cassandraSourceReadConsistencyLevels. The default value is 'ONE'. It is case-insensitive.
func (o CassandraSourceOutput) ConsistencyLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CassandraSource) *string { return v.ConsistencyLevel }).(pulumi.StringPtrOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o CassandraSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o CassandraSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Database query. Should be a SQL-92 query expression or Cassandra Query Language (CQL) command. Type: string (or Expression with resultType string).
func (o CassandraSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o CassandraSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o CassandraSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o CassandraSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'CassandraSource'.
func (o CassandraSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CassandraSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity source for a Cassandra database.
type CassandraSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// The consistency level specifies how many Cassandra servers must respond to a read request before returning data to the client application. Cassandra checks the specified number of Cassandra servers for data to satisfy the read request. Must be one of cassandraSourceReadConsistencyLevels. The default value is 'ONE'. It is case-insensitive.
	ConsistencyLevel *string `pulumi:"consistencyLevel"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Should be a SQL-92 query expression or Cassandra Query Language (CQL) command. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'CassandraSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for a Cassandra database.
type CassandraSourceResponseOutput struct{ *pulumi.OutputState }

func (CassandraSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraSourceResponse)(nil)).Elem()
}

func (o CassandraSourceResponseOutput) ToCassandraSourceResponseOutput() CassandraSourceResponseOutput {
	return o
}

func (o CassandraSourceResponseOutput) ToCassandraSourceResponseOutputWithContext(ctx context.Context) CassandraSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o CassandraSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// The consistency level specifies how many Cassandra servers must respond to a read request before returning data to the client application. Cassandra checks the specified number of Cassandra servers for data to satisfy the read request. Must be one of cassandraSourceReadConsistencyLevels. The default value is 'ONE'. It is case-insensitive.
func (o CassandraSourceResponseOutput) ConsistencyLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CassandraSourceResponse) *string { return v.ConsistencyLevel }).(pulumi.StringPtrOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o CassandraSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o CassandraSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Database query. Should be a SQL-92 query expression or Cassandra Query Language (CQL) command. Type: string (or Expression with resultType string).
func (o CassandraSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o CassandraSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o CassandraSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o CassandraSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'CassandraSource'.
func (o CassandraSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CassandraSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Cassandra database dataset.
type CassandraTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// The keyspace of the Cassandra database. Type: string (or Expression with resultType string).
	Keyspace interface{} `pulumi:"keyspace"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Cassandra database. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'CassandraTable'.
	Type string `pulumi:"type"`
}

// CassandraTableDatasetInput is an input type that accepts CassandraTableDatasetArgs and CassandraTableDatasetOutput values.
// You can construct a concrete instance of `CassandraTableDatasetInput` via:
//
//	CassandraTableDatasetArgs{...}
type CassandraTableDatasetInput interface {
	pulumi.Input

	ToCassandraTableDatasetOutput() CassandraTableDatasetOutput
	ToCassandraTableDatasetOutputWithContext(context.Context) CassandraTableDatasetOutput
}

// The Cassandra database dataset.
type CassandraTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// The keyspace of the Cassandra database. Type: string (or Expression with resultType string).
	Keyspace pulumi.Input `pulumi:"keyspace"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Cassandra database. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'CassandraTable'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CassandraTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraTableDataset)(nil)).Elem()
}

func (i CassandraTableDatasetArgs) ToCassandraTableDatasetOutput() CassandraTableDatasetOutput {
	return i.ToCassandraTableDatasetOutputWithContext(context.Background())
}

func (i CassandraTableDatasetArgs) ToCassandraTableDatasetOutputWithContext(ctx context.Context) CassandraTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CassandraTableDatasetOutput)
}

// The Cassandra database dataset.
type CassandraTableDatasetOutput struct{ *pulumi.OutputState }

func (CassandraTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraTableDataset)(nil)).Elem()
}

func (o CassandraTableDatasetOutput) ToCassandraTableDatasetOutput() CassandraTableDatasetOutput {
	return o
}

func (o CassandraTableDatasetOutput) ToCassandraTableDatasetOutputWithContext(ctx context.Context) CassandraTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o CassandraTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CassandraTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o CassandraTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CassandraTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o CassandraTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v CassandraTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// The keyspace of the Cassandra database. Type: string (or Expression with resultType string).
func (o CassandraTableDatasetOutput) Keyspace() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraTableDataset) interface{} { return v.Keyspace }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o CassandraTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v CassandraTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o CassandraTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v CassandraTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o CassandraTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o CassandraTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Cassandra database. Type: string (or Expression with resultType string).
func (o CassandraTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'CassandraTable'.
func (o CassandraTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CassandraTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Cassandra database dataset.
type CassandraTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// The keyspace of the Cassandra database. Type: string (or Expression with resultType string).
	Keyspace interface{} `pulumi:"keyspace"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Cassandra database. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'CassandraTable'.
	Type string `pulumi:"type"`
}

// The Cassandra database dataset.
type CassandraTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (CassandraTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CassandraTableDatasetResponse)(nil)).Elem()
}

func (o CassandraTableDatasetResponseOutput) ToCassandraTableDatasetResponseOutput() CassandraTableDatasetResponseOutput {
	return o
}

func (o CassandraTableDatasetResponseOutput) ToCassandraTableDatasetResponseOutputWithContext(ctx context.Context) CassandraTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o CassandraTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CassandraTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o CassandraTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CassandraTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o CassandraTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v CassandraTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// The keyspace of the Cassandra database. Type: string (or Expression with resultType string).
func (o CassandraTableDatasetResponseOutput) Keyspace() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraTableDatasetResponse) interface{} { return v.Keyspace }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o CassandraTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v CassandraTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o CassandraTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v CassandraTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o CassandraTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o CassandraTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Cassandra database. Type: string (or Expression with resultType string).
func (o CassandraTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v CassandraTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'CassandraTable'.
func (o CassandraTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CassandraTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Trigger that allows the referenced pipeline to depend on other pipeline runs based on runDimension Name/Value pairs. Upstream pipelines should declare the same runDimension Name and their runs should have the values for those runDimensions. The referenced pipeline run would be triggered if the values for the runDimension match for all upstream pipeline runs.
type ChainingTrigger struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Upstream Pipelines.
	DependsOn []PipelineReference `pulumi:"dependsOn"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// Pipeline for which runs are created when all upstream pipelines complete successfully.
	Pipeline TriggerPipelineReference `pulumi:"pipeline"`
	// Run Dimension property that needs to be emitted by upstream pipelines.
	RunDimension string `pulumi:"runDimension"`
	// Trigger type.
	// Expected value is 'ChainingTrigger'.
	Type string `pulumi:"type"`
}

// ChainingTriggerInput is an input type that accepts ChainingTriggerArgs and ChainingTriggerOutput values.
// You can construct a concrete instance of `ChainingTriggerInput` via:
//
//	ChainingTriggerArgs{...}
type ChainingTriggerInput interface {
	pulumi.Input

	ToChainingTriggerOutput() ChainingTriggerOutput
	ToChainingTriggerOutputWithContext(context.Context) ChainingTriggerOutput
}

// Trigger that allows the referenced pipeline to depend on other pipeline runs based on runDimension Name/Value pairs. Upstream pipelines should declare the same runDimension Name and their runs should have the values for those runDimensions. The referenced pipeline run would be triggered if the values for the runDimension match for all upstream pipeline runs.
type ChainingTriggerArgs struct {
	// List of tags that can be used for describing the trigger.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Upstream Pipelines.
	DependsOn PipelineReferenceArrayInput `pulumi:"dependsOn"`
	// Trigger description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Pipeline for which runs are created when all upstream pipelines complete successfully.
	Pipeline TriggerPipelineReferenceInput `pulumi:"pipeline"`
	// Run Dimension property that needs to be emitted by upstream pipelines.
	RunDimension pulumi.StringInput `pulumi:"runDimension"`
	// Trigger type.
	// Expected value is 'ChainingTrigger'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ChainingTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChainingTrigger)(nil)).Elem()
}

func (i ChainingTriggerArgs) ToChainingTriggerOutput() ChainingTriggerOutput {
	return i.ToChainingTriggerOutputWithContext(context.Background())
}

func (i ChainingTriggerArgs) ToChainingTriggerOutputWithContext(ctx context.Context) ChainingTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChainingTriggerOutput)
}

// Trigger that allows the referenced pipeline to depend on other pipeline runs based on runDimension Name/Value pairs. Upstream pipelines should declare the same runDimension Name and their runs should have the values for those runDimensions. The referenced pipeline run would be triggered if the values for the runDimension match for all upstream pipeline runs.
type ChainingTriggerOutput struct{ *pulumi.OutputState }

func (ChainingTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChainingTrigger)(nil)).Elem()
}

func (o ChainingTriggerOutput) ToChainingTriggerOutput() ChainingTriggerOutput {
	return o
}

func (o ChainingTriggerOutput) ToChainingTriggerOutputWithContext(ctx context.Context) ChainingTriggerOutput {
	return o
}

// List of tags that can be used for describing the trigger.
func (o ChainingTriggerOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ChainingTrigger) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Upstream Pipelines.
func (o ChainingTriggerOutput) DependsOn() PipelineReferenceArrayOutput {
	return o.ApplyT(func(v ChainingTrigger) []PipelineReference { return v.DependsOn }).(PipelineReferenceArrayOutput)
}

// Trigger description.
func (o ChainingTriggerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChainingTrigger) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Pipeline for which runs are created when all upstream pipelines complete successfully.
func (o ChainingTriggerOutput) Pipeline() TriggerPipelineReferenceOutput {
	return o.ApplyT(func(v ChainingTrigger) TriggerPipelineReference { return v.Pipeline }).(TriggerPipelineReferenceOutput)
}

// Run Dimension property that needs to be emitted by upstream pipelines.
func (o ChainingTriggerOutput) RunDimension() pulumi.StringOutput {
	return o.ApplyT(func(v ChainingTrigger) string { return v.RunDimension }).(pulumi.StringOutput)
}

// Trigger type.
// Expected value is 'ChainingTrigger'.
func (o ChainingTriggerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ChainingTrigger) string { return v.Type }).(pulumi.StringOutput)
}

// Trigger that allows the referenced pipeline to depend on other pipeline runs based on runDimension Name/Value pairs. Upstream pipelines should declare the same runDimension Name and their runs should have the values for those runDimensions. The referenced pipeline run would be triggered if the values for the runDimension match for all upstream pipeline runs.
type ChainingTriggerResponse struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Upstream Pipelines.
	DependsOn []PipelineReferenceResponse `pulumi:"dependsOn"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// Pipeline for which runs are created when all upstream pipelines complete successfully.
	Pipeline TriggerPipelineReferenceResponse `pulumi:"pipeline"`
	// Run Dimension property that needs to be emitted by upstream pipelines.
	RunDimension string `pulumi:"runDimension"`
	// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState string `pulumi:"runtimeState"`
	// Trigger type.
	// Expected value is 'ChainingTrigger'.
	Type string `pulumi:"type"`
}

// Trigger that allows the referenced pipeline to depend on other pipeline runs based on runDimension Name/Value pairs. Upstream pipelines should declare the same runDimension Name and their runs should have the values for those runDimensions. The referenced pipeline run would be triggered if the values for the runDimension match for all upstream pipeline runs.
type ChainingTriggerResponseOutput struct{ *pulumi.OutputState }

func (ChainingTriggerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChainingTriggerResponse)(nil)).Elem()
}

func (o ChainingTriggerResponseOutput) ToChainingTriggerResponseOutput() ChainingTriggerResponseOutput {
	return o
}

func (o ChainingTriggerResponseOutput) ToChainingTriggerResponseOutputWithContext(ctx context.Context) ChainingTriggerResponseOutput {
	return o
}

// List of tags that can be used for describing the trigger.
func (o ChainingTriggerResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ChainingTriggerResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Upstream Pipelines.
func (o ChainingTriggerResponseOutput) DependsOn() PipelineReferenceResponseArrayOutput {
	return o.ApplyT(func(v ChainingTriggerResponse) []PipelineReferenceResponse { return v.DependsOn }).(PipelineReferenceResponseArrayOutput)
}

// Trigger description.
func (o ChainingTriggerResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChainingTriggerResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Pipeline for which runs are created when all upstream pipelines complete successfully.
func (o ChainingTriggerResponseOutput) Pipeline() TriggerPipelineReferenceResponseOutput {
	return o.ApplyT(func(v ChainingTriggerResponse) TriggerPipelineReferenceResponse { return v.Pipeline }).(TriggerPipelineReferenceResponseOutput)
}

// Run Dimension property that needs to be emitted by upstream pipelines.
func (o ChainingTriggerResponseOutput) RunDimension() pulumi.StringOutput {
	return o.ApplyT(func(v ChainingTriggerResponse) string { return v.RunDimension }).(pulumi.StringOutput)
}

// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
func (o ChainingTriggerResponseOutput) RuntimeState() pulumi.StringOutput {
	return o.ApplyT(func(v ChainingTriggerResponse) string { return v.RuntimeState }).(pulumi.StringOutput)
}

// Trigger type.
// Expected value is 'ChainingTrigger'.
func (o ChainingTriggerResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ChainingTriggerResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The folder that this CDC is in. If not specified, CDC will appear at the root level.
type ChangeDataCaptureFolder struct {
	// The name of the folder that this CDC is in.
	Name *string `pulumi:"name"`
}

// ChangeDataCaptureFolderInput is an input type that accepts ChangeDataCaptureFolderArgs and ChangeDataCaptureFolderOutput values.
// You can construct a concrete instance of `ChangeDataCaptureFolderInput` via:
//
//	ChangeDataCaptureFolderArgs{...}
type ChangeDataCaptureFolderInput interface {
	pulumi.Input

	ToChangeDataCaptureFolderOutput() ChangeDataCaptureFolderOutput
	ToChangeDataCaptureFolderOutputWithContext(context.Context) ChangeDataCaptureFolderOutput
}

// The folder that this CDC is in. If not specified, CDC will appear at the root level.
type ChangeDataCaptureFolderArgs struct {
	// The name of the folder that this CDC is in.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ChangeDataCaptureFolderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChangeDataCaptureFolder)(nil)).Elem()
}

func (i ChangeDataCaptureFolderArgs) ToChangeDataCaptureFolderOutput() ChangeDataCaptureFolderOutput {
	return i.ToChangeDataCaptureFolderOutputWithContext(context.Background())
}

func (i ChangeDataCaptureFolderArgs) ToChangeDataCaptureFolderOutputWithContext(ctx context.Context) ChangeDataCaptureFolderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChangeDataCaptureFolderOutput)
}

func (i ChangeDataCaptureFolderArgs) ToChangeDataCaptureFolderPtrOutput() ChangeDataCaptureFolderPtrOutput {
	return i.ToChangeDataCaptureFolderPtrOutputWithContext(context.Background())
}

func (i ChangeDataCaptureFolderArgs) ToChangeDataCaptureFolderPtrOutputWithContext(ctx context.Context) ChangeDataCaptureFolderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChangeDataCaptureFolderOutput).ToChangeDataCaptureFolderPtrOutputWithContext(ctx)
}

// ChangeDataCaptureFolderPtrInput is an input type that accepts ChangeDataCaptureFolderArgs, ChangeDataCaptureFolderPtr and ChangeDataCaptureFolderPtrOutput values.
// You can construct a concrete instance of `ChangeDataCaptureFolderPtrInput` via:
//
//	        ChangeDataCaptureFolderArgs{...}
//
//	or:
//
//	        nil
type ChangeDataCaptureFolderPtrInput interface {
	pulumi.Input

	ToChangeDataCaptureFolderPtrOutput() ChangeDataCaptureFolderPtrOutput
	ToChangeDataCaptureFolderPtrOutputWithContext(context.Context) ChangeDataCaptureFolderPtrOutput
}

type changeDataCaptureFolderPtrType ChangeDataCaptureFolderArgs

func ChangeDataCaptureFolderPtr(v *ChangeDataCaptureFolderArgs) ChangeDataCaptureFolderPtrInput {
	return (*changeDataCaptureFolderPtrType)(v)
}

func (*changeDataCaptureFolderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ChangeDataCaptureFolder)(nil)).Elem()
}

func (i *changeDataCaptureFolderPtrType) ToChangeDataCaptureFolderPtrOutput() ChangeDataCaptureFolderPtrOutput {
	return i.ToChangeDataCaptureFolderPtrOutputWithContext(context.Background())
}

func (i *changeDataCaptureFolderPtrType) ToChangeDataCaptureFolderPtrOutputWithContext(ctx context.Context) ChangeDataCaptureFolderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChangeDataCaptureFolderPtrOutput)
}

// The folder that this CDC is in. If not specified, CDC will appear at the root level.
type ChangeDataCaptureFolderOutput struct{ *pulumi.OutputState }

func (ChangeDataCaptureFolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChangeDataCaptureFolder)(nil)).Elem()
}

func (o ChangeDataCaptureFolderOutput) ToChangeDataCaptureFolderOutput() ChangeDataCaptureFolderOutput {
	return o
}

func (o ChangeDataCaptureFolderOutput) ToChangeDataCaptureFolderOutputWithContext(ctx context.Context) ChangeDataCaptureFolderOutput {
	return o
}

func (o ChangeDataCaptureFolderOutput) ToChangeDataCaptureFolderPtrOutput() ChangeDataCaptureFolderPtrOutput {
	return o.ToChangeDataCaptureFolderPtrOutputWithContext(context.Background())
}

func (o ChangeDataCaptureFolderOutput) ToChangeDataCaptureFolderPtrOutputWithContext(ctx context.Context) ChangeDataCaptureFolderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ChangeDataCaptureFolder) *ChangeDataCaptureFolder {
		return &v
	}).(ChangeDataCaptureFolderPtrOutput)
}

// The name of the folder that this CDC is in.
func (o ChangeDataCaptureFolderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChangeDataCaptureFolder) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ChangeDataCaptureFolderPtrOutput struct{ *pulumi.OutputState }

func (ChangeDataCaptureFolderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChangeDataCaptureFolder)(nil)).Elem()
}

func (o ChangeDataCaptureFolderPtrOutput) ToChangeDataCaptureFolderPtrOutput() ChangeDataCaptureFolderPtrOutput {
	return o
}

func (o ChangeDataCaptureFolderPtrOutput) ToChangeDataCaptureFolderPtrOutputWithContext(ctx context.Context) ChangeDataCaptureFolderPtrOutput {
	return o
}

func (o ChangeDataCaptureFolderPtrOutput) Elem() ChangeDataCaptureFolderOutput {
	return o.ApplyT(func(v *ChangeDataCaptureFolder) ChangeDataCaptureFolder {
		if v != nil {
			return *v
		}
		var ret ChangeDataCaptureFolder
		return ret
	}).(ChangeDataCaptureFolderOutput)
}

// The name of the folder that this CDC is in.
func (o ChangeDataCaptureFolderPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChangeDataCaptureFolder) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The folder that this CDC is in. If not specified, CDC will appear at the root level.
type ChangeDataCaptureResponseFolder struct {
	// The name of the folder that this CDC is in.
	Name *string `pulumi:"name"`
}

// The folder that this CDC is in. If not specified, CDC will appear at the root level.
type ChangeDataCaptureResponseFolderOutput struct{ *pulumi.OutputState }

func (ChangeDataCaptureResponseFolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChangeDataCaptureResponseFolder)(nil)).Elem()
}

func (o ChangeDataCaptureResponseFolderOutput) ToChangeDataCaptureResponseFolderOutput() ChangeDataCaptureResponseFolderOutput {
	return o
}

func (o ChangeDataCaptureResponseFolderOutput) ToChangeDataCaptureResponseFolderOutputWithContext(ctx context.Context) ChangeDataCaptureResponseFolderOutput {
	return o
}

// The name of the folder that this CDC is in.
func (o ChangeDataCaptureResponseFolderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChangeDataCaptureResponseFolder) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ChangeDataCaptureResponseFolderPtrOutput struct{ *pulumi.OutputState }

func (ChangeDataCaptureResponseFolderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChangeDataCaptureResponseFolder)(nil)).Elem()
}

func (o ChangeDataCaptureResponseFolderPtrOutput) ToChangeDataCaptureResponseFolderPtrOutput() ChangeDataCaptureResponseFolderPtrOutput {
	return o
}

func (o ChangeDataCaptureResponseFolderPtrOutput) ToChangeDataCaptureResponseFolderPtrOutputWithContext(ctx context.Context) ChangeDataCaptureResponseFolderPtrOutput {
	return o
}

func (o ChangeDataCaptureResponseFolderPtrOutput) Elem() ChangeDataCaptureResponseFolderOutput {
	return o.ApplyT(func(v *ChangeDataCaptureResponseFolder) ChangeDataCaptureResponseFolder {
		if v != nil {
			return *v
		}
		var ret ChangeDataCaptureResponseFolder
		return ret
	}).(ChangeDataCaptureResponseFolderOutput)
}

// The name of the folder that this CDC is in.
func (o ChangeDataCaptureResponseFolderPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChangeDataCaptureResponseFolder) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The custom setup of running cmdkey commands.
type CmdkeySetup struct {
	// The password of data source access.
	Password interface{} `pulumi:"password"`
	// The server name of data source access. Type: string.
	TargetName interface{} `pulumi:"targetName"`
	// The type of custom setup.
	// Expected value is 'CmdkeySetup'.
	Type string `pulumi:"type"`
	// The user name of data source access. Type: string.
	UserName interface{} `pulumi:"userName"`
}

// CmdkeySetupInput is an input type that accepts CmdkeySetupArgs and CmdkeySetupOutput values.
// You can construct a concrete instance of `CmdkeySetupInput` via:
//
//	CmdkeySetupArgs{...}
type CmdkeySetupInput interface {
	pulumi.Input

	ToCmdkeySetupOutput() CmdkeySetupOutput
	ToCmdkeySetupOutputWithContext(context.Context) CmdkeySetupOutput
}

// The custom setup of running cmdkey commands.
type CmdkeySetupArgs struct {
	// The password of data source access.
	Password pulumi.Input `pulumi:"password"`
	// The server name of data source access. Type: string.
	TargetName pulumi.Input `pulumi:"targetName"`
	// The type of custom setup.
	// Expected value is 'CmdkeySetup'.
	Type pulumi.StringInput `pulumi:"type"`
	// The user name of data source access. Type: string.
	UserName pulumi.Input `pulumi:"userName"`
}

func (CmdkeySetupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CmdkeySetup)(nil)).Elem()
}

func (i CmdkeySetupArgs) ToCmdkeySetupOutput() CmdkeySetupOutput {
	return i.ToCmdkeySetupOutputWithContext(context.Background())
}

func (i CmdkeySetupArgs) ToCmdkeySetupOutputWithContext(ctx context.Context) CmdkeySetupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CmdkeySetupOutput)
}

// The custom setup of running cmdkey commands.
type CmdkeySetupOutput struct{ *pulumi.OutputState }

func (CmdkeySetupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CmdkeySetup)(nil)).Elem()
}

func (o CmdkeySetupOutput) ToCmdkeySetupOutput() CmdkeySetupOutput {
	return o
}

func (o CmdkeySetupOutput) ToCmdkeySetupOutputWithContext(ctx context.Context) CmdkeySetupOutput {
	return o
}

// The password of data source access.
func (o CmdkeySetupOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v CmdkeySetup) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The server name of data source access. Type: string.
func (o CmdkeySetupOutput) TargetName() pulumi.AnyOutput {
	return o.ApplyT(func(v CmdkeySetup) interface{} { return v.TargetName }).(pulumi.AnyOutput)
}

// The type of custom setup.
// Expected value is 'CmdkeySetup'.
func (o CmdkeySetupOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CmdkeySetup) string { return v.Type }).(pulumi.StringOutput)
}

// The user name of data source access. Type: string.
func (o CmdkeySetupOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v CmdkeySetup) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// The custom setup of running cmdkey commands.
type CmdkeySetupResponse struct {
	// The password of data source access.
	Password interface{} `pulumi:"password"`
	// The server name of data source access. Type: string.
	TargetName interface{} `pulumi:"targetName"`
	// The type of custom setup.
	// Expected value is 'CmdkeySetup'.
	Type string `pulumi:"type"`
	// The user name of data source access. Type: string.
	UserName interface{} `pulumi:"userName"`
}

// The custom setup of running cmdkey commands.
type CmdkeySetupResponseOutput struct{ *pulumi.OutputState }

func (CmdkeySetupResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CmdkeySetupResponse)(nil)).Elem()
}

func (o CmdkeySetupResponseOutput) ToCmdkeySetupResponseOutput() CmdkeySetupResponseOutput {
	return o
}

func (o CmdkeySetupResponseOutput) ToCmdkeySetupResponseOutputWithContext(ctx context.Context) CmdkeySetupResponseOutput {
	return o
}

// The password of data source access.
func (o CmdkeySetupResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v CmdkeySetupResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The server name of data source access. Type: string.
func (o CmdkeySetupResponseOutput) TargetName() pulumi.AnyOutput {
	return o.ApplyT(func(v CmdkeySetupResponse) interface{} { return v.TargetName }).(pulumi.AnyOutput)
}

// The type of custom setup.
// Expected value is 'CmdkeySetup'.
func (o CmdkeySetupResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CmdkeySetupResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The user name of data source access. Type: string.
func (o CmdkeySetupResponseOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v CmdkeySetupResponse) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// The Common Data Service for Apps entity dataset.
type CommonDataServiceForAppsEntityDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The logical name of the entity. Type: string (or Expression with resultType string).
	EntityName interface{} `pulumi:"entityName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'CommonDataServiceForAppsEntity'.
	Type string `pulumi:"type"`
}

// CommonDataServiceForAppsEntityDatasetInput is an input type that accepts CommonDataServiceForAppsEntityDatasetArgs and CommonDataServiceForAppsEntityDatasetOutput values.
// You can construct a concrete instance of `CommonDataServiceForAppsEntityDatasetInput` via:
//
//	CommonDataServiceForAppsEntityDatasetArgs{...}
type CommonDataServiceForAppsEntityDatasetInput interface {
	pulumi.Input

	ToCommonDataServiceForAppsEntityDatasetOutput() CommonDataServiceForAppsEntityDatasetOutput
	ToCommonDataServiceForAppsEntityDatasetOutputWithContext(context.Context) CommonDataServiceForAppsEntityDatasetOutput
}

// The Common Data Service for Apps entity dataset.
type CommonDataServiceForAppsEntityDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The logical name of the entity. Type: string (or Expression with resultType string).
	EntityName pulumi.Input `pulumi:"entityName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'CommonDataServiceForAppsEntity'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CommonDataServiceForAppsEntityDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonDataServiceForAppsEntityDataset)(nil)).Elem()
}

func (i CommonDataServiceForAppsEntityDatasetArgs) ToCommonDataServiceForAppsEntityDatasetOutput() CommonDataServiceForAppsEntityDatasetOutput {
	return i.ToCommonDataServiceForAppsEntityDatasetOutputWithContext(context.Background())
}

func (i CommonDataServiceForAppsEntityDatasetArgs) ToCommonDataServiceForAppsEntityDatasetOutputWithContext(ctx context.Context) CommonDataServiceForAppsEntityDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonDataServiceForAppsEntityDatasetOutput)
}

// The Common Data Service for Apps entity dataset.
type CommonDataServiceForAppsEntityDatasetOutput struct{ *pulumi.OutputState }

func (CommonDataServiceForAppsEntityDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonDataServiceForAppsEntityDataset)(nil)).Elem()
}

func (o CommonDataServiceForAppsEntityDatasetOutput) ToCommonDataServiceForAppsEntityDatasetOutput() CommonDataServiceForAppsEntityDatasetOutput {
	return o
}

func (o CommonDataServiceForAppsEntityDatasetOutput) ToCommonDataServiceForAppsEntityDatasetOutputWithContext(ctx context.Context) CommonDataServiceForAppsEntityDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o CommonDataServiceForAppsEntityDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsEntityDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o CommonDataServiceForAppsEntityDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsEntityDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The logical name of the entity. Type: string (or Expression with resultType string).
func (o CommonDataServiceForAppsEntityDatasetOutput) EntityName() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsEntityDataset) interface{} { return v.EntityName }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o CommonDataServiceForAppsEntityDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsEntityDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o CommonDataServiceForAppsEntityDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsEntityDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o CommonDataServiceForAppsEntityDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsEntityDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o CommonDataServiceForAppsEntityDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsEntityDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o CommonDataServiceForAppsEntityDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsEntityDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'CommonDataServiceForAppsEntity'.
func (o CommonDataServiceForAppsEntityDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsEntityDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Common Data Service for Apps entity dataset.
type CommonDataServiceForAppsEntityDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The logical name of the entity. Type: string (or Expression with resultType string).
	EntityName interface{} `pulumi:"entityName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'CommonDataServiceForAppsEntity'.
	Type string `pulumi:"type"`
}

// The Common Data Service for Apps entity dataset.
type CommonDataServiceForAppsEntityDatasetResponseOutput struct{ *pulumi.OutputState }

func (CommonDataServiceForAppsEntityDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonDataServiceForAppsEntityDatasetResponse)(nil)).Elem()
}

func (o CommonDataServiceForAppsEntityDatasetResponseOutput) ToCommonDataServiceForAppsEntityDatasetResponseOutput() CommonDataServiceForAppsEntityDatasetResponseOutput {
	return o
}

func (o CommonDataServiceForAppsEntityDatasetResponseOutput) ToCommonDataServiceForAppsEntityDatasetResponseOutputWithContext(ctx context.Context) CommonDataServiceForAppsEntityDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o CommonDataServiceForAppsEntityDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsEntityDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o CommonDataServiceForAppsEntityDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsEntityDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The logical name of the entity. Type: string (or Expression with resultType string).
func (o CommonDataServiceForAppsEntityDatasetResponseOutput) EntityName() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsEntityDatasetResponse) interface{} { return v.EntityName }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o CommonDataServiceForAppsEntityDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsEntityDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o CommonDataServiceForAppsEntityDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsEntityDatasetResponse) LinkedServiceReferenceResponse {
		return v.LinkedServiceName
	}).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o CommonDataServiceForAppsEntityDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsEntityDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o CommonDataServiceForAppsEntityDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsEntityDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o CommonDataServiceForAppsEntityDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsEntityDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'CommonDataServiceForAppsEntity'.
func (o CommonDataServiceForAppsEntityDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsEntityDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Common Data Service for Apps linked service.
type CommonDataServiceForAppsLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to connect to Common Data Service for Apps server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario. 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The deployment type of the Common Data Service for Apps instance. 'Online' for Common Data Service for Apps Online and 'OnPremisesWithIfd' for Common Data Service for Apps on-premises with Ifd. Type: string (or Expression with resultType string).
	DeploymentType interface{} `pulumi:"deploymentType"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The host name of the on-premises Common Data Service for Apps server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
	HostName interface{} `pulumi:"hostName"`
	// The organization name of the Common Data Service for Apps instance. The property is required for on-prem and required for online when there are more than one Common Data Service for Apps instances associated with the user. Type: string (or Expression with resultType string).
	OrganizationName interface{} `pulumi:"organizationName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to access the Common Data Service for Apps instance.
	Password interface{} `pulumi:"password"`
	// The port of on-premises Common Data Service for Apps server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential interface{} `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType interface{} `pulumi:"servicePrincipalCredentialType"`
	// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The URL to the Microsoft Common Data Service for Apps server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
	ServiceUri interface{} `pulumi:"serviceUri"`
	// Type of linked service.
	// Expected value is 'CommonDataServiceForApps'.
	Type string `pulumi:"type"`
	// User name to access the Common Data Service for Apps instance. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// CommonDataServiceForAppsLinkedServiceInput is an input type that accepts CommonDataServiceForAppsLinkedServiceArgs and CommonDataServiceForAppsLinkedServiceOutput values.
// You can construct a concrete instance of `CommonDataServiceForAppsLinkedServiceInput` via:
//
//	CommonDataServiceForAppsLinkedServiceArgs{...}
type CommonDataServiceForAppsLinkedServiceInput interface {
	pulumi.Input

	ToCommonDataServiceForAppsLinkedServiceOutput() CommonDataServiceForAppsLinkedServiceOutput
	ToCommonDataServiceForAppsLinkedServiceOutputWithContext(context.Context) CommonDataServiceForAppsLinkedServiceOutput
}

// Common Data Service for Apps linked service.
type CommonDataServiceForAppsLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication type to connect to Common Data Service for Apps server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario. 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
	AuthenticationType pulumi.Input `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The deployment type of the Common Data Service for Apps instance. 'Online' for Common Data Service for Apps Online and 'OnPremisesWithIfd' for Common Data Service for Apps on-premises with Ifd. Type: string (or Expression with resultType string).
	DeploymentType pulumi.Input `pulumi:"deploymentType"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// The host name of the on-premises Common Data Service for Apps server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
	HostName pulumi.Input `pulumi:"hostName"`
	// The organization name of the Common Data Service for Apps instance. The property is required for on-prem and required for online when there are more than one Common Data Service for Apps instances associated with the user. Type: string (or Expression with resultType string).
	OrganizationName pulumi.Input `pulumi:"organizationName"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password to access the Common Data Service for Apps instance.
	Password pulumi.Input `pulumi:"password"`
	// The port of on-premises Common Data Service for Apps server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
	Port pulumi.Input `pulumi:"port"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential pulumi.Input `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType pulumi.Input `pulumi:"servicePrincipalCredentialType"`
	// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The URL to the Microsoft Common Data Service for Apps server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
	ServiceUri pulumi.Input `pulumi:"serviceUri"`
	// Type of linked service.
	// Expected value is 'CommonDataServiceForApps'.
	Type pulumi.StringInput `pulumi:"type"`
	// User name to access the Common Data Service for Apps instance. Type: string (or Expression with resultType string).
	Username pulumi.Input `pulumi:"username"`
}

func (CommonDataServiceForAppsLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonDataServiceForAppsLinkedService)(nil)).Elem()
}

func (i CommonDataServiceForAppsLinkedServiceArgs) ToCommonDataServiceForAppsLinkedServiceOutput() CommonDataServiceForAppsLinkedServiceOutput {
	return i.ToCommonDataServiceForAppsLinkedServiceOutputWithContext(context.Background())
}

func (i CommonDataServiceForAppsLinkedServiceArgs) ToCommonDataServiceForAppsLinkedServiceOutputWithContext(ctx context.Context) CommonDataServiceForAppsLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonDataServiceForAppsLinkedServiceOutput)
}

// Common Data Service for Apps linked service.
type CommonDataServiceForAppsLinkedServiceOutput struct{ *pulumi.OutputState }

func (CommonDataServiceForAppsLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonDataServiceForAppsLinkedService)(nil)).Elem()
}

func (o CommonDataServiceForAppsLinkedServiceOutput) ToCommonDataServiceForAppsLinkedServiceOutput() CommonDataServiceForAppsLinkedServiceOutput {
	return o
}

func (o CommonDataServiceForAppsLinkedServiceOutput) ToCommonDataServiceForAppsLinkedServiceOutputWithContext(ctx context.Context) CommonDataServiceForAppsLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o CommonDataServiceForAppsLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication type to connect to Common Data Service for Apps server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario. 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
func (o CommonDataServiceForAppsLinkedServiceOutput) AuthenticationType() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedService) interface{} { return v.AuthenticationType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o CommonDataServiceForAppsLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The deployment type of the Common Data Service for Apps instance. 'Online' for Common Data Service for Apps Online and 'OnPremisesWithIfd' for Common Data Service for Apps on-premises with Ifd. Type: string (or Expression with resultType string).
func (o CommonDataServiceForAppsLinkedServiceOutput) DeploymentType() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedService) interface{} { return v.DeploymentType }).(pulumi.AnyOutput)
}

// Linked service description.
func (o CommonDataServiceForAppsLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o CommonDataServiceForAppsLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The host name of the on-premises Common Data Service for Apps server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
func (o CommonDataServiceForAppsLinkedServiceOutput) HostName() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedService) interface{} { return v.HostName }).(pulumi.AnyOutput)
}

// The organization name of the Common Data Service for Apps instance. The property is required for on-prem and required for online when there are more than one Common Data Service for Apps instances associated with the user. Type: string (or Expression with resultType string).
func (o CommonDataServiceForAppsLinkedServiceOutput) OrganizationName() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedService) interface{} { return v.OrganizationName }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o CommonDataServiceForAppsLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Password to access the Common Data Service for Apps instance.
func (o CommonDataServiceForAppsLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The port of on-premises Common Data Service for Apps server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
func (o CommonDataServiceForAppsLinkedServiceOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedService) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
func (o CommonDataServiceForAppsLinkedServiceOutput) ServicePrincipalCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedService) interface{} { return v.ServicePrincipalCredential }).(pulumi.AnyOutput)
}

// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
func (o CommonDataServiceForAppsLinkedServiceOutput) ServicePrincipalCredentialType() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedService) interface{} { return v.ServicePrincipalCredentialType }).(pulumi.AnyOutput)
}

// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
func (o CommonDataServiceForAppsLinkedServiceOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedService) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The URL to the Microsoft Common Data Service for Apps server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
func (o CommonDataServiceForAppsLinkedServiceOutput) ServiceUri() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedService) interface{} { return v.ServiceUri }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'CommonDataServiceForApps'.
func (o CommonDataServiceForAppsLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// User name to access the Common Data Service for Apps instance. Type: string (or Expression with resultType string).
func (o CommonDataServiceForAppsLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Common Data Service for Apps linked service.
type CommonDataServiceForAppsLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to connect to Common Data Service for Apps server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario. 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The deployment type of the Common Data Service for Apps instance. 'Online' for Common Data Service for Apps Online and 'OnPremisesWithIfd' for Common Data Service for Apps on-premises with Ifd. Type: string (or Expression with resultType string).
	DeploymentType interface{} `pulumi:"deploymentType"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The host name of the on-premises Common Data Service for Apps server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
	HostName interface{} `pulumi:"hostName"`
	// The organization name of the Common Data Service for Apps instance. The property is required for on-prem and required for online when there are more than one Common Data Service for Apps instances associated with the user. Type: string (or Expression with resultType string).
	OrganizationName interface{} `pulumi:"organizationName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to access the Common Data Service for Apps instance.
	Password interface{} `pulumi:"password"`
	// The port of on-premises Common Data Service for Apps server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential interface{} `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType interface{} `pulumi:"servicePrincipalCredentialType"`
	// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The URL to the Microsoft Common Data Service for Apps server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
	ServiceUri interface{} `pulumi:"serviceUri"`
	// Type of linked service.
	// Expected value is 'CommonDataServiceForApps'.
	Type string `pulumi:"type"`
	// User name to access the Common Data Service for Apps instance. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// Common Data Service for Apps linked service.
type CommonDataServiceForAppsLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (CommonDataServiceForAppsLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonDataServiceForAppsLinkedServiceResponse)(nil)).Elem()
}

func (o CommonDataServiceForAppsLinkedServiceResponseOutput) ToCommonDataServiceForAppsLinkedServiceResponseOutput() CommonDataServiceForAppsLinkedServiceResponseOutput {
	return o
}

func (o CommonDataServiceForAppsLinkedServiceResponseOutput) ToCommonDataServiceForAppsLinkedServiceResponseOutputWithContext(ctx context.Context) CommonDataServiceForAppsLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o CommonDataServiceForAppsLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication type to connect to Common Data Service for Apps server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario. 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
func (o CommonDataServiceForAppsLinkedServiceResponseOutput) AuthenticationType() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedServiceResponse) interface{} { return v.AuthenticationType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o CommonDataServiceForAppsLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The deployment type of the Common Data Service for Apps instance. 'Online' for Common Data Service for Apps Online and 'OnPremisesWithIfd' for Common Data Service for Apps on-premises with Ifd. Type: string (or Expression with resultType string).
func (o CommonDataServiceForAppsLinkedServiceResponseOutput) DeploymentType() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedServiceResponse) interface{} { return v.DeploymentType }).(pulumi.AnyOutput)
}

// Linked service description.
func (o CommonDataServiceForAppsLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o CommonDataServiceForAppsLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The host name of the on-premises Common Data Service for Apps server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
func (o CommonDataServiceForAppsLinkedServiceResponseOutput) HostName() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedServiceResponse) interface{} { return v.HostName }).(pulumi.AnyOutput)
}

// The organization name of the Common Data Service for Apps instance. The property is required for on-prem and required for online when there are more than one Common Data Service for Apps instances associated with the user. Type: string (or Expression with resultType string).
func (o CommonDataServiceForAppsLinkedServiceResponseOutput) OrganizationName() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedServiceResponse) interface{} { return v.OrganizationName }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o CommonDataServiceForAppsLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Password to access the Common Data Service for Apps instance.
func (o CommonDataServiceForAppsLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The port of on-premises Common Data Service for Apps server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
func (o CommonDataServiceForAppsLinkedServiceResponseOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedServiceResponse) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
func (o CommonDataServiceForAppsLinkedServiceResponseOutput) ServicePrincipalCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedServiceResponse) interface{} { return v.ServicePrincipalCredential }).(pulumi.AnyOutput)
}

// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
func (o CommonDataServiceForAppsLinkedServiceResponseOutput) ServicePrincipalCredentialType() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedServiceResponse) interface{} {
		return v.ServicePrincipalCredentialType
	}).(pulumi.AnyOutput)
}

// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
func (o CommonDataServiceForAppsLinkedServiceResponseOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedServiceResponse) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The URL to the Microsoft Common Data Service for Apps server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
func (o CommonDataServiceForAppsLinkedServiceResponseOutput) ServiceUri() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedServiceResponse) interface{} { return v.ServiceUri }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'CommonDataServiceForApps'.
func (o CommonDataServiceForAppsLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User name to access the Common Data Service for Apps instance. Type: string (or Expression with resultType string).
func (o CommonDataServiceForAppsLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// A copy activity Common Data Service for Apps sink.
type CommonDataServiceForAppsSink struct {
	// The logical name of the alternate key which will be used when upserting records. Type: string (or Expression with resultType string).
	AlternateKeyName interface{} `pulumi:"alternateKeyName"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The flag indicating whether to ignore null values from input dataset (except key fields) during write operation. Default is false. Type: boolean (or Expression with resultType boolean).
	IgnoreNullValues interface{} `pulumi:"ignoreNullValues"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'CommonDataServiceForAppsSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation.
	WriteBehavior string `pulumi:"writeBehavior"`
}

// CommonDataServiceForAppsSinkInput is an input type that accepts CommonDataServiceForAppsSinkArgs and CommonDataServiceForAppsSinkOutput values.
// You can construct a concrete instance of `CommonDataServiceForAppsSinkInput` via:
//
//	CommonDataServiceForAppsSinkArgs{...}
type CommonDataServiceForAppsSinkInput interface {
	pulumi.Input

	ToCommonDataServiceForAppsSinkOutput() CommonDataServiceForAppsSinkOutput
	ToCommonDataServiceForAppsSinkOutputWithContext(context.Context) CommonDataServiceForAppsSinkOutput
}

// A copy activity Common Data Service for Apps sink.
type CommonDataServiceForAppsSinkArgs struct {
	// The logical name of the alternate key which will be used when upserting records. Type: string (or Expression with resultType string).
	AlternateKeyName pulumi.Input `pulumi:"alternateKeyName"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The flag indicating whether to ignore null values from input dataset (except key fields) during write operation. Default is false. Type: boolean (or Expression with resultType boolean).
	IgnoreNullValues pulumi.Input `pulumi:"ignoreNullValues"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount pulumi.Input `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait pulumi.Input `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'CommonDataServiceForAppsSink'.
	Type pulumi.StringInput `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize pulumi.Input `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout pulumi.Input `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation.
	WriteBehavior pulumi.StringInput `pulumi:"writeBehavior"`
}

func (CommonDataServiceForAppsSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonDataServiceForAppsSink)(nil)).Elem()
}

func (i CommonDataServiceForAppsSinkArgs) ToCommonDataServiceForAppsSinkOutput() CommonDataServiceForAppsSinkOutput {
	return i.ToCommonDataServiceForAppsSinkOutputWithContext(context.Background())
}

func (i CommonDataServiceForAppsSinkArgs) ToCommonDataServiceForAppsSinkOutputWithContext(ctx context.Context) CommonDataServiceForAppsSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonDataServiceForAppsSinkOutput)
}

// A copy activity Common Data Service for Apps sink.
type CommonDataServiceForAppsSinkOutput struct{ *pulumi.OutputState }

func (CommonDataServiceForAppsSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonDataServiceForAppsSink)(nil)).Elem()
}

func (o CommonDataServiceForAppsSinkOutput) ToCommonDataServiceForAppsSinkOutput() CommonDataServiceForAppsSinkOutput {
	return o
}

func (o CommonDataServiceForAppsSinkOutput) ToCommonDataServiceForAppsSinkOutputWithContext(ctx context.Context) CommonDataServiceForAppsSinkOutput {
	return o
}

// The logical name of the alternate key which will be used when upserting records. Type: string (or Expression with resultType string).
func (o CommonDataServiceForAppsSinkOutput) AlternateKeyName() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsSink) interface{} { return v.AlternateKeyName }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o CommonDataServiceForAppsSinkOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsSink) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The flag indicating whether to ignore null values from input dataset (except key fields) during write operation. Default is false. Type: boolean (or Expression with resultType boolean).
func (o CommonDataServiceForAppsSinkOutput) IgnoreNullValues() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsSink) interface{} { return v.IgnoreNullValues }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o CommonDataServiceForAppsSinkOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsSink) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o CommonDataServiceForAppsSinkOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsSink) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o CommonDataServiceForAppsSinkOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsSink) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'CommonDataServiceForAppsSink'.
func (o CommonDataServiceForAppsSinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsSink) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o CommonDataServiceForAppsSinkOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsSink) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o CommonDataServiceForAppsSinkOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsSink) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// The write behavior for the operation.
func (o CommonDataServiceForAppsSinkOutput) WriteBehavior() pulumi.StringOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsSink) string { return v.WriteBehavior }).(pulumi.StringOutput)
}

// A copy activity Common Data Service for Apps sink.
type CommonDataServiceForAppsSinkResponse struct {
	// The logical name of the alternate key which will be used when upserting records. Type: string (or Expression with resultType string).
	AlternateKeyName interface{} `pulumi:"alternateKeyName"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The flag indicating whether to ignore null values from input dataset (except key fields) during write operation. Default is false. Type: boolean (or Expression with resultType boolean).
	IgnoreNullValues interface{} `pulumi:"ignoreNullValues"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'CommonDataServiceForAppsSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation.
	WriteBehavior string `pulumi:"writeBehavior"`
}

// A copy activity Common Data Service for Apps sink.
type CommonDataServiceForAppsSinkResponseOutput struct{ *pulumi.OutputState }

func (CommonDataServiceForAppsSinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonDataServiceForAppsSinkResponse)(nil)).Elem()
}

func (o CommonDataServiceForAppsSinkResponseOutput) ToCommonDataServiceForAppsSinkResponseOutput() CommonDataServiceForAppsSinkResponseOutput {
	return o
}

func (o CommonDataServiceForAppsSinkResponseOutput) ToCommonDataServiceForAppsSinkResponseOutputWithContext(ctx context.Context) CommonDataServiceForAppsSinkResponseOutput {
	return o
}

// The logical name of the alternate key which will be used when upserting records. Type: string (or Expression with resultType string).
func (o CommonDataServiceForAppsSinkResponseOutput) AlternateKeyName() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsSinkResponse) interface{} { return v.AlternateKeyName }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o CommonDataServiceForAppsSinkResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsSinkResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The flag indicating whether to ignore null values from input dataset (except key fields) during write operation. Default is false. Type: boolean (or Expression with resultType boolean).
func (o CommonDataServiceForAppsSinkResponseOutput) IgnoreNullValues() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsSinkResponse) interface{} { return v.IgnoreNullValues }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o CommonDataServiceForAppsSinkResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsSinkResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o CommonDataServiceForAppsSinkResponseOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsSinkResponse) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o CommonDataServiceForAppsSinkResponseOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsSinkResponse) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'CommonDataServiceForAppsSink'.
func (o CommonDataServiceForAppsSinkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsSinkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o CommonDataServiceForAppsSinkResponseOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsSinkResponse) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o CommonDataServiceForAppsSinkResponseOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsSinkResponse) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// The write behavior for the operation.
func (o CommonDataServiceForAppsSinkResponseOutput) WriteBehavior() pulumi.StringOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsSinkResponse) string { return v.WriteBehavior }).(pulumi.StringOutput)
}

// A copy activity Common Data Service for Apps source.
type CommonDataServiceForAppsSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// FetchXML is a proprietary query language that is used in Microsoft Common Data Service for Apps (online & on-premises). Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'CommonDataServiceForAppsSource'.
	Type string `pulumi:"type"`
}

// CommonDataServiceForAppsSourceInput is an input type that accepts CommonDataServiceForAppsSourceArgs and CommonDataServiceForAppsSourceOutput values.
// You can construct a concrete instance of `CommonDataServiceForAppsSourceInput` via:
//
//	CommonDataServiceForAppsSourceArgs{...}
type CommonDataServiceForAppsSourceInput interface {
	pulumi.Input

	ToCommonDataServiceForAppsSourceOutput() CommonDataServiceForAppsSourceOutput
	ToCommonDataServiceForAppsSourceOutputWithContext(context.Context) CommonDataServiceForAppsSourceOutput
}

// A copy activity Common Data Service for Apps source.
type CommonDataServiceForAppsSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// FetchXML is a proprietary query language that is used in Microsoft Common Data Service for Apps (online & on-premises). Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'CommonDataServiceForAppsSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CommonDataServiceForAppsSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonDataServiceForAppsSource)(nil)).Elem()
}

func (i CommonDataServiceForAppsSourceArgs) ToCommonDataServiceForAppsSourceOutput() CommonDataServiceForAppsSourceOutput {
	return i.ToCommonDataServiceForAppsSourceOutputWithContext(context.Background())
}

func (i CommonDataServiceForAppsSourceArgs) ToCommonDataServiceForAppsSourceOutputWithContext(ctx context.Context) CommonDataServiceForAppsSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonDataServiceForAppsSourceOutput)
}

// A copy activity Common Data Service for Apps source.
type CommonDataServiceForAppsSourceOutput struct{ *pulumi.OutputState }

func (CommonDataServiceForAppsSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonDataServiceForAppsSource)(nil)).Elem()
}

func (o CommonDataServiceForAppsSourceOutput) ToCommonDataServiceForAppsSourceOutput() CommonDataServiceForAppsSourceOutput {
	return o
}

func (o CommonDataServiceForAppsSourceOutput) ToCommonDataServiceForAppsSourceOutputWithContext(ctx context.Context) CommonDataServiceForAppsSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o CommonDataServiceForAppsSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o CommonDataServiceForAppsSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o CommonDataServiceForAppsSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// FetchXML is a proprietary query language that is used in Microsoft Common Data Service for Apps (online & on-premises). Type: string (or Expression with resultType string).
func (o CommonDataServiceForAppsSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o CommonDataServiceForAppsSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o CommonDataServiceForAppsSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'CommonDataServiceForAppsSource'.
func (o CommonDataServiceForAppsSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Common Data Service for Apps source.
type CommonDataServiceForAppsSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// FetchXML is a proprietary query language that is used in Microsoft Common Data Service for Apps (online & on-premises). Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'CommonDataServiceForAppsSource'.
	Type string `pulumi:"type"`
}

// A copy activity Common Data Service for Apps source.
type CommonDataServiceForAppsSourceResponseOutput struct{ *pulumi.OutputState }

func (CommonDataServiceForAppsSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonDataServiceForAppsSourceResponse)(nil)).Elem()
}

func (o CommonDataServiceForAppsSourceResponseOutput) ToCommonDataServiceForAppsSourceResponseOutput() CommonDataServiceForAppsSourceResponseOutput {
	return o
}

func (o CommonDataServiceForAppsSourceResponseOutput) ToCommonDataServiceForAppsSourceResponseOutputWithContext(ctx context.Context) CommonDataServiceForAppsSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o CommonDataServiceForAppsSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o CommonDataServiceForAppsSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o CommonDataServiceForAppsSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// FetchXML is a proprietary query language that is used in Microsoft Common Data Service for Apps (online & on-premises). Type: string (or Expression with resultType string).
func (o CommonDataServiceForAppsSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o CommonDataServiceForAppsSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o CommonDataServiceForAppsSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'CommonDataServiceForAppsSource'.
func (o CommonDataServiceForAppsSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CommonDataServiceForAppsSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The custom setup of installing 3rd party components.
type ComponentSetup struct {
	// The name of the 3rd party component.
	ComponentName string `pulumi:"componentName"`
	// The license key to activate the component.
	LicenseKey interface{} `pulumi:"licenseKey"`
	// The type of custom setup.
	// Expected value is 'ComponentSetup'.
	Type string `pulumi:"type"`
}

// ComponentSetupInput is an input type that accepts ComponentSetupArgs and ComponentSetupOutput values.
// You can construct a concrete instance of `ComponentSetupInput` via:
//
//	ComponentSetupArgs{...}
type ComponentSetupInput interface {
	pulumi.Input

	ToComponentSetupOutput() ComponentSetupOutput
	ToComponentSetupOutputWithContext(context.Context) ComponentSetupOutput
}

// The custom setup of installing 3rd party components.
type ComponentSetupArgs struct {
	// The name of the 3rd party component.
	ComponentName pulumi.StringInput `pulumi:"componentName"`
	// The license key to activate the component.
	LicenseKey pulumi.Input `pulumi:"licenseKey"`
	// The type of custom setup.
	// Expected value is 'ComponentSetup'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ComponentSetupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentSetup)(nil)).Elem()
}

func (i ComponentSetupArgs) ToComponentSetupOutput() ComponentSetupOutput {
	return i.ToComponentSetupOutputWithContext(context.Background())
}

func (i ComponentSetupArgs) ToComponentSetupOutputWithContext(ctx context.Context) ComponentSetupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentSetupOutput)
}

// The custom setup of installing 3rd party components.
type ComponentSetupOutput struct{ *pulumi.OutputState }

func (ComponentSetupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentSetup)(nil)).Elem()
}

func (o ComponentSetupOutput) ToComponentSetupOutput() ComponentSetupOutput {
	return o
}

func (o ComponentSetupOutput) ToComponentSetupOutputWithContext(ctx context.Context) ComponentSetupOutput {
	return o
}

// The name of the 3rd party component.
func (o ComponentSetupOutput) ComponentName() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentSetup) string { return v.ComponentName }).(pulumi.StringOutput)
}

// The license key to activate the component.
func (o ComponentSetupOutput) LicenseKey() pulumi.AnyOutput {
	return o.ApplyT(func(v ComponentSetup) interface{} { return v.LicenseKey }).(pulumi.AnyOutput)
}

// The type of custom setup.
// Expected value is 'ComponentSetup'.
func (o ComponentSetupOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentSetup) string { return v.Type }).(pulumi.StringOutput)
}

// The custom setup of installing 3rd party components.
type ComponentSetupResponse struct {
	// The name of the 3rd party component.
	ComponentName string `pulumi:"componentName"`
	// The license key to activate the component.
	LicenseKey interface{} `pulumi:"licenseKey"`
	// The type of custom setup.
	// Expected value is 'ComponentSetup'.
	Type string `pulumi:"type"`
}

// The custom setup of installing 3rd party components.
type ComponentSetupResponseOutput struct{ *pulumi.OutputState }

func (ComponentSetupResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentSetupResponse)(nil)).Elem()
}

func (o ComponentSetupResponseOutput) ToComponentSetupResponseOutput() ComponentSetupResponseOutput {
	return o
}

func (o ComponentSetupResponseOutput) ToComponentSetupResponseOutputWithContext(ctx context.Context) ComponentSetupResponseOutput {
	return o
}

// The name of the 3rd party component.
func (o ComponentSetupResponseOutput) ComponentName() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentSetupResponse) string { return v.ComponentName }).(pulumi.StringOutput)
}

// The license key to activate the component.
func (o ComponentSetupResponseOutput) LicenseKey() pulumi.AnyOutput {
	return o.ApplyT(func(v ComponentSetupResponse) interface{} { return v.LicenseKey }).(pulumi.AnyOutput)
}

// The type of custom setup.
// Expected value is 'ComponentSetup'.
func (o ComponentSetupResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentSetupResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Concur Service linked service.
type ConcurLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Application client_id supplied by Concur App Management.
	ClientId interface{} `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Properties used to connect to Concur. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the username field.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Concur'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
	// The user name that you use to access Concur Service.
	Username interface{} `pulumi:"username"`
}

// ConcurLinkedServiceInput is an input type that accepts ConcurLinkedServiceArgs and ConcurLinkedServiceOutput values.
// You can construct a concrete instance of `ConcurLinkedServiceInput` via:
//
//	ConcurLinkedServiceArgs{...}
type ConcurLinkedServiceInput interface {
	pulumi.Input

	ToConcurLinkedServiceOutput() ConcurLinkedServiceOutput
	ToConcurLinkedServiceOutputWithContext(context.Context) ConcurLinkedServiceOutput
}

// Concur Service linked service.
type ConcurLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Application client_id supplied by Concur App Management.
	ClientId pulumi.Input `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Properties used to connect to Concur. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties pulumi.Input `pulumi:"connectionProperties"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the username field.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Concur'.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
	// The user name that you use to access Concur Service.
	Username pulumi.Input `pulumi:"username"`
}

func (ConcurLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConcurLinkedService)(nil)).Elem()
}

func (i ConcurLinkedServiceArgs) ToConcurLinkedServiceOutput() ConcurLinkedServiceOutput {
	return i.ToConcurLinkedServiceOutputWithContext(context.Background())
}

func (i ConcurLinkedServiceArgs) ToConcurLinkedServiceOutputWithContext(ctx context.Context) ConcurLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConcurLinkedServiceOutput)
}

// Concur Service linked service.
type ConcurLinkedServiceOutput struct{ *pulumi.OutputState }

func (ConcurLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConcurLinkedService)(nil)).Elem()
}

func (o ConcurLinkedServiceOutput) ToConcurLinkedServiceOutput() ConcurLinkedServiceOutput {
	return o
}

func (o ConcurLinkedServiceOutput) ToConcurLinkedServiceOutputWithContext(ctx context.Context) ConcurLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o ConcurLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConcurLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Application client_id supplied by Concur App Management.
func (o ConcurLinkedServiceOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurLinkedService) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o ConcurLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v ConcurLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Properties used to connect to Concur. It is mutually exclusive with any other properties in the linked service. Type: object.
func (o ConcurLinkedServiceOutput) ConnectionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurLinkedService) interface{} { return v.ConnectionProperties }).(pulumi.AnyOutput)
}

// Linked service description.
func (o ConcurLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConcurLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o ConcurLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConcurLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o ConcurLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v ConcurLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The password corresponding to the user name that you provided in the username field.
func (o ConcurLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Concur'.
func (o ConcurLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ConcurLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o ConcurLinkedServiceOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurLinkedService) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o ConcurLinkedServiceOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurLinkedService) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o ConcurLinkedServiceOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurLinkedService) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// The user name that you use to access Concur Service.
func (o ConcurLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Concur Service linked service.
type ConcurLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Application client_id supplied by Concur App Management.
	ClientId interface{} `pulumi:"clientId"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Properties used to connect to Concur. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name that you provided in the username field.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Concur'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
	// The user name that you use to access Concur Service.
	Username interface{} `pulumi:"username"`
}

// Concur Service linked service.
type ConcurLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (ConcurLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConcurLinkedServiceResponse)(nil)).Elem()
}

func (o ConcurLinkedServiceResponseOutput) ToConcurLinkedServiceResponseOutput() ConcurLinkedServiceResponseOutput {
	return o
}

func (o ConcurLinkedServiceResponseOutput) ToConcurLinkedServiceResponseOutputWithContext(ctx context.Context) ConcurLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o ConcurLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConcurLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Application client_id supplied by Concur App Management.
func (o ConcurLinkedServiceResponseOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurLinkedServiceResponse) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o ConcurLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v ConcurLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Properties used to connect to Concur. It is mutually exclusive with any other properties in the linked service. Type: object.
func (o ConcurLinkedServiceResponseOutput) ConnectionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurLinkedServiceResponse) interface{} { return v.ConnectionProperties }).(pulumi.AnyOutput)
}

// Linked service description.
func (o ConcurLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConcurLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o ConcurLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConcurLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o ConcurLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ConcurLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The password corresponding to the user name that you provided in the username field.
func (o ConcurLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Concur'.
func (o ConcurLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ConcurLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o ConcurLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurLinkedServiceResponse) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o ConcurLinkedServiceResponseOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurLinkedServiceResponse) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o ConcurLinkedServiceResponseOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurLinkedServiceResponse) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// The user name that you use to access Concur Service.
func (o ConcurLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Concur Service dataset.
type ConcurObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'ConcurObject'.
	Type string `pulumi:"type"`
}

// ConcurObjectDatasetInput is an input type that accepts ConcurObjectDatasetArgs and ConcurObjectDatasetOutput values.
// You can construct a concrete instance of `ConcurObjectDatasetInput` via:
//
//	ConcurObjectDatasetArgs{...}
type ConcurObjectDatasetInput interface {
	pulumi.Input

	ToConcurObjectDatasetOutput() ConcurObjectDatasetOutput
	ToConcurObjectDatasetOutputWithContext(context.Context) ConcurObjectDatasetOutput
}

// Concur Service dataset.
type ConcurObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'ConcurObject'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ConcurObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConcurObjectDataset)(nil)).Elem()
}

func (i ConcurObjectDatasetArgs) ToConcurObjectDatasetOutput() ConcurObjectDatasetOutput {
	return i.ToConcurObjectDatasetOutputWithContext(context.Background())
}

func (i ConcurObjectDatasetArgs) ToConcurObjectDatasetOutputWithContext(ctx context.Context) ConcurObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConcurObjectDatasetOutput)
}

// Concur Service dataset.
type ConcurObjectDatasetOutput struct{ *pulumi.OutputState }

func (ConcurObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConcurObjectDataset)(nil)).Elem()
}

func (o ConcurObjectDatasetOutput) ToConcurObjectDatasetOutput() ConcurObjectDatasetOutput {
	return o
}

func (o ConcurObjectDatasetOutput) ToConcurObjectDatasetOutputWithContext(ctx context.Context) ConcurObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ConcurObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConcurObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o ConcurObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConcurObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o ConcurObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v ConcurObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o ConcurObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v ConcurObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o ConcurObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v ConcurObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o ConcurObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ConcurObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o ConcurObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'ConcurObject'.
func (o ConcurObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ConcurObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Concur Service dataset.
type ConcurObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'ConcurObject'.
	Type string `pulumi:"type"`
}

// Concur Service dataset.
type ConcurObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (ConcurObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConcurObjectDatasetResponse)(nil)).Elem()
}

func (o ConcurObjectDatasetResponseOutput) ToConcurObjectDatasetResponseOutput() ConcurObjectDatasetResponseOutput {
	return o
}

func (o ConcurObjectDatasetResponseOutput) ToConcurObjectDatasetResponseOutputWithContext(ctx context.Context) ConcurObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ConcurObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ConcurObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o ConcurObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConcurObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o ConcurObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v ConcurObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o ConcurObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v ConcurObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o ConcurObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ConcurObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o ConcurObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ConcurObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o ConcurObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'ConcurObject'.
func (o ConcurObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ConcurObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Concur Service source.
type ConcurSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ConcurSource'.
	Type string `pulumi:"type"`
}

// ConcurSourceInput is an input type that accepts ConcurSourceArgs and ConcurSourceOutput values.
// You can construct a concrete instance of `ConcurSourceInput` via:
//
//	ConcurSourceArgs{...}
type ConcurSourceInput interface {
	pulumi.Input

	ToConcurSourceOutput() ConcurSourceOutput
	ToConcurSourceOutputWithContext(context.Context) ConcurSourceOutput
}

// A copy activity Concur Service source.
type ConcurSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ConcurSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ConcurSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConcurSource)(nil)).Elem()
}

func (i ConcurSourceArgs) ToConcurSourceOutput() ConcurSourceOutput {
	return i.ToConcurSourceOutputWithContext(context.Background())
}

func (i ConcurSourceArgs) ToConcurSourceOutputWithContext(ctx context.Context) ConcurSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConcurSourceOutput)
}

// A copy activity Concur Service source.
type ConcurSourceOutput struct{ *pulumi.OutputState }

func (ConcurSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConcurSource)(nil)).Elem()
}

func (o ConcurSourceOutput) ToConcurSourceOutput() ConcurSourceOutput {
	return o
}

func (o ConcurSourceOutput) ToConcurSourceOutputWithContext(ctx context.Context) ConcurSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o ConcurSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o ConcurSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o ConcurSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o ConcurSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ConcurSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o ConcurSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ConcurSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'ConcurSource'.
func (o ConcurSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ConcurSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Concur Service source.
type ConcurSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'ConcurSource'.
	Type string `pulumi:"type"`
}

// A copy activity Concur Service source.
type ConcurSourceResponseOutput struct{ *pulumi.OutputState }

func (ConcurSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConcurSourceResponse)(nil)).Elem()
}

func (o ConcurSourceResponseOutput) ToConcurSourceResponseOutput() ConcurSourceResponseOutput {
	return o
}

func (o ConcurSourceResponseOutput) ToConcurSourceResponseOutputWithContext(ctx context.Context) ConcurSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o ConcurSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o ConcurSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o ConcurSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o ConcurSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ConcurSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o ConcurSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ConcurSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v ConcurSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'ConcurSource'.
func (o ConcurSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ConcurSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The connection state of a managed private endpoint
type ConnectionStatePropertiesResponse struct {
	// The actions required on the managed private endpoint
	ActionsRequired string `pulumi:"actionsRequired"`
	// The managed private endpoint description
	Description string `pulumi:"description"`
	// The approval status
	Status string `pulumi:"status"`
}

// The connection state of a managed private endpoint
type ConnectionStatePropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectionStatePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionStatePropertiesResponse)(nil)).Elem()
}

func (o ConnectionStatePropertiesResponseOutput) ToConnectionStatePropertiesResponseOutput() ConnectionStatePropertiesResponseOutput {
	return o
}

func (o ConnectionStatePropertiesResponseOutput) ToConnectionStatePropertiesResponseOutputWithContext(ctx context.Context) ConnectionStatePropertiesResponseOutput {
	return o
}

// The actions required on the managed private endpoint
func (o ConnectionStatePropertiesResponseOutput) ActionsRequired() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionStatePropertiesResponse) string { return v.ActionsRequired }).(pulumi.StringOutput)
}

// The managed private endpoint description
func (o ConnectionStatePropertiesResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionStatePropertiesResponse) string { return v.Description }).(pulumi.StringOutput)
}

// The approval status
func (o ConnectionStatePropertiesResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionStatePropertiesResponse) string { return v.Status }).(pulumi.StringOutput)
}

type ConnectionStatePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectionStatePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionStatePropertiesResponse)(nil)).Elem()
}

func (o ConnectionStatePropertiesResponsePtrOutput) ToConnectionStatePropertiesResponsePtrOutput() ConnectionStatePropertiesResponsePtrOutput {
	return o
}

func (o ConnectionStatePropertiesResponsePtrOutput) ToConnectionStatePropertiesResponsePtrOutputWithContext(ctx context.Context) ConnectionStatePropertiesResponsePtrOutput {
	return o
}

func (o ConnectionStatePropertiesResponsePtrOutput) Elem() ConnectionStatePropertiesResponseOutput {
	return o.ApplyT(func(v *ConnectionStatePropertiesResponse) ConnectionStatePropertiesResponse {
		if v != nil {
			return *v
		}
		var ret ConnectionStatePropertiesResponse
		return ret
	}).(ConnectionStatePropertiesResponseOutput)
}

// The actions required on the managed private endpoint
func (o ConnectionStatePropertiesResponsePtrOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionStatePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ActionsRequired
	}).(pulumi.StringPtrOutput)
}

// The managed private endpoint description
func (o ConnectionStatePropertiesResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionStatePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Description
	}).(pulumi.StringPtrOutput)
}

// The approval status
func (o ConnectionStatePropertiesResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionStatePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

// Base class for all control activities like IfCondition, ForEach , Until.
type ControlActivity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'Container'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// ControlActivityInput is an input type that accepts ControlActivityArgs and ControlActivityOutput values.
// You can construct a concrete instance of `ControlActivityInput` via:
//
//	ControlActivityArgs{...}
type ControlActivityInput interface {
	pulumi.Input

	ToControlActivityOutput() ControlActivityOutput
	ToControlActivityOutputWithContext(context.Context) ControlActivityOutput
}

// Base class for all control activities like IfCondition, ForEach , Until.
type ControlActivityArgs struct {
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs pulumi.StringPtrInput `pulumi:"onInactiveMarkAs"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Type of activity.
	// Expected value is 'Container'.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
}

func (ControlActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControlActivity)(nil)).Elem()
}

func (i ControlActivityArgs) ToControlActivityOutput() ControlActivityOutput {
	return i.ToControlActivityOutputWithContext(context.Background())
}

func (i ControlActivityArgs) ToControlActivityOutputWithContext(ctx context.Context) ControlActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControlActivityOutput)
}

// Base class for all control activities like IfCondition, ForEach , Until.
type ControlActivityOutput struct{ *pulumi.OutputState }

func (ControlActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControlActivity)(nil)).Elem()
}

func (o ControlActivityOutput) ToControlActivityOutput() ControlActivityOutput {
	return o
}

func (o ControlActivityOutput) ToControlActivityOutputWithContext(ctx context.Context) ControlActivityOutput {
	return o
}

// Activity depends on condition.
func (o ControlActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v ControlActivity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o ControlActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControlActivity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Activity name.
func (o ControlActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ControlActivity) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o ControlActivityOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControlActivity) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o ControlActivityOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControlActivity) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'Container'.
func (o ControlActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ControlActivity) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o ControlActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v ControlActivity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

// Base class for all control activities like IfCondition, ForEach , Until.
type ControlActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'Container'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Base class for all control activities like IfCondition, ForEach , Until.
type ControlActivityResponseOutput struct{ *pulumi.OutputState }

func (ControlActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControlActivityResponse)(nil)).Elem()
}

func (o ControlActivityResponseOutput) ToControlActivityResponseOutput() ControlActivityResponseOutput {
	return o
}

func (o ControlActivityResponseOutput) ToControlActivityResponseOutputWithContext(ctx context.Context) ControlActivityResponseOutput {
	return o
}

// Activity depends on condition.
func (o ControlActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v ControlActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o ControlActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControlActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Activity name.
func (o ControlActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ControlActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o ControlActivityResponseOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControlActivityResponse) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o ControlActivityResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ControlActivityResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'Container'.
func (o ControlActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ControlActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o ControlActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v ControlActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

// Copy activity.
type CopyActivity struct {
	// Maximum number of data integration units that can be used to perform this data movement. Type: integer (or Expression with resultType integer), minimum: 0.
	DataIntegrationUnits interface{} `pulumi:"dataIntegrationUnits"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Whether to skip incompatible row. Default value is false. Type: boolean (or Expression with resultType boolean).
	EnableSkipIncompatibleRow interface{} `pulumi:"enableSkipIncompatibleRow"`
	// Specifies whether to copy data via an interim staging. Default value is false. Type: boolean (or Expression with resultType boolean).
	EnableStaging interface{} `pulumi:"enableStaging"`
	// List of inputs for the activity.
	Inputs []DatasetReference `pulumi:"inputs"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Log settings customer needs provide when enabling log.
	LogSettings *LogSettings `pulumi:"logSettings"`
	// (Deprecated. Please use LogSettings) Log storage settings customer need to provide when enabling session log.
	LogStorageSettings *LogStorageSettings `pulumi:"logStorageSettings"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// List of outputs for the activity.
	Outputs []DatasetReference `pulumi:"outputs"`
	// Maximum number of concurrent sessions opened on the source or sink to avoid overloading the data store. Type: integer (or Expression with resultType integer), minimum: 0.
	ParallelCopies interface{} `pulumi:"parallelCopies"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Preserve rules.
	Preserve []interface{} `pulumi:"preserve"`
	// Preserve Rules.
	PreserveRules []interface{} `pulumi:"preserveRules"`
	// Redirect incompatible row settings when EnableSkipIncompatibleRow is true.
	RedirectIncompatibleRowSettings *RedirectIncompatibleRowSettings `pulumi:"redirectIncompatibleRowSettings"`
	// Copy activity sink.
	Sink interface{} `pulumi:"sink"`
	// Specify the fault tolerance for data consistency.
	SkipErrorFile *SkipErrorFile `pulumi:"skipErrorFile"`
	// Copy activity source.
	Source interface{} `pulumi:"source"`
	// Specifies interim staging settings when EnableStaging is true.
	StagingSettings *StagingSettings `pulumi:"stagingSettings"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Copy activity translator. If not specified, tabular translator is used.
	Translator interface{} `pulumi:"translator"`
	// Type of activity.
	// Expected value is 'Copy'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
	// Whether to enable Data Consistency validation. Type: boolean (or Expression with resultType boolean).
	ValidateDataConsistency interface{} `pulumi:"validateDataConsistency"`
}

// CopyActivityInput is an input type that accepts CopyActivityArgs and CopyActivityOutput values.
// You can construct a concrete instance of `CopyActivityInput` via:
//
//	CopyActivityArgs{...}
type CopyActivityInput interface {
	pulumi.Input

	ToCopyActivityOutput() CopyActivityOutput
	ToCopyActivityOutputWithContext(context.Context) CopyActivityOutput
}

// Copy activity.
type CopyActivityArgs struct {
	// Maximum number of data integration units that can be used to perform this data movement. Type: integer (or Expression with resultType integer), minimum: 0.
	DataIntegrationUnits pulumi.Input `pulumi:"dataIntegrationUnits"`
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Whether to skip incompatible row. Default value is false. Type: boolean (or Expression with resultType boolean).
	EnableSkipIncompatibleRow pulumi.Input `pulumi:"enableSkipIncompatibleRow"`
	// Specifies whether to copy data via an interim staging. Default value is false. Type: boolean (or Expression with resultType boolean).
	EnableStaging pulumi.Input `pulumi:"enableStaging"`
	// List of inputs for the activity.
	Inputs DatasetReferenceArrayInput `pulumi:"inputs"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferencePtrInput `pulumi:"linkedServiceName"`
	// Log settings customer needs provide when enabling log.
	LogSettings LogSettingsPtrInput `pulumi:"logSettings"`
	// (Deprecated. Please use LogSettings) Log storage settings customer need to provide when enabling session log.
	LogStorageSettings LogStorageSettingsPtrInput `pulumi:"logStorageSettings"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs pulumi.StringPtrInput `pulumi:"onInactiveMarkAs"`
	// List of outputs for the activity.
	Outputs DatasetReferenceArrayInput `pulumi:"outputs"`
	// Maximum number of concurrent sessions opened on the source or sink to avoid overloading the data store. Type: integer (or Expression with resultType integer), minimum: 0.
	ParallelCopies pulumi.Input `pulumi:"parallelCopies"`
	// Activity policy.
	Policy ActivityPolicyPtrInput `pulumi:"policy"`
	// Preserve rules.
	Preserve pulumi.ArrayInput `pulumi:"preserve"`
	// Preserve Rules.
	PreserveRules pulumi.ArrayInput `pulumi:"preserveRules"`
	// Redirect incompatible row settings when EnableSkipIncompatibleRow is true.
	RedirectIncompatibleRowSettings RedirectIncompatibleRowSettingsPtrInput `pulumi:"redirectIncompatibleRowSettings"`
	// Copy activity sink.
	Sink pulumi.Input `pulumi:"sink"`
	// Specify the fault tolerance for data consistency.
	SkipErrorFile SkipErrorFilePtrInput `pulumi:"skipErrorFile"`
	// Copy activity source.
	Source pulumi.Input `pulumi:"source"`
	// Specifies interim staging settings when EnableStaging is true.
	StagingSettings StagingSettingsPtrInput `pulumi:"stagingSettings"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Copy activity translator. If not specified, tabular translator is used.
	Translator pulumi.Input `pulumi:"translator"`
	// Type of activity.
	// Expected value is 'Copy'.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
	// Whether to enable Data Consistency validation. Type: boolean (or Expression with resultType boolean).
	ValidateDataConsistency pulumi.Input `pulumi:"validateDataConsistency"`
}

func (CopyActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CopyActivity)(nil)).Elem()
}

func (i CopyActivityArgs) ToCopyActivityOutput() CopyActivityOutput {
	return i.ToCopyActivityOutputWithContext(context.Background())
}

func (i CopyActivityArgs) ToCopyActivityOutputWithContext(ctx context.Context) CopyActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CopyActivityOutput)
}

// Copy activity.
type CopyActivityOutput struct{ *pulumi.OutputState }

func (CopyActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CopyActivity)(nil)).Elem()
}

func (o CopyActivityOutput) ToCopyActivityOutput() CopyActivityOutput {
	return o
}

func (o CopyActivityOutput) ToCopyActivityOutputWithContext(ctx context.Context) CopyActivityOutput {
	return o
}

// Maximum number of data integration units that can be used to perform this data movement. Type: integer (or Expression with resultType integer), minimum: 0.
func (o CopyActivityOutput) DataIntegrationUnits() pulumi.AnyOutput {
	return o.ApplyT(func(v CopyActivity) interface{} { return v.DataIntegrationUnits }).(pulumi.AnyOutput)
}

// Activity depends on condition.
func (o CopyActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v CopyActivity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o CopyActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CopyActivity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether to skip incompatible row. Default value is false. Type: boolean (or Expression with resultType boolean).
func (o CopyActivityOutput) EnableSkipIncompatibleRow() pulumi.AnyOutput {
	return o.ApplyT(func(v CopyActivity) interface{} { return v.EnableSkipIncompatibleRow }).(pulumi.AnyOutput)
}

// Specifies whether to copy data via an interim staging. Default value is false. Type: boolean (or Expression with resultType boolean).
func (o CopyActivityOutput) EnableStaging() pulumi.AnyOutput {
	return o.ApplyT(func(v CopyActivity) interface{} { return v.EnableStaging }).(pulumi.AnyOutput)
}

// List of inputs for the activity.
func (o CopyActivityOutput) Inputs() DatasetReferenceArrayOutput {
	return o.ApplyT(func(v CopyActivity) []DatasetReference { return v.Inputs }).(DatasetReferenceArrayOutput)
}

// Linked service reference.
func (o CopyActivityOutput) LinkedServiceName() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v CopyActivity) *LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferencePtrOutput)
}

// Log settings customer needs provide when enabling log.
func (o CopyActivityOutput) LogSettings() LogSettingsPtrOutput {
	return o.ApplyT(func(v CopyActivity) *LogSettings { return v.LogSettings }).(LogSettingsPtrOutput)
}

// (Deprecated. Please use LogSettings) Log storage settings customer need to provide when enabling session log.
func (o CopyActivityOutput) LogStorageSettings() LogStorageSettingsPtrOutput {
	return o.ApplyT(func(v CopyActivity) *LogStorageSettings { return v.LogStorageSettings }).(LogStorageSettingsPtrOutput)
}

// Activity name.
func (o CopyActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CopyActivity) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o CopyActivityOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CopyActivity) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// List of outputs for the activity.
func (o CopyActivityOutput) Outputs() DatasetReferenceArrayOutput {
	return o.ApplyT(func(v CopyActivity) []DatasetReference { return v.Outputs }).(DatasetReferenceArrayOutput)
}

// Maximum number of concurrent sessions opened on the source or sink to avoid overloading the data store. Type: integer (or Expression with resultType integer), minimum: 0.
func (o CopyActivityOutput) ParallelCopies() pulumi.AnyOutput {
	return o.ApplyT(func(v CopyActivity) interface{} { return v.ParallelCopies }).(pulumi.AnyOutput)
}

// Activity policy.
func (o CopyActivityOutput) Policy() ActivityPolicyPtrOutput {
	return o.ApplyT(func(v CopyActivity) *ActivityPolicy { return v.Policy }).(ActivityPolicyPtrOutput)
}

// Preserve rules.
func (o CopyActivityOutput) Preserve() pulumi.ArrayOutput {
	return o.ApplyT(func(v CopyActivity) []interface{} { return v.Preserve }).(pulumi.ArrayOutput)
}

// Preserve Rules.
func (o CopyActivityOutput) PreserveRules() pulumi.ArrayOutput {
	return o.ApplyT(func(v CopyActivity) []interface{} { return v.PreserveRules }).(pulumi.ArrayOutput)
}

// Redirect incompatible row settings when EnableSkipIncompatibleRow is true.
func (o CopyActivityOutput) RedirectIncompatibleRowSettings() RedirectIncompatibleRowSettingsPtrOutput {
	return o.ApplyT(func(v CopyActivity) *RedirectIncompatibleRowSettings { return v.RedirectIncompatibleRowSettings }).(RedirectIncompatibleRowSettingsPtrOutput)
}

// Copy activity sink.
func (o CopyActivityOutput) Sink() pulumi.AnyOutput {
	return o.ApplyT(func(v CopyActivity) interface{} { return v.Sink }).(pulumi.AnyOutput)
}

// Specify the fault tolerance for data consistency.
func (o CopyActivityOutput) SkipErrorFile() SkipErrorFilePtrOutput {
	return o.ApplyT(func(v CopyActivity) *SkipErrorFile { return v.SkipErrorFile }).(SkipErrorFilePtrOutput)
}

// Copy activity source.
func (o CopyActivityOutput) Source() pulumi.AnyOutput {
	return o.ApplyT(func(v CopyActivity) interface{} { return v.Source }).(pulumi.AnyOutput)
}

// Specifies interim staging settings when EnableStaging is true.
func (o CopyActivityOutput) StagingSettings() StagingSettingsPtrOutput {
	return o.ApplyT(func(v CopyActivity) *StagingSettings { return v.StagingSettings }).(StagingSettingsPtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o CopyActivityOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CopyActivity) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Copy activity translator. If not specified, tabular translator is used.
func (o CopyActivityOutput) Translator() pulumi.AnyOutput {
	return o.ApplyT(func(v CopyActivity) interface{} { return v.Translator }).(pulumi.AnyOutput)
}

// Type of activity.
// Expected value is 'Copy'.
func (o CopyActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CopyActivity) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o CopyActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v CopyActivity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

// Whether to enable Data Consistency validation. Type: boolean (or Expression with resultType boolean).
func (o CopyActivityOutput) ValidateDataConsistency() pulumi.AnyOutput {
	return o.ApplyT(func(v CopyActivity) interface{} { return v.ValidateDataConsistency }).(pulumi.AnyOutput)
}

// Settings for copy activity log.
type CopyActivityLogSettings struct {
	// Specifies whether to enable reliable logging. Type: boolean (or Expression with resultType boolean).
	EnableReliableLogging interface{} `pulumi:"enableReliableLogging"`
	// Gets or sets the log level, support: Info, Warning. Type: string (or Expression with resultType string).
	LogLevel interface{} `pulumi:"logLevel"`
}

// CopyActivityLogSettingsInput is an input type that accepts CopyActivityLogSettingsArgs and CopyActivityLogSettingsOutput values.
// You can construct a concrete instance of `CopyActivityLogSettingsInput` via:
//
//	CopyActivityLogSettingsArgs{...}
type CopyActivityLogSettingsInput interface {
	pulumi.Input

	ToCopyActivityLogSettingsOutput() CopyActivityLogSettingsOutput
	ToCopyActivityLogSettingsOutputWithContext(context.Context) CopyActivityLogSettingsOutput
}

// Settings for copy activity log.
type CopyActivityLogSettingsArgs struct {
	// Specifies whether to enable reliable logging. Type: boolean (or Expression with resultType boolean).
	EnableReliableLogging pulumi.Input `pulumi:"enableReliableLogging"`
	// Gets or sets the log level, support: Info, Warning. Type: string (or Expression with resultType string).
	LogLevel pulumi.Input `pulumi:"logLevel"`
}

func (CopyActivityLogSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CopyActivityLogSettings)(nil)).Elem()
}

func (i CopyActivityLogSettingsArgs) ToCopyActivityLogSettingsOutput() CopyActivityLogSettingsOutput {
	return i.ToCopyActivityLogSettingsOutputWithContext(context.Background())
}

func (i CopyActivityLogSettingsArgs) ToCopyActivityLogSettingsOutputWithContext(ctx context.Context) CopyActivityLogSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CopyActivityLogSettingsOutput)
}

func (i CopyActivityLogSettingsArgs) ToCopyActivityLogSettingsPtrOutput() CopyActivityLogSettingsPtrOutput {
	return i.ToCopyActivityLogSettingsPtrOutputWithContext(context.Background())
}

func (i CopyActivityLogSettingsArgs) ToCopyActivityLogSettingsPtrOutputWithContext(ctx context.Context) CopyActivityLogSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CopyActivityLogSettingsOutput).ToCopyActivityLogSettingsPtrOutputWithContext(ctx)
}

// CopyActivityLogSettingsPtrInput is an input type that accepts CopyActivityLogSettingsArgs, CopyActivityLogSettingsPtr and CopyActivityLogSettingsPtrOutput values.
// You can construct a concrete instance of `CopyActivityLogSettingsPtrInput` via:
//
//	        CopyActivityLogSettingsArgs{...}
//
//	or:
//
//	        nil
type CopyActivityLogSettingsPtrInput interface {
	pulumi.Input

	ToCopyActivityLogSettingsPtrOutput() CopyActivityLogSettingsPtrOutput
	ToCopyActivityLogSettingsPtrOutputWithContext(context.Context) CopyActivityLogSettingsPtrOutput
}

type copyActivityLogSettingsPtrType CopyActivityLogSettingsArgs

func CopyActivityLogSettingsPtr(v *CopyActivityLogSettingsArgs) CopyActivityLogSettingsPtrInput {
	return (*copyActivityLogSettingsPtrType)(v)
}

func (*copyActivityLogSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CopyActivityLogSettings)(nil)).Elem()
}

func (i *copyActivityLogSettingsPtrType) ToCopyActivityLogSettingsPtrOutput() CopyActivityLogSettingsPtrOutput {
	return i.ToCopyActivityLogSettingsPtrOutputWithContext(context.Background())
}

func (i *copyActivityLogSettingsPtrType) ToCopyActivityLogSettingsPtrOutputWithContext(ctx context.Context) CopyActivityLogSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CopyActivityLogSettingsPtrOutput)
}

// Settings for copy activity log.
type CopyActivityLogSettingsOutput struct{ *pulumi.OutputState }

func (CopyActivityLogSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CopyActivityLogSettings)(nil)).Elem()
}

func (o CopyActivityLogSettingsOutput) ToCopyActivityLogSettingsOutput() CopyActivityLogSettingsOutput {
	return o
}

func (o CopyActivityLogSettingsOutput) ToCopyActivityLogSettingsOutputWithContext(ctx context.Context) CopyActivityLogSettingsOutput {
	return o
}

func (o CopyActivityLogSettingsOutput) ToCopyActivityLogSettingsPtrOutput() CopyActivityLogSettingsPtrOutput {
	return o.ToCopyActivityLogSettingsPtrOutputWithContext(context.Background())
}

func (o CopyActivityLogSettingsOutput) ToCopyActivityLogSettingsPtrOutputWithContext(ctx context.Context) CopyActivityLogSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CopyActivityLogSettings) *CopyActivityLogSettings {
		return &v
	}).(CopyActivityLogSettingsPtrOutput)
}

// Specifies whether to enable reliable logging. Type: boolean (or Expression with resultType boolean).
func (o CopyActivityLogSettingsOutput) EnableReliableLogging() pulumi.AnyOutput {
	return o.ApplyT(func(v CopyActivityLogSettings) interface{} { return v.EnableReliableLogging }).(pulumi.AnyOutput)
}

// Gets or sets the log level, support: Info, Warning. Type: string (or Expression with resultType string).
func (o CopyActivityLogSettingsOutput) LogLevel() pulumi.AnyOutput {
	return o.ApplyT(func(v CopyActivityLogSettings) interface{} { return v.LogLevel }).(pulumi.AnyOutput)
}

type CopyActivityLogSettingsPtrOutput struct{ *pulumi.OutputState }

func (CopyActivityLogSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CopyActivityLogSettings)(nil)).Elem()
}

func (o CopyActivityLogSettingsPtrOutput) ToCopyActivityLogSettingsPtrOutput() CopyActivityLogSettingsPtrOutput {
	return o
}

func (o CopyActivityLogSettingsPtrOutput) ToCopyActivityLogSettingsPtrOutputWithContext(ctx context.Context) CopyActivityLogSettingsPtrOutput {
	return o
}

func (o CopyActivityLogSettingsPtrOutput) Elem() CopyActivityLogSettingsOutput {
	return o.ApplyT(func(v *CopyActivityLogSettings) CopyActivityLogSettings {
		if v != nil {
			return *v
		}
		var ret CopyActivityLogSettings
		return ret
	}).(CopyActivityLogSettingsOutput)
}

// Specifies whether to enable reliable logging. Type: boolean (or Expression with resultType boolean).
func (o CopyActivityLogSettingsPtrOutput) EnableReliableLogging() pulumi.AnyOutput {
	return o.ApplyT(func(v *CopyActivityLogSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.EnableReliableLogging
	}).(pulumi.AnyOutput)
}

// Gets or sets the log level, support: Info, Warning. Type: string (or Expression with resultType string).
func (o CopyActivityLogSettingsPtrOutput) LogLevel() pulumi.AnyOutput {
	return o.ApplyT(func(v *CopyActivityLogSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.LogLevel
	}).(pulumi.AnyOutput)
}

// Settings for copy activity log.
type CopyActivityLogSettingsResponse struct {
	// Specifies whether to enable reliable logging. Type: boolean (or Expression with resultType boolean).
	EnableReliableLogging interface{} `pulumi:"enableReliableLogging"`
	// Gets or sets the log level, support: Info, Warning. Type: string (or Expression with resultType string).
	LogLevel interface{} `pulumi:"logLevel"`
}

// Settings for copy activity log.
type CopyActivityLogSettingsResponseOutput struct{ *pulumi.OutputState }

func (CopyActivityLogSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CopyActivityLogSettingsResponse)(nil)).Elem()
}

func (o CopyActivityLogSettingsResponseOutput) ToCopyActivityLogSettingsResponseOutput() CopyActivityLogSettingsResponseOutput {
	return o
}

func (o CopyActivityLogSettingsResponseOutput) ToCopyActivityLogSettingsResponseOutputWithContext(ctx context.Context) CopyActivityLogSettingsResponseOutput {
	return o
}

// Specifies whether to enable reliable logging. Type: boolean (or Expression with resultType boolean).
func (o CopyActivityLogSettingsResponseOutput) EnableReliableLogging() pulumi.AnyOutput {
	return o.ApplyT(func(v CopyActivityLogSettingsResponse) interface{} { return v.EnableReliableLogging }).(pulumi.AnyOutput)
}

// Gets or sets the log level, support: Info, Warning. Type: string (or Expression with resultType string).
func (o CopyActivityLogSettingsResponseOutput) LogLevel() pulumi.AnyOutput {
	return o.ApplyT(func(v CopyActivityLogSettingsResponse) interface{} { return v.LogLevel }).(pulumi.AnyOutput)
}

type CopyActivityLogSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (CopyActivityLogSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CopyActivityLogSettingsResponse)(nil)).Elem()
}

func (o CopyActivityLogSettingsResponsePtrOutput) ToCopyActivityLogSettingsResponsePtrOutput() CopyActivityLogSettingsResponsePtrOutput {
	return o
}

func (o CopyActivityLogSettingsResponsePtrOutput) ToCopyActivityLogSettingsResponsePtrOutputWithContext(ctx context.Context) CopyActivityLogSettingsResponsePtrOutput {
	return o
}

func (o CopyActivityLogSettingsResponsePtrOutput) Elem() CopyActivityLogSettingsResponseOutput {
	return o.ApplyT(func(v *CopyActivityLogSettingsResponse) CopyActivityLogSettingsResponse {
		if v != nil {
			return *v
		}
		var ret CopyActivityLogSettingsResponse
		return ret
	}).(CopyActivityLogSettingsResponseOutput)
}

// Specifies whether to enable reliable logging. Type: boolean (or Expression with resultType boolean).
func (o CopyActivityLogSettingsResponsePtrOutput) EnableReliableLogging() pulumi.AnyOutput {
	return o.ApplyT(func(v *CopyActivityLogSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.EnableReliableLogging
	}).(pulumi.AnyOutput)
}

// Gets or sets the log level, support: Info, Warning. Type: string (or Expression with resultType string).
func (o CopyActivityLogSettingsResponsePtrOutput) LogLevel() pulumi.AnyOutput {
	return o.ApplyT(func(v *CopyActivityLogSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.LogLevel
	}).(pulumi.AnyOutput)
}

// Copy activity.
type CopyActivityResponse struct {
	// Maximum number of data integration units that can be used to perform this data movement. Type: integer (or Expression with resultType integer), minimum: 0.
	DataIntegrationUnits interface{} `pulumi:"dataIntegrationUnits"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Whether to skip incompatible row. Default value is false. Type: boolean (or Expression with resultType boolean).
	EnableSkipIncompatibleRow interface{} `pulumi:"enableSkipIncompatibleRow"`
	// Specifies whether to copy data via an interim staging. Default value is false. Type: boolean (or Expression with resultType boolean).
	EnableStaging interface{} `pulumi:"enableStaging"`
	// List of inputs for the activity.
	Inputs []DatasetReferenceResponse `pulumi:"inputs"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Log settings customer needs provide when enabling log.
	LogSettings *LogSettingsResponse `pulumi:"logSettings"`
	// (Deprecated. Please use LogSettings) Log storage settings customer need to provide when enabling session log.
	LogStorageSettings *LogStorageSettingsResponse `pulumi:"logStorageSettings"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// List of outputs for the activity.
	Outputs []DatasetReferenceResponse `pulumi:"outputs"`
	// Maximum number of concurrent sessions opened on the source or sink to avoid overloading the data store. Type: integer (or Expression with resultType integer), minimum: 0.
	ParallelCopies interface{} `pulumi:"parallelCopies"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Preserve rules.
	Preserve []interface{} `pulumi:"preserve"`
	// Preserve Rules.
	PreserveRules []interface{} `pulumi:"preserveRules"`
	// Redirect incompatible row settings when EnableSkipIncompatibleRow is true.
	RedirectIncompatibleRowSettings *RedirectIncompatibleRowSettingsResponse `pulumi:"redirectIncompatibleRowSettings"`
	// Copy activity sink.
	Sink interface{} `pulumi:"sink"`
	// Specify the fault tolerance for data consistency.
	SkipErrorFile *SkipErrorFileResponse `pulumi:"skipErrorFile"`
	// Copy activity source.
	Source interface{} `pulumi:"source"`
	// Specifies interim staging settings when EnableStaging is true.
	StagingSettings *StagingSettingsResponse `pulumi:"stagingSettings"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Copy activity translator. If not specified, tabular translator is used.
	Translator interface{} `pulumi:"translator"`
	// Type of activity.
	// Expected value is 'Copy'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
	// Whether to enable Data Consistency validation. Type: boolean (or Expression with resultType boolean).
	ValidateDataConsistency interface{} `pulumi:"validateDataConsistency"`
}

// Copy activity.
type CopyActivityResponseOutput struct{ *pulumi.OutputState }

func (CopyActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CopyActivityResponse)(nil)).Elem()
}

func (o CopyActivityResponseOutput) ToCopyActivityResponseOutput() CopyActivityResponseOutput {
	return o
}

func (o CopyActivityResponseOutput) ToCopyActivityResponseOutputWithContext(ctx context.Context) CopyActivityResponseOutput {
	return o
}

// Maximum number of data integration units that can be used to perform this data movement. Type: integer (or Expression with resultType integer), minimum: 0.
func (o CopyActivityResponseOutput) DataIntegrationUnits() pulumi.AnyOutput {
	return o.ApplyT(func(v CopyActivityResponse) interface{} { return v.DataIntegrationUnits }).(pulumi.AnyOutput)
}

// Activity depends on condition.
func (o CopyActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v CopyActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o CopyActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CopyActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether to skip incompatible row. Default value is false. Type: boolean (or Expression with resultType boolean).
func (o CopyActivityResponseOutput) EnableSkipIncompatibleRow() pulumi.AnyOutput {
	return o.ApplyT(func(v CopyActivityResponse) interface{} { return v.EnableSkipIncompatibleRow }).(pulumi.AnyOutput)
}

// Specifies whether to copy data via an interim staging. Default value is false. Type: boolean (or Expression with resultType boolean).
func (o CopyActivityResponseOutput) EnableStaging() pulumi.AnyOutput {
	return o.ApplyT(func(v CopyActivityResponse) interface{} { return v.EnableStaging }).(pulumi.AnyOutput)
}

// List of inputs for the activity.
func (o CopyActivityResponseOutput) Inputs() DatasetReferenceResponseArrayOutput {
	return o.ApplyT(func(v CopyActivityResponse) []DatasetReferenceResponse { return v.Inputs }).(DatasetReferenceResponseArrayOutput)
}

// Linked service reference.
func (o CopyActivityResponseOutput) LinkedServiceName() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v CopyActivityResponse) *LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponsePtrOutput)
}

// Log settings customer needs provide when enabling log.
func (o CopyActivityResponseOutput) LogSettings() LogSettingsResponsePtrOutput {
	return o.ApplyT(func(v CopyActivityResponse) *LogSettingsResponse { return v.LogSettings }).(LogSettingsResponsePtrOutput)
}

// (Deprecated. Please use LogSettings) Log storage settings customer need to provide when enabling session log.
func (o CopyActivityResponseOutput) LogStorageSettings() LogStorageSettingsResponsePtrOutput {
	return o.ApplyT(func(v CopyActivityResponse) *LogStorageSettingsResponse { return v.LogStorageSettings }).(LogStorageSettingsResponsePtrOutput)
}

// Activity name.
func (o CopyActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CopyActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o CopyActivityResponseOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CopyActivityResponse) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// List of outputs for the activity.
func (o CopyActivityResponseOutput) Outputs() DatasetReferenceResponseArrayOutput {
	return o.ApplyT(func(v CopyActivityResponse) []DatasetReferenceResponse { return v.Outputs }).(DatasetReferenceResponseArrayOutput)
}

// Maximum number of concurrent sessions opened on the source or sink to avoid overloading the data store. Type: integer (or Expression with resultType integer), minimum: 0.
func (o CopyActivityResponseOutput) ParallelCopies() pulumi.AnyOutput {
	return o.ApplyT(func(v CopyActivityResponse) interface{} { return v.ParallelCopies }).(pulumi.AnyOutput)
}

// Activity policy.
func (o CopyActivityResponseOutput) Policy() ActivityPolicyResponsePtrOutput {
	return o.ApplyT(func(v CopyActivityResponse) *ActivityPolicyResponse { return v.Policy }).(ActivityPolicyResponsePtrOutput)
}

// Preserve rules.
func (o CopyActivityResponseOutput) Preserve() pulumi.ArrayOutput {
	return o.ApplyT(func(v CopyActivityResponse) []interface{} { return v.Preserve }).(pulumi.ArrayOutput)
}

// Preserve Rules.
func (o CopyActivityResponseOutput) PreserveRules() pulumi.ArrayOutput {
	return o.ApplyT(func(v CopyActivityResponse) []interface{} { return v.PreserveRules }).(pulumi.ArrayOutput)
}

// Redirect incompatible row settings when EnableSkipIncompatibleRow is true.
func (o CopyActivityResponseOutput) RedirectIncompatibleRowSettings() RedirectIncompatibleRowSettingsResponsePtrOutput {
	return o.ApplyT(func(v CopyActivityResponse) *RedirectIncompatibleRowSettingsResponse {
		return v.RedirectIncompatibleRowSettings
	}).(RedirectIncompatibleRowSettingsResponsePtrOutput)
}

// Copy activity sink.
func (o CopyActivityResponseOutput) Sink() pulumi.AnyOutput {
	return o.ApplyT(func(v CopyActivityResponse) interface{} { return v.Sink }).(pulumi.AnyOutput)
}

// Specify the fault tolerance for data consistency.
func (o CopyActivityResponseOutput) SkipErrorFile() SkipErrorFileResponsePtrOutput {
	return o.ApplyT(func(v CopyActivityResponse) *SkipErrorFileResponse { return v.SkipErrorFile }).(SkipErrorFileResponsePtrOutput)
}

// Copy activity source.
func (o CopyActivityResponseOutput) Source() pulumi.AnyOutput {
	return o.ApplyT(func(v CopyActivityResponse) interface{} { return v.Source }).(pulumi.AnyOutput)
}

// Specifies interim staging settings when EnableStaging is true.
func (o CopyActivityResponseOutput) StagingSettings() StagingSettingsResponsePtrOutput {
	return o.ApplyT(func(v CopyActivityResponse) *StagingSettingsResponse { return v.StagingSettings }).(StagingSettingsResponsePtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o CopyActivityResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CopyActivityResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Copy activity translator. If not specified, tabular translator is used.
func (o CopyActivityResponseOutput) Translator() pulumi.AnyOutput {
	return o.ApplyT(func(v CopyActivityResponse) interface{} { return v.Translator }).(pulumi.AnyOutput)
}

// Type of activity.
// Expected value is 'Copy'.
func (o CopyActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CopyActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o CopyActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v CopyActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

// Whether to enable Data Consistency validation. Type: boolean (or Expression with resultType boolean).
func (o CopyActivityResponseOutput) ValidateDataConsistency() pulumi.AnyOutput {
	return o.ApplyT(func(v CopyActivityResponse) interface{} { return v.ValidateDataConsistency }).(pulumi.AnyOutput)
}

// CopyComputeScale properties for managed integration runtime.
type CopyComputeScaleProperties struct {
	// DIU number setting reserved for copy activity execution. Supported values are multiples of 4 in range 4-256.
	DataIntegrationUnit *int `pulumi:"dataIntegrationUnit"`
	// Time to live (in minutes) setting of integration runtime which will execute copy activity.
	TimeToLive *int `pulumi:"timeToLive"`
}

// CopyComputeScalePropertiesInput is an input type that accepts CopyComputeScalePropertiesArgs and CopyComputeScalePropertiesOutput values.
// You can construct a concrete instance of `CopyComputeScalePropertiesInput` via:
//
//	CopyComputeScalePropertiesArgs{...}
type CopyComputeScalePropertiesInput interface {
	pulumi.Input

	ToCopyComputeScalePropertiesOutput() CopyComputeScalePropertiesOutput
	ToCopyComputeScalePropertiesOutputWithContext(context.Context) CopyComputeScalePropertiesOutput
}

// CopyComputeScale properties for managed integration runtime.
type CopyComputeScalePropertiesArgs struct {
	// DIU number setting reserved for copy activity execution. Supported values are multiples of 4 in range 4-256.
	DataIntegrationUnit pulumi.IntPtrInput `pulumi:"dataIntegrationUnit"`
	// Time to live (in minutes) setting of integration runtime which will execute copy activity.
	TimeToLive pulumi.IntPtrInput `pulumi:"timeToLive"`
}

func (CopyComputeScalePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CopyComputeScaleProperties)(nil)).Elem()
}

func (i CopyComputeScalePropertiesArgs) ToCopyComputeScalePropertiesOutput() CopyComputeScalePropertiesOutput {
	return i.ToCopyComputeScalePropertiesOutputWithContext(context.Background())
}

func (i CopyComputeScalePropertiesArgs) ToCopyComputeScalePropertiesOutputWithContext(ctx context.Context) CopyComputeScalePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CopyComputeScalePropertiesOutput)
}

func (i CopyComputeScalePropertiesArgs) ToCopyComputeScalePropertiesPtrOutput() CopyComputeScalePropertiesPtrOutput {
	return i.ToCopyComputeScalePropertiesPtrOutputWithContext(context.Background())
}

func (i CopyComputeScalePropertiesArgs) ToCopyComputeScalePropertiesPtrOutputWithContext(ctx context.Context) CopyComputeScalePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CopyComputeScalePropertiesOutput).ToCopyComputeScalePropertiesPtrOutputWithContext(ctx)
}

// CopyComputeScalePropertiesPtrInput is an input type that accepts CopyComputeScalePropertiesArgs, CopyComputeScalePropertiesPtr and CopyComputeScalePropertiesPtrOutput values.
// You can construct a concrete instance of `CopyComputeScalePropertiesPtrInput` via:
//
//	        CopyComputeScalePropertiesArgs{...}
//
//	or:
//
//	        nil
type CopyComputeScalePropertiesPtrInput interface {
	pulumi.Input

	ToCopyComputeScalePropertiesPtrOutput() CopyComputeScalePropertiesPtrOutput
	ToCopyComputeScalePropertiesPtrOutputWithContext(context.Context) CopyComputeScalePropertiesPtrOutput
}

type copyComputeScalePropertiesPtrType CopyComputeScalePropertiesArgs

func CopyComputeScalePropertiesPtr(v *CopyComputeScalePropertiesArgs) CopyComputeScalePropertiesPtrInput {
	return (*copyComputeScalePropertiesPtrType)(v)
}

func (*copyComputeScalePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CopyComputeScaleProperties)(nil)).Elem()
}

func (i *copyComputeScalePropertiesPtrType) ToCopyComputeScalePropertiesPtrOutput() CopyComputeScalePropertiesPtrOutput {
	return i.ToCopyComputeScalePropertiesPtrOutputWithContext(context.Background())
}

func (i *copyComputeScalePropertiesPtrType) ToCopyComputeScalePropertiesPtrOutputWithContext(ctx context.Context) CopyComputeScalePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CopyComputeScalePropertiesPtrOutput)
}

// CopyComputeScale properties for managed integration runtime.
type CopyComputeScalePropertiesOutput struct{ *pulumi.OutputState }

func (CopyComputeScalePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CopyComputeScaleProperties)(nil)).Elem()
}

func (o CopyComputeScalePropertiesOutput) ToCopyComputeScalePropertiesOutput() CopyComputeScalePropertiesOutput {
	return o
}

func (o CopyComputeScalePropertiesOutput) ToCopyComputeScalePropertiesOutputWithContext(ctx context.Context) CopyComputeScalePropertiesOutput {
	return o
}

func (o CopyComputeScalePropertiesOutput) ToCopyComputeScalePropertiesPtrOutput() CopyComputeScalePropertiesPtrOutput {
	return o.ToCopyComputeScalePropertiesPtrOutputWithContext(context.Background())
}

func (o CopyComputeScalePropertiesOutput) ToCopyComputeScalePropertiesPtrOutputWithContext(ctx context.Context) CopyComputeScalePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CopyComputeScaleProperties) *CopyComputeScaleProperties {
		return &v
	}).(CopyComputeScalePropertiesPtrOutput)
}

// DIU number setting reserved for copy activity execution. Supported values are multiples of 4 in range 4-256.
func (o CopyComputeScalePropertiesOutput) DataIntegrationUnit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CopyComputeScaleProperties) *int { return v.DataIntegrationUnit }).(pulumi.IntPtrOutput)
}

// Time to live (in minutes) setting of integration runtime which will execute copy activity.
func (o CopyComputeScalePropertiesOutput) TimeToLive() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CopyComputeScaleProperties) *int { return v.TimeToLive }).(pulumi.IntPtrOutput)
}

type CopyComputeScalePropertiesPtrOutput struct{ *pulumi.OutputState }

func (CopyComputeScalePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CopyComputeScaleProperties)(nil)).Elem()
}

func (o CopyComputeScalePropertiesPtrOutput) ToCopyComputeScalePropertiesPtrOutput() CopyComputeScalePropertiesPtrOutput {
	return o
}

func (o CopyComputeScalePropertiesPtrOutput) ToCopyComputeScalePropertiesPtrOutputWithContext(ctx context.Context) CopyComputeScalePropertiesPtrOutput {
	return o
}

func (o CopyComputeScalePropertiesPtrOutput) Elem() CopyComputeScalePropertiesOutput {
	return o.ApplyT(func(v *CopyComputeScaleProperties) CopyComputeScaleProperties {
		if v != nil {
			return *v
		}
		var ret CopyComputeScaleProperties
		return ret
	}).(CopyComputeScalePropertiesOutput)
}

// DIU number setting reserved for copy activity execution. Supported values are multiples of 4 in range 4-256.
func (o CopyComputeScalePropertiesPtrOutput) DataIntegrationUnit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CopyComputeScaleProperties) *int {
		if v == nil {
			return nil
		}
		return v.DataIntegrationUnit
	}).(pulumi.IntPtrOutput)
}

// Time to live (in minutes) setting of integration runtime which will execute copy activity.
func (o CopyComputeScalePropertiesPtrOutput) TimeToLive() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CopyComputeScaleProperties) *int {
		if v == nil {
			return nil
		}
		return v.TimeToLive
	}).(pulumi.IntPtrOutput)
}

// CopyComputeScale properties for managed integration runtime.
type CopyComputeScalePropertiesResponse struct {
	// DIU number setting reserved for copy activity execution. Supported values are multiples of 4 in range 4-256.
	DataIntegrationUnit *int `pulumi:"dataIntegrationUnit"`
	// Time to live (in minutes) setting of integration runtime which will execute copy activity.
	TimeToLive *int `pulumi:"timeToLive"`
}

// CopyComputeScale properties for managed integration runtime.
type CopyComputeScalePropertiesResponseOutput struct{ *pulumi.OutputState }

func (CopyComputeScalePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CopyComputeScalePropertiesResponse)(nil)).Elem()
}

func (o CopyComputeScalePropertiesResponseOutput) ToCopyComputeScalePropertiesResponseOutput() CopyComputeScalePropertiesResponseOutput {
	return o
}

func (o CopyComputeScalePropertiesResponseOutput) ToCopyComputeScalePropertiesResponseOutputWithContext(ctx context.Context) CopyComputeScalePropertiesResponseOutput {
	return o
}

// DIU number setting reserved for copy activity execution. Supported values are multiples of 4 in range 4-256.
func (o CopyComputeScalePropertiesResponseOutput) DataIntegrationUnit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CopyComputeScalePropertiesResponse) *int { return v.DataIntegrationUnit }).(pulumi.IntPtrOutput)
}

// Time to live (in minutes) setting of integration runtime which will execute copy activity.
func (o CopyComputeScalePropertiesResponseOutput) TimeToLive() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CopyComputeScalePropertiesResponse) *int { return v.TimeToLive }).(pulumi.IntPtrOutput)
}

type CopyComputeScalePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (CopyComputeScalePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CopyComputeScalePropertiesResponse)(nil)).Elem()
}

func (o CopyComputeScalePropertiesResponsePtrOutput) ToCopyComputeScalePropertiesResponsePtrOutput() CopyComputeScalePropertiesResponsePtrOutput {
	return o
}

func (o CopyComputeScalePropertiesResponsePtrOutput) ToCopyComputeScalePropertiesResponsePtrOutputWithContext(ctx context.Context) CopyComputeScalePropertiesResponsePtrOutput {
	return o
}

func (o CopyComputeScalePropertiesResponsePtrOutput) Elem() CopyComputeScalePropertiesResponseOutput {
	return o.ApplyT(func(v *CopyComputeScalePropertiesResponse) CopyComputeScalePropertiesResponse {
		if v != nil {
			return *v
		}
		var ret CopyComputeScalePropertiesResponse
		return ret
	}).(CopyComputeScalePropertiesResponseOutput)
}

// DIU number setting reserved for copy activity execution. Supported values are multiples of 4 in range 4-256.
func (o CopyComputeScalePropertiesResponsePtrOutput) DataIntegrationUnit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CopyComputeScalePropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.DataIntegrationUnit
	}).(pulumi.IntPtrOutput)
}

// Time to live (in minutes) setting of integration runtime which will execute copy activity.
func (o CopyComputeScalePropertiesResponsePtrOutput) TimeToLive() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CopyComputeScalePropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.TimeToLive
	}).(pulumi.IntPtrOutput)
}

// Microsoft Azure Cosmos Database (CosmosDB) linked service.
type CosmosDbLinkedService struct {
	// The endpoint of the Azure CosmosDB account. Type: string (or Expression with resultType string)
	AccountEndpoint interface{} `pulumi:"accountEndpoint"`
	// The account key of the Azure CosmosDB account. Type: SecureString or AzureKeyVaultSecretReference.
	AccountKey interface{} `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection mode used to access CosmosDB account. Type: string.
	ConnectionMode *string `pulumi:"connectionMode"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// The name of the database. Type: string (or Expression with resultType string)
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential interface{} `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string.
	ServicePrincipalCredentialType interface{} `pulumi:"servicePrincipalCredentialType"`
	// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'CosmosDb'.
	Type string `pulumi:"type"`
}

// CosmosDbLinkedServiceInput is an input type that accepts CosmosDbLinkedServiceArgs and CosmosDbLinkedServiceOutput values.
// You can construct a concrete instance of `CosmosDbLinkedServiceInput` via:
//
//	CosmosDbLinkedServiceArgs{...}
type CosmosDbLinkedServiceInput interface {
	pulumi.Input

	ToCosmosDbLinkedServiceOutput() CosmosDbLinkedServiceOutput
	ToCosmosDbLinkedServiceOutputWithContext(context.Context) CosmosDbLinkedServiceOutput
}

// Microsoft Azure Cosmos Database (CosmosDB) linked service.
type CosmosDbLinkedServiceArgs struct {
	// The endpoint of the Azure CosmosDB account. Type: string (or Expression with resultType string)
	AccountEndpoint pulumi.Input `pulumi:"accountEndpoint"`
	// The account key of the Azure CosmosDB account. Type: SecureString or AzureKeyVaultSecretReference.
	AccountKey pulumi.Input `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType pulumi.Input `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The connection mode used to access CosmosDB account. Type: string.
	ConnectionMode pulumi.StringPtrInput `pulumi:"connectionMode"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// The credential reference containing authentication information.
	Credential CredentialReferencePtrInput `pulumi:"credential"`
	// The name of the database. Type: string (or Expression with resultType string)
	Database pulumi.Input `pulumi:"database"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential pulumi.Input `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string.
	ServicePrincipalCredentialType pulumi.Input `pulumi:"servicePrincipalCredentialType"`
	// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant pulumi.Input `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'CosmosDb'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CosmosDbLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbLinkedService)(nil)).Elem()
}

func (i CosmosDbLinkedServiceArgs) ToCosmosDbLinkedServiceOutput() CosmosDbLinkedServiceOutput {
	return i.ToCosmosDbLinkedServiceOutputWithContext(context.Background())
}

func (i CosmosDbLinkedServiceArgs) ToCosmosDbLinkedServiceOutputWithContext(ctx context.Context) CosmosDbLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosmosDbLinkedServiceOutput)
}

// Microsoft Azure Cosmos Database (CosmosDB) linked service.
type CosmosDbLinkedServiceOutput struct{ *pulumi.OutputState }

func (CosmosDbLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbLinkedService)(nil)).Elem()
}

func (o CosmosDbLinkedServiceOutput) ToCosmosDbLinkedServiceOutput() CosmosDbLinkedServiceOutput {
	return o
}

func (o CosmosDbLinkedServiceOutput) ToCosmosDbLinkedServiceOutputWithContext(ctx context.Context) CosmosDbLinkedServiceOutput {
	return o
}

// The endpoint of the Azure CosmosDB account. Type: string (or Expression with resultType string)
func (o CosmosDbLinkedServiceOutput) AccountEndpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbLinkedService) interface{} { return v.AccountEndpoint }).(pulumi.AnyOutput)
}

// The account key of the Azure CosmosDB account. Type: SecureString or AzureKeyVaultSecretReference.
func (o CosmosDbLinkedServiceOutput) AccountKey() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbLinkedService) interface{} { return v.AccountKey }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o CosmosDbLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CosmosDbLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
func (o CosmosDbLinkedServiceOutput) AzureCloudType() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbLinkedService) interface{} { return v.AzureCloudType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o CosmosDbLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v CosmosDbLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The connection mode used to access CosmosDB account. Type: string.
func (o CosmosDbLinkedServiceOutput) ConnectionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CosmosDbLinkedService) *string { return v.ConnectionMode }).(pulumi.StringPtrOutput)
}

// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o CosmosDbLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// The credential reference containing authentication information.
func (o CosmosDbLinkedServiceOutput) Credential() CredentialReferencePtrOutput {
	return o.ApplyT(func(v CosmosDbLinkedService) *CredentialReference { return v.Credential }).(CredentialReferencePtrOutput)
}

// The name of the database. Type: string (or Expression with resultType string)
func (o CosmosDbLinkedServiceOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbLinkedService) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Linked service description.
func (o CosmosDbLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CosmosDbLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o CosmosDbLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CosmosDbLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o CosmosDbLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v CosmosDbLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
func (o CosmosDbLinkedServiceOutput) ServicePrincipalCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbLinkedService) interface{} { return v.ServicePrincipalCredential }).(pulumi.AnyOutput)
}

// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string.
func (o CosmosDbLinkedServiceOutput) ServicePrincipalCredentialType() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbLinkedService) interface{} { return v.ServicePrincipalCredentialType }).(pulumi.AnyOutput)
}

// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
func (o CosmosDbLinkedServiceOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbLinkedService) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o CosmosDbLinkedServiceOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbLinkedService) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'CosmosDb'.
func (o CosmosDbLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CosmosDbLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Microsoft Azure Cosmos Database (CosmosDB) linked service.
type CosmosDbLinkedServiceResponse struct {
	// The endpoint of the Azure CosmosDB account. Type: string (or Expression with resultType string)
	AccountEndpoint interface{} `pulumi:"accountEndpoint"`
	// The account key of the Azure CosmosDB account. Type: SecureString or AzureKeyVaultSecretReference.
	AccountKey interface{} `pulumi:"accountKey"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
	AzureCloudType interface{} `pulumi:"azureCloudType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection mode used to access CosmosDB account. Type: string.
	ConnectionMode *string `pulumi:"connectionMode"`
	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// The name of the database. Type: string (or Expression with resultType string)
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential interface{} `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string.
	ServicePrincipalCredentialType interface{} `pulumi:"servicePrincipalCredentialType"`
	// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'CosmosDb'.
	Type string `pulumi:"type"`
}

// Microsoft Azure Cosmos Database (CosmosDB) linked service.
type CosmosDbLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (CosmosDbLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbLinkedServiceResponse)(nil)).Elem()
}

func (o CosmosDbLinkedServiceResponseOutput) ToCosmosDbLinkedServiceResponseOutput() CosmosDbLinkedServiceResponseOutput {
	return o
}

func (o CosmosDbLinkedServiceResponseOutput) ToCosmosDbLinkedServiceResponseOutputWithContext(ctx context.Context) CosmosDbLinkedServiceResponseOutput {
	return o
}

// The endpoint of the Azure CosmosDB account. Type: string (or Expression with resultType string)
func (o CosmosDbLinkedServiceResponseOutput) AccountEndpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbLinkedServiceResponse) interface{} { return v.AccountEndpoint }).(pulumi.AnyOutput)
}

// The account key of the Azure CosmosDB account. Type: SecureString or AzureKeyVaultSecretReference.
func (o CosmosDbLinkedServiceResponseOutput) AccountKey() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbLinkedServiceResponse) interface{} { return v.AccountKey }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o CosmosDbLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CosmosDbLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
func (o CosmosDbLinkedServiceResponseOutput) AzureCloudType() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbLinkedServiceResponse) interface{} { return v.AzureCloudType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o CosmosDbLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v CosmosDbLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The connection mode used to access CosmosDB account. Type: string.
func (o CosmosDbLinkedServiceResponseOutput) ConnectionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CosmosDbLinkedServiceResponse) *string { return v.ConnectionMode }).(pulumi.StringPtrOutput)
}

// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o CosmosDbLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// The credential reference containing authentication information.
func (o CosmosDbLinkedServiceResponseOutput) Credential() CredentialReferenceResponsePtrOutput {
	return o.ApplyT(func(v CosmosDbLinkedServiceResponse) *CredentialReferenceResponse { return v.Credential }).(CredentialReferenceResponsePtrOutput)
}

// The name of the database. Type: string (or Expression with resultType string)
func (o CosmosDbLinkedServiceResponseOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbLinkedServiceResponse) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Linked service description.
func (o CosmosDbLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CosmosDbLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o CosmosDbLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CosmosDbLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o CosmosDbLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v CosmosDbLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
func (o CosmosDbLinkedServiceResponseOutput) ServicePrincipalCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbLinkedServiceResponse) interface{} { return v.ServicePrincipalCredential }).(pulumi.AnyOutput)
}

// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string.
func (o CosmosDbLinkedServiceResponseOutput) ServicePrincipalCredentialType() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbLinkedServiceResponse) interface{} { return v.ServicePrincipalCredentialType }).(pulumi.AnyOutput)
}

// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
func (o CosmosDbLinkedServiceResponseOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbLinkedServiceResponse) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
func (o CosmosDbLinkedServiceResponseOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbLinkedServiceResponse) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'CosmosDb'.
func (o CosmosDbLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CosmosDbLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The CosmosDB (MongoDB API) database dataset.
type CosmosDbMongoDbApiCollectionDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The collection name of the CosmosDB (MongoDB API) database. Type: string (or Expression with resultType string).
	Collection interface{} `pulumi:"collection"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'CosmosDbMongoDbApiCollection'.
	Type string `pulumi:"type"`
}

// CosmosDbMongoDbApiCollectionDatasetInput is an input type that accepts CosmosDbMongoDbApiCollectionDatasetArgs and CosmosDbMongoDbApiCollectionDatasetOutput values.
// You can construct a concrete instance of `CosmosDbMongoDbApiCollectionDatasetInput` via:
//
//	CosmosDbMongoDbApiCollectionDatasetArgs{...}
type CosmosDbMongoDbApiCollectionDatasetInput interface {
	pulumi.Input

	ToCosmosDbMongoDbApiCollectionDatasetOutput() CosmosDbMongoDbApiCollectionDatasetOutput
	ToCosmosDbMongoDbApiCollectionDatasetOutputWithContext(context.Context) CosmosDbMongoDbApiCollectionDatasetOutput
}

// The CosmosDB (MongoDB API) database dataset.
type CosmosDbMongoDbApiCollectionDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The collection name of the CosmosDB (MongoDB API) database. Type: string (or Expression with resultType string).
	Collection pulumi.Input `pulumi:"collection"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'CosmosDbMongoDbApiCollection'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CosmosDbMongoDbApiCollectionDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbMongoDbApiCollectionDataset)(nil)).Elem()
}

func (i CosmosDbMongoDbApiCollectionDatasetArgs) ToCosmosDbMongoDbApiCollectionDatasetOutput() CosmosDbMongoDbApiCollectionDatasetOutput {
	return i.ToCosmosDbMongoDbApiCollectionDatasetOutputWithContext(context.Background())
}

func (i CosmosDbMongoDbApiCollectionDatasetArgs) ToCosmosDbMongoDbApiCollectionDatasetOutputWithContext(ctx context.Context) CosmosDbMongoDbApiCollectionDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosmosDbMongoDbApiCollectionDatasetOutput)
}

// The CosmosDB (MongoDB API) database dataset.
type CosmosDbMongoDbApiCollectionDatasetOutput struct{ *pulumi.OutputState }

func (CosmosDbMongoDbApiCollectionDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbMongoDbApiCollectionDataset)(nil)).Elem()
}

func (o CosmosDbMongoDbApiCollectionDatasetOutput) ToCosmosDbMongoDbApiCollectionDatasetOutput() CosmosDbMongoDbApiCollectionDatasetOutput {
	return o
}

func (o CosmosDbMongoDbApiCollectionDatasetOutput) ToCosmosDbMongoDbApiCollectionDatasetOutputWithContext(ctx context.Context) CosmosDbMongoDbApiCollectionDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o CosmosDbMongoDbApiCollectionDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiCollectionDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The collection name of the CosmosDB (MongoDB API) database. Type: string (or Expression with resultType string).
func (o CosmosDbMongoDbApiCollectionDatasetOutput) Collection() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiCollectionDataset) interface{} { return v.Collection }).(pulumi.AnyOutput)
}

// Dataset description.
func (o CosmosDbMongoDbApiCollectionDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiCollectionDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o CosmosDbMongoDbApiCollectionDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiCollectionDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o CosmosDbMongoDbApiCollectionDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiCollectionDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o CosmosDbMongoDbApiCollectionDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiCollectionDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o CosmosDbMongoDbApiCollectionDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiCollectionDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o CosmosDbMongoDbApiCollectionDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiCollectionDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'CosmosDbMongoDbApiCollection'.
func (o CosmosDbMongoDbApiCollectionDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiCollectionDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The CosmosDB (MongoDB API) database dataset.
type CosmosDbMongoDbApiCollectionDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The collection name of the CosmosDB (MongoDB API) database. Type: string (or Expression with resultType string).
	Collection interface{} `pulumi:"collection"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'CosmosDbMongoDbApiCollection'.
	Type string `pulumi:"type"`
}

// The CosmosDB (MongoDB API) database dataset.
type CosmosDbMongoDbApiCollectionDatasetResponseOutput struct{ *pulumi.OutputState }

func (CosmosDbMongoDbApiCollectionDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbMongoDbApiCollectionDatasetResponse)(nil)).Elem()
}

func (o CosmosDbMongoDbApiCollectionDatasetResponseOutput) ToCosmosDbMongoDbApiCollectionDatasetResponseOutput() CosmosDbMongoDbApiCollectionDatasetResponseOutput {
	return o
}

func (o CosmosDbMongoDbApiCollectionDatasetResponseOutput) ToCosmosDbMongoDbApiCollectionDatasetResponseOutputWithContext(ctx context.Context) CosmosDbMongoDbApiCollectionDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o CosmosDbMongoDbApiCollectionDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiCollectionDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The collection name of the CosmosDB (MongoDB API) database. Type: string (or Expression with resultType string).
func (o CosmosDbMongoDbApiCollectionDatasetResponseOutput) Collection() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiCollectionDatasetResponse) interface{} { return v.Collection }).(pulumi.AnyOutput)
}

// Dataset description.
func (o CosmosDbMongoDbApiCollectionDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiCollectionDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o CosmosDbMongoDbApiCollectionDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiCollectionDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o CosmosDbMongoDbApiCollectionDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiCollectionDatasetResponse) LinkedServiceReferenceResponse {
		return v.LinkedServiceName
	}).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o CosmosDbMongoDbApiCollectionDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiCollectionDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o CosmosDbMongoDbApiCollectionDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiCollectionDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o CosmosDbMongoDbApiCollectionDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiCollectionDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'CosmosDbMongoDbApiCollection'.
func (o CosmosDbMongoDbApiCollectionDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiCollectionDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for CosmosDB (MongoDB API) data source.
type CosmosDbMongoDbApiLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The CosmosDB (MongoDB API) connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The name of the CosmosDB (MongoDB API) database that you want to access. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Whether the CosmosDB (MongoDB API) server version is higher than 3.2. The default value is false. Type: boolean (or Expression with resultType boolean).
	IsServerVersionAbove32 interface{} `pulumi:"isServerVersionAbove32"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'CosmosDbMongoDbApi'.
	Type string `pulumi:"type"`
}

// CosmosDbMongoDbApiLinkedServiceInput is an input type that accepts CosmosDbMongoDbApiLinkedServiceArgs and CosmosDbMongoDbApiLinkedServiceOutput values.
// You can construct a concrete instance of `CosmosDbMongoDbApiLinkedServiceInput` via:
//
//	CosmosDbMongoDbApiLinkedServiceArgs{...}
type CosmosDbMongoDbApiLinkedServiceInput interface {
	pulumi.Input

	ToCosmosDbMongoDbApiLinkedServiceOutput() CosmosDbMongoDbApiLinkedServiceOutput
	ToCosmosDbMongoDbApiLinkedServiceOutputWithContext(context.Context) CosmosDbMongoDbApiLinkedServiceOutput
}

// Linked service for CosmosDB (MongoDB API) data source.
type CosmosDbMongoDbApiLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The CosmosDB (MongoDB API) connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// The name of the CosmosDB (MongoDB API) database that you want to access. Type: string (or Expression with resultType string).
	Database pulumi.Input `pulumi:"database"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Whether the CosmosDB (MongoDB API) server version is higher than 3.2. The default value is false. Type: boolean (or Expression with resultType boolean).
	IsServerVersionAbove32 pulumi.Input `pulumi:"isServerVersionAbove32"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'CosmosDbMongoDbApi'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CosmosDbMongoDbApiLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbMongoDbApiLinkedService)(nil)).Elem()
}

func (i CosmosDbMongoDbApiLinkedServiceArgs) ToCosmosDbMongoDbApiLinkedServiceOutput() CosmosDbMongoDbApiLinkedServiceOutput {
	return i.ToCosmosDbMongoDbApiLinkedServiceOutputWithContext(context.Background())
}

func (i CosmosDbMongoDbApiLinkedServiceArgs) ToCosmosDbMongoDbApiLinkedServiceOutputWithContext(ctx context.Context) CosmosDbMongoDbApiLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosmosDbMongoDbApiLinkedServiceOutput)
}

// Linked service for CosmosDB (MongoDB API) data source.
type CosmosDbMongoDbApiLinkedServiceOutput struct{ *pulumi.OutputState }

func (CosmosDbMongoDbApiLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbMongoDbApiLinkedService)(nil)).Elem()
}

func (o CosmosDbMongoDbApiLinkedServiceOutput) ToCosmosDbMongoDbApiLinkedServiceOutput() CosmosDbMongoDbApiLinkedServiceOutput {
	return o
}

func (o CosmosDbMongoDbApiLinkedServiceOutput) ToCosmosDbMongoDbApiLinkedServiceOutputWithContext(ctx context.Context) CosmosDbMongoDbApiLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o CosmosDbMongoDbApiLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o CosmosDbMongoDbApiLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The CosmosDB (MongoDB API) connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o CosmosDbMongoDbApiLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// The name of the CosmosDB (MongoDB API) database that you want to access. Type: string (or Expression with resultType string).
func (o CosmosDbMongoDbApiLinkedServiceOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiLinkedService) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Linked service description.
func (o CosmosDbMongoDbApiLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether the CosmosDB (MongoDB API) server version is higher than 3.2. The default value is false. Type: boolean (or Expression with resultType boolean).
func (o CosmosDbMongoDbApiLinkedServiceOutput) IsServerVersionAbove32() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiLinkedService) interface{} { return v.IsServerVersionAbove32 }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o CosmosDbMongoDbApiLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
// Expected value is 'CosmosDbMongoDbApi'.
func (o CosmosDbMongoDbApiLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for CosmosDB (MongoDB API) data source.
type CosmosDbMongoDbApiLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The CosmosDB (MongoDB API) connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The name of the CosmosDB (MongoDB API) database that you want to access. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Whether the CosmosDB (MongoDB API) server version is higher than 3.2. The default value is false. Type: boolean (or Expression with resultType boolean).
	IsServerVersionAbove32 interface{} `pulumi:"isServerVersionAbove32"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'CosmosDbMongoDbApi'.
	Type string `pulumi:"type"`
}

// Linked service for CosmosDB (MongoDB API) data source.
type CosmosDbMongoDbApiLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (CosmosDbMongoDbApiLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbMongoDbApiLinkedServiceResponse)(nil)).Elem()
}

func (o CosmosDbMongoDbApiLinkedServiceResponseOutput) ToCosmosDbMongoDbApiLinkedServiceResponseOutput() CosmosDbMongoDbApiLinkedServiceResponseOutput {
	return o
}

func (o CosmosDbMongoDbApiLinkedServiceResponseOutput) ToCosmosDbMongoDbApiLinkedServiceResponseOutputWithContext(ctx context.Context) CosmosDbMongoDbApiLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o CosmosDbMongoDbApiLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o CosmosDbMongoDbApiLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The CosmosDB (MongoDB API) connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o CosmosDbMongoDbApiLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// The name of the CosmosDB (MongoDB API) database that you want to access. Type: string (or Expression with resultType string).
func (o CosmosDbMongoDbApiLinkedServiceResponseOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiLinkedServiceResponse) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Linked service description.
func (o CosmosDbMongoDbApiLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether the CosmosDB (MongoDB API) server version is higher than 3.2. The default value is false. Type: boolean (or Expression with resultType boolean).
func (o CosmosDbMongoDbApiLinkedServiceResponseOutput) IsServerVersionAbove32() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiLinkedServiceResponse) interface{} { return v.IsServerVersionAbove32 }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o CosmosDbMongoDbApiLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
// Expected value is 'CosmosDbMongoDbApi'.
func (o CosmosDbMongoDbApiLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity sink for a CosmosDB (MongoDB API) database.
type CosmosDbMongoDbApiSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'CosmosDbMongoDbApiSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Specifies whether the document with same key to be overwritten (upsert) rather than throw exception (insert). The default value is "insert". Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// CosmosDbMongoDbApiSinkInput is an input type that accepts CosmosDbMongoDbApiSinkArgs and CosmosDbMongoDbApiSinkOutput values.
// You can construct a concrete instance of `CosmosDbMongoDbApiSinkInput` via:
//
//	CosmosDbMongoDbApiSinkArgs{...}
type CosmosDbMongoDbApiSinkInput interface {
	pulumi.Input

	ToCosmosDbMongoDbApiSinkOutput() CosmosDbMongoDbApiSinkOutput
	ToCosmosDbMongoDbApiSinkOutputWithContext(context.Context) CosmosDbMongoDbApiSinkOutput
}

// A copy activity sink for a CosmosDB (MongoDB API) database.
type CosmosDbMongoDbApiSinkArgs struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount pulumi.Input `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait pulumi.Input `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'CosmosDbMongoDbApiSink'.
	Type pulumi.StringInput `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize pulumi.Input `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout pulumi.Input `pulumi:"writeBatchTimeout"`
	// Specifies whether the document with same key to be overwritten (upsert) rather than throw exception (insert). The default value is "insert". Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
	WriteBehavior pulumi.Input `pulumi:"writeBehavior"`
}

func (CosmosDbMongoDbApiSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbMongoDbApiSink)(nil)).Elem()
}

func (i CosmosDbMongoDbApiSinkArgs) ToCosmosDbMongoDbApiSinkOutput() CosmosDbMongoDbApiSinkOutput {
	return i.ToCosmosDbMongoDbApiSinkOutputWithContext(context.Background())
}

func (i CosmosDbMongoDbApiSinkArgs) ToCosmosDbMongoDbApiSinkOutputWithContext(ctx context.Context) CosmosDbMongoDbApiSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosmosDbMongoDbApiSinkOutput)
}

// A copy activity sink for a CosmosDB (MongoDB API) database.
type CosmosDbMongoDbApiSinkOutput struct{ *pulumi.OutputState }

func (CosmosDbMongoDbApiSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbMongoDbApiSink)(nil)).Elem()
}

func (o CosmosDbMongoDbApiSinkOutput) ToCosmosDbMongoDbApiSinkOutput() CosmosDbMongoDbApiSinkOutput {
	return o
}

func (o CosmosDbMongoDbApiSinkOutput) ToCosmosDbMongoDbApiSinkOutputWithContext(ctx context.Context) CosmosDbMongoDbApiSinkOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o CosmosDbMongoDbApiSinkOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiSink) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o CosmosDbMongoDbApiSinkOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiSink) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o CosmosDbMongoDbApiSinkOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiSink) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o CosmosDbMongoDbApiSinkOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiSink) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'CosmosDbMongoDbApiSink'.
func (o CosmosDbMongoDbApiSinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiSink) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o CosmosDbMongoDbApiSinkOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiSink) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o CosmosDbMongoDbApiSinkOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiSink) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// Specifies whether the document with same key to be overwritten (upsert) rather than throw exception (insert). The default value is "insert". Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
func (o CosmosDbMongoDbApiSinkOutput) WriteBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiSink) interface{} { return v.WriteBehavior }).(pulumi.AnyOutput)
}

// A copy activity sink for a CosmosDB (MongoDB API) database.
type CosmosDbMongoDbApiSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'CosmosDbMongoDbApiSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Specifies whether the document with same key to be overwritten (upsert) rather than throw exception (insert). The default value is "insert". Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// A copy activity sink for a CosmosDB (MongoDB API) database.
type CosmosDbMongoDbApiSinkResponseOutput struct{ *pulumi.OutputState }

func (CosmosDbMongoDbApiSinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbMongoDbApiSinkResponse)(nil)).Elem()
}

func (o CosmosDbMongoDbApiSinkResponseOutput) ToCosmosDbMongoDbApiSinkResponseOutput() CosmosDbMongoDbApiSinkResponseOutput {
	return o
}

func (o CosmosDbMongoDbApiSinkResponseOutput) ToCosmosDbMongoDbApiSinkResponseOutputWithContext(ctx context.Context) CosmosDbMongoDbApiSinkResponseOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o CosmosDbMongoDbApiSinkResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiSinkResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o CosmosDbMongoDbApiSinkResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiSinkResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o CosmosDbMongoDbApiSinkResponseOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiSinkResponse) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o CosmosDbMongoDbApiSinkResponseOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiSinkResponse) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'CosmosDbMongoDbApiSink'.
func (o CosmosDbMongoDbApiSinkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiSinkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o CosmosDbMongoDbApiSinkResponseOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiSinkResponse) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o CosmosDbMongoDbApiSinkResponseOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiSinkResponse) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// Specifies whether the document with same key to be overwritten (upsert) rather than throw exception (insert). The default value is "insert". Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
func (o CosmosDbMongoDbApiSinkResponseOutput) WriteBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiSinkResponse) interface{} { return v.WriteBehavior }).(pulumi.AnyOutput)
}

// A copy activity source for a CosmosDB (MongoDB API) database.
type CosmosDbMongoDbApiSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// Specifies the number of documents to return in each batch of the response from MongoDB instance. In most cases, modifying the batch size will not affect the user or the application. This property's main purpose is to avoid hit the limitation of response size. Type: integer (or Expression with resultType integer).
	BatchSize interface{} `pulumi:"batchSize"`
	// Cursor methods for Mongodb query.
	CursorMethods *MongoDbCursorMethodsProperties `pulumi:"cursorMethods"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies selection filter using query operators. To return all documents in a collection, omit this parameter or pass an empty document ({}). Type: string (or Expression with resultType string).
	Filter interface{} `pulumi:"filter"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'CosmosDbMongoDbApiSource'.
	Type string `pulumi:"type"`
}

// CosmosDbMongoDbApiSourceInput is an input type that accepts CosmosDbMongoDbApiSourceArgs and CosmosDbMongoDbApiSourceOutput values.
// You can construct a concrete instance of `CosmosDbMongoDbApiSourceInput` via:
//
//	CosmosDbMongoDbApiSourceArgs{...}
type CosmosDbMongoDbApiSourceInput interface {
	pulumi.Input

	ToCosmosDbMongoDbApiSourceOutput() CosmosDbMongoDbApiSourceOutput
	ToCosmosDbMongoDbApiSourceOutputWithContext(context.Context) CosmosDbMongoDbApiSourceOutput
}

// A copy activity source for a CosmosDB (MongoDB API) database.
type CosmosDbMongoDbApiSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// Specifies the number of documents to return in each batch of the response from MongoDB instance. In most cases, modifying the batch size will not affect the user or the application. This property's main purpose is to avoid hit the limitation of response size. Type: integer (or Expression with resultType integer).
	BatchSize pulumi.Input `pulumi:"batchSize"`
	// Cursor methods for Mongodb query.
	CursorMethods MongoDbCursorMethodsPropertiesPtrInput `pulumi:"cursorMethods"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// Specifies selection filter using query operators. To return all documents in a collection, omit this parameter or pass an empty document ({}). Type: string (or Expression with resultType string).
	Filter pulumi.Input `pulumi:"filter"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'CosmosDbMongoDbApiSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CosmosDbMongoDbApiSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbMongoDbApiSource)(nil)).Elem()
}

func (i CosmosDbMongoDbApiSourceArgs) ToCosmosDbMongoDbApiSourceOutput() CosmosDbMongoDbApiSourceOutput {
	return i.ToCosmosDbMongoDbApiSourceOutputWithContext(context.Background())
}

func (i CosmosDbMongoDbApiSourceArgs) ToCosmosDbMongoDbApiSourceOutputWithContext(ctx context.Context) CosmosDbMongoDbApiSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosmosDbMongoDbApiSourceOutput)
}

// A copy activity source for a CosmosDB (MongoDB API) database.
type CosmosDbMongoDbApiSourceOutput struct{ *pulumi.OutputState }

func (CosmosDbMongoDbApiSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbMongoDbApiSource)(nil)).Elem()
}

func (o CosmosDbMongoDbApiSourceOutput) ToCosmosDbMongoDbApiSourceOutput() CosmosDbMongoDbApiSourceOutput {
	return o
}

func (o CosmosDbMongoDbApiSourceOutput) ToCosmosDbMongoDbApiSourceOutputWithContext(ctx context.Context) CosmosDbMongoDbApiSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o CosmosDbMongoDbApiSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// Specifies the number of documents to return in each batch of the response from MongoDB instance. In most cases, modifying the batch size will not affect the user or the application. This property's main purpose is to avoid hit the limitation of response size. Type: integer (or Expression with resultType integer).
func (o CosmosDbMongoDbApiSourceOutput) BatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiSource) interface{} { return v.BatchSize }).(pulumi.AnyOutput)
}

// Cursor methods for Mongodb query.
func (o CosmosDbMongoDbApiSourceOutput) CursorMethods() MongoDbCursorMethodsPropertiesPtrOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiSource) *MongoDbCursorMethodsProperties { return v.CursorMethods }).(MongoDbCursorMethodsPropertiesPtrOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o CosmosDbMongoDbApiSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Specifies selection filter using query operators. To return all documents in a collection, omit this parameter or pass an empty document ({}). Type: string (or Expression with resultType string).
func (o CosmosDbMongoDbApiSourceOutput) Filter() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiSource) interface{} { return v.Filter }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o CosmosDbMongoDbApiSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o CosmosDbMongoDbApiSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o CosmosDbMongoDbApiSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o CosmosDbMongoDbApiSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'CosmosDbMongoDbApiSource'.
func (o CosmosDbMongoDbApiSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity source for a CosmosDB (MongoDB API) database.
type CosmosDbMongoDbApiSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// Specifies the number of documents to return in each batch of the response from MongoDB instance. In most cases, modifying the batch size will not affect the user or the application. This property's main purpose is to avoid hit the limitation of response size. Type: integer (or Expression with resultType integer).
	BatchSize interface{} `pulumi:"batchSize"`
	// Cursor methods for Mongodb query.
	CursorMethods *MongoDbCursorMethodsPropertiesResponse `pulumi:"cursorMethods"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Specifies selection filter using query operators. To return all documents in a collection, omit this parameter or pass an empty document ({}). Type: string (or Expression with resultType string).
	Filter interface{} `pulumi:"filter"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'CosmosDbMongoDbApiSource'.
	Type string `pulumi:"type"`
}

// A copy activity source for a CosmosDB (MongoDB API) database.
type CosmosDbMongoDbApiSourceResponseOutput struct{ *pulumi.OutputState }

func (CosmosDbMongoDbApiSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbMongoDbApiSourceResponse)(nil)).Elem()
}

func (o CosmosDbMongoDbApiSourceResponseOutput) ToCosmosDbMongoDbApiSourceResponseOutput() CosmosDbMongoDbApiSourceResponseOutput {
	return o
}

func (o CosmosDbMongoDbApiSourceResponseOutput) ToCosmosDbMongoDbApiSourceResponseOutputWithContext(ctx context.Context) CosmosDbMongoDbApiSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o CosmosDbMongoDbApiSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// Specifies the number of documents to return in each batch of the response from MongoDB instance. In most cases, modifying the batch size will not affect the user or the application. This property's main purpose is to avoid hit the limitation of response size. Type: integer (or Expression with resultType integer).
func (o CosmosDbMongoDbApiSourceResponseOutput) BatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiSourceResponse) interface{} { return v.BatchSize }).(pulumi.AnyOutput)
}

// Cursor methods for Mongodb query.
func (o CosmosDbMongoDbApiSourceResponseOutput) CursorMethods() MongoDbCursorMethodsPropertiesResponsePtrOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiSourceResponse) *MongoDbCursorMethodsPropertiesResponse {
		return v.CursorMethods
	}).(MongoDbCursorMethodsPropertiesResponsePtrOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o CosmosDbMongoDbApiSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Specifies selection filter using query operators. To return all documents in a collection, omit this parameter or pass an empty document ({}). Type: string (or Expression with resultType string).
func (o CosmosDbMongoDbApiSourceResponseOutput) Filter() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiSourceResponse) interface{} { return v.Filter }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o CosmosDbMongoDbApiSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o CosmosDbMongoDbApiSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o CosmosDbMongoDbApiSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o CosmosDbMongoDbApiSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'CosmosDbMongoDbApiSource'.
func (o CosmosDbMongoDbApiSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CosmosDbMongoDbApiSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Microsoft Azure CosmosDB (SQL API) Collection dataset.
type CosmosDbSqlApiCollectionDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// CosmosDB (SQL API) collection name. Type: string (or Expression with resultType string).
	CollectionName interface{} `pulumi:"collectionName"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'CosmosDbSqlApiCollection'.
	Type string `pulumi:"type"`
}

// CosmosDbSqlApiCollectionDatasetInput is an input type that accepts CosmosDbSqlApiCollectionDatasetArgs and CosmosDbSqlApiCollectionDatasetOutput values.
// You can construct a concrete instance of `CosmosDbSqlApiCollectionDatasetInput` via:
//
//	CosmosDbSqlApiCollectionDatasetArgs{...}
type CosmosDbSqlApiCollectionDatasetInput interface {
	pulumi.Input

	ToCosmosDbSqlApiCollectionDatasetOutput() CosmosDbSqlApiCollectionDatasetOutput
	ToCosmosDbSqlApiCollectionDatasetOutputWithContext(context.Context) CosmosDbSqlApiCollectionDatasetOutput
}

// Microsoft Azure CosmosDB (SQL API) Collection dataset.
type CosmosDbSqlApiCollectionDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// CosmosDB (SQL API) collection name. Type: string (or Expression with resultType string).
	CollectionName pulumi.Input `pulumi:"collectionName"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'CosmosDbSqlApiCollection'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CosmosDbSqlApiCollectionDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbSqlApiCollectionDataset)(nil)).Elem()
}

func (i CosmosDbSqlApiCollectionDatasetArgs) ToCosmosDbSqlApiCollectionDatasetOutput() CosmosDbSqlApiCollectionDatasetOutput {
	return i.ToCosmosDbSqlApiCollectionDatasetOutputWithContext(context.Background())
}

func (i CosmosDbSqlApiCollectionDatasetArgs) ToCosmosDbSqlApiCollectionDatasetOutputWithContext(ctx context.Context) CosmosDbSqlApiCollectionDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosmosDbSqlApiCollectionDatasetOutput)
}

// Microsoft Azure CosmosDB (SQL API) Collection dataset.
type CosmosDbSqlApiCollectionDatasetOutput struct{ *pulumi.OutputState }

func (CosmosDbSqlApiCollectionDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbSqlApiCollectionDataset)(nil)).Elem()
}

func (o CosmosDbSqlApiCollectionDatasetOutput) ToCosmosDbSqlApiCollectionDatasetOutput() CosmosDbSqlApiCollectionDatasetOutput {
	return o
}

func (o CosmosDbSqlApiCollectionDatasetOutput) ToCosmosDbSqlApiCollectionDatasetOutputWithContext(ctx context.Context) CosmosDbSqlApiCollectionDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o CosmosDbSqlApiCollectionDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CosmosDbSqlApiCollectionDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// CosmosDB (SQL API) collection name. Type: string (or Expression with resultType string).
func (o CosmosDbSqlApiCollectionDatasetOutput) CollectionName() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbSqlApiCollectionDataset) interface{} { return v.CollectionName }).(pulumi.AnyOutput)
}

// Dataset description.
func (o CosmosDbSqlApiCollectionDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CosmosDbSqlApiCollectionDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o CosmosDbSqlApiCollectionDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v CosmosDbSqlApiCollectionDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o CosmosDbSqlApiCollectionDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v CosmosDbSqlApiCollectionDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o CosmosDbSqlApiCollectionDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v CosmosDbSqlApiCollectionDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o CosmosDbSqlApiCollectionDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbSqlApiCollectionDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o CosmosDbSqlApiCollectionDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbSqlApiCollectionDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'CosmosDbSqlApiCollection'.
func (o CosmosDbSqlApiCollectionDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CosmosDbSqlApiCollectionDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Microsoft Azure CosmosDB (SQL API) Collection dataset.
type CosmosDbSqlApiCollectionDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// CosmosDB (SQL API) collection name. Type: string (or Expression with resultType string).
	CollectionName interface{} `pulumi:"collectionName"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'CosmosDbSqlApiCollection'.
	Type string `pulumi:"type"`
}

// Microsoft Azure CosmosDB (SQL API) Collection dataset.
type CosmosDbSqlApiCollectionDatasetResponseOutput struct{ *pulumi.OutputState }

func (CosmosDbSqlApiCollectionDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbSqlApiCollectionDatasetResponse)(nil)).Elem()
}

func (o CosmosDbSqlApiCollectionDatasetResponseOutput) ToCosmosDbSqlApiCollectionDatasetResponseOutput() CosmosDbSqlApiCollectionDatasetResponseOutput {
	return o
}

func (o CosmosDbSqlApiCollectionDatasetResponseOutput) ToCosmosDbSqlApiCollectionDatasetResponseOutputWithContext(ctx context.Context) CosmosDbSqlApiCollectionDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o CosmosDbSqlApiCollectionDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CosmosDbSqlApiCollectionDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// CosmosDB (SQL API) collection name. Type: string (or Expression with resultType string).
func (o CosmosDbSqlApiCollectionDatasetResponseOutput) CollectionName() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbSqlApiCollectionDatasetResponse) interface{} { return v.CollectionName }).(pulumi.AnyOutput)
}

// Dataset description.
func (o CosmosDbSqlApiCollectionDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CosmosDbSqlApiCollectionDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o CosmosDbSqlApiCollectionDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v CosmosDbSqlApiCollectionDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o CosmosDbSqlApiCollectionDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v CosmosDbSqlApiCollectionDatasetResponse) LinkedServiceReferenceResponse {
		return v.LinkedServiceName
	}).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o CosmosDbSqlApiCollectionDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v CosmosDbSqlApiCollectionDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o CosmosDbSqlApiCollectionDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbSqlApiCollectionDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o CosmosDbSqlApiCollectionDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbSqlApiCollectionDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'CosmosDbSqlApiCollection'.
func (o CosmosDbSqlApiCollectionDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CosmosDbSqlApiCollectionDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Azure CosmosDB (SQL API) Collection sink.
type CosmosDbSqlApiSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'CosmosDbSqlApiSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Describes how to write data to Azure Cosmos DB. Type: string (or Expression with resultType string). Allowed values: insert and upsert.
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// CosmosDbSqlApiSinkInput is an input type that accepts CosmosDbSqlApiSinkArgs and CosmosDbSqlApiSinkOutput values.
// You can construct a concrete instance of `CosmosDbSqlApiSinkInput` via:
//
//	CosmosDbSqlApiSinkArgs{...}
type CosmosDbSqlApiSinkInput interface {
	pulumi.Input

	ToCosmosDbSqlApiSinkOutput() CosmosDbSqlApiSinkOutput
	ToCosmosDbSqlApiSinkOutputWithContext(context.Context) CosmosDbSqlApiSinkOutput
}

// A copy activity Azure CosmosDB (SQL API) Collection sink.
type CosmosDbSqlApiSinkArgs struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount pulumi.Input `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait pulumi.Input `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'CosmosDbSqlApiSink'.
	Type pulumi.StringInput `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize pulumi.Input `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout pulumi.Input `pulumi:"writeBatchTimeout"`
	// Describes how to write data to Azure Cosmos DB. Type: string (or Expression with resultType string). Allowed values: insert and upsert.
	WriteBehavior pulumi.Input `pulumi:"writeBehavior"`
}

func (CosmosDbSqlApiSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbSqlApiSink)(nil)).Elem()
}

func (i CosmosDbSqlApiSinkArgs) ToCosmosDbSqlApiSinkOutput() CosmosDbSqlApiSinkOutput {
	return i.ToCosmosDbSqlApiSinkOutputWithContext(context.Background())
}

func (i CosmosDbSqlApiSinkArgs) ToCosmosDbSqlApiSinkOutputWithContext(ctx context.Context) CosmosDbSqlApiSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosmosDbSqlApiSinkOutput)
}

// A copy activity Azure CosmosDB (SQL API) Collection sink.
type CosmosDbSqlApiSinkOutput struct{ *pulumi.OutputState }

func (CosmosDbSqlApiSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbSqlApiSink)(nil)).Elem()
}

func (o CosmosDbSqlApiSinkOutput) ToCosmosDbSqlApiSinkOutput() CosmosDbSqlApiSinkOutput {
	return o
}

func (o CosmosDbSqlApiSinkOutput) ToCosmosDbSqlApiSinkOutputWithContext(ctx context.Context) CosmosDbSqlApiSinkOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o CosmosDbSqlApiSinkOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbSqlApiSink) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o CosmosDbSqlApiSinkOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbSqlApiSink) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o CosmosDbSqlApiSinkOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbSqlApiSink) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o CosmosDbSqlApiSinkOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbSqlApiSink) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'CosmosDbSqlApiSink'.
func (o CosmosDbSqlApiSinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CosmosDbSqlApiSink) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o CosmosDbSqlApiSinkOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbSqlApiSink) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o CosmosDbSqlApiSinkOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbSqlApiSink) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// Describes how to write data to Azure Cosmos DB. Type: string (or Expression with resultType string). Allowed values: insert and upsert.
func (o CosmosDbSqlApiSinkOutput) WriteBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbSqlApiSink) interface{} { return v.WriteBehavior }).(pulumi.AnyOutput)
}

// A copy activity Azure CosmosDB (SQL API) Collection sink.
type CosmosDbSqlApiSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'CosmosDbSqlApiSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Describes how to write data to Azure Cosmos DB. Type: string (or Expression with resultType string). Allowed values: insert and upsert.
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// A copy activity Azure CosmosDB (SQL API) Collection sink.
type CosmosDbSqlApiSinkResponseOutput struct{ *pulumi.OutputState }

func (CosmosDbSqlApiSinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbSqlApiSinkResponse)(nil)).Elem()
}

func (o CosmosDbSqlApiSinkResponseOutput) ToCosmosDbSqlApiSinkResponseOutput() CosmosDbSqlApiSinkResponseOutput {
	return o
}

func (o CosmosDbSqlApiSinkResponseOutput) ToCosmosDbSqlApiSinkResponseOutputWithContext(ctx context.Context) CosmosDbSqlApiSinkResponseOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o CosmosDbSqlApiSinkResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbSqlApiSinkResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o CosmosDbSqlApiSinkResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbSqlApiSinkResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o CosmosDbSqlApiSinkResponseOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbSqlApiSinkResponse) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o CosmosDbSqlApiSinkResponseOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbSqlApiSinkResponse) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'CosmosDbSqlApiSink'.
func (o CosmosDbSqlApiSinkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CosmosDbSqlApiSinkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o CosmosDbSqlApiSinkResponseOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbSqlApiSinkResponse) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o CosmosDbSqlApiSinkResponseOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbSqlApiSinkResponse) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// Describes how to write data to Azure Cosmos DB. Type: string (or Expression with resultType string). Allowed values: insert and upsert.
func (o CosmosDbSqlApiSinkResponseOutput) WriteBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbSqlApiSinkResponse) interface{} { return v.WriteBehavior }).(pulumi.AnyOutput)
}

// A copy activity Azure CosmosDB (SQL API) Collection source.
type CosmosDbSqlApiSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// Whether detect primitive values as datetime values. Type: boolean (or Expression with resultType boolean).
	DetectDatetime interface{} `pulumi:"detectDatetime"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Page size of the result. Type: integer (or Expression with resultType integer).
	PageSize interface{} `pulumi:"pageSize"`
	// Preferred regions. Type: array of strings (or Expression with resultType array of strings).
	PreferredRegions interface{} `pulumi:"preferredRegions"`
	// SQL API query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'CosmosDbSqlApiSource'.
	Type string `pulumi:"type"`
}

// CosmosDbSqlApiSourceInput is an input type that accepts CosmosDbSqlApiSourceArgs and CosmosDbSqlApiSourceOutput values.
// You can construct a concrete instance of `CosmosDbSqlApiSourceInput` via:
//
//	CosmosDbSqlApiSourceArgs{...}
type CosmosDbSqlApiSourceInput interface {
	pulumi.Input

	ToCosmosDbSqlApiSourceOutput() CosmosDbSqlApiSourceOutput
	ToCosmosDbSqlApiSourceOutputWithContext(context.Context) CosmosDbSqlApiSourceOutput
}

// A copy activity Azure CosmosDB (SQL API) Collection source.
type CosmosDbSqlApiSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// Whether detect primitive values as datetime values. Type: boolean (or Expression with resultType boolean).
	DetectDatetime pulumi.Input `pulumi:"detectDatetime"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Page size of the result. Type: integer (or Expression with resultType integer).
	PageSize pulumi.Input `pulumi:"pageSize"`
	// Preferred regions. Type: array of strings (or Expression with resultType array of strings).
	PreferredRegions pulumi.Input `pulumi:"preferredRegions"`
	// SQL API query. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'CosmosDbSqlApiSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CosmosDbSqlApiSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbSqlApiSource)(nil)).Elem()
}

func (i CosmosDbSqlApiSourceArgs) ToCosmosDbSqlApiSourceOutput() CosmosDbSqlApiSourceOutput {
	return i.ToCosmosDbSqlApiSourceOutputWithContext(context.Background())
}

func (i CosmosDbSqlApiSourceArgs) ToCosmosDbSqlApiSourceOutputWithContext(ctx context.Context) CosmosDbSqlApiSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosmosDbSqlApiSourceOutput)
}

// A copy activity Azure CosmosDB (SQL API) Collection source.
type CosmosDbSqlApiSourceOutput struct{ *pulumi.OutputState }

func (CosmosDbSqlApiSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbSqlApiSource)(nil)).Elem()
}

func (o CosmosDbSqlApiSourceOutput) ToCosmosDbSqlApiSourceOutput() CosmosDbSqlApiSourceOutput {
	return o
}

func (o CosmosDbSqlApiSourceOutput) ToCosmosDbSqlApiSourceOutputWithContext(ctx context.Context) CosmosDbSqlApiSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o CosmosDbSqlApiSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbSqlApiSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// Whether detect primitive values as datetime values. Type: boolean (or Expression with resultType boolean).
func (o CosmosDbSqlApiSourceOutput) DetectDatetime() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbSqlApiSource) interface{} { return v.DetectDatetime }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o CosmosDbSqlApiSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbSqlApiSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o CosmosDbSqlApiSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbSqlApiSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Page size of the result. Type: integer (or Expression with resultType integer).
func (o CosmosDbSqlApiSourceOutput) PageSize() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbSqlApiSource) interface{} { return v.PageSize }).(pulumi.AnyOutput)
}

// Preferred regions. Type: array of strings (or Expression with resultType array of strings).
func (o CosmosDbSqlApiSourceOutput) PreferredRegions() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbSqlApiSource) interface{} { return v.PreferredRegions }).(pulumi.AnyOutput)
}

// SQL API query. Type: string (or Expression with resultType string).
func (o CosmosDbSqlApiSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbSqlApiSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o CosmosDbSqlApiSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbSqlApiSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o CosmosDbSqlApiSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbSqlApiSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'CosmosDbSqlApiSource'.
func (o CosmosDbSqlApiSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CosmosDbSqlApiSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Azure CosmosDB (SQL API) Collection source.
type CosmosDbSqlApiSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// Whether detect primitive values as datetime values. Type: boolean (or Expression with resultType boolean).
	DetectDatetime interface{} `pulumi:"detectDatetime"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Page size of the result. Type: integer (or Expression with resultType integer).
	PageSize interface{} `pulumi:"pageSize"`
	// Preferred regions. Type: array of strings (or Expression with resultType array of strings).
	PreferredRegions interface{} `pulumi:"preferredRegions"`
	// SQL API query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'CosmosDbSqlApiSource'.
	Type string `pulumi:"type"`
}

// A copy activity Azure CosmosDB (SQL API) Collection source.
type CosmosDbSqlApiSourceResponseOutput struct{ *pulumi.OutputState }

func (CosmosDbSqlApiSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbSqlApiSourceResponse)(nil)).Elem()
}

func (o CosmosDbSqlApiSourceResponseOutput) ToCosmosDbSqlApiSourceResponseOutput() CosmosDbSqlApiSourceResponseOutput {
	return o
}

func (o CosmosDbSqlApiSourceResponseOutput) ToCosmosDbSqlApiSourceResponseOutputWithContext(ctx context.Context) CosmosDbSqlApiSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o CosmosDbSqlApiSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbSqlApiSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// Whether detect primitive values as datetime values. Type: boolean (or Expression with resultType boolean).
func (o CosmosDbSqlApiSourceResponseOutput) DetectDatetime() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbSqlApiSourceResponse) interface{} { return v.DetectDatetime }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o CosmosDbSqlApiSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbSqlApiSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o CosmosDbSqlApiSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbSqlApiSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Page size of the result. Type: integer (or Expression with resultType integer).
func (o CosmosDbSqlApiSourceResponseOutput) PageSize() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbSqlApiSourceResponse) interface{} { return v.PageSize }).(pulumi.AnyOutput)
}

// Preferred regions. Type: array of strings (or Expression with resultType array of strings).
func (o CosmosDbSqlApiSourceResponseOutput) PreferredRegions() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbSqlApiSourceResponse) interface{} { return v.PreferredRegions }).(pulumi.AnyOutput)
}

// SQL API query. Type: string (or Expression with resultType string).
func (o CosmosDbSqlApiSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbSqlApiSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o CosmosDbSqlApiSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbSqlApiSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o CosmosDbSqlApiSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v CosmosDbSqlApiSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'CosmosDbSqlApiSource'.
func (o CosmosDbSqlApiSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CosmosDbSqlApiSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Couchbase server linked service.
type CouchbaseLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The Azure key vault secret reference of credString in connection string.
	CredString *AzureKeyVaultSecretReference `pulumi:"credString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Couchbase'.
	Type string `pulumi:"type"`
}

// CouchbaseLinkedServiceInput is an input type that accepts CouchbaseLinkedServiceArgs and CouchbaseLinkedServiceOutput values.
// You can construct a concrete instance of `CouchbaseLinkedServiceInput` via:
//
//	CouchbaseLinkedServiceArgs{...}
type CouchbaseLinkedServiceInput interface {
	pulumi.Input

	ToCouchbaseLinkedServiceOutput() CouchbaseLinkedServiceOutput
	ToCouchbaseLinkedServiceOutputWithContext(context.Context) CouchbaseLinkedServiceOutput
}

// Couchbase server linked service.
type CouchbaseLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// The Azure key vault secret reference of credString in connection string.
	CredString AzureKeyVaultSecretReferencePtrInput `pulumi:"credString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Couchbase'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CouchbaseLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CouchbaseLinkedService)(nil)).Elem()
}

func (i CouchbaseLinkedServiceArgs) ToCouchbaseLinkedServiceOutput() CouchbaseLinkedServiceOutput {
	return i.ToCouchbaseLinkedServiceOutputWithContext(context.Background())
}

func (i CouchbaseLinkedServiceArgs) ToCouchbaseLinkedServiceOutputWithContext(ctx context.Context) CouchbaseLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CouchbaseLinkedServiceOutput)
}

// Couchbase server linked service.
type CouchbaseLinkedServiceOutput struct{ *pulumi.OutputState }

func (CouchbaseLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CouchbaseLinkedService)(nil)).Elem()
}

func (o CouchbaseLinkedServiceOutput) ToCouchbaseLinkedServiceOutput() CouchbaseLinkedServiceOutput {
	return o
}

func (o CouchbaseLinkedServiceOutput) ToCouchbaseLinkedServiceOutputWithContext(ctx context.Context) CouchbaseLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o CouchbaseLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CouchbaseLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o CouchbaseLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v CouchbaseLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o CouchbaseLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v CouchbaseLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// The Azure key vault secret reference of credString in connection string.
func (o CouchbaseLinkedServiceOutput) CredString() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v CouchbaseLinkedService) *AzureKeyVaultSecretReference { return v.CredString }).(AzureKeyVaultSecretReferencePtrOutput)
}

// Linked service description.
func (o CouchbaseLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CouchbaseLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o CouchbaseLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CouchbaseLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o CouchbaseLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v CouchbaseLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
// Expected value is 'Couchbase'.
func (o CouchbaseLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CouchbaseLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Couchbase server linked service.
type CouchbaseLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// The Azure key vault secret reference of credString in connection string.
	CredString *AzureKeyVaultSecretReferenceResponse `pulumi:"credString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Couchbase'.
	Type string `pulumi:"type"`
}

// Couchbase server linked service.
type CouchbaseLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (CouchbaseLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CouchbaseLinkedServiceResponse)(nil)).Elem()
}

func (o CouchbaseLinkedServiceResponseOutput) ToCouchbaseLinkedServiceResponseOutput() CouchbaseLinkedServiceResponseOutput {
	return o
}

func (o CouchbaseLinkedServiceResponseOutput) ToCouchbaseLinkedServiceResponseOutputWithContext(ctx context.Context) CouchbaseLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o CouchbaseLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CouchbaseLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o CouchbaseLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v CouchbaseLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o CouchbaseLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v CouchbaseLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// The Azure key vault secret reference of credString in connection string.
func (o CouchbaseLinkedServiceResponseOutput) CredString() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v CouchbaseLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse { return v.CredString }).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// Linked service description.
func (o CouchbaseLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CouchbaseLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o CouchbaseLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CouchbaseLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o CouchbaseLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v CouchbaseLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
// Expected value is 'Couchbase'.
func (o CouchbaseLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CouchbaseLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Couchbase server source.
type CouchbaseSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'CouchbaseSource'.
	Type string `pulumi:"type"`
}

// CouchbaseSourceInput is an input type that accepts CouchbaseSourceArgs and CouchbaseSourceOutput values.
// You can construct a concrete instance of `CouchbaseSourceInput` via:
//
//	CouchbaseSourceArgs{...}
type CouchbaseSourceInput interface {
	pulumi.Input

	ToCouchbaseSourceOutput() CouchbaseSourceOutput
	ToCouchbaseSourceOutputWithContext(context.Context) CouchbaseSourceOutput
}

// A copy activity Couchbase server source.
type CouchbaseSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'CouchbaseSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CouchbaseSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CouchbaseSource)(nil)).Elem()
}

func (i CouchbaseSourceArgs) ToCouchbaseSourceOutput() CouchbaseSourceOutput {
	return i.ToCouchbaseSourceOutputWithContext(context.Background())
}

func (i CouchbaseSourceArgs) ToCouchbaseSourceOutputWithContext(ctx context.Context) CouchbaseSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CouchbaseSourceOutput)
}

// A copy activity Couchbase server source.
type CouchbaseSourceOutput struct{ *pulumi.OutputState }

func (CouchbaseSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CouchbaseSource)(nil)).Elem()
}

func (o CouchbaseSourceOutput) ToCouchbaseSourceOutput() CouchbaseSourceOutput {
	return o
}

func (o CouchbaseSourceOutput) ToCouchbaseSourceOutputWithContext(ctx context.Context) CouchbaseSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o CouchbaseSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v CouchbaseSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o CouchbaseSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v CouchbaseSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o CouchbaseSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v CouchbaseSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o CouchbaseSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v CouchbaseSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o CouchbaseSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v CouchbaseSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o CouchbaseSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v CouchbaseSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o CouchbaseSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v CouchbaseSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'CouchbaseSource'.
func (o CouchbaseSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CouchbaseSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Couchbase server source.
type CouchbaseSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'CouchbaseSource'.
	Type string `pulumi:"type"`
}

// A copy activity Couchbase server source.
type CouchbaseSourceResponseOutput struct{ *pulumi.OutputState }

func (CouchbaseSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CouchbaseSourceResponse)(nil)).Elem()
}

func (o CouchbaseSourceResponseOutput) ToCouchbaseSourceResponseOutput() CouchbaseSourceResponseOutput {
	return o
}

func (o CouchbaseSourceResponseOutput) ToCouchbaseSourceResponseOutputWithContext(ctx context.Context) CouchbaseSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o CouchbaseSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v CouchbaseSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o CouchbaseSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v CouchbaseSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o CouchbaseSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v CouchbaseSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o CouchbaseSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v CouchbaseSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o CouchbaseSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v CouchbaseSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o CouchbaseSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v CouchbaseSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o CouchbaseSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v CouchbaseSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'CouchbaseSource'.
func (o CouchbaseSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CouchbaseSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Couchbase server dataset.
type CouchbaseTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'CouchbaseTable'.
	Type string `pulumi:"type"`
}

// CouchbaseTableDatasetInput is an input type that accepts CouchbaseTableDatasetArgs and CouchbaseTableDatasetOutput values.
// You can construct a concrete instance of `CouchbaseTableDatasetInput` via:
//
//	CouchbaseTableDatasetArgs{...}
type CouchbaseTableDatasetInput interface {
	pulumi.Input

	ToCouchbaseTableDatasetOutput() CouchbaseTableDatasetOutput
	ToCouchbaseTableDatasetOutputWithContext(context.Context) CouchbaseTableDatasetOutput
}

// Couchbase server dataset.
type CouchbaseTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'CouchbaseTable'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CouchbaseTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CouchbaseTableDataset)(nil)).Elem()
}

func (i CouchbaseTableDatasetArgs) ToCouchbaseTableDatasetOutput() CouchbaseTableDatasetOutput {
	return i.ToCouchbaseTableDatasetOutputWithContext(context.Background())
}

func (i CouchbaseTableDatasetArgs) ToCouchbaseTableDatasetOutputWithContext(ctx context.Context) CouchbaseTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CouchbaseTableDatasetOutput)
}

// Couchbase server dataset.
type CouchbaseTableDatasetOutput struct{ *pulumi.OutputState }

func (CouchbaseTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CouchbaseTableDataset)(nil)).Elem()
}

func (o CouchbaseTableDatasetOutput) ToCouchbaseTableDatasetOutput() CouchbaseTableDatasetOutput {
	return o
}

func (o CouchbaseTableDatasetOutput) ToCouchbaseTableDatasetOutputWithContext(ctx context.Context) CouchbaseTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o CouchbaseTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CouchbaseTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o CouchbaseTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CouchbaseTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o CouchbaseTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v CouchbaseTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o CouchbaseTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v CouchbaseTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o CouchbaseTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v CouchbaseTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o CouchbaseTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v CouchbaseTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o CouchbaseTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v CouchbaseTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o CouchbaseTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v CouchbaseTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'CouchbaseTable'.
func (o CouchbaseTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CouchbaseTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Couchbase server dataset.
type CouchbaseTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'CouchbaseTable'.
	Type string `pulumi:"type"`
}

// Couchbase server dataset.
type CouchbaseTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (CouchbaseTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CouchbaseTableDatasetResponse)(nil)).Elem()
}

func (o CouchbaseTableDatasetResponseOutput) ToCouchbaseTableDatasetResponseOutput() CouchbaseTableDatasetResponseOutput {
	return o
}

func (o CouchbaseTableDatasetResponseOutput) ToCouchbaseTableDatasetResponseOutputWithContext(ctx context.Context) CouchbaseTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o CouchbaseTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CouchbaseTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o CouchbaseTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CouchbaseTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o CouchbaseTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v CouchbaseTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o CouchbaseTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v CouchbaseTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o CouchbaseTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v CouchbaseTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o CouchbaseTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v CouchbaseTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o CouchbaseTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v CouchbaseTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o CouchbaseTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v CouchbaseTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'CouchbaseTable'.
func (o CouchbaseTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CouchbaseTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Credential reference type.
type CredentialReference struct {
	// Reference credential name.
	ReferenceName string `pulumi:"referenceName"`
	// Credential reference type.
	Type string `pulumi:"type"`
}

// CredentialReferenceInput is an input type that accepts CredentialReferenceArgs and CredentialReferenceOutput values.
// You can construct a concrete instance of `CredentialReferenceInput` via:
//
//	CredentialReferenceArgs{...}
type CredentialReferenceInput interface {
	pulumi.Input

	ToCredentialReferenceOutput() CredentialReferenceOutput
	ToCredentialReferenceOutputWithContext(context.Context) CredentialReferenceOutput
}

// Credential reference type.
type CredentialReferenceArgs struct {
	// Reference credential name.
	ReferenceName pulumi.StringInput `pulumi:"referenceName"`
	// Credential reference type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CredentialReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CredentialReference)(nil)).Elem()
}

func (i CredentialReferenceArgs) ToCredentialReferenceOutput() CredentialReferenceOutput {
	return i.ToCredentialReferenceOutputWithContext(context.Background())
}

func (i CredentialReferenceArgs) ToCredentialReferenceOutputWithContext(ctx context.Context) CredentialReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CredentialReferenceOutput)
}

func (i CredentialReferenceArgs) ToCredentialReferencePtrOutput() CredentialReferencePtrOutput {
	return i.ToCredentialReferencePtrOutputWithContext(context.Background())
}

func (i CredentialReferenceArgs) ToCredentialReferencePtrOutputWithContext(ctx context.Context) CredentialReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CredentialReferenceOutput).ToCredentialReferencePtrOutputWithContext(ctx)
}

// CredentialReferencePtrInput is an input type that accepts CredentialReferenceArgs, CredentialReferencePtr and CredentialReferencePtrOutput values.
// You can construct a concrete instance of `CredentialReferencePtrInput` via:
//
//	        CredentialReferenceArgs{...}
//
//	or:
//
//	        nil
type CredentialReferencePtrInput interface {
	pulumi.Input

	ToCredentialReferencePtrOutput() CredentialReferencePtrOutput
	ToCredentialReferencePtrOutputWithContext(context.Context) CredentialReferencePtrOutput
}

type credentialReferencePtrType CredentialReferenceArgs

func CredentialReferencePtr(v *CredentialReferenceArgs) CredentialReferencePtrInput {
	return (*credentialReferencePtrType)(v)
}

func (*credentialReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CredentialReference)(nil)).Elem()
}

func (i *credentialReferencePtrType) ToCredentialReferencePtrOutput() CredentialReferencePtrOutput {
	return i.ToCredentialReferencePtrOutputWithContext(context.Background())
}

func (i *credentialReferencePtrType) ToCredentialReferencePtrOutputWithContext(ctx context.Context) CredentialReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CredentialReferencePtrOutput)
}

// Credential reference type.
type CredentialReferenceOutput struct{ *pulumi.OutputState }

func (CredentialReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CredentialReference)(nil)).Elem()
}

func (o CredentialReferenceOutput) ToCredentialReferenceOutput() CredentialReferenceOutput {
	return o
}

func (o CredentialReferenceOutput) ToCredentialReferenceOutputWithContext(ctx context.Context) CredentialReferenceOutput {
	return o
}

func (o CredentialReferenceOutput) ToCredentialReferencePtrOutput() CredentialReferencePtrOutput {
	return o.ToCredentialReferencePtrOutputWithContext(context.Background())
}

func (o CredentialReferenceOutput) ToCredentialReferencePtrOutputWithContext(ctx context.Context) CredentialReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CredentialReference) *CredentialReference {
		return &v
	}).(CredentialReferencePtrOutput)
}

// Reference credential name.
func (o CredentialReferenceOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v CredentialReference) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Credential reference type.
func (o CredentialReferenceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CredentialReference) string { return v.Type }).(pulumi.StringOutput)
}

type CredentialReferencePtrOutput struct{ *pulumi.OutputState }

func (CredentialReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CredentialReference)(nil)).Elem()
}

func (o CredentialReferencePtrOutput) ToCredentialReferencePtrOutput() CredentialReferencePtrOutput {
	return o
}

func (o CredentialReferencePtrOutput) ToCredentialReferencePtrOutputWithContext(ctx context.Context) CredentialReferencePtrOutput {
	return o
}

func (o CredentialReferencePtrOutput) Elem() CredentialReferenceOutput {
	return o.ApplyT(func(v *CredentialReference) CredentialReference {
		if v != nil {
			return *v
		}
		var ret CredentialReference
		return ret
	}).(CredentialReferenceOutput)
}

// Reference credential name.
func (o CredentialReferencePtrOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CredentialReference) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceName
	}).(pulumi.StringPtrOutput)
}

// Credential reference type.
func (o CredentialReferencePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CredentialReference) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Credential reference type.
type CredentialReferenceResponse struct {
	// Reference credential name.
	ReferenceName string `pulumi:"referenceName"`
	// Credential reference type.
	Type string `pulumi:"type"`
}

// Credential reference type.
type CredentialReferenceResponseOutput struct{ *pulumi.OutputState }

func (CredentialReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CredentialReferenceResponse)(nil)).Elem()
}

func (o CredentialReferenceResponseOutput) ToCredentialReferenceResponseOutput() CredentialReferenceResponseOutput {
	return o
}

func (o CredentialReferenceResponseOutput) ToCredentialReferenceResponseOutputWithContext(ctx context.Context) CredentialReferenceResponseOutput {
	return o
}

// Reference credential name.
func (o CredentialReferenceResponseOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v CredentialReferenceResponse) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Credential reference type.
func (o CredentialReferenceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CredentialReferenceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type CredentialReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (CredentialReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CredentialReferenceResponse)(nil)).Elem()
}

func (o CredentialReferenceResponsePtrOutput) ToCredentialReferenceResponsePtrOutput() CredentialReferenceResponsePtrOutput {
	return o
}

func (o CredentialReferenceResponsePtrOutput) ToCredentialReferenceResponsePtrOutputWithContext(ctx context.Context) CredentialReferenceResponsePtrOutput {
	return o
}

func (o CredentialReferenceResponsePtrOutput) Elem() CredentialReferenceResponseOutput {
	return o.ApplyT(func(v *CredentialReferenceResponse) CredentialReferenceResponse {
		if v != nil {
			return *v
		}
		var ret CredentialReferenceResponse
		return ret
	}).(CredentialReferenceResponseOutput)
}

// Reference credential name.
func (o CredentialReferenceResponsePtrOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CredentialReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceName
	}).(pulumi.StringPtrOutput)
}

// Credential reference type.
func (o CredentialReferenceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CredentialReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Custom activity type.
type CustomActivity struct {
	// Elevation level and scope for the user, default is nonadmin task. Type: string (or Expression with resultType double).
	AutoUserSpecification interface{} `pulumi:"autoUserSpecification"`
	// Command for custom activity Type: string (or Expression with resultType string).
	Command interface{} `pulumi:"command"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// User defined property bag. There is no restriction on the keys or values that can be used. The user specified custom activity has the full responsibility to consume and interpret the content defined.
	ExtendedProperties map[string]interface{} `pulumi:"extendedProperties"`
	// Folder path for resource files Type: string (or Expression with resultType string).
	FolderPath interface{} `pulumi:"folderPath"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Reference objects
	ReferenceObjects *CustomActivityReferenceObject `pulumi:"referenceObjects"`
	// Resource linked service reference.
	ResourceLinkedService *LinkedServiceReference `pulumi:"resourceLinkedService"`
	// The retention time for the files submitted for custom activity. Type: double (or Expression with resultType double).
	RetentionTimeInDays interface{} `pulumi:"retentionTimeInDays"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'Custom'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// CustomActivityInput is an input type that accepts CustomActivityArgs and CustomActivityOutput values.
// You can construct a concrete instance of `CustomActivityInput` via:
//
//	CustomActivityArgs{...}
type CustomActivityInput interface {
	pulumi.Input

	ToCustomActivityOutput() CustomActivityOutput
	ToCustomActivityOutputWithContext(context.Context) CustomActivityOutput
}

// Custom activity type.
type CustomActivityArgs struct {
	// Elevation level and scope for the user, default is nonadmin task. Type: string (or Expression with resultType double).
	AutoUserSpecification pulumi.Input `pulumi:"autoUserSpecification"`
	// Command for custom activity Type: string (or Expression with resultType string).
	Command pulumi.Input `pulumi:"command"`
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// User defined property bag. There is no restriction on the keys or values that can be used. The user specified custom activity has the full responsibility to consume and interpret the content defined.
	ExtendedProperties pulumi.MapInput `pulumi:"extendedProperties"`
	// Folder path for resource files Type: string (or Expression with resultType string).
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferencePtrInput `pulumi:"linkedServiceName"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs pulumi.StringPtrInput `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy ActivityPolicyPtrInput `pulumi:"policy"`
	// Reference objects
	ReferenceObjects CustomActivityReferenceObjectPtrInput `pulumi:"referenceObjects"`
	// Resource linked service reference.
	ResourceLinkedService LinkedServiceReferencePtrInput `pulumi:"resourceLinkedService"`
	// The retention time for the files submitted for custom activity. Type: double (or Expression with resultType double).
	RetentionTimeInDays pulumi.Input `pulumi:"retentionTimeInDays"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Type of activity.
	// Expected value is 'Custom'.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
}

func (CustomActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomActivity)(nil)).Elem()
}

func (i CustomActivityArgs) ToCustomActivityOutput() CustomActivityOutput {
	return i.ToCustomActivityOutputWithContext(context.Background())
}

func (i CustomActivityArgs) ToCustomActivityOutputWithContext(ctx context.Context) CustomActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomActivityOutput)
}

// Custom activity type.
type CustomActivityOutput struct{ *pulumi.OutputState }

func (CustomActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomActivity)(nil)).Elem()
}

func (o CustomActivityOutput) ToCustomActivityOutput() CustomActivityOutput {
	return o
}

func (o CustomActivityOutput) ToCustomActivityOutputWithContext(ctx context.Context) CustomActivityOutput {
	return o
}

// Elevation level and scope for the user, default is nonadmin task. Type: string (or Expression with resultType double).
func (o CustomActivityOutput) AutoUserSpecification() pulumi.AnyOutput {
	return o.ApplyT(func(v CustomActivity) interface{} { return v.AutoUserSpecification }).(pulumi.AnyOutput)
}

// Command for custom activity Type: string (or Expression with resultType string).
func (o CustomActivityOutput) Command() pulumi.AnyOutput {
	return o.ApplyT(func(v CustomActivity) interface{} { return v.Command }).(pulumi.AnyOutput)
}

// Activity depends on condition.
func (o CustomActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v CustomActivity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o CustomActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomActivity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// User defined property bag. There is no restriction on the keys or values that can be used. The user specified custom activity has the full responsibility to consume and interpret the content defined.
func (o CustomActivityOutput) ExtendedProperties() pulumi.MapOutput {
	return o.ApplyT(func(v CustomActivity) map[string]interface{} { return v.ExtendedProperties }).(pulumi.MapOutput)
}

// Folder path for resource files Type: string (or Expression with resultType string).
func (o CustomActivityOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v CustomActivity) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o CustomActivityOutput) LinkedServiceName() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v CustomActivity) *LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferencePtrOutput)
}

// Activity name.
func (o CustomActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CustomActivity) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o CustomActivityOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomActivity) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o CustomActivityOutput) Policy() ActivityPolicyPtrOutput {
	return o.ApplyT(func(v CustomActivity) *ActivityPolicy { return v.Policy }).(ActivityPolicyPtrOutput)
}

// Reference objects
func (o CustomActivityOutput) ReferenceObjects() CustomActivityReferenceObjectPtrOutput {
	return o.ApplyT(func(v CustomActivity) *CustomActivityReferenceObject { return v.ReferenceObjects }).(CustomActivityReferenceObjectPtrOutput)
}

// Resource linked service reference.
func (o CustomActivityOutput) ResourceLinkedService() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v CustomActivity) *LinkedServiceReference { return v.ResourceLinkedService }).(LinkedServiceReferencePtrOutput)
}

// The retention time for the files submitted for custom activity. Type: double (or Expression with resultType double).
func (o CustomActivityOutput) RetentionTimeInDays() pulumi.AnyOutput {
	return o.ApplyT(func(v CustomActivity) interface{} { return v.RetentionTimeInDays }).(pulumi.AnyOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o CustomActivityOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomActivity) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'Custom'.
func (o CustomActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CustomActivity) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o CustomActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v CustomActivity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

// Reference objects for custom activity
type CustomActivityReferenceObject struct {
	// Dataset references.
	Datasets []DatasetReference `pulumi:"datasets"`
	// Linked service references.
	LinkedServices []LinkedServiceReference `pulumi:"linkedServices"`
}

// CustomActivityReferenceObjectInput is an input type that accepts CustomActivityReferenceObjectArgs and CustomActivityReferenceObjectOutput values.
// You can construct a concrete instance of `CustomActivityReferenceObjectInput` via:
//
//	CustomActivityReferenceObjectArgs{...}
type CustomActivityReferenceObjectInput interface {
	pulumi.Input

	ToCustomActivityReferenceObjectOutput() CustomActivityReferenceObjectOutput
	ToCustomActivityReferenceObjectOutputWithContext(context.Context) CustomActivityReferenceObjectOutput
}

// Reference objects for custom activity
type CustomActivityReferenceObjectArgs struct {
	// Dataset references.
	Datasets DatasetReferenceArrayInput `pulumi:"datasets"`
	// Linked service references.
	LinkedServices LinkedServiceReferenceArrayInput `pulumi:"linkedServices"`
}

func (CustomActivityReferenceObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomActivityReferenceObject)(nil)).Elem()
}

func (i CustomActivityReferenceObjectArgs) ToCustomActivityReferenceObjectOutput() CustomActivityReferenceObjectOutput {
	return i.ToCustomActivityReferenceObjectOutputWithContext(context.Background())
}

func (i CustomActivityReferenceObjectArgs) ToCustomActivityReferenceObjectOutputWithContext(ctx context.Context) CustomActivityReferenceObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomActivityReferenceObjectOutput)
}

func (i CustomActivityReferenceObjectArgs) ToCustomActivityReferenceObjectPtrOutput() CustomActivityReferenceObjectPtrOutput {
	return i.ToCustomActivityReferenceObjectPtrOutputWithContext(context.Background())
}

func (i CustomActivityReferenceObjectArgs) ToCustomActivityReferenceObjectPtrOutputWithContext(ctx context.Context) CustomActivityReferenceObjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomActivityReferenceObjectOutput).ToCustomActivityReferenceObjectPtrOutputWithContext(ctx)
}

// CustomActivityReferenceObjectPtrInput is an input type that accepts CustomActivityReferenceObjectArgs, CustomActivityReferenceObjectPtr and CustomActivityReferenceObjectPtrOutput values.
// You can construct a concrete instance of `CustomActivityReferenceObjectPtrInput` via:
//
//	        CustomActivityReferenceObjectArgs{...}
//
//	or:
//
//	        nil
type CustomActivityReferenceObjectPtrInput interface {
	pulumi.Input

	ToCustomActivityReferenceObjectPtrOutput() CustomActivityReferenceObjectPtrOutput
	ToCustomActivityReferenceObjectPtrOutputWithContext(context.Context) CustomActivityReferenceObjectPtrOutput
}

type customActivityReferenceObjectPtrType CustomActivityReferenceObjectArgs

func CustomActivityReferenceObjectPtr(v *CustomActivityReferenceObjectArgs) CustomActivityReferenceObjectPtrInput {
	return (*customActivityReferenceObjectPtrType)(v)
}

func (*customActivityReferenceObjectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomActivityReferenceObject)(nil)).Elem()
}

func (i *customActivityReferenceObjectPtrType) ToCustomActivityReferenceObjectPtrOutput() CustomActivityReferenceObjectPtrOutput {
	return i.ToCustomActivityReferenceObjectPtrOutputWithContext(context.Background())
}

func (i *customActivityReferenceObjectPtrType) ToCustomActivityReferenceObjectPtrOutputWithContext(ctx context.Context) CustomActivityReferenceObjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomActivityReferenceObjectPtrOutput)
}

// Reference objects for custom activity
type CustomActivityReferenceObjectOutput struct{ *pulumi.OutputState }

func (CustomActivityReferenceObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomActivityReferenceObject)(nil)).Elem()
}

func (o CustomActivityReferenceObjectOutput) ToCustomActivityReferenceObjectOutput() CustomActivityReferenceObjectOutput {
	return o
}

func (o CustomActivityReferenceObjectOutput) ToCustomActivityReferenceObjectOutputWithContext(ctx context.Context) CustomActivityReferenceObjectOutput {
	return o
}

func (o CustomActivityReferenceObjectOutput) ToCustomActivityReferenceObjectPtrOutput() CustomActivityReferenceObjectPtrOutput {
	return o.ToCustomActivityReferenceObjectPtrOutputWithContext(context.Background())
}

func (o CustomActivityReferenceObjectOutput) ToCustomActivityReferenceObjectPtrOutputWithContext(ctx context.Context) CustomActivityReferenceObjectPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CustomActivityReferenceObject) *CustomActivityReferenceObject {
		return &v
	}).(CustomActivityReferenceObjectPtrOutput)
}

// Dataset references.
func (o CustomActivityReferenceObjectOutput) Datasets() DatasetReferenceArrayOutput {
	return o.ApplyT(func(v CustomActivityReferenceObject) []DatasetReference { return v.Datasets }).(DatasetReferenceArrayOutput)
}

// Linked service references.
func (o CustomActivityReferenceObjectOutput) LinkedServices() LinkedServiceReferenceArrayOutput {
	return o.ApplyT(func(v CustomActivityReferenceObject) []LinkedServiceReference { return v.LinkedServices }).(LinkedServiceReferenceArrayOutput)
}

type CustomActivityReferenceObjectPtrOutput struct{ *pulumi.OutputState }

func (CustomActivityReferenceObjectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomActivityReferenceObject)(nil)).Elem()
}

func (o CustomActivityReferenceObjectPtrOutput) ToCustomActivityReferenceObjectPtrOutput() CustomActivityReferenceObjectPtrOutput {
	return o
}

func (o CustomActivityReferenceObjectPtrOutput) ToCustomActivityReferenceObjectPtrOutputWithContext(ctx context.Context) CustomActivityReferenceObjectPtrOutput {
	return o
}

func (o CustomActivityReferenceObjectPtrOutput) Elem() CustomActivityReferenceObjectOutput {
	return o.ApplyT(func(v *CustomActivityReferenceObject) CustomActivityReferenceObject {
		if v != nil {
			return *v
		}
		var ret CustomActivityReferenceObject
		return ret
	}).(CustomActivityReferenceObjectOutput)
}

// Dataset references.
func (o CustomActivityReferenceObjectPtrOutput) Datasets() DatasetReferenceArrayOutput {
	return o.ApplyT(func(v *CustomActivityReferenceObject) []DatasetReference {
		if v == nil {
			return nil
		}
		return v.Datasets
	}).(DatasetReferenceArrayOutput)
}

// Linked service references.
func (o CustomActivityReferenceObjectPtrOutput) LinkedServices() LinkedServiceReferenceArrayOutput {
	return o.ApplyT(func(v *CustomActivityReferenceObject) []LinkedServiceReference {
		if v == nil {
			return nil
		}
		return v.LinkedServices
	}).(LinkedServiceReferenceArrayOutput)
}

// Reference objects for custom activity
type CustomActivityReferenceObjectResponse struct {
	// Dataset references.
	Datasets []DatasetReferenceResponse `pulumi:"datasets"`
	// Linked service references.
	LinkedServices []LinkedServiceReferenceResponse `pulumi:"linkedServices"`
}

// Reference objects for custom activity
type CustomActivityReferenceObjectResponseOutput struct{ *pulumi.OutputState }

func (CustomActivityReferenceObjectResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomActivityReferenceObjectResponse)(nil)).Elem()
}

func (o CustomActivityReferenceObjectResponseOutput) ToCustomActivityReferenceObjectResponseOutput() CustomActivityReferenceObjectResponseOutput {
	return o
}

func (o CustomActivityReferenceObjectResponseOutput) ToCustomActivityReferenceObjectResponseOutputWithContext(ctx context.Context) CustomActivityReferenceObjectResponseOutput {
	return o
}

// Dataset references.
func (o CustomActivityReferenceObjectResponseOutput) Datasets() DatasetReferenceResponseArrayOutput {
	return o.ApplyT(func(v CustomActivityReferenceObjectResponse) []DatasetReferenceResponse { return v.Datasets }).(DatasetReferenceResponseArrayOutput)
}

// Linked service references.
func (o CustomActivityReferenceObjectResponseOutput) LinkedServices() LinkedServiceReferenceResponseArrayOutput {
	return o.ApplyT(func(v CustomActivityReferenceObjectResponse) []LinkedServiceReferenceResponse {
		return v.LinkedServices
	}).(LinkedServiceReferenceResponseArrayOutput)
}

type CustomActivityReferenceObjectResponsePtrOutput struct{ *pulumi.OutputState }

func (CustomActivityReferenceObjectResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomActivityReferenceObjectResponse)(nil)).Elem()
}

func (o CustomActivityReferenceObjectResponsePtrOutput) ToCustomActivityReferenceObjectResponsePtrOutput() CustomActivityReferenceObjectResponsePtrOutput {
	return o
}

func (o CustomActivityReferenceObjectResponsePtrOutput) ToCustomActivityReferenceObjectResponsePtrOutputWithContext(ctx context.Context) CustomActivityReferenceObjectResponsePtrOutput {
	return o
}

func (o CustomActivityReferenceObjectResponsePtrOutput) Elem() CustomActivityReferenceObjectResponseOutput {
	return o.ApplyT(func(v *CustomActivityReferenceObjectResponse) CustomActivityReferenceObjectResponse {
		if v != nil {
			return *v
		}
		var ret CustomActivityReferenceObjectResponse
		return ret
	}).(CustomActivityReferenceObjectResponseOutput)
}

// Dataset references.
func (o CustomActivityReferenceObjectResponsePtrOutput) Datasets() DatasetReferenceResponseArrayOutput {
	return o.ApplyT(func(v *CustomActivityReferenceObjectResponse) []DatasetReferenceResponse {
		if v == nil {
			return nil
		}
		return v.Datasets
	}).(DatasetReferenceResponseArrayOutput)
}

// Linked service references.
func (o CustomActivityReferenceObjectResponsePtrOutput) LinkedServices() LinkedServiceReferenceResponseArrayOutput {
	return o.ApplyT(func(v *CustomActivityReferenceObjectResponse) []LinkedServiceReferenceResponse {
		if v == nil {
			return nil
		}
		return v.LinkedServices
	}).(LinkedServiceReferenceResponseArrayOutput)
}

// Custom activity type.
type CustomActivityResponse struct {
	// Elevation level and scope for the user, default is nonadmin task. Type: string (or Expression with resultType double).
	AutoUserSpecification interface{} `pulumi:"autoUserSpecification"`
	// Command for custom activity Type: string (or Expression with resultType string).
	Command interface{} `pulumi:"command"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// User defined property bag. There is no restriction on the keys or values that can be used. The user specified custom activity has the full responsibility to consume and interpret the content defined.
	ExtendedProperties map[string]interface{} `pulumi:"extendedProperties"`
	// Folder path for resource files Type: string (or Expression with resultType string).
	FolderPath interface{} `pulumi:"folderPath"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Reference objects
	ReferenceObjects *CustomActivityReferenceObjectResponse `pulumi:"referenceObjects"`
	// Resource linked service reference.
	ResourceLinkedService *LinkedServiceReferenceResponse `pulumi:"resourceLinkedService"`
	// The retention time for the files submitted for custom activity. Type: double (or Expression with resultType double).
	RetentionTimeInDays interface{} `pulumi:"retentionTimeInDays"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'Custom'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Custom activity type.
type CustomActivityResponseOutput struct{ *pulumi.OutputState }

func (CustomActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomActivityResponse)(nil)).Elem()
}

func (o CustomActivityResponseOutput) ToCustomActivityResponseOutput() CustomActivityResponseOutput {
	return o
}

func (o CustomActivityResponseOutput) ToCustomActivityResponseOutputWithContext(ctx context.Context) CustomActivityResponseOutput {
	return o
}

// Elevation level and scope for the user, default is nonadmin task. Type: string (or Expression with resultType double).
func (o CustomActivityResponseOutput) AutoUserSpecification() pulumi.AnyOutput {
	return o.ApplyT(func(v CustomActivityResponse) interface{} { return v.AutoUserSpecification }).(pulumi.AnyOutput)
}

// Command for custom activity Type: string (or Expression with resultType string).
func (o CustomActivityResponseOutput) Command() pulumi.AnyOutput {
	return o.ApplyT(func(v CustomActivityResponse) interface{} { return v.Command }).(pulumi.AnyOutput)
}

// Activity depends on condition.
func (o CustomActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v CustomActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o CustomActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// User defined property bag. There is no restriction on the keys or values that can be used. The user specified custom activity has the full responsibility to consume and interpret the content defined.
func (o CustomActivityResponseOutput) ExtendedProperties() pulumi.MapOutput {
	return o.ApplyT(func(v CustomActivityResponse) map[string]interface{} { return v.ExtendedProperties }).(pulumi.MapOutput)
}

// Folder path for resource files Type: string (or Expression with resultType string).
func (o CustomActivityResponseOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v CustomActivityResponse) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o CustomActivityResponseOutput) LinkedServiceName() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v CustomActivityResponse) *LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponsePtrOutput)
}

// Activity name.
func (o CustomActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CustomActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o CustomActivityResponseOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomActivityResponse) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o CustomActivityResponseOutput) Policy() ActivityPolicyResponsePtrOutput {
	return o.ApplyT(func(v CustomActivityResponse) *ActivityPolicyResponse { return v.Policy }).(ActivityPolicyResponsePtrOutput)
}

// Reference objects
func (o CustomActivityResponseOutput) ReferenceObjects() CustomActivityReferenceObjectResponsePtrOutput {
	return o.ApplyT(func(v CustomActivityResponse) *CustomActivityReferenceObjectResponse { return v.ReferenceObjects }).(CustomActivityReferenceObjectResponsePtrOutput)
}

// Resource linked service reference.
func (o CustomActivityResponseOutput) ResourceLinkedService() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v CustomActivityResponse) *LinkedServiceReferenceResponse { return v.ResourceLinkedService }).(LinkedServiceReferenceResponsePtrOutput)
}

// The retention time for the files submitted for custom activity. Type: double (or Expression with resultType double).
func (o CustomActivityResponseOutput) RetentionTimeInDays() pulumi.AnyOutput {
	return o.ApplyT(func(v CustomActivityResponse) interface{} { return v.RetentionTimeInDays }).(pulumi.AnyOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o CustomActivityResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomActivityResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'Custom'.
func (o CustomActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CustomActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o CustomActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v CustomActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

// Custom linked service.
type CustomDataSourceLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'CustomDataSource'.
	Type string `pulumi:"type"`
}

// CustomDataSourceLinkedServiceInput is an input type that accepts CustomDataSourceLinkedServiceArgs and CustomDataSourceLinkedServiceOutput values.
// You can construct a concrete instance of `CustomDataSourceLinkedServiceInput` via:
//
//	CustomDataSourceLinkedServiceArgs{...}
type CustomDataSourceLinkedServiceInput interface {
	pulumi.Input

	ToCustomDataSourceLinkedServiceOutput() CustomDataSourceLinkedServiceOutput
	ToCustomDataSourceLinkedServiceOutputWithContext(context.Context) CustomDataSourceLinkedServiceOutput
}

// Custom linked service.
type CustomDataSourceLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'CustomDataSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CustomDataSourceLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomDataSourceLinkedService)(nil)).Elem()
}

func (i CustomDataSourceLinkedServiceArgs) ToCustomDataSourceLinkedServiceOutput() CustomDataSourceLinkedServiceOutput {
	return i.ToCustomDataSourceLinkedServiceOutputWithContext(context.Background())
}

func (i CustomDataSourceLinkedServiceArgs) ToCustomDataSourceLinkedServiceOutputWithContext(ctx context.Context) CustomDataSourceLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomDataSourceLinkedServiceOutput)
}

// Custom linked service.
type CustomDataSourceLinkedServiceOutput struct{ *pulumi.OutputState }

func (CustomDataSourceLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomDataSourceLinkedService)(nil)).Elem()
}

func (o CustomDataSourceLinkedServiceOutput) ToCustomDataSourceLinkedServiceOutput() CustomDataSourceLinkedServiceOutput {
	return o
}

func (o CustomDataSourceLinkedServiceOutput) ToCustomDataSourceLinkedServiceOutputWithContext(ctx context.Context) CustomDataSourceLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o CustomDataSourceLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CustomDataSourceLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o CustomDataSourceLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v CustomDataSourceLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o CustomDataSourceLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomDataSourceLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o CustomDataSourceLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v CustomDataSourceLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
// Expected value is 'CustomDataSource'.
func (o CustomDataSourceLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CustomDataSourceLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Custom linked service.
type CustomDataSourceLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'CustomDataSource'.
	Type string `pulumi:"type"`
}

// Custom linked service.
type CustomDataSourceLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (CustomDataSourceLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomDataSourceLinkedServiceResponse)(nil)).Elem()
}

func (o CustomDataSourceLinkedServiceResponseOutput) ToCustomDataSourceLinkedServiceResponseOutput() CustomDataSourceLinkedServiceResponseOutput {
	return o
}

func (o CustomDataSourceLinkedServiceResponseOutput) ToCustomDataSourceLinkedServiceResponseOutputWithContext(ctx context.Context) CustomDataSourceLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o CustomDataSourceLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CustomDataSourceLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o CustomDataSourceLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v CustomDataSourceLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o CustomDataSourceLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomDataSourceLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o CustomDataSourceLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v CustomDataSourceLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
// Expected value is 'CustomDataSource'.
func (o CustomDataSourceLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CustomDataSourceLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The custom dataset.
type CustomDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'CustomDataset'.
	Type string `pulumi:"type"`
}

// CustomDatasetInput is an input type that accepts CustomDatasetArgs and CustomDatasetOutput values.
// You can construct a concrete instance of `CustomDatasetInput` via:
//
//	CustomDatasetArgs{...}
type CustomDatasetInput interface {
	pulumi.Input

	ToCustomDatasetOutput() CustomDatasetOutput
	ToCustomDatasetOutputWithContext(context.Context) CustomDatasetOutput
}

// The custom dataset.
type CustomDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'CustomDataset'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CustomDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomDataset)(nil)).Elem()
}

func (i CustomDatasetArgs) ToCustomDatasetOutput() CustomDatasetOutput {
	return i.ToCustomDatasetOutputWithContext(context.Background())
}

func (i CustomDatasetArgs) ToCustomDatasetOutputWithContext(ctx context.Context) CustomDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomDatasetOutput)
}

// The custom dataset.
type CustomDatasetOutput struct{ *pulumi.OutputState }

func (CustomDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomDataset)(nil)).Elem()
}

func (o CustomDatasetOutput) ToCustomDatasetOutput() CustomDatasetOutput {
	return o
}

func (o CustomDatasetOutput) ToCustomDatasetOutputWithContext(ctx context.Context) CustomDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o CustomDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CustomDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o CustomDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o CustomDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v CustomDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o CustomDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v CustomDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o CustomDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v CustomDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o CustomDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v CustomDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o CustomDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v CustomDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'CustomDataset'.
func (o CustomDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CustomDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The custom dataset.
type CustomDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'CustomDataset'.
	Type string `pulumi:"type"`
}

// The custom dataset.
type CustomDatasetResponseOutput struct{ *pulumi.OutputState }

func (CustomDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomDatasetResponse)(nil)).Elem()
}

func (o CustomDatasetResponseOutput) ToCustomDatasetResponseOutput() CustomDatasetResponseOutput {
	return o
}

func (o CustomDatasetResponseOutput) ToCustomDatasetResponseOutputWithContext(ctx context.Context) CustomDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o CustomDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CustomDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o CustomDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o CustomDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v CustomDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o CustomDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v CustomDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o CustomDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v CustomDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o CustomDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v CustomDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o CustomDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v CustomDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'CustomDataset'.
func (o CustomDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CustomDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Trigger that runs every time a custom event is received.
type CustomEventsTrigger struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// The list of event types that cause this trigger to fire.
	Events []interface{} `pulumi:"events"`
	// Pipelines that need to be started.
	Pipelines []TriggerPipelineReference `pulumi:"pipelines"`
	// The ARM resource ID of the Azure Event Grid Topic.
	Scope string `pulumi:"scope"`
	// The event subject must begin with the pattern provided for trigger to fire. At least one of these must be provided: subjectBeginsWith, subjectEndsWith.
	SubjectBeginsWith *string `pulumi:"subjectBeginsWith"`
	// The event subject must end with the pattern provided for trigger to fire. At least one of these must be provided: subjectBeginsWith, subjectEndsWith.
	SubjectEndsWith *string `pulumi:"subjectEndsWith"`
	// Trigger type.
	// Expected value is 'CustomEventsTrigger'.
	Type string `pulumi:"type"`
}

// CustomEventsTriggerInput is an input type that accepts CustomEventsTriggerArgs and CustomEventsTriggerOutput values.
// You can construct a concrete instance of `CustomEventsTriggerInput` via:
//
//	CustomEventsTriggerArgs{...}
type CustomEventsTriggerInput interface {
	pulumi.Input

	ToCustomEventsTriggerOutput() CustomEventsTriggerOutput
	ToCustomEventsTriggerOutputWithContext(context.Context) CustomEventsTriggerOutput
}

// Trigger that runs every time a custom event is received.
type CustomEventsTriggerArgs struct {
	// List of tags that can be used for describing the trigger.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Trigger description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The list of event types that cause this trigger to fire.
	Events pulumi.ArrayInput `pulumi:"events"`
	// Pipelines that need to be started.
	Pipelines TriggerPipelineReferenceArrayInput `pulumi:"pipelines"`
	// The ARM resource ID of the Azure Event Grid Topic.
	Scope pulumi.StringInput `pulumi:"scope"`
	// The event subject must begin with the pattern provided for trigger to fire. At least one of these must be provided: subjectBeginsWith, subjectEndsWith.
	SubjectBeginsWith pulumi.StringPtrInput `pulumi:"subjectBeginsWith"`
	// The event subject must end with the pattern provided for trigger to fire. At least one of these must be provided: subjectBeginsWith, subjectEndsWith.
	SubjectEndsWith pulumi.StringPtrInput `pulumi:"subjectEndsWith"`
	// Trigger type.
	// Expected value is 'CustomEventsTrigger'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CustomEventsTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomEventsTrigger)(nil)).Elem()
}

func (i CustomEventsTriggerArgs) ToCustomEventsTriggerOutput() CustomEventsTriggerOutput {
	return i.ToCustomEventsTriggerOutputWithContext(context.Background())
}

func (i CustomEventsTriggerArgs) ToCustomEventsTriggerOutputWithContext(ctx context.Context) CustomEventsTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomEventsTriggerOutput)
}

// Trigger that runs every time a custom event is received.
type CustomEventsTriggerOutput struct{ *pulumi.OutputState }

func (CustomEventsTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomEventsTrigger)(nil)).Elem()
}

func (o CustomEventsTriggerOutput) ToCustomEventsTriggerOutput() CustomEventsTriggerOutput {
	return o
}

func (o CustomEventsTriggerOutput) ToCustomEventsTriggerOutputWithContext(ctx context.Context) CustomEventsTriggerOutput {
	return o
}

// List of tags that can be used for describing the trigger.
func (o CustomEventsTriggerOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CustomEventsTrigger) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Trigger description.
func (o CustomEventsTriggerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomEventsTrigger) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The list of event types that cause this trigger to fire.
func (o CustomEventsTriggerOutput) Events() pulumi.ArrayOutput {
	return o.ApplyT(func(v CustomEventsTrigger) []interface{} { return v.Events }).(pulumi.ArrayOutput)
}

// Pipelines that need to be started.
func (o CustomEventsTriggerOutput) Pipelines() TriggerPipelineReferenceArrayOutput {
	return o.ApplyT(func(v CustomEventsTrigger) []TriggerPipelineReference { return v.Pipelines }).(TriggerPipelineReferenceArrayOutput)
}

// The ARM resource ID of the Azure Event Grid Topic.
func (o CustomEventsTriggerOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v CustomEventsTrigger) string { return v.Scope }).(pulumi.StringOutput)
}

// The event subject must begin with the pattern provided for trigger to fire. At least one of these must be provided: subjectBeginsWith, subjectEndsWith.
func (o CustomEventsTriggerOutput) SubjectBeginsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomEventsTrigger) *string { return v.SubjectBeginsWith }).(pulumi.StringPtrOutput)
}

// The event subject must end with the pattern provided for trigger to fire. At least one of these must be provided: subjectBeginsWith, subjectEndsWith.
func (o CustomEventsTriggerOutput) SubjectEndsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomEventsTrigger) *string { return v.SubjectEndsWith }).(pulumi.StringPtrOutput)
}

// Trigger type.
// Expected value is 'CustomEventsTrigger'.
func (o CustomEventsTriggerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CustomEventsTrigger) string { return v.Type }).(pulumi.StringOutput)
}

// Trigger that runs every time a custom event is received.
type CustomEventsTriggerResponse struct {
	// List of tags that can be used for describing the trigger.
	Annotations []interface{} `pulumi:"annotations"`
	// Trigger description.
	Description *string `pulumi:"description"`
	// The list of event types that cause this trigger to fire.
	Events []interface{} `pulumi:"events"`
	// Pipelines that need to be started.
	Pipelines []TriggerPipelineReferenceResponse `pulumi:"pipelines"`
	// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState string `pulumi:"runtimeState"`
	// The ARM resource ID of the Azure Event Grid Topic.
	Scope string `pulumi:"scope"`
	// The event subject must begin with the pattern provided for trigger to fire. At least one of these must be provided: subjectBeginsWith, subjectEndsWith.
	SubjectBeginsWith *string `pulumi:"subjectBeginsWith"`
	// The event subject must end with the pattern provided for trigger to fire. At least one of these must be provided: subjectBeginsWith, subjectEndsWith.
	SubjectEndsWith *string `pulumi:"subjectEndsWith"`
	// Trigger type.
	// Expected value is 'CustomEventsTrigger'.
	Type string `pulumi:"type"`
}

// Trigger that runs every time a custom event is received.
type CustomEventsTriggerResponseOutput struct{ *pulumi.OutputState }

func (CustomEventsTriggerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomEventsTriggerResponse)(nil)).Elem()
}

func (o CustomEventsTriggerResponseOutput) ToCustomEventsTriggerResponseOutput() CustomEventsTriggerResponseOutput {
	return o
}

func (o CustomEventsTriggerResponseOutput) ToCustomEventsTriggerResponseOutputWithContext(ctx context.Context) CustomEventsTriggerResponseOutput {
	return o
}

// List of tags that can be used for describing the trigger.
func (o CustomEventsTriggerResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v CustomEventsTriggerResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Trigger description.
func (o CustomEventsTriggerResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomEventsTriggerResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The list of event types that cause this trigger to fire.
func (o CustomEventsTriggerResponseOutput) Events() pulumi.ArrayOutput {
	return o.ApplyT(func(v CustomEventsTriggerResponse) []interface{} { return v.Events }).(pulumi.ArrayOutput)
}

// Pipelines that need to be started.
func (o CustomEventsTriggerResponseOutput) Pipelines() TriggerPipelineReferenceResponseArrayOutput {
	return o.ApplyT(func(v CustomEventsTriggerResponse) []TriggerPipelineReferenceResponse { return v.Pipelines }).(TriggerPipelineReferenceResponseArrayOutput)
}

// Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
func (o CustomEventsTriggerResponseOutput) RuntimeState() pulumi.StringOutput {
	return o.ApplyT(func(v CustomEventsTriggerResponse) string { return v.RuntimeState }).(pulumi.StringOutput)
}

// The ARM resource ID of the Azure Event Grid Topic.
func (o CustomEventsTriggerResponseOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v CustomEventsTriggerResponse) string { return v.Scope }).(pulumi.StringOutput)
}

// The event subject must begin with the pattern provided for trigger to fire. At least one of these must be provided: subjectBeginsWith, subjectEndsWith.
func (o CustomEventsTriggerResponseOutput) SubjectBeginsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomEventsTriggerResponse) *string { return v.SubjectBeginsWith }).(pulumi.StringPtrOutput)
}

// The event subject must end with the pattern provided for trigger to fire. At least one of these must be provided: subjectBeginsWith, subjectEndsWith.
func (o CustomEventsTriggerResponseOutput) SubjectEndsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomEventsTriggerResponse) *string { return v.SubjectEndsWith }).(pulumi.StringPtrOutput)
}

// Trigger type.
// Expected value is 'CustomEventsTrigger'.
func (o CustomEventsTriggerResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CustomEventsTriggerResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Default value.
type DWCopyCommandDefaultValue struct {
	// Column name. Type: object (or Expression with resultType string).
	ColumnName interface{} `pulumi:"columnName"`
	// The default value of the column. Type: object (or Expression with resultType string).
	DefaultValue interface{} `pulumi:"defaultValue"`
}

// DWCopyCommandDefaultValueInput is an input type that accepts DWCopyCommandDefaultValueArgs and DWCopyCommandDefaultValueOutput values.
// You can construct a concrete instance of `DWCopyCommandDefaultValueInput` via:
//
//	DWCopyCommandDefaultValueArgs{...}
type DWCopyCommandDefaultValueInput interface {
	pulumi.Input

	ToDWCopyCommandDefaultValueOutput() DWCopyCommandDefaultValueOutput
	ToDWCopyCommandDefaultValueOutputWithContext(context.Context) DWCopyCommandDefaultValueOutput
}

// Default value.
type DWCopyCommandDefaultValueArgs struct {
	// Column name. Type: object (or Expression with resultType string).
	ColumnName pulumi.Input `pulumi:"columnName"`
	// The default value of the column. Type: object (or Expression with resultType string).
	DefaultValue pulumi.Input `pulumi:"defaultValue"`
}

func (DWCopyCommandDefaultValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DWCopyCommandDefaultValue)(nil)).Elem()
}

func (i DWCopyCommandDefaultValueArgs) ToDWCopyCommandDefaultValueOutput() DWCopyCommandDefaultValueOutput {
	return i.ToDWCopyCommandDefaultValueOutputWithContext(context.Background())
}

func (i DWCopyCommandDefaultValueArgs) ToDWCopyCommandDefaultValueOutputWithContext(ctx context.Context) DWCopyCommandDefaultValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DWCopyCommandDefaultValueOutput)
}

// DWCopyCommandDefaultValueArrayInput is an input type that accepts DWCopyCommandDefaultValueArray and DWCopyCommandDefaultValueArrayOutput values.
// You can construct a concrete instance of `DWCopyCommandDefaultValueArrayInput` via:
//
//	DWCopyCommandDefaultValueArray{ DWCopyCommandDefaultValueArgs{...} }
type DWCopyCommandDefaultValueArrayInput interface {
	pulumi.Input

	ToDWCopyCommandDefaultValueArrayOutput() DWCopyCommandDefaultValueArrayOutput
	ToDWCopyCommandDefaultValueArrayOutputWithContext(context.Context) DWCopyCommandDefaultValueArrayOutput
}

type DWCopyCommandDefaultValueArray []DWCopyCommandDefaultValueInput

func (DWCopyCommandDefaultValueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DWCopyCommandDefaultValue)(nil)).Elem()
}

func (i DWCopyCommandDefaultValueArray) ToDWCopyCommandDefaultValueArrayOutput() DWCopyCommandDefaultValueArrayOutput {
	return i.ToDWCopyCommandDefaultValueArrayOutputWithContext(context.Background())
}

func (i DWCopyCommandDefaultValueArray) ToDWCopyCommandDefaultValueArrayOutputWithContext(ctx context.Context) DWCopyCommandDefaultValueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DWCopyCommandDefaultValueArrayOutput)
}

// Default value.
type DWCopyCommandDefaultValueOutput struct{ *pulumi.OutputState }

func (DWCopyCommandDefaultValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DWCopyCommandDefaultValue)(nil)).Elem()
}

func (o DWCopyCommandDefaultValueOutput) ToDWCopyCommandDefaultValueOutput() DWCopyCommandDefaultValueOutput {
	return o
}

func (o DWCopyCommandDefaultValueOutput) ToDWCopyCommandDefaultValueOutputWithContext(ctx context.Context) DWCopyCommandDefaultValueOutput {
	return o
}

// Column name. Type: object (or Expression with resultType string).
func (o DWCopyCommandDefaultValueOutput) ColumnName() pulumi.AnyOutput {
	return o.ApplyT(func(v DWCopyCommandDefaultValue) interface{} { return v.ColumnName }).(pulumi.AnyOutput)
}

// The default value of the column. Type: object (or Expression with resultType string).
func (o DWCopyCommandDefaultValueOutput) DefaultValue() pulumi.AnyOutput {
	return o.ApplyT(func(v DWCopyCommandDefaultValue) interface{} { return v.DefaultValue }).(pulumi.AnyOutput)
}

type DWCopyCommandDefaultValueArrayOutput struct{ *pulumi.OutputState }

func (DWCopyCommandDefaultValueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DWCopyCommandDefaultValue)(nil)).Elem()
}

func (o DWCopyCommandDefaultValueArrayOutput) ToDWCopyCommandDefaultValueArrayOutput() DWCopyCommandDefaultValueArrayOutput {
	return o
}

func (o DWCopyCommandDefaultValueArrayOutput) ToDWCopyCommandDefaultValueArrayOutputWithContext(ctx context.Context) DWCopyCommandDefaultValueArrayOutput {
	return o
}

func (o DWCopyCommandDefaultValueArrayOutput) Index(i pulumi.IntInput) DWCopyCommandDefaultValueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DWCopyCommandDefaultValue {
		return vs[0].([]DWCopyCommandDefaultValue)[vs[1].(int)]
	}).(DWCopyCommandDefaultValueOutput)
}

// Default value.
type DWCopyCommandDefaultValueResponse struct {
	// Column name. Type: object (or Expression with resultType string).
	ColumnName interface{} `pulumi:"columnName"`
	// The default value of the column. Type: object (or Expression with resultType string).
	DefaultValue interface{} `pulumi:"defaultValue"`
}

// Default value.
type DWCopyCommandDefaultValueResponseOutput struct{ *pulumi.OutputState }

func (DWCopyCommandDefaultValueResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DWCopyCommandDefaultValueResponse)(nil)).Elem()
}

func (o DWCopyCommandDefaultValueResponseOutput) ToDWCopyCommandDefaultValueResponseOutput() DWCopyCommandDefaultValueResponseOutput {
	return o
}

func (o DWCopyCommandDefaultValueResponseOutput) ToDWCopyCommandDefaultValueResponseOutputWithContext(ctx context.Context) DWCopyCommandDefaultValueResponseOutput {
	return o
}

// Column name. Type: object (or Expression with resultType string).
func (o DWCopyCommandDefaultValueResponseOutput) ColumnName() pulumi.AnyOutput {
	return o.ApplyT(func(v DWCopyCommandDefaultValueResponse) interface{} { return v.ColumnName }).(pulumi.AnyOutput)
}

// The default value of the column. Type: object (or Expression with resultType string).
func (o DWCopyCommandDefaultValueResponseOutput) DefaultValue() pulumi.AnyOutput {
	return o.ApplyT(func(v DWCopyCommandDefaultValueResponse) interface{} { return v.DefaultValue }).(pulumi.AnyOutput)
}

type DWCopyCommandDefaultValueResponseArrayOutput struct{ *pulumi.OutputState }

func (DWCopyCommandDefaultValueResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DWCopyCommandDefaultValueResponse)(nil)).Elem()
}

func (o DWCopyCommandDefaultValueResponseArrayOutput) ToDWCopyCommandDefaultValueResponseArrayOutput() DWCopyCommandDefaultValueResponseArrayOutput {
	return o
}

func (o DWCopyCommandDefaultValueResponseArrayOutput) ToDWCopyCommandDefaultValueResponseArrayOutputWithContext(ctx context.Context) DWCopyCommandDefaultValueResponseArrayOutput {
	return o
}

func (o DWCopyCommandDefaultValueResponseArrayOutput) Index(i pulumi.IntInput) DWCopyCommandDefaultValueResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DWCopyCommandDefaultValueResponse {
		return vs[0].([]DWCopyCommandDefaultValueResponse)[vs[1].(int)]
	}).(DWCopyCommandDefaultValueResponseOutput)
}

// DW Copy Command settings.
type DWCopyCommandSettings struct {
	// Additional options directly passed to SQL DW in Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalOptions": { "MAXERRORS": "1000", "DATEFORMAT": "'ymd'" }
	AdditionalOptions map[string]string `pulumi:"additionalOptions"`
	// Specifies the default values for each target column in SQL DW. The default values in the property overwrite the DEFAULT constraint set in the DB, and identity column cannot have a default value. Type: array of objects (or Expression with resultType array of objects).
	DefaultValues []DWCopyCommandDefaultValue `pulumi:"defaultValues"`
}

// DWCopyCommandSettingsInput is an input type that accepts DWCopyCommandSettingsArgs and DWCopyCommandSettingsOutput values.
// You can construct a concrete instance of `DWCopyCommandSettingsInput` via:
//
//	DWCopyCommandSettingsArgs{...}
type DWCopyCommandSettingsInput interface {
	pulumi.Input

	ToDWCopyCommandSettingsOutput() DWCopyCommandSettingsOutput
	ToDWCopyCommandSettingsOutputWithContext(context.Context) DWCopyCommandSettingsOutput
}

// DW Copy Command settings.
type DWCopyCommandSettingsArgs struct {
	// Additional options directly passed to SQL DW in Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalOptions": { "MAXERRORS": "1000", "DATEFORMAT": "'ymd'" }
	AdditionalOptions pulumi.StringMapInput `pulumi:"additionalOptions"`
	// Specifies the default values for each target column in SQL DW. The default values in the property overwrite the DEFAULT constraint set in the DB, and identity column cannot have a default value. Type: array of objects (or Expression with resultType array of objects).
	DefaultValues DWCopyCommandDefaultValueArrayInput `pulumi:"defaultValues"`
}

func (DWCopyCommandSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DWCopyCommandSettings)(nil)).Elem()
}

func (i DWCopyCommandSettingsArgs) ToDWCopyCommandSettingsOutput() DWCopyCommandSettingsOutput {
	return i.ToDWCopyCommandSettingsOutputWithContext(context.Background())
}

func (i DWCopyCommandSettingsArgs) ToDWCopyCommandSettingsOutputWithContext(ctx context.Context) DWCopyCommandSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DWCopyCommandSettingsOutput)
}

func (i DWCopyCommandSettingsArgs) ToDWCopyCommandSettingsPtrOutput() DWCopyCommandSettingsPtrOutput {
	return i.ToDWCopyCommandSettingsPtrOutputWithContext(context.Background())
}

func (i DWCopyCommandSettingsArgs) ToDWCopyCommandSettingsPtrOutputWithContext(ctx context.Context) DWCopyCommandSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DWCopyCommandSettingsOutput).ToDWCopyCommandSettingsPtrOutputWithContext(ctx)
}

// DWCopyCommandSettingsPtrInput is an input type that accepts DWCopyCommandSettingsArgs, DWCopyCommandSettingsPtr and DWCopyCommandSettingsPtrOutput values.
// You can construct a concrete instance of `DWCopyCommandSettingsPtrInput` via:
//
//	        DWCopyCommandSettingsArgs{...}
//
//	or:
//
//	        nil
type DWCopyCommandSettingsPtrInput interface {
	pulumi.Input

	ToDWCopyCommandSettingsPtrOutput() DWCopyCommandSettingsPtrOutput
	ToDWCopyCommandSettingsPtrOutputWithContext(context.Context) DWCopyCommandSettingsPtrOutput
}

type dwcopyCommandSettingsPtrType DWCopyCommandSettingsArgs

func DWCopyCommandSettingsPtr(v *DWCopyCommandSettingsArgs) DWCopyCommandSettingsPtrInput {
	return (*dwcopyCommandSettingsPtrType)(v)
}

func (*dwcopyCommandSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DWCopyCommandSettings)(nil)).Elem()
}

func (i *dwcopyCommandSettingsPtrType) ToDWCopyCommandSettingsPtrOutput() DWCopyCommandSettingsPtrOutput {
	return i.ToDWCopyCommandSettingsPtrOutputWithContext(context.Background())
}

func (i *dwcopyCommandSettingsPtrType) ToDWCopyCommandSettingsPtrOutputWithContext(ctx context.Context) DWCopyCommandSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DWCopyCommandSettingsPtrOutput)
}

// DW Copy Command settings.
type DWCopyCommandSettingsOutput struct{ *pulumi.OutputState }

func (DWCopyCommandSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DWCopyCommandSettings)(nil)).Elem()
}

func (o DWCopyCommandSettingsOutput) ToDWCopyCommandSettingsOutput() DWCopyCommandSettingsOutput {
	return o
}

func (o DWCopyCommandSettingsOutput) ToDWCopyCommandSettingsOutputWithContext(ctx context.Context) DWCopyCommandSettingsOutput {
	return o
}

func (o DWCopyCommandSettingsOutput) ToDWCopyCommandSettingsPtrOutput() DWCopyCommandSettingsPtrOutput {
	return o.ToDWCopyCommandSettingsPtrOutputWithContext(context.Background())
}

func (o DWCopyCommandSettingsOutput) ToDWCopyCommandSettingsPtrOutputWithContext(ctx context.Context) DWCopyCommandSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DWCopyCommandSettings) *DWCopyCommandSettings {
		return &v
	}).(DWCopyCommandSettingsPtrOutput)
}

// Additional options directly passed to SQL DW in Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalOptions": { "MAXERRORS": "1000", "DATEFORMAT": "'ymd'" }
func (o DWCopyCommandSettingsOutput) AdditionalOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v DWCopyCommandSettings) map[string]string { return v.AdditionalOptions }).(pulumi.StringMapOutput)
}

// Specifies the default values for each target column in SQL DW. The default values in the property overwrite the DEFAULT constraint set in the DB, and identity column cannot have a default value. Type: array of objects (or Expression with resultType array of objects).
func (o DWCopyCommandSettingsOutput) DefaultValues() DWCopyCommandDefaultValueArrayOutput {
	return o.ApplyT(func(v DWCopyCommandSettings) []DWCopyCommandDefaultValue { return v.DefaultValues }).(DWCopyCommandDefaultValueArrayOutput)
}

type DWCopyCommandSettingsPtrOutput struct{ *pulumi.OutputState }

func (DWCopyCommandSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DWCopyCommandSettings)(nil)).Elem()
}

func (o DWCopyCommandSettingsPtrOutput) ToDWCopyCommandSettingsPtrOutput() DWCopyCommandSettingsPtrOutput {
	return o
}

func (o DWCopyCommandSettingsPtrOutput) ToDWCopyCommandSettingsPtrOutputWithContext(ctx context.Context) DWCopyCommandSettingsPtrOutput {
	return o
}

func (o DWCopyCommandSettingsPtrOutput) Elem() DWCopyCommandSettingsOutput {
	return o.ApplyT(func(v *DWCopyCommandSettings) DWCopyCommandSettings {
		if v != nil {
			return *v
		}
		var ret DWCopyCommandSettings
		return ret
	}).(DWCopyCommandSettingsOutput)
}

// Additional options directly passed to SQL DW in Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalOptions": { "MAXERRORS": "1000", "DATEFORMAT": "'ymd'" }
func (o DWCopyCommandSettingsPtrOutput) AdditionalOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DWCopyCommandSettings) map[string]string {
		if v == nil {
			return nil
		}
		return v.AdditionalOptions
	}).(pulumi.StringMapOutput)
}

// Specifies the default values for each target column in SQL DW. The default values in the property overwrite the DEFAULT constraint set in the DB, and identity column cannot have a default value. Type: array of objects (or Expression with resultType array of objects).
func (o DWCopyCommandSettingsPtrOutput) DefaultValues() DWCopyCommandDefaultValueArrayOutput {
	return o.ApplyT(func(v *DWCopyCommandSettings) []DWCopyCommandDefaultValue {
		if v == nil {
			return nil
		}
		return v.DefaultValues
	}).(DWCopyCommandDefaultValueArrayOutput)
}

// DW Copy Command settings.
type DWCopyCommandSettingsResponse struct {
	// Additional options directly passed to SQL DW in Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalOptions": { "MAXERRORS": "1000", "DATEFORMAT": "'ymd'" }
	AdditionalOptions map[string]string `pulumi:"additionalOptions"`
	// Specifies the default values for each target column in SQL DW. The default values in the property overwrite the DEFAULT constraint set in the DB, and identity column cannot have a default value. Type: array of objects (or Expression with resultType array of objects).
	DefaultValues []DWCopyCommandDefaultValueResponse `pulumi:"defaultValues"`
}

// DW Copy Command settings.
type DWCopyCommandSettingsResponseOutput struct{ *pulumi.OutputState }

func (DWCopyCommandSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DWCopyCommandSettingsResponse)(nil)).Elem()
}

func (o DWCopyCommandSettingsResponseOutput) ToDWCopyCommandSettingsResponseOutput() DWCopyCommandSettingsResponseOutput {
	return o
}

func (o DWCopyCommandSettingsResponseOutput) ToDWCopyCommandSettingsResponseOutputWithContext(ctx context.Context) DWCopyCommandSettingsResponseOutput {
	return o
}

// Additional options directly passed to SQL DW in Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalOptions": { "MAXERRORS": "1000", "DATEFORMAT": "'ymd'" }
func (o DWCopyCommandSettingsResponseOutput) AdditionalOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v DWCopyCommandSettingsResponse) map[string]string { return v.AdditionalOptions }).(pulumi.StringMapOutput)
}

// Specifies the default values for each target column in SQL DW. The default values in the property overwrite the DEFAULT constraint set in the DB, and identity column cannot have a default value. Type: array of objects (or Expression with resultType array of objects).
func (o DWCopyCommandSettingsResponseOutput) DefaultValues() DWCopyCommandDefaultValueResponseArrayOutput {
	return o.ApplyT(func(v DWCopyCommandSettingsResponse) []DWCopyCommandDefaultValueResponse { return v.DefaultValues }).(DWCopyCommandDefaultValueResponseArrayOutput)
}

type DWCopyCommandSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (DWCopyCommandSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DWCopyCommandSettingsResponse)(nil)).Elem()
}

func (o DWCopyCommandSettingsResponsePtrOutput) ToDWCopyCommandSettingsResponsePtrOutput() DWCopyCommandSettingsResponsePtrOutput {
	return o
}

func (o DWCopyCommandSettingsResponsePtrOutput) ToDWCopyCommandSettingsResponsePtrOutputWithContext(ctx context.Context) DWCopyCommandSettingsResponsePtrOutput {
	return o
}

func (o DWCopyCommandSettingsResponsePtrOutput) Elem() DWCopyCommandSettingsResponseOutput {
	return o.ApplyT(func(v *DWCopyCommandSettingsResponse) DWCopyCommandSettingsResponse {
		if v != nil {
			return *v
		}
		var ret DWCopyCommandSettingsResponse
		return ret
	}).(DWCopyCommandSettingsResponseOutput)
}

// Additional options directly passed to SQL DW in Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: "additionalOptions": { "MAXERRORS": "1000", "DATEFORMAT": "'ymd'" }
func (o DWCopyCommandSettingsResponsePtrOutput) AdditionalOptions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DWCopyCommandSettingsResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.AdditionalOptions
	}).(pulumi.StringMapOutput)
}

// Specifies the default values for each target column in SQL DW. The default values in the property overwrite the DEFAULT constraint set in the DB, and identity column cannot have a default value. Type: array of objects (or Expression with resultType array of objects).
func (o DWCopyCommandSettingsResponsePtrOutput) DefaultValues() DWCopyCommandDefaultValueResponseArrayOutput {
	return o.ApplyT(func(v *DWCopyCommandSettingsResponse) []DWCopyCommandDefaultValueResponse {
		if v == nil {
			return nil
		}
		return v.DefaultValues
	}).(DWCopyCommandDefaultValueResponseArrayOutput)
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
type DataFlowFolder struct {
	// The name of the folder that this data flow is in.
	Name *string `pulumi:"name"`
}

// DataFlowFolderInput is an input type that accepts DataFlowFolderArgs and DataFlowFolderOutput values.
// You can construct a concrete instance of `DataFlowFolderInput` via:
//
//	DataFlowFolderArgs{...}
type DataFlowFolderInput interface {
	pulumi.Input

	ToDataFlowFolderOutput() DataFlowFolderOutput
	ToDataFlowFolderOutputWithContext(context.Context) DataFlowFolderOutput
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
type DataFlowFolderArgs struct {
	// The name of the folder that this data flow is in.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DataFlowFolderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowFolder)(nil)).Elem()
}

func (i DataFlowFolderArgs) ToDataFlowFolderOutput() DataFlowFolderOutput {
	return i.ToDataFlowFolderOutputWithContext(context.Background())
}

func (i DataFlowFolderArgs) ToDataFlowFolderOutputWithContext(ctx context.Context) DataFlowFolderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowFolderOutput)
}

func (i DataFlowFolderArgs) ToDataFlowFolderPtrOutput() DataFlowFolderPtrOutput {
	return i.ToDataFlowFolderPtrOutputWithContext(context.Background())
}

func (i DataFlowFolderArgs) ToDataFlowFolderPtrOutputWithContext(ctx context.Context) DataFlowFolderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowFolderOutput).ToDataFlowFolderPtrOutputWithContext(ctx)
}

// DataFlowFolderPtrInput is an input type that accepts DataFlowFolderArgs, DataFlowFolderPtr and DataFlowFolderPtrOutput values.
// You can construct a concrete instance of `DataFlowFolderPtrInput` via:
//
//	        DataFlowFolderArgs{...}
//
//	or:
//
//	        nil
type DataFlowFolderPtrInput interface {
	pulumi.Input

	ToDataFlowFolderPtrOutput() DataFlowFolderPtrOutput
	ToDataFlowFolderPtrOutputWithContext(context.Context) DataFlowFolderPtrOutput
}

type dataFlowFolderPtrType DataFlowFolderArgs

func DataFlowFolderPtr(v *DataFlowFolderArgs) DataFlowFolderPtrInput {
	return (*dataFlowFolderPtrType)(v)
}

func (*dataFlowFolderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataFlowFolder)(nil)).Elem()
}

func (i *dataFlowFolderPtrType) ToDataFlowFolderPtrOutput() DataFlowFolderPtrOutput {
	return i.ToDataFlowFolderPtrOutputWithContext(context.Background())
}

func (i *dataFlowFolderPtrType) ToDataFlowFolderPtrOutputWithContext(ctx context.Context) DataFlowFolderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowFolderPtrOutput)
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
type DataFlowFolderOutput struct{ *pulumi.OutputState }

func (DataFlowFolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowFolder)(nil)).Elem()
}

func (o DataFlowFolderOutput) ToDataFlowFolderOutput() DataFlowFolderOutput {
	return o
}

func (o DataFlowFolderOutput) ToDataFlowFolderOutputWithContext(ctx context.Context) DataFlowFolderOutput {
	return o
}

func (o DataFlowFolderOutput) ToDataFlowFolderPtrOutput() DataFlowFolderPtrOutput {
	return o.ToDataFlowFolderPtrOutputWithContext(context.Background())
}

func (o DataFlowFolderOutput) ToDataFlowFolderPtrOutputWithContext(ctx context.Context) DataFlowFolderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataFlowFolder) *DataFlowFolder {
		return &v
	}).(DataFlowFolderPtrOutput)
}

// The name of the folder that this data flow is in.
func (o DataFlowFolderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFlowFolder) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DataFlowFolderPtrOutput struct{ *pulumi.OutputState }

func (DataFlowFolderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataFlowFolder)(nil)).Elem()
}

func (o DataFlowFolderPtrOutput) ToDataFlowFolderPtrOutput() DataFlowFolderPtrOutput {
	return o
}

func (o DataFlowFolderPtrOutput) ToDataFlowFolderPtrOutputWithContext(ctx context.Context) DataFlowFolderPtrOutput {
	return o
}

func (o DataFlowFolderPtrOutput) Elem() DataFlowFolderOutput {
	return o.ApplyT(func(v *DataFlowFolder) DataFlowFolder {
		if v != nil {
			return *v
		}
		var ret DataFlowFolder
		return ret
	}).(DataFlowFolderOutput)
}

// The name of the folder that this data flow is in.
func (o DataFlowFolderPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataFlowFolder) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Data flow reference type.
type DataFlowReference struct {
	// Reference data flow parameters from dataset.
	DatasetParameters interface{} `pulumi:"datasetParameters"`
	// Data flow parameters
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Reference data flow name.
	ReferenceName string `pulumi:"referenceName"`
	// Data flow reference type.
	Type string `pulumi:"type"`
}

// DataFlowReferenceInput is an input type that accepts DataFlowReferenceArgs and DataFlowReferenceOutput values.
// You can construct a concrete instance of `DataFlowReferenceInput` via:
//
//	DataFlowReferenceArgs{...}
type DataFlowReferenceInput interface {
	pulumi.Input

	ToDataFlowReferenceOutput() DataFlowReferenceOutput
	ToDataFlowReferenceOutputWithContext(context.Context) DataFlowReferenceOutput
}

// Data flow reference type.
type DataFlowReferenceArgs struct {
	// Reference data flow parameters from dataset.
	DatasetParameters pulumi.Input `pulumi:"datasetParameters"`
	// Data flow parameters
	Parameters pulumi.MapInput `pulumi:"parameters"`
	// Reference data flow name.
	ReferenceName pulumi.StringInput `pulumi:"referenceName"`
	// Data flow reference type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DataFlowReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowReference)(nil)).Elem()
}

func (i DataFlowReferenceArgs) ToDataFlowReferenceOutput() DataFlowReferenceOutput {
	return i.ToDataFlowReferenceOutputWithContext(context.Background())
}

func (i DataFlowReferenceArgs) ToDataFlowReferenceOutputWithContext(ctx context.Context) DataFlowReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowReferenceOutput)
}

func (i DataFlowReferenceArgs) ToDataFlowReferencePtrOutput() DataFlowReferencePtrOutput {
	return i.ToDataFlowReferencePtrOutputWithContext(context.Background())
}

func (i DataFlowReferenceArgs) ToDataFlowReferencePtrOutputWithContext(ctx context.Context) DataFlowReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowReferenceOutput).ToDataFlowReferencePtrOutputWithContext(ctx)
}

// DataFlowReferencePtrInput is an input type that accepts DataFlowReferenceArgs, DataFlowReferencePtr and DataFlowReferencePtrOutput values.
// You can construct a concrete instance of `DataFlowReferencePtrInput` via:
//
//	        DataFlowReferenceArgs{...}
//
//	or:
//
//	        nil
type DataFlowReferencePtrInput interface {
	pulumi.Input

	ToDataFlowReferencePtrOutput() DataFlowReferencePtrOutput
	ToDataFlowReferencePtrOutputWithContext(context.Context) DataFlowReferencePtrOutput
}

type dataFlowReferencePtrType DataFlowReferenceArgs

func DataFlowReferencePtr(v *DataFlowReferenceArgs) DataFlowReferencePtrInput {
	return (*dataFlowReferencePtrType)(v)
}

func (*dataFlowReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataFlowReference)(nil)).Elem()
}

func (i *dataFlowReferencePtrType) ToDataFlowReferencePtrOutput() DataFlowReferencePtrOutput {
	return i.ToDataFlowReferencePtrOutputWithContext(context.Background())
}

func (i *dataFlowReferencePtrType) ToDataFlowReferencePtrOutputWithContext(ctx context.Context) DataFlowReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowReferencePtrOutput)
}

// Data flow reference type.
type DataFlowReferenceOutput struct{ *pulumi.OutputState }

func (DataFlowReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowReference)(nil)).Elem()
}

func (o DataFlowReferenceOutput) ToDataFlowReferenceOutput() DataFlowReferenceOutput {
	return o
}

func (o DataFlowReferenceOutput) ToDataFlowReferenceOutputWithContext(ctx context.Context) DataFlowReferenceOutput {
	return o
}

func (o DataFlowReferenceOutput) ToDataFlowReferencePtrOutput() DataFlowReferencePtrOutput {
	return o.ToDataFlowReferencePtrOutputWithContext(context.Background())
}

func (o DataFlowReferenceOutput) ToDataFlowReferencePtrOutputWithContext(ctx context.Context) DataFlowReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataFlowReference) *DataFlowReference {
		return &v
	}).(DataFlowReferencePtrOutput)
}

// Reference data flow parameters from dataset.
func (o DataFlowReferenceOutput) DatasetParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v DataFlowReference) interface{} { return v.DatasetParameters }).(pulumi.AnyOutput)
}

// Data flow parameters
func (o DataFlowReferenceOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v DataFlowReference) map[string]interface{} { return v.Parameters }).(pulumi.MapOutput)
}

// Reference data flow name.
func (o DataFlowReferenceOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v DataFlowReference) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Data flow reference type.
func (o DataFlowReferenceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DataFlowReference) string { return v.Type }).(pulumi.StringOutput)
}

type DataFlowReferencePtrOutput struct{ *pulumi.OutputState }

func (DataFlowReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataFlowReference)(nil)).Elem()
}

func (o DataFlowReferencePtrOutput) ToDataFlowReferencePtrOutput() DataFlowReferencePtrOutput {
	return o
}

func (o DataFlowReferencePtrOutput) ToDataFlowReferencePtrOutputWithContext(ctx context.Context) DataFlowReferencePtrOutput {
	return o
}

func (o DataFlowReferencePtrOutput) Elem() DataFlowReferenceOutput {
	return o.ApplyT(func(v *DataFlowReference) DataFlowReference {
		if v != nil {
			return *v
		}
		var ret DataFlowReference
		return ret
	}).(DataFlowReferenceOutput)
}

// Reference data flow parameters from dataset.
func (o DataFlowReferencePtrOutput) DatasetParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v *DataFlowReference) interface{} {
		if v == nil {
			return nil
		}
		return v.DatasetParameters
	}).(pulumi.AnyOutput)
}

// Data flow parameters
func (o DataFlowReferencePtrOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v *DataFlowReference) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.MapOutput)
}

// Reference data flow name.
func (o DataFlowReferencePtrOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataFlowReference) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceName
	}).(pulumi.StringPtrOutput)
}

// Data flow reference type.
func (o DataFlowReferencePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataFlowReference) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Data flow reference type.
type DataFlowReferenceResponse struct {
	// Reference data flow parameters from dataset.
	DatasetParameters interface{} `pulumi:"datasetParameters"`
	// Data flow parameters
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Reference data flow name.
	ReferenceName string `pulumi:"referenceName"`
	// Data flow reference type.
	Type string `pulumi:"type"`
}

// Data flow reference type.
type DataFlowReferenceResponseOutput struct{ *pulumi.OutputState }

func (DataFlowReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowReferenceResponse)(nil)).Elem()
}

func (o DataFlowReferenceResponseOutput) ToDataFlowReferenceResponseOutput() DataFlowReferenceResponseOutput {
	return o
}

func (o DataFlowReferenceResponseOutput) ToDataFlowReferenceResponseOutputWithContext(ctx context.Context) DataFlowReferenceResponseOutput {
	return o
}

// Reference data flow parameters from dataset.
func (o DataFlowReferenceResponseOutput) DatasetParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v DataFlowReferenceResponse) interface{} { return v.DatasetParameters }).(pulumi.AnyOutput)
}

// Data flow parameters
func (o DataFlowReferenceResponseOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v DataFlowReferenceResponse) map[string]interface{} { return v.Parameters }).(pulumi.MapOutput)
}

// Reference data flow name.
func (o DataFlowReferenceResponseOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v DataFlowReferenceResponse) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Data flow reference type.
func (o DataFlowReferenceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DataFlowReferenceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type DataFlowReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (DataFlowReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataFlowReferenceResponse)(nil)).Elem()
}

func (o DataFlowReferenceResponsePtrOutput) ToDataFlowReferenceResponsePtrOutput() DataFlowReferenceResponsePtrOutput {
	return o
}

func (o DataFlowReferenceResponsePtrOutput) ToDataFlowReferenceResponsePtrOutputWithContext(ctx context.Context) DataFlowReferenceResponsePtrOutput {
	return o
}

func (o DataFlowReferenceResponsePtrOutput) Elem() DataFlowReferenceResponseOutput {
	return o.ApplyT(func(v *DataFlowReferenceResponse) DataFlowReferenceResponse {
		if v != nil {
			return *v
		}
		var ret DataFlowReferenceResponse
		return ret
	}).(DataFlowReferenceResponseOutput)
}

// Reference data flow parameters from dataset.
func (o DataFlowReferenceResponsePtrOutput) DatasetParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v *DataFlowReferenceResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.DatasetParameters
	}).(pulumi.AnyOutput)
}

// Data flow parameters
func (o DataFlowReferenceResponsePtrOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v *DataFlowReferenceResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.MapOutput)
}

// Reference data flow name.
func (o DataFlowReferenceResponsePtrOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataFlowReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceName
	}).(pulumi.StringPtrOutput)
}

// Data flow reference type.
func (o DataFlowReferenceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataFlowReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
type DataFlowResponseFolder struct {
	// The name of the folder that this data flow is in.
	Name *string `pulumi:"name"`
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
type DataFlowResponseFolderOutput struct{ *pulumi.OutputState }

func (DataFlowResponseFolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowResponseFolder)(nil)).Elem()
}

func (o DataFlowResponseFolderOutput) ToDataFlowResponseFolderOutput() DataFlowResponseFolderOutput {
	return o
}

func (o DataFlowResponseFolderOutput) ToDataFlowResponseFolderOutputWithContext(ctx context.Context) DataFlowResponseFolderOutput {
	return o
}

// The name of the folder that this data flow is in.
func (o DataFlowResponseFolderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFlowResponseFolder) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DataFlowResponseFolderPtrOutput struct{ *pulumi.OutputState }

func (DataFlowResponseFolderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataFlowResponseFolder)(nil)).Elem()
}

func (o DataFlowResponseFolderPtrOutput) ToDataFlowResponseFolderPtrOutput() DataFlowResponseFolderPtrOutput {
	return o
}

func (o DataFlowResponseFolderPtrOutput) ToDataFlowResponseFolderPtrOutputWithContext(ctx context.Context) DataFlowResponseFolderPtrOutput {
	return o
}

func (o DataFlowResponseFolderPtrOutput) Elem() DataFlowResponseFolderOutput {
	return o.ApplyT(func(v *DataFlowResponseFolder) DataFlowResponseFolder {
		if v != nil {
			return *v
		}
		var ret DataFlowResponseFolder
		return ret
	}).(DataFlowResponseFolderOutput)
}

// The name of the folder that this data flow is in.
func (o DataFlowResponseFolderPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataFlowResponseFolder) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Transformation for data flow sink.
type DataFlowSink struct {
	// Dataset reference.
	Dataset *DatasetReference `pulumi:"dataset"`
	// Transformation description.
	Description *string `pulumi:"description"`
	// Flowlet Reference
	Flowlet *DataFlowReference `pulumi:"flowlet"`
	// Linked service reference.
	LinkedService *LinkedServiceReference `pulumi:"linkedService"`
	// Transformation name.
	Name string `pulumi:"name"`
	// Rejected data linked service reference.
	RejectedDataLinkedService *LinkedServiceReference `pulumi:"rejectedDataLinkedService"`
	// Schema linked service reference.
	SchemaLinkedService *LinkedServiceReference `pulumi:"schemaLinkedService"`
}

// DataFlowSinkInput is an input type that accepts DataFlowSinkArgs and DataFlowSinkOutput values.
// You can construct a concrete instance of `DataFlowSinkInput` via:
//
//	DataFlowSinkArgs{...}
type DataFlowSinkInput interface {
	pulumi.Input

	ToDataFlowSinkOutput() DataFlowSinkOutput
	ToDataFlowSinkOutputWithContext(context.Context) DataFlowSinkOutput
}

// Transformation for data flow sink.
type DataFlowSinkArgs struct {
	// Dataset reference.
	Dataset DatasetReferencePtrInput `pulumi:"dataset"`
	// Transformation description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Flowlet Reference
	Flowlet DataFlowReferencePtrInput `pulumi:"flowlet"`
	// Linked service reference.
	LinkedService LinkedServiceReferencePtrInput `pulumi:"linkedService"`
	// Transformation name.
	Name pulumi.StringInput `pulumi:"name"`
	// Rejected data linked service reference.
	RejectedDataLinkedService LinkedServiceReferencePtrInput `pulumi:"rejectedDataLinkedService"`
	// Schema linked service reference.
	SchemaLinkedService LinkedServiceReferencePtrInput `pulumi:"schemaLinkedService"`
}

func (DataFlowSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowSink)(nil)).Elem()
}

func (i DataFlowSinkArgs) ToDataFlowSinkOutput() DataFlowSinkOutput {
	return i.ToDataFlowSinkOutputWithContext(context.Background())
}

func (i DataFlowSinkArgs) ToDataFlowSinkOutputWithContext(ctx context.Context) DataFlowSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowSinkOutput)
}

// DataFlowSinkArrayInput is an input type that accepts DataFlowSinkArray and DataFlowSinkArrayOutput values.
// You can construct a concrete instance of `DataFlowSinkArrayInput` via:
//
//	DataFlowSinkArray{ DataFlowSinkArgs{...} }
type DataFlowSinkArrayInput interface {
	pulumi.Input

	ToDataFlowSinkArrayOutput() DataFlowSinkArrayOutput
	ToDataFlowSinkArrayOutputWithContext(context.Context) DataFlowSinkArrayOutput
}

type DataFlowSinkArray []DataFlowSinkInput

func (DataFlowSinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataFlowSink)(nil)).Elem()
}

func (i DataFlowSinkArray) ToDataFlowSinkArrayOutput() DataFlowSinkArrayOutput {
	return i.ToDataFlowSinkArrayOutputWithContext(context.Background())
}

func (i DataFlowSinkArray) ToDataFlowSinkArrayOutputWithContext(ctx context.Context) DataFlowSinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowSinkArrayOutput)
}

// Transformation for data flow sink.
type DataFlowSinkOutput struct{ *pulumi.OutputState }

func (DataFlowSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowSink)(nil)).Elem()
}

func (o DataFlowSinkOutput) ToDataFlowSinkOutput() DataFlowSinkOutput {
	return o
}

func (o DataFlowSinkOutput) ToDataFlowSinkOutputWithContext(ctx context.Context) DataFlowSinkOutput {
	return o
}

// Dataset reference.
func (o DataFlowSinkOutput) Dataset() DatasetReferencePtrOutput {
	return o.ApplyT(func(v DataFlowSink) *DatasetReference { return v.Dataset }).(DatasetReferencePtrOutput)
}

// Transformation description.
func (o DataFlowSinkOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFlowSink) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Flowlet Reference
func (o DataFlowSinkOutput) Flowlet() DataFlowReferencePtrOutput {
	return o.ApplyT(func(v DataFlowSink) *DataFlowReference { return v.Flowlet }).(DataFlowReferencePtrOutput)
}

// Linked service reference.
func (o DataFlowSinkOutput) LinkedService() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v DataFlowSink) *LinkedServiceReference { return v.LinkedService }).(LinkedServiceReferencePtrOutput)
}

// Transformation name.
func (o DataFlowSinkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataFlowSink) string { return v.Name }).(pulumi.StringOutput)
}

// Rejected data linked service reference.
func (o DataFlowSinkOutput) RejectedDataLinkedService() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v DataFlowSink) *LinkedServiceReference { return v.RejectedDataLinkedService }).(LinkedServiceReferencePtrOutput)
}

// Schema linked service reference.
func (o DataFlowSinkOutput) SchemaLinkedService() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v DataFlowSink) *LinkedServiceReference { return v.SchemaLinkedService }).(LinkedServiceReferencePtrOutput)
}

type DataFlowSinkArrayOutput struct{ *pulumi.OutputState }

func (DataFlowSinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataFlowSink)(nil)).Elem()
}

func (o DataFlowSinkArrayOutput) ToDataFlowSinkArrayOutput() DataFlowSinkArrayOutput {
	return o
}

func (o DataFlowSinkArrayOutput) ToDataFlowSinkArrayOutputWithContext(ctx context.Context) DataFlowSinkArrayOutput {
	return o
}

func (o DataFlowSinkArrayOutput) Index(i pulumi.IntInput) DataFlowSinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataFlowSink {
		return vs[0].([]DataFlowSink)[vs[1].(int)]
	}).(DataFlowSinkOutput)
}

// Transformation for data flow sink.
type DataFlowSinkResponse struct {
	// Dataset reference.
	Dataset *DatasetReferenceResponse `pulumi:"dataset"`
	// Transformation description.
	Description *string `pulumi:"description"`
	// Flowlet Reference
	Flowlet *DataFlowReferenceResponse `pulumi:"flowlet"`
	// Linked service reference.
	LinkedService *LinkedServiceReferenceResponse `pulumi:"linkedService"`
	// Transformation name.
	Name string `pulumi:"name"`
	// Rejected data linked service reference.
	RejectedDataLinkedService *LinkedServiceReferenceResponse `pulumi:"rejectedDataLinkedService"`
	// Schema linked service reference.
	SchemaLinkedService *LinkedServiceReferenceResponse `pulumi:"schemaLinkedService"`
}

// Transformation for data flow sink.
type DataFlowSinkResponseOutput struct{ *pulumi.OutputState }

func (DataFlowSinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowSinkResponse)(nil)).Elem()
}

func (o DataFlowSinkResponseOutput) ToDataFlowSinkResponseOutput() DataFlowSinkResponseOutput {
	return o
}

func (o DataFlowSinkResponseOutput) ToDataFlowSinkResponseOutputWithContext(ctx context.Context) DataFlowSinkResponseOutput {
	return o
}

// Dataset reference.
func (o DataFlowSinkResponseOutput) Dataset() DatasetReferenceResponsePtrOutput {
	return o.ApplyT(func(v DataFlowSinkResponse) *DatasetReferenceResponse { return v.Dataset }).(DatasetReferenceResponsePtrOutput)
}

// Transformation description.
func (o DataFlowSinkResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFlowSinkResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Flowlet Reference
func (o DataFlowSinkResponseOutput) Flowlet() DataFlowReferenceResponsePtrOutput {
	return o.ApplyT(func(v DataFlowSinkResponse) *DataFlowReferenceResponse { return v.Flowlet }).(DataFlowReferenceResponsePtrOutput)
}

// Linked service reference.
func (o DataFlowSinkResponseOutput) LinkedService() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v DataFlowSinkResponse) *LinkedServiceReferenceResponse { return v.LinkedService }).(LinkedServiceReferenceResponsePtrOutput)
}

// Transformation name.
func (o DataFlowSinkResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataFlowSinkResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Rejected data linked service reference.
func (o DataFlowSinkResponseOutput) RejectedDataLinkedService() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v DataFlowSinkResponse) *LinkedServiceReferenceResponse { return v.RejectedDataLinkedService }).(LinkedServiceReferenceResponsePtrOutput)
}

// Schema linked service reference.
func (o DataFlowSinkResponseOutput) SchemaLinkedService() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v DataFlowSinkResponse) *LinkedServiceReferenceResponse { return v.SchemaLinkedService }).(LinkedServiceReferenceResponsePtrOutput)
}

type DataFlowSinkResponseArrayOutput struct{ *pulumi.OutputState }

func (DataFlowSinkResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataFlowSinkResponse)(nil)).Elem()
}

func (o DataFlowSinkResponseArrayOutput) ToDataFlowSinkResponseArrayOutput() DataFlowSinkResponseArrayOutput {
	return o
}

func (o DataFlowSinkResponseArrayOutput) ToDataFlowSinkResponseArrayOutputWithContext(ctx context.Context) DataFlowSinkResponseArrayOutput {
	return o
}

func (o DataFlowSinkResponseArrayOutput) Index(i pulumi.IntInput) DataFlowSinkResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataFlowSinkResponse {
		return vs[0].([]DataFlowSinkResponse)[vs[1].(int)]
	}).(DataFlowSinkResponseOutput)
}

// Transformation for data flow source.
type DataFlowSource struct {
	// Dataset reference.
	Dataset *DatasetReference `pulumi:"dataset"`
	// Transformation description.
	Description *string `pulumi:"description"`
	// Flowlet Reference
	Flowlet *DataFlowReference `pulumi:"flowlet"`
	// Linked service reference.
	LinkedService *LinkedServiceReference `pulumi:"linkedService"`
	// Transformation name.
	Name string `pulumi:"name"`
	// Schema linked service reference.
	SchemaLinkedService *LinkedServiceReference `pulumi:"schemaLinkedService"`
}

// DataFlowSourceInput is an input type that accepts DataFlowSourceArgs and DataFlowSourceOutput values.
// You can construct a concrete instance of `DataFlowSourceInput` via:
//
//	DataFlowSourceArgs{...}
type DataFlowSourceInput interface {
	pulumi.Input

	ToDataFlowSourceOutput() DataFlowSourceOutput
	ToDataFlowSourceOutputWithContext(context.Context) DataFlowSourceOutput
}

// Transformation for data flow source.
type DataFlowSourceArgs struct {
	// Dataset reference.
	Dataset DatasetReferencePtrInput `pulumi:"dataset"`
	// Transformation description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Flowlet Reference
	Flowlet DataFlowReferencePtrInput `pulumi:"flowlet"`
	// Linked service reference.
	LinkedService LinkedServiceReferencePtrInput `pulumi:"linkedService"`
	// Transformation name.
	Name pulumi.StringInput `pulumi:"name"`
	// Schema linked service reference.
	SchemaLinkedService LinkedServiceReferencePtrInput `pulumi:"schemaLinkedService"`
}

func (DataFlowSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowSource)(nil)).Elem()
}

func (i DataFlowSourceArgs) ToDataFlowSourceOutput() DataFlowSourceOutput {
	return i.ToDataFlowSourceOutputWithContext(context.Background())
}

func (i DataFlowSourceArgs) ToDataFlowSourceOutputWithContext(ctx context.Context) DataFlowSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowSourceOutput)
}

// DataFlowSourceArrayInput is an input type that accepts DataFlowSourceArray and DataFlowSourceArrayOutput values.
// You can construct a concrete instance of `DataFlowSourceArrayInput` via:
//
//	DataFlowSourceArray{ DataFlowSourceArgs{...} }
type DataFlowSourceArrayInput interface {
	pulumi.Input

	ToDataFlowSourceArrayOutput() DataFlowSourceArrayOutput
	ToDataFlowSourceArrayOutputWithContext(context.Context) DataFlowSourceArrayOutput
}

type DataFlowSourceArray []DataFlowSourceInput

func (DataFlowSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataFlowSource)(nil)).Elem()
}

func (i DataFlowSourceArray) ToDataFlowSourceArrayOutput() DataFlowSourceArrayOutput {
	return i.ToDataFlowSourceArrayOutputWithContext(context.Background())
}

func (i DataFlowSourceArray) ToDataFlowSourceArrayOutputWithContext(ctx context.Context) DataFlowSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowSourceArrayOutput)
}

// Transformation for data flow source.
type DataFlowSourceOutput struct{ *pulumi.OutputState }

func (DataFlowSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowSource)(nil)).Elem()
}

func (o DataFlowSourceOutput) ToDataFlowSourceOutput() DataFlowSourceOutput {
	return o
}

func (o DataFlowSourceOutput) ToDataFlowSourceOutputWithContext(ctx context.Context) DataFlowSourceOutput {
	return o
}

// Dataset reference.
func (o DataFlowSourceOutput) Dataset() DatasetReferencePtrOutput {
	return o.ApplyT(func(v DataFlowSource) *DatasetReference { return v.Dataset }).(DatasetReferencePtrOutput)
}

// Transformation description.
func (o DataFlowSourceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFlowSource) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Flowlet Reference
func (o DataFlowSourceOutput) Flowlet() DataFlowReferencePtrOutput {
	return o.ApplyT(func(v DataFlowSource) *DataFlowReference { return v.Flowlet }).(DataFlowReferencePtrOutput)
}

// Linked service reference.
func (o DataFlowSourceOutput) LinkedService() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v DataFlowSource) *LinkedServiceReference { return v.LinkedService }).(LinkedServiceReferencePtrOutput)
}

// Transformation name.
func (o DataFlowSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataFlowSource) string { return v.Name }).(pulumi.StringOutput)
}

// Schema linked service reference.
func (o DataFlowSourceOutput) SchemaLinkedService() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v DataFlowSource) *LinkedServiceReference { return v.SchemaLinkedService }).(LinkedServiceReferencePtrOutput)
}

type DataFlowSourceArrayOutput struct{ *pulumi.OutputState }

func (DataFlowSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataFlowSource)(nil)).Elem()
}

func (o DataFlowSourceArrayOutput) ToDataFlowSourceArrayOutput() DataFlowSourceArrayOutput {
	return o
}

func (o DataFlowSourceArrayOutput) ToDataFlowSourceArrayOutputWithContext(ctx context.Context) DataFlowSourceArrayOutput {
	return o
}

func (o DataFlowSourceArrayOutput) Index(i pulumi.IntInput) DataFlowSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataFlowSource {
		return vs[0].([]DataFlowSource)[vs[1].(int)]
	}).(DataFlowSourceOutput)
}

// Transformation for data flow source.
type DataFlowSourceResponse struct {
	// Dataset reference.
	Dataset *DatasetReferenceResponse `pulumi:"dataset"`
	// Transformation description.
	Description *string `pulumi:"description"`
	// Flowlet Reference
	Flowlet *DataFlowReferenceResponse `pulumi:"flowlet"`
	// Linked service reference.
	LinkedService *LinkedServiceReferenceResponse `pulumi:"linkedService"`
	// Transformation name.
	Name string `pulumi:"name"`
	// Schema linked service reference.
	SchemaLinkedService *LinkedServiceReferenceResponse `pulumi:"schemaLinkedService"`
}

// Transformation for data flow source.
type DataFlowSourceResponseOutput struct{ *pulumi.OutputState }

func (DataFlowSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowSourceResponse)(nil)).Elem()
}

func (o DataFlowSourceResponseOutput) ToDataFlowSourceResponseOutput() DataFlowSourceResponseOutput {
	return o
}

func (o DataFlowSourceResponseOutput) ToDataFlowSourceResponseOutputWithContext(ctx context.Context) DataFlowSourceResponseOutput {
	return o
}

// Dataset reference.
func (o DataFlowSourceResponseOutput) Dataset() DatasetReferenceResponsePtrOutput {
	return o.ApplyT(func(v DataFlowSourceResponse) *DatasetReferenceResponse { return v.Dataset }).(DatasetReferenceResponsePtrOutput)
}

// Transformation description.
func (o DataFlowSourceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFlowSourceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Flowlet Reference
func (o DataFlowSourceResponseOutput) Flowlet() DataFlowReferenceResponsePtrOutput {
	return o.ApplyT(func(v DataFlowSourceResponse) *DataFlowReferenceResponse { return v.Flowlet }).(DataFlowReferenceResponsePtrOutput)
}

// Linked service reference.
func (o DataFlowSourceResponseOutput) LinkedService() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v DataFlowSourceResponse) *LinkedServiceReferenceResponse { return v.LinkedService }).(LinkedServiceReferenceResponsePtrOutput)
}

// Transformation name.
func (o DataFlowSourceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataFlowSourceResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Schema linked service reference.
func (o DataFlowSourceResponseOutput) SchemaLinkedService() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v DataFlowSourceResponse) *LinkedServiceReferenceResponse { return v.SchemaLinkedService }).(LinkedServiceReferenceResponsePtrOutput)
}

type DataFlowSourceResponseArrayOutput struct{ *pulumi.OutputState }

func (DataFlowSourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataFlowSourceResponse)(nil)).Elem()
}

func (o DataFlowSourceResponseArrayOutput) ToDataFlowSourceResponseArrayOutput() DataFlowSourceResponseArrayOutput {
	return o
}

func (o DataFlowSourceResponseArrayOutput) ToDataFlowSourceResponseArrayOutputWithContext(ctx context.Context) DataFlowSourceResponseArrayOutput {
	return o
}

func (o DataFlowSourceResponseArrayOutput) Index(i pulumi.IntInput) DataFlowSourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataFlowSourceResponse {
		return vs[0].([]DataFlowSourceResponse)[vs[1].(int)]
	}).(DataFlowSourceResponseOutput)
}

// Staging info for execute data flow activity.
type DataFlowStagingInfo struct {
	// Folder path for staging blob. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Staging linked service reference.
	LinkedService *LinkedServiceReference `pulumi:"linkedService"`
}

// DataFlowStagingInfoInput is an input type that accepts DataFlowStagingInfoArgs and DataFlowStagingInfoOutput values.
// You can construct a concrete instance of `DataFlowStagingInfoInput` via:
//
//	DataFlowStagingInfoArgs{...}
type DataFlowStagingInfoInput interface {
	pulumi.Input

	ToDataFlowStagingInfoOutput() DataFlowStagingInfoOutput
	ToDataFlowStagingInfoOutputWithContext(context.Context) DataFlowStagingInfoOutput
}

// Staging info for execute data flow activity.
type DataFlowStagingInfoArgs struct {
	// Folder path for staging blob. Type: string (or Expression with resultType string)
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// Staging linked service reference.
	LinkedService LinkedServiceReferencePtrInput `pulumi:"linkedService"`
}

func (DataFlowStagingInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowStagingInfo)(nil)).Elem()
}

func (i DataFlowStagingInfoArgs) ToDataFlowStagingInfoOutput() DataFlowStagingInfoOutput {
	return i.ToDataFlowStagingInfoOutputWithContext(context.Background())
}

func (i DataFlowStagingInfoArgs) ToDataFlowStagingInfoOutputWithContext(ctx context.Context) DataFlowStagingInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowStagingInfoOutput)
}

func (i DataFlowStagingInfoArgs) ToDataFlowStagingInfoPtrOutput() DataFlowStagingInfoPtrOutput {
	return i.ToDataFlowStagingInfoPtrOutputWithContext(context.Background())
}

func (i DataFlowStagingInfoArgs) ToDataFlowStagingInfoPtrOutputWithContext(ctx context.Context) DataFlowStagingInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowStagingInfoOutput).ToDataFlowStagingInfoPtrOutputWithContext(ctx)
}

// DataFlowStagingInfoPtrInput is an input type that accepts DataFlowStagingInfoArgs, DataFlowStagingInfoPtr and DataFlowStagingInfoPtrOutput values.
// You can construct a concrete instance of `DataFlowStagingInfoPtrInput` via:
//
//	        DataFlowStagingInfoArgs{...}
//
//	or:
//
//	        nil
type DataFlowStagingInfoPtrInput interface {
	pulumi.Input

	ToDataFlowStagingInfoPtrOutput() DataFlowStagingInfoPtrOutput
	ToDataFlowStagingInfoPtrOutputWithContext(context.Context) DataFlowStagingInfoPtrOutput
}

type dataFlowStagingInfoPtrType DataFlowStagingInfoArgs

func DataFlowStagingInfoPtr(v *DataFlowStagingInfoArgs) DataFlowStagingInfoPtrInput {
	return (*dataFlowStagingInfoPtrType)(v)
}

func (*dataFlowStagingInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataFlowStagingInfo)(nil)).Elem()
}

func (i *dataFlowStagingInfoPtrType) ToDataFlowStagingInfoPtrOutput() DataFlowStagingInfoPtrOutput {
	return i.ToDataFlowStagingInfoPtrOutputWithContext(context.Background())
}

func (i *dataFlowStagingInfoPtrType) ToDataFlowStagingInfoPtrOutputWithContext(ctx context.Context) DataFlowStagingInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowStagingInfoPtrOutput)
}

// Staging info for execute data flow activity.
type DataFlowStagingInfoOutput struct{ *pulumi.OutputState }

func (DataFlowStagingInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowStagingInfo)(nil)).Elem()
}

func (o DataFlowStagingInfoOutput) ToDataFlowStagingInfoOutput() DataFlowStagingInfoOutput {
	return o
}

func (o DataFlowStagingInfoOutput) ToDataFlowStagingInfoOutputWithContext(ctx context.Context) DataFlowStagingInfoOutput {
	return o
}

func (o DataFlowStagingInfoOutput) ToDataFlowStagingInfoPtrOutput() DataFlowStagingInfoPtrOutput {
	return o.ToDataFlowStagingInfoPtrOutputWithContext(context.Background())
}

func (o DataFlowStagingInfoOutput) ToDataFlowStagingInfoPtrOutputWithContext(ctx context.Context) DataFlowStagingInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataFlowStagingInfo) *DataFlowStagingInfo {
		return &v
	}).(DataFlowStagingInfoPtrOutput)
}

// Folder path for staging blob. Type: string (or Expression with resultType string)
func (o DataFlowStagingInfoOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v DataFlowStagingInfo) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Staging linked service reference.
func (o DataFlowStagingInfoOutput) LinkedService() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v DataFlowStagingInfo) *LinkedServiceReference { return v.LinkedService }).(LinkedServiceReferencePtrOutput)
}

type DataFlowStagingInfoPtrOutput struct{ *pulumi.OutputState }

func (DataFlowStagingInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataFlowStagingInfo)(nil)).Elem()
}

func (o DataFlowStagingInfoPtrOutput) ToDataFlowStagingInfoPtrOutput() DataFlowStagingInfoPtrOutput {
	return o
}

func (o DataFlowStagingInfoPtrOutput) ToDataFlowStagingInfoPtrOutputWithContext(ctx context.Context) DataFlowStagingInfoPtrOutput {
	return o
}

func (o DataFlowStagingInfoPtrOutput) Elem() DataFlowStagingInfoOutput {
	return o.ApplyT(func(v *DataFlowStagingInfo) DataFlowStagingInfo {
		if v != nil {
			return *v
		}
		var ret DataFlowStagingInfo
		return ret
	}).(DataFlowStagingInfoOutput)
}

// Folder path for staging blob. Type: string (or Expression with resultType string)
func (o DataFlowStagingInfoPtrOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *DataFlowStagingInfo) interface{} {
		if v == nil {
			return nil
		}
		return v.FolderPath
	}).(pulumi.AnyOutput)
}

// Staging linked service reference.
func (o DataFlowStagingInfoPtrOutput) LinkedService() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v *DataFlowStagingInfo) *LinkedServiceReference {
		if v == nil {
			return nil
		}
		return v.LinkedService
	}).(LinkedServiceReferencePtrOutput)
}

// Staging info for execute data flow activity.
type DataFlowStagingInfoResponse struct {
	// Folder path for staging blob. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Staging linked service reference.
	LinkedService *LinkedServiceReferenceResponse `pulumi:"linkedService"`
}

// Staging info for execute data flow activity.
type DataFlowStagingInfoResponseOutput struct{ *pulumi.OutputState }

func (DataFlowStagingInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowStagingInfoResponse)(nil)).Elem()
}

func (o DataFlowStagingInfoResponseOutput) ToDataFlowStagingInfoResponseOutput() DataFlowStagingInfoResponseOutput {
	return o
}

func (o DataFlowStagingInfoResponseOutput) ToDataFlowStagingInfoResponseOutputWithContext(ctx context.Context) DataFlowStagingInfoResponseOutput {
	return o
}

// Folder path for staging blob. Type: string (or Expression with resultType string)
func (o DataFlowStagingInfoResponseOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v DataFlowStagingInfoResponse) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Staging linked service reference.
func (o DataFlowStagingInfoResponseOutput) LinkedService() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v DataFlowStagingInfoResponse) *LinkedServiceReferenceResponse { return v.LinkedService }).(LinkedServiceReferenceResponsePtrOutput)
}

type DataFlowStagingInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (DataFlowStagingInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataFlowStagingInfoResponse)(nil)).Elem()
}

func (o DataFlowStagingInfoResponsePtrOutput) ToDataFlowStagingInfoResponsePtrOutput() DataFlowStagingInfoResponsePtrOutput {
	return o
}

func (o DataFlowStagingInfoResponsePtrOutput) ToDataFlowStagingInfoResponsePtrOutputWithContext(ctx context.Context) DataFlowStagingInfoResponsePtrOutput {
	return o
}

func (o DataFlowStagingInfoResponsePtrOutput) Elem() DataFlowStagingInfoResponseOutput {
	return o.ApplyT(func(v *DataFlowStagingInfoResponse) DataFlowStagingInfoResponse {
		if v != nil {
			return *v
		}
		var ret DataFlowStagingInfoResponse
		return ret
	}).(DataFlowStagingInfoResponseOutput)
}

// Folder path for staging blob. Type: string (or Expression with resultType string)
func (o DataFlowStagingInfoResponsePtrOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *DataFlowStagingInfoResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.FolderPath
	}).(pulumi.AnyOutput)
}

// Staging linked service reference.
func (o DataFlowStagingInfoResponsePtrOutput) LinkedService() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v *DataFlowStagingInfoResponse) *LinkedServiceReferenceResponse {
		if v == nil {
			return nil
		}
		return v.LinkedService
	}).(LinkedServiceReferenceResponsePtrOutput)
}

// Data Lake Analytics U-SQL activity.
type DataLakeAnalyticsUSQLActivity struct {
	// Compilation mode of U-SQL. Must be one of these values : Semantic, Full and SingleBox. Type: string (or Expression with resultType string).
	CompilationMode interface{} `pulumi:"compilationMode"`
	// The maximum number of nodes simultaneously used to run the job. Default value is 1. Type: integer (or Expression with resultType integer), minimum: 1.
	DegreeOfParallelism interface{} `pulumi:"degreeOfParallelism"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Parameters for U-SQL job request.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Determines which jobs out of all that are queued should be selected to run first. The lower the number, the higher the priority. Default value is 1000. Type: integer (or Expression with resultType integer), minimum: 1.
	Priority interface{} `pulumi:"priority"`
	// Runtime version of the U-SQL engine to use. Type: string (or Expression with resultType string).
	RuntimeVersion interface{} `pulumi:"runtimeVersion"`
	// Script linked service reference.
	ScriptLinkedService LinkedServiceReference `pulumi:"scriptLinkedService"`
	// Case-sensitive path to folder that contains the U-SQL script. Type: string (or Expression with resultType string).
	ScriptPath interface{} `pulumi:"scriptPath"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'DataLakeAnalyticsU-SQL'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// DataLakeAnalyticsUSQLActivityInput is an input type that accepts DataLakeAnalyticsUSQLActivityArgs and DataLakeAnalyticsUSQLActivityOutput values.
// You can construct a concrete instance of `DataLakeAnalyticsUSQLActivityInput` via:
//
//	DataLakeAnalyticsUSQLActivityArgs{...}
type DataLakeAnalyticsUSQLActivityInput interface {
	pulumi.Input

	ToDataLakeAnalyticsUSQLActivityOutput() DataLakeAnalyticsUSQLActivityOutput
	ToDataLakeAnalyticsUSQLActivityOutputWithContext(context.Context) DataLakeAnalyticsUSQLActivityOutput
}

// Data Lake Analytics U-SQL activity.
type DataLakeAnalyticsUSQLActivityArgs struct {
	// Compilation mode of U-SQL. Must be one of these values : Semantic, Full and SingleBox. Type: string (or Expression with resultType string).
	CompilationMode pulumi.Input `pulumi:"compilationMode"`
	// The maximum number of nodes simultaneously used to run the job. Default value is 1. Type: integer (or Expression with resultType integer), minimum: 1.
	DegreeOfParallelism pulumi.Input `pulumi:"degreeOfParallelism"`
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferencePtrInput `pulumi:"linkedServiceName"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs pulumi.StringPtrInput `pulumi:"onInactiveMarkAs"`
	// Parameters for U-SQL job request.
	Parameters pulumi.MapInput `pulumi:"parameters"`
	// Activity policy.
	Policy ActivityPolicyPtrInput `pulumi:"policy"`
	// Determines which jobs out of all that are queued should be selected to run first. The lower the number, the higher the priority. Default value is 1000. Type: integer (or Expression with resultType integer), minimum: 1.
	Priority pulumi.Input `pulumi:"priority"`
	// Runtime version of the U-SQL engine to use. Type: string (or Expression with resultType string).
	RuntimeVersion pulumi.Input `pulumi:"runtimeVersion"`
	// Script linked service reference.
	ScriptLinkedService LinkedServiceReferenceInput `pulumi:"scriptLinkedService"`
	// Case-sensitive path to folder that contains the U-SQL script. Type: string (or Expression with resultType string).
	ScriptPath pulumi.Input `pulumi:"scriptPath"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Type of activity.
	// Expected value is 'DataLakeAnalyticsU-SQL'.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
}

func (DataLakeAnalyticsUSQLActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLakeAnalyticsUSQLActivity)(nil)).Elem()
}

func (i DataLakeAnalyticsUSQLActivityArgs) ToDataLakeAnalyticsUSQLActivityOutput() DataLakeAnalyticsUSQLActivityOutput {
	return i.ToDataLakeAnalyticsUSQLActivityOutputWithContext(context.Background())
}

func (i DataLakeAnalyticsUSQLActivityArgs) ToDataLakeAnalyticsUSQLActivityOutputWithContext(ctx context.Context) DataLakeAnalyticsUSQLActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLakeAnalyticsUSQLActivityOutput)
}

// Data Lake Analytics U-SQL activity.
type DataLakeAnalyticsUSQLActivityOutput struct{ *pulumi.OutputState }

func (DataLakeAnalyticsUSQLActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLakeAnalyticsUSQLActivity)(nil)).Elem()
}

func (o DataLakeAnalyticsUSQLActivityOutput) ToDataLakeAnalyticsUSQLActivityOutput() DataLakeAnalyticsUSQLActivityOutput {
	return o
}

func (o DataLakeAnalyticsUSQLActivityOutput) ToDataLakeAnalyticsUSQLActivityOutputWithContext(ctx context.Context) DataLakeAnalyticsUSQLActivityOutput {
	return o
}

// Compilation mode of U-SQL. Must be one of these values : Semantic, Full and SingleBox. Type: string (or Expression with resultType string).
func (o DataLakeAnalyticsUSQLActivityOutput) CompilationMode() pulumi.AnyOutput {
	return o.ApplyT(func(v DataLakeAnalyticsUSQLActivity) interface{} { return v.CompilationMode }).(pulumi.AnyOutput)
}

// The maximum number of nodes simultaneously used to run the job. Default value is 1. Type: integer (or Expression with resultType integer), minimum: 1.
func (o DataLakeAnalyticsUSQLActivityOutput) DegreeOfParallelism() pulumi.AnyOutput {
	return o.ApplyT(func(v DataLakeAnalyticsUSQLActivity) interface{} { return v.DegreeOfParallelism }).(pulumi.AnyOutput)
}

// Activity depends on condition.
func (o DataLakeAnalyticsUSQLActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v DataLakeAnalyticsUSQLActivity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o DataLakeAnalyticsUSQLActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataLakeAnalyticsUSQLActivity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o DataLakeAnalyticsUSQLActivityOutput) LinkedServiceName() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v DataLakeAnalyticsUSQLActivity) *LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferencePtrOutput)
}

// Activity name.
func (o DataLakeAnalyticsUSQLActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataLakeAnalyticsUSQLActivity) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o DataLakeAnalyticsUSQLActivityOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataLakeAnalyticsUSQLActivity) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Parameters for U-SQL job request.
func (o DataLakeAnalyticsUSQLActivityOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v DataLakeAnalyticsUSQLActivity) map[string]interface{} { return v.Parameters }).(pulumi.MapOutput)
}

// Activity policy.
func (o DataLakeAnalyticsUSQLActivityOutput) Policy() ActivityPolicyPtrOutput {
	return o.ApplyT(func(v DataLakeAnalyticsUSQLActivity) *ActivityPolicy { return v.Policy }).(ActivityPolicyPtrOutput)
}

// Determines which jobs out of all that are queued should be selected to run first. The lower the number, the higher the priority. Default value is 1000. Type: integer (or Expression with resultType integer), minimum: 1.
func (o DataLakeAnalyticsUSQLActivityOutput) Priority() pulumi.AnyOutput {
	return o.ApplyT(func(v DataLakeAnalyticsUSQLActivity) interface{} { return v.Priority }).(pulumi.AnyOutput)
}

// Runtime version of the U-SQL engine to use. Type: string (or Expression with resultType string).
func (o DataLakeAnalyticsUSQLActivityOutput) RuntimeVersion() pulumi.AnyOutput {
	return o.ApplyT(func(v DataLakeAnalyticsUSQLActivity) interface{} { return v.RuntimeVersion }).(pulumi.AnyOutput)
}

// Script linked service reference.
func (o DataLakeAnalyticsUSQLActivityOutput) ScriptLinkedService() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v DataLakeAnalyticsUSQLActivity) LinkedServiceReference { return v.ScriptLinkedService }).(LinkedServiceReferenceOutput)
}

// Case-sensitive path to folder that contains the U-SQL script. Type: string (or Expression with resultType string).
func (o DataLakeAnalyticsUSQLActivityOutput) ScriptPath() pulumi.AnyOutput {
	return o.ApplyT(func(v DataLakeAnalyticsUSQLActivity) interface{} { return v.ScriptPath }).(pulumi.AnyOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o DataLakeAnalyticsUSQLActivityOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataLakeAnalyticsUSQLActivity) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'DataLakeAnalyticsU-SQL'.
func (o DataLakeAnalyticsUSQLActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DataLakeAnalyticsUSQLActivity) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o DataLakeAnalyticsUSQLActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v DataLakeAnalyticsUSQLActivity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

// Data Lake Analytics U-SQL activity.
type DataLakeAnalyticsUSQLActivityResponse struct {
	// Compilation mode of U-SQL. Must be one of these values : Semantic, Full and SingleBox. Type: string (or Expression with resultType string).
	CompilationMode interface{} `pulumi:"compilationMode"`
	// The maximum number of nodes simultaneously used to run the job. Default value is 1. Type: integer (or Expression with resultType integer), minimum: 1.
	DegreeOfParallelism interface{} `pulumi:"degreeOfParallelism"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Parameters for U-SQL job request.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Determines which jobs out of all that are queued should be selected to run first. The lower the number, the higher the priority. Default value is 1000. Type: integer (or Expression with resultType integer), minimum: 1.
	Priority interface{} `pulumi:"priority"`
	// Runtime version of the U-SQL engine to use. Type: string (or Expression with resultType string).
	RuntimeVersion interface{} `pulumi:"runtimeVersion"`
	// Script linked service reference.
	ScriptLinkedService LinkedServiceReferenceResponse `pulumi:"scriptLinkedService"`
	// Case-sensitive path to folder that contains the U-SQL script. Type: string (or Expression with resultType string).
	ScriptPath interface{} `pulumi:"scriptPath"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'DataLakeAnalyticsU-SQL'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Data Lake Analytics U-SQL activity.
type DataLakeAnalyticsUSQLActivityResponseOutput struct{ *pulumi.OutputState }

func (DataLakeAnalyticsUSQLActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLakeAnalyticsUSQLActivityResponse)(nil)).Elem()
}

func (o DataLakeAnalyticsUSQLActivityResponseOutput) ToDataLakeAnalyticsUSQLActivityResponseOutput() DataLakeAnalyticsUSQLActivityResponseOutput {
	return o
}

func (o DataLakeAnalyticsUSQLActivityResponseOutput) ToDataLakeAnalyticsUSQLActivityResponseOutputWithContext(ctx context.Context) DataLakeAnalyticsUSQLActivityResponseOutput {
	return o
}

// Compilation mode of U-SQL. Must be one of these values : Semantic, Full and SingleBox. Type: string (or Expression with resultType string).
func (o DataLakeAnalyticsUSQLActivityResponseOutput) CompilationMode() pulumi.AnyOutput {
	return o.ApplyT(func(v DataLakeAnalyticsUSQLActivityResponse) interface{} { return v.CompilationMode }).(pulumi.AnyOutput)
}

// The maximum number of nodes simultaneously used to run the job. Default value is 1. Type: integer (or Expression with resultType integer), minimum: 1.
func (o DataLakeAnalyticsUSQLActivityResponseOutput) DegreeOfParallelism() pulumi.AnyOutput {
	return o.ApplyT(func(v DataLakeAnalyticsUSQLActivityResponse) interface{} { return v.DegreeOfParallelism }).(pulumi.AnyOutput)
}

// Activity depends on condition.
func (o DataLakeAnalyticsUSQLActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v DataLakeAnalyticsUSQLActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o DataLakeAnalyticsUSQLActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataLakeAnalyticsUSQLActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o DataLakeAnalyticsUSQLActivityResponseOutput) LinkedServiceName() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v DataLakeAnalyticsUSQLActivityResponse) *LinkedServiceReferenceResponse {
		return v.LinkedServiceName
	}).(LinkedServiceReferenceResponsePtrOutput)
}

// Activity name.
func (o DataLakeAnalyticsUSQLActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataLakeAnalyticsUSQLActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o DataLakeAnalyticsUSQLActivityResponseOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataLakeAnalyticsUSQLActivityResponse) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Parameters for U-SQL job request.
func (o DataLakeAnalyticsUSQLActivityResponseOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v DataLakeAnalyticsUSQLActivityResponse) map[string]interface{} { return v.Parameters }).(pulumi.MapOutput)
}

// Activity policy.
func (o DataLakeAnalyticsUSQLActivityResponseOutput) Policy() ActivityPolicyResponsePtrOutput {
	return o.ApplyT(func(v DataLakeAnalyticsUSQLActivityResponse) *ActivityPolicyResponse { return v.Policy }).(ActivityPolicyResponsePtrOutput)
}

// Determines which jobs out of all that are queued should be selected to run first. The lower the number, the higher the priority. Default value is 1000. Type: integer (or Expression with resultType integer), minimum: 1.
func (o DataLakeAnalyticsUSQLActivityResponseOutput) Priority() pulumi.AnyOutput {
	return o.ApplyT(func(v DataLakeAnalyticsUSQLActivityResponse) interface{} { return v.Priority }).(pulumi.AnyOutput)
}

// Runtime version of the U-SQL engine to use. Type: string (or Expression with resultType string).
func (o DataLakeAnalyticsUSQLActivityResponseOutput) RuntimeVersion() pulumi.AnyOutput {
	return o.ApplyT(func(v DataLakeAnalyticsUSQLActivityResponse) interface{} { return v.RuntimeVersion }).(pulumi.AnyOutput)
}

// Script linked service reference.
func (o DataLakeAnalyticsUSQLActivityResponseOutput) ScriptLinkedService() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v DataLakeAnalyticsUSQLActivityResponse) LinkedServiceReferenceResponse {
		return v.ScriptLinkedService
	}).(LinkedServiceReferenceResponseOutput)
}

// Case-sensitive path to folder that contains the U-SQL script. Type: string (or Expression with resultType string).
func (o DataLakeAnalyticsUSQLActivityResponseOutput) ScriptPath() pulumi.AnyOutput {
	return o.ApplyT(func(v DataLakeAnalyticsUSQLActivityResponse) interface{} { return v.ScriptPath }).(pulumi.AnyOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o DataLakeAnalyticsUSQLActivityResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataLakeAnalyticsUSQLActivityResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'DataLakeAnalyticsU-SQL'.
func (o DataLakeAnalyticsUSQLActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DataLakeAnalyticsUSQLActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o DataLakeAnalyticsUSQLActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v DataLakeAnalyticsUSQLActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

// Source and target table mapping details.
type DataMapperMapping struct {
	// This holds the user provided attribute mapping information.
	AttributeMappingInfo *MapperAttributeMappings `pulumi:"attributeMappingInfo"`
	// The connection reference for the source connection.
	SourceConnectionReference *MapperConnectionReference `pulumi:"sourceConnectionReference"`
	// This holds the source denormalization information used while joining multiple sources.
	SourceDenormalizeInfo interface{} `pulumi:"sourceDenormalizeInfo"`
	// Name of the source table
	SourceEntityName *string `pulumi:"sourceEntityName"`
	// Name of the target table
	TargetEntityName *string `pulumi:"targetEntityName"`
}

// DataMapperMappingInput is an input type that accepts DataMapperMappingArgs and DataMapperMappingOutput values.
// You can construct a concrete instance of `DataMapperMappingInput` via:
//
//	DataMapperMappingArgs{...}
type DataMapperMappingInput interface {
	pulumi.Input

	ToDataMapperMappingOutput() DataMapperMappingOutput
	ToDataMapperMappingOutputWithContext(context.Context) DataMapperMappingOutput
}

// Source and target table mapping details.
type DataMapperMappingArgs struct {
	// This holds the user provided attribute mapping information.
	AttributeMappingInfo MapperAttributeMappingsPtrInput `pulumi:"attributeMappingInfo"`
	// The connection reference for the source connection.
	SourceConnectionReference MapperConnectionReferencePtrInput `pulumi:"sourceConnectionReference"`
	// This holds the source denormalization information used while joining multiple sources.
	SourceDenormalizeInfo pulumi.Input `pulumi:"sourceDenormalizeInfo"`
	// Name of the source table
	SourceEntityName pulumi.StringPtrInput `pulumi:"sourceEntityName"`
	// Name of the target table
	TargetEntityName pulumi.StringPtrInput `pulumi:"targetEntityName"`
}

func (DataMapperMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataMapperMapping)(nil)).Elem()
}

func (i DataMapperMappingArgs) ToDataMapperMappingOutput() DataMapperMappingOutput {
	return i.ToDataMapperMappingOutputWithContext(context.Background())
}

func (i DataMapperMappingArgs) ToDataMapperMappingOutputWithContext(ctx context.Context) DataMapperMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataMapperMappingOutput)
}

// DataMapperMappingArrayInput is an input type that accepts DataMapperMappingArray and DataMapperMappingArrayOutput values.
// You can construct a concrete instance of `DataMapperMappingArrayInput` via:
//
//	DataMapperMappingArray{ DataMapperMappingArgs{...} }
type DataMapperMappingArrayInput interface {
	pulumi.Input

	ToDataMapperMappingArrayOutput() DataMapperMappingArrayOutput
	ToDataMapperMappingArrayOutputWithContext(context.Context) DataMapperMappingArrayOutput
}

type DataMapperMappingArray []DataMapperMappingInput

func (DataMapperMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataMapperMapping)(nil)).Elem()
}

func (i DataMapperMappingArray) ToDataMapperMappingArrayOutput() DataMapperMappingArrayOutput {
	return i.ToDataMapperMappingArrayOutputWithContext(context.Background())
}

func (i DataMapperMappingArray) ToDataMapperMappingArrayOutputWithContext(ctx context.Context) DataMapperMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataMapperMappingArrayOutput)
}

// Source and target table mapping details.
type DataMapperMappingOutput struct{ *pulumi.OutputState }

func (DataMapperMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataMapperMapping)(nil)).Elem()
}

func (o DataMapperMappingOutput) ToDataMapperMappingOutput() DataMapperMappingOutput {
	return o
}

func (o DataMapperMappingOutput) ToDataMapperMappingOutputWithContext(ctx context.Context) DataMapperMappingOutput {
	return o
}

// This holds the user provided attribute mapping information.
func (o DataMapperMappingOutput) AttributeMappingInfo() MapperAttributeMappingsPtrOutput {
	return o.ApplyT(func(v DataMapperMapping) *MapperAttributeMappings { return v.AttributeMappingInfo }).(MapperAttributeMappingsPtrOutput)
}

// The connection reference for the source connection.
func (o DataMapperMappingOutput) SourceConnectionReference() MapperConnectionReferencePtrOutput {
	return o.ApplyT(func(v DataMapperMapping) *MapperConnectionReference { return v.SourceConnectionReference }).(MapperConnectionReferencePtrOutput)
}

// This holds the source denormalization information used while joining multiple sources.
func (o DataMapperMappingOutput) SourceDenormalizeInfo() pulumi.AnyOutput {
	return o.ApplyT(func(v DataMapperMapping) interface{} { return v.SourceDenormalizeInfo }).(pulumi.AnyOutput)
}

// Name of the source table
func (o DataMapperMappingOutput) SourceEntityName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataMapperMapping) *string { return v.SourceEntityName }).(pulumi.StringPtrOutput)
}

// Name of the target table
func (o DataMapperMappingOutput) TargetEntityName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataMapperMapping) *string { return v.TargetEntityName }).(pulumi.StringPtrOutput)
}

type DataMapperMappingArrayOutput struct{ *pulumi.OutputState }

func (DataMapperMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataMapperMapping)(nil)).Elem()
}

func (o DataMapperMappingArrayOutput) ToDataMapperMappingArrayOutput() DataMapperMappingArrayOutput {
	return o
}

func (o DataMapperMappingArrayOutput) ToDataMapperMappingArrayOutputWithContext(ctx context.Context) DataMapperMappingArrayOutput {
	return o
}

func (o DataMapperMappingArrayOutput) Index(i pulumi.IntInput) DataMapperMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataMapperMapping {
		return vs[0].([]DataMapperMapping)[vs[1].(int)]
	}).(DataMapperMappingOutput)
}

// Source and target table mapping details.
type DataMapperMappingResponse struct {
	// This holds the user provided attribute mapping information.
	AttributeMappingInfo *MapperAttributeMappingsResponse `pulumi:"attributeMappingInfo"`
	// The connection reference for the source connection.
	SourceConnectionReference *MapperConnectionReferenceResponse `pulumi:"sourceConnectionReference"`
	// This holds the source denormalization information used while joining multiple sources.
	SourceDenormalizeInfo interface{} `pulumi:"sourceDenormalizeInfo"`
	// Name of the source table
	SourceEntityName *string `pulumi:"sourceEntityName"`
	// Name of the target table
	TargetEntityName *string `pulumi:"targetEntityName"`
}

// Source and target table mapping details.
type DataMapperMappingResponseOutput struct{ *pulumi.OutputState }

func (DataMapperMappingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataMapperMappingResponse)(nil)).Elem()
}

func (o DataMapperMappingResponseOutput) ToDataMapperMappingResponseOutput() DataMapperMappingResponseOutput {
	return o
}

func (o DataMapperMappingResponseOutput) ToDataMapperMappingResponseOutputWithContext(ctx context.Context) DataMapperMappingResponseOutput {
	return o
}

// This holds the user provided attribute mapping information.
func (o DataMapperMappingResponseOutput) AttributeMappingInfo() MapperAttributeMappingsResponsePtrOutput {
	return o.ApplyT(func(v DataMapperMappingResponse) *MapperAttributeMappingsResponse { return v.AttributeMappingInfo }).(MapperAttributeMappingsResponsePtrOutput)
}

// The connection reference for the source connection.
func (o DataMapperMappingResponseOutput) SourceConnectionReference() MapperConnectionReferenceResponsePtrOutput {
	return o.ApplyT(func(v DataMapperMappingResponse) *MapperConnectionReferenceResponse {
		return v.SourceConnectionReference
	}).(MapperConnectionReferenceResponsePtrOutput)
}

// This holds the source denormalization information used while joining multiple sources.
func (o DataMapperMappingResponseOutput) SourceDenormalizeInfo() pulumi.AnyOutput {
	return o.ApplyT(func(v DataMapperMappingResponse) interface{} { return v.SourceDenormalizeInfo }).(pulumi.AnyOutput)
}

// Name of the source table
func (o DataMapperMappingResponseOutput) SourceEntityName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataMapperMappingResponse) *string { return v.SourceEntityName }).(pulumi.StringPtrOutput)
}

// Name of the target table
func (o DataMapperMappingResponseOutput) TargetEntityName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataMapperMappingResponse) *string { return v.TargetEntityName }).(pulumi.StringPtrOutput)
}

type DataMapperMappingResponseArrayOutput struct{ *pulumi.OutputState }

func (DataMapperMappingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataMapperMappingResponse)(nil)).Elem()
}

func (o DataMapperMappingResponseArrayOutput) ToDataMapperMappingResponseArrayOutput() DataMapperMappingResponseArrayOutput {
	return o
}

func (o DataMapperMappingResponseArrayOutput) ToDataMapperMappingResponseArrayOutputWithContext(ctx context.Context) DataMapperMappingResponseArrayOutput {
	return o
}

func (o DataMapperMappingResponseArrayOutput) Index(i pulumi.IntInput) DataMapperMappingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataMapperMappingResponse {
		return vs[0].([]DataMapperMappingResponse)[vs[1].(int)]
	}).(DataMapperMappingResponseOutput)
}

// DatabricksNotebook activity.
type DatabricksNotebookActivity struct {
	// Base parameters to be used for each run of this job.If the notebook takes a parameter that is not specified, the default value from the notebook will be used.
	BaseParameters map[string]interface{} `pulumi:"baseParameters"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// A list of libraries to be installed on the cluster that will execute the job.
	Libraries []map[string]interface{} `pulumi:"libraries"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// The absolute path of the notebook to be run in the Databricks Workspace. This path must begin with a slash. Type: string (or Expression with resultType string).
	NotebookPath interface{} `pulumi:"notebookPath"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'DatabricksNotebook'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// DatabricksNotebookActivityInput is an input type that accepts DatabricksNotebookActivityArgs and DatabricksNotebookActivityOutput values.
// You can construct a concrete instance of `DatabricksNotebookActivityInput` via:
//
//	DatabricksNotebookActivityArgs{...}
type DatabricksNotebookActivityInput interface {
	pulumi.Input

	ToDatabricksNotebookActivityOutput() DatabricksNotebookActivityOutput
	ToDatabricksNotebookActivityOutputWithContext(context.Context) DatabricksNotebookActivityOutput
}

// DatabricksNotebook activity.
type DatabricksNotebookActivityArgs struct {
	// Base parameters to be used for each run of this job.If the notebook takes a parameter that is not specified, the default value from the notebook will be used.
	BaseParameters pulumi.MapInput `pulumi:"baseParameters"`
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// A list of libraries to be installed on the cluster that will execute the job.
	Libraries pulumi.MapArrayInput `pulumi:"libraries"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferencePtrInput `pulumi:"linkedServiceName"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// The absolute path of the notebook to be run in the Databricks Workspace. This path must begin with a slash. Type: string (or Expression with resultType string).
	NotebookPath pulumi.Input `pulumi:"notebookPath"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs pulumi.StringPtrInput `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy ActivityPolicyPtrInput `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Type of activity.
	// Expected value is 'DatabricksNotebook'.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
}

func (DatabricksNotebookActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabricksNotebookActivity)(nil)).Elem()
}

func (i DatabricksNotebookActivityArgs) ToDatabricksNotebookActivityOutput() DatabricksNotebookActivityOutput {
	return i.ToDatabricksNotebookActivityOutputWithContext(context.Background())
}

func (i DatabricksNotebookActivityArgs) ToDatabricksNotebookActivityOutputWithContext(ctx context.Context) DatabricksNotebookActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabricksNotebookActivityOutput)
}

// DatabricksNotebook activity.
type DatabricksNotebookActivityOutput struct{ *pulumi.OutputState }

func (DatabricksNotebookActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabricksNotebookActivity)(nil)).Elem()
}

func (o DatabricksNotebookActivityOutput) ToDatabricksNotebookActivityOutput() DatabricksNotebookActivityOutput {
	return o
}

func (o DatabricksNotebookActivityOutput) ToDatabricksNotebookActivityOutputWithContext(ctx context.Context) DatabricksNotebookActivityOutput {
	return o
}

// Base parameters to be used for each run of this job.If the notebook takes a parameter that is not specified, the default value from the notebook will be used.
func (o DatabricksNotebookActivityOutput) BaseParameters() pulumi.MapOutput {
	return o.ApplyT(func(v DatabricksNotebookActivity) map[string]interface{} { return v.BaseParameters }).(pulumi.MapOutput)
}

// Activity depends on condition.
func (o DatabricksNotebookActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v DatabricksNotebookActivity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o DatabricksNotebookActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabricksNotebookActivity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// A list of libraries to be installed on the cluster that will execute the job.
func (o DatabricksNotebookActivityOutput) Libraries() pulumi.MapArrayOutput {
	return o.ApplyT(func(v DatabricksNotebookActivity) []map[string]interface{} { return v.Libraries }).(pulumi.MapArrayOutput)
}

// Linked service reference.
func (o DatabricksNotebookActivityOutput) LinkedServiceName() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v DatabricksNotebookActivity) *LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferencePtrOutput)
}

// Activity name.
func (o DatabricksNotebookActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DatabricksNotebookActivity) string { return v.Name }).(pulumi.StringOutput)
}

// The absolute path of the notebook to be run in the Databricks Workspace. This path must begin with a slash. Type: string (or Expression with resultType string).
func (o DatabricksNotebookActivityOutput) NotebookPath() pulumi.AnyOutput {
	return o.ApplyT(func(v DatabricksNotebookActivity) interface{} { return v.NotebookPath }).(pulumi.AnyOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o DatabricksNotebookActivityOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabricksNotebookActivity) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o DatabricksNotebookActivityOutput) Policy() ActivityPolicyPtrOutput {
	return o.ApplyT(func(v DatabricksNotebookActivity) *ActivityPolicy { return v.Policy }).(ActivityPolicyPtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o DatabricksNotebookActivityOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabricksNotebookActivity) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'DatabricksNotebook'.
func (o DatabricksNotebookActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DatabricksNotebookActivity) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o DatabricksNotebookActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v DatabricksNotebookActivity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

// DatabricksNotebook activity.
type DatabricksNotebookActivityResponse struct {
	// Base parameters to be used for each run of this job.If the notebook takes a parameter that is not specified, the default value from the notebook will be used.
	BaseParameters map[string]interface{} `pulumi:"baseParameters"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// A list of libraries to be installed on the cluster that will execute the job.
	Libraries []map[string]interface{} `pulumi:"libraries"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// The absolute path of the notebook to be run in the Databricks Workspace. This path must begin with a slash. Type: string (or Expression with resultType string).
	NotebookPath interface{} `pulumi:"notebookPath"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'DatabricksNotebook'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// DatabricksNotebook activity.
type DatabricksNotebookActivityResponseOutput struct{ *pulumi.OutputState }

func (DatabricksNotebookActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabricksNotebookActivityResponse)(nil)).Elem()
}

func (o DatabricksNotebookActivityResponseOutput) ToDatabricksNotebookActivityResponseOutput() DatabricksNotebookActivityResponseOutput {
	return o
}

func (o DatabricksNotebookActivityResponseOutput) ToDatabricksNotebookActivityResponseOutputWithContext(ctx context.Context) DatabricksNotebookActivityResponseOutput {
	return o
}

// Base parameters to be used for each run of this job.If the notebook takes a parameter that is not specified, the default value from the notebook will be used.
func (o DatabricksNotebookActivityResponseOutput) BaseParameters() pulumi.MapOutput {
	return o.ApplyT(func(v DatabricksNotebookActivityResponse) map[string]interface{} { return v.BaseParameters }).(pulumi.MapOutput)
}

// Activity depends on condition.
func (o DatabricksNotebookActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v DatabricksNotebookActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o DatabricksNotebookActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabricksNotebookActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// A list of libraries to be installed on the cluster that will execute the job.
func (o DatabricksNotebookActivityResponseOutput) Libraries() pulumi.MapArrayOutput {
	return o.ApplyT(func(v DatabricksNotebookActivityResponse) []map[string]interface{} { return v.Libraries }).(pulumi.MapArrayOutput)
}

// Linked service reference.
func (o DatabricksNotebookActivityResponseOutput) LinkedServiceName() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v DatabricksNotebookActivityResponse) *LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponsePtrOutput)
}

// Activity name.
func (o DatabricksNotebookActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DatabricksNotebookActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The absolute path of the notebook to be run in the Databricks Workspace. This path must begin with a slash. Type: string (or Expression with resultType string).
func (o DatabricksNotebookActivityResponseOutput) NotebookPath() pulumi.AnyOutput {
	return o.ApplyT(func(v DatabricksNotebookActivityResponse) interface{} { return v.NotebookPath }).(pulumi.AnyOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o DatabricksNotebookActivityResponseOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabricksNotebookActivityResponse) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o DatabricksNotebookActivityResponseOutput) Policy() ActivityPolicyResponsePtrOutput {
	return o.ApplyT(func(v DatabricksNotebookActivityResponse) *ActivityPolicyResponse { return v.Policy }).(ActivityPolicyResponsePtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o DatabricksNotebookActivityResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabricksNotebookActivityResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'DatabricksNotebook'.
func (o DatabricksNotebookActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DatabricksNotebookActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o DatabricksNotebookActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v DatabricksNotebookActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

// DatabricksSparkJar activity.
type DatabricksSparkJarActivity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// A list of libraries to be installed on the cluster that will execute the job.
	Libraries []map[string]interface{} `pulumi:"libraries"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// The full name of the class containing the main method to be executed. This class must be contained in a JAR provided as a library. Type: string (or Expression with resultType string).
	MainClassName interface{} `pulumi:"mainClassName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Parameters that will be passed to the main method.
	Parameters []interface{} `pulumi:"parameters"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'DatabricksSparkJar'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// DatabricksSparkJarActivityInput is an input type that accepts DatabricksSparkJarActivityArgs and DatabricksSparkJarActivityOutput values.
// You can construct a concrete instance of `DatabricksSparkJarActivityInput` via:
//
//	DatabricksSparkJarActivityArgs{...}
type DatabricksSparkJarActivityInput interface {
	pulumi.Input

	ToDatabricksSparkJarActivityOutput() DatabricksSparkJarActivityOutput
	ToDatabricksSparkJarActivityOutputWithContext(context.Context) DatabricksSparkJarActivityOutput
}

// DatabricksSparkJar activity.
type DatabricksSparkJarActivityArgs struct {
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// A list of libraries to be installed on the cluster that will execute the job.
	Libraries pulumi.MapArrayInput `pulumi:"libraries"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferencePtrInput `pulumi:"linkedServiceName"`
	// The full name of the class containing the main method to be executed. This class must be contained in a JAR provided as a library. Type: string (or Expression with resultType string).
	MainClassName pulumi.Input `pulumi:"mainClassName"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs pulumi.StringPtrInput `pulumi:"onInactiveMarkAs"`
	// Parameters that will be passed to the main method.
	Parameters pulumi.ArrayInput `pulumi:"parameters"`
	// Activity policy.
	Policy ActivityPolicyPtrInput `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Type of activity.
	// Expected value is 'DatabricksSparkJar'.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
}

func (DatabricksSparkJarActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabricksSparkJarActivity)(nil)).Elem()
}

func (i DatabricksSparkJarActivityArgs) ToDatabricksSparkJarActivityOutput() DatabricksSparkJarActivityOutput {
	return i.ToDatabricksSparkJarActivityOutputWithContext(context.Background())
}

func (i DatabricksSparkJarActivityArgs) ToDatabricksSparkJarActivityOutputWithContext(ctx context.Context) DatabricksSparkJarActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabricksSparkJarActivityOutput)
}

// DatabricksSparkJar activity.
type DatabricksSparkJarActivityOutput struct{ *pulumi.OutputState }

func (DatabricksSparkJarActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabricksSparkJarActivity)(nil)).Elem()
}

func (o DatabricksSparkJarActivityOutput) ToDatabricksSparkJarActivityOutput() DatabricksSparkJarActivityOutput {
	return o
}

func (o DatabricksSparkJarActivityOutput) ToDatabricksSparkJarActivityOutputWithContext(ctx context.Context) DatabricksSparkJarActivityOutput {
	return o
}

// Activity depends on condition.
func (o DatabricksSparkJarActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v DatabricksSparkJarActivity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o DatabricksSparkJarActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabricksSparkJarActivity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// A list of libraries to be installed on the cluster that will execute the job.
func (o DatabricksSparkJarActivityOutput) Libraries() pulumi.MapArrayOutput {
	return o.ApplyT(func(v DatabricksSparkJarActivity) []map[string]interface{} { return v.Libraries }).(pulumi.MapArrayOutput)
}

// Linked service reference.
func (o DatabricksSparkJarActivityOutput) LinkedServiceName() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v DatabricksSparkJarActivity) *LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferencePtrOutput)
}

// The full name of the class containing the main method to be executed. This class must be contained in a JAR provided as a library. Type: string (or Expression with resultType string).
func (o DatabricksSparkJarActivityOutput) MainClassName() pulumi.AnyOutput {
	return o.ApplyT(func(v DatabricksSparkJarActivity) interface{} { return v.MainClassName }).(pulumi.AnyOutput)
}

// Activity name.
func (o DatabricksSparkJarActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DatabricksSparkJarActivity) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o DatabricksSparkJarActivityOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabricksSparkJarActivity) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Parameters that will be passed to the main method.
func (o DatabricksSparkJarActivityOutput) Parameters() pulumi.ArrayOutput {
	return o.ApplyT(func(v DatabricksSparkJarActivity) []interface{} { return v.Parameters }).(pulumi.ArrayOutput)
}

// Activity policy.
func (o DatabricksSparkJarActivityOutput) Policy() ActivityPolicyPtrOutput {
	return o.ApplyT(func(v DatabricksSparkJarActivity) *ActivityPolicy { return v.Policy }).(ActivityPolicyPtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o DatabricksSparkJarActivityOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabricksSparkJarActivity) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'DatabricksSparkJar'.
func (o DatabricksSparkJarActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DatabricksSparkJarActivity) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o DatabricksSparkJarActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v DatabricksSparkJarActivity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

// DatabricksSparkJar activity.
type DatabricksSparkJarActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// A list of libraries to be installed on the cluster that will execute the job.
	Libraries []map[string]interface{} `pulumi:"libraries"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The full name of the class containing the main method to be executed. This class must be contained in a JAR provided as a library. Type: string (or Expression with resultType string).
	MainClassName interface{} `pulumi:"mainClassName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Parameters that will be passed to the main method.
	Parameters []interface{} `pulumi:"parameters"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'DatabricksSparkJar'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// DatabricksSparkJar activity.
type DatabricksSparkJarActivityResponseOutput struct{ *pulumi.OutputState }

func (DatabricksSparkJarActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabricksSparkJarActivityResponse)(nil)).Elem()
}

func (o DatabricksSparkJarActivityResponseOutput) ToDatabricksSparkJarActivityResponseOutput() DatabricksSparkJarActivityResponseOutput {
	return o
}

func (o DatabricksSparkJarActivityResponseOutput) ToDatabricksSparkJarActivityResponseOutputWithContext(ctx context.Context) DatabricksSparkJarActivityResponseOutput {
	return o
}

// Activity depends on condition.
func (o DatabricksSparkJarActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v DatabricksSparkJarActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o DatabricksSparkJarActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabricksSparkJarActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// A list of libraries to be installed on the cluster that will execute the job.
func (o DatabricksSparkJarActivityResponseOutput) Libraries() pulumi.MapArrayOutput {
	return o.ApplyT(func(v DatabricksSparkJarActivityResponse) []map[string]interface{} { return v.Libraries }).(pulumi.MapArrayOutput)
}

// Linked service reference.
func (o DatabricksSparkJarActivityResponseOutput) LinkedServiceName() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v DatabricksSparkJarActivityResponse) *LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponsePtrOutput)
}

// The full name of the class containing the main method to be executed. This class must be contained in a JAR provided as a library. Type: string (or Expression with resultType string).
func (o DatabricksSparkJarActivityResponseOutput) MainClassName() pulumi.AnyOutput {
	return o.ApplyT(func(v DatabricksSparkJarActivityResponse) interface{} { return v.MainClassName }).(pulumi.AnyOutput)
}

// Activity name.
func (o DatabricksSparkJarActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DatabricksSparkJarActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o DatabricksSparkJarActivityResponseOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabricksSparkJarActivityResponse) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Parameters that will be passed to the main method.
func (o DatabricksSparkJarActivityResponseOutput) Parameters() pulumi.ArrayOutput {
	return o.ApplyT(func(v DatabricksSparkJarActivityResponse) []interface{} { return v.Parameters }).(pulumi.ArrayOutput)
}

// Activity policy.
func (o DatabricksSparkJarActivityResponseOutput) Policy() ActivityPolicyResponsePtrOutput {
	return o.ApplyT(func(v DatabricksSparkJarActivityResponse) *ActivityPolicyResponse { return v.Policy }).(ActivityPolicyResponsePtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o DatabricksSparkJarActivityResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabricksSparkJarActivityResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'DatabricksSparkJar'.
func (o DatabricksSparkJarActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DatabricksSparkJarActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o DatabricksSparkJarActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v DatabricksSparkJarActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

// DatabricksSparkPython activity.
type DatabricksSparkPythonActivity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// A list of libraries to be installed on the cluster that will execute the job.
	Libraries []map[string]interface{} `pulumi:"libraries"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Command line parameters that will be passed to the Python file.
	Parameters []interface{} `pulumi:"parameters"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// The URI of the Python file to be executed. DBFS paths are supported. Type: string (or Expression with resultType string).
	PythonFile interface{} `pulumi:"pythonFile"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'DatabricksSparkPython'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// DatabricksSparkPythonActivityInput is an input type that accepts DatabricksSparkPythonActivityArgs and DatabricksSparkPythonActivityOutput values.
// You can construct a concrete instance of `DatabricksSparkPythonActivityInput` via:
//
//	DatabricksSparkPythonActivityArgs{...}
type DatabricksSparkPythonActivityInput interface {
	pulumi.Input

	ToDatabricksSparkPythonActivityOutput() DatabricksSparkPythonActivityOutput
	ToDatabricksSparkPythonActivityOutputWithContext(context.Context) DatabricksSparkPythonActivityOutput
}

// DatabricksSparkPython activity.
type DatabricksSparkPythonActivityArgs struct {
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// A list of libraries to be installed on the cluster that will execute the job.
	Libraries pulumi.MapArrayInput `pulumi:"libraries"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferencePtrInput `pulumi:"linkedServiceName"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs pulumi.StringPtrInput `pulumi:"onInactiveMarkAs"`
	// Command line parameters that will be passed to the Python file.
	Parameters pulumi.ArrayInput `pulumi:"parameters"`
	// Activity policy.
	Policy ActivityPolicyPtrInput `pulumi:"policy"`
	// The URI of the Python file to be executed. DBFS paths are supported. Type: string (or Expression with resultType string).
	PythonFile pulumi.Input `pulumi:"pythonFile"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Type of activity.
	// Expected value is 'DatabricksSparkPython'.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
}

func (DatabricksSparkPythonActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabricksSparkPythonActivity)(nil)).Elem()
}

func (i DatabricksSparkPythonActivityArgs) ToDatabricksSparkPythonActivityOutput() DatabricksSparkPythonActivityOutput {
	return i.ToDatabricksSparkPythonActivityOutputWithContext(context.Background())
}

func (i DatabricksSparkPythonActivityArgs) ToDatabricksSparkPythonActivityOutputWithContext(ctx context.Context) DatabricksSparkPythonActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabricksSparkPythonActivityOutput)
}

// DatabricksSparkPython activity.
type DatabricksSparkPythonActivityOutput struct{ *pulumi.OutputState }

func (DatabricksSparkPythonActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabricksSparkPythonActivity)(nil)).Elem()
}

func (o DatabricksSparkPythonActivityOutput) ToDatabricksSparkPythonActivityOutput() DatabricksSparkPythonActivityOutput {
	return o
}

func (o DatabricksSparkPythonActivityOutput) ToDatabricksSparkPythonActivityOutputWithContext(ctx context.Context) DatabricksSparkPythonActivityOutput {
	return o
}

// Activity depends on condition.
func (o DatabricksSparkPythonActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v DatabricksSparkPythonActivity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o DatabricksSparkPythonActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabricksSparkPythonActivity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// A list of libraries to be installed on the cluster that will execute the job.
func (o DatabricksSparkPythonActivityOutput) Libraries() pulumi.MapArrayOutput {
	return o.ApplyT(func(v DatabricksSparkPythonActivity) []map[string]interface{} { return v.Libraries }).(pulumi.MapArrayOutput)
}

// Linked service reference.
func (o DatabricksSparkPythonActivityOutput) LinkedServiceName() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v DatabricksSparkPythonActivity) *LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferencePtrOutput)
}

// Activity name.
func (o DatabricksSparkPythonActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DatabricksSparkPythonActivity) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o DatabricksSparkPythonActivityOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabricksSparkPythonActivity) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Command line parameters that will be passed to the Python file.
func (o DatabricksSparkPythonActivityOutput) Parameters() pulumi.ArrayOutput {
	return o.ApplyT(func(v DatabricksSparkPythonActivity) []interface{} { return v.Parameters }).(pulumi.ArrayOutput)
}

// Activity policy.
func (o DatabricksSparkPythonActivityOutput) Policy() ActivityPolicyPtrOutput {
	return o.ApplyT(func(v DatabricksSparkPythonActivity) *ActivityPolicy { return v.Policy }).(ActivityPolicyPtrOutput)
}

// The URI of the Python file to be executed. DBFS paths are supported. Type: string (or Expression with resultType string).
func (o DatabricksSparkPythonActivityOutput) PythonFile() pulumi.AnyOutput {
	return o.ApplyT(func(v DatabricksSparkPythonActivity) interface{} { return v.PythonFile }).(pulumi.AnyOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o DatabricksSparkPythonActivityOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabricksSparkPythonActivity) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'DatabricksSparkPython'.
func (o DatabricksSparkPythonActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DatabricksSparkPythonActivity) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o DatabricksSparkPythonActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v DatabricksSparkPythonActivity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

// DatabricksSparkPython activity.
type DatabricksSparkPythonActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// A list of libraries to be installed on the cluster that will execute the job.
	Libraries []map[string]interface{} `pulumi:"libraries"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Command line parameters that will be passed to the Python file.
	Parameters []interface{} `pulumi:"parameters"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// The URI of the Python file to be executed. DBFS paths are supported. Type: string (or Expression with resultType string).
	PythonFile interface{} `pulumi:"pythonFile"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'DatabricksSparkPython'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// DatabricksSparkPython activity.
type DatabricksSparkPythonActivityResponseOutput struct{ *pulumi.OutputState }

func (DatabricksSparkPythonActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabricksSparkPythonActivityResponse)(nil)).Elem()
}

func (o DatabricksSparkPythonActivityResponseOutput) ToDatabricksSparkPythonActivityResponseOutput() DatabricksSparkPythonActivityResponseOutput {
	return o
}

func (o DatabricksSparkPythonActivityResponseOutput) ToDatabricksSparkPythonActivityResponseOutputWithContext(ctx context.Context) DatabricksSparkPythonActivityResponseOutput {
	return o
}

// Activity depends on condition.
func (o DatabricksSparkPythonActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v DatabricksSparkPythonActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o DatabricksSparkPythonActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabricksSparkPythonActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// A list of libraries to be installed on the cluster that will execute the job.
func (o DatabricksSparkPythonActivityResponseOutput) Libraries() pulumi.MapArrayOutput {
	return o.ApplyT(func(v DatabricksSparkPythonActivityResponse) []map[string]interface{} { return v.Libraries }).(pulumi.MapArrayOutput)
}

// Linked service reference.
func (o DatabricksSparkPythonActivityResponseOutput) LinkedServiceName() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v DatabricksSparkPythonActivityResponse) *LinkedServiceReferenceResponse {
		return v.LinkedServiceName
	}).(LinkedServiceReferenceResponsePtrOutput)
}

// Activity name.
func (o DatabricksSparkPythonActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DatabricksSparkPythonActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o DatabricksSparkPythonActivityResponseOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabricksSparkPythonActivityResponse) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Command line parameters that will be passed to the Python file.
func (o DatabricksSparkPythonActivityResponseOutput) Parameters() pulumi.ArrayOutput {
	return o.ApplyT(func(v DatabricksSparkPythonActivityResponse) []interface{} { return v.Parameters }).(pulumi.ArrayOutput)
}

// Activity policy.
func (o DatabricksSparkPythonActivityResponseOutput) Policy() ActivityPolicyResponsePtrOutput {
	return o.ApplyT(func(v DatabricksSparkPythonActivityResponse) *ActivityPolicyResponse { return v.Policy }).(ActivityPolicyResponsePtrOutput)
}

// The URI of the Python file to be executed. DBFS paths are supported. Type: string (or Expression with resultType string).
func (o DatabricksSparkPythonActivityResponseOutput) PythonFile() pulumi.AnyOutput {
	return o.ApplyT(func(v DatabricksSparkPythonActivityResponse) interface{} { return v.PythonFile }).(pulumi.AnyOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o DatabricksSparkPythonActivityResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabricksSparkPythonActivityResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'DatabricksSparkPython'.
func (o DatabricksSparkPythonActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DatabricksSparkPythonActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o DatabricksSparkPythonActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v DatabricksSparkPythonActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

// The compression method used on a dataset.
type DatasetCompression struct {
	// The dataset compression level. Type: string (or Expression with resultType string).
	Level interface{} `pulumi:"level"`
	// Type of dataset compression. Type: string (or Expression with resultType string).
	Type interface{} `pulumi:"type"`
}

// DatasetCompressionInput is an input type that accepts DatasetCompressionArgs and DatasetCompressionOutput values.
// You can construct a concrete instance of `DatasetCompressionInput` via:
//
//	DatasetCompressionArgs{...}
type DatasetCompressionInput interface {
	pulumi.Input

	ToDatasetCompressionOutput() DatasetCompressionOutput
	ToDatasetCompressionOutputWithContext(context.Context) DatasetCompressionOutput
}

// The compression method used on a dataset.
type DatasetCompressionArgs struct {
	// The dataset compression level. Type: string (or Expression with resultType string).
	Level pulumi.Input `pulumi:"level"`
	// Type of dataset compression. Type: string (or Expression with resultType string).
	Type pulumi.Input `pulumi:"type"`
}

func (DatasetCompressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetCompression)(nil)).Elem()
}

func (i DatasetCompressionArgs) ToDatasetCompressionOutput() DatasetCompressionOutput {
	return i.ToDatasetCompressionOutputWithContext(context.Background())
}

func (i DatasetCompressionArgs) ToDatasetCompressionOutputWithContext(ctx context.Context) DatasetCompressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetCompressionOutput)
}

func (i DatasetCompressionArgs) ToDatasetCompressionPtrOutput() DatasetCompressionPtrOutput {
	return i.ToDatasetCompressionPtrOutputWithContext(context.Background())
}

func (i DatasetCompressionArgs) ToDatasetCompressionPtrOutputWithContext(ctx context.Context) DatasetCompressionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetCompressionOutput).ToDatasetCompressionPtrOutputWithContext(ctx)
}

// DatasetCompressionPtrInput is an input type that accepts DatasetCompressionArgs, DatasetCompressionPtr and DatasetCompressionPtrOutput values.
// You can construct a concrete instance of `DatasetCompressionPtrInput` via:
//
//	        DatasetCompressionArgs{...}
//
//	or:
//
//	        nil
type DatasetCompressionPtrInput interface {
	pulumi.Input

	ToDatasetCompressionPtrOutput() DatasetCompressionPtrOutput
	ToDatasetCompressionPtrOutputWithContext(context.Context) DatasetCompressionPtrOutput
}

type datasetCompressionPtrType DatasetCompressionArgs

func DatasetCompressionPtr(v *DatasetCompressionArgs) DatasetCompressionPtrInput {
	return (*datasetCompressionPtrType)(v)
}

func (*datasetCompressionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetCompression)(nil)).Elem()
}

func (i *datasetCompressionPtrType) ToDatasetCompressionPtrOutput() DatasetCompressionPtrOutput {
	return i.ToDatasetCompressionPtrOutputWithContext(context.Background())
}

func (i *datasetCompressionPtrType) ToDatasetCompressionPtrOutputWithContext(ctx context.Context) DatasetCompressionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetCompressionPtrOutput)
}

// The compression method used on a dataset.
type DatasetCompressionOutput struct{ *pulumi.OutputState }

func (DatasetCompressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetCompression)(nil)).Elem()
}

func (o DatasetCompressionOutput) ToDatasetCompressionOutput() DatasetCompressionOutput {
	return o
}

func (o DatasetCompressionOutput) ToDatasetCompressionOutputWithContext(ctx context.Context) DatasetCompressionOutput {
	return o
}

func (o DatasetCompressionOutput) ToDatasetCompressionPtrOutput() DatasetCompressionPtrOutput {
	return o.ToDatasetCompressionPtrOutputWithContext(context.Background())
}

func (o DatasetCompressionOutput) ToDatasetCompressionPtrOutputWithContext(ctx context.Context) DatasetCompressionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetCompression) *DatasetCompression {
		return &v
	}).(DatasetCompressionPtrOutput)
}

// The dataset compression level. Type: string (or Expression with resultType string).
func (o DatasetCompressionOutput) Level() pulumi.AnyOutput {
	return o.ApplyT(func(v DatasetCompression) interface{} { return v.Level }).(pulumi.AnyOutput)
}

// Type of dataset compression. Type: string (or Expression with resultType string).
func (o DatasetCompressionOutput) Type() pulumi.AnyOutput {
	return o.ApplyT(func(v DatasetCompression) interface{} { return v.Type }).(pulumi.AnyOutput)
}

type DatasetCompressionPtrOutput struct{ *pulumi.OutputState }

func (DatasetCompressionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetCompression)(nil)).Elem()
}

func (o DatasetCompressionPtrOutput) ToDatasetCompressionPtrOutput() DatasetCompressionPtrOutput {
	return o
}

func (o DatasetCompressionPtrOutput) ToDatasetCompressionPtrOutputWithContext(ctx context.Context) DatasetCompressionPtrOutput {
	return o
}

func (o DatasetCompressionPtrOutput) Elem() DatasetCompressionOutput {
	return o.ApplyT(func(v *DatasetCompression) DatasetCompression {
		if v != nil {
			return *v
		}
		var ret DatasetCompression
		return ret
	}).(DatasetCompressionOutput)
}

// The dataset compression level. Type: string (or Expression with resultType string).
func (o DatasetCompressionPtrOutput) Level() pulumi.AnyOutput {
	return o.ApplyT(func(v *DatasetCompression) interface{} {
		if v == nil {
			return nil
		}
		return v.Level
	}).(pulumi.AnyOutput)
}

// Type of dataset compression. Type: string (or Expression with resultType string).
func (o DatasetCompressionPtrOutput) Type() pulumi.AnyOutput {
	return o.ApplyT(func(v *DatasetCompression) interface{} {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.AnyOutput)
}

// The compression method used on a dataset.
type DatasetCompressionResponse struct {
	// The dataset compression level. Type: string (or Expression with resultType string).
	Level interface{} `pulumi:"level"`
	// Type of dataset compression. Type: string (or Expression with resultType string).
	Type interface{} `pulumi:"type"`
}

// The compression method used on a dataset.
type DatasetCompressionResponseOutput struct{ *pulumi.OutputState }

func (DatasetCompressionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetCompressionResponse)(nil)).Elem()
}

func (o DatasetCompressionResponseOutput) ToDatasetCompressionResponseOutput() DatasetCompressionResponseOutput {
	return o
}

func (o DatasetCompressionResponseOutput) ToDatasetCompressionResponseOutputWithContext(ctx context.Context) DatasetCompressionResponseOutput {
	return o
}

// The dataset compression level. Type: string (or Expression with resultType string).
func (o DatasetCompressionResponseOutput) Level() pulumi.AnyOutput {
	return o.ApplyT(func(v DatasetCompressionResponse) interface{} { return v.Level }).(pulumi.AnyOutput)
}

// Type of dataset compression. Type: string (or Expression with resultType string).
func (o DatasetCompressionResponseOutput) Type() pulumi.AnyOutput {
	return o.ApplyT(func(v DatasetCompressionResponse) interface{} { return v.Type }).(pulumi.AnyOutput)
}

type DatasetCompressionResponsePtrOutput struct{ *pulumi.OutputState }

func (DatasetCompressionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetCompressionResponse)(nil)).Elem()
}

func (o DatasetCompressionResponsePtrOutput) ToDatasetCompressionResponsePtrOutput() DatasetCompressionResponsePtrOutput {
	return o
}

func (o DatasetCompressionResponsePtrOutput) ToDatasetCompressionResponsePtrOutputWithContext(ctx context.Context) DatasetCompressionResponsePtrOutput {
	return o
}

func (o DatasetCompressionResponsePtrOutput) Elem() DatasetCompressionResponseOutput {
	return o.ApplyT(func(v *DatasetCompressionResponse) DatasetCompressionResponse {
		if v != nil {
			return *v
		}
		var ret DatasetCompressionResponse
		return ret
	}).(DatasetCompressionResponseOutput)
}

// The dataset compression level. Type: string (or Expression with resultType string).
func (o DatasetCompressionResponsePtrOutput) Level() pulumi.AnyOutput {
	return o.ApplyT(func(v *DatasetCompressionResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Level
	}).(pulumi.AnyOutput)
}

// Type of dataset compression. Type: string (or Expression with resultType string).
func (o DatasetCompressionResponsePtrOutput) Type() pulumi.AnyOutput {
	return o.ApplyT(func(v *DatasetCompressionResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
type DatasetFolder struct {
	// The name of the folder that this Dataset is in.
	Name *string `pulumi:"name"`
}

// DatasetFolderInput is an input type that accepts DatasetFolderArgs and DatasetFolderOutput values.
// You can construct a concrete instance of `DatasetFolderInput` via:
//
//	DatasetFolderArgs{...}
type DatasetFolderInput interface {
	pulumi.Input

	ToDatasetFolderOutput() DatasetFolderOutput
	ToDatasetFolderOutputWithContext(context.Context) DatasetFolderOutput
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
type DatasetFolderArgs struct {
	// The name of the folder that this Dataset is in.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DatasetFolderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetFolder)(nil)).Elem()
}

func (i DatasetFolderArgs) ToDatasetFolderOutput() DatasetFolderOutput {
	return i.ToDatasetFolderOutputWithContext(context.Background())
}

func (i DatasetFolderArgs) ToDatasetFolderOutputWithContext(ctx context.Context) DatasetFolderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetFolderOutput)
}

func (i DatasetFolderArgs) ToDatasetFolderPtrOutput() DatasetFolderPtrOutput {
	return i.ToDatasetFolderPtrOutputWithContext(context.Background())
}

func (i DatasetFolderArgs) ToDatasetFolderPtrOutputWithContext(ctx context.Context) DatasetFolderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetFolderOutput).ToDatasetFolderPtrOutputWithContext(ctx)
}

// DatasetFolderPtrInput is an input type that accepts DatasetFolderArgs, DatasetFolderPtr and DatasetFolderPtrOutput values.
// You can construct a concrete instance of `DatasetFolderPtrInput` via:
//
//	        DatasetFolderArgs{...}
//
//	or:
//
//	        nil
type DatasetFolderPtrInput interface {
	pulumi.Input

	ToDatasetFolderPtrOutput() DatasetFolderPtrOutput
	ToDatasetFolderPtrOutputWithContext(context.Context) DatasetFolderPtrOutput
}

type datasetFolderPtrType DatasetFolderArgs

func DatasetFolderPtr(v *DatasetFolderArgs) DatasetFolderPtrInput {
	return (*datasetFolderPtrType)(v)
}

func (*datasetFolderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetFolder)(nil)).Elem()
}

func (i *datasetFolderPtrType) ToDatasetFolderPtrOutput() DatasetFolderPtrOutput {
	return i.ToDatasetFolderPtrOutputWithContext(context.Background())
}

func (i *datasetFolderPtrType) ToDatasetFolderPtrOutputWithContext(ctx context.Context) DatasetFolderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetFolderPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
type DatasetFolderOutput struct{ *pulumi.OutputState }

func (DatasetFolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetFolder)(nil)).Elem()
}

func (o DatasetFolderOutput) ToDatasetFolderOutput() DatasetFolderOutput {
	return o
}

func (o DatasetFolderOutput) ToDatasetFolderOutputWithContext(ctx context.Context) DatasetFolderOutput {
	return o
}

func (o DatasetFolderOutput) ToDatasetFolderPtrOutput() DatasetFolderPtrOutput {
	return o.ToDatasetFolderPtrOutputWithContext(context.Background())
}

func (o DatasetFolderOutput) ToDatasetFolderPtrOutputWithContext(ctx context.Context) DatasetFolderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetFolder) *DatasetFolder {
		return &v
	}).(DatasetFolderPtrOutput)
}

// The name of the folder that this Dataset is in.
func (o DatasetFolderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetFolder) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DatasetFolderPtrOutput struct{ *pulumi.OutputState }

func (DatasetFolderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetFolder)(nil)).Elem()
}

func (o DatasetFolderPtrOutput) ToDatasetFolderPtrOutput() DatasetFolderPtrOutput {
	return o
}

func (o DatasetFolderPtrOutput) ToDatasetFolderPtrOutputWithContext(ctx context.Context) DatasetFolderPtrOutput {
	return o
}

func (o DatasetFolderPtrOutput) Elem() DatasetFolderOutput {
	return o.ApplyT(func(v *DatasetFolder) DatasetFolder {
		if v != nil {
			return *v
		}
		var ret DatasetFolder
		return ret
	}).(DatasetFolderOutput)
}

// The name of the folder that this Dataset is in.
func (o DatasetFolderPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetFolder) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Dataset reference type.
type DatasetReference struct {
	// Arguments for dataset.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Reference dataset name.
	ReferenceName string `pulumi:"referenceName"`
	// Dataset reference type.
	Type string `pulumi:"type"`
}

// DatasetReferenceInput is an input type that accepts DatasetReferenceArgs and DatasetReferenceOutput values.
// You can construct a concrete instance of `DatasetReferenceInput` via:
//
//	DatasetReferenceArgs{...}
type DatasetReferenceInput interface {
	pulumi.Input

	ToDatasetReferenceOutput() DatasetReferenceOutput
	ToDatasetReferenceOutputWithContext(context.Context) DatasetReferenceOutput
}

// Dataset reference type.
type DatasetReferenceArgs struct {
	// Arguments for dataset.
	Parameters pulumi.MapInput `pulumi:"parameters"`
	// Reference dataset name.
	ReferenceName pulumi.StringInput `pulumi:"referenceName"`
	// Dataset reference type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DatasetReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetReference)(nil)).Elem()
}

func (i DatasetReferenceArgs) ToDatasetReferenceOutput() DatasetReferenceOutput {
	return i.ToDatasetReferenceOutputWithContext(context.Background())
}

func (i DatasetReferenceArgs) ToDatasetReferenceOutputWithContext(ctx context.Context) DatasetReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetReferenceOutput)
}

func (i DatasetReferenceArgs) ToDatasetReferencePtrOutput() DatasetReferencePtrOutput {
	return i.ToDatasetReferencePtrOutputWithContext(context.Background())
}

func (i DatasetReferenceArgs) ToDatasetReferencePtrOutputWithContext(ctx context.Context) DatasetReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetReferenceOutput).ToDatasetReferencePtrOutputWithContext(ctx)
}

// DatasetReferencePtrInput is an input type that accepts DatasetReferenceArgs, DatasetReferencePtr and DatasetReferencePtrOutput values.
// You can construct a concrete instance of `DatasetReferencePtrInput` via:
//
//	        DatasetReferenceArgs{...}
//
//	or:
//
//	        nil
type DatasetReferencePtrInput interface {
	pulumi.Input

	ToDatasetReferencePtrOutput() DatasetReferencePtrOutput
	ToDatasetReferencePtrOutputWithContext(context.Context) DatasetReferencePtrOutput
}

type datasetReferencePtrType DatasetReferenceArgs

func DatasetReferencePtr(v *DatasetReferenceArgs) DatasetReferencePtrInput {
	return (*datasetReferencePtrType)(v)
}

func (*datasetReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetReference)(nil)).Elem()
}

func (i *datasetReferencePtrType) ToDatasetReferencePtrOutput() DatasetReferencePtrOutput {
	return i.ToDatasetReferencePtrOutputWithContext(context.Background())
}

func (i *datasetReferencePtrType) ToDatasetReferencePtrOutputWithContext(ctx context.Context) DatasetReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetReferencePtrOutput)
}

// DatasetReferenceArrayInput is an input type that accepts DatasetReferenceArray and DatasetReferenceArrayOutput values.
// You can construct a concrete instance of `DatasetReferenceArrayInput` via:
//
//	DatasetReferenceArray{ DatasetReferenceArgs{...} }
type DatasetReferenceArrayInput interface {
	pulumi.Input

	ToDatasetReferenceArrayOutput() DatasetReferenceArrayOutput
	ToDatasetReferenceArrayOutputWithContext(context.Context) DatasetReferenceArrayOutput
}

type DatasetReferenceArray []DatasetReferenceInput

func (DatasetReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetReference)(nil)).Elem()
}

func (i DatasetReferenceArray) ToDatasetReferenceArrayOutput() DatasetReferenceArrayOutput {
	return i.ToDatasetReferenceArrayOutputWithContext(context.Background())
}

func (i DatasetReferenceArray) ToDatasetReferenceArrayOutputWithContext(ctx context.Context) DatasetReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetReferenceArrayOutput)
}

// Dataset reference type.
type DatasetReferenceOutput struct{ *pulumi.OutputState }

func (DatasetReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetReference)(nil)).Elem()
}

func (o DatasetReferenceOutput) ToDatasetReferenceOutput() DatasetReferenceOutput {
	return o
}

func (o DatasetReferenceOutput) ToDatasetReferenceOutputWithContext(ctx context.Context) DatasetReferenceOutput {
	return o
}

func (o DatasetReferenceOutput) ToDatasetReferencePtrOutput() DatasetReferencePtrOutput {
	return o.ToDatasetReferencePtrOutputWithContext(context.Background())
}

func (o DatasetReferenceOutput) ToDatasetReferencePtrOutputWithContext(ctx context.Context) DatasetReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetReference) *DatasetReference {
		return &v
	}).(DatasetReferencePtrOutput)
}

// Arguments for dataset.
func (o DatasetReferenceOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v DatasetReference) map[string]interface{} { return v.Parameters }).(pulumi.MapOutput)
}

// Reference dataset name.
func (o DatasetReferenceOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetReference) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Dataset reference type.
func (o DatasetReferenceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetReference) string { return v.Type }).(pulumi.StringOutput)
}

type DatasetReferencePtrOutput struct{ *pulumi.OutputState }

func (DatasetReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetReference)(nil)).Elem()
}

func (o DatasetReferencePtrOutput) ToDatasetReferencePtrOutput() DatasetReferencePtrOutput {
	return o
}

func (o DatasetReferencePtrOutput) ToDatasetReferencePtrOutputWithContext(ctx context.Context) DatasetReferencePtrOutput {
	return o
}

func (o DatasetReferencePtrOutput) Elem() DatasetReferenceOutput {
	return o.ApplyT(func(v *DatasetReference) DatasetReference {
		if v != nil {
			return *v
		}
		var ret DatasetReference
		return ret
	}).(DatasetReferenceOutput)
}

// Arguments for dataset.
func (o DatasetReferencePtrOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v *DatasetReference) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.MapOutput)
}

// Reference dataset name.
func (o DatasetReferencePtrOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetReference) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceName
	}).(pulumi.StringPtrOutput)
}

// Dataset reference type.
func (o DatasetReferencePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetReference) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type DatasetReferenceArrayOutput struct{ *pulumi.OutputState }

func (DatasetReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetReference)(nil)).Elem()
}

func (o DatasetReferenceArrayOutput) ToDatasetReferenceArrayOutput() DatasetReferenceArrayOutput {
	return o
}

func (o DatasetReferenceArrayOutput) ToDatasetReferenceArrayOutputWithContext(ctx context.Context) DatasetReferenceArrayOutput {
	return o
}

func (o DatasetReferenceArrayOutput) Index(i pulumi.IntInput) DatasetReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatasetReference {
		return vs[0].([]DatasetReference)[vs[1].(int)]
	}).(DatasetReferenceOutput)
}

// Dataset reference type.
type DatasetReferenceResponse struct {
	// Arguments for dataset.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Reference dataset name.
	ReferenceName string `pulumi:"referenceName"`
	// Dataset reference type.
	Type string `pulumi:"type"`
}

// Dataset reference type.
type DatasetReferenceResponseOutput struct{ *pulumi.OutputState }

func (DatasetReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetReferenceResponse)(nil)).Elem()
}

func (o DatasetReferenceResponseOutput) ToDatasetReferenceResponseOutput() DatasetReferenceResponseOutput {
	return o
}

func (o DatasetReferenceResponseOutput) ToDatasetReferenceResponseOutputWithContext(ctx context.Context) DatasetReferenceResponseOutput {
	return o
}

// Arguments for dataset.
func (o DatasetReferenceResponseOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v DatasetReferenceResponse) map[string]interface{} { return v.Parameters }).(pulumi.MapOutput)
}

// Reference dataset name.
func (o DatasetReferenceResponseOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetReferenceResponse) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Dataset reference type.
func (o DatasetReferenceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetReferenceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type DatasetReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (DatasetReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetReferenceResponse)(nil)).Elem()
}

func (o DatasetReferenceResponsePtrOutput) ToDatasetReferenceResponsePtrOutput() DatasetReferenceResponsePtrOutput {
	return o
}

func (o DatasetReferenceResponsePtrOutput) ToDatasetReferenceResponsePtrOutputWithContext(ctx context.Context) DatasetReferenceResponsePtrOutput {
	return o
}

func (o DatasetReferenceResponsePtrOutput) Elem() DatasetReferenceResponseOutput {
	return o.ApplyT(func(v *DatasetReferenceResponse) DatasetReferenceResponse {
		if v != nil {
			return *v
		}
		var ret DatasetReferenceResponse
		return ret
	}).(DatasetReferenceResponseOutput)
}

// Arguments for dataset.
func (o DatasetReferenceResponsePtrOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v *DatasetReferenceResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.MapOutput)
}

// Reference dataset name.
func (o DatasetReferenceResponsePtrOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceName
	}).(pulumi.StringPtrOutput)
}

// Dataset reference type.
func (o DatasetReferenceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type DatasetReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (DatasetReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetReferenceResponse)(nil)).Elem()
}

func (o DatasetReferenceResponseArrayOutput) ToDatasetReferenceResponseArrayOutput() DatasetReferenceResponseArrayOutput {
	return o
}

func (o DatasetReferenceResponseArrayOutput) ToDatasetReferenceResponseArrayOutputWithContext(ctx context.Context) DatasetReferenceResponseArrayOutput {
	return o
}

func (o DatasetReferenceResponseArrayOutput) Index(i pulumi.IntInput) DatasetReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatasetReferenceResponse {
		return vs[0].([]DatasetReferenceResponse)[vs[1].(int)]
	}).(DatasetReferenceResponseOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
type DatasetResponseFolder struct {
	// The name of the folder that this Dataset is in.
	Name *string `pulumi:"name"`
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
type DatasetResponseFolderOutput struct{ *pulumi.OutputState }

func (DatasetResponseFolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetResponseFolder)(nil)).Elem()
}

func (o DatasetResponseFolderOutput) ToDatasetResponseFolderOutput() DatasetResponseFolderOutput {
	return o
}

func (o DatasetResponseFolderOutput) ToDatasetResponseFolderOutputWithContext(ctx context.Context) DatasetResponseFolderOutput {
	return o
}

// The name of the folder that this Dataset is in.
func (o DatasetResponseFolderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetResponseFolder) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DatasetResponseFolderPtrOutput struct{ *pulumi.OutputState }

func (DatasetResponseFolderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetResponseFolder)(nil)).Elem()
}

func (o DatasetResponseFolderPtrOutput) ToDatasetResponseFolderPtrOutput() DatasetResponseFolderPtrOutput {
	return o
}

func (o DatasetResponseFolderPtrOutput) ToDatasetResponseFolderPtrOutputWithContext(ctx context.Context) DatasetResponseFolderPtrOutput {
	return o
}

func (o DatasetResponseFolderPtrOutput) Elem() DatasetResponseFolderOutput {
	return o.ApplyT(func(v *DatasetResponseFolder) DatasetResponseFolder {
		if v != nil {
			return *v
		}
		var ret DatasetResponseFolder
		return ret
	}).(DatasetResponseFolderOutput)
}

// The name of the folder that this Dataset is in.
func (o DatasetResponseFolderPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponseFolder) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Linked service for Dataworld.
type DataworldLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The api token for the Dataworld source.
	ApiToken interface{} `pulumi:"apiToken"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Dataworld'.
	Type string `pulumi:"type"`
}

// DataworldLinkedServiceInput is an input type that accepts DataworldLinkedServiceArgs and DataworldLinkedServiceOutput values.
// You can construct a concrete instance of `DataworldLinkedServiceInput` via:
//
//	DataworldLinkedServiceArgs{...}
type DataworldLinkedServiceInput interface {
	pulumi.Input

	ToDataworldLinkedServiceOutput() DataworldLinkedServiceOutput
	ToDataworldLinkedServiceOutputWithContext(context.Context) DataworldLinkedServiceOutput
}

// Linked service for Dataworld.
type DataworldLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The api token for the Dataworld source.
	ApiToken pulumi.Input `pulumi:"apiToken"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Dataworld'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DataworldLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataworldLinkedService)(nil)).Elem()
}

func (i DataworldLinkedServiceArgs) ToDataworldLinkedServiceOutput() DataworldLinkedServiceOutput {
	return i.ToDataworldLinkedServiceOutputWithContext(context.Background())
}

func (i DataworldLinkedServiceArgs) ToDataworldLinkedServiceOutputWithContext(ctx context.Context) DataworldLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataworldLinkedServiceOutput)
}

// Linked service for Dataworld.
type DataworldLinkedServiceOutput struct{ *pulumi.OutputState }

func (DataworldLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataworldLinkedService)(nil)).Elem()
}

func (o DataworldLinkedServiceOutput) ToDataworldLinkedServiceOutput() DataworldLinkedServiceOutput {
	return o
}

func (o DataworldLinkedServiceOutput) ToDataworldLinkedServiceOutputWithContext(ctx context.Context) DataworldLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o DataworldLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v DataworldLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The api token for the Dataworld source.
func (o DataworldLinkedServiceOutput) ApiToken() pulumi.AnyOutput {
	return o.ApplyT(func(v DataworldLinkedService) interface{} { return v.ApiToken }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o DataworldLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v DataworldLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o DataworldLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataworldLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o DataworldLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataworldLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o DataworldLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v DataworldLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
// Expected value is 'Dataworld'.
func (o DataworldLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DataworldLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for Dataworld.
type DataworldLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The api token for the Dataworld source.
	ApiToken interface{} `pulumi:"apiToken"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'Dataworld'.
	Type string `pulumi:"type"`
}

// Linked service for Dataworld.
type DataworldLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (DataworldLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataworldLinkedServiceResponse)(nil)).Elem()
}

func (o DataworldLinkedServiceResponseOutput) ToDataworldLinkedServiceResponseOutput() DataworldLinkedServiceResponseOutput {
	return o
}

func (o DataworldLinkedServiceResponseOutput) ToDataworldLinkedServiceResponseOutputWithContext(ctx context.Context) DataworldLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o DataworldLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v DataworldLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The api token for the Dataworld source.
func (o DataworldLinkedServiceResponseOutput) ApiToken() pulumi.AnyOutput {
	return o.ApplyT(func(v DataworldLinkedServiceResponse) interface{} { return v.ApiToken }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o DataworldLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v DataworldLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o DataworldLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataworldLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o DataworldLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataworldLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o DataworldLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v DataworldLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
// Expected value is 'Dataworld'.
func (o DataworldLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DataworldLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for DB2 data source.
type Db2LinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// AuthenticationType to be used for connection. It is mutually exclusive with connectionString property.
	AuthenticationType *string `pulumi:"authenticationType"`
	// Certificate Common Name when TLS is enabled. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	CertificateCommonName interface{} `pulumi:"certificateCommonName"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with server, database, authenticationType, userName, packageCollection and certificateCommonName property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Database name for connection. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. It is mutually exclusive with connectionString property. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Under where packages are created when querying database. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	PackageCollection interface{} `pulumi:"packageCollection"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// Server name for connection. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	// Expected value is 'Db2'.
	Type string `pulumi:"type"`
	// Username for authentication. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// Db2LinkedServiceInput is an input type that accepts Db2LinkedServiceArgs and Db2LinkedServiceOutput values.
// You can construct a concrete instance of `Db2LinkedServiceInput` via:
//
//	Db2LinkedServiceArgs{...}
type Db2LinkedServiceInput interface {
	pulumi.Input

	ToDb2LinkedServiceOutput() Db2LinkedServiceOutput
	ToDb2LinkedServiceOutputWithContext(context.Context) Db2LinkedServiceOutput
}

// Linked service for DB2 data source.
type Db2LinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// AuthenticationType to be used for connection. It is mutually exclusive with connectionString property.
	AuthenticationType pulumi.StringPtrInput `pulumi:"authenticationType"`
	// Certificate Common Name when TLS is enabled. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	CertificateCommonName pulumi.Input `pulumi:"certificateCommonName"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with server, database, authenticationType, userName, packageCollection and certificateCommonName property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Database name for connection. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	Database pulumi.Input `pulumi:"database"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. It is mutually exclusive with connectionString property. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Under where packages are created when querying database. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	PackageCollection pulumi.Input `pulumi:"packageCollection"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password for authentication.
	Password pulumi.Input `pulumi:"password"`
	// Server name for connection. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	Server pulumi.Input `pulumi:"server"`
	// Type of linked service.
	// Expected value is 'Db2'.
	Type pulumi.StringInput `pulumi:"type"`
	// Username for authentication. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	Username pulumi.Input `pulumi:"username"`
}

func (Db2LinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Db2LinkedService)(nil)).Elem()
}

func (i Db2LinkedServiceArgs) ToDb2LinkedServiceOutput() Db2LinkedServiceOutput {
	return i.ToDb2LinkedServiceOutputWithContext(context.Background())
}

func (i Db2LinkedServiceArgs) ToDb2LinkedServiceOutputWithContext(ctx context.Context) Db2LinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Db2LinkedServiceOutput)
}

// Linked service for DB2 data source.
type Db2LinkedServiceOutput struct{ *pulumi.OutputState }

func (Db2LinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Db2LinkedService)(nil)).Elem()
}

func (o Db2LinkedServiceOutput) ToDb2LinkedServiceOutput() Db2LinkedServiceOutput {
	return o
}

func (o Db2LinkedServiceOutput) ToDb2LinkedServiceOutputWithContext(ctx context.Context) Db2LinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o Db2LinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v Db2LinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// AuthenticationType to be used for connection. It is mutually exclusive with connectionString property.
func (o Db2LinkedServiceOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Db2LinkedService) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// Certificate Common Name when TLS is enabled. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
func (o Db2LinkedServiceOutput) CertificateCommonName() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2LinkedService) interface{} { return v.CertificateCommonName }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o Db2LinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v Db2LinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The connection string. It is mutually exclusive with server, database, authenticationType, userName, packageCollection and certificateCommonName property. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o Db2LinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2LinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Database name for connection. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
func (o Db2LinkedServiceOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2LinkedService) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Linked service description.
func (o Db2LinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Db2LinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. It is mutually exclusive with connectionString property. Type: string.
func (o Db2LinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Db2LinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Under where packages are created when querying database. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
func (o Db2LinkedServiceOutput) PackageCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2LinkedService) interface{} { return v.PackageCollection }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o Db2LinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v Db2LinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Password for authentication.
func (o Db2LinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2LinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Server name for connection. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
func (o Db2LinkedServiceOutput) Server() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2LinkedService) interface{} { return v.Server }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Db2'.
func (o Db2LinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Db2LinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Username for authentication. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
func (o Db2LinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2LinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Linked service for DB2 data source.
type Db2LinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// AuthenticationType to be used for connection. It is mutually exclusive with connectionString property.
	AuthenticationType *string `pulumi:"authenticationType"`
	// Certificate Common Name when TLS is enabled. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	CertificateCommonName interface{} `pulumi:"certificateCommonName"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The connection string. It is mutually exclusive with server, database, authenticationType, userName, packageCollection and certificateCommonName property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Database name for connection. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	Database interface{} `pulumi:"database"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. It is mutually exclusive with connectionString property. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Under where packages are created when querying database. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	PackageCollection interface{} `pulumi:"packageCollection"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password for authentication.
	Password interface{} `pulumi:"password"`
	// Server name for connection. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	Server interface{} `pulumi:"server"`
	// Type of linked service.
	// Expected value is 'Db2'.
	Type string `pulumi:"type"`
	// Username for authentication. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// Linked service for DB2 data source.
type Db2LinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (Db2LinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Db2LinkedServiceResponse)(nil)).Elem()
}

func (o Db2LinkedServiceResponseOutput) ToDb2LinkedServiceResponseOutput() Db2LinkedServiceResponseOutput {
	return o
}

func (o Db2LinkedServiceResponseOutput) ToDb2LinkedServiceResponseOutputWithContext(ctx context.Context) Db2LinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o Db2LinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v Db2LinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// AuthenticationType to be used for connection. It is mutually exclusive with connectionString property.
func (o Db2LinkedServiceResponseOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Db2LinkedServiceResponse) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// Certificate Common Name when TLS is enabled. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
func (o Db2LinkedServiceResponseOutput) CertificateCommonName() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2LinkedServiceResponse) interface{} { return v.CertificateCommonName }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o Db2LinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v Db2LinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The connection string. It is mutually exclusive with server, database, authenticationType, userName, packageCollection and certificateCommonName property. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o Db2LinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2LinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Database name for connection. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
func (o Db2LinkedServiceResponseOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2LinkedServiceResponse) interface{} { return v.Database }).(pulumi.AnyOutput)
}

// Linked service description.
func (o Db2LinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Db2LinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. It is mutually exclusive with connectionString property. Type: string.
func (o Db2LinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Db2LinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Under where packages are created when querying database. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
func (o Db2LinkedServiceResponseOutput) PackageCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2LinkedServiceResponse) interface{} { return v.PackageCollection }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o Db2LinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v Db2LinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password for authentication.
func (o Db2LinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2LinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Server name for connection. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
func (o Db2LinkedServiceResponseOutput) Server() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2LinkedServiceResponse) interface{} { return v.Server }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Db2'.
func (o Db2LinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Db2LinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Username for authentication. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string).
func (o Db2LinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2LinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// A copy activity source for Db2 databases.
type Db2Source struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'Db2Source'.
	Type string `pulumi:"type"`
}

// Db2SourceInput is an input type that accepts Db2SourceArgs and Db2SourceOutput values.
// You can construct a concrete instance of `Db2SourceInput` via:
//
//	Db2SourceArgs{...}
type Db2SourceInput interface {
	pulumi.Input

	ToDb2SourceOutput() Db2SourceOutput
	ToDb2SourceOutputWithContext(context.Context) Db2SourceOutput
}

// A copy activity source for Db2 databases.
type Db2SourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'Db2Source'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (Db2SourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Db2Source)(nil)).Elem()
}

func (i Db2SourceArgs) ToDb2SourceOutput() Db2SourceOutput {
	return i.ToDb2SourceOutputWithContext(context.Background())
}

func (i Db2SourceArgs) ToDb2SourceOutputWithContext(ctx context.Context) Db2SourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Db2SourceOutput)
}

// A copy activity source for Db2 databases.
type Db2SourceOutput struct{ *pulumi.OutputState }

func (Db2SourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Db2Source)(nil)).Elem()
}

func (o Db2SourceOutput) ToDb2SourceOutput() Db2SourceOutput {
	return o
}

func (o Db2SourceOutput) ToDb2SourceOutputWithContext(ctx context.Context) Db2SourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o Db2SourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2Source) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o Db2SourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2Source) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o Db2SourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2Source) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Database query. Type: string (or Expression with resultType string).
func (o Db2SourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2Source) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o Db2SourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2Source) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o Db2SourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2Source) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o Db2SourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2Source) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'Db2Source'.
func (o Db2SourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Db2Source) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity source for Db2 databases.
type Db2SourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Database query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'Db2Source'.
	Type string `pulumi:"type"`
}

// A copy activity source for Db2 databases.
type Db2SourceResponseOutput struct{ *pulumi.OutputState }

func (Db2SourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Db2SourceResponse)(nil)).Elem()
}

func (o Db2SourceResponseOutput) ToDb2SourceResponseOutput() Db2SourceResponseOutput {
	return o
}

func (o Db2SourceResponseOutput) ToDb2SourceResponseOutputWithContext(ctx context.Context) Db2SourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o Db2SourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2SourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o Db2SourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2SourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o Db2SourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2SourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Database query. Type: string (or Expression with resultType string).
func (o Db2SourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2SourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o Db2SourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2SourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o Db2SourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2SourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o Db2SourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2SourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'Db2Source'.
func (o Db2SourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Db2SourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Db2 table dataset.
type Db2TableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The Db2 table name. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'Db2Table'.
	Type string `pulumi:"type"`
}

// Db2TableDatasetInput is an input type that accepts Db2TableDatasetArgs and Db2TableDatasetOutput values.
// You can construct a concrete instance of `Db2TableDatasetInput` via:
//
//	Db2TableDatasetArgs{...}
type Db2TableDatasetInput interface {
	pulumi.Input

	ToDb2TableDatasetOutput() Db2TableDatasetOutput
	ToDb2TableDatasetOutputWithContext(context.Context) Db2TableDatasetOutput
}

// The Db2 table dataset.
type Db2TableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The Db2 table name. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'Db2Table'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (Db2TableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Db2TableDataset)(nil)).Elem()
}

func (i Db2TableDatasetArgs) ToDb2TableDatasetOutput() Db2TableDatasetOutput {
	return i.ToDb2TableDatasetOutputWithContext(context.Background())
}

func (i Db2TableDatasetArgs) ToDb2TableDatasetOutputWithContext(ctx context.Context) Db2TableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Db2TableDatasetOutput)
}

// The Db2 table dataset.
type Db2TableDatasetOutput struct{ *pulumi.OutputState }

func (Db2TableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Db2TableDataset)(nil)).Elem()
}

func (o Db2TableDatasetOutput) ToDb2TableDatasetOutput() Db2TableDatasetOutput {
	return o
}

func (o Db2TableDatasetOutput) ToDb2TableDatasetOutputWithContext(ctx context.Context) Db2TableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o Db2TableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v Db2TableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o Db2TableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Db2TableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o Db2TableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v Db2TableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o Db2TableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v Db2TableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o Db2TableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v Db2TableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o Db2TableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2TableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o Db2TableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2TableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The Db2 table name. Type: string (or Expression with resultType string).
func (o Db2TableDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2TableDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o Db2TableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2TableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'Db2Table'.
func (o Db2TableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Db2TableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Db2 table dataset.
type Db2TableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The Db2 table name. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'Db2Table'.
	Type string `pulumi:"type"`
}

// The Db2 table dataset.
type Db2TableDatasetResponseOutput struct{ *pulumi.OutputState }

func (Db2TableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Db2TableDatasetResponse)(nil)).Elem()
}

func (o Db2TableDatasetResponseOutput) ToDb2TableDatasetResponseOutput() Db2TableDatasetResponseOutput {
	return o
}

func (o Db2TableDatasetResponseOutput) ToDb2TableDatasetResponseOutputWithContext(ctx context.Context) Db2TableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o Db2TableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v Db2TableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o Db2TableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Db2TableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o Db2TableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v Db2TableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o Db2TableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v Db2TableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o Db2TableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v Db2TableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o Db2TableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2TableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o Db2TableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2TableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The Db2 table name. Type: string (or Expression with resultType string).
func (o Db2TableDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2TableDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o Db2TableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v Db2TableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'Db2Table'.
func (o Db2TableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Db2TableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Delete activity.
type DeleteActivity struct {
	// Delete activity dataset reference.
	Dataset DatasetReference `pulumi:"dataset"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Whether to record detailed logs of delete-activity execution. Default value is false. Type: boolean (or Expression with resultType boolean).
	EnableLogging interface{} `pulumi:"enableLogging"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Log storage settings customer need to provide when enableLogging is true.
	LogStorageSettings *LogStorageSettings `pulumi:"logStorageSettings"`
	// The max concurrent connections to connect data source at the same time.
	MaxConcurrentConnections *int `pulumi:"maxConcurrentConnections"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// If true, files or sub-folders under current folder path will be deleted recursively. Default is false. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Delete activity store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Type of activity.
	// Expected value is 'Delete'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// DeleteActivityInput is an input type that accepts DeleteActivityArgs and DeleteActivityOutput values.
// You can construct a concrete instance of `DeleteActivityInput` via:
//
//	DeleteActivityArgs{...}
type DeleteActivityInput interface {
	pulumi.Input

	ToDeleteActivityOutput() DeleteActivityOutput
	ToDeleteActivityOutputWithContext(context.Context) DeleteActivityOutput
}

// Delete activity.
type DeleteActivityArgs struct {
	// Delete activity dataset reference.
	Dataset DatasetReferenceInput `pulumi:"dataset"`
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Whether to record detailed logs of delete-activity execution. Default value is false. Type: boolean (or Expression with resultType boolean).
	EnableLogging pulumi.Input `pulumi:"enableLogging"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferencePtrInput `pulumi:"linkedServiceName"`
	// Log storage settings customer need to provide when enableLogging is true.
	LogStorageSettings LogStorageSettingsPtrInput `pulumi:"logStorageSettings"`
	// The max concurrent connections to connect data source at the same time.
	MaxConcurrentConnections pulumi.IntPtrInput `pulumi:"maxConcurrentConnections"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs pulumi.StringPtrInput `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy ActivityPolicyPtrInput `pulumi:"policy"`
	// If true, files or sub-folders under current folder path will be deleted recursively. Default is false. Type: boolean (or Expression with resultType boolean).
	Recursive pulumi.Input `pulumi:"recursive"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Delete activity store settings.
	StoreSettings pulumi.Input `pulumi:"storeSettings"`
	// Type of activity.
	// Expected value is 'Delete'.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
}

func (DeleteActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeleteActivity)(nil)).Elem()
}

func (i DeleteActivityArgs) ToDeleteActivityOutput() DeleteActivityOutput {
	return i.ToDeleteActivityOutputWithContext(context.Background())
}

func (i DeleteActivityArgs) ToDeleteActivityOutputWithContext(ctx context.Context) DeleteActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeleteActivityOutput)
}

// Delete activity.
type DeleteActivityOutput struct{ *pulumi.OutputState }

func (DeleteActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeleteActivity)(nil)).Elem()
}

func (o DeleteActivityOutput) ToDeleteActivityOutput() DeleteActivityOutput {
	return o
}

func (o DeleteActivityOutput) ToDeleteActivityOutputWithContext(ctx context.Context) DeleteActivityOutput {
	return o
}

// Delete activity dataset reference.
func (o DeleteActivityOutput) Dataset() DatasetReferenceOutput {
	return o.ApplyT(func(v DeleteActivity) DatasetReference { return v.Dataset }).(DatasetReferenceOutput)
}

// Activity depends on condition.
func (o DeleteActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v DeleteActivity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o DeleteActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeleteActivity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether to record detailed logs of delete-activity execution. Default value is false. Type: boolean (or Expression with resultType boolean).
func (o DeleteActivityOutput) EnableLogging() pulumi.AnyOutput {
	return o.ApplyT(func(v DeleteActivity) interface{} { return v.EnableLogging }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o DeleteActivityOutput) LinkedServiceName() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v DeleteActivity) *LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferencePtrOutput)
}

// Log storage settings customer need to provide when enableLogging is true.
func (o DeleteActivityOutput) LogStorageSettings() LogStorageSettingsPtrOutput {
	return o.ApplyT(func(v DeleteActivity) *LogStorageSettings { return v.LogStorageSettings }).(LogStorageSettingsPtrOutput)
}

// The max concurrent connections to connect data source at the same time.
func (o DeleteActivityOutput) MaxConcurrentConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeleteActivity) *int { return v.MaxConcurrentConnections }).(pulumi.IntPtrOutput)
}

// Activity name.
func (o DeleteActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DeleteActivity) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o DeleteActivityOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeleteActivity) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o DeleteActivityOutput) Policy() ActivityPolicyPtrOutput {
	return o.ApplyT(func(v DeleteActivity) *ActivityPolicy { return v.Policy }).(ActivityPolicyPtrOutput)
}

// If true, files or sub-folders under current folder path will be deleted recursively. Default is false. Type: boolean (or Expression with resultType boolean).
func (o DeleteActivityOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v DeleteActivity) interface{} { return v.Recursive }).(pulumi.AnyOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o DeleteActivityOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeleteActivity) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Delete activity store settings.
func (o DeleteActivityOutput) StoreSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v DeleteActivity) interface{} { return v.StoreSettings }).(pulumi.AnyOutput)
}

// Type of activity.
// Expected value is 'Delete'.
func (o DeleteActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DeleteActivity) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o DeleteActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v DeleteActivity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

// Delete activity.
type DeleteActivityResponse struct {
	// Delete activity dataset reference.
	Dataset DatasetReferenceResponse `pulumi:"dataset"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Whether to record detailed logs of delete-activity execution. Default value is false. Type: boolean (or Expression with resultType boolean).
	EnableLogging interface{} `pulumi:"enableLogging"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Log storage settings customer need to provide when enableLogging is true.
	LogStorageSettings *LogStorageSettingsResponse `pulumi:"logStorageSettings"`
	// The max concurrent connections to connect data source at the same time.
	MaxConcurrentConnections *int `pulumi:"maxConcurrentConnections"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// If true, files or sub-folders under current folder path will be deleted recursively. Default is false. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Delete activity store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Type of activity.
	// Expected value is 'Delete'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Delete activity.
type DeleteActivityResponseOutput struct{ *pulumi.OutputState }

func (DeleteActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeleteActivityResponse)(nil)).Elem()
}

func (o DeleteActivityResponseOutput) ToDeleteActivityResponseOutput() DeleteActivityResponseOutput {
	return o
}

func (o DeleteActivityResponseOutput) ToDeleteActivityResponseOutputWithContext(ctx context.Context) DeleteActivityResponseOutput {
	return o
}

// Delete activity dataset reference.
func (o DeleteActivityResponseOutput) Dataset() DatasetReferenceResponseOutput {
	return o.ApplyT(func(v DeleteActivityResponse) DatasetReferenceResponse { return v.Dataset }).(DatasetReferenceResponseOutput)
}

// Activity depends on condition.
func (o DeleteActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v DeleteActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o DeleteActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeleteActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether to record detailed logs of delete-activity execution. Default value is false. Type: boolean (or Expression with resultType boolean).
func (o DeleteActivityResponseOutput) EnableLogging() pulumi.AnyOutput {
	return o.ApplyT(func(v DeleteActivityResponse) interface{} { return v.EnableLogging }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o DeleteActivityResponseOutput) LinkedServiceName() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v DeleteActivityResponse) *LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponsePtrOutput)
}

// Log storage settings customer need to provide when enableLogging is true.
func (o DeleteActivityResponseOutput) LogStorageSettings() LogStorageSettingsResponsePtrOutput {
	return o.ApplyT(func(v DeleteActivityResponse) *LogStorageSettingsResponse { return v.LogStorageSettings }).(LogStorageSettingsResponsePtrOutput)
}

// The max concurrent connections to connect data source at the same time.
func (o DeleteActivityResponseOutput) MaxConcurrentConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeleteActivityResponse) *int { return v.MaxConcurrentConnections }).(pulumi.IntPtrOutput)
}

// Activity name.
func (o DeleteActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DeleteActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o DeleteActivityResponseOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeleteActivityResponse) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o DeleteActivityResponseOutput) Policy() ActivityPolicyResponsePtrOutput {
	return o.ApplyT(func(v DeleteActivityResponse) *ActivityPolicyResponse { return v.Policy }).(ActivityPolicyResponsePtrOutput)
}

// If true, files or sub-folders under current folder path will be deleted recursively. Default is false. Type: boolean (or Expression with resultType boolean).
func (o DeleteActivityResponseOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v DeleteActivityResponse) interface{} { return v.Recursive }).(pulumi.AnyOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o DeleteActivityResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeleteActivityResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Delete activity store settings.
func (o DeleteActivityResponseOutput) StoreSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v DeleteActivityResponse) interface{} { return v.StoreSettings }).(pulumi.AnyOutput)
}

// Type of activity.
// Expected value is 'Delete'.
func (o DeleteActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DeleteActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o DeleteActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v DeleteActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

// Delimited text dataset.
type DelimitedTextDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The column delimiter. Type: string (or Expression with resultType string).
	ColumnDelimiter interface{} `pulumi:"columnDelimiter"`
	// The data compressionCodec. Type: string (or Expression with resultType string).
	CompressionCodec interface{} `pulumi:"compressionCodec"`
	// The data compression method used for DelimitedText.
	CompressionLevel interface{} `pulumi:"compressionLevel"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The code page name of the preferred encoding. If miss, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
	EncodingName interface{} `pulumi:"encodingName"`
	// The escape character. Type: string (or Expression with resultType string).
	EscapeChar interface{} `pulumi:"escapeChar"`
	// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
	FirstRowAsHeader interface{} `pulumi:"firstRowAsHeader"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The location of the delimited text storage.
	Location interface{} `pulumi:"location"`
	// The null value string. Type: string (or Expression with resultType string).
	NullValue interface{} `pulumi:"nullValue"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The quote character. Type: string (or Expression with resultType string).
	QuoteChar interface{} `pulumi:"quoteChar"`
	// The row delimiter. Type: string (or Expression with resultType string).
	RowDelimiter interface{} `pulumi:"rowDelimiter"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'DelimitedText'.
	Type string `pulumi:"type"`
}

// DelimitedTextDatasetInput is an input type that accepts DelimitedTextDatasetArgs and DelimitedTextDatasetOutput values.
// You can construct a concrete instance of `DelimitedTextDatasetInput` via:
//
//	DelimitedTextDatasetArgs{...}
type DelimitedTextDatasetInput interface {
	pulumi.Input

	ToDelimitedTextDatasetOutput() DelimitedTextDatasetOutput
	ToDelimitedTextDatasetOutputWithContext(context.Context) DelimitedTextDatasetOutput
}

// Delimited text dataset.
type DelimitedTextDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The column delimiter. Type: string (or Expression with resultType string).
	ColumnDelimiter pulumi.Input `pulumi:"columnDelimiter"`
	// The data compressionCodec. Type: string (or Expression with resultType string).
	CompressionCodec pulumi.Input `pulumi:"compressionCodec"`
	// The data compression method used for DelimitedText.
	CompressionLevel pulumi.Input `pulumi:"compressionLevel"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The code page name of the preferred encoding. If miss, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
	EncodingName pulumi.Input `pulumi:"encodingName"`
	// The escape character. Type: string (or Expression with resultType string).
	EscapeChar pulumi.Input `pulumi:"escapeChar"`
	// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
	FirstRowAsHeader pulumi.Input `pulumi:"firstRowAsHeader"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// The location of the delimited text storage.
	Location pulumi.Input `pulumi:"location"`
	// The null value string. Type: string (or Expression with resultType string).
	NullValue pulumi.Input `pulumi:"nullValue"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The quote character. Type: string (or Expression with resultType string).
	QuoteChar pulumi.Input `pulumi:"quoteChar"`
	// The row delimiter. Type: string (or Expression with resultType string).
	RowDelimiter pulumi.Input `pulumi:"rowDelimiter"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'DelimitedText'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DelimitedTextDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DelimitedTextDataset)(nil)).Elem()
}

func (i DelimitedTextDatasetArgs) ToDelimitedTextDatasetOutput() DelimitedTextDatasetOutput {
	return i.ToDelimitedTextDatasetOutputWithContext(context.Background())
}

func (i DelimitedTextDatasetArgs) ToDelimitedTextDatasetOutputWithContext(ctx context.Context) DelimitedTextDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DelimitedTextDatasetOutput)
}

// Delimited text dataset.
type DelimitedTextDatasetOutput struct{ *pulumi.OutputState }

func (DelimitedTextDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DelimitedTextDataset)(nil)).Elem()
}

func (o DelimitedTextDatasetOutput) ToDelimitedTextDatasetOutput() DelimitedTextDatasetOutput {
	return o
}

func (o DelimitedTextDatasetOutput) ToDelimitedTextDatasetOutputWithContext(ctx context.Context) DelimitedTextDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o DelimitedTextDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v DelimitedTextDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The column delimiter. Type: string (or Expression with resultType string).
func (o DelimitedTextDatasetOutput) ColumnDelimiter() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextDataset) interface{} { return v.ColumnDelimiter }).(pulumi.AnyOutput)
}

// The data compressionCodec. Type: string (or Expression with resultType string).
func (o DelimitedTextDatasetOutput) CompressionCodec() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextDataset) interface{} { return v.CompressionCodec }).(pulumi.AnyOutput)
}

// The data compression method used for DelimitedText.
func (o DelimitedTextDatasetOutput) CompressionLevel() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextDataset) interface{} { return v.CompressionLevel }).(pulumi.AnyOutput)
}

// Dataset description.
func (o DelimitedTextDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DelimitedTextDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The code page name of the preferred encoding. If miss, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
func (o DelimitedTextDatasetOutput) EncodingName() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextDataset) interface{} { return v.EncodingName }).(pulumi.AnyOutput)
}

// The escape character. Type: string (or Expression with resultType string).
func (o DelimitedTextDatasetOutput) EscapeChar() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextDataset) interface{} { return v.EscapeChar }).(pulumi.AnyOutput)
}

// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
func (o DelimitedTextDatasetOutput) FirstRowAsHeader() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextDataset) interface{} { return v.FirstRowAsHeader }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o DelimitedTextDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v DelimitedTextDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o DelimitedTextDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v DelimitedTextDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// The location of the delimited text storage.
func (o DelimitedTextDatasetOutput) Location() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextDataset) interface{} { return v.Location }).(pulumi.AnyOutput)
}

// The null value string. Type: string (or Expression with resultType string).
func (o DelimitedTextDatasetOutput) NullValue() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextDataset) interface{} { return v.NullValue }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o DelimitedTextDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v DelimitedTextDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The quote character. Type: string (or Expression with resultType string).
func (o DelimitedTextDatasetOutput) QuoteChar() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextDataset) interface{} { return v.QuoteChar }).(pulumi.AnyOutput)
}

// The row delimiter. Type: string (or Expression with resultType string).
func (o DelimitedTextDatasetOutput) RowDelimiter() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextDataset) interface{} { return v.RowDelimiter }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o DelimitedTextDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o DelimitedTextDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'DelimitedText'.
func (o DelimitedTextDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DelimitedTextDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Delimited text dataset.
type DelimitedTextDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The column delimiter. Type: string (or Expression with resultType string).
	ColumnDelimiter interface{} `pulumi:"columnDelimiter"`
	// The data compressionCodec. Type: string (or Expression with resultType string).
	CompressionCodec interface{} `pulumi:"compressionCodec"`
	// The data compression method used for DelimitedText.
	CompressionLevel interface{} `pulumi:"compressionLevel"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The code page name of the preferred encoding. If miss, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
	EncodingName interface{} `pulumi:"encodingName"`
	// The escape character. Type: string (or Expression with resultType string).
	EscapeChar interface{} `pulumi:"escapeChar"`
	// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
	FirstRowAsHeader interface{} `pulumi:"firstRowAsHeader"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The location of the delimited text storage.
	Location interface{} `pulumi:"location"`
	// The null value string. Type: string (or Expression with resultType string).
	NullValue interface{} `pulumi:"nullValue"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The quote character. Type: string (or Expression with resultType string).
	QuoteChar interface{} `pulumi:"quoteChar"`
	// The row delimiter. Type: string (or Expression with resultType string).
	RowDelimiter interface{} `pulumi:"rowDelimiter"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'DelimitedText'.
	Type string `pulumi:"type"`
}

// Delimited text dataset.
type DelimitedTextDatasetResponseOutput struct{ *pulumi.OutputState }

func (DelimitedTextDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DelimitedTextDatasetResponse)(nil)).Elem()
}

func (o DelimitedTextDatasetResponseOutput) ToDelimitedTextDatasetResponseOutput() DelimitedTextDatasetResponseOutput {
	return o
}

func (o DelimitedTextDatasetResponseOutput) ToDelimitedTextDatasetResponseOutputWithContext(ctx context.Context) DelimitedTextDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o DelimitedTextDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v DelimitedTextDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The column delimiter. Type: string (or Expression with resultType string).
func (o DelimitedTextDatasetResponseOutput) ColumnDelimiter() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextDatasetResponse) interface{} { return v.ColumnDelimiter }).(pulumi.AnyOutput)
}

// The data compressionCodec. Type: string (or Expression with resultType string).
func (o DelimitedTextDatasetResponseOutput) CompressionCodec() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextDatasetResponse) interface{} { return v.CompressionCodec }).(pulumi.AnyOutput)
}

// The data compression method used for DelimitedText.
func (o DelimitedTextDatasetResponseOutput) CompressionLevel() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextDatasetResponse) interface{} { return v.CompressionLevel }).(pulumi.AnyOutput)
}

// Dataset description.
func (o DelimitedTextDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DelimitedTextDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The code page name of the preferred encoding. If miss, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
func (o DelimitedTextDatasetResponseOutput) EncodingName() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextDatasetResponse) interface{} { return v.EncodingName }).(pulumi.AnyOutput)
}

// The escape character. Type: string (or Expression with resultType string).
func (o DelimitedTextDatasetResponseOutput) EscapeChar() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextDatasetResponse) interface{} { return v.EscapeChar }).(pulumi.AnyOutput)
}

// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
func (o DelimitedTextDatasetResponseOutput) FirstRowAsHeader() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextDatasetResponse) interface{} { return v.FirstRowAsHeader }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o DelimitedTextDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v DelimitedTextDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o DelimitedTextDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v DelimitedTextDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// The location of the delimited text storage.
func (o DelimitedTextDatasetResponseOutput) Location() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextDatasetResponse) interface{} { return v.Location }).(pulumi.AnyOutput)
}

// The null value string. Type: string (or Expression with resultType string).
func (o DelimitedTextDatasetResponseOutput) NullValue() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextDatasetResponse) interface{} { return v.NullValue }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o DelimitedTextDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v DelimitedTextDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The quote character. Type: string (or Expression with resultType string).
func (o DelimitedTextDatasetResponseOutput) QuoteChar() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextDatasetResponse) interface{} { return v.QuoteChar }).(pulumi.AnyOutput)
}

// The row delimiter. Type: string (or Expression with resultType string).
func (o DelimitedTextDatasetResponseOutput) RowDelimiter() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextDatasetResponse) interface{} { return v.RowDelimiter }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o DelimitedTextDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o DelimitedTextDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'DelimitedText'.
func (o DelimitedTextDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DelimitedTextDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Delimited text read settings.
type DelimitedTextReadSettings struct {
	// Compression settings.
	CompressionProperties interface{} `pulumi:"compressionProperties"`
	// Indicates the number of non-empty rows to skip when reading data from input files. Type: integer (or Expression with resultType integer).
	SkipLineCount interface{} `pulumi:"skipLineCount"`
	// The read setting type.
	// Expected value is 'DelimitedTextReadSettings'.
	Type string `pulumi:"type"`
}

// DelimitedTextReadSettingsInput is an input type that accepts DelimitedTextReadSettingsArgs and DelimitedTextReadSettingsOutput values.
// You can construct a concrete instance of `DelimitedTextReadSettingsInput` via:
//
//	DelimitedTextReadSettingsArgs{...}
type DelimitedTextReadSettingsInput interface {
	pulumi.Input

	ToDelimitedTextReadSettingsOutput() DelimitedTextReadSettingsOutput
	ToDelimitedTextReadSettingsOutputWithContext(context.Context) DelimitedTextReadSettingsOutput
}

// Delimited text read settings.
type DelimitedTextReadSettingsArgs struct {
	// Compression settings.
	CompressionProperties pulumi.Input `pulumi:"compressionProperties"`
	// Indicates the number of non-empty rows to skip when reading data from input files. Type: integer (or Expression with resultType integer).
	SkipLineCount pulumi.Input `pulumi:"skipLineCount"`
	// The read setting type.
	// Expected value is 'DelimitedTextReadSettings'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DelimitedTextReadSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DelimitedTextReadSettings)(nil)).Elem()
}

func (i DelimitedTextReadSettingsArgs) ToDelimitedTextReadSettingsOutput() DelimitedTextReadSettingsOutput {
	return i.ToDelimitedTextReadSettingsOutputWithContext(context.Background())
}

func (i DelimitedTextReadSettingsArgs) ToDelimitedTextReadSettingsOutputWithContext(ctx context.Context) DelimitedTextReadSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DelimitedTextReadSettingsOutput)
}

func (i DelimitedTextReadSettingsArgs) ToDelimitedTextReadSettingsPtrOutput() DelimitedTextReadSettingsPtrOutput {
	return i.ToDelimitedTextReadSettingsPtrOutputWithContext(context.Background())
}

func (i DelimitedTextReadSettingsArgs) ToDelimitedTextReadSettingsPtrOutputWithContext(ctx context.Context) DelimitedTextReadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DelimitedTextReadSettingsOutput).ToDelimitedTextReadSettingsPtrOutputWithContext(ctx)
}

// DelimitedTextReadSettingsPtrInput is an input type that accepts DelimitedTextReadSettingsArgs, DelimitedTextReadSettingsPtr and DelimitedTextReadSettingsPtrOutput values.
// You can construct a concrete instance of `DelimitedTextReadSettingsPtrInput` via:
//
//	        DelimitedTextReadSettingsArgs{...}
//
//	or:
//
//	        nil
type DelimitedTextReadSettingsPtrInput interface {
	pulumi.Input

	ToDelimitedTextReadSettingsPtrOutput() DelimitedTextReadSettingsPtrOutput
	ToDelimitedTextReadSettingsPtrOutputWithContext(context.Context) DelimitedTextReadSettingsPtrOutput
}

type delimitedTextReadSettingsPtrType DelimitedTextReadSettingsArgs

func DelimitedTextReadSettingsPtr(v *DelimitedTextReadSettingsArgs) DelimitedTextReadSettingsPtrInput {
	return (*delimitedTextReadSettingsPtrType)(v)
}

func (*delimitedTextReadSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DelimitedTextReadSettings)(nil)).Elem()
}

func (i *delimitedTextReadSettingsPtrType) ToDelimitedTextReadSettingsPtrOutput() DelimitedTextReadSettingsPtrOutput {
	return i.ToDelimitedTextReadSettingsPtrOutputWithContext(context.Background())
}

func (i *delimitedTextReadSettingsPtrType) ToDelimitedTextReadSettingsPtrOutputWithContext(ctx context.Context) DelimitedTextReadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DelimitedTextReadSettingsPtrOutput)
}

// Delimited text read settings.
type DelimitedTextReadSettingsOutput struct{ *pulumi.OutputState }

func (DelimitedTextReadSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DelimitedTextReadSettings)(nil)).Elem()
}

func (o DelimitedTextReadSettingsOutput) ToDelimitedTextReadSettingsOutput() DelimitedTextReadSettingsOutput {
	return o
}

func (o DelimitedTextReadSettingsOutput) ToDelimitedTextReadSettingsOutputWithContext(ctx context.Context) DelimitedTextReadSettingsOutput {
	return o
}

func (o DelimitedTextReadSettingsOutput) ToDelimitedTextReadSettingsPtrOutput() DelimitedTextReadSettingsPtrOutput {
	return o.ToDelimitedTextReadSettingsPtrOutputWithContext(context.Background())
}

func (o DelimitedTextReadSettingsOutput) ToDelimitedTextReadSettingsPtrOutputWithContext(ctx context.Context) DelimitedTextReadSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DelimitedTextReadSettings) *DelimitedTextReadSettings {
		return &v
	}).(DelimitedTextReadSettingsPtrOutput)
}

// Compression settings.
func (o DelimitedTextReadSettingsOutput) CompressionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextReadSettings) interface{} { return v.CompressionProperties }).(pulumi.AnyOutput)
}

// Indicates the number of non-empty rows to skip when reading data from input files. Type: integer (or Expression with resultType integer).
func (o DelimitedTextReadSettingsOutput) SkipLineCount() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextReadSettings) interface{} { return v.SkipLineCount }).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'DelimitedTextReadSettings'.
func (o DelimitedTextReadSettingsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DelimitedTextReadSettings) string { return v.Type }).(pulumi.StringOutput)
}

type DelimitedTextReadSettingsPtrOutput struct{ *pulumi.OutputState }

func (DelimitedTextReadSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DelimitedTextReadSettings)(nil)).Elem()
}

func (o DelimitedTextReadSettingsPtrOutput) ToDelimitedTextReadSettingsPtrOutput() DelimitedTextReadSettingsPtrOutput {
	return o
}

func (o DelimitedTextReadSettingsPtrOutput) ToDelimitedTextReadSettingsPtrOutputWithContext(ctx context.Context) DelimitedTextReadSettingsPtrOutput {
	return o
}

func (o DelimitedTextReadSettingsPtrOutput) Elem() DelimitedTextReadSettingsOutput {
	return o.ApplyT(func(v *DelimitedTextReadSettings) DelimitedTextReadSettings {
		if v != nil {
			return *v
		}
		var ret DelimitedTextReadSettings
		return ret
	}).(DelimitedTextReadSettingsOutput)
}

// Compression settings.
func (o DelimitedTextReadSettingsPtrOutput) CompressionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v *DelimitedTextReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.CompressionProperties
	}).(pulumi.AnyOutput)
}

// Indicates the number of non-empty rows to skip when reading data from input files. Type: integer (or Expression with resultType integer).
func (o DelimitedTextReadSettingsPtrOutput) SkipLineCount() pulumi.AnyOutput {
	return o.ApplyT(func(v *DelimitedTextReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.SkipLineCount
	}).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'DelimitedTextReadSettings'.
func (o DelimitedTextReadSettingsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DelimitedTextReadSettings) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Delimited text read settings.
type DelimitedTextReadSettingsResponse struct {
	// Compression settings.
	CompressionProperties interface{} `pulumi:"compressionProperties"`
	// Indicates the number of non-empty rows to skip when reading data from input files. Type: integer (or Expression with resultType integer).
	SkipLineCount interface{} `pulumi:"skipLineCount"`
	// The read setting type.
	// Expected value is 'DelimitedTextReadSettings'.
	Type string `pulumi:"type"`
}

// Delimited text read settings.
type DelimitedTextReadSettingsResponseOutput struct{ *pulumi.OutputState }

func (DelimitedTextReadSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DelimitedTextReadSettingsResponse)(nil)).Elem()
}

func (o DelimitedTextReadSettingsResponseOutput) ToDelimitedTextReadSettingsResponseOutput() DelimitedTextReadSettingsResponseOutput {
	return o
}

func (o DelimitedTextReadSettingsResponseOutput) ToDelimitedTextReadSettingsResponseOutputWithContext(ctx context.Context) DelimitedTextReadSettingsResponseOutput {
	return o
}

// Compression settings.
func (o DelimitedTextReadSettingsResponseOutput) CompressionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextReadSettingsResponse) interface{} { return v.CompressionProperties }).(pulumi.AnyOutput)
}

// Indicates the number of non-empty rows to skip when reading data from input files. Type: integer (or Expression with resultType integer).
func (o DelimitedTextReadSettingsResponseOutput) SkipLineCount() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextReadSettingsResponse) interface{} { return v.SkipLineCount }).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'DelimitedTextReadSettings'.
func (o DelimitedTextReadSettingsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DelimitedTextReadSettingsResponse) string { return v.Type }).(pulumi.StringOutput)
}

type DelimitedTextReadSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (DelimitedTextReadSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DelimitedTextReadSettingsResponse)(nil)).Elem()
}

func (o DelimitedTextReadSettingsResponsePtrOutput) ToDelimitedTextReadSettingsResponsePtrOutput() DelimitedTextReadSettingsResponsePtrOutput {
	return o
}

func (o DelimitedTextReadSettingsResponsePtrOutput) ToDelimitedTextReadSettingsResponsePtrOutputWithContext(ctx context.Context) DelimitedTextReadSettingsResponsePtrOutput {
	return o
}

func (o DelimitedTextReadSettingsResponsePtrOutput) Elem() DelimitedTextReadSettingsResponseOutput {
	return o.ApplyT(func(v *DelimitedTextReadSettingsResponse) DelimitedTextReadSettingsResponse {
		if v != nil {
			return *v
		}
		var ret DelimitedTextReadSettingsResponse
		return ret
	}).(DelimitedTextReadSettingsResponseOutput)
}

// Compression settings.
func (o DelimitedTextReadSettingsResponsePtrOutput) CompressionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v *DelimitedTextReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.CompressionProperties
	}).(pulumi.AnyOutput)
}

// Indicates the number of non-empty rows to skip when reading data from input files. Type: integer (or Expression with resultType integer).
func (o DelimitedTextReadSettingsResponsePtrOutput) SkipLineCount() pulumi.AnyOutput {
	return o.ApplyT(func(v *DelimitedTextReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.SkipLineCount
	}).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'DelimitedTextReadSettings'.
func (o DelimitedTextReadSettingsResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DelimitedTextReadSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// A copy activity DelimitedText sink.
type DelimitedTextSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// DelimitedText format settings.
	FormatSettings *DelimitedTextWriteSettings `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// DelimitedText store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy sink type.
	// Expected value is 'DelimitedTextSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// DelimitedTextSinkInput is an input type that accepts DelimitedTextSinkArgs and DelimitedTextSinkOutput values.
// You can construct a concrete instance of `DelimitedTextSinkInput` via:
//
//	DelimitedTextSinkArgs{...}
type DelimitedTextSinkInput interface {
	pulumi.Input

	ToDelimitedTextSinkOutput() DelimitedTextSinkOutput
	ToDelimitedTextSinkOutputWithContext(context.Context) DelimitedTextSinkOutput
}

// A copy activity DelimitedText sink.
type DelimitedTextSinkArgs struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// DelimitedText format settings.
	FormatSettings DelimitedTextWriteSettingsPtrInput `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount pulumi.Input `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait pulumi.Input `pulumi:"sinkRetryWait"`
	// DelimitedText store settings.
	StoreSettings pulumi.Input `pulumi:"storeSettings"`
	// Copy sink type.
	// Expected value is 'DelimitedTextSink'.
	Type pulumi.StringInput `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize pulumi.Input `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout pulumi.Input `pulumi:"writeBatchTimeout"`
}

func (DelimitedTextSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DelimitedTextSink)(nil)).Elem()
}

func (i DelimitedTextSinkArgs) ToDelimitedTextSinkOutput() DelimitedTextSinkOutput {
	return i.ToDelimitedTextSinkOutputWithContext(context.Background())
}

func (i DelimitedTextSinkArgs) ToDelimitedTextSinkOutputWithContext(ctx context.Context) DelimitedTextSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DelimitedTextSinkOutput)
}

// A copy activity DelimitedText sink.
type DelimitedTextSinkOutput struct{ *pulumi.OutputState }

func (DelimitedTextSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DelimitedTextSink)(nil)).Elem()
}

func (o DelimitedTextSinkOutput) ToDelimitedTextSinkOutput() DelimitedTextSinkOutput {
	return o
}

func (o DelimitedTextSinkOutput) ToDelimitedTextSinkOutputWithContext(ctx context.Context) DelimitedTextSinkOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o DelimitedTextSinkOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextSink) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// DelimitedText format settings.
func (o DelimitedTextSinkOutput) FormatSettings() DelimitedTextWriteSettingsPtrOutput {
	return o.ApplyT(func(v DelimitedTextSink) *DelimitedTextWriteSettings { return v.FormatSettings }).(DelimitedTextWriteSettingsPtrOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o DelimitedTextSinkOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextSink) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o DelimitedTextSinkOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextSink) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o DelimitedTextSinkOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextSink) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// DelimitedText store settings.
func (o DelimitedTextSinkOutput) StoreSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextSink) interface{} { return v.StoreSettings }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'DelimitedTextSink'.
func (o DelimitedTextSinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DelimitedTextSink) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o DelimitedTextSinkOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextSink) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o DelimitedTextSinkOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextSink) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity DelimitedText sink.
type DelimitedTextSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// DelimitedText format settings.
	FormatSettings *DelimitedTextWriteSettingsResponse `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// DelimitedText store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy sink type.
	// Expected value is 'DelimitedTextSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity DelimitedText sink.
type DelimitedTextSinkResponseOutput struct{ *pulumi.OutputState }

func (DelimitedTextSinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DelimitedTextSinkResponse)(nil)).Elem()
}

func (o DelimitedTextSinkResponseOutput) ToDelimitedTextSinkResponseOutput() DelimitedTextSinkResponseOutput {
	return o
}

func (o DelimitedTextSinkResponseOutput) ToDelimitedTextSinkResponseOutputWithContext(ctx context.Context) DelimitedTextSinkResponseOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o DelimitedTextSinkResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextSinkResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// DelimitedText format settings.
func (o DelimitedTextSinkResponseOutput) FormatSettings() DelimitedTextWriteSettingsResponsePtrOutput {
	return o.ApplyT(func(v DelimitedTextSinkResponse) *DelimitedTextWriteSettingsResponse { return v.FormatSettings }).(DelimitedTextWriteSettingsResponsePtrOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o DelimitedTextSinkResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextSinkResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o DelimitedTextSinkResponseOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextSinkResponse) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o DelimitedTextSinkResponseOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextSinkResponse) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// DelimitedText store settings.
func (o DelimitedTextSinkResponseOutput) StoreSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextSinkResponse) interface{} { return v.StoreSettings }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'DelimitedTextSink'.
func (o DelimitedTextSinkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DelimitedTextSinkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o DelimitedTextSinkResponseOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextSinkResponse) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o DelimitedTextSinkResponseOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextSinkResponse) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity DelimitedText source.
type DelimitedTextSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// DelimitedText format settings.
	FormatSettings *DelimitedTextReadSettings `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// DelimitedText store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'DelimitedTextSource'.
	Type string `pulumi:"type"`
}

// DelimitedTextSourceInput is an input type that accepts DelimitedTextSourceArgs and DelimitedTextSourceOutput values.
// You can construct a concrete instance of `DelimitedTextSourceInput` via:
//
//	DelimitedTextSourceArgs{...}
type DelimitedTextSourceInput interface {
	pulumi.Input

	ToDelimitedTextSourceOutput() DelimitedTextSourceOutput
	ToDelimitedTextSourceOutputWithContext(context.Context) DelimitedTextSourceOutput
}

// A copy activity DelimitedText source.
type DelimitedTextSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// DelimitedText format settings.
	FormatSettings DelimitedTextReadSettingsPtrInput `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// DelimitedText store settings.
	StoreSettings pulumi.Input `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'DelimitedTextSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DelimitedTextSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DelimitedTextSource)(nil)).Elem()
}

func (i DelimitedTextSourceArgs) ToDelimitedTextSourceOutput() DelimitedTextSourceOutput {
	return i.ToDelimitedTextSourceOutputWithContext(context.Background())
}

func (i DelimitedTextSourceArgs) ToDelimitedTextSourceOutputWithContext(ctx context.Context) DelimitedTextSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DelimitedTextSourceOutput)
}

// A copy activity DelimitedText source.
type DelimitedTextSourceOutput struct{ *pulumi.OutputState }

func (DelimitedTextSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DelimitedTextSource)(nil)).Elem()
}

func (o DelimitedTextSourceOutput) ToDelimitedTextSourceOutput() DelimitedTextSourceOutput {
	return o
}

func (o DelimitedTextSourceOutput) ToDelimitedTextSourceOutputWithContext(ctx context.Context) DelimitedTextSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o DelimitedTextSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o DelimitedTextSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// DelimitedText format settings.
func (o DelimitedTextSourceOutput) FormatSettings() DelimitedTextReadSettingsPtrOutput {
	return o.ApplyT(func(v DelimitedTextSource) *DelimitedTextReadSettings { return v.FormatSettings }).(DelimitedTextReadSettingsPtrOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o DelimitedTextSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o DelimitedTextSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o DelimitedTextSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// DelimitedText store settings.
func (o DelimitedTextSourceOutput) StoreSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextSource) interface{} { return v.StoreSettings }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'DelimitedTextSource'.
func (o DelimitedTextSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DelimitedTextSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity DelimitedText source.
type DelimitedTextSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// DelimitedText format settings.
	FormatSettings *DelimitedTextReadSettingsResponse `pulumi:"formatSettings"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// DelimitedText store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'DelimitedTextSource'.
	Type string `pulumi:"type"`
}

// A copy activity DelimitedText source.
type DelimitedTextSourceResponseOutput struct{ *pulumi.OutputState }

func (DelimitedTextSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DelimitedTextSourceResponse)(nil)).Elem()
}

func (o DelimitedTextSourceResponseOutput) ToDelimitedTextSourceResponseOutput() DelimitedTextSourceResponseOutput {
	return o
}

func (o DelimitedTextSourceResponseOutput) ToDelimitedTextSourceResponseOutputWithContext(ctx context.Context) DelimitedTextSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o DelimitedTextSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o DelimitedTextSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// DelimitedText format settings.
func (o DelimitedTextSourceResponseOutput) FormatSettings() DelimitedTextReadSettingsResponsePtrOutput {
	return o.ApplyT(func(v DelimitedTextSourceResponse) *DelimitedTextReadSettingsResponse { return v.FormatSettings }).(DelimitedTextReadSettingsResponsePtrOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o DelimitedTextSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o DelimitedTextSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o DelimitedTextSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// DelimitedText store settings.
func (o DelimitedTextSourceResponseOutput) StoreSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextSourceResponse) interface{} { return v.StoreSettings }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'DelimitedTextSource'.
func (o DelimitedTextSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DelimitedTextSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Delimited text write settings.
type DelimitedTextWriteSettings struct {
	// The file extension used to create the files. Type: string (or Expression with resultType string).
	FileExtension interface{} `pulumi:"fileExtension"`
	// Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
	FileNamePrefix interface{} `pulumi:"fileNamePrefix"`
	// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
	MaxRowsPerFile interface{} `pulumi:"maxRowsPerFile"`
	// Indicates whether string values should always be enclosed with quotes. Type: boolean (or Expression with resultType boolean).
	QuoteAllText interface{} `pulumi:"quoteAllText"`
	// The write setting type.
	// Expected value is 'DelimitedTextWriteSettings'.
	Type string `pulumi:"type"`
}

// DelimitedTextWriteSettingsInput is an input type that accepts DelimitedTextWriteSettingsArgs and DelimitedTextWriteSettingsOutput values.
// You can construct a concrete instance of `DelimitedTextWriteSettingsInput` via:
//
//	DelimitedTextWriteSettingsArgs{...}
type DelimitedTextWriteSettingsInput interface {
	pulumi.Input

	ToDelimitedTextWriteSettingsOutput() DelimitedTextWriteSettingsOutput
	ToDelimitedTextWriteSettingsOutputWithContext(context.Context) DelimitedTextWriteSettingsOutput
}

// Delimited text write settings.
type DelimitedTextWriteSettingsArgs struct {
	// The file extension used to create the files. Type: string (or Expression with resultType string).
	FileExtension pulumi.Input `pulumi:"fileExtension"`
	// Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
	FileNamePrefix pulumi.Input `pulumi:"fileNamePrefix"`
	// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
	MaxRowsPerFile pulumi.Input `pulumi:"maxRowsPerFile"`
	// Indicates whether string values should always be enclosed with quotes. Type: boolean (or Expression with resultType boolean).
	QuoteAllText pulumi.Input `pulumi:"quoteAllText"`
	// The write setting type.
	// Expected value is 'DelimitedTextWriteSettings'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DelimitedTextWriteSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DelimitedTextWriteSettings)(nil)).Elem()
}

func (i DelimitedTextWriteSettingsArgs) ToDelimitedTextWriteSettingsOutput() DelimitedTextWriteSettingsOutput {
	return i.ToDelimitedTextWriteSettingsOutputWithContext(context.Background())
}

func (i DelimitedTextWriteSettingsArgs) ToDelimitedTextWriteSettingsOutputWithContext(ctx context.Context) DelimitedTextWriteSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DelimitedTextWriteSettingsOutput)
}

func (i DelimitedTextWriteSettingsArgs) ToDelimitedTextWriteSettingsPtrOutput() DelimitedTextWriteSettingsPtrOutput {
	return i.ToDelimitedTextWriteSettingsPtrOutputWithContext(context.Background())
}

func (i DelimitedTextWriteSettingsArgs) ToDelimitedTextWriteSettingsPtrOutputWithContext(ctx context.Context) DelimitedTextWriteSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DelimitedTextWriteSettingsOutput).ToDelimitedTextWriteSettingsPtrOutputWithContext(ctx)
}

// DelimitedTextWriteSettingsPtrInput is an input type that accepts DelimitedTextWriteSettingsArgs, DelimitedTextWriteSettingsPtr and DelimitedTextWriteSettingsPtrOutput values.
// You can construct a concrete instance of `DelimitedTextWriteSettingsPtrInput` via:
//
//	        DelimitedTextWriteSettingsArgs{...}
//
//	or:
//
//	        nil
type DelimitedTextWriteSettingsPtrInput interface {
	pulumi.Input

	ToDelimitedTextWriteSettingsPtrOutput() DelimitedTextWriteSettingsPtrOutput
	ToDelimitedTextWriteSettingsPtrOutputWithContext(context.Context) DelimitedTextWriteSettingsPtrOutput
}

type delimitedTextWriteSettingsPtrType DelimitedTextWriteSettingsArgs

func DelimitedTextWriteSettingsPtr(v *DelimitedTextWriteSettingsArgs) DelimitedTextWriteSettingsPtrInput {
	return (*delimitedTextWriteSettingsPtrType)(v)
}

func (*delimitedTextWriteSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DelimitedTextWriteSettings)(nil)).Elem()
}

func (i *delimitedTextWriteSettingsPtrType) ToDelimitedTextWriteSettingsPtrOutput() DelimitedTextWriteSettingsPtrOutput {
	return i.ToDelimitedTextWriteSettingsPtrOutputWithContext(context.Background())
}

func (i *delimitedTextWriteSettingsPtrType) ToDelimitedTextWriteSettingsPtrOutputWithContext(ctx context.Context) DelimitedTextWriteSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DelimitedTextWriteSettingsPtrOutput)
}

// Delimited text write settings.
type DelimitedTextWriteSettingsOutput struct{ *pulumi.OutputState }

func (DelimitedTextWriteSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DelimitedTextWriteSettings)(nil)).Elem()
}

func (o DelimitedTextWriteSettingsOutput) ToDelimitedTextWriteSettingsOutput() DelimitedTextWriteSettingsOutput {
	return o
}

func (o DelimitedTextWriteSettingsOutput) ToDelimitedTextWriteSettingsOutputWithContext(ctx context.Context) DelimitedTextWriteSettingsOutput {
	return o
}

func (o DelimitedTextWriteSettingsOutput) ToDelimitedTextWriteSettingsPtrOutput() DelimitedTextWriteSettingsPtrOutput {
	return o.ToDelimitedTextWriteSettingsPtrOutputWithContext(context.Background())
}

func (o DelimitedTextWriteSettingsOutput) ToDelimitedTextWriteSettingsPtrOutputWithContext(ctx context.Context) DelimitedTextWriteSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DelimitedTextWriteSettings) *DelimitedTextWriteSettings {
		return &v
	}).(DelimitedTextWriteSettingsPtrOutput)
}

// The file extension used to create the files. Type: string (or Expression with resultType string).
func (o DelimitedTextWriteSettingsOutput) FileExtension() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextWriteSettings) interface{} { return v.FileExtension }).(pulumi.AnyOutput)
}

// Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
func (o DelimitedTextWriteSettingsOutput) FileNamePrefix() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextWriteSettings) interface{} { return v.FileNamePrefix }).(pulumi.AnyOutput)
}

// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
func (o DelimitedTextWriteSettingsOutput) MaxRowsPerFile() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextWriteSettings) interface{} { return v.MaxRowsPerFile }).(pulumi.AnyOutput)
}

// Indicates whether string values should always be enclosed with quotes. Type: boolean (or Expression with resultType boolean).
func (o DelimitedTextWriteSettingsOutput) QuoteAllText() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextWriteSettings) interface{} { return v.QuoteAllText }).(pulumi.AnyOutput)
}

// The write setting type.
// Expected value is 'DelimitedTextWriteSettings'.
func (o DelimitedTextWriteSettingsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DelimitedTextWriteSettings) string { return v.Type }).(pulumi.StringOutput)
}

type DelimitedTextWriteSettingsPtrOutput struct{ *pulumi.OutputState }

func (DelimitedTextWriteSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DelimitedTextWriteSettings)(nil)).Elem()
}

func (o DelimitedTextWriteSettingsPtrOutput) ToDelimitedTextWriteSettingsPtrOutput() DelimitedTextWriteSettingsPtrOutput {
	return o
}

func (o DelimitedTextWriteSettingsPtrOutput) ToDelimitedTextWriteSettingsPtrOutputWithContext(ctx context.Context) DelimitedTextWriteSettingsPtrOutput {
	return o
}

func (o DelimitedTextWriteSettingsPtrOutput) Elem() DelimitedTextWriteSettingsOutput {
	return o.ApplyT(func(v *DelimitedTextWriteSettings) DelimitedTextWriteSettings {
		if v != nil {
			return *v
		}
		var ret DelimitedTextWriteSettings
		return ret
	}).(DelimitedTextWriteSettingsOutput)
}

// The file extension used to create the files. Type: string (or Expression with resultType string).
func (o DelimitedTextWriteSettingsPtrOutput) FileExtension() pulumi.AnyOutput {
	return o.ApplyT(func(v *DelimitedTextWriteSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.FileExtension
	}).(pulumi.AnyOutput)
}

// Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
func (o DelimitedTextWriteSettingsPtrOutput) FileNamePrefix() pulumi.AnyOutput {
	return o.ApplyT(func(v *DelimitedTextWriteSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.FileNamePrefix
	}).(pulumi.AnyOutput)
}

// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
func (o DelimitedTextWriteSettingsPtrOutput) MaxRowsPerFile() pulumi.AnyOutput {
	return o.ApplyT(func(v *DelimitedTextWriteSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxRowsPerFile
	}).(pulumi.AnyOutput)
}

// Indicates whether string values should always be enclosed with quotes. Type: boolean (or Expression with resultType boolean).
func (o DelimitedTextWriteSettingsPtrOutput) QuoteAllText() pulumi.AnyOutput {
	return o.ApplyT(func(v *DelimitedTextWriteSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.QuoteAllText
	}).(pulumi.AnyOutput)
}

// The write setting type.
// Expected value is 'DelimitedTextWriteSettings'.
func (o DelimitedTextWriteSettingsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DelimitedTextWriteSettings) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Delimited text write settings.
type DelimitedTextWriteSettingsResponse struct {
	// The file extension used to create the files. Type: string (or Expression with resultType string).
	FileExtension interface{} `pulumi:"fileExtension"`
	// Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
	FileNamePrefix interface{} `pulumi:"fileNamePrefix"`
	// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
	MaxRowsPerFile interface{} `pulumi:"maxRowsPerFile"`
	// Indicates whether string values should always be enclosed with quotes. Type: boolean (or Expression with resultType boolean).
	QuoteAllText interface{} `pulumi:"quoteAllText"`
	// The write setting type.
	// Expected value is 'DelimitedTextWriteSettings'.
	Type string `pulumi:"type"`
}

// Delimited text write settings.
type DelimitedTextWriteSettingsResponseOutput struct{ *pulumi.OutputState }

func (DelimitedTextWriteSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DelimitedTextWriteSettingsResponse)(nil)).Elem()
}

func (o DelimitedTextWriteSettingsResponseOutput) ToDelimitedTextWriteSettingsResponseOutput() DelimitedTextWriteSettingsResponseOutput {
	return o
}

func (o DelimitedTextWriteSettingsResponseOutput) ToDelimitedTextWriteSettingsResponseOutputWithContext(ctx context.Context) DelimitedTextWriteSettingsResponseOutput {
	return o
}

// The file extension used to create the files. Type: string (or Expression with resultType string).
func (o DelimitedTextWriteSettingsResponseOutput) FileExtension() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextWriteSettingsResponse) interface{} { return v.FileExtension }).(pulumi.AnyOutput)
}

// Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
func (o DelimitedTextWriteSettingsResponseOutput) FileNamePrefix() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextWriteSettingsResponse) interface{} { return v.FileNamePrefix }).(pulumi.AnyOutput)
}

// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
func (o DelimitedTextWriteSettingsResponseOutput) MaxRowsPerFile() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextWriteSettingsResponse) interface{} { return v.MaxRowsPerFile }).(pulumi.AnyOutput)
}

// Indicates whether string values should always be enclosed with quotes. Type: boolean (or Expression with resultType boolean).
func (o DelimitedTextWriteSettingsResponseOutput) QuoteAllText() pulumi.AnyOutput {
	return o.ApplyT(func(v DelimitedTextWriteSettingsResponse) interface{} { return v.QuoteAllText }).(pulumi.AnyOutput)
}

// The write setting type.
// Expected value is 'DelimitedTextWriteSettings'.
func (o DelimitedTextWriteSettingsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DelimitedTextWriteSettingsResponse) string { return v.Type }).(pulumi.StringOutput)
}

type DelimitedTextWriteSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (DelimitedTextWriteSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DelimitedTextWriteSettingsResponse)(nil)).Elem()
}

func (o DelimitedTextWriteSettingsResponsePtrOutput) ToDelimitedTextWriteSettingsResponsePtrOutput() DelimitedTextWriteSettingsResponsePtrOutput {
	return o
}

func (o DelimitedTextWriteSettingsResponsePtrOutput) ToDelimitedTextWriteSettingsResponsePtrOutputWithContext(ctx context.Context) DelimitedTextWriteSettingsResponsePtrOutput {
	return o
}

func (o DelimitedTextWriteSettingsResponsePtrOutput) Elem() DelimitedTextWriteSettingsResponseOutput {
	return o.ApplyT(func(v *DelimitedTextWriteSettingsResponse) DelimitedTextWriteSettingsResponse {
		if v != nil {
			return *v
		}
		var ret DelimitedTextWriteSettingsResponse
		return ret
	}).(DelimitedTextWriteSettingsResponseOutput)
}

// The file extension used to create the files. Type: string (or Expression with resultType string).
func (o DelimitedTextWriteSettingsResponsePtrOutput) FileExtension() pulumi.AnyOutput {
	return o.ApplyT(func(v *DelimitedTextWriteSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.FileExtension
	}).(pulumi.AnyOutput)
}

// Specifies the file name pattern <fileNamePrefix>_<fileIndex>.<fileExtension> when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
func (o DelimitedTextWriteSettingsResponsePtrOutput) FileNamePrefix() pulumi.AnyOutput {
	return o.ApplyT(func(v *DelimitedTextWriteSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.FileNamePrefix
	}).(pulumi.AnyOutput)
}

// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
func (o DelimitedTextWriteSettingsResponsePtrOutput) MaxRowsPerFile() pulumi.AnyOutput {
	return o.ApplyT(func(v *DelimitedTextWriteSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxRowsPerFile
	}).(pulumi.AnyOutput)
}

// Indicates whether string values should always be enclosed with quotes. Type: boolean (or Expression with resultType boolean).
func (o DelimitedTextWriteSettingsResponsePtrOutput) QuoteAllText() pulumi.AnyOutput {
	return o.ApplyT(func(v *DelimitedTextWriteSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.QuoteAllText
	}).(pulumi.AnyOutput)
}

// The write setting type.
// Expected value is 'DelimitedTextWriteSettings'.
func (o DelimitedTextWriteSettingsResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DelimitedTextWriteSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Distcp settings.
type DistcpSettings struct {
	// Specifies the Distcp options. Type: string (or Expression with resultType string).
	DistcpOptions interface{} `pulumi:"distcpOptions"`
	// Specifies the Yarn ResourceManager endpoint. Type: string (or Expression with resultType string).
	ResourceManagerEndpoint interface{} `pulumi:"resourceManagerEndpoint"`
	// Specifies an existing folder path which will be used to store temp Distcp command script. The script file is generated by ADF and will be removed after Copy job finished. Type: string (or Expression with resultType string).
	TempScriptPath interface{} `pulumi:"tempScriptPath"`
}

// DistcpSettingsInput is an input type that accepts DistcpSettingsArgs and DistcpSettingsOutput values.
// You can construct a concrete instance of `DistcpSettingsInput` via:
//
//	DistcpSettingsArgs{...}
type DistcpSettingsInput interface {
	pulumi.Input

	ToDistcpSettingsOutput() DistcpSettingsOutput
	ToDistcpSettingsOutputWithContext(context.Context) DistcpSettingsOutput
}

// Distcp settings.
type DistcpSettingsArgs struct {
	// Specifies the Distcp options. Type: string (or Expression with resultType string).
	DistcpOptions pulumi.Input `pulumi:"distcpOptions"`
	// Specifies the Yarn ResourceManager endpoint. Type: string (or Expression with resultType string).
	ResourceManagerEndpoint pulumi.Input `pulumi:"resourceManagerEndpoint"`
	// Specifies an existing folder path which will be used to store temp Distcp command script. The script file is generated by ADF and will be removed after Copy job finished. Type: string (or Expression with resultType string).
	TempScriptPath pulumi.Input `pulumi:"tempScriptPath"`
}

func (DistcpSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DistcpSettings)(nil)).Elem()
}

func (i DistcpSettingsArgs) ToDistcpSettingsOutput() DistcpSettingsOutput {
	return i.ToDistcpSettingsOutputWithContext(context.Background())
}

func (i DistcpSettingsArgs) ToDistcpSettingsOutputWithContext(ctx context.Context) DistcpSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistcpSettingsOutput)
}

func (i DistcpSettingsArgs) ToDistcpSettingsPtrOutput() DistcpSettingsPtrOutput {
	return i.ToDistcpSettingsPtrOutputWithContext(context.Background())
}

func (i DistcpSettingsArgs) ToDistcpSettingsPtrOutputWithContext(ctx context.Context) DistcpSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistcpSettingsOutput).ToDistcpSettingsPtrOutputWithContext(ctx)
}

// DistcpSettingsPtrInput is an input type that accepts DistcpSettingsArgs, DistcpSettingsPtr and DistcpSettingsPtrOutput values.
// You can construct a concrete instance of `DistcpSettingsPtrInput` via:
//
//	        DistcpSettingsArgs{...}
//
//	or:
//
//	        nil
type DistcpSettingsPtrInput interface {
	pulumi.Input

	ToDistcpSettingsPtrOutput() DistcpSettingsPtrOutput
	ToDistcpSettingsPtrOutputWithContext(context.Context) DistcpSettingsPtrOutput
}

type distcpSettingsPtrType DistcpSettingsArgs

func DistcpSettingsPtr(v *DistcpSettingsArgs) DistcpSettingsPtrInput {
	return (*distcpSettingsPtrType)(v)
}

func (*distcpSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DistcpSettings)(nil)).Elem()
}

func (i *distcpSettingsPtrType) ToDistcpSettingsPtrOutput() DistcpSettingsPtrOutput {
	return i.ToDistcpSettingsPtrOutputWithContext(context.Background())
}

func (i *distcpSettingsPtrType) ToDistcpSettingsPtrOutputWithContext(ctx context.Context) DistcpSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistcpSettingsPtrOutput)
}

// Distcp settings.
type DistcpSettingsOutput struct{ *pulumi.OutputState }

func (DistcpSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistcpSettings)(nil)).Elem()
}

func (o DistcpSettingsOutput) ToDistcpSettingsOutput() DistcpSettingsOutput {
	return o
}

func (o DistcpSettingsOutput) ToDistcpSettingsOutputWithContext(ctx context.Context) DistcpSettingsOutput {
	return o
}

func (o DistcpSettingsOutput) ToDistcpSettingsPtrOutput() DistcpSettingsPtrOutput {
	return o.ToDistcpSettingsPtrOutputWithContext(context.Background())
}

func (o DistcpSettingsOutput) ToDistcpSettingsPtrOutputWithContext(ctx context.Context) DistcpSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DistcpSettings) *DistcpSettings {
		return &v
	}).(DistcpSettingsPtrOutput)
}

// Specifies the Distcp options. Type: string (or Expression with resultType string).
func (o DistcpSettingsOutput) DistcpOptions() pulumi.AnyOutput {
	return o.ApplyT(func(v DistcpSettings) interface{} { return v.DistcpOptions }).(pulumi.AnyOutput)
}

// Specifies the Yarn ResourceManager endpoint. Type: string (or Expression with resultType string).
func (o DistcpSettingsOutput) ResourceManagerEndpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v DistcpSettings) interface{} { return v.ResourceManagerEndpoint }).(pulumi.AnyOutput)
}

// Specifies an existing folder path which will be used to store temp Distcp command script. The script file is generated by ADF and will be removed after Copy job finished. Type: string (or Expression with resultType string).
func (o DistcpSettingsOutput) TempScriptPath() pulumi.AnyOutput {
	return o.ApplyT(func(v DistcpSettings) interface{} { return v.TempScriptPath }).(pulumi.AnyOutput)
}

type DistcpSettingsPtrOutput struct{ *pulumi.OutputState }

func (DistcpSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DistcpSettings)(nil)).Elem()
}

func (o DistcpSettingsPtrOutput) ToDistcpSettingsPtrOutput() DistcpSettingsPtrOutput {
	return o
}

func (o DistcpSettingsPtrOutput) ToDistcpSettingsPtrOutputWithContext(ctx context.Context) DistcpSettingsPtrOutput {
	return o
}

func (o DistcpSettingsPtrOutput) Elem() DistcpSettingsOutput {
	return o.ApplyT(func(v *DistcpSettings) DistcpSettings {
		if v != nil {
			return *v
		}
		var ret DistcpSettings
		return ret
	}).(DistcpSettingsOutput)
}

// Specifies the Distcp options. Type: string (or Expression with resultType string).
func (o DistcpSettingsPtrOutput) DistcpOptions() pulumi.AnyOutput {
	return o.ApplyT(func(v *DistcpSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.DistcpOptions
	}).(pulumi.AnyOutput)
}

// Specifies the Yarn ResourceManager endpoint. Type: string (or Expression with resultType string).
func (o DistcpSettingsPtrOutput) ResourceManagerEndpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v *DistcpSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.ResourceManagerEndpoint
	}).(pulumi.AnyOutput)
}

// Specifies an existing folder path which will be used to store temp Distcp command script. The script file is generated by ADF and will be removed after Copy job finished. Type: string (or Expression with resultType string).
func (o DistcpSettingsPtrOutput) TempScriptPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *DistcpSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.TempScriptPath
	}).(pulumi.AnyOutput)
}

// Distcp settings.
type DistcpSettingsResponse struct {
	// Specifies the Distcp options. Type: string (or Expression with resultType string).
	DistcpOptions interface{} `pulumi:"distcpOptions"`
	// Specifies the Yarn ResourceManager endpoint. Type: string (or Expression with resultType string).
	ResourceManagerEndpoint interface{} `pulumi:"resourceManagerEndpoint"`
	// Specifies an existing folder path which will be used to store temp Distcp command script. The script file is generated by ADF and will be removed after Copy job finished. Type: string (or Expression with resultType string).
	TempScriptPath interface{} `pulumi:"tempScriptPath"`
}

// Distcp settings.
type DistcpSettingsResponseOutput struct{ *pulumi.OutputState }

func (DistcpSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistcpSettingsResponse)(nil)).Elem()
}

func (o DistcpSettingsResponseOutput) ToDistcpSettingsResponseOutput() DistcpSettingsResponseOutput {
	return o
}

func (o DistcpSettingsResponseOutput) ToDistcpSettingsResponseOutputWithContext(ctx context.Context) DistcpSettingsResponseOutput {
	return o
}

// Specifies the Distcp options. Type: string (or Expression with resultType string).
func (o DistcpSettingsResponseOutput) DistcpOptions() pulumi.AnyOutput {
	return o.ApplyT(func(v DistcpSettingsResponse) interface{} { return v.DistcpOptions }).(pulumi.AnyOutput)
}

// Specifies the Yarn ResourceManager endpoint. Type: string (or Expression with resultType string).
func (o DistcpSettingsResponseOutput) ResourceManagerEndpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v DistcpSettingsResponse) interface{} { return v.ResourceManagerEndpoint }).(pulumi.AnyOutput)
}

// Specifies an existing folder path which will be used to store temp Distcp command script. The script file is generated by ADF and will be removed after Copy job finished. Type: string (or Expression with resultType string).
func (o DistcpSettingsResponseOutput) TempScriptPath() pulumi.AnyOutput {
	return o.ApplyT(func(v DistcpSettingsResponse) interface{} { return v.TempScriptPath }).(pulumi.AnyOutput)
}

type DistcpSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (DistcpSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DistcpSettingsResponse)(nil)).Elem()
}

func (o DistcpSettingsResponsePtrOutput) ToDistcpSettingsResponsePtrOutput() DistcpSettingsResponsePtrOutput {
	return o
}

func (o DistcpSettingsResponsePtrOutput) ToDistcpSettingsResponsePtrOutputWithContext(ctx context.Context) DistcpSettingsResponsePtrOutput {
	return o
}

func (o DistcpSettingsResponsePtrOutput) Elem() DistcpSettingsResponseOutput {
	return o.ApplyT(func(v *DistcpSettingsResponse) DistcpSettingsResponse {
		if v != nil {
			return *v
		}
		var ret DistcpSettingsResponse
		return ret
	}).(DistcpSettingsResponseOutput)
}

// Specifies the Distcp options. Type: string (or Expression with resultType string).
func (o DistcpSettingsResponsePtrOutput) DistcpOptions() pulumi.AnyOutput {
	return o.ApplyT(func(v *DistcpSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.DistcpOptions
	}).(pulumi.AnyOutput)
}

// Specifies the Yarn ResourceManager endpoint. Type: string (or Expression with resultType string).
func (o DistcpSettingsResponsePtrOutput) ResourceManagerEndpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v *DistcpSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.ResourceManagerEndpoint
	}).(pulumi.AnyOutput)
}

// Specifies an existing folder path which will be used to store temp Distcp command script. The script file is generated by ADF and will be removed after Copy job finished. Type: string (or Expression with resultType string).
func (o DistcpSettingsResponsePtrOutput) TempScriptPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *DistcpSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.TempScriptPath
	}).(pulumi.AnyOutput)
}

// Microsoft Azure Document Database Collection dataset.
type DocumentDbCollectionDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Document Database collection name. Type: string (or Expression with resultType string).
	CollectionName interface{} `pulumi:"collectionName"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'DocumentDbCollection'.
	Type string `pulumi:"type"`
}

// DocumentDbCollectionDatasetInput is an input type that accepts DocumentDbCollectionDatasetArgs and DocumentDbCollectionDatasetOutput values.
// You can construct a concrete instance of `DocumentDbCollectionDatasetInput` via:
//
//	DocumentDbCollectionDatasetArgs{...}
type DocumentDbCollectionDatasetInput interface {
	pulumi.Input

	ToDocumentDbCollectionDatasetOutput() DocumentDbCollectionDatasetOutput
	ToDocumentDbCollectionDatasetOutputWithContext(context.Context) DocumentDbCollectionDatasetOutput
}

// Microsoft Azure Document Database Collection dataset.
type DocumentDbCollectionDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Document Database collection name. Type: string (or Expression with resultType string).
	CollectionName pulumi.Input `pulumi:"collectionName"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'DocumentDbCollection'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DocumentDbCollectionDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentDbCollectionDataset)(nil)).Elem()
}

func (i DocumentDbCollectionDatasetArgs) ToDocumentDbCollectionDatasetOutput() DocumentDbCollectionDatasetOutput {
	return i.ToDocumentDbCollectionDatasetOutputWithContext(context.Background())
}

func (i DocumentDbCollectionDatasetArgs) ToDocumentDbCollectionDatasetOutputWithContext(ctx context.Context) DocumentDbCollectionDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentDbCollectionDatasetOutput)
}

// Microsoft Azure Document Database Collection dataset.
type DocumentDbCollectionDatasetOutput struct{ *pulumi.OutputState }

func (DocumentDbCollectionDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentDbCollectionDataset)(nil)).Elem()
}

func (o DocumentDbCollectionDatasetOutput) ToDocumentDbCollectionDatasetOutput() DocumentDbCollectionDatasetOutput {
	return o
}

func (o DocumentDbCollectionDatasetOutput) ToDocumentDbCollectionDatasetOutputWithContext(ctx context.Context) DocumentDbCollectionDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o DocumentDbCollectionDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v DocumentDbCollectionDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Document Database collection name. Type: string (or Expression with resultType string).
func (o DocumentDbCollectionDatasetOutput) CollectionName() pulumi.AnyOutput {
	return o.ApplyT(func(v DocumentDbCollectionDataset) interface{} { return v.CollectionName }).(pulumi.AnyOutput)
}

// Dataset description.
func (o DocumentDbCollectionDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentDbCollectionDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o DocumentDbCollectionDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v DocumentDbCollectionDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o DocumentDbCollectionDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v DocumentDbCollectionDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o DocumentDbCollectionDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v DocumentDbCollectionDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o DocumentDbCollectionDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v DocumentDbCollectionDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o DocumentDbCollectionDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v DocumentDbCollectionDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'DocumentDbCollection'.
func (o DocumentDbCollectionDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DocumentDbCollectionDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Microsoft Azure Document Database Collection dataset.
type DocumentDbCollectionDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Document Database collection name. Type: string (or Expression with resultType string).
	CollectionName interface{} `pulumi:"collectionName"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'DocumentDbCollection'.
	Type string `pulumi:"type"`
}

// Microsoft Azure Document Database Collection dataset.
type DocumentDbCollectionDatasetResponseOutput struct{ *pulumi.OutputState }

func (DocumentDbCollectionDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentDbCollectionDatasetResponse)(nil)).Elem()
}

func (o DocumentDbCollectionDatasetResponseOutput) ToDocumentDbCollectionDatasetResponseOutput() DocumentDbCollectionDatasetResponseOutput {
	return o
}

func (o DocumentDbCollectionDatasetResponseOutput) ToDocumentDbCollectionDatasetResponseOutputWithContext(ctx context.Context) DocumentDbCollectionDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o DocumentDbCollectionDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v DocumentDbCollectionDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Document Database collection name. Type: string (or Expression with resultType string).
func (o DocumentDbCollectionDatasetResponseOutput) CollectionName() pulumi.AnyOutput {
	return o.ApplyT(func(v DocumentDbCollectionDatasetResponse) interface{} { return v.CollectionName }).(pulumi.AnyOutput)
}

// Dataset description.
func (o DocumentDbCollectionDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentDbCollectionDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o DocumentDbCollectionDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v DocumentDbCollectionDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o DocumentDbCollectionDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v DocumentDbCollectionDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o DocumentDbCollectionDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v DocumentDbCollectionDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o DocumentDbCollectionDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v DocumentDbCollectionDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o DocumentDbCollectionDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v DocumentDbCollectionDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'DocumentDbCollection'.
func (o DocumentDbCollectionDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DocumentDbCollectionDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Document Database Collection sink.
type DocumentDbCollectionSink struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Nested properties separator. Default is . (dot). Type: string (or Expression with resultType string).
	NestingSeparator interface{} `pulumi:"nestingSeparator"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'DocumentDbCollectionSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Describes how to write data to Azure Cosmos DB. Type: string (or Expression with resultType string). Allowed values: insert and upsert.
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// DocumentDbCollectionSinkInput is an input type that accepts DocumentDbCollectionSinkArgs and DocumentDbCollectionSinkOutput values.
// You can construct a concrete instance of `DocumentDbCollectionSinkInput` via:
//
//	DocumentDbCollectionSinkArgs{...}
type DocumentDbCollectionSinkInput interface {
	pulumi.Input

	ToDocumentDbCollectionSinkOutput() DocumentDbCollectionSinkOutput
	ToDocumentDbCollectionSinkOutputWithContext(context.Context) DocumentDbCollectionSinkOutput
}

// A copy activity Document Database Collection sink.
type DocumentDbCollectionSinkArgs struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Nested properties separator. Default is . (dot). Type: string (or Expression with resultType string).
	NestingSeparator pulumi.Input `pulumi:"nestingSeparator"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount pulumi.Input `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait pulumi.Input `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'DocumentDbCollectionSink'.
	Type pulumi.StringInput `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize pulumi.Input `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout pulumi.Input `pulumi:"writeBatchTimeout"`
	// Describes how to write data to Azure Cosmos DB. Type: string (or Expression with resultType string). Allowed values: insert and upsert.
	WriteBehavior pulumi.Input `pulumi:"writeBehavior"`
}

func (DocumentDbCollectionSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentDbCollectionSink)(nil)).Elem()
}

func (i DocumentDbCollectionSinkArgs) ToDocumentDbCollectionSinkOutput() DocumentDbCollectionSinkOutput {
	return i.ToDocumentDbCollectionSinkOutputWithContext(context.Background())
}

func (i DocumentDbCollectionSinkArgs) ToDocumentDbCollectionSinkOutputWithContext(ctx context.Context) DocumentDbCollectionSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentDbCollectionSinkOutput)
}

// A copy activity Document Database Collection sink.
type DocumentDbCollectionSinkOutput struct{ *pulumi.OutputState }

func (DocumentDbCollectionSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentDbCollectionSink)(nil)).Elem()
}

func (o DocumentDbCollectionSinkOutput) ToDocumentDbCollectionSinkOutput() DocumentDbCollectionSinkOutput {
	return o
}

func (o DocumentDbCollectionSinkOutput) ToDocumentDbCollectionSinkOutputWithContext(ctx context.Context) DocumentDbCollectionSinkOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o DocumentDbCollectionSinkOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v DocumentDbCollectionSink) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o DocumentDbCollectionSinkOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v DocumentDbCollectionSink) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Nested properties separator. Default is . (dot). Type: string (or Expression with resultType string).
func (o DocumentDbCollectionSinkOutput) NestingSeparator() pulumi.AnyOutput {
	return o.ApplyT(func(v DocumentDbCollectionSink) interface{} { return v.NestingSeparator }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o DocumentDbCollectionSinkOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v DocumentDbCollectionSink) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o DocumentDbCollectionSinkOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v DocumentDbCollectionSink) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'DocumentDbCollectionSink'.
func (o DocumentDbCollectionSinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DocumentDbCollectionSink) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o DocumentDbCollectionSinkOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v DocumentDbCollectionSink) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o DocumentDbCollectionSinkOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v DocumentDbCollectionSink) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// Describes how to write data to Azure Cosmos DB. Type: string (or Expression with resultType string). Allowed values: insert and upsert.
func (o DocumentDbCollectionSinkOutput) WriteBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v DocumentDbCollectionSink) interface{} { return v.WriteBehavior }).(pulumi.AnyOutput)
}

// A copy activity Document Database Collection sink.
type DocumentDbCollectionSinkResponse struct {
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Nested properties separator. Default is . (dot). Type: string (or Expression with resultType string).
	NestingSeparator interface{} `pulumi:"nestingSeparator"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'DocumentDbCollectionSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// Describes how to write data to Azure Cosmos DB. Type: string (or Expression with resultType string). Allowed values: insert and upsert.
	WriteBehavior interface{} `pulumi:"writeBehavior"`
}

// A copy activity Document Database Collection sink.
type DocumentDbCollectionSinkResponseOutput struct{ *pulumi.OutputState }

func (DocumentDbCollectionSinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentDbCollectionSinkResponse)(nil)).Elem()
}

func (o DocumentDbCollectionSinkResponseOutput) ToDocumentDbCollectionSinkResponseOutput() DocumentDbCollectionSinkResponseOutput {
	return o
}

func (o DocumentDbCollectionSinkResponseOutput) ToDocumentDbCollectionSinkResponseOutputWithContext(ctx context.Context) DocumentDbCollectionSinkResponseOutput {
	return o
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o DocumentDbCollectionSinkResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v DocumentDbCollectionSinkResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o DocumentDbCollectionSinkResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v DocumentDbCollectionSinkResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Nested properties separator. Default is . (dot). Type: string (or Expression with resultType string).
func (o DocumentDbCollectionSinkResponseOutput) NestingSeparator() pulumi.AnyOutput {
	return o.ApplyT(func(v DocumentDbCollectionSinkResponse) interface{} { return v.NestingSeparator }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o DocumentDbCollectionSinkResponseOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v DocumentDbCollectionSinkResponse) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o DocumentDbCollectionSinkResponseOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v DocumentDbCollectionSinkResponse) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'DocumentDbCollectionSink'.
func (o DocumentDbCollectionSinkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DocumentDbCollectionSinkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o DocumentDbCollectionSinkResponseOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v DocumentDbCollectionSinkResponse) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o DocumentDbCollectionSinkResponseOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v DocumentDbCollectionSinkResponse) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// Describes how to write data to Azure Cosmos DB. Type: string (or Expression with resultType string). Allowed values: insert and upsert.
func (o DocumentDbCollectionSinkResponseOutput) WriteBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v DocumentDbCollectionSinkResponse) interface{} { return v.WriteBehavior }).(pulumi.AnyOutput)
}

// A copy activity Document Database Collection source.
type DocumentDbCollectionSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Nested properties separator. Type: string (or Expression with resultType string).
	NestingSeparator interface{} `pulumi:"nestingSeparator"`
	// Documents query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'DocumentDbCollectionSource'.
	Type string `pulumi:"type"`
}

// DocumentDbCollectionSourceInput is an input type that accepts DocumentDbCollectionSourceArgs and DocumentDbCollectionSourceOutput values.
// You can construct a concrete instance of `DocumentDbCollectionSourceInput` via:
//
//	DocumentDbCollectionSourceArgs{...}
type DocumentDbCollectionSourceInput interface {
	pulumi.Input

	ToDocumentDbCollectionSourceOutput() DocumentDbCollectionSourceOutput
	ToDocumentDbCollectionSourceOutputWithContext(context.Context) DocumentDbCollectionSourceOutput
}

// A copy activity Document Database Collection source.
type DocumentDbCollectionSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Nested properties separator. Type: string (or Expression with resultType string).
	NestingSeparator pulumi.Input `pulumi:"nestingSeparator"`
	// Documents query. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'DocumentDbCollectionSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DocumentDbCollectionSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentDbCollectionSource)(nil)).Elem()
}

func (i DocumentDbCollectionSourceArgs) ToDocumentDbCollectionSourceOutput() DocumentDbCollectionSourceOutput {
	return i.ToDocumentDbCollectionSourceOutputWithContext(context.Background())
}

func (i DocumentDbCollectionSourceArgs) ToDocumentDbCollectionSourceOutputWithContext(ctx context.Context) DocumentDbCollectionSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentDbCollectionSourceOutput)
}

// A copy activity Document Database Collection source.
type DocumentDbCollectionSourceOutput struct{ *pulumi.OutputState }

func (DocumentDbCollectionSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentDbCollectionSource)(nil)).Elem()
}

func (o DocumentDbCollectionSourceOutput) ToDocumentDbCollectionSourceOutput() DocumentDbCollectionSourceOutput {
	return o
}

func (o DocumentDbCollectionSourceOutput) ToDocumentDbCollectionSourceOutputWithContext(ctx context.Context) DocumentDbCollectionSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o DocumentDbCollectionSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v DocumentDbCollectionSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o DocumentDbCollectionSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v DocumentDbCollectionSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o DocumentDbCollectionSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v DocumentDbCollectionSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Nested properties separator. Type: string (or Expression with resultType string).
func (o DocumentDbCollectionSourceOutput) NestingSeparator() pulumi.AnyOutput {
	return o.ApplyT(func(v DocumentDbCollectionSource) interface{} { return v.NestingSeparator }).(pulumi.AnyOutput)
}

// Documents query. Type: string (or Expression with resultType string).
func (o DocumentDbCollectionSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v DocumentDbCollectionSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o DocumentDbCollectionSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v DocumentDbCollectionSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o DocumentDbCollectionSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v DocumentDbCollectionSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o DocumentDbCollectionSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v DocumentDbCollectionSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'DocumentDbCollectionSource'.
func (o DocumentDbCollectionSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DocumentDbCollectionSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Document Database Collection source.
type DocumentDbCollectionSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Nested properties separator. Type: string (or Expression with resultType string).
	NestingSeparator interface{} `pulumi:"nestingSeparator"`
	// Documents query. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'DocumentDbCollectionSource'.
	Type string `pulumi:"type"`
}

// A copy activity Document Database Collection source.
type DocumentDbCollectionSourceResponseOutput struct{ *pulumi.OutputState }

func (DocumentDbCollectionSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentDbCollectionSourceResponse)(nil)).Elem()
}

func (o DocumentDbCollectionSourceResponseOutput) ToDocumentDbCollectionSourceResponseOutput() DocumentDbCollectionSourceResponseOutput {
	return o
}

func (o DocumentDbCollectionSourceResponseOutput) ToDocumentDbCollectionSourceResponseOutputWithContext(ctx context.Context) DocumentDbCollectionSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o DocumentDbCollectionSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v DocumentDbCollectionSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o DocumentDbCollectionSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v DocumentDbCollectionSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o DocumentDbCollectionSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v DocumentDbCollectionSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Nested properties separator. Type: string (or Expression with resultType string).
func (o DocumentDbCollectionSourceResponseOutput) NestingSeparator() pulumi.AnyOutput {
	return o.ApplyT(func(v DocumentDbCollectionSourceResponse) interface{} { return v.NestingSeparator }).(pulumi.AnyOutput)
}

// Documents query. Type: string (or Expression with resultType string).
func (o DocumentDbCollectionSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v DocumentDbCollectionSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o DocumentDbCollectionSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v DocumentDbCollectionSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o DocumentDbCollectionSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v DocumentDbCollectionSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o DocumentDbCollectionSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v DocumentDbCollectionSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'DocumentDbCollectionSource'.
func (o DocumentDbCollectionSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DocumentDbCollectionSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Drill server linked service.
type DrillLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReference `pulumi:"pwd"`
	// Type of linked service.
	// Expected value is 'Drill'.
	Type string `pulumi:"type"`
}

// DrillLinkedServiceInput is an input type that accepts DrillLinkedServiceArgs and DrillLinkedServiceOutput values.
// You can construct a concrete instance of `DrillLinkedServiceInput` via:
//
//	DrillLinkedServiceArgs{...}
type DrillLinkedServiceInput interface {
	pulumi.Input

	ToDrillLinkedServiceOutput() DrillLinkedServiceOutput
	ToDrillLinkedServiceOutputWithContext(context.Context) DrillLinkedServiceOutput
}

// Drill server linked service.
type DrillLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd AzureKeyVaultSecretReferencePtrInput `pulumi:"pwd"`
	// Type of linked service.
	// Expected value is 'Drill'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DrillLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DrillLinkedService)(nil)).Elem()
}

func (i DrillLinkedServiceArgs) ToDrillLinkedServiceOutput() DrillLinkedServiceOutput {
	return i.ToDrillLinkedServiceOutputWithContext(context.Background())
}

func (i DrillLinkedServiceArgs) ToDrillLinkedServiceOutputWithContext(ctx context.Context) DrillLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DrillLinkedServiceOutput)
}

// Drill server linked service.
type DrillLinkedServiceOutput struct{ *pulumi.OutputState }

func (DrillLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DrillLinkedService)(nil)).Elem()
}

func (o DrillLinkedServiceOutput) ToDrillLinkedServiceOutput() DrillLinkedServiceOutput {
	return o
}

func (o DrillLinkedServiceOutput) ToDrillLinkedServiceOutputWithContext(ctx context.Context) DrillLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o DrillLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v DrillLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o DrillLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v DrillLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o DrillLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v DrillLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o DrillLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DrillLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o DrillLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DrillLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o DrillLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v DrillLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o DrillLinkedServiceOutput) Pwd() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v DrillLinkedService) *AzureKeyVaultSecretReference { return v.Pwd }).(AzureKeyVaultSecretReferencePtrOutput)
}

// Type of linked service.
// Expected value is 'Drill'.
func (o DrillLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DrillLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Drill server linked service.
type DrillLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReferenceResponse `pulumi:"pwd"`
	// Type of linked service.
	// Expected value is 'Drill'.
	Type string `pulumi:"type"`
}

// Drill server linked service.
type DrillLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (DrillLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DrillLinkedServiceResponse)(nil)).Elem()
}

func (o DrillLinkedServiceResponseOutput) ToDrillLinkedServiceResponseOutput() DrillLinkedServiceResponseOutput {
	return o
}

func (o DrillLinkedServiceResponseOutput) ToDrillLinkedServiceResponseOutputWithContext(ctx context.Context) DrillLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o DrillLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v DrillLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o DrillLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v DrillLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o DrillLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v DrillLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o DrillLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DrillLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o DrillLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DrillLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o DrillLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v DrillLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o DrillLinkedServiceResponseOutput) Pwd() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v DrillLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse { return v.Pwd }).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// Type of linked service.
// Expected value is 'Drill'.
func (o DrillLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DrillLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Drill server source.
type DrillSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'DrillSource'.
	Type string `pulumi:"type"`
}

// DrillSourceInput is an input type that accepts DrillSourceArgs and DrillSourceOutput values.
// You can construct a concrete instance of `DrillSourceInput` via:
//
//	DrillSourceArgs{...}
type DrillSourceInput interface {
	pulumi.Input

	ToDrillSourceOutput() DrillSourceOutput
	ToDrillSourceOutputWithContext(context.Context) DrillSourceOutput
}

// A copy activity Drill server source.
type DrillSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'DrillSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DrillSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DrillSource)(nil)).Elem()
}

func (i DrillSourceArgs) ToDrillSourceOutput() DrillSourceOutput {
	return i.ToDrillSourceOutputWithContext(context.Background())
}

func (i DrillSourceArgs) ToDrillSourceOutputWithContext(ctx context.Context) DrillSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DrillSourceOutput)
}

// A copy activity Drill server source.
type DrillSourceOutput struct{ *pulumi.OutputState }

func (DrillSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DrillSource)(nil)).Elem()
}

func (o DrillSourceOutput) ToDrillSourceOutput() DrillSourceOutput {
	return o
}

func (o DrillSourceOutput) ToDrillSourceOutputWithContext(ctx context.Context) DrillSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o DrillSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v DrillSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o DrillSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v DrillSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o DrillSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v DrillSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o DrillSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v DrillSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o DrillSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v DrillSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o DrillSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v DrillSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o DrillSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v DrillSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'DrillSource'.
func (o DrillSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DrillSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Drill server source.
type DrillSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'DrillSource'.
	Type string `pulumi:"type"`
}

// A copy activity Drill server source.
type DrillSourceResponseOutput struct{ *pulumi.OutputState }

func (DrillSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DrillSourceResponse)(nil)).Elem()
}

func (o DrillSourceResponseOutput) ToDrillSourceResponseOutput() DrillSourceResponseOutput {
	return o
}

func (o DrillSourceResponseOutput) ToDrillSourceResponseOutputWithContext(ctx context.Context) DrillSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o DrillSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v DrillSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o DrillSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v DrillSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o DrillSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v DrillSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o DrillSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v DrillSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o DrillSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v DrillSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o DrillSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v DrillSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o DrillSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v DrillSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'DrillSource'.
func (o DrillSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DrillSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Drill server dataset.
type DrillTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Drill. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'DrillTable'.
	Type string `pulumi:"type"`
}

// DrillTableDatasetInput is an input type that accepts DrillTableDatasetArgs and DrillTableDatasetOutput values.
// You can construct a concrete instance of `DrillTableDatasetInput` via:
//
//	DrillTableDatasetArgs{...}
type DrillTableDatasetInput interface {
	pulumi.Input

	ToDrillTableDatasetOutput() DrillTableDatasetOutput
	ToDrillTableDatasetOutputWithContext(context.Context) DrillTableDatasetOutput
}

// Drill server dataset.
type DrillTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Drill. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'DrillTable'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DrillTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DrillTableDataset)(nil)).Elem()
}

func (i DrillTableDatasetArgs) ToDrillTableDatasetOutput() DrillTableDatasetOutput {
	return i.ToDrillTableDatasetOutputWithContext(context.Background())
}

func (i DrillTableDatasetArgs) ToDrillTableDatasetOutputWithContext(ctx context.Context) DrillTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DrillTableDatasetOutput)
}

// Drill server dataset.
type DrillTableDatasetOutput struct{ *pulumi.OutputState }

func (DrillTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DrillTableDataset)(nil)).Elem()
}

func (o DrillTableDatasetOutput) ToDrillTableDatasetOutput() DrillTableDatasetOutput {
	return o
}

func (o DrillTableDatasetOutput) ToDrillTableDatasetOutputWithContext(ctx context.Context) DrillTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o DrillTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v DrillTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o DrillTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DrillTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o DrillTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v DrillTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o DrillTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v DrillTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o DrillTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v DrillTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o DrillTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v DrillTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o DrillTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v DrillTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Drill. Type: string (or Expression with resultType string).
func (o DrillTableDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v DrillTableDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o DrillTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v DrillTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'DrillTable'.
func (o DrillTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DrillTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Drill server dataset.
type DrillTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Drill. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'DrillTable'.
	Type string `pulumi:"type"`
}

// Drill server dataset.
type DrillTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (DrillTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DrillTableDatasetResponse)(nil)).Elem()
}

func (o DrillTableDatasetResponseOutput) ToDrillTableDatasetResponseOutput() DrillTableDatasetResponseOutput {
	return o
}

func (o DrillTableDatasetResponseOutput) ToDrillTableDatasetResponseOutputWithContext(ctx context.Context) DrillTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o DrillTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v DrillTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o DrillTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DrillTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o DrillTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v DrillTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o DrillTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v DrillTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o DrillTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v DrillTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o DrillTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v DrillTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o DrillTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v DrillTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Drill. Type: string (or Expression with resultType string).
func (o DrillTableDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v DrillTableDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o DrillTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v DrillTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'DrillTable'.
func (o DrillTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DrillTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Dynamics AX linked service.
type DynamicsAXLinkedService struct {
	// Specify the resource you are requesting authorization. Type: string (or Expression with resultType string).
	AadResourceId interface{} `pulumi:"aadResourceId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Specify the application's client ID. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// Specify the application's key. Mark this field as a SecureString to store it securely in Data Factory, or reference a secret stored in Azure Key Vault. Type: string (or Expression with resultType string).
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Specify the tenant information (domain name or tenant ID) under which your application resides. Retrieve it by hovering the mouse in the top-right corner of the Azure portal. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'DynamicsAX'.
	Type string `pulumi:"type"`
	// The Dynamics AX (or Dynamics 365 Finance and Operations) instance OData endpoint.
	Url interface{} `pulumi:"url"`
}

// DynamicsAXLinkedServiceInput is an input type that accepts DynamicsAXLinkedServiceArgs and DynamicsAXLinkedServiceOutput values.
// You can construct a concrete instance of `DynamicsAXLinkedServiceInput` via:
//
//	DynamicsAXLinkedServiceArgs{...}
type DynamicsAXLinkedServiceInput interface {
	pulumi.Input

	ToDynamicsAXLinkedServiceOutput() DynamicsAXLinkedServiceOutput
	ToDynamicsAXLinkedServiceOutputWithContext(context.Context) DynamicsAXLinkedServiceOutput
}

// Dynamics AX linked service.
type DynamicsAXLinkedServiceArgs struct {
	// Specify the resource you are requesting authorization. Type: string (or Expression with resultType string).
	AadResourceId pulumi.Input `pulumi:"aadResourceId"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Specify the application's client ID. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// Specify the application's key. Mark this field as a SecureString to store it securely in Data Factory, or reference a secret stored in Azure Key Vault. Type: string (or Expression with resultType string).
	ServicePrincipalKey pulumi.Input `pulumi:"servicePrincipalKey"`
	// Specify the tenant information (domain name or tenant ID) under which your application resides. Retrieve it by hovering the mouse in the top-right corner of the Azure portal. Type: string (or Expression with resultType string).
	Tenant pulumi.Input `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'DynamicsAX'.
	Type pulumi.StringInput `pulumi:"type"`
	// The Dynamics AX (or Dynamics 365 Finance and Operations) instance OData endpoint.
	Url pulumi.Input `pulumi:"url"`
}

func (DynamicsAXLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsAXLinkedService)(nil)).Elem()
}

func (i DynamicsAXLinkedServiceArgs) ToDynamicsAXLinkedServiceOutput() DynamicsAXLinkedServiceOutput {
	return i.ToDynamicsAXLinkedServiceOutputWithContext(context.Background())
}

func (i DynamicsAXLinkedServiceArgs) ToDynamicsAXLinkedServiceOutputWithContext(ctx context.Context) DynamicsAXLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicsAXLinkedServiceOutput)
}

// Dynamics AX linked service.
type DynamicsAXLinkedServiceOutput struct{ *pulumi.OutputState }

func (DynamicsAXLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsAXLinkedService)(nil)).Elem()
}

func (o DynamicsAXLinkedServiceOutput) ToDynamicsAXLinkedServiceOutput() DynamicsAXLinkedServiceOutput {
	return o
}

func (o DynamicsAXLinkedServiceOutput) ToDynamicsAXLinkedServiceOutputWithContext(ctx context.Context) DynamicsAXLinkedServiceOutput {
	return o
}

// Specify the resource you are requesting authorization. Type: string (or Expression with resultType string).
func (o DynamicsAXLinkedServiceOutput) AadResourceId() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXLinkedService) interface{} { return v.AadResourceId }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o DynamicsAXLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v DynamicsAXLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o DynamicsAXLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v DynamicsAXLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o DynamicsAXLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicsAXLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o DynamicsAXLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicsAXLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o DynamicsAXLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v DynamicsAXLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Specify the application's client ID. Type: string (or Expression with resultType string).
func (o DynamicsAXLinkedServiceOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXLinkedService) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// Specify the application's key. Mark this field as a SecureString to store it securely in Data Factory, or reference a secret stored in Azure Key Vault. Type: string (or Expression with resultType string).
func (o DynamicsAXLinkedServiceOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXLinkedService) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// Specify the tenant information (domain name or tenant ID) under which your application resides. Retrieve it by hovering the mouse in the top-right corner of the Azure portal. Type: string (or Expression with resultType string).
func (o DynamicsAXLinkedServiceOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXLinkedService) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'DynamicsAX'.
func (o DynamicsAXLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsAXLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The Dynamics AX (or Dynamics 365 Finance and Operations) instance OData endpoint.
func (o DynamicsAXLinkedServiceOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXLinkedService) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// Dynamics AX linked service.
type DynamicsAXLinkedServiceResponse struct {
	// Specify the resource you are requesting authorization. Type: string (or Expression with resultType string).
	AadResourceId interface{} `pulumi:"aadResourceId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Specify the application's client ID. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// Specify the application's key. Mark this field as a SecureString to store it securely in Data Factory, or reference a secret stored in Azure Key Vault. Type: string (or Expression with resultType string).
	ServicePrincipalKey interface{} `pulumi:"servicePrincipalKey"`
	// Specify the tenant information (domain name or tenant ID) under which your application resides. Retrieve it by hovering the mouse in the top-right corner of the Azure portal. Type: string (or Expression with resultType string).
	Tenant interface{} `pulumi:"tenant"`
	// Type of linked service.
	// Expected value is 'DynamicsAX'.
	Type string `pulumi:"type"`
	// The Dynamics AX (or Dynamics 365 Finance and Operations) instance OData endpoint.
	Url interface{} `pulumi:"url"`
}

// Dynamics AX linked service.
type DynamicsAXLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (DynamicsAXLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsAXLinkedServiceResponse)(nil)).Elem()
}

func (o DynamicsAXLinkedServiceResponseOutput) ToDynamicsAXLinkedServiceResponseOutput() DynamicsAXLinkedServiceResponseOutput {
	return o
}

func (o DynamicsAXLinkedServiceResponseOutput) ToDynamicsAXLinkedServiceResponseOutputWithContext(ctx context.Context) DynamicsAXLinkedServiceResponseOutput {
	return o
}

// Specify the resource you are requesting authorization. Type: string (or Expression with resultType string).
func (o DynamicsAXLinkedServiceResponseOutput) AadResourceId() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXLinkedServiceResponse) interface{} { return v.AadResourceId }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o DynamicsAXLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v DynamicsAXLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o DynamicsAXLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v DynamicsAXLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o DynamicsAXLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicsAXLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o DynamicsAXLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicsAXLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o DynamicsAXLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v DynamicsAXLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Specify the application's client ID. Type: string (or Expression with resultType string).
func (o DynamicsAXLinkedServiceResponseOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXLinkedServiceResponse) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// Specify the application's key. Mark this field as a SecureString to store it securely in Data Factory, or reference a secret stored in Azure Key Vault. Type: string (or Expression with resultType string).
func (o DynamicsAXLinkedServiceResponseOutput) ServicePrincipalKey() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXLinkedServiceResponse) interface{} { return v.ServicePrincipalKey }).(pulumi.AnyOutput)
}

// Specify the tenant information (domain name or tenant ID) under which your application resides. Retrieve it by hovering the mouse in the top-right corner of the Azure portal. Type: string (or Expression with resultType string).
func (o DynamicsAXLinkedServiceResponseOutput) Tenant() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXLinkedServiceResponse) interface{} { return v.Tenant }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'DynamicsAX'.
func (o DynamicsAXLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsAXLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Dynamics AX (or Dynamics 365 Finance and Operations) instance OData endpoint.
func (o DynamicsAXLinkedServiceResponseOutput) Url() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXLinkedServiceResponse) interface{} { return v.Url }).(pulumi.AnyOutput)
}

// The path of the Dynamics AX OData entity.
type DynamicsAXResourceDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The path of the Dynamics AX OData entity. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'DynamicsAXResource'.
	Type string `pulumi:"type"`
}

// DynamicsAXResourceDatasetInput is an input type that accepts DynamicsAXResourceDatasetArgs and DynamicsAXResourceDatasetOutput values.
// You can construct a concrete instance of `DynamicsAXResourceDatasetInput` via:
//
//	DynamicsAXResourceDatasetArgs{...}
type DynamicsAXResourceDatasetInput interface {
	pulumi.Input

	ToDynamicsAXResourceDatasetOutput() DynamicsAXResourceDatasetOutput
	ToDynamicsAXResourceDatasetOutputWithContext(context.Context) DynamicsAXResourceDatasetOutput
}

// The path of the Dynamics AX OData entity.
type DynamicsAXResourceDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The path of the Dynamics AX OData entity. Type: string (or Expression with resultType string).
	Path pulumi.Input `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'DynamicsAXResource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DynamicsAXResourceDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsAXResourceDataset)(nil)).Elem()
}

func (i DynamicsAXResourceDatasetArgs) ToDynamicsAXResourceDatasetOutput() DynamicsAXResourceDatasetOutput {
	return i.ToDynamicsAXResourceDatasetOutputWithContext(context.Background())
}

func (i DynamicsAXResourceDatasetArgs) ToDynamicsAXResourceDatasetOutputWithContext(ctx context.Context) DynamicsAXResourceDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicsAXResourceDatasetOutput)
}

// The path of the Dynamics AX OData entity.
type DynamicsAXResourceDatasetOutput struct{ *pulumi.OutputState }

func (DynamicsAXResourceDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsAXResourceDataset)(nil)).Elem()
}

func (o DynamicsAXResourceDatasetOutput) ToDynamicsAXResourceDatasetOutput() DynamicsAXResourceDatasetOutput {
	return o
}

func (o DynamicsAXResourceDatasetOutput) ToDynamicsAXResourceDatasetOutputWithContext(ctx context.Context) DynamicsAXResourceDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o DynamicsAXResourceDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v DynamicsAXResourceDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o DynamicsAXResourceDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicsAXResourceDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o DynamicsAXResourceDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v DynamicsAXResourceDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o DynamicsAXResourceDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v DynamicsAXResourceDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o DynamicsAXResourceDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v DynamicsAXResourceDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The path of the Dynamics AX OData entity. Type: string (or Expression with resultType string).
func (o DynamicsAXResourceDatasetOutput) Path() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXResourceDataset) interface{} { return v.Path }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o DynamicsAXResourceDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXResourceDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o DynamicsAXResourceDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXResourceDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'DynamicsAXResource'.
func (o DynamicsAXResourceDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsAXResourceDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The path of the Dynamics AX OData entity.
type DynamicsAXResourceDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The path of the Dynamics AX OData entity. Type: string (or Expression with resultType string).
	Path interface{} `pulumi:"path"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'DynamicsAXResource'.
	Type string `pulumi:"type"`
}

// The path of the Dynamics AX OData entity.
type DynamicsAXResourceDatasetResponseOutput struct{ *pulumi.OutputState }

func (DynamicsAXResourceDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsAXResourceDatasetResponse)(nil)).Elem()
}

func (o DynamicsAXResourceDatasetResponseOutput) ToDynamicsAXResourceDatasetResponseOutput() DynamicsAXResourceDatasetResponseOutput {
	return o
}

func (o DynamicsAXResourceDatasetResponseOutput) ToDynamicsAXResourceDatasetResponseOutputWithContext(ctx context.Context) DynamicsAXResourceDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o DynamicsAXResourceDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v DynamicsAXResourceDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o DynamicsAXResourceDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicsAXResourceDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o DynamicsAXResourceDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v DynamicsAXResourceDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o DynamicsAXResourceDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v DynamicsAXResourceDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o DynamicsAXResourceDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v DynamicsAXResourceDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The path of the Dynamics AX OData entity. Type: string (or Expression with resultType string).
func (o DynamicsAXResourceDatasetResponseOutput) Path() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXResourceDatasetResponse) interface{} { return v.Path }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o DynamicsAXResourceDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXResourceDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o DynamicsAXResourceDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXResourceDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'DynamicsAXResource'.
func (o DynamicsAXResourceDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsAXResourceDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Dynamics AX source.
type DynamicsAXSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'DynamicsAXSource'.
	Type string `pulumi:"type"`
}

// DynamicsAXSourceInput is an input type that accepts DynamicsAXSourceArgs and DynamicsAXSourceOutput values.
// You can construct a concrete instance of `DynamicsAXSourceInput` via:
//
//	DynamicsAXSourceArgs{...}
type DynamicsAXSourceInput interface {
	pulumi.Input

	ToDynamicsAXSourceOutput() DynamicsAXSourceOutput
	ToDynamicsAXSourceOutputWithContext(context.Context) DynamicsAXSourceOutput
}

// A copy activity Dynamics AX source.
type DynamicsAXSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout pulumi.Input `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'DynamicsAXSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DynamicsAXSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsAXSource)(nil)).Elem()
}

func (i DynamicsAXSourceArgs) ToDynamicsAXSourceOutput() DynamicsAXSourceOutput {
	return i.ToDynamicsAXSourceOutputWithContext(context.Background())
}

func (i DynamicsAXSourceArgs) ToDynamicsAXSourceOutputWithContext(ctx context.Context) DynamicsAXSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicsAXSourceOutput)
}

// A copy activity Dynamics AX source.
type DynamicsAXSourceOutput struct{ *pulumi.OutputState }

func (DynamicsAXSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsAXSource)(nil)).Elem()
}

func (o DynamicsAXSourceOutput) ToDynamicsAXSourceOutput() DynamicsAXSourceOutput {
	return o
}

func (o DynamicsAXSourceOutput) ToDynamicsAXSourceOutputWithContext(ctx context.Context) DynamicsAXSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o DynamicsAXSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o DynamicsAXSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o DynamicsAXSourceOutput) HttpRequestTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXSource) interface{} { return v.HttpRequestTimeout }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o DynamicsAXSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o DynamicsAXSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o DynamicsAXSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o DynamicsAXSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o DynamicsAXSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'DynamicsAXSource'.
func (o DynamicsAXSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsAXSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Dynamics AX source.
type DynamicsAXSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HttpRequestTimeout interface{} `pulumi:"httpRequestTimeout"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'DynamicsAXSource'.
	Type string `pulumi:"type"`
}

// A copy activity Dynamics AX source.
type DynamicsAXSourceResponseOutput struct{ *pulumi.OutputState }

func (DynamicsAXSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsAXSourceResponse)(nil)).Elem()
}

func (o DynamicsAXSourceResponseOutput) ToDynamicsAXSourceResponseOutput() DynamicsAXSourceResponseOutput {
	return o
}

func (o DynamicsAXSourceResponseOutput) ToDynamicsAXSourceResponseOutputWithContext(ctx context.Context) DynamicsAXSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o DynamicsAXSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o DynamicsAXSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o DynamicsAXSourceResponseOutput) HttpRequestTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXSourceResponse) interface{} { return v.HttpRequestTimeout }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o DynamicsAXSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o DynamicsAXSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o DynamicsAXSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o DynamicsAXSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o DynamicsAXSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsAXSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'DynamicsAXSource'.
func (o DynamicsAXSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsAXSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Dynamics CRM entity dataset.
type DynamicsCrmEntityDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The logical name of the entity. Type: string (or Expression with resultType string).
	EntityName interface{} `pulumi:"entityName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'DynamicsCrmEntity'.
	Type string `pulumi:"type"`
}

// DynamicsCrmEntityDatasetInput is an input type that accepts DynamicsCrmEntityDatasetArgs and DynamicsCrmEntityDatasetOutput values.
// You can construct a concrete instance of `DynamicsCrmEntityDatasetInput` via:
//
//	DynamicsCrmEntityDatasetArgs{...}
type DynamicsCrmEntityDatasetInput interface {
	pulumi.Input

	ToDynamicsCrmEntityDatasetOutput() DynamicsCrmEntityDatasetOutput
	ToDynamicsCrmEntityDatasetOutputWithContext(context.Context) DynamicsCrmEntityDatasetOutput
}

// The Dynamics CRM entity dataset.
type DynamicsCrmEntityDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The logical name of the entity. Type: string (or Expression with resultType string).
	EntityName pulumi.Input `pulumi:"entityName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'DynamicsCrmEntity'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DynamicsCrmEntityDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsCrmEntityDataset)(nil)).Elem()
}

func (i DynamicsCrmEntityDatasetArgs) ToDynamicsCrmEntityDatasetOutput() DynamicsCrmEntityDatasetOutput {
	return i.ToDynamicsCrmEntityDatasetOutputWithContext(context.Background())
}

func (i DynamicsCrmEntityDatasetArgs) ToDynamicsCrmEntityDatasetOutputWithContext(ctx context.Context) DynamicsCrmEntityDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicsCrmEntityDatasetOutput)
}

// The Dynamics CRM entity dataset.
type DynamicsCrmEntityDatasetOutput struct{ *pulumi.OutputState }

func (DynamicsCrmEntityDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsCrmEntityDataset)(nil)).Elem()
}

func (o DynamicsCrmEntityDatasetOutput) ToDynamicsCrmEntityDatasetOutput() DynamicsCrmEntityDatasetOutput {
	return o
}

func (o DynamicsCrmEntityDatasetOutput) ToDynamicsCrmEntityDatasetOutputWithContext(ctx context.Context) DynamicsCrmEntityDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o DynamicsCrmEntityDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v DynamicsCrmEntityDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o DynamicsCrmEntityDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicsCrmEntityDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The logical name of the entity. Type: string (or Expression with resultType string).
func (o DynamicsCrmEntityDatasetOutput) EntityName() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmEntityDataset) interface{} { return v.EntityName }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o DynamicsCrmEntityDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v DynamicsCrmEntityDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o DynamicsCrmEntityDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v DynamicsCrmEntityDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o DynamicsCrmEntityDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v DynamicsCrmEntityDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o DynamicsCrmEntityDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmEntityDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o DynamicsCrmEntityDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmEntityDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'DynamicsCrmEntity'.
func (o DynamicsCrmEntityDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsCrmEntityDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Dynamics CRM entity dataset.
type DynamicsCrmEntityDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The logical name of the entity. Type: string (or Expression with resultType string).
	EntityName interface{} `pulumi:"entityName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'DynamicsCrmEntity'.
	Type string `pulumi:"type"`
}

// The Dynamics CRM entity dataset.
type DynamicsCrmEntityDatasetResponseOutput struct{ *pulumi.OutputState }

func (DynamicsCrmEntityDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsCrmEntityDatasetResponse)(nil)).Elem()
}

func (o DynamicsCrmEntityDatasetResponseOutput) ToDynamicsCrmEntityDatasetResponseOutput() DynamicsCrmEntityDatasetResponseOutput {
	return o
}

func (o DynamicsCrmEntityDatasetResponseOutput) ToDynamicsCrmEntityDatasetResponseOutputWithContext(ctx context.Context) DynamicsCrmEntityDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o DynamicsCrmEntityDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v DynamicsCrmEntityDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o DynamicsCrmEntityDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicsCrmEntityDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The logical name of the entity. Type: string (or Expression with resultType string).
func (o DynamicsCrmEntityDatasetResponseOutput) EntityName() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmEntityDatasetResponse) interface{} { return v.EntityName }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o DynamicsCrmEntityDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v DynamicsCrmEntityDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o DynamicsCrmEntityDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v DynamicsCrmEntityDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o DynamicsCrmEntityDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v DynamicsCrmEntityDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o DynamicsCrmEntityDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmEntityDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o DynamicsCrmEntityDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmEntityDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'DynamicsCrmEntity'.
func (o DynamicsCrmEntityDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsCrmEntityDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Dynamics CRM linked service.
type DynamicsCrmLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to connect to Dynamics CRM server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario, 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The deployment type of the Dynamics CRM instance. 'Online' for Dynamics CRM Online and 'OnPremisesWithIfd' for Dynamics CRM on-premises with Ifd. Type: string (or Expression with resultType string).
	DeploymentType interface{} `pulumi:"deploymentType"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The host name of the on-premises Dynamics CRM server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
	HostName interface{} `pulumi:"hostName"`
	// The organization name of the Dynamics CRM instance. The property is required for on-prem and required for online when there are more than one Dynamics CRM instances associated with the user. Type: string (or Expression with resultType string).
	OrganizationName interface{} `pulumi:"organizationName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to access the Dynamics CRM instance.
	Password interface{} `pulumi:"password"`
	// The port of on-premises Dynamics CRM server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential interface{} `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType interface{} `pulumi:"servicePrincipalCredentialType"`
	// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The URL to the Microsoft Dynamics CRM server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
	ServiceUri interface{} `pulumi:"serviceUri"`
	// Type of linked service.
	// Expected value is 'DynamicsCrm'.
	Type string `pulumi:"type"`
	// User name to access the Dynamics CRM instance. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// DynamicsCrmLinkedServiceInput is an input type that accepts DynamicsCrmLinkedServiceArgs and DynamicsCrmLinkedServiceOutput values.
// You can construct a concrete instance of `DynamicsCrmLinkedServiceInput` via:
//
//	DynamicsCrmLinkedServiceArgs{...}
type DynamicsCrmLinkedServiceInput interface {
	pulumi.Input

	ToDynamicsCrmLinkedServiceOutput() DynamicsCrmLinkedServiceOutput
	ToDynamicsCrmLinkedServiceOutputWithContext(context.Context) DynamicsCrmLinkedServiceOutput
}

// Dynamics CRM linked service.
type DynamicsCrmLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication type to connect to Dynamics CRM server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario, 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
	AuthenticationType pulumi.Input `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The deployment type of the Dynamics CRM instance. 'Online' for Dynamics CRM Online and 'OnPremisesWithIfd' for Dynamics CRM on-premises with Ifd. Type: string (or Expression with resultType string).
	DeploymentType pulumi.Input `pulumi:"deploymentType"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// The host name of the on-premises Dynamics CRM server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
	HostName pulumi.Input `pulumi:"hostName"`
	// The organization name of the Dynamics CRM instance. The property is required for on-prem and required for online when there are more than one Dynamics CRM instances associated with the user. Type: string (or Expression with resultType string).
	OrganizationName pulumi.Input `pulumi:"organizationName"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password to access the Dynamics CRM instance.
	Password pulumi.Input `pulumi:"password"`
	// The port of on-premises Dynamics CRM server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
	Port pulumi.Input `pulumi:"port"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential pulumi.Input `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType pulumi.Input `pulumi:"servicePrincipalCredentialType"`
	// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The URL to the Microsoft Dynamics CRM server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
	ServiceUri pulumi.Input `pulumi:"serviceUri"`
	// Type of linked service.
	// Expected value is 'DynamicsCrm'.
	Type pulumi.StringInput `pulumi:"type"`
	// User name to access the Dynamics CRM instance. Type: string (or Expression with resultType string).
	Username pulumi.Input `pulumi:"username"`
}

func (DynamicsCrmLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsCrmLinkedService)(nil)).Elem()
}

func (i DynamicsCrmLinkedServiceArgs) ToDynamicsCrmLinkedServiceOutput() DynamicsCrmLinkedServiceOutput {
	return i.ToDynamicsCrmLinkedServiceOutputWithContext(context.Background())
}

func (i DynamicsCrmLinkedServiceArgs) ToDynamicsCrmLinkedServiceOutputWithContext(ctx context.Context) DynamicsCrmLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicsCrmLinkedServiceOutput)
}

// Dynamics CRM linked service.
type DynamicsCrmLinkedServiceOutput struct{ *pulumi.OutputState }

func (DynamicsCrmLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsCrmLinkedService)(nil)).Elem()
}

func (o DynamicsCrmLinkedServiceOutput) ToDynamicsCrmLinkedServiceOutput() DynamicsCrmLinkedServiceOutput {
	return o
}

func (o DynamicsCrmLinkedServiceOutput) ToDynamicsCrmLinkedServiceOutputWithContext(ctx context.Context) DynamicsCrmLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o DynamicsCrmLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication type to connect to Dynamics CRM server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario, 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
func (o DynamicsCrmLinkedServiceOutput) AuthenticationType() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedService) interface{} { return v.AuthenticationType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o DynamicsCrmLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The deployment type of the Dynamics CRM instance. 'Online' for Dynamics CRM Online and 'OnPremisesWithIfd' for Dynamics CRM on-premises with Ifd. Type: string (or Expression with resultType string).
func (o DynamicsCrmLinkedServiceOutput) DeploymentType() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedService) interface{} { return v.DeploymentType }).(pulumi.AnyOutput)
}

// Linked service description.
func (o DynamicsCrmLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o DynamicsCrmLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The host name of the on-premises Dynamics CRM server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
func (o DynamicsCrmLinkedServiceOutput) HostName() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedService) interface{} { return v.HostName }).(pulumi.AnyOutput)
}

// The organization name of the Dynamics CRM instance. The property is required for on-prem and required for online when there are more than one Dynamics CRM instances associated with the user. Type: string (or Expression with resultType string).
func (o DynamicsCrmLinkedServiceOutput) OrganizationName() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedService) interface{} { return v.OrganizationName }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o DynamicsCrmLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Password to access the Dynamics CRM instance.
func (o DynamicsCrmLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The port of on-premises Dynamics CRM server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
func (o DynamicsCrmLinkedServiceOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedService) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
func (o DynamicsCrmLinkedServiceOutput) ServicePrincipalCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedService) interface{} { return v.ServicePrincipalCredential }).(pulumi.AnyOutput)
}

// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
func (o DynamicsCrmLinkedServiceOutput) ServicePrincipalCredentialType() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedService) interface{} { return v.ServicePrincipalCredentialType }).(pulumi.AnyOutput)
}

// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
func (o DynamicsCrmLinkedServiceOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedService) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The URL to the Microsoft Dynamics CRM server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
func (o DynamicsCrmLinkedServiceOutput) ServiceUri() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedService) interface{} { return v.ServiceUri }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'DynamicsCrm'.
func (o DynamicsCrmLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// User name to access the Dynamics CRM instance. Type: string (or Expression with resultType string).
func (o DynamicsCrmLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Dynamics CRM linked service.
type DynamicsCrmLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to connect to Dynamics CRM server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario, 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The deployment type of the Dynamics CRM instance. 'Online' for Dynamics CRM Online and 'OnPremisesWithIfd' for Dynamics CRM on-premises with Ifd. Type: string (or Expression with resultType string).
	DeploymentType interface{} `pulumi:"deploymentType"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The host name of the on-premises Dynamics CRM server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
	HostName interface{} `pulumi:"hostName"`
	// The organization name of the Dynamics CRM instance. The property is required for on-prem and required for online when there are more than one Dynamics CRM instances associated with the user. Type: string (or Expression with resultType string).
	OrganizationName interface{} `pulumi:"organizationName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to access the Dynamics CRM instance.
	Password interface{} `pulumi:"password"`
	// The port of on-premises Dynamics CRM server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential interface{} `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType interface{} `pulumi:"servicePrincipalCredentialType"`
	// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The URL to the Microsoft Dynamics CRM server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
	ServiceUri interface{} `pulumi:"serviceUri"`
	// Type of linked service.
	// Expected value is 'DynamicsCrm'.
	Type string `pulumi:"type"`
	// User name to access the Dynamics CRM instance. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// Dynamics CRM linked service.
type DynamicsCrmLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (DynamicsCrmLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsCrmLinkedServiceResponse)(nil)).Elem()
}

func (o DynamicsCrmLinkedServiceResponseOutput) ToDynamicsCrmLinkedServiceResponseOutput() DynamicsCrmLinkedServiceResponseOutput {
	return o
}

func (o DynamicsCrmLinkedServiceResponseOutput) ToDynamicsCrmLinkedServiceResponseOutputWithContext(ctx context.Context) DynamicsCrmLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o DynamicsCrmLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication type to connect to Dynamics CRM server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario, 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
func (o DynamicsCrmLinkedServiceResponseOutput) AuthenticationType() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedServiceResponse) interface{} { return v.AuthenticationType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o DynamicsCrmLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The deployment type of the Dynamics CRM instance. 'Online' for Dynamics CRM Online and 'OnPremisesWithIfd' for Dynamics CRM on-premises with Ifd. Type: string (or Expression with resultType string).
func (o DynamicsCrmLinkedServiceResponseOutput) DeploymentType() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedServiceResponse) interface{} { return v.DeploymentType }).(pulumi.AnyOutput)
}

// Linked service description.
func (o DynamicsCrmLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o DynamicsCrmLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The host name of the on-premises Dynamics CRM server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
func (o DynamicsCrmLinkedServiceResponseOutput) HostName() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedServiceResponse) interface{} { return v.HostName }).(pulumi.AnyOutput)
}

// The organization name of the Dynamics CRM instance. The property is required for on-prem and required for online when there are more than one Dynamics CRM instances associated with the user. Type: string (or Expression with resultType string).
func (o DynamicsCrmLinkedServiceResponseOutput) OrganizationName() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedServiceResponse) interface{} { return v.OrganizationName }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o DynamicsCrmLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Password to access the Dynamics CRM instance.
func (o DynamicsCrmLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The port of on-premises Dynamics CRM server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
func (o DynamicsCrmLinkedServiceResponseOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedServiceResponse) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
func (o DynamicsCrmLinkedServiceResponseOutput) ServicePrincipalCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedServiceResponse) interface{} { return v.ServicePrincipalCredential }).(pulumi.AnyOutput)
}

// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
func (o DynamicsCrmLinkedServiceResponseOutput) ServicePrincipalCredentialType() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedServiceResponse) interface{} { return v.ServicePrincipalCredentialType }).(pulumi.AnyOutput)
}

// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
func (o DynamicsCrmLinkedServiceResponseOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedServiceResponse) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The URL to the Microsoft Dynamics CRM server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
func (o DynamicsCrmLinkedServiceResponseOutput) ServiceUri() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedServiceResponse) interface{} { return v.ServiceUri }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'DynamicsCrm'.
func (o DynamicsCrmLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User name to access the Dynamics CRM instance. Type: string (or Expression with resultType string).
func (o DynamicsCrmLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// A copy activity Dynamics CRM sink.
type DynamicsCrmSink struct {
	// The logical name of the alternate key which will be used when upserting records. Type: string (or Expression with resultType string).
	AlternateKeyName interface{} `pulumi:"alternateKeyName"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The flag indicating whether to ignore null values from input dataset (except key fields) during write operation. Default is false. Type: boolean (or Expression with resultType boolean).
	IgnoreNullValues interface{} `pulumi:"ignoreNullValues"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'DynamicsCrmSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation.
	WriteBehavior string `pulumi:"writeBehavior"`
}

// DynamicsCrmSinkInput is an input type that accepts DynamicsCrmSinkArgs and DynamicsCrmSinkOutput values.
// You can construct a concrete instance of `DynamicsCrmSinkInput` via:
//
//	DynamicsCrmSinkArgs{...}
type DynamicsCrmSinkInput interface {
	pulumi.Input

	ToDynamicsCrmSinkOutput() DynamicsCrmSinkOutput
	ToDynamicsCrmSinkOutputWithContext(context.Context) DynamicsCrmSinkOutput
}

// A copy activity Dynamics CRM sink.
type DynamicsCrmSinkArgs struct {
	// The logical name of the alternate key which will be used when upserting records. Type: string (or Expression with resultType string).
	AlternateKeyName pulumi.Input `pulumi:"alternateKeyName"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The flag indicating whether to ignore null values from input dataset (except key fields) during write operation. Default is false. Type: boolean (or Expression with resultType boolean).
	IgnoreNullValues pulumi.Input `pulumi:"ignoreNullValues"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount pulumi.Input `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait pulumi.Input `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'DynamicsCrmSink'.
	Type pulumi.StringInput `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize pulumi.Input `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout pulumi.Input `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation.
	WriteBehavior pulumi.StringInput `pulumi:"writeBehavior"`
}

func (DynamicsCrmSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsCrmSink)(nil)).Elem()
}

func (i DynamicsCrmSinkArgs) ToDynamicsCrmSinkOutput() DynamicsCrmSinkOutput {
	return i.ToDynamicsCrmSinkOutputWithContext(context.Background())
}

func (i DynamicsCrmSinkArgs) ToDynamicsCrmSinkOutputWithContext(ctx context.Context) DynamicsCrmSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicsCrmSinkOutput)
}

// A copy activity Dynamics CRM sink.
type DynamicsCrmSinkOutput struct{ *pulumi.OutputState }

func (DynamicsCrmSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsCrmSink)(nil)).Elem()
}

func (o DynamicsCrmSinkOutput) ToDynamicsCrmSinkOutput() DynamicsCrmSinkOutput {
	return o
}

func (o DynamicsCrmSinkOutput) ToDynamicsCrmSinkOutputWithContext(ctx context.Context) DynamicsCrmSinkOutput {
	return o
}

// The logical name of the alternate key which will be used when upserting records. Type: string (or Expression with resultType string).
func (o DynamicsCrmSinkOutput) AlternateKeyName() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmSink) interface{} { return v.AlternateKeyName }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o DynamicsCrmSinkOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmSink) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The flag indicating whether to ignore null values from input dataset (except key fields) during write operation. Default is false. Type: boolean (or Expression with resultType boolean).
func (o DynamicsCrmSinkOutput) IgnoreNullValues() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmSink) interface{} { return v.IgnoreNullValues }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o DynamicsCrmSinkOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmSink) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o DynamicsCrmSinkOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmSink) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o DynamicsCrmSinkOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmSink) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'DynamicsCrmSink'.
func (o DynamicsCrmSinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsCrmSink) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o DynamicsCrmSinkOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmSink) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o DynamicsCrmSinkOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmSink) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// The write behavior for the operation.
func (o DynamicsCrmSinkOutput) WriteBehavior() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsCrmSink) string { return v.WriteBehavior }).(pulumi.StringOutput)
}

// A copy activity Dynamics CRM sink.
type DynamicsCrmSinkResponse struct {
	// The logical name of the alternate key which will be used when upserting records. Type: string (or Expression with resultType string).
	AlternateKeyName interface{} `pulumi:"alternateKeyName"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The flag indicating whether to ignore null values from input dataset (except key fields) during write operation. Default is false. Type: boolean (or Expression with resultType boolean).
	IgnoreNullValues interface{} `pulumi:"ignoreNullValues"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'DynamicsCrmSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation.
	WriteBehavior string `pulumi:"writeBehavior"`
}

// A copy activity Dynamics CRM sink.
type DynamicsCrmSinkResponseOutput struct{ *pulumi.OutputState }

func (DynamicsCrmSinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsCrmSinkResponse)(nil)).Elem()
}

func (o DynamicsCrmSinkResponseOutput) ToDynamicsCrmSinkResponseOutput() DynamicsCrmSinkResponseOutput {
	return o
}

func (o DynamicsCrmSinkResponseOutput) ToDynamicsCrmSinkResponseOutputWithContext(ctx context.Context) DynamicsCrmSinkResponseOutput {
	return o
}

// The logical name of the alternate key which will be used when upserting records. Type: string (or Expression with resultType string).
func (o DynamicsCrmSinkResponseOutput) AlternateKeyName() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmSinkResponse) interface{} { return v.AlternateKeyName }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o DynamicsCrmSinkResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmSinkResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The flag indicating whether to ignore null values from input dataset (except key fields) during write operation. Default is false. Type: boolean (or Expression with resultType boolean).
func (o DynamicsCrmSinkResponseOutput) IgnoreNullValues() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmSinkResponse) interface{} { return v.IgnoreNullValues }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o DynamicsCrmSinkResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmSinkResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o DynamicsCrmSinkResponseOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmSinkResponse) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o DynamicsCrmSinkResponseOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmSinkResponse) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'DynamicsCrmSink'.
func (o DynamicsCrmSinkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsCrmSinkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o DynamicsCrmSinkResponseOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmSinkResponse) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o DynamicsCrmSinkResponseOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmSinkResponse) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// The write behavior for the operation.
func (o DynamicsCrmSinkResponseOutput) WriteBehavior() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsCrmSinkResponse) string { return v.WriteBehavior }).(pulumi.StringOutput)
}

// A copy activity Dynamics CRM source.
type DynamicsCrmSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// FetchXML is a proprietary query language that is used in Microsoft Dynamics CRM (online & on-premises). Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'DynamicsCrmSource'.
	Type string `pulumi:"type"`
}

// DynamicsCrmSourceInput is an input type that accepts DynamicsCrmSourceArgs and DynamicsCrmSourceOutput values.
// You can construct a concrete instance of `DynamicsCrmSourceInput` via:
//
//	DynamicsCrmSourceArgs{...}
type DynamicsCrmSourceInput interface {
	pulumi.Input

	ToDynamicsCrmSourceOutput() DynamicsCrmSourceOutput
	ToDynamicsCrmSourceOutputWithContext(context.Context) DynamicsCrmSourceOutput
}

// A copy activity Dynamics CRM source.
type DynamicsCrmSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// FetchXML is a proprietary query language that is used in Microsoft Dynamics CRM (online & on-premises). Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'DynamicsCrmSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DynamicsCrmSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsCrmSource)(nil)).Elem()
}

func (i DynamicsCrmSourceArgs) ToDynamicsCrmSourceOutput() DynamicsCrmSourceOutput {
	return i.ToDynamicsCrmSourceOutputWithContext(context.Background())
}

func (i DynamicsCrmSourceArgs) ToDynamicsCrmSourceOutputWithContext(ctx context.Context) DynamicsCrmSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicsCrmSourceOutput)
}

// A copy activity Dynamics CRM source.
type DynamicsCrmSourceOutput struct{ *pulumi.OutputState }

func (DynamicsCrmSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsCrmSource)(nil)).Elem()
}

func (o DynamicsCrmSourceOutput) ToDynamicsCrmSourceOutput() DynamicsCrmSourceOutput {
	return o
}

func (o DynamicsCrmSourceOutput) ToDynamicsCrmSourceOutputWithContext(ctx context.Context) DynamicsCrmSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o DynamicsCrmSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o DynamicsCrmSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o DynamicsCrmSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// FetchXML is a proprietary query language that is used in Microsoft Dynamics CRM (online & on-premises). Type: string (or Expression with resultType string).
func (o DynamicsCrmSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o DynamicsCrmSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o DynamicsCrmSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'DynamicsCrmSource'.
func (o DynamicsCrmSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsCrmSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Dynamics CRM source.
type DynamicsCrmSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// FetchXML is a proprietary query language that is used in Microsoft Dynamics CRM (online & on-premises). Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'DynamicsCrmSource'.
	Type string `pulumi:"type"`
}

// A copy activity Dynamics CRM source.
type DynamicsCrmSourceResponseOutput struct{ *pulumi.OutputState }

func (DynamicsCrmSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsCrmSourceResponse)(nil)).Elem()
}

func (o DynamicsCrmSourceResponseOutput) ToDynamicsCrmSourceResponseOutput() DynamicsCrmSourceResponseOutput {
	return o
}

func (o DynamicsCrmSourceResponseOutput) ToDynamicsCrmSourceResponseOutputWithContext(ctx context.Context) DynamicsCrmSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o DynamicsCrmSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o DynamicsCrmSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o DynamicsCrmSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// FetchXML is a proprietary query language that is used in Microsoft Dynamics CRM (online & on-premises). Type: string (or Expression with resultType string).
func (o DynamicsCrmSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o DynamicsCrmSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o DynamicsCrmSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsCrmSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'DynamicsCrmSource'.
func (o DynamicsCrmSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsCrmSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The Dynamics entity dataset.
type DynamicsEntityDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The logical name of the entity. Type: string (or Expression with resultType string).
	EntityName interface{} `pulumi:"entityName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'DynamicsEntity'.
	Type string `pulumi:"type"`
}

// DynamicsEntityDatasetInput is an input type that accepts DynamicsEntityDatasetArgs and DynamicsEntityDatasetOutput values.
// You can construct a concrete instance of `DynamicsEntityDatasetInput` via:
//
//	DynamicsEntityDatasetArgs{...}
type DynamicsEntityDatasetInput interface {
	pulumi.Input

	ToDynamicsEntityDatasetOutput() DynamicsEntityDatasetOutput
	ToDynamicsEntityDatasetOutputWithContext(context.Context) DynamicsEntityDatasetOutput
}

// The Dynamics entity dataset.
type DynamicsEntityDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The logical name of the entity. Type: string (or Expression with resultType string).
	EntityName pulumi.Input `pulumi:"entityName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'DynamicsEntity'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DynamicsEntityDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsEntityDataset)(nil)).Elem()
}

func (i DynamicsEntityDatasetArgs) ToDynamicsEntityDatasetOutput() DynamicsEntityDatasetOutput {
	return i.ToDynamicsEntityDatasetOutputWithContext(context.Background())
}

func (i DynamicsEntityDatasetArgs) ToDynamicsEntityDatasetOutputWithContext(ctx context.Context) DynamicsEntityDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicsEntityDatasetOutput)
}

// The Dynamics entity dataset.
type DynamicsEntityDatasetOutput struct{ *pulumi.OutputState }

func (DynamicsEntityDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsEntityDataset)(nil)).Elem()
}

func (o DynamicsEntityDatasetOutput) ToDynamicsEntityDatasetOutput() DynamicsEntityDatasetOutput {
	return o
}

func (o DynamicsEntityDatasetOutput) ToDynamicsEntityDatasetOutputWithContext(ctx context.Context) DynamicsEntityDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o DynamicsEntityDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v DynamicsEntityDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o DynamicsEntityDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicsEntityDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The logical name of the entity. Type: string (or Expression with resultType string).
func (o DynamicsEntityDatasetOutput) EntityName() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsEntityDataset) interface{} { return v.EntityName }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o DynamicsEntityDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v DynamicsEntityDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o DynamicsEntityDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v DynamicsEntityDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o DynamicsEntityDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v DynamicsEntityDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o DynamicsEntityDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsEntityDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o DynamicsEntityDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsEntityDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'DynamicsEntity'.
func (o DynamicsEntityDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsEntityDataset) string { return v.Type }).(pulumi.StringOutput)
}

// The Dynamics entity dataset.
type DynamicsEntityDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The logical name of the entity. Type: string (or Expression with resultType string).
	EntityName interface{} `pulumi:"entityName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'DynamicsEntity'.
	Type string `pulumi:"type"`
}

// The Dynamics entity dataset.
type DynamicsEntityDatasetResponseOutput struct{ *pulumi.OutputState }

func (DynamicsEntityDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsEntityDatasetResponse)(nil)).Elem()
}

func (o DynamicsEntityDatasetResponseOutput) ToDynamicsEntityDatasetResponseOutput() DynamicsEntityDatasetResponseOutput {
	return o
}

func (o DynamicsEntityDatasetResponseOutput) ToDynamicsEntityDatasetResponseOutputWithContext(ctx context.Context) DynamicsEntityDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o DynamicsEntityDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v DynamicsEntityDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o DynamicsEntityDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicsEntityDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The logical name of the entity. Type: string (or Expression with resultType string).
func (o DynamicsEntityDatasetResponseOutput) EntityName() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsEntityDatasetResponse) interface{} { return v.EntityName }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o DynamicsEntityDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v DynamicsEntityDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o DynamicsEntityDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v DynamicsEntityDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o DynamicsEntityDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v DynamicsEntityDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o DynamicsEntityDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsEntityDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o DynamicsEntityDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsEntityDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'DynamicsEntity'.
func (o DynamicsEntityDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsEntityDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Dynamics linked service.
type DynamicsLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to connect to Dynamics server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario, 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReference `pulumi:"credential"`
	// The deployment type of the Dynamics instance. 'Online' for Dynamics Online and 'OnPremisesWithIfd' for Dynamics on-premises with Ifd. Type: string (or Expression with resultType string).
	DeploymentType interface{} `pulumi:"deploymentType"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The host name of the on-premises Dynamics server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
	HostName interface{} `pulumi:"hostName"`
	// The organization name of the Dynamics instance. The property is required for on-prem and required for online when there are more than one Dynamics instances associated with the user. Type: string (or Expression with resultType string).
	OrganizationName interface{} `pulumi:"organizationName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to access the Dynamics instance.
	Password interface{} `pulumi:"password"`
	// The port of on-premises Dynamics server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential interface{} `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType interface{} `pulumi:"servicePrincipalCredentialType"`
	// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The URL to the Microsoft Dynamics server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
	ServiceUri interface{} `pulumi:"serviceUri"`
	// Type of linked service.
	// Expected value is 'Dynamics'.
	Type string `pulumi:"type"`
	// User name to access the Dynamics instance. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// DynamicsLinkedServiceInput is an input type that accepts DynamicsLinkedServiceArgs and DynamicsLinkedServiceOutput values.
// You can construct a concrete instance of `DynamicsLinkedServiceInput` via:
//
//	DynamicsLinkedServiceArgs{...}
type DynamicsLinkedServiceInput interface {
	pulumi.Input

	ToDynamicsLinkedServiceOutput() DynamicsLinkedServiceOutput
	ToDynamicsLinkedServiceOutputWithContext(context.Context) DynamicsLinkedServiceOutput
}

// Dynamics linked service.
type DynamicsLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication type to connect to Dynamics server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario, 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
	AuthenticationType pulumi.Input `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential CredentialReferencePtrInput `pulumi:"credential"`
	// The deployment type of the Dynamics instance. 'Online' for Dynamics Online and 'OnPremisesWithIfd' for Dynamics on-premises with Ifd. Type: string (or Expression with resultType string).
	DeploymentType pulumi.Input `pulumi:"deploymentType"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// The host name of the on-premises Dynamics server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
	HostName pulumi.Input `pulumi:"hostName"`
	// The organization name of the Dynamics instance. The property is required for on-prem and required for online when there are more than one Dynamics instances associated with the user. Type: string (or Expression with resultType string).
	OrganizationName pulumi.Input `pulumi:"organizationName"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password to access the Dynamics instance.
	Password pulumi.Input `pulumi:"password"`
	// The port of on-premises Dynamics server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
	Port pulumi.Input `pulumi:"port"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential pulumi.Input `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType pulumi.Input `pulumi:"servicePrincipalCredentialType"`
	// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId pulumi.Input `pulumi:"servicePrincipalId"`
	// The URL to the Microsoft Dynamics server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
	ServiceUri pulumi.Input `pulumi:"serviceUri"`
	// Type of linked service.
	// Expected value is 'Dynamics'.
	Type pulumi.StringInput `pulumi:"type"`
	// User name to access the Dynamics instance. Type: string (or Expression with resultType string).
	Username pulumi.Input `pulumi:"username"`
}

func (DynamicsLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsLinkedService)(nil)).Elem()
}

func (i DynamicsLinkedServiceArgs) ToDynamicsLinkedServiceOutput() DynamicsLinkedServiceOutput {
	return i.ToDynamicsLinkedServiceOutputWithContext(context.Background())
}

func (i DynamicsLinkedServiceArgs) ToDynamicsLinkedServiceOutputWithContext(ctx context.Context) DynamicsLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicsLinkedServiceOutput)
}

// Dynamics linked service.
type DynamicsLinkedServiceOutput struct{ *pulumi.OutputState }

func (DynamicsLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsLinkedService)(nil)).Elem()
}

func (o DynamicsLinkedServiceOutput) ToDynamicsLinkedServiceOutput() DynamicsLinkedServiceOutput {
	return o
}

func (o DynamicsLinkedServiceOutput) ToDynamicsLinkedServiceOutputWithContext(ctx context.Context) DynamicsLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o DynamicsLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v DynamicsLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication type to connect to Dynamics server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario, 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
func (o DynamicsLinkedServiceOutput) AuthenticationType() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsLinkedService) interface{} { return v.AuthenticationType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o DynamicsLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v DynamicsLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// The credential reference containing authentication information.
func (o DynamicsLinkedServiceOutput) Credential() CredentialReferencePtrOutput {
	return o.ApplyT(func(v DynamicsLinkedService) *CredentialReference { return v.Credential }).(CredentialReferencePtrOutput)
}

// The deployment type of the Dynamics instance. 'Online' for Dynamics Online and 'OnPremisesWithIfd' for Dynamics on-premises with Ifd. Type: string (or Expression with resultType string).
func (o DynamicsLinkedServiceOutput) DeploymentType() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsLinkedService) interface{} { return v.DeploymentType }).(pulumi.AnyOutput)
}

// Linked service description.
func (o DynamicsLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicsLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o DynamicsLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicsLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The host name of the on-premises Dynamics server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
func (o DynamicsLinkedServiceOutput) HostName() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsLinkedService) interface{} { return v.HostName }).(pulumi.AnyOutput)
}

// The organization name of the Dynamics instance. The property is required for on-prem and required for online when there are more than one Dynamics instances associated with the user. Type: string (or Expression with resultType string).
func (o DynamicsLinkedServiceOutput) OrganizationName() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsLinkedService) interface{} { return v.OrganizationName }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o DynamicsLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v DynamicsLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Password to access the Dynamics instance.
func (o DynamicsLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The port of on-premises Dynamics server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
func (o DynamicsLinkedServiceOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsLinkedService) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
func (o DynamicsLinkedServiceOutput) ServicePrincipalCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsLinkedService) interface{} { return v.ServicePrincipalCredential }).(pulumi.AnyOutput)
}

// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
func (o DynamicsLinkedServiceOutput) ServicePrincipalCredentialType() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsLinkedService) interface{} { return v.ServicePrincipalCredentialType }).(pulumi.AnyOutput)
}

// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
func (o DynamicsLinkedServiceOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsLinkedService) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The URL to the Microsoft Dynamics server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
func (o DynamicsLinkedServiceOutput) ServiceUri() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsLinkedService) interface{} { return v.ServiceUri }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Dynamics'.
func (o DynamicsLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// User name to access the Dynamics instance. Type: string (or Expression with resultType string).
func (o DynamicsLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Dynamics linked service.
type DynamicsLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to connect to Dynamics server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario, 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
	AuthenticationType interface{} `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// The credential reference containing authentication information.
	Credential *CredentialReferenceResponse `pulumi:"credential"`
	// The deployment type of the Dynamics instance. 'Online' for Dynamics Online and 'OnPremisesWithIfd' for Dynamics on-premises with Ifd. Type: string (or Expression with resultType string).
	DeploymentType interface{} `pulumi:"deploymentType"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The host name of the on-premises Dynamics server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
	HostName interface{} `pulumi:"hostName"`
	// The organization name of the Dynamics instance. The property is required for on-prem and required for online when there are more than one Dynamics instances associated with the user. Type: string (or Expression with resultType string).
	OrganizationName interface{} `pulumi:"organizationName"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to access the Dynamics instance.
	Password interface{} `pulumi:"password"`
	// The port of on-premises Dynamics server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential interface{} `pulumi:"servicePrincipalCredential"`
	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
	ServicePrincipalCredentialType interface{} `pulumi:"servicePrincipalCredentialType"`
	// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
	ServicePrincipalId interface{} `pulumi:"servicePrincipalId"`
	// The URL to the Microsoft Dynamics server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
	ServiceUri interface{} `pulumi:"serviceUri"`
	// Type of linked service.
	// Expected value is 'Dynamics'.
	Type string `pulumi:"type"`
	// User name to access the Dynamics instance. Type: string (or Expression with resultType string).
	Username interface{} `pulumi:"username"`
}

// Dynamics linked service.
type DynamicsLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (DynamicsLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsLinkedServiceResponse)(nil)).Elem()
}

func (o DynamicsLinkedServiceResponseOutput) ToDynamicsLinkedServiceResponseOutput() DynamicsLinkedServiceResponseOutput {
	return o
}

func (o DynamicsLinkedServiceResponseOutput) ToDynamicsLinkedServiceResponseOutputWithContext(ctx context.Context) DynamicsLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o DynamicsLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication type to connect to Dynamics server. 'Office365' for online scenario, 'Ifd' for on-premises with Ifd scenario, 'AADServicePrincipal' for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string).
func (o DynamicsLinkedServiceResponseOutput) AuthenticationType() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) interface{} { return v.AuthenticationType }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o DynamicsLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// The credential reference containing authentication information.
func (o DynamicsLinkedServiceResponseOutput) Credential() CredentialReferenceResponsePtrOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) *CredentialReferenceResponse { return v.Credential }).(CredentialReferenceResponsePtrOutput)
}

// The deployment type of the Dynamics instance. 'Online' for Dynamics Online and 'OnPremisesWithIfd' for Dynamics on-premises with Ifd. Type: string (or Expression with resultType string).
func (o DynamicsLinkedServiceResponseOutput) DeploymentType() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) interface{} { return v.DeploymentType }).(pulumi.AnyOutput)
}

// Linked service description.
func (o DynamicsLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o DynamicsLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The host name of the on-premises Dynamics server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string).
func (o DynamicsLinkedServiceResponseOutput) HostName() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) interface{} { return v.HostName }).(pulumi.AnyOutput)
}

// The organization name of the Dynamics instance. The property is required for on-prem and required for online when there are more than one Dynamics instances associated with the user. Type: string (or Expression with resultType string).
func (o DynamicsLinkedServiceResponseOutput) OrganizationName() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) interface{} { return v.OrganizationName }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o DynamicsLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password to access the Dynamics instance.
func (o DynamicsLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The port of on-premises Dynamics server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0.
func (o DynamicsLinkedServiceResponseOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
func (o DynamicsLinkedServiceResponseOutput) ServicePrincipalCredential() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) interface{} { return v.ServicePrincipalCredential }).(pulumi.AnyOutput)
}

// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string).
func (o DynamicsLinkedServiceResponseOutput) ServicePrincipalCredentialType() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) interface{} { return v.ServicePrincipalCredentialType }).(pulumi.AnyOutput)
}

// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
func (o DynamicsLinkedServiceResponseOutput) ServicePrincipalId() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) interface{} { return v.ServicePrincipalId }).(pulumi.AnyOutput)
}

// The URL to the Microsoft Dynamics server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string).
func (o DynamicsLinkedServiceResponseOutput) ServiceUri() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) interface{} { return v.ServiceUri }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Dynamics'.
func (o DynamicsLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User name to access the Dynamics instance. Type: string (or Expression with resultType string).
func (o DynamicsLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// A copy activity Dynamics sink.
type DynamicsSink struct {
	// The logical name of the alternate key which will be used when upserting records. Type: string (or Expression with resultType string).
	AlternateKeyName interface{} `pulumi:"alternateKeyName"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The flag indicating whether ignore null values from input dataset (except key fields) during write operation. Default is false. Type: boolean (or Expression with resultType boolean).
	IgnoreNullValues interface{} `pulumi:"ignoreNullValues"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'DynamicsSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation.
	WriteBehavior string `pulumi:"writeBehavior"`
}

// DynamicsSinkInput is an input type that accepts DynamicsSinkArgs and DynamicsSinkOutput values.
// You can construct a concrete instance of `DynamicsSinkInput` via:
//
//	DynamicsSinkArgs{...}
type DynamicsSinkInput interface {
	pulumi.Input

	ToDynamicsSinkOutput() DynamicsSinkOutput
	ToDynamicsSinkOutputWithContext(context.Context) DynamicsSinkOutput
}

// A copy activity Dynamics sink.
type DynamicsSinkArgs struct {
	// The logical name of the alternate key which will be used when upserting records. Type: string (or Expression with resultType string).
	AlternateKeyName pulumi.Input `pulumi:"alternateKeyName"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The flag indicating whether ignore null values from input dataset (except key fields) during write operation. Default is false. Type: boolean (or Expression with resultType boolean).
	IgnoreNullValues pulumi.Input `pulumi:"ignoreNullValues"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount pulumi.Input `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait pulumi.Input `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'DynamicsSink'.
	Type pulumi.StringInput `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize pulumi.Input `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout pulumi.Input `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation.
	WriteBehavior pulumi.StringInput `pulumi:"writeBehavior"`
}

func (DynamicsSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsSink)(nil)).Elem()
}

func (i DynamicsSinkArgs) ToDynamicsSinkOutput() DynamicsSinkOutput {
	return i.ToDynamicsSinkOutputWithContext(context.Background())
}

func (i DynamicsSinkArgs) ToDynamicsSinkOutputWithContext(ctx context.Context) DynamicsSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicsSinkOutput)
}

// A copy activity Dynamics sink.
type DynamicsSinkOutput struct{ *pulumi.OutputState }

func (DynamicsSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsSink)(nil)).Elem()
}

func (o DynamicsSinkOutput) ToDynamicsSinkOutput() DynamicsSinkOutput {
	return o
}

func (o DynamicsSinkOutput) ToDynamicsSinkOutputWithContext(ctx context.Context) DynamicsSinkOutput {
	return o
}

// The logical name of the alternate key which will be used when upserting records. Type: string (or Expression with resultType string).
func (o DynamicsSinkOutput) AlternateKeyName() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsSink) interface{} { return v.AlternateKeyName }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o DynamicsSinkOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsSink) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The flag indicating whether ignore null values from input dataset (except key fields) during write operation. Default is false. Type: boolean (or Expression with resultType boolean).
func (o DynamicsSinkOutput) IgnoreNullValues() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsSink) interface{} { return v.IgnoreNullValues }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o DynamicsSinkOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsSink) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o DynamicsSinkOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsSink) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o DynamicsSinkOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsSink) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'DynamicsSink'.
func (o DynamicsSinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsSink) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o DynamicsSinkOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsSink) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o DynamicsSinkOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsSink) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// The write behavior for the operation.
func (o DynamicsSinkOutput) WriteBehavior() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsSink) string { return v.WriteBehavior }).(pulumi.StringOutput)
}

// A copy activity Dynamics sink.
type DynamicsSinkResponse struct {
	// The logical name of the alternate key which will be used when upserting records. Type: string (or Expression with resultType string).
	AlternateKeyName interface{} `pulumi:"alternateKeyName"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The flag indicating whether ignore null values from input dataset (except key fields) during write operation. Default is false. Type: boolean (or Expression with resultType boolean).
	IgnoreNullValues interface{} `pulumi:"ignoreNullValues"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'DynamicsSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
	// The write behavior for the operation.
	WriteBehavior string `pulumi:"writeBehavior"`
}

// A copy activity Dynamics sink.
type DynamicsSinkResponseOutput struct{ *pulumi.OutputState }

func (DynamicsSinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsSinkResponse)(nil)).Elem()
}

func (o DynamicsSinkResponseOutput) ToDynamicsSinkResponseOutput() DynamicsSinkResponseOutput {
	return o
}

func (o DynamicsSinkResponseOutput) ToDynamicsSinkResponseOutputWithContext(ctx context.Context) DynamicsSinkResponseOutput {
	return o
}

// The logical name of the alternate key which will be used when upserting records. Type: string (or Expression with resultType string).
func (o DynamicsSinkResponseOutput) AlternateKeyName() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsSinkResponse) interface{} { return v.AlternateKeyName }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o DynamicsSinkResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsSinkResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The flag indicating whether ignore null values from input dataset (except key fields) during write operation. Default is false. Type: boolean (or Expression with resultType boolean).
func (o DynamicsSinkResponseOutput) IgnoreNullValues() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsSinkResponse) interface{} { return v.IgnoreNullValues }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o DynamicsSinkResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsSinkResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o DynamicsSinkResponseOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsSinkResponse) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o DynamicsSinkResponseOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsSinkResponse) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'DynamicsSink'.
func (o DynamicsSinkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsSinkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o DynamicsSinkResponseOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsSinkResponse) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o DynamicsSinkResponseOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsSinkResponse) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// The write behavior for the operation.
func (o DynamicsSinkResponseOutput) WriteBehavior() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsSinkResponse) string { return v.WriteBehavior }).(pulumi.StringOutput)
}

// A copy activity Dynamics source.
type DynamicsSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// FetchXML is a proprietary query language that is used in Microsoft Dynamics (online & on-premises). Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'DynamicsSource'.
	Type string `pulumi:"type"`
}

// DynamicsSourceInput is an input type that accepts DynamicsSourceArgs and DynamicsSourceOutput values.
// You can construct a concrete instance of `DynamicsSourceInput` via:
//
//	DynamicsSourceArgs{...}
type DynamicsSourceInput interface {
	pulumi.Input

	ToDynamicsSourceOutput() DynamicsSourceOutput
	ToDynamicsSourceOutputWithContext(context.Context) DynamicsSourceOutput
}

// A copy activity Dynamics source.
type DynamicsSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// FetchXML is a proprietary query language that is used in Microsoft Dynamics (online & on-premises). Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'DynamicsSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DynamicsSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsSource)(nil)).Elem()
}

func (i DynamicsSourceArgs) ToDynamicsSourceOutput() DynamicsSourceOutput {
	return i.ToDynamicsSourceOutputWithContext(context.Background())
}

func (i DynamicsSourceArgs) ToDynamicsSourceOutputWithContext(ctx context.Context) DynamicsSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicsSourceOutput)
}

// A copy activity Dynamics source.
type DynamicsSourceOutput struct{ *pulumi.OutputState }

func (DynamicsSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsSource)(nil)).Elem()
}

func (o DynamicsSourceOutput) ToDynamicsSourceOutput() DynamicsSourceOutput {
	return o
}

func (o DynamicsSourceOutput) ToDynamicsSourceOutputWithContext(ctx context.Context) DynamicsSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o DynamicsSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o DynamicsSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o DynamicsSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// FetchXML is a proprietary query language that is used in Microsoft Dynamics (online & on-premises). Type: string (or Expression with resultType string).
func (o DynamicsSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o DynamicsSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o DynamicsSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'DynamicsSource'.
func (o DynamicsSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Dynamics source.
type DynamicsSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// FetchXML is a proprietary query language that is used in Microsoft Dynamics (online & on-premises). Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'DynamicsSource'.
	Type string `pulumi:"type"`
}

// A copy activity Dynamics source.
type DynamicsSourceResponseOutput struct{ *pulumi.OutputState }

func (DynamicsSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicsSourceResponse)(nil)).Elem()
}

func (o DynamicsSourceResponseOutput) ToDynamicsSourceResponseOutput() DynamicsSourceResponseOutput {
	return o
}

func (o DynamicsSourceResponseOutput) ToDynamicsSourceResponseOutputWithContext(ctx context.Context) DynamicsSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o DynamicsSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o DynamicsSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o DynamicsSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// FetchXML is a proprietary query language that is used in Microsoft Dynamics (online & on-premises). Type: string (or Expression with resultType string).
func (o DynamicsSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o DynamicsSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o DynamicsSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v DynamicsSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'DynamicsSource'.
func (o DynamicsSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicsSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Eloqua server linked service.
type EloquaLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The endpoint of the Eloqua server. (i.e. eloqua.example.com)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Eloqua'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
	// The site name and user name of your Eloqua account in the form: sitename/username. (i.e. Eloqua/Alice)
	Username interface{} `pulumi:"username"`
}

// EloquaLinkedServiceInput is an input type that accepts EloquaLinkedServiceArgs and EloquaLinkedServiceOutput values.
// You can construct a concrete instance of `EloquaLinkedServiceInput` via:
//
//	EloquaLinkedServiceArgs{...}
type EloquaLinkedServiceInput interface {
	pulumi.Input

	ToEloquaLinkedServiceOutput() EloquaLinkedServiceOutput
	ToEloquaLinkedServiceOutputWithContext(context.Context) EloquaLinkedServiceOutput
}

// Eloqua server linked service.
type EloquaLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// The endpoint of the Eloqua server. (i.e. eloqua.example.com)
	Endpoint pulumi.Input `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Eloqua'.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints pulumi.Input `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification pulumi.Input `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification pulumi.Input `pulumi:"usePeerVerification"`
	// The site name and user name of your Eloqua account in the form: sitename/username. (i.e. Eloqua/Alice)
	Username pulumi.Input `pulumi:"username"`
}

func (EloquaLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EloquaLinkedService)(nil)).Elem()
}

func (i EloquaLinkedServiceArgs) ToEloquaLinkedServiceOutput() EloquaLinkedServiceOutput {
	return i.ToEloquaLinkedServiceOutputWithContext(context.Background())
}

func (i EloquaLinkedServiceArgs) ToEloquaLinkedServiceOutputWithContext(ctx context.Context) EloquaLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EloquaLinkedServiceOutput)
}

// Eloqua server linked service.
type EloquaLinkedServiceOutput struct{ *pulumi.OutputState }

func (EloquaLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EloquaLinkedService)(nil)).Elem()
}

func (o EloquaLinkedServiceOutput) ToEloquaLinkedServiceOutput() EloquaLinkedServiceOutput {
	return o
}

func (o EloquaLinkedServiceOutput) ToEloquaLinkedServiceOutputWithContext(ctx context.Context) EloquaLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o EloquaLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v EloquaLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o EloquaLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v EloquaLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o EloquaLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EloquaLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o EloquaLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EloquaLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The endpoint of the Eloqua server. (i.e. eloqua.example.com)
func (o EloquaLinkedServiceOutput) Endpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaLinkedService) interface{} { return v.Endpoint }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o EloquaLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v EloquaLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The password corresponding to the user name.
func (o EloquaLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Eloqua'.
func (o EloquaLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EloquaLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o EloquaLinkedServiceOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaLinkedService) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o EloquaLinkedServiceOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaLinkedService) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o EloquaLinkedServiceOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaLinkedService) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// The site name and user name of your Eloqua account in the form: sitename/username. (i.e. Eloqua/Alice)
func (o EloquaLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Eloqua server linked service.
type EloquaLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The endpoint of the Eloqua server. (i.e. eloqua.example.com)
	Endpoint interface{} `pulumi:"endpoint"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'Eloqua'.
	Type string `pulumi:"type"`
	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints interface{} `pulumi:"useEncryptedEndpoints"`
	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
	UseHostVerification interface{} `pulumi:"useHostVerification"`
	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification interface{} `pulumi:"usePeerVerification"`
	// The site name and user name of your Eloqua account in the form: sitename/username. (i.e. Eloqua/Alice)
	Username interface{} `pulumi:"username"`
}

// Eloqua server linked service.
type EloquaLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (EloquaLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EloquaLinkedServiceResponse)(nil)).Elem()
}

func (o EloquaLinkedServiceResponseOutput) ToEloquaLinkedServiceResponseOutput() EloquaLinkedServiceResponseOutput {
	return o
}

func (o EloquaLinkedServiceResponseOutput) ToEloquaLinkedServiceResponseOutputWithContext(ctx context.Context) EloquaLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o EloquaLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v EloquaLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o EloquaLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v EloquaLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o EloquaLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EloquaLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o EloquaLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EloquaLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The endpoint of the Eloqua server. (i.e. eloqua.example.com)
func (o EloquaLinkedServiceResponseOutput) Endpoint() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaLinkedServiceResponse) interface{} { return v.Endpoint }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o EloquaLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v EloquaLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The password corresponding to the user name.
func (o EloquaLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'Eloqua'.
func (o EloquaLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EloquaLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
func (o EloquaLinkedServiceResponseOutput) UseEncryptedEndpoints() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaLinkedServiceResponse) interface{} { return v.UseEncryptedEndpoints }).(pulumi.AnyOutput)
}

// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting over SSL. The default value is true.
func (o EloquaLinkedServiceResponseOutput) UseHostVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaLinkedServiceResponse) interface{} { return v.UseHostVerification }).(pulumi.AnyOutput)
}

// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
func (o EloquaLinkedServiceResponseOutput) UsePeerVerification() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaLinkedServiceResponse) interface{} { return v.UsePeerVerification }).(pulumi.AnyOutput)
}

// The site name and user name of your Eloqua account in the form: sitename/username. (i.e. Eloqua/Alice)
func (o EloquaLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// Eloqua server dataset.
type EloquaObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'EloquaObject'.
	Type string `pulumi:"type"`
}

// EloquaObjectDatasetInput is an input type that accepts EloquaObjectDatasetArgs and EloquaObjectDatasetOutput values.
// You can construct a concrete instance of `EloquaObjectDatasetInput` via:
//
//	EloquaObjectDatasetArgs{...}
type EloquaObjectDatasetInput interface {
	pulumi.Input

	ToEloquaObjectDatasetOutput() EloquaObjectDatasetOutput
	ToEloquaObjectDatasetOutputWithContext(context.Context) EloquaObjectDatasetOutput
}

// Eloqua server dataset.
type EloquaObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'EloquaObject'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (EloquaObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EloquaObjectDataset)(nil)).Elem()
}

func (i EloquaObjectDatasetArgs) ToEloquaObjectDatasetOutput() EloquaObjectDatasetOutput {
	return i.ToEloquaObjectDatasetOutputWithContext(context.Background())
}

func (i EloquaObjectDatasetArgs) ToEloquaObjectDatasetOutputWithContext(ctx context.Context) EloquaObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EloquaObjectDatasetOutput)
}

// Eloqua server dataset.
type EloquaObjectDatasetOutput struct{ *pulumi.OutputState }

func (EloquaObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EloquaObjectDataset)(nil)).Elem()
}

func (o EloquaObjectDatasetOutput) ToEloquaObjectDatasetOutput() EloquaObjectDatasetOutput {
	return o
}

func (o EloquaObjectDatasetOutput) ToEloquaObjectDatasetOutputWithContext(ctx context.Context) EloquaObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o EloquaObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v EloquaObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o EloquaObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EloquaObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o EloquaObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v EloquaObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o EloquaObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v EloquaObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o EloquaObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v EloquaObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o EloquaObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o EloquaObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o EloquaObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'EloquaObject'.
func (o EloquaObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EloquaObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Eloqua server dataset.
type EloquaObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'EloquaObject'.
	Type string `pulumi:"type"`
}

// Eloqua server dataset.
type EloquaObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (EloquaObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EloquaObjectDatasetResponse)(nil)).Elem()
}

func (o EloquaObjectDatasetResponseOutput) ToEloquaObjectDatasetResponseOutput() EloquaObjectDatasetResponseOutput {
	return o
}

func (o EloquaObjectDatasetResponseOutput) ToEloquaObjectDatasetResponseOutputWithContext(ctx context.Context) EloquaObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o EloquaObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v EloquaObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o EloquaObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EloquaObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o EloquaObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v EloquaObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o EloquaObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v EloquaObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o EloquaObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v EloquaObjectDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o EloquaObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o EloquaObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o EloquaObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'EloquaObject'.
func (o EloquaObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EloquaObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Eloqua server source.
type EloquaSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'EloquaSource'.
	Type string `pulumi:"type"`
}

// EloquaSourceInput is an input type that accepts EloquaSourceArgs and EloquaSourceOutput values.
// You can construct a concrete instance of `EloquaSourceInput` via:
//
//	EloquaSourceArgs{...}
type EloquaSourceInput interface {
	pulumi.Input

	ToEloquaSourceOutput() EloquaSourceOutput
	ToEloquaSourceOutputWithContext(context.Context) EloquaSourceOutput
}

// A copy activity Eloqua server source.
type EloquaSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'EloquaSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (EloquaSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EloquaSource)(nil)).Elem()
}

func (i EloquaSourceArgs) ToEloquaSourceOutput() EloquaSourceOutput {
	return i.ToEloquaSourceOutputWithContext(context.Background())
}

func (i EloquaSourceArgs) ToEloquaSourceOutputWithContext(ctx context.Context) EloquaSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EloquaSourceOutput)
}

// A copy activity Eloqua server source.
type EloquaSourceOutput struct{ *pulumi.OutputState }

func (EloquaSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EloquaSource)(nil)).Elem()
}

func (o EloquaSourceOutput) ToEloquaSourceOutput() EloquaSourceOutput {
	return o
}

func (o EloquaSourceOutput) ToEloquaSourceOutputWithContext(ctx context.Context) EloquaSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o EloquaSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o EloquaSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o EloquaSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o EloquaSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o EloquaSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o EloquaSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o EloquaSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'EloquaSource'.
func (o EloquaSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EloquaSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Eloqua server source.
type EloquaSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'EloquaSource'.
	Type string `pulumi:"type"`
}

// A copy activity Eloqua server source.
type EloquaSourceResponseOutput struct{ *pulumi.OutputState }

func (EloquaSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EloquaSourceResponse)(nil)).Elem()
}

func (o EloquaSourceResponseOutput) ToEloquaSourceResponseOutput() EloquaSourceResponseOutput {
	return o
}

func (o EloquaSourceResponseOutput) ToEloquaSourceResponseOutputWithContext(ctx context.Context) EloquaSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o EloquaSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o EloquaSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o EloquaSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o EloquaSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o EloquaSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o EloquaSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o EloquaSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v EloquaSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'EloquaSource'.
func (o EloquaSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EloquaSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Definition of CMK for the factory.
type EncryptionConfiguration struct {
	// User assigned identity to use to authenticate to customer's key vault. If not provided Managed Service Identity will be used.
	Identity *CMKIdentityDefinition `pulumi:"identity"`
	// The name of the key in Azure Key Vault to use as Customer Managed Key.
	KeyName string `pulumi:"keyName"`
	// The version of the key used for CMK. If not provided, latest version will be used.
	KeyVersion *string `pulumi:"keyVersion"`
	// The url of the Azure Key Vault used for CMK.
	VaultBaseUrl string `pulumi:"vaultBaseUrl"`
}

// EncryptionConfigurationInput is an input type that accepts EncryptionConfigurationArgs and EncryptionConfigurationOutput values.
// You can construct a concrete instance of `EncryptionConfigurationInput` via:
//
//	EncryptionConfigurationArgs{...}
type EncryptionConfigurationInput interface {
	pulumi.Input

	ToEncryptionConfigurationOutput() EncryptionConfigurationOutput
	ToEncryptionConfigurationOutputWithContext(context.Context) EncryptionConfigurationOutput
}

// Definition of CMK for the factory.
type EncryptionConfigurationArgs struct {
	// User assigned identity to use to authenticate to customer's key vault. If not provided Managed Service Identity will be used.
	Identity CMKIdentityDefinitionPtrInput `pulumi:"identity"`
	// The name of the key in Azure Key Vault to use as Customer Managed Key.
	KeyName pulumi.StringInput `pulumi:"keyName"`
	// The version of the key used for CMK. If not provided, latest version will be used.
	KeyVersion pulumi.StringPtrInput `pulumi:"keyVersion"`
	// The url of the Azure Key Vault used for CMK.
	VaultBaseUrl pulumi.StringInput `pulumi:"vaultBaseUrl"`
}

func (EncryptionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfiguration)(nil)).Elem()
}

func (i EncryptionConfigurationArgs) ToEncryptionConfigurationOutput() EncryptionConfigurationOutput {
	return i.ToEncryptionConfigurationOutputWithContext(context.Background())
}

func (i EncryptionConfigurationArgs) ToEncryptionConfigurationOutputWithContext(ctx context.Context) EncryptionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigurationOutput)
}

func (i EncryptionConfigurationArgs) ToEncryptionConfigurationPtrOutput() EncryptionConfigurationPtrOutput {
	return i.ToEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i EncryptionConfigurationArgs) ToEncryptionConfigurationPtrOutputWithContext(ctx context.Context) EncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigurationOutput).ToEncryptionConfigurationPtrOutputWithContext(ctx)
}

// EncryptionConfigurationPtrInput is an input type that accepts EncryptionConfigurationArgs, EncryptionConfigurationPtr and EncryptionConfigurationPtrOutput values.
// You can construct a concrete instance of `EncryptionConfigurationPtrInput` via:
//
//	        EncryptionConfigurationArgs{...}
//
//	or:
//
//	        nil
type EncryptionConfigurationPtrInput interface {
	pulumi.Input

	ToEncryptionConfigurationPtrOutput() EncryptionConfigurationPtrOutput
	ToEncryptionConfigurationPtrOutputWithContext(context.Context) EncryptionConfigurationPtrOutput
}

type encryptionConfigurationPtrType EncryptionConfigurationArgs

func EncryptionConfigurationPtr(v *EncryptionConfigurationArgs) EncryptionConfigurationPtrInput {
	return (*encryptionConfigurationPtrType)(v)
}

func (*encryptionConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionConfiguration)(nil)).Elem()
}

func (i *encryptionConfigurationPtrType) ToEncryptionConfigurationPtrOutput() EncryptionConfigurationPtrOutput {
	return i.ToEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i *encryptionConfigurationPtrType) ToEncryptionConfigurationPtrOutputWithContext(ctx context.Context) EncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigurationPtrOutput)
}

// Definition of CMK for the factory.
type EncryptionConfigurationOutput struct{ *pulumi.OutputState }

func (EncryptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfiguration)(nil)).Elem()
}

func (o EncryptionConfigurationOutput) ToEncryptionConfigurationOutput() EncryptionConfigurationOutput {
	return o
}

func (o EncryptionConfigurationOutput) ToEncryptionConfigurationOutputWithContext(ctx context.Context) EncryptionConfigurationOutput {
	return o
}

func (o EncryptionConfigurationOutput) ToEncryptionConfigurationPtrOutput() EncryptionConfigurationPtrOutput {
	return o.ToEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (o EncryptionConfigurationOutput) ToEncryptionConfigurationPtrOutputWithContext(ctx context.Context) EncryptionConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EncryptionConfiguration) *EncryptionConfiguration {
		return &v
	}).(EncryptionConfigurationPtrOutput)
}

// User assigned identity to use to authenticate to customer's key vault. If not provided Managed Service Identity will be used.
func (o EncryptionConfigurationOutput) Identity() CMKIdentityDefinitionPtrOutput {
	return o.ApplyT(func(v EncryptionConfiguration) *CMKIdentityDefinition { return v.Identity }).(CMKIdentityDefinitionPtrOutput)
}

// The name of the key in Azure Key Vault to use as Customer Managed Key.
func (o EncryptionConfigurationOutput) KeyName() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionConfiguration) string { return v.KeyName }).(pulumi.StringOutput)
}

// The version of the key used for CMK. If not provided, latest version will be used.
func (o EncryptionConfigurationOutput) KeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionConfiguration) *string { return v.KeyVersion }).(pulumi.StringPtrOutput)
}

// The url of the Azure Key Vault used for CMK.
func (o EncryptionConfigurationOutput) VaultBaseUrl() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionConfiguration) string { return v.VaultBaseUrl }).(pulumi.StringOutput)
}

type EncryptionConfigurationPtrOutput struct{ *pulumi.OutputState }

func (EncryptionConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionConfiguration)(nil)).Elem()
}

func (o EncryptionConfigurationPtrOutput) ToEncryptionConfigurationPtrOutput() EncryptionConfigurationPtrOutput {
	return o
}

func (o EncryptionConfigurationPtrOutput) ToEncryptionConfigurationPtrOutputWithContext(ctx context.Context) EncryptionConfigurationPtrOutput {
	return o
}

func (o EncryptionConfigurationPtrOutput) Elem() EncryptionConfigurationOutput {
	return o.ApplyT(func(v *EncryptionConfiguration) EncryptionConfiguration {
		if v != nil {
			return *v
		}
		var ret EncryptionConfiguration
		return ret
	}).(EncryptionConfigurationOutput)
}

// User assigned identity to use to authenticate to customer's key vault. If not provided Managed Service Identity will be used.
func (o EncryptionConfigurationPtrOutput) Identity() CMKIdentityDefinitionPtrOutput {
	return o.ApplyT(func(v *EncryptionConfiguration) *CMKIdentityDefinition {
		if v == nil {
			return nil
		}
		return v.Identity
	}).(CMKIdentityDefinitionPtrOutput)
}

// The name of the key in Azure Key Vault to use as Customer Managed Key.
func (o EncryptionConfigurationPtrOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.KeyName
	}).(pulumi.StringPtrOutput)
}

// The version of the key used for CMK. If not provided, latest version will be used.
func (o EncryptionConfigurationPtrOutput) KeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.KeyVersion
	}).(pulumi.StringPtrOutput)
}

// The url of the Azure Key Vault used for CMK.
func (o EncryptionConfigurationPtrOutput) VaultBaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.VaultBaseUrl
	}).(pulumi.StringPtrOutput)
}

// Definition of CMK for the factory.
type EncryptionConfigurationResponse struct {
	// User assigned identity to use to authenticate to customer's key vault. If not provided Managed Service Identity will be used.
	Identity *CMKIdentityDefinitionResponse `pulumi:"identity"`
	// The name of the key in Azure Key Vault to use as Customer Managed Key.
	KeyName string `pulumi:"keyName"`
	// The version of the key used for CMK. If not provided, latest version will be used.
	KeyVersion *string `pulumi:"keyVersion"`
	// The url of the Azure Key Vault used for CMK.
	VaultBaseUrl string `pulumi:"vaultBaseUrl"`
}

// Definition of CMK for the factory.
type EncryptionConfigurationResponseOutput struct{ *pulumi.OutputState }

func (EncryptionConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfigurationResponse)(nil)).Elem()
}

func (o EncryptionConfigurationResponseOutput) ToEncryptionConfigurationResponseOutput() EncryptionConfigurationResponseOutput {
	return o
}

func (o EncryptionConfigurationResponseOutput) ToEncryptionConfigurationResponseOutputWithContext(ctx context.Context) EncryptionConfigurationResponseOutput {
	return o
}

// User assigned identity to use to authenticate to customer's key vault. If not provided Managed Service Identity will be used.
func (o EncryptionConfigurationResponseOutput) Identity() CMKIdentityDefinitionResponsePtrOutput {
	return o.ApplyT(func(v EncryptionConfigurationResponse) *CMKIdentityDefinitionResponse { return v.Identity }).(CMKIdentityDefinitionResponsePtrOutput)
}

// The name of the key in Azure Key Vault to use as Customer Managed Key.
func (o EncryptionConfigurationResponseOutput) KeyName() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionConfigurationResponse) string { return v.KeyName }).(pulumi.StringOutput)
}

// The version of the key used for CMK. If not provided, latest version will be used.
func (o EncryptionConfigurationResponseOutput) KeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionConfigurationResponse) *string { return v.KeyVersion }).(pulumi.StringPtrOutput)
}

// The url of the Azure Key Vault used for CMK.
func (o EncryptionConfigurationResponseOutput) VaultBaseUrl() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionConfigurationResponse) string { return v.VaultBaseUrl }).(pulumi.StringOutput)
}

type EncryptionConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (EncryptionConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionConfigurationResponse)(nil)).Elem()
}

func (o EncryptionConfigurationResponsePtrOutput) ToEncryptionConfigurationResponsePtrOutput() EncryptionConfigurationResponsePtrOutput {
	return o
}

func (o EncryptionConfigurationResponsePtrOutput) ToEncryptionConfigurationResponsePtrOutputWithContext(ctx context.Context) EncryptionConfigurationResponsePtrOutput {
	return o
}

func (o EncryptionConfigurationResponsePtrOutput) Elem() EncryptionConfigurationResponseOutput {
	return o.ApplyT(func(v *EncryptionConfigurationResponse) EncryptionConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret EncryptionConfigurationResponse
		return ret
	}).(EncryptionConfigurationResponseOutput)
}

// User assigned identity to use to authenticate to customer's key vault. If not provided Managed Service Identity will be used.
func (o EncryptionConfigurationResponsePtrOutput) Identity() CMKIdentityDefinitionResponsePtrOutput {
	return o.ApplyT(func(v *EncryptionConfigurationResponse) *CMKIdentityDefinitionResponse {
		if v == nil {
			return nil
		}
		return v.Identity
	}).(CMKIdentityDefinitionResponsePtrOutput)
}

// The name of the key in Azure Key Vault to use as Customer Managed Key.
func (o EncryptionConfigurationResponsePtrOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KeyName
	}).(pulumi.StringPtrOutput)
}

// The version of the key used for CMK. If not provided, latest version will be used.
func (o EncryptionConfigurationResponsePtrOutput) KeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.KeyVersion
	}).(pulumi.StringPtrOutput)
}

// The url of the Azure Key Vault used for CMK.
func (o EncryptionConfigurationResponsePtrOutput) VaultBaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.VaultBaseUrl
	}).(pulumi.StringPtrOutput)
}

// The entity reference.
type EntityReference struct {
	// The name of this referenced entity.
	ReferenceName *string `pulumi:"referenceName"`
	// The type of this referenced entity.
	Type *string `pulumi:"type"`
}

// EntityReferenceInput is an input type that accepts EntityReferenceArgs and EntityReferenceOutput values.
// You can construct a concrete instance of `EntityReferenceInput` via:
//
//	EntityReferenceArgs{...}
type EntityReferenceInput interface {
	pulumi.Input

	ToEntityReferenceOutput() EntityReferenceOutput
	ToEntityReferenceOutputWithContext(context.Context) EntityReferenceOutput
}

// The entity reference.
type EntityReferenceArgs struct {
	// The name of this referenced entity.
	ReferenceName pulumi.StringPtrInput `pulumi:"referenceName"`
	// The type of this referenced entity.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (EntityReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityReference)(nil)).Elem()
}

func (i EntityReferenceArgs) ToEntityReferenceOutput() EntityReferenceOutput {
	return i.ToEntityReferenceOutputWithContext(context.Background())
}

func (i EntityReferenceArgs) ToEntityReferenceOutputWithContext(ctx context.Context) EntityReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityReferenceOutput)
}

func (i EntityReferenceArgs) ToEntityReferencePtrOutput() EntityReferencePtrOutput {
	return i.ToEntityReferencePtrOutputWithContext(context.Background())
}

func (i EntityReferenceArgs) ToEntityReferencePtrOutputWithContext(ctx context.Context) EntityReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityReferenceOutput).ToEntityReferencePtrOutputWithContext(ctx)
}

// EntityReferencePtrInput is an input type that accepts EntityReferenceArgs, EntityReferencePtr and EntityReferencePtrOutput values.
// You can construct a concrete instance of `EntityReferencePtrInput` via:
//
//	        EntityReferenceArgs{...}
//
//	or:
//
//	        nil
type EntityReferencePtrInput interface {
	pulumi.Input

	ToEntityReferencePtrOutput() EntityReferencePtrOutput
	ToEntityReferencePtrOutputWithContext(context.Context) EntityReferencePtrOutput
}

type entityReferencePtrType EntityReferenceArgs

func EntityReferencePtr(v *EntityReferenceArgs) EntityReferencePtrInput {
	return (*entityReferencePtrType)(v)
}

func (*entityReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityReference)(nil)).Elem()
}

func (i *entityReferencePtrType) ToEntityReferencePtrOutput() EntityReferencePtrOutput {
	return i.ToEntityReferencePtrOutputWithContext(context.Background())
}

func (i *entityReferencePtrType) ToEntityReferencePtrOutputWithContext(ctx context.Context) EntityReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityReferencePtrOutput)
}

// The entity reference.
type EntityReferenceOutput struct{ *pulumi.OutputState }

func (EntityReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityReference)(nil)).Elem()
}

func (o EntityReferenceOutput) ToEntityReferenceOutput() EntityReferenceOutput {
	return o
}

func (o EntityReferenceOutput) ToEntityReferenceOutputWithContext(ctx context.Context) EntityReferenceOutput {
	return o
}

func (o EntityReferenceOutput) ToEntityReferencePtrOutput() EntityReferencePtrOutput {
	return o.ToEntityReferencePtrOutputWithContext(context.Background())
}

func (o EntityReferenceOutput) ToEntityReferencePtrOutputWithContext(ctx context.Context) EntityReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EntityReference) *EntityReference {
		return &v
	}).(EntityReferencePtrOutput)
}

// The name of this referenced entity.
func (o EntityReferenceOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityReference) *string { return v.ReferenceName }).(pulumi.StringPtrOutput)
}

// The type of this referenced entity.
func (o EntityReferenceOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityReference) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type EntityReferencePtrOutput struct{ *pulumi.OutputState }

func (EntityReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityReference)(nil)).Elem()
}

func (o EntityReferencePtrOutput) ToEntityReferencePtrOutput() EntityReferencePtrOutput {
	return o
}

func (o EntityReferencePtrOutput) ToEntityReferencePtrOutputWithContext(ctx context.Context) EntityReferencePtrOutput {
	return o
}

func (o EntityReferencePtrOutput) Elem() EntityReferenceOutput {
	return o.ApplyT(func(v *EntityReference) EntityReference {
		if v != nil {
			return *v
		}
		var ret EntityReference
		return ret
	}).(EntityReferenceOutput)
}

// The name of this referenced entity.
func (o EntityReferencePtrOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntityReference) *string {
		if v == nil {
			return nil
		}
		return v.ReferenceName
	}).(pulumi.StringPtrOutput)
}

// The type of this referenced entity.
func (o EntityReferencePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntityReference) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The entity reference.
type EntityReferenceResponse struct {
	// The name of this referenced entity.
	ReferenceName *string `pulumi:"referenceName"`
	// The type of this referenced entity.
	Type *string `pulumi:"type"`
}

// The entity reference.
type EntityReferenceResponseOutput struct{ *pulumi.OutputState }

func (EntityReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityReferenceResponse)(nil)).Elem()
}

func (o EntityReferenceResponseOutput) ToEntityReferenceResponseOutput() EntityReferenceResponseOutput {
	return o
}

func (o EntityReferenceResponseOutput) ToEntityReferenceResponseOutputWithContext(ctx context.Context) EntityReferenceResponseOutput {
	return o
}

// The name of this referenced entity.
func (o EntityReferenceResponseOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityReferenceResponse) *string { return v.ReferenceName }).(pulumi.StringPtrOutput)
}

// The type of this referenced entity.
func (o EntityReferenceResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityReferenceResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type EntityReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (EntityReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityReferenceResponse)(nil)).Elem()
}

func (o EntityReferenceResponsePtrOutput) ToEntityReferenceResponsePtrOutput() EntityReferenceResponsePtrOutput {
	return o
}

func (o EntityReferenceResponsePtrOutput) ToEntityReferenceResponsePtrOutputWithContext(ctx context.Context) EntityReferenceResponsePtrOutput {
	return o
}

func (o EntityReferenceResponsePtrOutput) Elem() EntityReferenceResponseOutput {
	return o.ApplyT(func(v *EntityReferenceResponse) EntityReferenceResponse {
		if v != nil {
			return *v
		}
		var ret EntityReferenceResponse
		return ret
	}).(EntityReferenceResponseOutput)
}

// The name of this referenced entity.
func (o EntityReferenceResponsePtrOutput) ReferenceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntityReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.ReferenceName
	}).(pulumi.StringPtrOutput)
}

// The type of this referenced entity.
func (o EntityReferenceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntityReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The custom setup of setting environment variable.
type EnvironmentVariableSetup struct {
	// The type of custom setup.
	// Expected value is 'EnvironmentVariableSetup'.
	Type string `pulumi:"type"`
	// The name of the environment variable.
	VariableName string `pulumi:"variableName"`
	// The value of the environment variable.
	VariableValue string `pulumi:"variableValue"`
}

// EnvironmentVariableSetupInput is an input type that accepts EnvironmentVariableSetupArgs and EnvironmentVariableSetupOutput values.
// You can construct a concrete instance of `EnvironmentVariableSetupInput` via:
//
//	EnvironmentVariableSetupArgs{...}
type EnvironmentVariableSetupInput interface {
	pulumi.Input

	ToEnvironmentVariableSetupOutput() EnvironmentVariableSetupOutput
	ToEnvironmentVariableSetupOutputWithContext(context.Context) EnvironmentVariableSetupOutput
}

// The custom setup of setting environment variable.
type EnvironmentVariableSetupArgs struct {
	// The type of custom setup.
	// Expected value is 'EnvironmentVariableSetup'.
	Type pulumi.StringInput `pulumi:"type"`
	// The name of the environment variable.
	VariableName pulumi.StringInput `pulumi:"variableName"`
	// The value of the environment variable.
	VariableValue pulumi.StringInput `pulumi:"variableValue"`
}

func (EnvironmentVariableSetupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariableSetup)(nil)).Elem()
}

func (i EnvironmentVariableSetupArgs) ToEnvironmentVariableSetupOutput() EnvironmentVariableSetupOutput {
	return i.ToEnvironmentVariableSetupOutputWithContext(context.Background())
}

func (i EnvironmentVariableSetupArgs) ToEnvironmentVariableSetupOutputWithContext(ctx context.Context) EnvironmentVariableSetupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVariableSetupOutput)
}

// The custom setup of setting environment variable.
type EnvironmentVariableSetupOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableSetupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariableSetup)(nil)).Elem()
}

func (o EnvironmentVariableSetupOutput) ToEnvironmentVariableSetupOutput() EnvironmentVariableSetupOutput {
	return o
}

func (o EnvironmentVariableSetupOutput) ToEnvironmentVariableSetupOutputWithContext(ctx context.Context) EnvironmentVariableSetupOutput {
	return o
}

// The type of custom setup.
// Expected value is 'EnvironmentVariableSetup'.
func (o EnvironmentVariableSetupOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentVariableSetup) string { return v.Type }).(pulumi.StringOutput)
}

// The name of the environment variable.
func (o EnvironmentVariableSetupOutput) VariableName() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentVariableSetup) string { return v.VariableName }).(pulumi.StringOutput)
}

// The value of the environment variable.
func (o EnvironmentVariableSetupOutput) VariableValue() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentVariableSetup) string { return v.VariableValue }).(pulumi.StringOutput)
}

// The custom setup of setting environment variable.
type EnvironmentVariableSetupResponse struct {
	// The type of custom setup.
	// Expected value is 'EnvironmentVariableSetup'.
	Type string `pulumi:"type"`
	// The name of the environment variable.
	VariableName string `pulumi:"variableName"`
	// The value of the environment variable.
	VariableValue string `pulumi:"variableValue"`
}

// The custom setup of setting environment variable.
type EnvironmentVariableSetupResponseOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableSetupResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariableSetupResponse)(nil)).Elem()
}

func (o EnvironmentVariableSetupResponseOutput) ToEnvironmentVariableSetupResponseOutput() EnvironmentVariableSetupResponseOutput {
	return o
}

func (o EnvironmentVariableSetupResponseOutput) ToEnvironmentVariableSetupResponseOutputWithContext(ctx context.Context) EnvironmentVariableSetupResponseOutput {
	return o
}

// The type of custom setup.
// Expected value is 'EnvironmentVariableSetup'.
func (o EnvironmentVariableSetupResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentVariableSetupResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The name of the environment variable.
func (o EnvironmentVariableSetupResponseOutput) VariableName() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentVariableSetupResponse) string { return v.VariableName }).(pulumi.StringOutput)
}

// The value of the environment variable.
func (o EnvironmentVariableSetupResponseOutput) VariableValue() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentVariableSetupResponse) string { return v.VariableValue }).(pulumi.StringOutput)
}

// Excel dataset.
type ExcelDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the json dataset.
	Compression *DatasetCompression `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
	FirstRowAsHeader interface{} `pulumi:"firstRowAsHeader"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The location of the excel storage.
	Location interface{} `pulumi:"location"`
	// The null value string. Type: string (or Expression with resultType string).
	NullValue interface{} `pulumi:"nullValue"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The partial data of one sheet. Type: string (or Expression with resultType string).
	Range interface{} `pulumi:"range"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// The sheet index of excel file and default value is 0. Type: integer (or Expression with resultType integer)
	SheetIndex interface{} `pulumi:"sheetIndex"`
	// The sheet name of excel file. Type: string (or Expression with resultType string).
	SheetName interface{} `pulumi:"sheetName"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Excel'.
	Type string `pulumi:"type"`
}

// ExcelDatasetInput is an input type that accepts ExcelDatasetArgs and ExcelDatasetOutput values.
// You can construct a concrete instance of `ExcelDatasetInput` via:
//
//	ExcelDatasetArgs{...}
type ExcelDatasetInput interface {
	pulumi.Input

	ToExcelDatasetOutput() ExcelDatasetOutput
	ToExcelDatasetOutputWithContext(context.Context) ExcelDatasetOutput
}

// Excel dataset.
type ExcelDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The data compression method used for the json dataset.
	Compression DatasetCompressionPtrInput `pulumi:"compression"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
	FirstRowAsHeader pulumi.Input `pulumi:"firstRowAsHeader"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// The location of the excel storage.
	Location pulumi.Input `pulumi:"location"`
	// The null value string. Type: string (or Expression with resultType string).
	NullValue pulumi.Input `pulumi:"nullValue"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The partial data of one sheet. Type: string (or Expression with resultType string).
	Range pulumi.Input `pulumi:"range"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// The sheet index of excel file and default value is 0. Type: integer (or Expression with resultType integer)
	SheetIndex pulumi.Input `pulumi:"sheetIndex"`
	// The sheet name of excel file. Type: string (or Expression with resultType string).
	SheetName pulumi.Input `pulumi:"sheetName"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Excel'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ExcelDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExcelDataset)(nil)).Elem()
}

func (i ExcelDatasetArgs) ToExcelDatasetOutput() ExcelDatasetOutput {
	return i.ToExcelDatasetOutputWithContext(context.Background())
}

func (i ExcelDatasetArgs) ToExcelDatasetOutputWithContext(ctx context.Context) ExcelDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExcelDatasetOutput)
}

// Excel dataset.
type ExcelDatasetOutput struct{ *pulumi.OutputState }

func (ExcelDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExcelDataset)(nil)).Elem()
}

func (o ExcelDatasetOutput) ToExcelDatasetOutput() ExcelDatasetOutput {
	return o
}

func (o ExcelDatasetOutput) ToExcelDatasetOutputWithContext(ctx context.Context) ExcelDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ExcelDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ExcelDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The data compression method used for the json dataset.
func (o ExcelDatasetOutput) Compression() DatasetCompressionPtrOutput {
	return o.ApplyT(func(v ExcelDataset) *DatasetCompression { return v.Compression }).(DatasetCompressionPtrOutput)
}

// Dataset description.
func (o ExcelDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExcelDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
func (o ExcelDatasetOutput) FirstRowAsHeader() pulumi.AnyOutput {
	return o.ApplyT(func(v ExcelDataset) interface{} { return v.FirstRowAsHeader }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o ExcelDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v ExcelDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o ExcelDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v ExcelDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// The location of the excel storage.
func (o ExcelDatasetOutput) Location() pulumi.AnyOutput {
	return o.ApplyT(func(v ExcelDataset) interface{} { return v.Location }).(pulumi.AnyOutput)
}

// The null value string. Type: string (or Expression with resultType string).
func (o ExcelDatasetOutput) NullValue() pulumi.AnyOutput {
	return o.ApplyT(func(v ExcelDataset) interface{} { return v.NullValue }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o ExcelDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v ExcelDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The partial data of one sheet. Type: string (or Expression with resultType string).
func (o ExcelDatasetOutput) Range() pulumi.AnyOutput {
	return o.ApplyT(func(v ExcelDataset) interface{} { return v.Range }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o ExcelDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v ExcelDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// The sheet index of excel file and default value is 0. Type: integer (or Expression with resultType integer)
func (o ExcelDatasetOutput) SheetIndex() pulumi.AnyOutput {
	return o.ApplyT(func(v ExcelDataset) interface{} { return v.SheetIndex }).(pulumi.AnyOutput)
}

// The sheet name of excel file. Type: string (or Expression with resultType string).
func (o ExcelDatasetOutput) SheetName() pulumi.AnyOutput {
	return o.ApplyT(func(v ExcelDataset) interface{} { return v.SheetName }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ExcelDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v ExcelDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'Excel'.
func (o ExcelDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExcelDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Excel dataset.
type ExcelDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the json dataset.
	Compression *DatasetCompressionResponse `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
	FirstRowAsHeader interface{} `pulumi:"firstRowAsHeader"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The location of the excel storage.
	Location interface{} `pulumi:"location"`
	// The null value string. Type: string (or Expression with resultType string).
	NullValue interface{} `pulumi:"nullValue"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The partial data of one sheet. Type: string (or Expression with resultType string).
	Range interface{} `pulumi:"range"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// The sheet index of excel file and default value is 0. Type: integer (or Expression with resultType integer)
	SheetIndex interface{} `pulumi:"sheetIndex"`
	// The sheet name of excel file. Type: string (or Expression with resultType string).
	SheetName interface{} `pulumi:"sheetName"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'Excel'.
	Type string `pulumi:"type"`
}

// Excel dataset.
type ExcelDatasetResponseOutput struct{ *pulumi.OutputState }

func (ExcelDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExcelDatasetResponse)(nil)).Elem()
}

func (o ExcelDatasetResponseOutput) ToExcelDatasetResponseOutput() ExcelDatasetResponseOutput {
	return o
}

func (o ExcelDatasetResponseOutput) ToExcelDatasetResponseOutputWithContext(ctx context.Context) ExcelDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o ExcelDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v ExcelDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The data compression method used for the json dataset.
func (o ExcelDatasetResponseOutput) Compression() DatasetCompressionResponsePtrOutput {
	return o.ApplyT(func(v ExcelDatasetResponse) *DatasetCompressionResponse { return v.Compression }).(DatasetCompressionResponsePtrOutput)
}

// Dataset description.
func (o ExcelDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExcelDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
func (o ExcelDatasetResponseOutput) FirstRowAsHeader() pulumi.AnyOutput {
	return o.ApplyT(func(v ExcelDatasetResponse) interface{} { return v.FirstRowAsHeader }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o ExcelDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v ExcelDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o ExcelDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v ExcelDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// The location of the excel storage.
func (o ExcelDatasetResponseOutput) Location() pulumi.AnyOutput {
	return o.ApplyT(func(v ExcelDatasetResponse) interface{} { return v.Location }).(pulumi.AnyOutput)
}

// The null value string. Type: string (or Expression with resultType string).
func (o ExcelDatasetResponseOutput) NullValue() pulumi.AnyOutput {
	return o.ApplyT(func(v ExcelDatasetResponse) interface{} { return v.NullValue }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o ExcelDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v ExcelDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The partial data of one sheet. Type: string (or Expression with resultType string).
func (o ExcelDatasetResponseOutput) Range() pulumi.AnyOutput {
	return o.ApplyT(func(v ExcelDatasetResponse) interface{} { return v.Range }).(pulumi.AnyOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o ExcelDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v ExcelDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// The sheet index of excel file and default value is 0. Type: integer (or Expression with resultType integer)
func (o ExcelDatasetResponseOutput) SheetIndex() pulumi.AnyOutput {
	return o.ApplyT(func(v ExcelDatasetResponse) interface{} { return v.SheetIndex }).(pulumi.AnyOutput)
}

// The sheet name of excel file. Type: string (or Expression with resultType string).
func (o ExcelDatasetResponseOutput) SheetName() pulumi.AnyOutput {
	return o.ApplyT(func(v ExcelDatasetResponse) interface{} { return v.SheetName }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o ExcelDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v ExcelDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'Excel'.
func (o ExcelDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExcelDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity excel source.
type ExcelSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Excel store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'ExcelSource'.
	Type string `pulumi:"type"`
}

// ExcelSourceInput is an input type that accepts ExcelSourceArgs and ExcelSourceOutput values.
// You can construct a concrete instance of `ExcelSourceInput` via:
//
//	ExcelSourceArgs{...}
type ExcelSourceInput interface {
	pulumi.Input

	ToExcelSourceOutput() ExcelSourceOutput
	ToExcelSourceOutputWithContext(context.Context) ExcelSourceOutput
}

// A copy activity excel source.
type ExcelSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Excel store settings.
	StoreSettings pulumi.Input `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'ExcelSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ExcelSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExcelSource)(nil)).Elem()
}

func (i ExcelSourceArgs) ToExcelSourceOutput() ExcelSourceOutput {
	return i.ToExcelSourceOutputWithContext(context.Background())
}

func (i ExcelSourceArgs) ToExcelSourceOutputWithContext(ctx context.Context) ExcelSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExcelSourceOutput)
}

// A copy activity excel source.
type ExcelSourceOutput struct{ *pulumi.OutputState }

func (ExcelSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExcelSource)(nil)).Elem()
}

func (o ExcelSourceOutput) ToExcelSourceOutput() ExcelSourceOutput {
	return o
}

func (o ExcelSourceOutput) ToExcelSourceOutputWithContext(ctx context.Context) ExcelSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o ExcelSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v ExcelSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o ExcelSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v ExcelSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o ExcelSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v ExcelSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o ExcelSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v ExcelSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ExcelSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v ExcelSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Excel store settings.
func (o ExcelSourceOutput) StoreSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v ExcelSource) interface{} { return v.StoreSettings }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'ExcelSource'.
func (o ExcelSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExcelSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity excel source.
type ExcelSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Excel store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Copy source type.
	// Expected value is 'ExcelSource'.
	Type string `pulumi:"type"`
}

// A copy activity excel source.
type ExcelSourceResponseOutput struct{ *pulumi.OutputState }

func (ExcelSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExcelSourceResponse)(nil)).Elem()
}

func (o ExcelSourceResponseOutput) ToExcelSourceResponseOutput() ExcelSourceResponseOutput {
	return o
}

func (o ExcelSourceResponseOutput) ToExcelSourceResponseOutputWithContext(ctx context.Context) ExcelSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o ExcelSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v ExcelSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o ExcelSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v ExcelSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o ExcelSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v ExcelSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o ExcelSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v ExcelSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o ExcelSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v ExcelSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Excel store settings.
func (o ExcelSourceResponseOutput) StoreSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v ExcelSourceResponse) interface{} { return v.StoreSettings }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'ExcelSource'.
func (o ExcelSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExcelSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Execute data flow activity.
type ExecuteDataFlowActivity struct {
	// Compute properties for data flow activity.
	Compute *ExecuteDataFlowActivityTypePropertiesCompute `pulumi:"compute"`
	// Continue on error setting used for data flow execution. Enables processing to continue if a sink fails. Type: boolean (or Expression with resultType boolean)
	ContinueOnError interface{} `pulumi:"continueOnError"`
	// Data flow reference.
	DataFlow DataFlowReference `pulumi:"dataFlow"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// The integration runtime reference.
	IntegrationRuntime *IntegrationRuntimeReference `pulumi:"integrationRuntime"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Concurrent run setting used for data flow execution. Allows sinks with the same save order to be processed concurrently. Type: boolean (or Expression with resultType boolean)
	RunConcurrently interface{} `pulumi:"runConcurrently"`
	// Specify number of parallel staging for sources applicable to the sink. Type: integer (or Expression with resultType integer)
	SourceStagingConcurrency interface{} `pulumi:"sourceStagingConcurrency"`
	// Staging info for execute data flow activity.
	Staging *DataFlowStagingInfo `pulumi:"staging"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Trace level setting used for data flow monitoring output. Supported values are: 'coarse', 'fine', and 'none'. Type: string (or Expression with resultType string)
	TraceLevel interface{} `pulumi:"traceLevel"`
	// Type of activity.
	// Expected value is 'ExecuteDataFlow'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// ExecuteDataFlowActivityInput is an input type that accepts ExecuteDataFlowActivityArgs and ExecuteDataFlowActivityOutput values.
// You can construct a concrete instance of `ExecuteDataFlowActivityInput` via:
//
//	ExecuteDataFlowActivityArgs{...}
type ExecuteDataFlowActivityInput interface {
	pulumi.Input

	ToExecuteDataFlowActivityOutput() ExecuteDataFlowActivityOutput
	ToExecuteDataFlowActivityOutputWithContext(context.Context) ExecuteDataFlowActivityOutput
}

// Execute data flow activity.
type ExecuteDataFlowActivityArgs struct {
	// Compute properties for data flow activity.
	Compute ExecuteDataFlowActivityTypePropertiesComputePtrInput `pulumi:"compute"`
	// Continue on error setting used for data flow execution. Enables processing to continue if a sink fails. Type: boolean (or Expression with resultType boolean)
	ContinueOnError pulumi.Input `pulumi:"continueOnError"`
	// Data flow reference.
	DataFlow DataFlowReferenceInput `pulumi:"dataFlow"`
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The integration runtime reference.
	IntegrationRuntime IntegrationRuntimeReferencePtrInput `pulumi:"integrationRuntime"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferencePtrInput `pulumi:"linkedServiceName"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs pulumi.StringPtrInput `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy ActivityPolicyPtrInput `pulumi:"policy"`
	// Concurrent run setting used for data flow execution. Allows sinks with the same save order to be processed concurrently. Type: boolean (or Expression with resultType boolean)
	RunConcurrently pulumi.Input `pulumi:"runConcurrently"`
	// Specify number of parallel staging for sources applicable to the sink. Type: integer (or Expression with resultType integer)
	SourceStagingConcurrency pulumi.Input `pulumi:"sourceStagingConcurrency"`
	// Staging info for execute data flow activity.
	Staging DataFlowStagingInfoPtrInput `pulumi:"staging"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Trace level setting used for data flow monitoring output. Supported values are: 'coarse', 'fine', and 'none'. Type: string (or Expression with resultType string)
	TraceLevel pulumi.Input `pulumi:"traceLevel"`
	// Type of activity.
	// Expected value is 'ExecuteDataFlow'.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
}

func (ExecuteDataFlowActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecuteDataFlowActivity)(nil)).Elem()
}

func (i ExecuteDataFlowActivityArgs) ToExecuteDataFlowActivityOutput() ExecuteDataFlowActivityOutput {
	return i.ToExecuteDataFlowActivityOutputWithContext(context.Background())
}

func (i ExecuteDataFlowActivityArgs) ToExecuteDataFlowActivityOutputWithContext(ctx context.Context) ExecuteDataFlowActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecuteDataFlowActivityOutput)
}

// Execute data flow activity.
type ExecuteDataFlowActivityOutput struct{ *pulumi.OutputState }

func (ExecuteDataFlowActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecuteDataFlowActivity)(nil)).Elem()
}

func (o ExecuteDataFlowActivityOutput) ToExecuteDataFlowActivityOutput() ExecuteDataFlowActivityOutput {
	return o
}

func (o ExecuteDataFlowActivityOutput) ToExecuteDataFlowActivityOutputWithContext(ctx context.Context) ExecuteDataFlowActivityOutput {
	return o
}

// Compute properties for data flow activity.
func (o ExecuteDataFlowActivityOutput) Compute() ExecuteDataFlowActivityTypePropertiesComputePtrOutput {
	return o.ApplyT(func(v ExecuteDataFlowActivity) *ExecuteDataFlowActivityTypePropertiesCompute { return v.Compute }).(ExecuteDataFlowActivityTypePropertiesComputePtrOutput)
}

// Continue on error setting used for data flow execution. Enables processing to continue if a sink fails. Type: boolean (or Expression with resultType boolean)
func (o ExecuteDataFlowActivityOutput) ContinueOnError() pulumi.AnyOutput {
	return o.ApplyT(func(v ExecuteDataFlowActivity) interface{} { return v.ContinueOnError }).(pulumi.AnyOutput)
}

// Data flow reference.
func (o ExecuteDataFlowActivityOutput) DataFlow() DataFlowReferenceOutput {
	return o.ApplyT(func(v ExecuteDataFlowActivity) DataFlowReference { return v.DataFlow }).(DataFlowReferenceOutput)
}

// Activity depends on condition.
func (o ExecuteDataFlowActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v ExecuteDataFlowActivity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o ExecuteDataFlowActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecuteDataFlowActivity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The integration runtime reference.
func (o ExecuteDataFlowActivityOutput) IntegrationRuntime() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v ExecuteDataFlowActivity) *IntegrationRuntimeReference { return v.IntegrationRuntime }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service reference.
func (o ExecuteDataFlowActivityOutput) LinkedServiceName() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v ExecuteDataFlowActivity) *LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferencePtrOutput)
}

// Activity name.
func (o ExecuteDataFlowActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExecuteDataFlowActivity) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o ExecuteDataFlowActivityOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecuteDataFlowActivity) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o ExecuteDataFlowActivityOutput) Policy() ActivityPolicyPtrOutput {
	return o.ApplyT(func(v ExecuteDataFlowActivity) *ActivityPolicy { return v.Policy }).(ActivityPolicyPtrOutput)
}

// Concurrent run setting used for data flow execution. Allows sinks with the same save order to be processed concurrently. Type: boolean (or Expression with resultType boolean)
func (o ExecuteDataFlowActivityOutput) RunConcurrently() pulumi.AnyOutput {
	return o.ApplyT(func(v ExecuteDataFlowActivity) interface{} { return v.RunConcurrently }).(pulumi.AnyOutput)
}

// Specify number of parallel staging for sources applicable to the sink. Type: integer (or Expression with resultType integer)
func (o ExecuteDataFlowActivityOutput) SourceStagingConcurrency() pulumi.AnyOutput {
	return o.ApplyT(func(v ExecuteDataFlowActivity) interface{} { return v.SourceStagingConcurrency }).(pulumi.AnyOutput)
}

// Staging info for execute data flow activity.
func (o ExecuteDataFlowActivityOutput) Staging() DataFlowStagingInfoPtrOutput {
	return o.ApplyT(func(v ExecuteDataFlowActivity) *DataFlowStagingInfo { return v.Staging }).(DataFlowStagingInfoPtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o ExecuteDataFlowActivityOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecuteDataFlowActivity) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Trace level setting used for data flow monitoring output. Supported values are: 'coarse', 'fine', and 'none'. Type: string (or Expression with resultType string)
func (o ExecuteDataFlowActivityOutput) TraceLevel() pulumi.AnyOutput {
	return o.ApplyT(func(v ExecuteDataFlowActivity) interface{} { return v.TraceLevel }).(pulumi.AnyOutput)
}

// Type of activity.
// Expected value is 'ExecuteDataFlow'.
func (o ExecuteDataFlowActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExecuteDataFlowActivity) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o ExecuteDataFlowActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v ExecuteDataFlowActivity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

// Execute data flow activity.
type ExecuteDataFlowActivityResponse struct {
	// Compute properties for data flow activity.
	Compute *ExecuteDataFlowActivityTypePropertiesResponseCompute `pulumi:"compute"`
	// Continue on error setting used for data flow execution. Enables processing to continue if a sink fails. Type: boolean (or Expression with resultType boolean)
	ContinueOnError interface{} `pulumi:"continueOnError"`
	// Data flow reference.
	DataFlow DataFlowReferenceResponse `pulumi:"dataFlow"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// The integration runtime reference.
	IntegrationRuntime *IntegrationRuntimeReferenceResponse `pulumi:"integrationRuntime"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Concurrent run setting used for data flow execution. Allows sinks with the same save order to be processed concurrently. Type: boolean (or Expression with resultType boolean)
	RunConcurrently interface{} `pulumi:"runConcurrently"`
	// Specify number of parallel staging for sources applicable to the sink. Type: integer (or Expression with resultType integer)
	SourceStagingConcurrency interface{} `pulumi:"sourceStagingConcurrency"`
	// Staging info for execute data flow activity.
	Staging *DataFlowStagingInfoResponse `pulumi:"staging"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Trace level setting used for data flow monitoring output. Supported values are: 'coarse', 'fine', and 'none'. Type: string (or Expression with resultType string)
	TraceLevel interface{} `pulumi:"traceLevel"`
	// Type of activity.
	// Expected value is 'ExecuteDataFlow'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Execute data flow activity.
type ExecuteDataFlowActivityResponseOutput struct{ *pulumi.OutputState }

func (ExecuteDataFlowActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecuteDataFlowActivityResponse)(nil)).Elem()
}

func (o ExecuteDataFlowActivityResponseOutput) ToExecuteDataFlowActivityResponseOutput() ExecuteDataFlowActivityResponseOutput {
	return o
}

func (o ExecuteDataFlowActivityResponseOutput) ToExecuteDataFlowActivityResponseOutputWithContext(ctx context.Context) ExecuteDataFlowActivityResponseOutput {
	return o
}

// Compute properties for data flow activity.
func (o ExecuteDataFlowActivityResponseOutput) Compute() ExecuteDataFlowActivityTypePropertiesResponseComputePtrOutput {
	return o.ApplyT(func(v ExecuteDataFlowActivityResponse) *ExecuteDataFlowActivityTypePropertiesResponseCompute {
		return v.Compute
	}).(ExecuteDataFlowActivityTypePropertiesResponseComputePtrOutput)
}

// Continue on error setting used for data flow execution. Enables processing to continue if a sink fails. Type: boolean (or Expression with resultType boolean)
func (o ExecuteDataFlowActivityResponseOutput) ContinueOnError() pulumi.AnyOutput {
	return o.ApplyT(func(v ExecuteDataFlowActivityResponse) interface{} { return v.ContinueOnError }).(pulumi.AnyOutput)
}

// Data flow reference.
func (o ExecuteDataFlowActivityResponseOutput) DataFlow() DataFlowReferenceResponseOutput {
	return o.ApplyT(func(v ExecuteDataFlowActivityResponse) DataFlowReferenceResponse { return v.DataFlow }).(DataFlowReferenceResponseOutput)
}

// Activity depends on condition.
func (o ExecuteDataFlowActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v ExecuteDataFlowActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o ExecuteDataFlowActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecuteDataFlowActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The integration runtime reference.
func (o ExecuteDataFlowActivityResponseOutput) IntegrationRuntime() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v ExecuteDataFlowActivityResponse) *IntegrationRuntimeReferenceResponse {
		return v.IntegrationRuntime
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service reference.
func (o ExecuteDataFlowActivityResponseOutput) LinkedServiceName() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v ExecuteDataFlowActivityResponse) *LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponsePtrOutput)
}

// Activity name.
func (o ExecuteDataFlowActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExecuteDataFlowActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o ExecuteDataFlowActivityResponseOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecuteDataFlowActivityResponse) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o ExecuteDataFlowActivityResponseOutput) Policy() ActivityPolicyResponsePtrOutput {
	return o.ApplyT(func(v ExecuteDataFlowActivityResponse) *ActivityPolicyResponse { return v.Policy }).(ActivityPolicyResponsePtrOutput)
}

// Concurrent run setting used for data flow execution. Allows sinks with the same save order to be processed concurrently. Type: boolean (or Expression with resultType boolean)
func (o ExecuteDataFlowActivityResponseOutput) RunConcurrently() pulumi.AnyOutput {
	return o.ApplyT(func(v ExecuteDataFlowActivityResponse) interface{} { return v.RunConcurrently }).(pulumi.AnyOutput)
}

// Specify number of parallel staging for sources applicable to the sink. Type: integer (or Expression with resultType integer)
func (o ExecuteDataFlowActivityResponseOutput) SourceStagingConcurrency() pulumi.AnyOutput {
	return o.ApplyT(func(v ExecuteDataFlowActivityResponse) interface{} { return v.SourceStagingConcurrency }).(pulumi.AnyOutput)
}

// Staging info for execute data flow activity.
func (o ExecuteDataFlowActivityResponseOutput) Staging() DataFlowStagingInfoResponsePtrOutput {
	return o.ApplyT(func(v ExecuteDataFlowActivityResponse) *DataFlowStagingInfoResponse { return v.Staging }).(DataFlowStagingInfoResponsePtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o ExecuteDataFlowActivityResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecuteDataFlowActivityResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Trace level setting used for data flow monitoring output. Supported values are: 'coarse', 'fine', and 'none'. Type: string (or Expression with resultType string)
func (o ExecuteDataFlowActivityResponseOutput) TraceLevel() pulumi.AnyOutput {
	return o.ApplyT(func(v ExecuteDataFlowActivityResponse) interface{} { return v.TraceLevel }).(pulumi.AnyOutput)
}

// Type of activity.
// Expected value is 'ExecuteDataFlow'.
func (o ExecuteDataFlowActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExecuteDataFlowActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o ExecuteDataFlowActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v ExecuteDataFlowActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

// Compute properties for data flow activity.
type ExecuteDataFlowActivityTypePropertiesCompute struct {
	// Compute type of the cluster which will execute data flow job. Possible values include: 'General', 'MemoryOptimized', 'ComputeOptimized'. Type: string (or Expression with resultType string)
	ComputeType interface{} `pulumi:"computeType"`
	// Core count of the cluster which will execute data flow job. Supported values are: 8, 16, 32, 48, 80, 144 and 272. Type: integer (or Expression with resultType integer)
	CoreCount interface{} `pulumi:"coreCount"`
}

// ExecuteDataFlowActivityTypePropertiesComputeInput is an input type that accepts ExecuteDataFlowActivityTypePropertiesComputeArgs and ExecuteDataFlowActivityTypePropertiesComputeOutput values.
// You can construct a concrete instance of `ExecuteDataFlowActivityTypePropertiesComputeInput` via:
//
//	ExecuteDataFlowActivityTypePropertiesComputeArgs{...}
type ExecuteDataFlowActivityTypePropertiesComputeInput interface {
	pulumi.Input

	ToExecuteDataFlowActivityTypePropertiesComputeOutput() ExecuteDataFlowActivityTypePropertiesComputeOutput
	ToExecuteDataFlowActivityTypePropertiesComputeOutputWithContext(context.Context) ExecuteDataFlowActivityTypePropertiesComputeOutput
}

// Compute properties for data flow activity.
type ExecuteDataFlowActivityTypePropertiesComputeArgs struct {
	// Compute type of the cluster which will execute data flow job. Possible values include: 'General', 'MemoryOptimized', 'ComputeOptimized'. Type: string (or Expression with resultType string)
	ComputeType pulumi.Input `pulumi:"computeType"`
	// Core count of the cluster which will execute data flow job. Supported values are: 8, 16, 32, 48, 80, 144 and 272. Type: integer (or Expression with resultType integer)
	CoreCount pulumi.Input `pulumi:"coreCount"`
}

func (ExecuteDataFlowActivityTypePropertiesComputeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecuteDataFlowActivityTypePropertiesCompute)(nil)).Elem()
}

func (i ExecuteDataFlowActivityTypePropertiesComputeArgs) ToExecuteDataFlowActivityTypePropertiesComputeOutput() ExecuteDataFlowActivityTypePropertiesComputeOutput {
	return i.ToExecuteDataFlowActivityTypePropertiesComputeOutputWithContext(context.Background())
}

func (i ExecuteDataFlowActivityTypePropertiesComputeArgs) ToExecuteDataFlowActivityTypePropertiesComputeOutputWithContext(ctx context.Context) ExecuteDataFlowActivityTypePropertiesComputeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecuteDataFlowActivityTypePropertiesComputeOutput)
}

func (i ExecuteDataFlowActivityTypePropertiesComputeArgs) ToExecuteDataFlowActivityTypePropertiesComputePtrOutput() ExecuteDataFlowActivityTypePropertiesComputePtrOutput {
	return i.ToExecuteDataFlowActivityTypePropertiesComputePtrOutputWithContext(context.Background())
}

func (i ExecuteDataFlowActivityTypePropertiesComputeArgs) ToExecuteDataFlowActivityTypePropertiesComputePtrOutputWithContext(ctx context.Context) ExecuteDataFlowActivityTypePropertiesComputePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecuteDataFlowActivityTypePropertiesComputeOutput).ToExecuteDataFlowActivityTypePropertiesComputePtrOutputWithContext(ctx)
}

// ExecuteDataFlowActivityTypePropertiesComputePtrInput is an input type that accepts ExecuteDataFlowActivityTypePropertiesComputeArgs, ExecuteDataFlowActivityTypePropertiesComputePtr and ExecuteDataFlowActivityTypePropertiesComputePtrOutput values.
// You can construct a concrete instance of `ExecuteDataFlowActivityTypePropertiesComputePtrInput` via:
//
//	        ExecuteDataFlowActivityTypePropertiesComputeArgs{...}
//
//	or:
//
//	        nil
type ExecuteDataFlowActivityTypePropertiesComputePtrInput interface {
	pulumi.Input

	ToExecuteDataFlowActivityTypePropertiesComputePtrOutput() ExecuteDataFlowActivityTypePropertiesComputePtrOutput
	ToExecuteDataFlowActivityTypePropertiesComputePtrOutputWithContext(context.Context) ExecuteDataFlowActivityTypePropertiesComputePtrOutput
}

type executeDataFlowActivityTypePropertiesComputePtrType ExecuteDataFlowActivityTypePropertiesComputeArgs

func ExecuteDataFlowActivityTypePropertiesComputePtr(v *ExecuteDataFlowActivityTypePropertiesComputeArgs) ExecuteDataFlowActivityTypePropertiesComputePtrInput {
	return (*executeDataFlowActivityTypePropertiesComputePtrType)(v)
}

func (*executeDataFlowActivityTypePropertiesComputePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExecuteDataFlowActivityTypePropertiesCompute)(nil)).Elem()
}

func (i *executeDataFlowActivityTypePropertiesComputePtrType) ToExecuteDataFlowActivityTypePropertiesComputePtrOutput() ExecuteDataFlowActivityTypePropertiesComputePtrOutput {
	return i.ToExecuteDataFlowActivityTypePropertiesComputePtrOutputWithContext(context.Background())
}

func (i *executeDataFlowActivityTypePropertiesComputePtrType) ToExecuteDataFlowActivityTypePropertiesComputePtrOutputWithContext(ctx context.Context) ExecuteDataFlowActivityTypePropertiesComputePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecuteDataFlowActivityTypePropertiesComputePtrOutput)
}

// Compute properties for data flow activity.
type ExecuteDataFlowActivityTypePropertiesComputeOutput struct{ *pulumi.OutputState }

func (ExecuteDataFlowActivityTypePropertiesComputeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecuteDataFlowActivityTypePropertiesCompute)(nil)).Elem()
}

func (o ExecuteDataFlowActivityTypePropertiesComputeOutput) ToExecuteDataFlowActivityTypePropertiesComputeOutput() ExecuteDataFlowActivityTypePropertiesComputeOutput {
	return o
}

func (o ExecuteDataFlowActivityTypePropertiesComputeOutput) ToExecuteDataFlowActivityTypePropertiesComputeOutputWithContext(ctx context.Context) ExecuteDataFlowActivityTypePropertiesComputeOutput {
	return o
}

func (o ExecuteDataFlowActivityTypePropertiesComputeOutput) ToExecuteDataFlowActivityTypePropertiesComputePtrOutput() ExecuteDataFlowActivityTypePropertiesComputePtrOutput {
	return o.ToExecuteDataFlowActivityTypePropertiesComputePtrOutputWithContext(context.Background())
}

func (o ExecuteDataFlowActivityTypePropertiesComputeOutput) ToExecuteDataFlowActivityTypePropertiesComputePtrOutputWithContext(ctx context.Context) ExecuteDataFlowActivityTypePropertiesComputePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExecuteDataFlowActivityTypePropertiesCompute) *ExecuteDataFlowActivityTypePropertiesCompute {
		return &v
	}).(ExecuteDataFlowActivityTypePropertiesComputePtrOutput)
}

// Compute type of the cluster which will execute data flow job. Possible values include: 'General', 'MemoryOptimized', 'ComputeOptimized'. Type: string (or Expression with resultType string)
func (o ExecuteDataFlowActivityTypePropertiesComputeOutput) ComputeType() pulumi.AnyOutput {
	return o.ApplyT(func(v ExecuteDataFlowActivityTypePropertiesCompute) interface{} { return v.ComputeType }).(pulumi.AnyOutput)
}

// Core count of the cluster which will execute data flow job. Supported values are: 8, 16, 32, 48, 80, 144 and 272. Type: integer (or Expression with resultType integer)
func (o ExecuteDataFlowActivityTypePropertiesComputeOutput) CoreCount() pulumi.AnyOutput {
	return o.ApplyT(func(v ExecuteDataFlowActivityTypePropertiesCompute) interface{} { return v.CoreCount }).(pulumi.AnyOutput)
}

type ExecuteDataFlowActivityTypePropertiesComputePtrOutput struct{ *pulumi.OutputState }

func (ExecuteDataFlowActivityTypePropertiesComputePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExecuteDataFlowActivityTypePropertiesCompute)(nil)).Elem()
}

func (o ExecuteDataFlowActivityTypePropertiesComputePtrOutput) ToExecuteDataFlowActivityTypePropertiesComputePtrOutput() ExecuteDataFlowActivityTypePropertiesComputePtrOutput {
	return o
}

func (o ExecuteDataFlowActivityTypePropertiesComputePtrOutput) ToExecuteDataFlowActivityTypePropertiesComputePtrOutputWithContext(ctx context.Context) ExecuteDataFlowActivityTypePropertiesComputePtrOutput {
	return o
}

func (o ExecuteDataFlowActivityTypePropertiesComputePtrOutput) Elem() ExecuteDataFlowActivityTypePropertiesComputeOutput {
	return o.ApplyT(func(v *ExecuteDataFlowActivityTypePropertiesCompute) ExecuteDataFlowActivityTypePropertiesCompute {
		if v != nil {
			return *v
		}
		var ret ExecuteDataFlowActivityTypePropertiesCompute
		return ret
	}).(ExecuteDataFlowActivityTypePropertiesComputeOutput)
}

// Compute type of the cluster which will execute data flow job. Possible values include: 'General', 'MemoryOptimized', 'ComputeOptimized'. Type: string (or Expression with resultType string)
func (o ExecuteDataFlowActivityTypePropertiesComputePtrOutput) ComputeType() pulumi.AnyOutput {
	return o.ApplyT(func(v *ExecuteDataFlowActivityTypePropertiesCompute) interface{} {
		if v == nil {
			return nil
		}
		return v.ComputeType
	}).(pulumi.AnyOutput)
}

// Core count of the cluster which will execute data flow job. Supported values are: 8, 16, 32, 48, 80, 144 and 272. Type: integer (or Expression with resultType integer)
func (o ExecuteDataFlowActivityTypePropertiesComputePtrOutput) CoreCount() pulumi.AnyOutput {
	return o.ApplyT(func(v *ExecuteDataFlowActivityTypePropertiesCompute) interface{} {
		if v == nil {
			return nil
		}
		return v.CoreCount
	}).(pulumi.AnyOutput)
}

// Compute properties for data flow activity.
type ExecuteDataFlowActivityTypePropertiesResponseCompute struct {
	// Compute type of the cluster which will execute data flow job. Possible values include: 'General', 'MemoryOptimized', 'ComputeOptimized'. Type: string (or Expression with resultType string)
	ComputeType interface{} `pulumi:"computeType"`
	// Core count of the cluster which will execute data flow job. Supported values are: 8, 16, 32, 48, 80, 144 and 272. Type: integer (or Expression with resultType integer)
	CoreCount interface{} `pulumi:"coreCount"`
}

// Compute properties for data flow activity.
type ExecuteDataFlowActivityTypePropertiesResponseComputeOutput struct{ *pulumi.OutputState }

func (ExecuteDataFlowActivityTypePropertiesResponseComputeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecuteDataFlowActivityTypePropertiesResponseCompute)(nil)).Elem()
}

func (o ExecuteDataFlowActivityTypePropertiesResponseComputeOutput) ToExecuteDataFlowActivityTypePropertiesResponseComputeOutput() ExecuteDataFlowActivityTypePropertiesResponseComputeOutput {
	return o
}

func (o ExecuteDataFlowActivityTypePropertiesResponseComputeOutput) ToExecuteDataFlowActivityTypePropertiesResponseComputeOutputWithContext(ctx context.Context) ExecuteDataFlowActivityTypePropertiesResponseComputeOutput {
	return o
}

// Compute type of the cluster which will execute data flow job. Possible values include: 'General', 'MemoryOptimized', 'ComputeOptimized'. Type: string (or Expression with resultType string)
func (o ExecuteDataFlowActivityTypePropertiesResponseComputeOutput) ComputeType() pulumi.AnyOutput {
	return o.ApplyT(func(v ExecuteDataFlowActivityTypePropertiesResponseCompute) interface{} { return v.ComputeType }).(pulumi.AnyOutput)
}

// Core count of the cluster which will execute data flow job. Supported values are: 8, 16, 32, 48, 80, 144 and 272. Type: integer (or Expression with resultType integer)
func (o ExecuteDataFlowActivityTypePropertiesResponseComputeOutput) CoreCount() pulumi.AnyOutput {
	return o.ApplyT(func(v ExecuteDataFlowActivityTypePropertiesResponseCompute) interface{} { return v.CoreCount }).(pulumi.AnyOutput)
}

type ExecuteDataFlowActivityTypePropertiesResponseComputePtrOutput struct{ *pulumi.OutputState }

func (ExecuteDataFlowActivityTypePropertiesResponseComputePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExecuteDataFlowActivityTypePropertiesResponseCompute)(nil)).Elem()
}

func (o ExecuteDataFlowActivityTypePropertiesResponseComputePtrOutput) ToExecuteDataFlowActivityTypePropertiesResponseComputePtrOutput() ExecuteDataFlowActivityTypePropertiesResponseComputePtrOutput {
	return o
}

func (o ExecuteDataFlowActivityTypePropertiesResponseComputePtrOutput) ToExecuteDataFlowActivityTypePropertiesResponseComputePtrOutputWithContext(ctx context.Context) ExecuteDataFlowActivityTypePropertiesResponseComputePtrOutput {
	return o
}

func (o ExecuteDataFlowActivityTypePropertiesResponseComputePtrOutput) Elem() ExecuteDataFlowActivityTypePropertiesResponseComputeOutput {
	return o.ApplyT(func(v *ExecuteDataFlowActivityTypePropertiesResponseCompute) ExecuteDataFlowActivityTypePropertiesResponseCompute {
		if v != nil {
			return *v
		}
		var ret ExecuteDataFlowActivityTypePropertiesResponseCompute
		return ret
	}).(ExecuteDataFlowActivityTypePropertiesResponseComputeOutput)
}

// Compute type of the cluster which will execute data flow job. Possible values include: 'General', 'MemoryOptimized', 'ComputeOptimized'. Type: string (or Expression with resultType string)
func (o ExecuteDataFlowActivityTypePropertiesResponseComputePtrOutput) ComputeType() pulumi.AnyOutput {
	return o.ApplyT(func(v *ExecuteDataFlowActivityTypePropertiesResponseCompute) interface{} {
		if v == nil {
			return nil
		}
		return v.ComputeType
	}).(pulumi.AnyOutput)
}

// Core count of the cluster which will execute data flow job. Supported values are: 8, 16, 32, 48, 80, 144 and 272. Type: integer (or Expression with resultType integer)
func (o ExecuteDataFlowActivityTypePropertiesResponseComputePtrOutput) CoreCount() pulumi.AnyOutput {
	return o.ApplyT(func(v *ExecuteDataFlowActivityTypePropertiesResponseCompute) interface{} {
		if v == nil {
			return nil
		}
		return v.CoreCount
	}).(pulumi.AnyOutput)
}

// Execute pipeline activity.
type ExecutePipelineActivity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Pipeline parameters.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Pipeline reference.
	Pipeline PipelineReference `pulumi:"pipeline"`
	// Execute pipeline activity policy.
	Policy *ExecutePipelineActivityPolicy `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'ExecutePipeline'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
	// Defines whether activity execution will wait for the dependent pipeline execution to finish. Default is false.
	WaitOnCompletion *bool `pulumi:"waitOnCompletion"`
}

// ExecutePipelineActivityInput is an input type that accepts ExecutePipelineActivityArgs and ExecutePipelineActivityOutput values.
// You can construct a concrete instance of `ExecutePipelineActivityInput` via:
//
//	ExecutePipelineActivityArgs{...}
type ExecutePipelineActivityInput interface {
	pulumi.Input

	ToExecutePipelineActivityOutput() ExecutePipelineActivityOutput
	ToExecutePipelineActivityOutputWithContext(context.Context) ExecutePipelineActivityOutput
}

// Execute pipeline activity.
type ExecutePipelineActivityArgs struct {
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs pulumi.StringPtrInput `pulumi:"onInactiveMarkAs"`
	// Pipeline parameters.
	Parameters pulumi.MapInput `pulumi:"parameters"`
	// Pipeline reference.
	Pipeline PipelineReferenceInput `pulumi:"pipeline"`
	// Execute pipeline activity policy.
	Policy ExecutePipelineActivityPolicyPtrInput `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Type of activity.
	// Expected value is 'ExecutePipeline'.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
	// Defines whether activity execution will wait for the dependent pipeline execution to finish. Default is false.
	WaitOnCompletion pulumi.BoolPtrInput `pulumi:"waitOnCompletion"`
}

func (ExecutePipelineActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutePipelineActivity)(nil)).Elem()
}

func (i ExecutePipelineActivityArgs) ToExecutePipelineActivityOutput() ExecutePipelineActivityOutput {
	return i.ToExecutePipelineActivityOutputWithContext(context.Background())
}

func (i ExecutePipelineActivityArgs) ToExecutePipelineActivityOutputWithContext(ctx context.Context) ExecutePipelineActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecutePipelineActivityOutput)
}

// Execute pipeline activity.
type ExecutePipelineActivityOutput struct{ *pulumi.OutputState }

func (ExecutePipelineActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutePipelineActivity)(nil)).Elem()
}

func (o ExecutePipelineActivityOutput) ToExecutePipelineActivityOutput() ExecutePipelineActivityOutput {
	return o
}

func (o ExecutePipelineActivityOutput) ToExecutePipelineActivityOutputWithContext(ctx context.Context) ExecutePipelineActivityOutput {
	return o
}

// Activity depends on condition.
func (o ExecutePipelineActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v ExecutePipelineActivity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o ExecutePipelineActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutePipelineActivity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Activity name.
func (o ExecutePipelineActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutePipelineActivity) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o ExecutePipelineActivityOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutePipelineActivity) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Pipeline parameters.
func (o ExecutePipelineActivityOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v ExecutePipelineActivity) map[string]interface{} { return v.Parameters }).(pulumi.MapOutput)
}

// Pipeline reference.
func (o ExecutePipelineActivityOutput) Pipeline() PipelineReferenceOutput {
	return o.ApplyT(func(v ExecutePipelineActivity) PipelineReference { return v.Pipeline }).(PipelineReferenceOutput)
}

// Execute pipeline activity policy.
func (o ExecutePipelineActivityOutput) Policy() ExecutePipelineActivityPolicyPtrOutput {
	return o.ApplyT(func(v ExecutePipelineActivity) *ExecutePipelineActivityPolicy { return v.Policy }).(ExecutePipelineActivityPolicyPtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o ExecutePipelineActivityOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutePipelineActivity) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'ExecutePipeline'.
func (o ExecutePipelineActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutePipelineActivity) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o ExecutePipelineActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v ExecutePipelineActivity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

// Defines whether activity execution will wait for the dependent pipeline execution to finish. Default is false.
func (o ExecutePipelineActivityOutput) WaitOnCompletion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExecutePipelineActivity) *bool { return v.WaitOnCompletion }).(pulumi.BoolPtrOutput)
}

// Execution policy for an execute pipeline activity.
type ExecutePipelineActivityPolicy struct {
	// When set to true, Input from activity is considered as secure and will not be logged to monitoring.
	SecureInput *bool `pulumi:"secureInput"`
}

// ExecutePipelineActivityPolicyInput is an input type that accepts ExecutePipelineActivityPolicyArgs and ExecutePipelineActivityPolicyOutput values.
// You can construct a concrete instance of `ExecutePipelineActivityPolicyInput` via:
//
//	ExecutePipelineActivityPolicyArgs{...}
type ExecutePipelineActivityPolicyInput interface {
	pulumi.Input

	ToExecutePipelineActivityPolicyOutput() ExecutePipelineActivityPolicyOutput
	ToExecutePipelineActivityPolicyOutputWithContext(context.Context) ExecutePipelineActivityPolicyOutput
}

// Execution policy for an execute pipeline activity.
type ExecutePipelineActivityPolicyArgs struct {
	// When set to true, Input from activity is considered as secure and will not be logged to monitoring.
	SecureInput pulumi.BoolPtrInput `pulumi:"secureInput"`
}

func (ExecutePipelineActivityPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutePipelineActivityPolicy)(nil)).Elem()
}

func (i ExecutePipelineActivityPolicyArgs) ToExecutePipelineActivityPolicyOutput() ExecutePipelineActivityPolicyOutput {
	return i.ToExecutePipelineActivityPolicyOutputWithContext(context.Background())
}

func (i ExecutePipelineActivityPolicyArgs) ToExecutePipelineActivityPolicyOutputWithContext(ctx context.Context) ExecutePipelineActivityPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecutePipelineActivityPolicyOutput)
}

func (i ExecutePipelineActivityPolicyArgs) ToExecutePipelineActivityPolicyPtrOutput() ExecutePipelineActivityPolicyPtrOutput {
	return i.ToExecutePipelineActivityPolicyPtrOutputWithContext(context.Background())
}

func (i ExecutePipelineActivityPolicyArgs) ToExecutePipelineActivityPolicyPtrOutputWithContext(ctx context.Context) ExecutePipelineActivityPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecutePipelineActivityPolicyOutput).ToExecutePipelineActivityPolicyPtrOutputWithContext(ctx)
}

// ExecutePipelineActivityPolicyPtrInput is an input type that accepts ExecutePipelineActivityPolicyArgs, ExecutePipelineActivityPolicyPtr and ExecutePipelineActivityPolicyPtrOutput values.
// You can construct a concrete instance of `ExecutePipelineActivityPolicyPtrInput` via:
//
//	        ExecutePipelineActivityPolicyArgs{...}
//
//	or:
//
//	        nil
type ExecutePipelineActivityPolicyPtrInput interface {
	pulumi.Input

	ToExecutePipelineActivityPolicyPtrOutput() ExecutePipelineActivityPolicyPtrOutput
	ToExecutePipelineActivityPolicyPtrOutputWithContext(context.Context) ExecutePipelineActivityPolicyPtrOutput
}

type executePipelineActivityPolicyPtrType ExecutePipelineActivityPolicyArgs

func ExecutePipelineActivityPolicyPtr(v *ExecutePipelineActivityPolicyArgs) ExecutePipelineActivityPolicyPtrInput {
	return (*executePipelineActivityPolicyPtrType)(v)
}

func (*executePipelineActivityPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExecutePipelineActivityPolicy)(nil)).Elem()
}

func (i *executePipelineActivityPolicyPtrType) ToExecutePipelineActivityPolicyPtrOutput() ExecutePipelineActivityPolicyPtrOutput {
	return i.ToExecutePipelineActivityPolicyPtrOutputWithContext(context.Background())
}

func (i *executePipelineActivityPolicyPtrType) ToExecutePipelineActivityPolicyPtrOutputWithContext(ctx context.Context) ExecutePipelineActivityPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecutePipelineActivityPolicyPtrOutput)
}

// Execution policy for an execute pipeline activity.
type ExecutePipelineActivityPolicyOutput struct{ *pulumi.OutputState }

func (ExecutePipelineActivityPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutePipelineActivityPolicy)(nil)).Elem()
}

func (o ExecutePipelineActivityPolicyOutput) ToExecutePipelineActivityPolicyOutput() ExecutePipelineActivityPolicyOutput {
	return o
}

func (o ExecutePipelineActivityPolicyOutput) ToExecutePipelineActivityPolicyOutputWithContext(ctx context.Context) ExecutePipelineActivityPolicyOutput {
	return o
}

func (o ExecutePipelineActivityPolicyOutput) ToExecutePipelineActivityPolicyPtrOutput() ExecutePipelineActivityPolicyPtrOutput {
	return o.ToExecutePipelineActivityPolicyPtrOutputWithContext(context.Background())
}

func (o ExecutePipelineActivityPolicyOutput) ToExecutePipelineActivityPolicyPtrOutputWithContext(ctx context.Context) ExecutePipelineActivityPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExecutePipelineActivityPolicy) *ExecutePipelineActivityPolicy {
		return &v
	}).(ExecutePipelineActivityPolicyPtrOutput)
}

// When set to true, Input from activity is considered as secure and will not be logged to monitoring.
func (o ExecutePipelineActivityPolicyOutput) SecureInput() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExecutePipelineActivityPolicy) *bool { return v.SecureInput }).(pulumi.BoolPtrOutput)
}

type ExecutePipelineActivityPolicyPtrOutput struct{ *pulumi.OutputState }

func (ExecutePipelineActivityPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExecutePipelineActivityPolicy)(nil)).Elem()
}

func (o ExecutePipelineActivityPolicyPtrOutput) ToExecutePipelineActivityPolicyPtrOutput() ExecutePipelineActivityPolicyPtrOutput {
	return o
}

func (o ExecutePipelineActivityPolicyPtrOutput) ToExecutePipelineActivityPolicyPtrOutputWithContext(ctx context.Context) ExecutePipelineActivityPolicyPtrOutput {
	return o
}

func (o ExecutePipelineActivityPolicyPtrOutput) Elem() ExecutePipelineActivityPolicyOutput {
	return o.ApplyT(func(v *ExecutePipelineActivityPolicy) ExecutePipelineActivityPolicy {
		if v != nil {
			return *v
		}
		var ret ExecutePipelineActivityPolicy
		return ret
	}).(ExecutePipelineActivityPolicyOutput)
}

// When set to true, Input from activity is considered as secure and will not be logged to monitoring.
func (o ExecutePipelineActivityPolicyPtrOutput) SecureInput() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExecutePipelineActivityPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.SecureInput
	}).(pulumi.BoolPtrOutput)
}

// Execution policy for an execute pipeline activity.
type ExecutePipelineActivityPolicyResponse struct {
	// When set to true, Input from activity is considered as secure and will not be logged to monitoring.
	SecureInput *bool `pulumi:"secureInput"`
}

// Execution policy for an execute pipeline activity.
type ExecutePipelineActivityPolicyResponseOutput struct{ *pulumi.OutputState }

func (ExecutePipelineActivityPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutePipelineActivityPolicyResponse)(nil)).Elem()
}

func (o ExecutePipelineActivityPolicyResponseOutput) ToExecutePipelineActivityPolicyResponseOutput() ExecutePipelineActivityPolicyResponseOutput {
	return o
}

func (o ExecutePipelineActivityPolicyResponseOutput) ToExecutePipelineActivityPolicyResponseOutputWithContext(ctx context.Context) ExecutePipelineActivityPolicyResponseOutput {
	return o
}

// When set to true, Input from activity is considered as secure and will not be logged to monitoring.
func (o ExecutePipelineActivityPolicyResponseOutput) SecureInput() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExecutePipelineActivityPolicyResponse) *bool { return v.SecureInput }).(pulumi.BoolPtrOutput)
}

type ExecutePipelineActivityPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (ExecutePipelineActivityPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExecutePipelineActivityPolicyResponse)(nil)).Elem()
}

func (o ExecutePipelineActivityPolicyResponsePtrOutput) ToExecutePipelineActivityPolicyResponsePtrOutput() ExecutePipelineActivityPolicyResponsePtrOutput {
	return o
}

func (o ExecutePipelineActivityPolicyResponsePtrOutput) ToExecutePipelineActivityPolicyResponsePtrOutputWithContext(ctx context.Context) ExecutePipelineActivityPolicyResponsePtrOutput {
	return o
}

func (o ExecutePipelineActivityPolicyResponsePtrOutput) Elem() ExecutePipelineActivityPolicyResponseOutput {
	return o.ApplyT(func(v *ExecutePipelineActivityPolicyResponse) ExecutePipelineActivityPolicyResponse {
		if v != nil {
			return *v
		}
		var ret ExecutePipelineActivityPolicyResponse
		return ret
	}).(ExecutePipelineActivityPolicyResponseOutput)
}

// When set to true, Input from activity is considered as secure and will not be logged to monitoring.
func (o ExecutePipelineActivityPolicyResponsePtrOutput) SecureInput() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExecutePipelineActivityPolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return v.SecureInput
	}).(pulumi.BoolPtrOutput)
}

// Execute pipeline activity.
type ExecutePipelineActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Pipeline parameters.
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Pipeline reference.
	Pipeline PipelineReferenceResponse `pulumi:"pipeline"`
	// Execute pipeline activity policy.
	Policy *ExecutePipelineActivityPolicyResponse `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'ExecutePipeline'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
	// Defines whether activity execution will wait for the dependent pipeline execution to finish. Default is false.
	WaitOnCompletion *bool `pulumi:"waitOnCompletion"`
}

// Execute pipeline activity.
type ExecutePipelineActivityResponseOutput struct{ *pulumi.OutputState }

func (ExecutePipelineActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutePipelineActivityResponse)(nil)).Elem()
}

func (o ExecutePipelineActivityResponseOutput) ToExecutePipelineActivityResponseOutput() ExecutePipelineActivityResponseOutput {
	return o
}

func (o ExecutePipelineActivityResponseOutput) ToExecutePipelineActivityResponseOutputWithContext(ctx context.Context) ExecutePipelineActivityResponseOutput {
	return o
}

// Activity depends on condition.
func (o ExecutePipelineActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v ExecutePipelineActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o ExecutePipelineActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutePipelineActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Activity name.
func (o ExecutePipelineActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutePipelineActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o ExecutePipelineActivityResponseOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutePipelineActivityResponse) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Pipeline parameters.
func (o ExecutePipelineActivityResponseOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v ExecutePipelineActivityResponse) map[string]interface{} { return v.Parameters }).(pulumi.MapOutput)
}

// Pipeline reference.
func (o ExecutePipelineActivityResponseOutput) Pipeline() PipelineReferenceResponseOutput {
	return o.ApplyT(func(v ExecutePipelineActivityResponse) PipelineReferenceResponse { return v.Pipeline }).(PipelineReferenceResponseOutput)
}

// Execute pipeline activity policy.
func (o ExecutePipelineActivityResponseOutput) Policy() ExecutePipelineActivityPolicyResponsePtrOutput {
	return o.ApplyT(func(v ExecutePipelineActivityResponse) *ExecutePipelineActivityPolicyResponse { return v.Policy }).(ExecutePipelineActivityPolicyResponsePtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o ExecutePipelineActivityResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutePipelineActivityResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'ExecutePipeline'.
func (o ExecutePipelineActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutePipelineActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o ExecutePipelineActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v ExecutePipelineActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

// Defines whether activity execution will wait for the dependent pipeline execution to finish. Default is false.
func (o ExecutePipelineActivityResponseOutput) WaitOnCompletion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExecutePipelineActivityResponse) *bool { return v.WaitOnCompletion }).(pulumi.BoolPtrOutput)
}

// Execute SSIS package activity.
type ExecuteSSISPackageActivity struct {
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReference `pulumi:"connectVia"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// The environment path to execute the SSIS package. Type: string (or Expression with resultType string).
	EnvironmentPath interface{} `pulumi:"environmentPath"`
	// The package execution credential.
	ExecutionCredential *SSISExecutionCredential `pulumi:"executionCredential"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// SSIS package execution log location.
	LogLocation *SSISLogLocation `pulumi:"logLocation"`
	// The logging level of SSIS package execution. Type: string (or Expression with resultType string).
	LoggingLevel interface{} `pulumi:"loggingLevel"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// The package level connection managers to execute the SSIS package.
	PackageConnectionManagers map[string]map[string]SSISExecutionParameter `pulumi:"packageConnectionManagers"`
	// SSIS package location.
	PackageLocation SSISPackageLocation `pulumi:"packageLocation"`
	// The package level parameters to execute the SSIS package.
	PackageParameters map[string]SSISExecutionParameter `pulumi:"packageParameters"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// The project level connection managers to execute the SSIS package.
	ProjectConnectionManagers map[string]map[string]SSISExecutionParameter `pulumi:"projectConnectionManagers"`
	// The project level parameters to execute the SSIS package.
	ProjectParameters map[string]SSISExecutionParameter `pulumi:"projectParameters"`
	// The property overrides to execute the SSIS package.
	PropertyOverrides map[string]SSISPropertyOverride `pulumi:"propertyOverrides"`
	// Specifies the runtime to execute SSIS package. The value should be "x86" or "x64". Type: string (or Expression with resultType string).
	Runtime interface{} `pulumi:"runtime"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'ExecuteSSISPackage'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// ExecuteSSISPackageActivityInput is an input type that accepts ExecuteSSISPackageActivityArgs and ExecuteSSISPackageActivityOutput values.
// You can construct a concrete instance of `ExecuteSSISPackageActivityInput` via:
//
//	ExecuteSSISPackageActivityArgs{...}
type ExecuteSSISPackageActivityInput interface {
	pulumi.Input

	ToExecuteSSISPackageActivityOutput() ExecuteSSISPackageActivityOutput
	ToExecuteSSISPackageActivityOutputWithContext(context.Context) ExecuteSSISPackageActivityOutput
}

// Execute SSIS package activity.
type ExecuteSSISPackageActivityArgs struct {
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceInput `pulumi:"connectVia"`
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The environment path to execute the SSIS package. Type: string (or Expression with resultType string).
	EnvironmentPath pulumi.Input `pulumi:"environmentPath"`
	// The package execution credential.
	ExecutionCredential SSISExecutionCredentialPtrInput `pulumi:"executionCredential"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferencePtrInput `pulumi:"linkedServiceName"`
	// SSIS package execution log location.
	LogLocation SSISLogLocationPtrInput `pulumi:"logLocation"`
	// The logging level of SSIS package execution. Type: string (or Expression with resultType string).
	LoggingLevel pulumi.Input `pulumi:"loggingLevel"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs pulumi.StringPtrInput `pulumi:"onInactiveMarkAs"`
	// The package level connection managers to execute the SSIS package.
	PackageConnectionManagers SSISExecutionParameterMapMapInput `pulumi:"packageConnectionManagers"`
	// SSIS package location.
	PackageLocation SSISPackageLocationInput `pulumi:"packageLocation"`
	// The package level parameters to execute the SSIS package.
	PackageParameters SSISExecutionParameterMapInput `pulumi:"packageParameters"`
	// Activity policy.
	Policy ActivityPolicyPtrInput `pulumi:"policy"`
	// The project level connection managers to execute the SSIS package.
	ProjectConnectionManagers SSISExecutionParameterMapMapInput `pulumi:"projectConnectionManagers"`
	// The project level parameters to execute the SSIS package.
	ProjectParameters SSISExecutionParameterMapInput `pulumi:"projectParameters"`
	// The property overrides to execute the SSIS package.
	PropertyOverrides SSISPropertyOverrideMapInput `pulumi:"propertyOverrides"`
	// Specifies the runtime to execute SSIS package. The value should be "x86" or "x64". Type: string (or Expression with resultType string).
	Runtime pulumi.Input `pulumi:"runtime"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Type of activity.
	// Expected value is 'ExecuteSSISPackage'.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
}

func (ExecuteSSISPackageActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecuteSSISPackageActivity)(nil)).Elem()
}

func (i ExecuteSSISPackageActivityArgs) ToExecuteSSISPackageActivityOutput() ExecuteSSISPackageActivityOutput {
	return i.ToExecuteSSISPackageActivityOutputWithContext(context.Background())
}

func (i ExecuteSSISPackageActivityArgs) ToExecuteSSISPackageActivityOutputWithContext(ctx context.Context) ExecuteSSISPackageActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecuteSSISPackageActivityOutput)
}

// Execute SSIS package activity.
type ExecuteSSISPackageActivityOutput struct{ *pulumi.OutputState }

func (ExecuteSSISPackageActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecuteSSISPackageActivity)(nil)).Elem()
}

func (o ExecuteSSISPackageActivityOutput) ToExecuteSSISPackageActivityOutput() ExecuteSSISPackageActivityOutput {
	return o
}

func (o ExecuteSSISPackageActivityOutput) ToExecuteSSISPackageActivityOutputWithContext(ctx context.Context) ExecuteSSISPackageActivityOutput {
	return o
}

// The integration runtime reference.
func (o ExecuteSSISPackageActivityOutput) ConnectVia() IntegrationRuntimeReferenceOutput {
	return o.ApplyT(func(v ExecuteSSISPackageActivity) IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferenceOutput)
}

// Activity depends on condition.
func (o ExecuteSSISPackageActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v ExecuteSSISPackageActivity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o ExecuteSSISPackageActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecuteSSISPackageActivity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The environment path to execute the SSIS package. Type: string (or Expression with resultType string).
func (o ExecuteSSISPackageActivityOutput) EnvironmentPath() pulumi.AnyOutput {
	return o.ApplyT(func(v ExecuteSSISPackageActivity) interface{} { return v.EnvironmentPath }).(pulumi.AnyOutput)
}

// The package execution credential.
func (o ExecuteSSISPackageActivityOutput) ExecutionCredential() SSISExecutionCredentialPtrOutput {
	return o.ApplyT(func(v ExecuteSSISPackageActivity) *SSISExecutionCredential { return v.ExecutionCredential }).(SSISExecutionCredentialPtrOutput)
}

// Linked service reference.
func (o ExecuteSSISPackageActivityOutput) LinkedServiceName() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v ExecuteSSISPackageActivity) *LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferencePtrOutput)
}

// SSIS package execution log location.
func (o ExecuteSSISPackageActivityOutput) LogLocation() SSISLogLocationPtrOutput {
	return o.ApplyT(func(v ExecuteSSISPackageActivity) *SSISLogLocation { return v.LogLocation }).(SSISLogLocationPtrOutput)
}

// The logging level of SSIS package execution. Type: string (or Expression with resultType string).
func (o ExecuteSSISPackageActivityOutput) LoggingLevel() pulumi.AnyOutput {
	return o.ApplyT(func(v ExecuteSSISPackageActivity) interface{} { return v.LoggingLevel }).(pulumi.AnyOutput)
}

// Activity name.
func (o ExecuteSSISPackageActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExecuteSSISPackageActivity) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o ExecuteSSISPackageActivityOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecuteSSISPackageActivity) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// The package level connection managers to execute the SSIS package.
func (o ExecuteSSISPackageActivityOutput) PackageConnectionManagers() SSISExecutionParameterMapMapOutput {
	return o.ApplyT(func(v ExecuteSSISPackageActivity) map[string]map[string]SSISExecutionParameter {
		return v.PackageConnectionManagers
	}).(SSISExecutionParameterMapMapOutput)
}

// SSIS package location.
func (o ExecuteSSISPackageActivityOutput) PackageLocation() SSISPackageLocationOutput {
	return o.ApplyT(func(v ExecuteSSISPackageActivity) SSISPackageLocation { return v.PackageLocation }).(SSISPackageLocationOutput)
}

// The package level parameters to execute the SSIS package.
func (o ExecuteSSISPackageActivityOutput) PackageParameters() SSISExecutionParameterMapOutput {
	return o.ApplyT(func(v ExecuteSSISPackageActivity) map[string]SSISExecutionParameter { return v.PackageParameters }).(SSISExecutionParameterMapOutput)
}

// Activity policy.
func (o ExecuteSSISPackageActivityOutput) Policy() ActivityPolicyPtrOutput {
	return o.ApplyT(func(v ExecuteSSISPackageActivity) *ActivityPolicy { return v.Policy }).(ActivityPolicyPtrOutput)
}

// The project level connection managers to execute the SSIS package.
func (o ExecuteSSISPackageActivityOutput) ProjectConnectionManagers() SSISExecutionParameterMapMapOutput {
	return o.ApplyT(func(v ExecuteSSISPackageActivity) map[string]map[string]SSISExecutionParameter {
		return v.ProjectConnectionManagers
	}).(SSISExecutionParameterMapMapOutput)
}

// The project level parameters to execute the SSIS package.
func (o ExecuteSSISPackageActivityOutput) ProjectParameters() SSISExecutionParameterMapOutput {
	return o.ApplyT(func(v ExecuteSSISPackageActivity) map[string]SSISExecutionParameter { return v.ProjectParameters }).(SSISExecutionParameterMapOutput)
}

// The property overrides to execute the SSIS package.
func (o ExecuteSSISPackageActivityOutput) PropertyOverrides() SSISPropertyOverrideMapOutput {
	return o.ApplyT(func(v ExecuteSSISPackageActivity) map[string]SSISPropertyOverride { return v.PropertyOverrides }).(SSISPropertyOverrideMapOutput)
}

// Specifies the runtime to execute SSIS package. The value should be "x86" or "x64". Type: string (or Expression with resultType string).
func (o ExecuteSSISPackageActivityOutput) Runtime() pulumi.AnyOutput {
	return o.ApplyT(func(v ExecuteSSISPackageActivity) interface{} { return v.Runtime }).(pulumi.AnyOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o ExecuteSSISPackageActivityOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecuteSSISPackageActivity) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'ExecuteSSISPackage'.
func (o ExecuteSSISPackageActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExecuteSSISPackageActivity) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o ExecuteSSISPackageActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v ExecuteSSISPackageActivity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

// Execute SSIS package activity.
type ExecuteSSISPackageActivityResponse struct {
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// The environment path to execute the SSIS package. Type: string (or Expression with resultType string).
	EnvironmentPath interface{} `pulumi:"environmentPath"`
	// The package execution credential.
	ExecutionCredential *SSISExecutionCredentialResponse `pulumi:"executionCredential"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// SSIS package execution log location.
	LogLocation *SSISLogLocationResponse `pulumi:"logLocation"`
	// The logging level of SSIS package execution. Type: string (or Expression with resultType string).
	LoggingLevel interface{} `pulumi:"loggingLevel"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// The package level connection managers to execute the SSIS package.
	PackageConnectionManagers map[string]map[string]SSISExecutionParameterResponse `pulumi:"packageConnectionManagers"`
	// SSIS package location.
	PackageLocation SSISPackageLocationResponse `pulumi:"packageLocation"`
	// The package level parameters to execute the SSIS package.
	PackageParameters map[string]SSISExecutionParameterResponse `pulumi:"packageParameters"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// The project level connection managers to execute the SSIS package.
	ProjectConnectionManagers map[string]map[string]SSISExecutionParameterResponse `pulumi:"projectConnectionManagers"`
	// The project level parameters to execute the SSIS package.
	ProjectParameters map[string]SSISExecutionParameterResponse `pulumi:"projectParameters"`
	// The property overrides to execute the SSIS package.
	PropertyOverrides map[string]SSISPropertyOverrideResponse `pulumi:"propertyOverrides"`
	// Specifies the runtime to execute SSIS package. The value should be "x86" or "x64". Type: string (or Expression with resultType string).
	Runtime interface{} `pulumi:"runtime"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'ExecuteSSISPackage'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Execute SSIS package activity.
type ExecuteSSISPackageActivityResponseOutput struct{ *pulumi.OutputState }

func (ExecuteSSISPackageActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecuteSSISPackageActivityResponse)(nil)).Elem()
}

func (o ExecuteSSISPackageActivityResponseOutput) ToExecuteSSISPackageActivityResponseOutput() ExecuteSSISPackageActivityResponseOutput {
	return o
}

func (o ExecuteSSISPackageActivityResponseOutput) ToExecuteSSISPackageActivityResponseOutputWithContext(ctx context.Context) ExecuteSSISPackageActivityResponseOutput {
	return o
}

// The integration runtime reference.
func (o ExecuteSSISPackageActivityResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponseOutput {
	return o.ApplyT(func(v ExecuteSSISPackageActivityResponse) IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponseOutput)
}

// Activity depends on condition.
func (o ExecuteSSISPackageActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v ExecuteSSISPackageActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o ExecuteSSISPackageActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecuteSSISPackageActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The environment path to execute the SSIS package. Type: string (or Expression with resultType string).
func (o ExecuteSSISPackageActivityResponseOutput) EnvironmentPath() pulumi.AnyOutput {
	return o.ApplyT(func(v ExecuteSSISPackageActivityResponse) interface{} { return v.EnvironmentPath }).(pulumi.AnyOutput)
}

// The package execution credential.
func (o ExecuteSSISPackageActivityResponseOutput) ExecutionCredential() SSISExecutionCredentialResponsePtrOutput {
	return o.ApplyT(func(v ExecuteSSISPackageActivityResponse) *SSISExecutionCredentialResponse {
		return v.ExecutionCredential
	}).(SSISExecutionCredentialResponsePtrOutput)
}

// Linked service reference.
func (o ExecuteSSISPackageActivityResponseOutput) LinkedServiceName() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v ExecuteSSISPackageActivityResponse) *LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponsePtrOutput)
}

// SSIS package execution log location.
func (o ExecuteSSISPackageActivityResponseOutput) LogLocation() SSISLogLocationResponsePtrOutput {
	return o.ApplyT(func(v ExecuteSSISPackageActivityResponse) *SSISLogLocationResponse { return v.LogLocation }).(SSISLogLocationResponsePtrOutput)
}

// The logging level of SSIS package execution. Type: string (or Expression with resultType string).
func (o ExecuteSSISPackageActivityResponseOutput) LoggingLevel() pulumi.AnyOutput {
	return o.ApplyT(func(v ExecuteSSISPackageActivityResponse) interface{} { return v.LoggingLevel }).(pulumi.AnyOutput)
}

// Activity name.
func (o ExecuteSSISPackageActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExecuteSSISPackageActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o ExecuteSSISPackageActivityResponseOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecuteSSISPackageActivityResponse) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// The package level connection managers to execute the SSIS package.
func (o ExecuteSSISPackageActivityResponseOutput) PackageConnectionManagers() SSISExecutionParameterResponseMapMapOutput {
	return o.ApplyT(func(v ExecuteSSISPackageActivityResponse) map[string]map[string]SSISExecutionParameterResponse {
		return v.PackageConnectionManagers
	}).(SSISExecutionParameterResponseMapMapOutput)
}

// SSIS package location.
func (o ExecuteSSISPackageActivityResponseOutput) PackageLocation() SSISPackageLocationResponseOutput {
	return o.ApplyT(func(v ExecuteSSISPackageActivityResponse) SSISPackageLocationResponse { return v.PackageLocation }).(SSISPackageLocationResponseOutput)
}

// The package level parameters to execute the SSIS package.
func (o ExecuteSSISPackageActivityResponseOutput) PackageParameters() SSISExecutionParameterResponseMapOutput {
	return o.ApplyT(func(v ExecuteSSISPackageActivityResponse) map[string]SSISExecutionParameterResponse {
		return v.PackageParameters
	}).(SSISExecutionParameterResponseMapOutput)
}

// Activity policy.
func (o ExecuteSSISPackageActivityResponseOutput) Policy() ActivityPolicyResponsePtrOutput {
	return o.ApplyT(func(v ExecuteSSISPackageActivityResponse) *ActivityPolicyResponse { return v.Policy }).(ActivityPolicyResponsePtrOutput)
}

// The project level connection managers to execute the SSIS package.
func (o ExecuteSSISPackageActivityResponseOutput) ProjectConnectionManagers() SSISExecutionParameterResponseMapMapOutput {
	return o.ApplyT(func(v ExecuteSSISPackageActivityResponse) map[string]map[string]SSISExecutionParameterResponse {
		return v.ProjectConnectionManagers
	}).(SSISExecutionParameterResponseMapMapOutput)
}

// The project level parameters to execute the SSIS package.
func (o ExecuteSSISPackageActivityResponseOutput) ProjectParameters() SSISExecutionParameterResponseMapOutput {
	return o.ApplyT(func(v ExecuteSSISPackageActivityResponse) map[string]SSISExecutionParameterResponse {
		return v.ProjectParameters
	}).(SSISExecutionParameterResponseMapOutput)
}

// The property overrides to execute the SSIS package.
func (o ExecuteSSISPackageActivityResponseOutput) PropertyOverrides() SSISPropertyOverrideResponseMapOutput {
	return o.ApplyT(func(v ExecuteSSISPackageActivityResponse) map[string]SSISPropertyOverrideResponse {
		return v.PropertyOverrides
	}).(SSISPropertyOverrideResponseMapOutput)
}

// Specifies the runtime to execute SSIS package. The value should be "x86" or "x64". Type: string (or Expression with resultType string).
func (o ExecuteSSISPackageActivityResponseOutput) Runtime() pulumi.AnyOutput {
	return o.ApplyT(func(v ExecuteSSISPackageActivityResponse) interface{} { return v.Runtime }).(pulumi.AnyOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o ExecuteSSISPackageActivityResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecuteSSISPackageActivityResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'ExecuteSSISPackage'.
func (o ExecuteSSISPackageActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExecuteSSISPackageActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o ExecuteSSISPackageActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v ExecuteSSISPackageActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

// Execute power query activity.
type ExecuteWranglingDataflowActivity struct {
	// Compute properties for data flow activity.
	Compute *ExecuteDataFlowActivityTypePropertiesCompute `pulumi:"compute"`
	// Continue on error setting used for data flow execution. Enables processing to continue if a sink fails. Type: boolean (or Expression with resultType boolean)
	ContinueOnError interface{} `pulumi:"continueOnError"`
	// Data flow reference.
	DataFlow DataFlowReference `pulumi:"dataFlow"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// The integration runtime reference.
	IntegrationRuntime *IntegrationRuntimeReference `pulumi:"integrationRuntime"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// List of mapping for Power Query mashup query to sink dataset(s).
	Queries []PowerQuerySinkMapping `pulumi:"queries"`
	// Concurrent run setting used for data flow execution. Allows sinks with the same save order to be processed concurrently. Type: boolean (or Expression with resultType boolean)
	RunConcurrently interface{} `pulumi:"runConcurrently"`
	// (Deprecated. Please use Queries). List of Power Query activity sinks mapped to a queryName.
	Sinks map[string]PowerQuerySink `pulumi:"sinks"`
	// Specify number of parallel staging for sources applicable to the sink. Type: integer (or Expression with resultType integer)
	SourceStagingConcurrency interface{} `pulumi:"sourceStagingConcurrency"`
	// Staging info for execute data flow activity.
	Staging *DataFlowStagingInfo `pulumi:"staging"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Trace level setting used for data flow monitoring output. Supported values are: 'coarse', 'fine', and 'none'. Type: string (or Expression with resultType string)
	TraceLevel interface{} `pulumi:"traceLevel"`
	// Type of activity.
	// Expected value is 'ExecuteWranglingDataflow'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// ExecuteWranglingDataflowActivityInput is an input type that accepts ExecuteWranglingDataflowActivityArgs and ExecuteWranglingDataflowActivityOutput values.
// You can construct a concrete instance of `ExecuteWranglingDataflowActivityInput` via:
//
//	ExecuteWranglingDataflowActivityArgs{...}
type ExecuteWranglingDataflowActivityInput interface {
	pulumi.Input

	ToExecuteWranglingDataflowActivityOutput() ExecuteWranglingDataflowActivityOutput
	ToExecuteWranglingDataflowActivityOutputWithContext(context.Context) ExecuteWranglingDataflowActivityOutput
}

// Execute power query activity.
type ExecuteWranglingDataflowActivityArgs struct {
	// Compute properties for data flow activity.
	Compute ExecuteDataFlowActivityTypePropertiesComputePtrInput `pulumi:"compute"`
	// Continue on error setting used for data flow execution. Enables processing to continue if a sink fails. Type: boolean (or Expression with resultType boolean)
	ContinueOnError pulumi.Input `pulumi:"continueOnError"`
	// Data flow reference.
	DataFlow DataFlowReferenceInput `pulumi:"dataFlow"`
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The integration runtime reference.
	IntegrationRuntime IntegrationRuntimeReferencePtrInput `pulumi:"integrationRuntime"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs pulumi.StringPtrInput `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy ActivityPolicyPtrInput `pulumi:"policy"`
	// List of mapping for Power Query mashup query to sink dataset(s).
	Queries PowerQuerySinkMappingArrayInput `pulumi:"queries"`
	// Concurrent run setting used for data flow execution. Allows sinks with the same save order to be processed concurrently. Type: boolean (or Expression with resultType boolean)
	RunConcurrently pulumi.Input `pulumi:"runConcurrently"`
	// (Deprecated. Please use Queries). List of Power Query activity sinks mapped to a queryName.
	Sinks PowerQuerySinkMapInput `pulumi:"sinks"`
	// Specify number of parallel staging for sources applicable to the sink. Type: integer (or Expression with resultType integer)
	SourceStagingConcurrency pulumi.Input `pulumi:"sourceStagingConcurrency"`
	// Staging info for execute data flow activity.
	Staging DataFlowStagingInfoPtrInput `pulumi:"staging"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Trace level setting used for data flow monitoring output. Supported values are: 'coarse', 'fine', and 'none'. Type: string (or Expression with resultType string)
	TraceLevel pulumi.Input `pulumi:"traceLevel"`
	// Type of activity.
	// Expected value is 'ExecuteWranglingDataflow'.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
}

func (ExecuteWranglingDataflowActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecuteWranglingDataflowActivity)(nil)).Elem()
}

func (i ExecuteWranglingDataflowActivityArgs) ToExecuteWranglingDataflowActivityOutput() ExecuteWranglingDataflowActivityOutput {
	return i.ToExecuteWranglingDataflowActivityOutputWithContext(context.Background())
}

func (i ExecuteWranglingDataflowActivityArgs) ToExecuteWranglingDataflowActivityOutputWithContext(ctx context.Context) ExecuteWranglingDataflowActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecuteWranglingDataflowActivityOutput)
}

// Execute power query activity.
type ExecuteWranglingDataflowActivityOutput struct{ *pulumi.OutputState }

func (ExecuteWranglingDataflowActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecuteWranglingDataflowActivity)(nil)).Elem()
}

func (o ExecuteWranglingDataflowActivityOutput) ToExecuteWranglingDataflowActivityOutput() ExecuteWranglingDataflowActivityOutput {
	return o
}

func (o ExecuteWranglingDataflowActivityOutput) ToExecuteWranglingDataflowActivityOutputWithContext(ctx context.Context) ExecuteWranglingDataflowActivityOutput {
	return o
}

// Compute properties for data flow activity.
func (o ExecuteWranglingDataflowActivityOutput) Compute() ExecuteDataFlowActivityTypePropertiesComputePtrOutput {
	return o.ApplyT(func(v ExecuteWranglingDataflowActivity) *ExecuteDataFlowActivityTypePropertiesCompute {
		return v.Compute
	}).(ExecuteDataFlowActivityTypePropertiesComputePtrOutput)
}

// Continue on error setting used for data flow execution. Enables processing to continue if a sink fails. Type: boolean (or Expression with resultType boolean)
func (o ExecuteWranglingDataflowActivityOutput) ContinueOnError() pulumi.AnyOutput {
	return o.ApplyT(func(v ExecuteWranglingDataflowActivity) interface{} { return v.ContinueOnError }).(pulumi.AnyOutput)
}

// Data flow reference.
func (o ExecuteWranglingDataflowActivityOutput) DataFlow() DataFlowReferenceOutput {
	return o.ApplyT(func(v ExecuteWranglingDataflowActivity) DataFlowReference { return v.DataFlow }).(DataFlowReferenceOutput)
}

// Activity depends on condition.
func (o ExecuteWranglingDataflowActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v ExecuteWranglingDataflowActivity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o ExecuteWranglingDataflowActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecuteWranglingDataflowActivity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The integration runtime reference.
func (o ExecuteWranglingDataflowActivityOutput) IntegrationRuntime() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v ExecuteWranglingDataflowActivity) *IntegrationRuntimeReference { return v.IntegrationRuntime }).(IntegrationRuntimeReferencePtrOutput)
}

// Activity name.
func (o ExecuteWranglingDataflowActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExecuteWranglingDataflowActivity) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o ExecuteWranglingDataflowActivityOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecuteWranglingDataflowActivity) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o ExecuteWranglingDataflowActivityOutput) Policy() ActivityPolicyPtrOutput {
	return o.ApplyT(func(v ExecuteWranglingDataflowActivity) *ActivityPolicy { return v.Policy }).(ActivityPolicyPtrOutput)
}

// List of mapping for Power Query mashup query to sink dataset(s).
func (o ExecuteWranglingDataflowActivityOutput) Queries() PowerQuerySinkMappingArrayOutput {
	return o.ApplyT(func(v ExecuteWranglingDataflowActivity) []PowerQuerySinkMapping { return v.Queries }).(PowerQuerySinkMappingArrayOutput)
}

// Concurrent run setting used for data flow execution. Allows sinks with the same save order to be processed concurrently. Type: boolean (or Expression with resultType boolean)
func (o ExecuteWranglingDataflowActivityOutput) RunConcurrently() pulumi.AnyOutput {
	return o.ApplyT(func(v ExecuteWranglingDataflowActivity) interface{} { return v.RunConcurrently }).(pulumi.AnyOutput)
}

// (Deprecated. Please use Queries). List of Power Query activity sinks mapped to a queryName.
func (o ExecuteWranglingDataflowActivityOutput) Sinks() PowerQuerySinkMapOutput {
	return o.ApplyT(func(v ExecuteWranglingDataflowActivity) map[string]PowerQuerySink { return v.Sinks }).(PowerQuerySinkMapOutput)
}

// Specify number of parallel staging for sources applicable to the sink. Type: integer (or Expression with resultType integer)
func (o ExecuteWranglingDataflowActivityOutput) SourceStagingConcurrency() pulumi.AnyOutput {
	return o.ApplyT(func(v ExecuteWranglingDataflowActivity) interface{} { return v.SourceStagingConcurrency }).(pulumi.AnyOutput)
}

// Staging info for execute data flow activity.
func (o ExecuteWranglingDataflowActivityOutput) Staging() DataFlowStagingInfoPtrOutput {
	return o.ApplyT(func(v ExecuteWranglingDataflowActivity) *DataFlowStagingInfo { return v.Staging }).(DataFlowStagingInfoPtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o ExecuteWranglingDataflowActivityOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecuteWranglingDataflowActivity) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Trace level setting used for data flow monitoring output. Supported values are: 'coarse', 'fine', and 'none'. Type: string (or Expression with resultType string)
func (o ExecuteWranglingDataflowActivityOutput) TraceLevel() pulumi.AnyOutput {
	return o.ApplyT(func(v ExecuteWranglingDataflowActivity) interface{} { return v.TraceLevel }).(pulumi.AnyOutput)
}

// Type of activity.
// Expected value is 'ExecuteWranglingDataflow'.
func (o ExecuteWranglingDataflowActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExecuteWranglingDataflowActivity) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o ExecuteWranglingDataflowActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v ExecuteWranglingDataflowActivity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

// Execute power query activity.
type ExecuteWranglingDataflowActivityResponse struct {
	// Compute properties for data flow activity.
	Compute *ExecuteDataFlowActivityTypePropertiesResponseCompute `pulumi:"compute"`
	// Continue on error setting used for data flow execution. Enables processing to continue if a sink fails. Type: boolean (or Expression with resultType boolean)
	ContinueOnError interface{} `pulumi:"continueOnError"`
	// Data flow reference.
	DataFlow DataFlowReferenceResponse `pulumi:"dataFlow"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// The integration runtime reference.
	IntegrationRuntime *IntegrationRuntimeReferenceResponse `pulumi:"integrationRuntime"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// List of mapping for Power Query mashup query to sink dataset(s).
	Queries []PowerQuerySinkMappingResponse `pulumi:"queries"`
	// Concurrent run setting used for data flow execution. Allows sinks with the same save order to be processed concurrently. Type: boolean (or Expression with resultType boolean)
	RunConcurrently interface{} `pulumi:"runConcurrently"`
	// (Deprecated. Please use Queries). List of Power Query activity sinks mapped to a queryName.
	Sinks map[string]PowerQuerySinkResponse `pulumi:"sinks"`
	// Specify number of parallel staging for sources applicable to the sink. Type: integer (or Expression with resultType integer)
	SourceStagingConcurrency interface{} `pulumi:"sourceStagingConcurrency"`
	// Staging info for execute data flow activity.
	Staging *DataFlowStagingInfoResponse `pulumi:"staging"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Trace level setting used for data flow monitoring output. Supported values are: 'coarse', 'fine', and 'none'. Type: string (or Expression with resultType string)
	TraceLevel interface{} `pulumi:"traceLevel"`
	// Type of activity.
	// Expected value is 'ExecuteWranglingDataflow'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Execute power query activity.
type ExecuteWranglingDataflowActivityResponseOutput struct{ *pulumi.OutputState }

func (ExecuteWranglingDataflowActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecuteWranglingDataflowActivityResponse)(nil)).Elem()
}

func (o ExecuteWranglingDataflowActivityResponseOutput) ToExecuteWranglingDataflowActivityResponseOutput() ExecuteWranglingDataflowActivityResponseOutput {
	return o
}

func (o ExecuteWranglingDataflowActivityResponseOutput) ToExecuteWranglingDataflowActivityResponseOutputWithContext(ctx context.Context) ExecuteWranglingDataflowActivityResponseOutput {
	return o
}

// Compute properties for data flow activity.
func (o ExecuteWranglingDataflowActivityResponseOutput) Compute() ExecuteDataFlowActivityTypePropertiesResponseComputePtrOutput {
	return o.ApplyT(func(v ExecuteWranglingDataflowActivityResponse) *ExecuteDataFlowActivityTypePropertiesResponseCompute {
		return v.Compute
	}).(ExecuteDataFlowActivityTypePropertiesResponseComputePtrOutput)
}

// Continue on error setting used for data flow execution. Enables processing to continue if a sink fails. Type: boolean (or Expression with resultType boolean)
func (o ExecuteWranglingDataflowActivityResponseOutput) ContinueOnError() pulumi.AnyOutput {
	return o.ApplyT(func(v ExecuteWranglingDataflowActivityResponse) interface{} { return v.ContinueOnError }).(pulumi.AnyOutput)
}

// Data flow reference.
func (o ExecuteWranglingDataflowActivityResponseOutput) DataFlow() DataFlowReferenceResponseOutput {
	return o.ApplyT(func(v ExecuteWranglingDataflowActivityResponse) DataFlowReferenceResponse { return v.DataFlow }).(DataFlowReferenceResponseOutput)
}

// Activity depends on condition.
func (o ExecuteWranglingDataflowActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v ExecuteWranglingDataflowActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o ExecuteWranglingDataflowActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecuteWranglingDataflowActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The integration runtime reference.
func (o ExecuteWranglingDataflowActivityResponseOutput) IntegrationRuntime() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v ExecuteWranglingDataflowActivityResponse) *IntegrationRuntimeReferenceResponse {
		return v.IntegrationRuntime
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Activity name.
func (o ExecuteWranglingDataflowActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExecuteWranglingDataflowActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o ExecuteWranglingDataflowActivityResponseOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecuteWranglingDataflowActivityResponse) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o ExecuteWranglingDataflowActivityResponseOutput) Policy() ActivityPolicyResponsePtrOutput {
	return o.ApplyT(func(v ExecuteWranglingDataflowActivityResponse) *ActivityPolicyResponse { return v.Policy }).(ActivityPolicyResponsePtrOutput)
}

// List of mapping for Power Query mashup query to sink dataset(s).
func (o ExecuteWranglingDataflowActivityResponseOutput) Queries() PowerQuerySinkMappingResponseArrayOutput {
	return o.ApplyT(func(v ExecuteWranglingDataflowActivityResponse) []PowerQuerySinkMappingResponse { return v.Queries }).(PowerQuerySinkMappingResponseArrayOutput)
}

// Concurrent run setting used for data flow execution. Allows sinks with the same save order to be processed concurrently. Type: boolean (or Expression with resultType boolean)
func (o ExecuteWranglingDataflowActivityResponseOutput) RunConcurrently() pulumi.AnyOutput {
	return o.ApplyT(func(v ExecuteWranglingDataflowActivityResponse) interface{} { return v.RunConcurrently }).(pulumi.AnyOutput)
}

// (Deprecated. Please use Queries). List of Power Query activity sinks mapped to a queryName.
func (o ExecuteWranglingDataflowActivityResponseOutput) Sinks() PowerQuerySinkResponseMapOutput {
	return o.ApplyT(func(v ExecuteWranglingDataflowActivityResponse) map[string]PowerQuerySinkResponse { return v.Sinks }).(PowerQuerySinkResponseMapOutput)
}

// Specify number of parallel staging for sources applicable to the sink. Type: integer (or Expression with resultType integer)
func (o ExecuteWranglingDataflowActivityResponseOutput) SourceStagingConcurrency() pulumi.AnyOutput {
	return o.ApplyT(func(v ExecuteWranglingDataflowActivityResponse) interface{} { return v.SourceStagingConcurrency }).(pulumi.AnyOutput)
}

// Staging info for execute data flow activity.
func (o ExecuteWranglingDataflowActivityResponseOutput) Staging() DataFlowStagingInfoResponsePtrOutput {
	return o.ApplyT(func(v ExecuteWranglingDataflowActivityResponse) *DataFlowStagingInfoResponse { return v.Staging }).(DataFlowStagingInfoResponsePtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o ExecuteWranglingDataflowActivityResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecuteWranglingDataflowActivityResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Trace level setting used for data flow monitoring output. Supported values are: 'coarse', 'fine', and 'none'. Type: string (or Expression with resultType string)
func (o ExecuteWranglingDataflowActivityResponseOutput) TraceLevel() pulumi.AnyOutput {
	return o.ApplyT(func(v ExecuteWranglingDataflowActivityResponse) interface{} { return v.TraceLevel }).(pulumi.AnyOutput)
}

// Type of activity.
// Expected value is 'ExecuteWranglingDataflow'.
func (o ExecuteWranglingDataflowActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExecuteWranglingDataflowActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o ExecuteWranglingDataflowActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v ExecuteWranglingDataflowActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

// Base class for all execution activities.
type ExecutionActivity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'Execution'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// ExecutionActivityInput is an input type that accepts ExecutionActivityArgs and ExecutionActivityOutput values.
// You can construct a concrete instance of `ExecutionActivityInput` via:
//
//	ExecutionActivityArgs{...}
type ExecutionActivityInput interface {
	pulumi.Input

	ToExecutionActivityOutput() ExecutionActivityOutput
	ToExecutionActivityOutputWithContext(context.Context) ExecutionActivityOutput
}

// Base class for all execution activities.
type ExecutionActivityArgs struct {
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferencePtrInput `pulumi:"linkedServiceName"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs pulumi.StringPtrInput `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy ActivityPolicyPtrInput `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Type of activity.
	// Expected value is 'Execution'.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
}

func (ExecutionActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutionActivity)(nil)).Elem()
}

func (i ExecutionActivityArgs) ToExecutionActivityOutput() ExecutionActivityOutput {
	return i.ToExecutionActivityOutputWithContext(context.Background())
}

func (i ExecutionActivityArgs) ToExecutionActivityOutputWithContext(ctx context.Context) ExecutionActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecutionActivityOutput)
}

// Base class for all execution activities.
type ExecutionActivityOutput struct{ *pulumi.OutputState }

func (ExecutionActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutionActivity)(nil)).Elem()
}

func (o ExecutionActivityOutput) ToExecutionActivityOutput() ExecutionActivityOutput {
	return o
}

func (o ExecutionActivityOutput) ToExecutionActivityOutputWithContext(ctx context.Context) ExecutionActivityOutput {
	return o
}

// Activity depends on condition.
func (o ExecutionActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v ExecutionActivity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o ExecutionActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutionActivity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o ExecutionActivityOutput) LinkedServiceName() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v ExecutionActivity) *LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferencePtrOutput)
}

// Activity name.
func (o ExecutionActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionActivity) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o ExecutionActivityOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutionActivity) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o ExecutionActivityOutput) Policy() ActivityPolicyPtrOutput {
	return o.ApplyT(func(v ExecutionActivity) *ActivityPolicy { return v.Policy }).(ActivityPolicyPtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o ExecutionActivityOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutionActivity) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'Execution'.
func (o ExecutionActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionActivity) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o ExecutionActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v ExecutionActivity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

// Base class for all execution activities.
type ExecutionActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'Execution'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Base class for all execution activities.
type ExecutionActivityResponseOutput struct{ *pulumi.OutputState }

func (ExecutionActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutionActivityResponse)(nil)).Elem()
}

func (o ExecutionActivityResponseOutput) ToExecutionActivityResponseOutput() ExecutionActivityResponseOutput {
	return o
}

func (o ExecutionActivityResponseOutput) ToExecutionActivityResponseOutputWithContext(ctx context.Context) ExecutionActivityResponseOutput {
	return o
}

// Activity depends on condition.
func (o ExecutionActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v ExecutionActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o ExecutionActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutionActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Linked service reference.
func (o ExecutionActivityResponseOutput) LinkedServiceName() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v ExecutionActivityResponse) *LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponsePtrOutput)
}

// Activity name.
func (o ExecutionActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o ExecutionActivityResponseOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutionActivityResponse) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o ExecutionActivityResponseOutput) Policy() ActivityPolicyResponsePtrOutput {
	return o.ApplyT(func(v ExecutionActivityResponse) *ActivityPolicyResponse { return v.Policy }).(ActivityPolicyResponsePtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o ExecutionActivityResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutionActivityResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'Execution'.
func (o ExecutionActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o ExecutionActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v ExecutionActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

// Azure Data Factory expression definition.
type Expression struct {
	// Expression type.
	Type string `pulumi:"type"`
	// Expression value.
	Value string `pulumi:"value"`
}

// ExpressionInput is an input type that accepts ExpressionArgs and ExpressionOutput values.
// You can construct a concrete instance of `ExpressionInput` via:
//
//	ExpressionArgs{...}
type ExpressionInput interface {
	pulumi.Input

	ToExpressionOutput() ExpressionOutput
	ToExpressionOutputWithContext(context.Context) ExpressionOutput
}

// Azure Data Factory expression definition.
type ExpressionArgs struct {
	// Expression type.
	Type pulumi.StringInput `pulumi:"type"`
	// Expression value.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ExpressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expression)(nil)).Elem()
}

func (i ExpressionArgs) ToExpressionOutput() ExpressionOutput {
	return i.ToExpressionOutputWithContext(context.Background())
}

func (i ExpressionArgs) ToExpressionOutputWithContext(ctx context.Context) ExpressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpressionOutput)
}

// Azure Data Factory expression definition.
type ExpressionOutput struct{ *pulumi.OutputState }

func (ExpressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expression)(nil)).Elem()
}

func (o ExpressionOutput) ToExpressionOutput() ExpressionOutput {
	return o
}

func (o ExpressionOutput) ToExpressionOutputWithContext(ctx context.Context) ExpressionOutput {
	return o
}

// Expression type.
func (o ExpressionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Expression) string { return v.Type }).(pulumi.StringOutput)
}

// Expression value.
func (o ExpressionOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v Expression) string { return v.Value }).(pulumi.StringOutput)
}

// Azure Data Factory expression definition.
type ExpressionResponse struct {
	// Expression type.
	Type string `pulumi:"type"`
	// Expression value.
	Value string `pulumi:"value"`
}

// Azure Data Factory expression definition.
type ExpressionResponseOutput struct{ *pulumi.OutputState }

func (ExpressionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExpressionResponse)(nil)).Elem()
}

func (o ExpressionResponseOutput) ToExpressionResponseOutput() ExpressionResponseOutput {
	return o
}

func (o ExpressionResponseOutput) ToExpressionResponseOutputWithContext(ctx context.Context) ExpressionResponseOutput {
	return o
}

// Expression type.
func (o ExpressionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExpressionResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Expression value.
func (o ExpressionResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ExpressionResponse) string { return v.Value }).(pulumi.StringOutput)
}

// Nested representation of a complex expression.
type ExpressionV2 struct {
	// List of nested expressions.
	Operands []ExpressionV2 `pulumi:"operands"`
	// Expression operator value Type: string.
	Operator *string `pulumi:"operator"`
	// Type of expressions supported by the system. Type: string.
	Type *string `pulumi:"type"`
	// Value for Constant/Field Type: string.
	Value *string `pulumi:"value"`
}

// ExpressionV2Input is an input type that accepts ExpressionV2Args and ExpressionV2Output values.
// You can construct a concrete instance of `ExpressionV2Input` via:
//
//	ExpressionV2Args{...}
type ExpressionV2Input interface {
	pulumi.Input

	ToExpressionV2Output() ExpressionV2Output
	ToExpressionV2OutputWithContext(context.Context) ExpressionV2Output
}

// Nested representation of a complex expression.
type ExpressionV2Args struct {
	// List of nested expressions.
	Operands ExpressionV2ArrayInput `pulumi:"operands"`
	// Expression operator value Type: string.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// Type of expressions supported by the system. Type: string.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Value for Constant/Field Type: string.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ExpressionV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*ExpressionV2)(nil)).Elem()
}

func (i ExpressionV2Args) ToExpressionV2Output() ExpressionV2Output {
	return i.ToExpressionV2OutputWithContext(context.Background())
}

func (i ExpressionV2Args) ToExpressionV2OutputWithContext(ctx context.Context) ExpressionV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(ExpressionV2Output)
}

func (i ExpressionV2Args) ToExpressionV2PtrOutput() ExpressionV2PtrOutput {
	return i.ToExpressionV2PtrOutputWithContext(context.Background())
}

func (i ExpressionV2Args) ToExpressionV2PtrOutputWithContext(ctx context.Context) ExpressionV2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpressionV2Output).ToExpressionV2PtrOutputWithContext(ctx)
}

// ExpressionV2PtrInput is an input type that accepts ExpressionV2Args, ExpressionV2Ptr and ExpressionV2PtrOutput values.
// You can construct a concrete instance of `ExpressionV2PtrInput` via:
//
//	        ExpressionV2Args{...}
//
//	or:
//
//	        nil
type ExpressionV2PtrInput interface {
	pulumi.Input

	ToExpressionV2PtrOutput() ExpressionV2PtrOutput
	ToExpressionV2PtrOutputWithContext(context.Context) ExpressionV2PtrOutput
}

type expressionV2PtrType ExpressionV2Args

func ExpressionV2Ptr(v *ExpressionV2Args) ExpressionV2PtrInput {
	return (*expressionV2PtrType)(v)
}

func (*expressionV2PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExpressionV2)(nil)).Elem()
}

func (i *expressionV2PtrType) ToExpressionV2PtrOutput() ExpressionV2PtrOutput {
	return i.ToExpressionV2PtrOutputWithContext(context.Background())
}

func (i *expressionV2PtrType) ToExpressionV2PtrOutputWithContext(ctx context.Context) ExpressionV2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpressionV2PtrOutput)
}

// ExpressionV2ArrayInput is an input type that accepts ExpressionV2Array and ExpressionV2ArrayOutput values.
// You can construct a concrete instance of `ExpressionV2ArrayInput` via:
//
//	ExpressionV2Array{ ExpressionV2Args{...} }
type ExpressionV2ArrayInput interface {
	pulumi.Input

	ToExpressionV2ArrayOutput() ExpressionV2ArrayOutput
	ToExpressionV2ArrayOutputWithContext(context.Context) ExpressionV2ArrayOutput
}

type ExpressionV2Array []ExpressionV2Input

func (ExpressionV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExpressionV2)(nil)).Elem()
}

func (i ExpressionV2Array) ToExpressionV2ArrayOutput() ExpressionV2ArrayOutput {
	return i.ToExpressionV2ArrayOutputWithContext(context.Background())
}

func (i ExpressionV2Array) ToExpressionV2ArrayOutputWithContext(ctx context.Context) ExpressionV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExpressionV2ArrayOutput)
}

// Nested representation of a complex expression.
type ExpressionV2Output struct{ *pulumi.OutputState }

func (ExpressionV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*ExpressionV2)(nil)).Elem()
}

func (o ExpressionV2Output) ToExpressionV2Output() ExpressionV2Output {
	return o
}

func (o ExpressionV2Output) ToExpressionV2OutputWithContext(ctx context.Context) ExpressionV2Output {
	return o
}

func (o ExpressionV2Output) ToExpressionV2PtrOutput() ExpressionV2PtrOutput {
	return o.ToExpressionV2PtrOutputWithContext(context.Background())
}

func (o ExpressionV2Output) ToExpressionV2PtrOutputWithContext(ctx context.Context) ExpressionV2PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExpressionV2) *ExpressionV2 {
		return &v
	}).(ExpressionV2PtrOutput)
}

// List of nested expressions.
func (o ExpressionV2Output) Operands() ExpressionV2ArrayOutput {
	return o.ApplyT(func(v ExpressionV2) []ExpressionV2 { return v.Operands }).(ExpressionV2ArrayOutput)
}

// Expression operator value Type: string.
func (o ExpressionV2Output) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExpressionV2) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// Type of expressions supported by the system. Type: string.
func (o ExpressionV2Output) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExpressionV2) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Value for Constant/Field Type: string.
func (o ExpressionV2Output) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExpressionV2) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ExpressionV2PtrOutput struct{ *pulumi.OutputState }

func (ExpressionV2PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExpressionV2)(nil)).Elem()
}

func (o ExpressionV2PtrOutput) ToExpressionV2PtrOutput() ExpressionV2PtrOutput {
	return o
}

func (o ExpressionV2PtrOutput) ToExpressionV2PtrOutputWithContext(ctx context.Context) ExpressionV2PtrOutput {
	return o
}

func (o ExpressionV2PtrOutput) Elem() ExpressionV2Output {
	return o.ApplyT(func(v *ExpressionV2) ExpressionV2 {
		if v != nil {
			return *v
		}
		var ret ExpressionV2
		return ret
	}).(ExpressionV2Output)
}

// List of nested expressions.
func (o ExpressionV2PtrOutput) Operands() ExpressionV2ArrayOutput {
	return o.ApplyT(func(v *ExpressionV2) []ExpressionV2 {
		if v == nil {
			return nil
		}
		return v.Operands
	}).(ExpressionV2ArrayOutput)
}

// Expression operator value Type: string.
func (o ExpressionV2PtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpressionV2) *string {
		if v == nil {
			return nil
		}
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// Type of expressions supported by the system. Type: string.
func (o ExpressionV2PtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpressionV2) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Value for Constant/Field Type: string.
func (o ExpressionV2PtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpressionV2) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type ExpressionV2ArrayOutput struct{ *pulumi.OutputState }

func (ExpressionV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExpressionV2)(nil)).Elem()
}

func (o ExpressionV2ArrayOutput) ToExpressionV2ArrayOutput() ExpressionV2ArrayOutput {
	return o
}

func (o ExpressionV2ArrayOutput) ToExpressionV2ArrayOutputWithContext(ctx context.Context) ExpressionV2ArrayOutput {
	return o
}

func (o ExpressionV2ArrayOutput) Index(i pulumi.IntInput) ExpressionV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExpressionV2 {
		return vs[0].([]ExpressionV2)[vs[1].(int)]
	}).(ExpressionV2Output)
}

// Nested representation of a complex expression.
type ExpressionV2Response struct {
	// List of nested expressions.
	Operands []ExpressionV2Response `pulumi:"operands"`
	// Expression operator value Type: string.
	Operator *string `pulumi:"operator"`
	// Type of expressions supported by the system. Type: string.
	Type *string `pulumi:"type"`
	// Value for Constant/Field Type: string.
	Value *string `pulumi:"value"`
}

// Nested representation of a complex expression.
type ExpressionV2ResponseOutput struct{ *pulumi.OutputState }

func (ExpressionV2ResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExpressionV2Response)(nil)).Elem()
}

func (o ExpressionV2ResponseOutput) ToExpressionV2ResponseOutput() ExpressionV2ResponseOutput {
	return o
}

func (o ExpressionV2ResponseOutput) ToExpressionV2ResponseOutputWithContext(ctx context.Context) ExpressionV2ResponseOutput {
	return o
}

// List of nested expressions.
func (o ExpressionV2ResponseOutput) Operands() ExpressionV2ResponseArrayOutput {
	return o.ApplyT(func(v ExpressionV2Response) []ExpressionV2Response { return v.Operands }).(ExpressionV2ResponseArrayOutput)
}

// Expression operator value Type: string.
func (o ExpressionV2ResponseOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExpressionV2Response) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// Type of expressions supported by the system. Type: string.
func (o ExpressionV2ResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExpressionV2Response) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Value for Constant/Field Type: string.
func (o ExpressionV2ResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExpressionV2Response) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ExpressionV2ResponsePtrOutput struct{ *pulumi.OutputState }

func (ExpressionV2ResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExpressionV2Response)(nil)).Elem()
}

func (o ExpressionV2ResponsePtrOutput) ToExpressionV2ResponsePtrOutput() ExpressionV2ResponsePtrOutput {
	return o
}

func (o ExpressionV2ResponsePtrOutput) ToExpressionV2ResponsePtrOutputWithContext(ctx context.Context) ExpressionV2ResponsePtrOutput {
	return o
}

func (o ExpressionV2ResponsePtrOutput) Elem() ExpressionV2ResponseOutput {
	return o.ApplyT(func(v *ExpressionV2Response) ExpressionV2Response {
		if v != nil {
			return *v
		}
		var ret ExpressionV2Response
		return ret
	}).(ExpressionV2ResponseOutput)
}

// List of nested expressions.
func (o ExpressionV2ResponsePtrOutput) Operands() ExpressionV2ResponseArrayOutput {
	return o.ApplyT(func(v *ExpressionV2Response) []ExpressionV2Response {
		if v == nil {
			return nil
		}
		return v.Operands
	}).(ExpressionV2ResponseArrayOutput)
}

// Expression operator value Type: string.
func (o ExpressionV2ResponsePtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpressionV2Response) *string {
		if v == nil {
			return nil
		}
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// Type of expressions supported by the system. Type: string.
func (o ExpressionV2ResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpressionV2Response) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Value for Constant/Field Type: string.
func (o ExpressionV2ResponsePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpressionV2Response) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type ExpressionV2ResponseArrayOutput struct{ *pulumi.OutputState }

func (ExpressionV2ResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExpressionV2Response)(nil)).Elem()
}

func (o ExpressionV2ResponseArrayOutput) ToExpressionV2ResponseArrayOutput() ExpressionV2ResponseArrayOutput {
	return o
}

func (o ExpressionV2ResponseArrayOutput) ToExpressionV2ResponseArrayOutputWithContext(ctx context.Context) ExpressionV2ResponseArrayOutput {
	return o
}

func (o ExpressionV2ResponseArrayOutput) Index(i pulumi.IntInput) ExpressionV2ResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExpressionV2Response {
		return vs[0].([]ExpressionV2Response)[vs[1].(int)]
	}).(ExpressionV2ResponseOutput)
}

// Factory's GitHub repo information.
type FactoryGitHubConfiguration struct {
	// Account name.
	AccountName string `pulumi:"accountName"`
	// GitHub bring your own app client id.
	ClientId *string `pulumi:"clientId"`
	// GitHub bring your own app client secret information.
	ClientSecret *GitHubClientSecret `pulumi:"clientSecret"`
	// Collaboration branch.
	CollaborationBranch string `pulumi:"collaborationBranch"`
	// Disable manual publish operation in ADF studio to favor automated publish.
	DisablePublish *bool `pulumi:"disablePublish"`
	// GitHub Enterprise host name. For example: `https://github.mydomain.com`
	HostName *string `pulumi:"hostName"`
	// Last commit id.
	LastCommitId *string `pulumi:"lastCommitId"`
	// Repository name.
	RepositoryName string `pulumi:"repositoryName"`
	// Root folder.
	RootFolder string `pulumi:"rootFolder"`
	// Type of repo configuration.
	// Expected value is 'FactoryGitHubConfiguration'.
	Type string `pulumi:"type"`
}

// FactoryGitHubConfigurationInput is an input type that accepts FactoryGitHubConfigurationArgs and FactoryGitHubConfigurationOutput values.
// You can construct a concrete instance of `FactoryGitHubConfigurationInput` via:
//
//	FactoryGitHubConfigurationArgs{...}
type FactoryGitHubConfigurationInput interface {
	pulumi.Input

	ToFactoryGitHubConfigurationOutput() FactoryGitHubConfigurationOutput
	ToFactoryGitHubConfigurationOutputWithContext(context.Context) FactoryGitHubConfigurationOutput
}

// Factory's GitHub repo information.
type FactoryGitHubConfigurationArgs struct {
	// Account name.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// GitHub bring your own app client id.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// GitHub bring your own app client secret information.
	ClientSecret GitHubClientSecretPtrInput `pulumi:"clientSecret"`
	// Collaboration branch.
	CollaborationBranch pulumi.StringInput `pulumi:"collaborationBranch"`
	// Disable manual publish operation in ADF studio to favor automated publish.
	DisablePublish pulumi.BoolPtrInput `pulumi:"disablePublish"`
	// GitHub Enterprise host name. For example: `https://github.mydomain.com`
	HostName pulumi.StringPtrInput `pulumi:"hostName"`
	// Last commit id.
	LastCommitId pulumi.StringPtrInput `pulumi:"lastCommitId"`
	// Repository name.
	RepositoryName pulumi.StringInput `pulumi:"repositoryName"`
	// Root folder.
	RootFolder pulumi.StringInput `pulumi:"rootFolder"`
	// Type of repo configuration.
	// Expected value is 'FactoryGitHubConfiguration'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FactoryGitHubConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryGitHubConfiguration)(nil)).Elem()
}

func (i FactoryGitHubConfigurationArgs) ToFactoryGitHubConfigurationOutput() FactoryGitHubConfigurationOutput {
	return i.ToFactoryGitHubConfigurationOutputWithContext(context.Background())
}

func (i FactoryGitHubConfigurationArgs) ToFactoryGitHubConfigurationOutputWithContext(ctx context.Context) FactoryGitHubConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryGitHubConfigurationOutput)
}

func (i FactoryGitHubConfigurationArgs) ToFactoryGitHubConfigurationPtrOutput() FactoryGitHubConfigurationPtrOutput {
	return i.ToFactoryGitHubConfigurationPtrOutputWithContext(context.Background())
}

func (i FactoryGitHubConfigurationArgs) ToFactoryGitHubConfigurationPtrOutputWithContext(ctx context.Context) FactoryGitHubConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryGitHubConfigurationOutput).ToFactoryGitHubConfigurationPtrOutputWithContext(ctx)
}

// FactoryGitHubConfigurationPtrInput is an input type that accepts FactoryGitHubConfigurationArgs, FactoryGitHubConfigurationPtr and FactoryGitHubConfigurationPtrOutput values.
// You can construct a concrete instance of `FactoryGitHubConfigurationPtrInput` via:
//
//	        FactoryGitHubConfigurationArgs{...}
//
//	or:
//
//	        nil
type FactoryGitHubConfigurationPtrInput interface {
	pulumi.Input

	ToFactoryGitHubConfigurationPtrOutput() FactoryGitHubConfigurationPtrOutput
	ToFactoryGitHubConfigurationPtrOutputWithContext(context.Context) FactoryGitHubConfigurationPtrOutput
}

type factoryGitHubConfigurationPtrType FactoryGitHubConfigurationArgs

func FactoryGitHubConfigurationPtr(v *FactoryGitHubConfigurationArgs) FactoryGitHubConfigurationPtrInput {
	return (*factoryGitHubConfigurationPtrType)(v)
}

func (*factoryGitHubConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryGitHubConfiguration)(nil)).Elem()
}

func (i *factoryGitHubConfigurationPtrType) ToFactoryGitHubConfigurationPtrOutput() FactoryGitHubConfigurationPtrOutput {
	return i.ToFactoryGitHubConfigurationPtrOutputWithContext(context.Background())
}

func (i *factoryGitHubConfigurationPtrType) ToFactoryGitHubConfigurationPtrOutputWithContext(ctx context.Context) FactoryGitHubConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryGitHubConfigurationPtrOutput)
}

// Factory's GitHub repo information.
type FactoryGitHubConfigurationOutput struct{ *pulumi.OutputState }

func (FactoryGitHubConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryGitHubConfiguration)(nil)).Elem()
}

func (o FactoryGitHubConfigurationOutput) ToFactoryGitHubConfigurationOutput() FactoryGitHubConfigurationOutput {
	return o
}

func (o FactoryGitHubConfigurationOutput) ToFactoryGitHubConfigurationOutputWithContext(ctx context.Context) FactoryGitHubConfigurationOutput {
	return o
}

func (o FactoryGitHubConfigurationOutput) ToFactoryGitHubConfigurationPtrOutput() FactoryGitHubConfigurationPtrOutput {
	return o.ToFactoryGitHubConfigurationPtrOutputWithContext(context.Background())
}

func (o FactoryGitHubConfigurationOutput) ToFactoryGitHubConfigurationPtrOutputWithContext(ctx context.Context) FactoryGitHubConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FactoryGitHubConfiguration) *FactoryGitHubConfiguration {
		return &v
	}).(FactoryGitHubConfigurationPtrOutput)
}

// Account name.
func (o FactoryGitHubConfigurationOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryGitHubConfiguration) string { return v.AccountName }).(pulumi.StringOutput)
}

// GitHub bring your own app client id.
func (o FactoryGitHubConfigurationOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryGitHubConfiguration) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// GitHub bring your own app client secret information.
func (o FactoryGitHubConfigurationOutput) ClientSecret() GitHubClientSecretPtrOutput {
	return o.ApplyT(func(v FactoryGitHubConfiguration) *GitHubClientSecret { return v.ClientSecret }).(GitHubClientSecretPtrOutput)
}

// Collaboration branch.
func (o FactoryGitHubConfigurationOutput) CollaborationBranch() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryGitHubConfiguration) string { return v.CollaborationBranch }).(pulumi.StringOutput)
}

// Disable manual publish operation in ADF studio to favor automated publish.
func (o FactoryGitHubConfigurationOutput) DisablePublish() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FactoryGitHubConfiguration) *bool { return v.DisablePublish }).(pulumi.BoolPtrOutput)
}

// GitHub Enterprise host name. For example: `https://github.mydomain.com`
func (o FactoryGitHubConfigurationOutput) HostName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryGitHubConfiguration) *string { return v.HostName }).(pulumi.StringPtrOutput)
}

// Last commit id.
func (o FactoryGitHubConfigurationOutput) LastCommitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryGitHubConfiguration) *string { return v.LastCommitId }).(pulumi.StringPtrOutput)
}

// Repository name.
func (o FactoryGitHubConfigurationOutput) RepositoryName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryGitHubConfiguration) string { return v.RepositoryName }).(pulumi.StringOutput)
}

// Root folder.
func (o FactoryGitHubConfigurationOutput) RootFolder() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryGitHubConfiguration) string { return v.RootFolder }).(pulumi.StringOutput)
}

// Type of repo configuration.
// Expected value is 'FactoryGitHubConfiguration'.
func (o FactoryGitHubConfigurationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryGitHubConfiguration) string { return v.Type }).(pulumi.StringOutput)
}

type FactoryGitHubConfigurationPtrOutput struct{ *pulumi.OutputState }

func (FactoryGitHubConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryGitHubConfiguration)(nil)).Elem()
}

func (o FactoryGitHubConfigurationPtrOutput) ToFactoryGitHubConfigurationPtrOutput() FactoryGitHubConfigurationPtrOutput {
	return o
}

func (o FactoryGitHubConfigurationPtrOutput) ToFactoryGitHubConfigurationPtrOutputWithContext(ctx context.Context) FactoryGitHubConfigurationPtrOutput {
	return o
}

func (o FactoryGitHubConfigurationPtrOutput) Elem() FactoryGitHubConfigurationOutput {
	return o.ApplyT(func(v *FactoryGitHubConfiguration) FactoryGitHubConfiguration {
		if v != nil {
			return *v
		}
		var ret FactoryGitHubConfiguration
		return ret
	}).(FactoryGitHubConfigurationOutput)
}

// Account name.
func (o FactoryGitHubConfigurationPtrOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryGitHubConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.AccountName
	}).(pulumi.StringPtrOutput)
}

// GitHub bring your own app client id.
func (o FactoryGitHubConfigurationPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryGitHubConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// GitHub bring your own app client secret information.
func (o FactoryGitHubConfigurationPtrOutput) ClientSecret() GitHubClientSecretPtrOutput {
	return o.ApplyT(func(v *FactoryGitHubConfiguration) *GitHubClientSecret {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(GitHubClientSecretPtrOutput)
}

// Collaboration branch.
func (o FactoryGitHubConfigurationPtrOutput) CollaborationBranch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryGitHubConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.CollaborationBranch
	}).(pulumi.StringPtrOutput)
}

// Disable manual publish operation in ADF studio to favor automated publish.
func (o FactoryGitHubConfigurationPtrOutput) DisablePublish() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FactoryGitHubConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.DisablePublish
	}).(pulumi.BoolPtrOutput)
}

// GitHub Enterprise host name. For example: `https://github.mydomain.com`
func (o FactoryGitHubConfigurationPtrOutput) HostName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryGitHubConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.HostName
	}).(pulumi.StringPtrOutput)
}

// Last commit id.
func (o FactoryGitHubConfigurationPtrOutput) LastCommitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryGitHubConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.LastCommitId
	}).(pulumi.StringPtrOutput)
}

// Repository name.
func (o FactoryGitHubConfigurationPtrOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryGitHubConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.RepositoryName
	}).(pulumi.StringPtrOutput)
}

// Root folder.
func (o FactoryGitHubConfigurationPtrOutput) RootFolder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryGitHubConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.RootFolder
	}).(pulumi.StringPtrOutput)
}

// Type of repo configuration.
// Expected value is 'FactoryGitHubConfiguration'.
func (o FactoryGitHubConfigurationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryGitHubConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Factory's GitHub repo information.
type FactoryGitHubConfigurationResponse struct {
	// Account name.
	AccountName string `pulumi:"accountName"`
	// GitHub bring your own app client id.
	ClientId *string `pulumi:"clientId"`
	// GitHub bring your own app client secret information.
	ClientSecret *GitHubClientSecretResponse `pulumi:"clientSecret"`
	// Collaboration branch.
	CollaborationBranch string `pulumi:"collaborationBranch"`
	// Disable manual publish operation in ADF studio to favor automated publish.
	DisablePublish *bool `pulumi:"disablePublish"`
	// GitHub Enterprise host name. For example: `https://github.mydomain.com`
	HostName *string `pulumi:"hostName"`
	// Last commit id.
	LastCommitId *string `pulumi:"lastCommitId"`
	// Repository name.
	RepositoryName string `pulumi:"repositoryName"`
	// Root folder.
	RootFolder string `pulumi:"rootFolder"`
	// Type of repo configuration.
	// Expected value is 'FactoryGitHubConfiguration'.
	Type string `pulumi:"type"`
}

// Factory's GitHub repo information.
type FactoryGitHubConfigurationResponseOutput struct{ *pulumi.OutputState }

func (FactoryGitHubConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryGitHubConfigurationResponse)(nil)).Elem()
}

func (o FactoryGitHubConfigurationResponseOutput) ToFactoryGitHubConfigurationResponseOutput() FactoryGitHubConfigurationResponseOutput {
	return o
}

func (o FactoryGitHubConfigurationResponseOutput) ToFactoryGitHubConfigurationResponseOutputWithContext(ctx context.Context) FactoryGitHubConfigurationResponseOutput {
	return o
}

// Account name.
func (o FactoryGitHubConfigurationResponseOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryGitHubConfigurationResponse) string { return v.AccountName }).(pulumi.StringOutput)
}

// GitHub bring your own app client id.
func (o FactoryGitHubConfigurationResponseOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryGitHubConfigurationResponse) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// GitHub bring your own app client secret information.
func (o FactoryGitHubConfigurationResponseOutput) ClientSecret() GitHubClientSecretResponsePtrOutput {
	return o.ApplyT(func(v FactoryGitHubConfigurationResponse) *GitHubClientSecretResponse { return v.ClientSecret }).(GitHubClientSecretResponsePtrOutput)
}

// Collaboration branch.
func (o FactoryGitHubConfigurationResponseOutput) CollaborationBranch() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryGitHubConfigurationResponse) string { return v.CollaborationBranch }).(pulumi.StringOutput)
}

// Disable manual publish operation in ADF studio to favor automated publish.
func (o FactoryGitHubConfigurationResponseOutput) DisablePublish() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FactoryGitHubConfigurationResponse) *bool { return v.DisablePublish }).(pulumi.BoolPtrOutput)
}

// GitHub Enterprise host name. For example: `https://github.mydomain.com`
func (o FactoryGitHubConfigurationResponseOutput) HostName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryGitHubConfigurationResponse) *string { return v.HostName }).(pulumi.StringPtrOutput)
}

// Last commit id.
func (o FactoryGitHubConfigurationResponseOutput) LastCommitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryGitHubConfigurationResponse) *string { return v.LastCommitId }).(pulumi.StringPtrOutput)
}

// Repository name.
func (o FactoryGitHubConfigurationResponseOutput) RepositoryName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryGitHubConfigurationResponse) string { return v.RepositoryName }).(pulumi.StringOutput)
}

// Root folder.
func (o FactoryGitHubConfigurationResponseOutput) RootFolder() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryGitHubConfigurationResponse) string { return v.RootFolder }).(pulumi.StringOutput)
}

// Type of repo configuration.
// Expected value is 'FactoryGitHubConfiguration'.
func (o FactoryGitHubConfigurationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryGitHubConfigurationResponse) string { return v.Type }).(pulumi.StringOutput)
}

type FactoryGitHubConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (FactoryGitHubConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryGitHubConfigurationResponse)(nil)).Elem()
}

func (o FactoryGitHubConfigurationResponsePtrOutput) ToFactoryGitHubConfigurationResponsePtrOutput() FactoryGitHubConfigurationResponsePtrOutput {
	return o
}

func (o FactoryGitHubConfigurationResponsePtrOutput) ToFactoryGitHubConfigurationResponsePtrOutputWithContext(ctx context.Context) FactoryGitHubConfigurationResponsePtrOutput {
	return o
}

func (o FactoryGitHubConfigurationResponsePtrOutput) Elem() FactoryGitHubConfigurationResponseOutput {
	return o.ApplyT(func(v *FactoryGitHubConfigurationResponse) FactoryGitHubConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret FactoryGitHubConfigurationResponse
		return ret
	}).(FactoryGitHubConfigurationResponseOutput)
}

// Account name.
func (o FactoryGitHubConfigurationResponsePtrOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryGitHubConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AccountName
	}).(pulumi.StringPtrOutput)
}

// GitHub bring your own app client id.
func (o FactoryGitHubConfigurationResponsePtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryGitHubConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// GitHub bring your own app client secret information.
func (o FactoryGitHubConfigurationResponsePtrOutput) ClientSecret() GitHubClientSecretResponsePtrOutput {
	return o.ApplyT(func(v *FactoryGitHubConfigurationResponse) *GitHubClientSecretResponse {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(GitHubClientSecretResponsePtrOutput)
}

// Collaboration branch.
func (o FactoryGitHubConfigurationResponsePtrOutput) CollaborationBranch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryGitHubConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CollaborationBranch
	}).(pulumi.StringPtrOutput)
}

// Disable manual publish operation in ADF studio to favor automated publish.
func (o FactoryGitHubConfigurationResponsePtrOutput) DisablePublish() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FactoryGitHubConfigurationResponse) *bool {
		if v == nil {
			return nil
		}
		return v.DisablePublish
	}).(pulumi.BoolPtrOutput)
}

// GitHub Enterprise host name. For example: `https://github.mydomain.com`
func (o FactoryGitHubConfigurationResponsePtrOutput) HostName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryGitHubConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.HostName
	}).(pulumi.StringPtrOutput)
}

// Last commit id.
func (o FactoryGitHubConfigurationResponsePtrOutput) LastCommitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryGitHubConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.LastCommitId
	}).(pulumi.StringPtrOutput)
}

// Repository name.
func (o FactoryGitHubConfigurationResponsePtrOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryGitHubConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RepositoryName
	}).(pulumi.StringPtrOutput)
}

// Root folder.
func (o FactoryGitHubConfigurationResponsePtrOutput) RootFolder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryGitHubConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RootFolder
	}).(pulumi.StringPtrOutput)
}

// Type of repo configuration.
// Expected value is 'FactoryGitHubConfiguration'.
func (o FactoryGitHubConfigurationResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryGitHubConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Identity properties of the factory resource.
type FactoryIdentity struct {
	// The identity type.
	Type string `pulumi:"type"`
	// List of user assigned identities for the factory.
	UserAssignedIdentities map[string]interface{} `pulumi:"userAssignedIdentities"`
}

// FactoryIdentityInput is an input type that accepts FactoryIdentityArgs and FactoryIdentityOutput values.
// You can construct a concrete instance of `FactoryIdentityInput` via:
//
//	FactoryIdentityArgs{...}
type FactoryIdentityInput interface {
	pulumi.Input

	ToFactoryIdentityOutput() FactoryIdentityOutput
	ToFactoryIdentityOutputWithContext(context.Context) FactoryIdentityOutput
}

// Identity properties of the factory resource.
type FactoryIdentityArgs struct {
	// The identity type.
	Type pulumi.StringInput `pulumi:"type"`
	// List of user assigned identities for the factory.
	UserAssignedIdentities pulumi.MapInput `pulumi:"userAssignedIdentities"`
}

func (FactoryIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryIdentity)(nil)).Elem()
}

func (i FactoryIdentityArgs) ToFactoryIdentityOutput() FactoryIdentityOutput {
	return i.ToFactoryIdentityOutputWithContext(context.Background())
}

func (i FactoryIdentityArgs) ToFactoryIdentityOutputWithContext(ctx context.Context) FactoryIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityOutput)
}

func (i FactoryIdentityArgs) ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput {
	return i.ToFactoryIdentityPtrOutputWithContext(context.Background())
}

func (i FactoryIdentityArgs) ToFactoryIdentityPtrOutputWithContext(ctx context.Context) FactoryIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityOutput).ToFactoryIdentityPtrOutputWithContext(ctx)
}

// FactoryIdentityPtrInput is an input type that accepts FactoryIdentityArgs, FactoryIdentityPtr and FactoryIdentityPtrOutput values.
// You can construct a concrete instance of `FactoryIdentityPtrInput` via:
//
//	        FactoryIdentityArgs{...}
//
//	or:
//
//	        nil
type FactoryIdentityPtrInput interface {
	pulumi.Input

	ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput
	ToFactoryIdentityPtrOutputWithContext(context.Context) FactoryIdentityPtrOutput
}

type factoryIdentityPtrType FactoryIdentityArgs

func FactoryIdentityPtr(v *FactoryIdentityArgs) FactoryIdentityPtrInput {
	return (*factoryIdentityPtrType)(v)
}

func (*factoryIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryIdentity)(nil)).Elem()
}

func (i *factoryIdentityPtrType) ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput {
	return i.ToFactoryIdentityPtrOutputWithContext(context.Background())
}

func (i *factoryIdentityPtrType) ToFactoryIdentityPtrOutputWithContext(ctx context.Context) FactoryIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityPtrOutput)
}

// Identity properties of the factory resource.
type FactoryIdentityOutput struct{ *pulumi.OutputState }

func (FactoryIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryIdentity)(nil)).Elem()
}

func (o FactoryIdentityOutput) ToFactoryIdentityOutput() FactoryIdentityOutput {
	return o
}

func (o FactoryIdentityOutput) ToFactoryIdentityOutputWithContext(ctx context.Context) FactoryIdentityOutput {
	return o
}

func (o FactoryIdentityOutput) ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput {
	return o.ToFactoryIdentityPtrOutputWithContext(context.Background())
}

func (o FactoryIdentityOutput) ToFactoryIdentityPtrOutputWithContext(ctx context.Context) FactoryIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FactoryIdentity) *FactoryIdentity {
		return &v
	}).(FactoryIdentityPtrOutput)
}

// The identity type.
func (o FactoryIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryIdentity) string { return v.Type }).(pulumi.StringOutput)
}

// List of user assigned identities for the factory.
func (o FactoryIdentityOutput) UserAssignedIdentities() pulumi.MapOutput {
	return o.ApplyT(func(v FactoryIdentity) map[string]interface{} { return v.UserAssignedIdentities }).(pulumi.MapOutput)
}

type FactoryIdentityPtrOutput struct{ *pulumi.OutputState }

func (FactoryIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryIdentity)(nil)).Elem()
}

func (o FactoryIdentityPtrOutput) ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput {
	return o
}

func (o FactoryIdentityPtrOutput) ToFactoryIdentityPtrOutputWithContext(ctx context.Context) FactoryIdentityPtrOutput {
	return o
}

func (o FactoryIdentityPtrOutput) Elem() FactoryIdentityOutput {
	return o.ApplyT(func(v *FactoryIdentity) FactoryIdentity {
		if v != nil {
			return *v
		}
		var ret FactoryIdentity
		return ret
	}).(FactoryIdentityOutput)
}

// The identity type.
func (o FactoryIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// List of user assigned identities for the factory.
func (o FactoryIdentityPtrOutput) UserAssignedIdentities() pulumi.MapOutput {
	return o.ApplyT(func(v *FactoryIdentity) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.MapOutput)
}

// Identity properties of the factory resource.
type FactoryIdentityResponse struct {
	// The principal id of the identity.
	PrincipalId string `pulumi:"principalId"`
	// The client tenant id of the identity.
	TenantId string `pulumi:"tenantId"`
	// The identity type.
	Type string `pulumi:"type"`
	// List of user assigned identities for the factory.
	UserAssignedIdentities map[string]interface{} `pulumi:"userAssignedIdentities"`
}

// Identity properties of the factory resource.
type FactoryIdentityResponseOutput struct{ *pulumi.OutputState }

func (FactoryIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryIdentityResponse)(nil)).Elem()
}

func (o FactoryIdentityResponseOutput) ToFactoryIdentityResponseOutput() FactoryIdentityResponseOutput {
	return o
}

func (o FactoryIdentityResponseOutput) ToFactoryIdentityResponseOutputWithContext(ctx context.Context) FactoryIdentityResponseOutput {
	return o
}

// The principal id of the identity.
func (o FactoryIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The client tenant id of the identity.
func (o FactoryIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The identity type.
func (o FactoryIdentityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryIdentityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// List of user assigned identities for the factory.
func (o FactoryIdentityResponseOutput) UserAssignedIdentities() pulumi.MapOutput {
	return o.ApplyT(func(v FactoryIdentityResponse) map[string]interface{} { return v.UserAssignedIdentities }).(pulumi.MapOutput)
}

type FactoryIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (FactoryIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryIdentityResponse)(nil)).Elem()
}

func (o FactoryIdentityResponsePtrOutput) ToFactoryIdentityResponsePtrOutput() FactoryIdentityResponsePtrOutput {
	return o
}

func (o FactoryIdentityResponsePtrOutput) ToFactoryIdentityResponsePtrOutputWithContext(ctx context.Context) FactoryIdentityResponsePtrOutput {
	return o
}

func (o FactoryIdentityResponsePtrOutput) Elem() FactoryIdentityResponseOutput {
	return o.ApplyT(func(v *FactoryIdentityResponse) FactoryIdentityResponse {
		if v != nil {
			return *v
		}
		var ret FactoryIdentityResponse
		return ret
	}).(FactoryIdentityResponseOutput)
}

// The principal id of the identity.
func (o FactoryIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The client tenant id of the identity.
func (o FactoryIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The identity type.
func (o FactoryIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// List of user assigned identities for the factory.
func (o FactoryIdentityResponsePtrOutput) UserAssignedIdentities() pulumi.MapOutput {
	return o.ApplyT(func(v *FactoryIdentityResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.MapOutput)
}

// Factory's VSTS repo information.
type FactoryVSTSConfiguration struct {
	// Account name.
	AccountName string `pulumi:"accountName"`
	// Collaboration branch.
	CollaborationBranch string `pulumi:"collaborationBranch"`
	// Disable manual publish operation in ADF studio to favor automated publish.
	DisablePublish *bool `pulumi:"disablePublish"`
	// Last commit id.
	LastCommitId *string `pulumi:"lastCommitId"`
	// VSTS project name.
	ProjectName string `pulumi:"projectName"`
	// Repository name.
	RepositoryName string `pulumi:"repositoryName"`
	// Root folder.
	RootFolder string `pulumi:"rootFolder"`
	// VSTS tenant id.
	TenantId *string `pulumi:"tenantId"`
	// Type of repo configuration.
	// Expected value is 'FactoryVSTSConfiguration'.
	Type string `pulumi:"type"`
}

// FactoryVSTSConfigurationInput is an input type that accepts FactoryVSTSConfigurationArgs and FactoryVSTSConfigurationOutput values.
// You can construct a concrete instance of `FactoryVSTSConfigurationInput` via:
//
//	FactoryVSTSConfigurationArgs{...}
type FactoryVSTSConfigurationInput interface {
	pulumi.Input

	ToFactoryVSTSConfigurationOutput() FactoryVSTSConfigurationOutput
	ToFactoryVSTSConfigurationOutputWithContext(context.Context) FactoryVSTSConfigurationOutput
}

// Factory's VSTS repo information.
type FactoryVSTSConfigurationArgs struct {
	// Account name.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// Collaboration branch.
	CollaborationBranch pulumi.StringInput `pulumi:"collaborationBranch"`
	// Disable manual publish operation in ADF studio to favor automated publish.
	DisablePublish pulumi.BoolPtrInput `pulumi:"disablePublish"`
	// Last commit id.
	LastCommitId pulumi.StringPtrInput `pulumi:"lastCommitId"`
	// VSTS project name.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// Repository name.
	RepositoryName pulumi.StringInput `pulumi:"repositoryName"`
	// Root folder.
	RootFolder pulumi.StringInput `pulumi:"rootFolder"`
	// VSTS tenant id.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// Type of repo configuration.
	// Expected value is 'FactoryVSTSConfiguration'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FactoryVSTSConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryVSTSConfiguration)(nil)).Elem()
}

func (i FactoryVSTSConfigurationArgs) ToFactoryVSTSConfigurationOutput() FactoryVSTSConfigurationOutput {
	return i.ToFactoryVSTSConfigurationOutputWithContext(context.Background())
}

func (i FactoryVSTSConfigurationArgs) ToFactoryVSTSConfigurationOutputWithContext(ctx context.Context) FactoryVSTSConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryVSTSConfigurationOutput)
}

func (i FactoryVSTSConfigurationArgs) ToFactoryVSTSConfigurationPtrOutput() FactoryVSTSConfigurationPtrOutput {
	return i.ToFactoryVSTSConfigurationPtrOutputWithContext(context.Background())
}

func (i FactoryVSTSConfigurationArgs) ToFactoryVSTSConfigurationPtrOutputWithContext(ctx context.Context) FactoryVSTSConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryVSTSConfigurationOutput).ToFactoryVSTSConfigurationPtrOutputWithContext(ctx)
}

// FactoryVSTSConfigurationPtrInput is an input type that accepts FactoryVSTSConfigurationArgs, FactoryVSTSConfigurationPtr and FactoryVSTSConfigurationPtrOutput values.
// You can construct a concrete instance of `FactoryVSTSConfigurationPtrInput` via:
//
//	        FactoryVSTSConfigurationArgs{...}
//
//	or:
//
//	        nil
type FactoryVSTSConfigurationPtrInput interface {
	pulumi.Input

	ToFactoryVSTSConfigurationPtrOutput() FactoryVSTSConfigurationPtrOutput
	ToFactoryVSTSConfigurationPtrOutputWithContext(context.Context) FactoryVSTSConfigurationPtrOutput
}

type factoryVSTSConfigurationPtrType FactoryVSTSConfigurationArgs

func FactoryVSTSConfigurationPtr(v *FactoryVSTSConfigurationArgs) FactoryVSTSConfigurationPtrInput {
	return (*factoryVSTSConfigurationPtrType)(v)
}

func (*factoryVSTSConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryVSTSConfiguration)(nil)).Elem()
}

func (i *factoryVSTSConfigurationPtrType) ToFactoryVSTSConfigurationPtrOutput() FactoryVSTSConfigurationPtrOutput {
	return i.ToFactoryVSTSConfigurationPtrOutputWithContext(context.Background())
}

func (i *factoryVSTSConfigurationPtrType) ToFactoryVSTSConfigurationPtrOutputWithContext(ctx context.Context) FactoryVSTSConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryVSTSConfigurationPtrOutput)
}

// Factory's VSTS repo information.
type FactoryVSTSConfigurationOutput struct{ *pulumi.OutputState }

func (FactoryVSTSConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryVSTSConfiguration)(nil)).Elem()
}

func (o FactoryVSTSConfigurationOutput) ToFactoryVSTSConfigurationOutput() FactoryVSTSConfigurationOutput {
	return o
}

func (o FactoryVSTSConfigurationOutput) ToFactoryVSTSConfigurationOutputWithContext(ctx context.Context) FactoryVSTSConfigurationOutput {
	return o
}

func (o FactoryVSTSConfigurationOutput) ToFactoryVSTSConfigurationPtrOutput() FactoryVSTSConfigurationPtrOutput {
	return o.ToFactoryVSTSConfigurationPtrOutputWithContext(context.Background())
}

func (o FactoryVSTSConfigurationOutput) ToFactoryVSTSConfigurationPtrOutputWithContext(ctx context.Context) FactoryVSTSConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FactoryVSTSConfiguration) *FactoryVSTSConfiguration {
		return &v
	}).(FactoryVSTSConfigurationPtrOutput)
}

// Account name.
func (o FactoryVSTSConfigurationOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryVSTSConfiguration) string { return v.AccountName }).(pulumi.StringOutput)
}

// Collaboration branch.
func (o FactoryVSTSConfigurationOutput) CollaborationBranch() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryVSTSConfiguration) string { return v.CollaborationBranch }).(pulumi.StringOutput)
}

// Disable manual publish operation in ADF studio to favor automated publish.
func (o FactoryVSTSConfigurationOutput) DisablePublish() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfiguration) *bool { return v.DisablePublish }).(pulumi.BoolPtrOutput)
}

// Last commit id.
func (o FactoryVSTSConfigurationOutput) LastCommitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfiguration) *string { return v.LastCommitId }).(pulumi.StringPtrOutput)
}

// VSTS project name.
func (o FactoryVSTSConfigurationOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryVSTSConfiguration) string { return v.ProjectName }).(pulumi.StringOutput)
}

// Repository name.
func (o FactoryVSTSConfigurationOutput) RepositoryName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryVSTSConfiguration) string { return v.RepositoryName }).(pulumi.StringOutput)
}

// Root folder.
func (o FactoryVSTSConfigurationOutput) RootFolder() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryVSTSConfiguration) string { return v.RootFolder }).(pulumi.StringOutput)
}

// VSTS tenant id.
func (o FactoryVSTSConfigurationOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfiguration) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Type of repo configuration.
// Expected value is 'FactoryVSTSConfiguration'.
func (o FactoryVSTSConfigurationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryVSTSConfiguration) string { return v.Type }).(pulumi.StringOutput)
}

type FactoryVSTSConfigurationPtrOutput struct{ *pulumi.OutputState }

func (FactoryVSTSConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryVSTSConfiguration)(nil)).Elem()
}

func (o FactoryVSTSConfigurationPtrOutput) ToFactoryVSTSConfigurationPtrOutput() FactoryVSTSConfigurationPtrOutput {
	return o
}

func (o FactoryVSTSConfigurationPtrOutput) ToFactoryVSTSConfigurationPtrOutputWithContext(ctx context.Context) FactoryVSTSConfigurationPtrOutput {
	return o
}

func (o FactoryVSTSConfigurationPtrOutput) Elem() FactoryVSTSConfigurationOutput {
	return o.ApplyT(func(v *FactoryVSTSConfiguration) FactoryVSTSConfiguration {
		if v != nil {
			return *v
		}
		var ret FactoryVSTSConfiguration
		return ret
	}).(FactoryVSTSConfigurationOutput)
}

// Account name.
func (o FactoryVSTSConfigurationPtrOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.AccountName
	}).(pulumi.StringPtrOutput)
}

// Collaboration branch.
func (o FactoryVSTSConfigurationPtrOutput) CollaborationBranch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.CollaborationBranch
	}).(pulumi.StringPtrOutput)
}

// Disable manual publish operation in ADF studio to favor automated publish.
func (o FactoryVSTSConfigurationPtrOutput) DisablePublish() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.DisablePublish
	}).(pulumi.BoolPtrOutput)
}

// Last commit id.
func (o FactoryVSTSConfigurationPtrOutput) LastCommitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.LastCommitId
	}).(pulumi.StringPtrOutput)
}

// VSTS project name.
func (o FactoryVSTSConfigurationPtrOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.ProjectName
	}).(pulumi.StringPtrOutput)
}

// Repository name.
func (o FactoryVSTSConfigurationPtrOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.RepositoryName
	}).(pulumi.StringPtrOutput)
}

// Root folder.
func (o FactoryVSTSConfigurationPtrOutput) RootFolder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.RootFolder
	}).(pulumi.StringPtrOutput)
}

// VSTS tenant id.
func (o FactoryVSTSConfigurationPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Type of repo configuration.
// Expected value is 'FactoryVSTSConfiguration'.
func (o FactoryVSTSConfigurationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Factory's VSTS repo information.
type FactoryVSTSConfigurationResponse struct {
	// Account name.
	AccountName string `pulumi:"accountName"`
	// Collaboration branch.
	CollaborationBranch string `pulumi:"collaborationBranch"`
	// Disable manual publish operation in ADF studio to favor automated publish.
	DisablePublish *bool `pulumi:"disablePublish"`
	// Last commit id.
	LastCommitId *string `pulumi:"lastCommitId"`
	// VSTS project name.
	ProjectName string `pulumi:"projectName"`
	// Repository name.
	RepositoryName string `pulumi:"repositoryName"`
	// Root folder.
	RootFolder string `pulumi:"rootFolder"`
	// VSTS tenant id.
	TenantId *string `pulumi:"tenantId"`
	// Type of repo configuration.
	// Expected value is 'FactoryVSTSConfiguration'.
	Type string `pulumi:"type"`
}

// Factory's VSTS repo information.
type FactoryVSTSConfigurationResponseOutput struct{ *pulumi.OutputState }

func (FactoryVSTSConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryVSTSConfigurationResponse)(nil)).Elem()
}

func (o FactoryVSTSConfigurationResponseOutput) ToFactoryVSTSConfigurationResponseOutput() FactoryVSTSConfigurationResponseOutput {
	return o
}

func (o FactoryVSTSConfigurationResponseOutput) ToFactoryVSTSConfigurationResponseOutputWithContext(ctx context.Context) FactoryVSTSConfigurationResponseOutput {
	return o
}

// Account name.
func (o FactoryVSTSConfigurationResponseOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryVSTSConfigurationResponse) string { return v.AccountName }).(pulumi.StringOutput)
}

// Collaboration branch.
func (o FactoryVSTSConfigurationResponseOutput) CollaborationBranch() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryVSTSConfigurationResponse) string { return v.CollaborationBranch }).(pulumi.StringOutput)
}

// Disable manual publish operation in ADF studio to favor automated publish.
func (o FactoryVSTSConfigurationResponseOutput) DisablePublish() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfigurationResponse) *bool { return v.DisablePublish }).(pulumi.BoolPtrOutput)
}

// Last commit id.
func (o FactoryVSTSConfigurationResponseOutput) LastCommitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfigurationResponse) *string { return v.LastCommitId }).(pulumi.StringPtrOutput)
}

// VSTS project name.
func (o FactoryVSTSConfigurationResponseOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryVSTSConfigurationResponse) string { return v.ProjectName }).(pulumi.StringOutput)
}

// Repository name.
func (o FactoryVSTSConfigurationResponseOutput) RepositoryName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryVSTSConfigurationResponse) string { return v.RepositoryName }).(pulumi.StringOutput)
}

// Root folder.
func (o FactoryVSTSConfigurationResponseOutput) RootFolder() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryVSTSConfigurationResponse) string { return v.RootFolder }).(pulumi.StringOutput)
}

// VSTS tenant id.
func (o FactoryVSTSConfigurationResponseOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryVSTSConfigurationResponse) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Type of repo configuration.
// Expected value is 'FactoryVSTSConfiguration'.
func (o FactoryVSTSConfigurationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryVSTSConfigurationResponse) string { return v.Type }).(pulumi.StringOutput)
}

type FactoryVSTSConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (FactoryVSTSConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryVSTSConfigurationResponse)(nil)).Elem()
}

func (o FactoryVSTSConfigurationResponsePtrOutput) ToFactoryVSTSConfigurationResponsePtrOutput() FactoryVSTSConfigurationResponsePtrOutput {
	return o
}

func (o FactoryVSTSConfigurationResponsePtrOutput) ToFactoryVSTSConfigurationResponsePtrOutputWithContext(ctx context.Context) FactoryVSTSConfigurationResponsePtrOutput {
	return o
}

func (o FactoryVSTSConfigurationResponsePtrOutput) Elem() FactoryVSTSConfigurationResponseOutput {
	return o.ApplyT(func(v *FactoryVSTSConfigurationResponse) FactoryVSTSConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret FactoryVSTSConfigurationResponse
		return ret
	}).(FactoryVSTSConfigurationResponseOutput)
}

// Account name.
func (o FactoryVSTSConfigurationResponsePtrOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AccountName
	}).(pulumi.StringPtrOutput)
}

// Collaboration branch.
func (o FactoryVSTSConfigurationResponsePtrOutput) CollaborationBranch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CollaborationBranch
	}).(pulumi.StringPtrOutput)
}

// Disable manual publish operation in ADF studio to favor automated publish.
func (o FactoryVSTSConfigurationResponsePtrOutput) DisablePublish() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfigurationResponse) *bool {
		if v == nil {
			return nil
		}
		return v.DisablePublish
	}).(pulumi.BoolPtrOutput)
}

// Last commit id.
func (o FactoryVSTSConfigurationResponsePtrOutput) LastCommitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.LastCommitId
	}).(pulumi.StringPtrOutput)
}

// VSTS project name.
func (o FactoryVSTSConfigurationResponsePtrOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProjectName
	}).(pulumi.StringPtrOutput)
}

// Repository name.
func (o FactoryVSTSConfigurationResponsePtrOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RepositoryName
	}).(pulumi.StringPtrOutput)
}

// Root folder.
func (o FactoryVSTSConfigurationResponsePtrOutput) RootFolder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RootFolder
	}).(pulumi.StringPtrOutput)
}

// VSTS tenant id.
func (o FactoryVSTSConfigurationResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Type of repo configuration.
// Expected value is 'FactoryVSTSConfiguration'.
func (o FactoryVSTSConfigurationResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVSTSConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// This activity will fail within its own scope and output a custom error message and error code. The error message and code can provided either as a string literal or as an expression that can be evaluated to a string at runtime. The activity scope can be the whole pipeline or a control activity (e.g. foreach, switch, until), if the fail activity is contained in it.
type FailActivity struct {
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// The error code that categorizes the error type of the Fail activity. It can be dynamic content that's evaluated to a non empty/blank string at runtime. Type: string (or Expression with resultType string).
	ErrorCode interface{} `pulumi:"errorCode"`
	// The error message that surfaced in the Fail activity. It can be dynamic content that's evaluated to a non empty/blank string at runtime. Type: string (or Expression with resultType string).
	Message interface{} `pulumi:"message"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'Fail'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// FailActivityInput is an input type that accepts FailActivityArgs and FailActivityOutput values.
// You can construct a concrete instance of `FailActivityInput` via:
//
//	FailActivityArgs{...}
type FailActivityInput interface {
	pulumi.Input

	ToFailActivityOutput() FailActivityOutput
	ToFailActivityOutputWithContext(context.Context) FailActivityOutput
}

// This activity will fail within its own scope and output a custom error message and error code. The error message and code can provided either as a string literal or as an expression that can be evaluated to a string at runtime. The activity scope can be the whole pipeline or a control activity (e.g. foreach, switch, until), if the fail activity is contained in it.
type FailActivityArgs struct {
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The error code that categorizes the error type of the Fail activity. It can be dynamic content that's evaluated to a non empty/blank string at runtime. Type: string (or Expression with resultType string).
	ErrorCode pulumi.Input `pulumi:"errorCode"`
	// The error message that surfaced in the Fail activity. It can be dynamic content that's evaluated to a non empty/blank string at runtime. Type: string (or Expression with resultType string).
	Message pulumi.Input `pulumi:"message"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs pulumi.StringPtrInput `pulumi:"onInactiveMarkAs"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Type of activity.
	// Expected value is 'Fail'.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
}

func (FailActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FailActivity)(nil)).Elem()
}

func (i FailActivityArgs) ToFailActivityOutput() FailActivityOutput {
	return i.ToFailActivityOutputWithContext(context.Background())
}

func (i FailActivityArgs) ToFailActivityOutputWithContext(ctx context.Context) FailActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailActivityOutput)
}

// This activity will fail within its own scope and output a custom error message and error code. The error message and code can provided either as a string literal or as an expression that can be evaluated to a string at runtime. The activity scope can be the whole pipeline or a control activity (e.g. foreach, switch, until), if the fail activity is contained in it.
type FailActivityOutput struct{ *pulumi.OutputState }

func (FailActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FailActivity)(nil)).Elem()
}

func (o FailActivityOutput) ToFailActivityOutput() FailActivityOutput {
	return o
}

func (o FailActivityOutput) ToFailActivityOutputWithContext(ctx context.Context) FailActivityOutput {
	return o
}

// Activity depends on condition.
func (o FailActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v FailActivity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o FailActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FailActivity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The error code that categorizes the error type of the Fail activity. It can be dynamic content that's evaluated to a non empty/blank string at runtime. Type: string (or Expression with resultType string).
func (o FailActivityOutput) ErrorCode() pulumi.AnyOutput {
	return o.ApplyT(func(v FailActivity) interface{} { return v.ErrorCode }).(pulumi.AnyOutput)
}

// The error message that surfaced in the Fail activity. It can be dynamic content that's evaluated to a non empty/blank string at runtime. Type: string (or Expression with resultType string).
func (o FailActivityOutput) Message() pulumi.AnyOutput {
	return o.ApplyT(func(v FailActivity) interface{} { return v.Message }).(pulumi.AnyOutput)
}

// Activity name.
func (o FailActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v FailActivity) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o FailActivityOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FailActivity) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o FailActivityOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FailActivity) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'Fail'.
func (o FailActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FailActivity) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o FailActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v FailActivity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

// This activity will fail within its own scope and output a custom error message and error code. The error message and code can provided either as a string literal or as an expression that can be evaluated to a string at runtime. The activity scope can be the whole pipeline or a control activity (e.g. foreach, switch, until), if the fail activity is contained in it.
type FailActivityResponse struct {
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// The error code that categorizes the error type of the Fail activity. It can be dynamic content that's evaluated to a non empty/blank string at runtime. Type: string (or Expression with resultType string).
	ErrorCode interface{} `pulumi:"errorCode"`
	// The error message that surfaced in the Fail activity. It can be dynamic content that's evaluated to a non empty/blank string at runtime. Type: string (or Expression with resultType string).
	Message interface{} `pulumi:"message"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'Fail'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// This activity will fail within its own scope and output a custom error message and error code. The error message and code can provided either as a string literal or as an expression that can be evaluated to a string at runtime. The activity scope can be the whole pipeline or a control activity (e.g. foreach, switch, until), if the fail activity is contained in it.
type FailActivityResponseOutput struct{ *pulumi.OutputState }

func (FailActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FailActivityResponse)(nil)).Elem()
}

func (o FailActivityResponseOutput) ToFailActivityResponseOutput() FailActivityResponseOutput {
	return o
}

func (o FailActivityResponseOutput) ToFailActivityResponseOutputWithContext(ctx context.Context) FailActivityResponseOutput {
	return o
}

// Activity depends on condition.
func (o FailActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v FailActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o FailActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FailActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The error code that categorizes the error type of the Fail activity. It can be dynamic content that's evaluated to a non empty/blank string at runtime. Type: string (or Expression with resultType string).
func (o FailActivityResponseOutput) ErrorCode() pulumi.AnyOutput {
	return o.ApplyT(func(v FailActivityResponse) interface{} { return v.ErrorCode }).(pulumi.AnyOutput)
}

// The error message that surfaced in the Fail activity. It can be dynamic content that's evaluated to a non empty/blank string at runtime. Type: string (or Expression with resultType string).
func (o FailActivityResponseOutput) Message() pulumi.AnyOutput {
	return o.ApplyT(func(v FailActivityResponse) interface{} { return v.Message }).(pulumi.AnyOutput)
}

// Activity name.
func (o FailActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v FailActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o FailActivityResponseOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FailActivityResponse) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o FailActivityResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FailActivityResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'Fail'.
func (o FailActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FailActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o FailActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v FailActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

// File system linked service.
type FileServerLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Host name of the server. Type: string (or Expression with resultType string).
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to logon the server.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'FileServer'.
	Type string `pulumi:"type"`
	// User ID to logon the server. Type: string (or Expression with resultType string).
	UserId interface{} `pulumi:"userId"`
}

// FileServerLinkedServiceInput is an input type that accepts FileServerLinkedServiceArgs and FileServerLinkedServiceOutput values.
// You can construct a concrete instance of `FileServerLinkedServiceInput` via:
//
//	FileServerLinkedServiceArgs{...}
type FileServerLinkedServiceInput interface {
	pulumi.Input

	ToFileServerLinkedServiceOutput() FileServerLinkedServiceOutput
	ToFileServerLinkedServiceOutputWithContext(context.Context) FileServerLinkedServiceOutput
}

// File system linked service.
type FileServerLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Host name of the server. Type: string (or Expression with resultType string).
	Host pulumi.Input `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password to logon the server.
	Password pulumi.Input `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'FileServer'.
	Type pulumi.StringInput `pulumi:"type"`
	// User ID to logon the server. Type: string (or Expression with resultType string).
	UserId pulumi.Input `pulumi:"userId"`
}

func (FileServerLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileServerLinkedService)(nil)).Elem()
}

func (i FileServerLinkedServiceArgs) ToFileServerLinkedServiceOutput() FileServerLinkedServiceOutput {
	return i.ToFileServerLinkedServiceOutputWithContext(context.Background())
}

func (i FileServerLinkedServiceArgs) ToFileServerLinkedServiceOutputWithContext(ctx context.Context) FileServerLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileServerLinkedServiceOutput)
}

// File system linked service.
type FileServerLinkedServiceOutput struct{ *pulumi.OutputState }

func (FileServerLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileServerLinkedService)(nil)).Elem()
}

func (o FileServerLinkedServiceOutput) ToFileServerLinkedServiceOutput() FileServerLinkedServiceOutput {
	return o
}

func (o FileServerLinkedServiceOutput) ToFileServerLinkedServiceOutputWithContext(ctx context.Context) FileServerLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o FileServerLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v FileServerLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o FileServerLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v FileServerLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o FileServerLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileServerLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o FileServerLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileServerLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Host name of the server. Type: string (or Expression with resultType string).
func (o FileServerLinkedServiceOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerLinkedService) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o FileServerLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v FileServerLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Password to logon the server.
func (o FileServerLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'FileServer'.
func (o FileServerLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FileServerLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// User ID to logon the server. Type: string (or Expression with resultType string).
func (o FileServerLinkedServiceOutput) UserId() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerLinkedService) interface{} { return v.UserId }).(pulumi.AnyOutput)
}

// File system linked service.
type FileServerLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Host name of the server. Type: string (or Expression with resultType string).
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to logon the server.
	Password interface{} `pulumi:"password"`
	// Type of linked service.
	// Expected value is 'FileServer'.
	Type string `pulumi:"type"`
	// User ID to logon the server. Type: string (or Expression with resultType string).
	UserId interface{} `pulumi:"userId"`
}

// File system linked service.
type FileServerLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (FileServerLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileServerLinkedServiceResponse)(nil)).Elem()
}

func (o FileServerLinkedServiceResponseOutput) ToFileServerLinkedServiceResponseOutput() FileServerLinkedServiceResponseOutput {
	return o
}

func (o FileServerLinkedServiceResponseOutput) ToFileServerLinkedServiceResponseOutputWithContext(ctx context.Context) FileServerLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o FileServerLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v FileServerLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o FileServerLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v FileServerLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o FileServerLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileServerLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o FileServerLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileServerLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Host name of the server. Type: string (or Expression with resultType string).
func (o FileServerLinkedServiceResponseOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerLinkedServiceResponse) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o FileServerLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v FileServerLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password to logon the server.
func (o FileServerLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'FileServer'.
func (o FileServerLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FileServerLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User ID to logon the server. Type: string (or Expression with resultType string).
func (o FileServerLinkedServiceResponseOutput) UserId() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerLinkedServiceResponse) interface{} { return v.UserId }).(pulumi.AnyOutput)
}

// The location of file server dataset.
type FileServerLocation struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'FileServerLocation'.
	Type string `pulumi:"type"`
}

// FileServerLocationInput is an input type that accepts FileServerLocationArgs and FileServerLocationOutput values.
// You can construct a concrete instance of `FileServerLocationInput` via:
//
//	FileServerLocationArgs{...}
type FileServerLocationInput interface {
	pulumi.Input

	ToFileServerLocationOutput() FileServerLocationOutput
	ToFileServerLocationOutputWithContext(context.Context) FileServerLocationOutput
}

// The location of file server dataset.
type FileServerLocationArgs struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'FileServerLocation'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FileServerLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileServerLocation)(nil)).Elem()
}

func (i FileServerLocationArgs) ToFileServerLocationOutput() FileServerLocationOutput {
	return i.ToFileServerLocationOutputWithContext(context.Background())
}

func (i FileServerLocationArgs) ToFileServerLocationOutputWithContext(ctx context.Context) FileServerLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileServerLocationOutput)
}

// The location of file server dataset.
type FileServerLocationOutput struct{ *pulumi.OutputState }

func (FileServerLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileServerLocation)(nil)).Elem()
}

func (o FileServerLocationOutput) ToFileServerLocationOutput() FileServerLocationOutput {
	return o
}

func (o FileServerLocationOutput) ToFileServerLocationOutputWithContext(ctx context.Context) FileServerLocationOutput {
	return o
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o FileServerLocationOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerLocation) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o FileServerLocationOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerLocation) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
// Expected value is 'FileServerLocation'.
func (o FileServerLocationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FileServerLocation) string { return v.Type }).(pulumi.StringOutput)
}

// The location of file server dataset.
type FileServerLocationResponse struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'FileServerLocation'.
	Type string `pulumi:"type"`
}

// The location of file server dataset.
type FileServerLocationResponseOutput struct{ *pulumi.OutputState }

func (FileServerLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileServerLocationResponse)(nil)).Elem()
}

func (o FileServerLocationResponseOutput) ToFileServerLocationResponseOutput() FileServerLocationResponseOutput {
	return o
}

func (o FileServerLocationResponseOutput) ToFileServerLocationResponseOutputWithContext(ctx context.Context) FileServerLocationResponseOutput {
	return o
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o FileServerLocationResponseOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerLocationResponse) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o FileServerLocationResponseOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerLocationResponse) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
// Expected value is 'FileServerLocation'.
func (o FileServerLocationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FileServerLocationResponse) string { return v.Type }).(pulumi.StringOutput)
}

// File server read settings.
type FileServerReadSettings struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery interface{} `pulumi:"enablePartitionDiscovery"`
	// Specify a filter to be used to select a subset of files in the folderPath rather than all files. Type: string (or Expression with resultType string).
	FileFilter interface{} `pulumi:"fileFilter"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'FileServerReadSettings'.
	Type string `pulumi:"type"`
	// FileServer wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// FileServer wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// FileServerReadSettingsInput is an input type that accepts FileServerReadSettingsArgs and FileServerReadSettingsOutput values.
// You can construct a concrete instance of `FileServerReadSettingsInput` via:
//
//	FileServerReadSettingsArgs{...}
type FileServerReadSettingsInput interface {
	pulumi.Input

	ToFileServerReadSettingsOutput() FileServerReadSettingsOutput
	ToFileServerReadSettingsOutputWithContext(context.Context) FileServerReadSettingsOutput
}

// File server read settings.
type FileServerReadSettingsArgs struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion pulumi.Input `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery pulumi.Input `pulumi:"enablePartitionDiscovery"`
	// Specify a filter to be used to select a subset of files in the folderPath rather than all files. Type: string (or Expression with resultType string).
	FileFilter pulumi.Input `pulumi:"fileFilter"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath pulumi.Input `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd pulumi.Input `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart pulumi.Input `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath pulumi.Input `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive pulumi.Input `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'FileServerReadSettings'.
	Type pulumi.StringInput `pulumi:"type"`
	// FileServer wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName pulumi.Input `pulumi:"wildcardFileName"`
	// FileServer wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath pulumi.Input `pulumi:"wildcardFolderPath"`
}

func (FileServerReadSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileServerReadSettings)(nil)).Elem()
}

func (i FileServerReadSettingsArgs) ToFileServerReadSettingsOutput() FileServerReadSettingsOutput {
	return i.ToFileServerReadSettingsOutputWithContext(context.Background())
}

func (i FileServerReadSettingsArgs) ToFileServerReadSettingsOutputWithContext(ctx context.Context) FileServerReadSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileServerReadSettingsOutput)
}

func (i FileServerReadSettingsArgs) ToFileServerReadSettingsPtrOutput() FileServerReadSettingsPtrOutput {
	return i.ToFileServerReadSettingsPtrOutputWithContext(context.Background())
}

func (i FileServerReadSettingsArgs) ToFileServerReadSettingsPtrOutputWithContext(ctx context.Context) FileServerReadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileServerReadSettingsOutput).ToFileServerReadSettingsPtrOutputWithContext(ctx)
}

// FileServerReadSettingsPtrInput is an input type that accepts FileServerReadSettingsArgs, FileServerReadSettingsPtr and FileServerReadSettingsPtrOutput values.
// You can construct a concrete instance of `FileServerReadSettingsPtrInput` via:
//
//	        FileServerReadSettingsArgs{...}
//
//	or:
//
//	        nil
type FileServerReadSettingsPtrInput interface {
	pulumi.Input

	ToFileServerReadSettingsPtrOutput() FileServerReadSettingsPtrOutput
	ToFileServerReadSettingsPtrOutputWithContext(context.Context) FileServerReadSettingsPtrOutput
}

type fileServerReadSettingsPtrType FileServerReadSettingsArgs

func FileServerReadSettingsPtr(v *FileServerReadSettingsArgs) FileServerReadSettingsPtrInput {
	return (*fileServerReadSettingsPtrType)(v)
}

func (*fileServerReadSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FileServerReadSettings)(nil)).Elem()
}

func (i *fileServerReadSettingsPtrType) ToFileServerReadSettingsPtrOutput() FileServerReadSettingsPtrOutput {
	return i.ToFileServerReadSettingsPtrOutputWithContext(context.Background())
}

func (i *fileServerReadSettingsPtrType) ToFileServerReadSettingsPtrOutputWithContext(ctx context.Context) FileServerReadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileServerReadSettingsPtrOutput)
}

// File server read settings.
type FileServerReadSettingsOutput struct{ *pulumi.OutputState }

func (FileServerReadSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileServerReadSettings)(nil)).Elem()
}

func (o FileServerReadSettingsOutput) ToFileServerReadSettingsOutput() FileServerReadSettingsOutput {
	return o
}

func (o FileServerReadSettingsOutput) ToFileServerReadSettingsOutputWithContext(ctx context.Context) FileServerReadSettingsOutput {
	return o
}

func (o FileServerReadSettingsOutput) ToFileServerReadSettingsPtrOutput() FileServerReadSettingsPtrOutput {
	return o.ToFileServerReadSettingsPtrOutputWithContext(context.Background())
}

func (o FileServerReadSettingsOutput) ToFileServerReadSettingsPtrOutputWithContext(ctx context.Context) FileServerReadSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FileServerReadSettings) *FileServerReadSettings {
		return &v
	}).(FileServerReadSettingsPtrOutput)
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o FileServerReadSettingsOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerReadSettings) interface{} { return v.DeleteFilesAfterCompletion }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o FileServerReadSettingsOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerReadSettings) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o FileServerReadSettingsOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerReadSettings) interface{} { return v.EnablePartitionDiscovery }).(pulumi.AnyOutput)
}

// Specify a filter to be used to select a subset of files in the folderPath rather than all files. Type: string (or Expression with resultType string).
func (o FileServerReadSettingsOutput) FileFilter() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerReadSettings) interface{} { return v.FileFilter }).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o FileServerReadSettingsOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerReadSettings) interface{} { return v.FileListPath }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o FileServerReadSettingsOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerReadSettings) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o FileServerReadSettingsOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerReadSettings) interface{} { return v.ModifiedDatetimeEnd }).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o FileServerReadSettingsOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerReadSettings) interface{} { return v.ModifiedDatetimeStart }).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o FileServerReadSettingsOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerReadSettings) interface{} { return v.PartitionRootPath }).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o FileServerReadSettingsOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerReadSettings) interface{} { return v.Recursive }).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'FileServerReadSettings'.
func (o FileServerReadSettingsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FileServerReadSettings) string { return v.Type }).(pulumi.StringOutput)
}

// FileServer wildcardFileName. Type: string (or Expression with resultType string).
func (o FileServerReadSettingsOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerReadSettings) interface{} { return v.WildcardFileName }).(pulumi.AnyOutput)
}

// FileServer wildcardFolderPath. Type: string (or Expression with resultType string).
func (o FileServerReadSettingsOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerReadSettings) interface{} { return v.WildcardFolderPath }).(pulumi.AnyOutput)
}

type FileServerReadSettingsPtrOutput struct{ *pulumi.OutputState }

func (FileServerReadSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileServerReadSettings)(nil)).Elem()
}

func (o FileServerReadSettingsPtrOutput) ToFileServerReadSettingsPtrOutput() FileServerReadSettingsPtrOutput {
	return o
}

func (o FileServerReadSettingsPtrOutput) ToFileServerReadSettingsPtrOutputWithContext(ctx context.Context) FileServerReadSettingsPtrOutput {
	return o
}

func (o FileServerReadSettingsPtrOutput) Elem() FileServerReadSettingsOutput {
	return o.ApplyT(func(v *FileServerReadSettings) FileServerReadSettings {
		if v != nil {
			return *v
		}
		var ret FileServerReadSettings
		return ret
	}).(FileServerReadSettingsOutput)
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o FileServerReadSettingsPtrOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v *FileServerReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.DeleteFilesAfterCompletion
	}).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o FileServerReadSettingsPtrOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v *FileServerReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableMetricsCollection
	}).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o FileServerReadSettingsPtrOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v *FileServerReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.EnablePartitionDiscovery
	}).(pulumi.AnyOutput)
}

// Specify a filter to be used to select a subset of files in the folderPath rather than all files. Type: string (or Expression with resultType string).
func (o FileServerReadSettingsPtrOutput) FileFilter() pulumi.AnyOutput {
	return o.ApplyT(func(v *FileServerReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.FileFilter
	}).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o FileServerReadSettingsPtrOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *FileServerReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.FileListPath
	}).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o FileServerReadSettingsPtrOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v *FileServerReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentConnections
	}).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o FileServerReadSettingsPtrOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v *FileServerReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeEnd
	}).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o FileServerReadSettingsPtrOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v *FileServerReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeStart
	}).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o FileServerReadSettingsPtrOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *FileServerReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionRootPath
	}).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o FileServerReadSettingsPtrOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v *FileServerReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.Recursive
	}).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'FileServerReadSettings'.
func (o FileServerReadSettingsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileServerReadSettings) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// FileServer wildcardFileName. Type: string (or Expression with resultType string).
func (o FileServerReadSettingsPtrOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v *FileServerReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFileName
	}).(pulumi.AnyOutput)
}

// FileServer wildcardFolderPath. Type: string (or Expression with resultType string).
func (o FileServerReadSettingsPtrOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *FileServerReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFolderPath
	}).(pulumi.AnyOutput)
}

// File server read settings.
type FileServerReadSettingsResponse struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery interface{} `pulumi:"enablePartitionDiscovery"`
	// Specify a filter to be used to select a subset of files in the folderPath rather than all files. Type: string (or Expression with resultType string).
	FileFilter interface{} `pulumi:"fileFilter"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'FileServerReadSettings'.
	Type string `pulumi:"type"`
	// FileServer wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// FileServer wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// File server read settings.
type FileServerReadSettingsResponseOutput struct{ *pulumi.OutputState }

func (FileServerReadSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileServerReadSettingsResponse)(nil)).Elem()
}

func (o FileServerReadSettingsResponseOutput) ToFileServerReadSettingsResponseOutput() FileServerReadSettingsResponseOutput {
	return o
}

func (o FileServerReadSettingsResponseOutput) ToFileServerReadSettingsResponseOutputWithContext(ctx context.Context) FileServerReadSettingsResponseOutput {
	return o
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o FileServerReadSettingsResponseOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerReadSettingsResponse) interface{} { return v.DeleteFilesAfterCompletion }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o FileServerReadSettingsResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerReadSettingsResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o FileServerReadSettingsResponseOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerReadSettingsResponse) interface{} { return v.EnablePartitionDiscovery }).(pulumi.AnyOutput)
}

// Specify a filter to be used to select a subset of files in the folderPath rather than all files. Type: string (or Expression with resultType string).
func (o FileServerReadSettingsResponseOutput) FileFilter() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerReadSettingsResponse) interface{} { return v.FileFilter }).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o FileServerReadSettingsResponseOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerReadSettingsResponse) interface{} { return v.FileListPath }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o FileServerReadSettingsResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerReadSettingsResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o FileServerReadSettingsResponseOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerReadSettingsResponse) interface{} { return v.ModifiedDatetimeEnd }).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o FileServerReadSettingsResponseOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerReadSettingsResponse) interface{} { return v.ModifiedDatetimeStart }).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o FileServerReadSettingsResponseOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerReadSettingsResponse) interface{} { return v.PartitionRootPath }).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o FileServerReadSettingsResponseOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerReadSettingsResponse) interface{} { return v.Recursive }).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'FileServerReadSettings'.
func (o FileServerReadSettingsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FileServerReadSettingsResponse) string { return v.Type }).(pulumi.StringOutput)
}

// FileServer wildcardFileName. Type: string (or Expression with resultType string).
func (o FileServerReadSettingsResponseOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerReadSettingsResponse) interface{} { return v.WildcardFileName }).(pulumi.AnyOutput)
}

// FileServer wildcardFolderPath. Type: string (or Expression with resultType string).
func (o FileServerReadSettingsResponseOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerReadSettingsResponse) interface{} { return v.WildcardFolderPath }).(pulumi.AnyOutput)
}

type FileServerReadSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (FileServerReadSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileServerReadSettingsResponse)(nil)).Elem()
}

func (o FileServerReadSettingsResponsePtrOutput) ToFileServerReadSettingsResponsePtrOutput() FileServerReadSettingsResponsePtrOutput {
	return o
}

func (o FileServerReadSettingsResponsePtrOutput) ToFileServerReadSettingsResponsePtrOutputWithContext(ctx context.Context) FileServerReadSettingsResponsePtrOutput {
	return o
}

func (o FileServerReadSettingsResponsePtrOutput) Elem() FileServerReadSettingsResponseOutput {
	return o.ApplyT(func(v *FileServerReadSettingsResponse) FileServerReadSettingsResponse {
		if v != nil {
			return *v
		}
		var ret FileServerReadSettingsResponse
		return ret
	}).(FileServerReadSettingsResponseOutput)
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o FileServerReadSettingsResponsePtrOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v *FileServerReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.DeleteFilesAfterCompletion
	}).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o FileServerReadSettingsResponsePtrOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v *FileServerReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableMetricsCollection
	}).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o FileServerReadSettingsResponsePtrOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v *FileServerReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.EnablePartitionDiscovery
	}).(pulumi.AnyOutput)
}

// Specify a filter to be used to select a subset of files in the folderPath rather than all files. Type: string (or Expression with resultType string).
func (o FileServerReadSettingsResponsePtrOutput) FileFilter() pulumi.AnyOutput {
	return o.ApplyT(func(v *FileServerReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.FileFilter
	}).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o FileServerReadSettingsResponsePtrOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *FileServerReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.FileListPath
	}).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o FileServerReadSettingsResponsePtrOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v *FileServerReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentConnections
	}).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o FileServerReadSettingsResponsePtrOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v *FileServerReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeEnd
	}).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o FileServerReadSettingsResponsePtrOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v *FileServerReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeStart
	}).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o FileServerReadSettingsResponsePtrOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *FileServerReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionRootPath
	}).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o FileServerReadSettingsResponsePtrOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v *FileServerReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Recursive
	}).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'FileServerReadSettings'.
func (o FileServerReadSettingsResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileServerReadSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// FileServer wildcardFileName. Type: string (or Expression with resultType string).
func (o FileServerReadSettingsResponsePtrOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v *FileServerReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFileName
	}).(pulumi.AnyOutput)
}

// FileServer wildcardFolderPath. Type: string (or Expression with resultType string).
func (o FileServerReadSettingsResponsePtrOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *FileServerReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFolderPath
	}).(pulumi.AnyOutput)
}

// File server write settings.
type FileServerWriteSettings struct {
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
	Metadata []MetadataItem `pulumi:"metadata"`
	// The write setting type.
	// Expected value is 'FileServerWriteSettings'.
	Type string `pulumi:"type"`
}

// FileServerWriteSettingsInput is an input type that accepts FileServerWriteSettingsArgs and FileServerWriteSettingsOutput values.
// You can construct a concrete instance of `FileServerWriteSettingsInput` via:
//
//	FileServerWriteSettingsArgs{...}
type FileServerWriteSettingsInput interface {
	pulumi.Input

	ToFileServerWriteSettingsOutput() FileServerWriteSettingsOutput
	ToFileServerWriteSettingsOutputWithContext(context.Context) FileServerWriteSettingsOutput
}

// File server write settings.
type FileServerWriteSettingsArgs struct {
	// The type of copy behavior for copy sink.
	CopyBehavior pulumi.Input `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
	Metadata MetadataItemArrayInput `pulumi:"metadata"`
	// The write setting type.
	// Expected value is 'FileServerWriteSettings'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FileServerWriteSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileServerWriteSettings)(nil)).Elem()
}

func (i FileServerWriteSettingsArgs) ToFileServerWriteSettingsOutput() FileServerWriteSettingsOutput {
	return i.ToFileServerWriteSettingsOutputWithContext(context.Background())
}

func (i FileServerWriteSettingsArgs) ToFileServerWriteSettingsOutputWithContext(ctx context.Context) FileServerWriteSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileServerWriteSettingsOutput)
}

func (i FileServerWriteSettingsArgs) ToFileServerWriteSettingsPtrOutput() FileServerWriteSettingsPtrOutput {
	return i.ToFileServerWriteSettingsPtrOutputWithContext(context.Background())
}

func (i FileServerWriteSettingsArgs) ToFileServerWriteSettingsPtrOutputWithContext(ctx context.Context) FileServerWriteSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileServerWriteSettingsOutput).ToFileServerWriteSettingsPtrOutputWithContext(ctx)
}

// FileServerWriteSettingsPtrInput is an input type that accepts FileServerWriteSettingsArgs, FileServerWriteSettingsPtr and FileServerWriteSettingsPtrOutput values.
// You can construct a concrete instance of `FileServerWriteSettingsPtrInput` via:
//
//	        FileServerWriteSettingsArgs{...}
//
//	or:
//
//	        nil
type FileServerWriteSettingsPtrInput interface {
	pulumi.Input

	ToFileServerWriteSettingsPtrOutput() FileServerWriteSettingsPtrOutput
	ToFileServerWriteSettingsPtrOutputWithContext(context.Context) FileServerWriteSettingsPtrOutput
}

type fileServerWriteSettingsPtrType FileServerWriteSettingsArgs

func FileServerWriteSettingsPtr(v *FileServerWriteSettingsArgs) FileServerWriteSettingsPtrInput {
	return (*fileServerWriteSettingsPtrType)(v)
}

func (*fileServerWriteSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FileServerWriteSettings)(nil)).Elem()
}

func (i *fileServerWriteSettingsPtrType) ToFileServerWriteSettingsPtrOutput() FileServerWriteSettingsPtrOutput {
	return i.ToFileServerWriteSettingsPtrOutputWithContext(context.Background())
}

func (i *fileServerWriteSettingsPtrType) ToFileServerWriteSettingsPtrOutputWithContext(ctx context.Context) FileServerWriteSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileServerWriteSettingsPtrOutput)
}

// File server write settings.
type FileServerWriteSettingsOutput struct{ *pulumi.OutputState }

func (FileServerWriteSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileServerWriteSettings)(nil)).Elem()
}

func (o FileServerWriteSettingsOutput) ToFileServerWriteSettingsOutput() FileServerWriteSettingsOutput {
	return o
}

func (o FileServerWriteSettingsOutput) ToFileServerWriteSettingsOutputWithContext(ctx context.Context) FileServerWriteSettingsOutput {
	return o
}

func (o FileServerWriteSettingsOutput) ToFileServerWriteSettingsPtrOutput() FileServerWriteSettingsPtrOutput {
	return o.ToFileServerWriteSettingsPtrOutputWithContext(context.Background())
}

func (o FileServerWriteSettingsOutput) ToFileServerWriteSettingsPtrOutputWithContext(ctx context.Context) FileServerWriteSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FileServerWriteSettings) *FileServerWriteSettings {
		return &v
	}).(FileServerWriteSettingsPtrOutput)
}

// The type of copy behavior for copy sink.
func (o FileServerWriteSettingsOutput) CopyBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerWriteSettings) interface{} { return v.CopyBehavior }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o FileServerWriteSettingsOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerWriteSettings) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o FileServerWriteSettingsOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerWriteSettings) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
func (o FileServerWriteSettingsOutput) Metadata() MetadataItemArrayOutput {
	return o.ApplyT(func(v FileServerWriteSettings) []MetadataItem { return v.Metadata }).(MetadataItemArrayOutput)
}

// The write setting type.
// Expected value is 'FileServerWriteSettings'.
func (o FileServerWriteSettingsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FileServerWriteSettings) string { return v.Type }).(pulumi.StringOutput)
}

type FileServerWriteSettingsPtrOutput struct{ *pulumi.OutputState }

func (FileServerWriteSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileServerWriteSettings)(nil)).Elem()
}

func (o FileServerWriteSettingsPtrOutput) ToFileServerWriteSettingsPtrOutput() FileServerWriteSettingsPtrOutput {
	return o
}

func (o FileServerWriteSettingsPtrOutput) ToFileServerWriteSettingsPtrOutputWithContext(ctx context.Context) FileServerWriteSettingsPtrOutput {
	return o
}

func (o FileServerWriteSettingsPtrOutput) Elem() FileServerWriteSettingsOutput {
	return o.ApplyT(func(v *FileServerWriteSettings) FileServerWriteSettings {
		if v != nil {
			return *v
		}
		var ret FileServerWriteSettings
		return ret
	}).(FileServerWriteSettingsOutput)
}

// The type of copy behavior for copy sink.
func (o FileServerWriteSettingsPtrOutput) CopyBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v *FileServerWriteSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.CopyBehavior
	}).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o FileServerWriteSettingsPtrOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v *FileServerWriteSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableMetricsCollection
	}).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o FileServerWriteSettingsPtrOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v *FileServerWriteSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentConnections
	}).(pulumi.AnyOutput)
}

// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
func (o FileServerWriteSettingsPtrOutput) Metadata() MetadataItemArrayOutput {
	return o.ApplyT(func(v *FileServerWriteSettings) []MetadataItem {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(MetadataItemArrayOutput)
}

// The write setting type.
// Expected value is 'FileServerWriteSettings'.
func (o FileServerWriteSettingsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileServerWriteSettings) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// File server write settings.
type FileServerWriteSettingsResponse struct {
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
	Metadata []MetadataItemResponse `pulumi:"metadata"`
	// The write setting type.
	// Expected value is 'FileServerWriteSettings'.
	Type string `pulumi:"type"`
}

// File server write settings.
type FileServerWriteSettingsResponseOutput struct{ *pulumi.OutputState }

func (FileServerWriteSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileServerWriteSettingsResponse)(nil)).Elem()
}

func (o FileServerWriteSettingsResponseOutput) ToFileServerWriteSettingsResponseOutput() FileServerWriteSettingsResponseOutput {
	return o
}

func (o FileServerWriteSettingsResponseOutput) ToFileServerWriteSettingsResponseOutputWithContext(ctx context.Context) FileServerWriteSettingsResponseOutput {
	return o
}

// The type of copy behavior for copy sink.
func (o FileServerWriteSettingsResponseOutput) CopyBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerWriteSettingsResponse) interface{} { return v.CopyBehavior }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o FileServerWriteSettingsResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerWriteSettingsResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o FileServerWriteSettingsResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v FileServerWriteSettingsResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
func (o FileServerWriteSettingsResponseOutput) Metadata() MetadataItemResponseArrayOutput {
	return o.ApplyT(func(v FileServerWriteSettingsResponse) []MetadataItemResponse { return v.Metadata }).(MetadataItemResponseArrayOutput)
}

// The write setting type.
// Expected value is 'FileServerWriteSettings'.
func (o FileServerWriteSettingsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FileServerWriteSettingsResponse) string { return v.Type }).(pulumi.StringOutput)
}

type FileServerWriteSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (FileServerWriteSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileServerWriteSettingsResponse)(nil)).Elem()
}

func (o FileServerWriteSettingsResponsePtrOutput) ToFileServerWriteSettingsResponsePtrOutput() FileServerWriteSettingsResponsePtrOutput {
	return o
}

func (o FileServerWriteSettingsResponsePtrOutput) ToFileServerWriteSettingsResponsePtrOutputWithContext(ctx context.Context) FileServerWriteSettingsResponsePtrOutput {
	return o
}

func (o FileServerWriteSettingsResponsePtrOutput) Elem() FileServerWriteSettingsResponseOutput {
	return o.ApplyT(func(v *FileServerWriteSettingsResponse) FileServerWriteSettingsResponse {
		if v != nil {
			return *v
		}
		var ret FileServerWriteSettingsResponse
		return ret
	}).(FileServerWriteSettingsResponseOutput)
}

// The type of copy behavior for copy sink.
func (o FileServerWriteSettingsResponsePtrOutput) CopyBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v *FileServerWriteSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.CopyBehavior
	}).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o FileServerWriteSettingsResponsePtrOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v *FileServerWriteSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableMetricsCollection
	}).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o FileServerWriteSettingsResponsePtrOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v *FileServerWriteSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentConnections
	}).(pulumi.AnyOutput)
}

// Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
func (o FileServerWriteSettingsResponsePtrOutput) Metadata() MetadataItemResponseArrayOutput {
	return o.ApplyT(func(v *FileServerWriteSettingsResponse) []MetadataItemResponse {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(MetadataItemResponseArrayOutput)
}

// The write setting type.
// Expected value is 'FileServerWriteSettings'.
func (o FileServerWriteSettingsResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileServerWriteSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// An on-premises file system dataset.
type FileShareDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the file system.
	Compression *DatasetCompression `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Specify a filter to be used to select a subset of files in the folderPath rather than all files. Type: string (or Expression with resultType string).
	FileFilter interface{} `pulumi:"fileFilter"`
	// The name of the on-premises file system. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// The path of the on-premises file system. Type: string (or Expression with resultType string).
	FolderPath interface{} `pulumi:"folderPath"`
	// The format of the files.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'FileShare'.
	Type string `pulumi:"type"`
}

// FileShareDatasetInput is an input type that accepts FileShareDatasetArgs and FileShareDatasetOutput values.
// You can construct a concrete instance of `FileShareDatasetInput` via:
//
//	FileShareDatasetArgs{...}
type FileShareDatasetInput interface {
	pulumi.Input

	ToFileShareDatasetOutput() FileShareDatasetOutput
	ToFileShareDatasetOutputWithContext(context.Context) FileShareDatasetOutput
}

// An on-premises file system dataset.
type FileShareDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The data compression method used for the file system.
	Compression DatasetCompressionPtrInput `pulumi:"compression"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specify a filter to be used to select a subset of files in the folderPath rather than all files. Type: string (or Expression with resultType string).
	FileFilter pulumi.Input `pulumi:"fileFilter"`
	// The name of the on-premises file system. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// The path of the on-premises file system. Type: string (or Expression with resultType string).
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// The format of the files.
	Format pulumi.Input `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd pulumi.Input `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart pulumi.Input `pulumi:"modifiedDatetimeStart"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'FileShare'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FileShareDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileShareDataset)(nil)).Elem()
}

func (i FileShareDatasetArgs) ToFileShareDatasetOutput() FileShareDatasetOutput {
	return i.ToFileShareDatasetOutputWithContext(context.Background())
}

func (i FileShareDatasetArgs) ToFileShareDatasetOutputWithContext(ctx context.Context) FileShareDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileShareDatasetOutput)
}

// An on-premises file system dataset.
type FileShareDatasetOutput struct{ *pulumi.OutputState }

func (FileShareDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileShareDataset)(nil)).Elem()
}

func (o FileShareDatasetOutput) ToFileShareDatasetOutput() FileShareDatasetOutput {
	return o
}

func (o FileShareDatasetOutput) ToFileShareDatasetOutputWithContext(ctx context.Context) FileShareDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o FileShareDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v FileShareDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The data compression method used for the file system.
func (o FileShareDatasetOutput) Compression() DatasetCompressionPtrOutput {
	return o.ApplyT(func(v FileShareDataset) *DatasetCompression { return v.Compression }).(DatasetCompressionPtrOutput)
}

// Dataset description.
func (o FileShareDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileShareDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specify a filter to be used to select a subset of files in the folderPath rather than all files. Type: string (or Expression with resultType string).
func (o FileShareDatasetOutput) FileFilter() pulumi.AnyOutput {
	return o.ApplyT(func(v FileShareDataset) interface{} { return v.FileFilter }).(pulumi.AnyOutput)
}

// The name of the on-premises file system. Type: string (or Expression with resultType string).
func (o FileShareDatasetOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v FileShareDataset) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o FileShareDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v FileShareDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// The path of the on-premises file system. Type: string (or Expression with resultType string).
func (o FileShareDatasetOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v FileShareDataset) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// The format of the files.
func (o FileShareDatasetOutput) Format() pulumi.AnyOutput {
	return o.ApplyT(func(v FileShareDataset) interface{} { return v.Format }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o FileShareDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v FileShareDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o FileShareDatasetOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v FileShareDataset) interface{} { return v.ModifiedDatetimeEnd }).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o FileShareDatasetOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v FileShareDataset) interface{} { return v.ModifiedDatetimeStart }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o FileShareDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v FileShareDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o FileShareDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v FileShareDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o FileShareDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v FileShareDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'FileShare'.
func (o FileShareDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FileShareDataset) string { return v.Type }).(pulumi.StringOutput)
}

// An on-premises file system dataset.
type FileShareDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The data compression method used for the file system.
	Compression *DatasetCompressionResponse `pulumi:"compression"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// Specify a filter to be used to select a subset of files in the folderPath rather than all files. Type: string (or Expression with resultType string).
	FileFilter interface{} `pulumi:"fileFilter"`
	// The name of the on-premises file system. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// The path of the on-premises file system. Type: string (or Expression with resultType string).
	FolderPath interface{} `pulumi:"folderPath"`
	// The format of the files.
	Format interface{} `pulumi:"format"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// Type of dataset.
	// Expected value is 'FileShare'.
	Type string `pulumi:"type"`
}

// An on-premises file system dataset.
type FileShareDatasetResponseOutput struct{ *pulumi.OutputState }

func (FileShareDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileShareDatasetResponse)(nil)).Elem()
}

func (o FileShareDatasetResponseOutput) ToFileShareDatasetResponseOutput() FileShareDatasetResponseOutput {
	return o
}

func (o FileShareDatasetResponseOutput) ToFileShareDatasetResponseOutputWithContext(ctx context.Context) FileShareDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o FileShareDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v FileShareDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The data compression method used for the file system.
func (o FileShareDatasetResponseOutput) Compression() DatasetCompressionResponsePtrOutput {
	return o.ApplyT(func(v FileShareDatasetResponse) *DatasetCompressionResponse { return v.Compression }).(DatasetCompressionResponsePtrOutput)
}

// Dataset description.
func (o FileShareDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileShareDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specify a filter to be used to select a subset of files in the folderPath rather than all files. Type: string (or Expression with resultType string).
func (o FileShareDatasetResponseOutput) FileFilter() pulumi.AnyOutput {
	return o.ApplyT(func(v FileShareDatasetResponse) interface{} { return v.FileFilter }).(pulumi.AnyOutput)
}

// The name of the on-premises file system. Type: string (or Expression with resultType string).
func (o FileShareDatasetResponseOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v FileShareDatasetResponse) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o FileShareDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v FileShareDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// The path of the on-premises file system. Type: string (or Expression with resultType string).
func (o FileShareDatasetResponseOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v FileShareDatasetResponse) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// The format of the files.
func (o FileShareDatasetResponseOutput) Format() pulumi.AnyOutput {
	return o.ApplyT(func(v FileShareDatasetResponse) interface{} { return v.Format }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o FileShareDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v FileShareDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o FileShareDatasetResponseOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v FileShareDatasetResponse) interface{} { return v.ModifiedDatetimeEnd }).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o FileShareDatasetResponseOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v FileShareDatasetResponse) interface{} { return v.ModifiedDatetimeStart }).(pulumi.AnyOutput)
}

// Parameters for dataset.
func (o FileShareDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v FileShareDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o FileShareDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v FileShareDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o FileShareDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v FileShareDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'FileShare'.
func (o FileShareDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FileShareDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity file system sink.
type FileSystemSink struct {
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'FileSystemSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// FileSystemSinkInput is an input type that accepts FileSystemSinkArgs and FileSystemSinkOutput values.
// You can construct a concrete instance of `FileSystemSinkInput` via:
//
//	FileSystemSinkArgs{...}
type FileSystemSinkInput interface {
	pulumi.Input

	ToFileSystemSinkOutput() FileSystemSinkOutput
	ToFileSystemSinkOutputWithContext(context.Context) FileSystemSinkOutput
}

// A copy activity file system sink.
type FileSystemSinkArgs struct {
	// The type of copy behavior for copy sink.
	CopyBehavior pulumi.Input `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount pulumi.Input `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait pulumi.Input `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'FileSystemSink'.
	Type pulumi.StringInput `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize pulumi.Input `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout pulumi.Input `pulumi:"writeBatchTimeout"`
}

func (FileSystemSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemSink)(nil)).Elem()
}

func (i FileSystemSinkArgs) ToFileSystemSinkOutput() FileSystemSinkOutput {
	return i.ToFileSystemSinkOutputWithContext(context.Background())
}

func (i FileSystemSinkArgs) ToFileSystemSinkOutputWithContext(ctx context.Context) FileSystemSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemSinkOutput)
}

// A copy activity file system sink.
type FileSystemSinkOutput struct{ *pulumi.OutputState }

func (FileSystemSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemSink)(nil)).Elem()
}

func (o FileSystemSinkOutput) ToFileSystemSinkOutput() FileSystemSinkOutput {
	return o
}

func (o FileSystemSinkOutput) ToFileSystemSinkOutputWithContext(ctx context.Context) FileSystemSinkOutput {
	return o
}

// The type of copy behavior for copy sink.
func (o FileSystemSinkOutput) CopyBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v FileSystemSink) interface{} { return v.CopyBehavior }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o FileSystemSinkOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v FileSystemSink) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o FileSystemSinkOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v FileSystemSink) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o FileSystemSinkOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v FileSystemSink) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o FileSystemSinkOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v FileSystemSink) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'FileSystemSink'.
func (o FileSystemSinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FileSystemSink) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o FileSystemSinkOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v FileSystemSink) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o FileSystemSinkOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v FileSystemSink) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity file system sink.
type FileSystemSinkResponse struct {
	// The type of copy behavior for copy sink.
	CopyBehavior interface{} `pulumi:"copyBehavior"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount interface{} `pulumi:"sinkRetryCount"`
	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait interface{} `pulumi:"sinkRetryWait"`
	// Copy sink type.
	// Expected value is 'FileSystemSink'.
	Type string `pulumi:"type"`
	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize interface{} `pulumi:"writeBatchSize"`
	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout interface{} `pulumi:"writeBatchTimeout"`
}

// A copy activity file system sink.
type FileSystemSinkResponseOutput struct{ *pulumi.OutputState }

func (FileSystemSinkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemSinkResponse)(nil)).Elem()
}

func (o FileSystemSinkResponseOutput) ToFileSystemSinkResponseOutput() FileSystemSinkResponseOutput {
	return o
}

func (o FileSystemSinkResponseOutput) ToFileSystemSinkResponseOutputWithContext(ctx context.Context) FileSystemSinkResponseOutput {
	return o
}

// The type of copy behavior for copy sink.
func (o FileSystemSinkResponseOutput) CopyBehavior() pulumi.AnyOutput {
	return o.ApplyT(func(v FileSystemSinkResponse) interface{} { return v.CopyBehavior }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o FileSystemSinkResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v FileSystemSinkResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
func (o FileSystemSinkResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v FileSystemSinkResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Sink retry count. Type: integer (or Expression with resultType integer).
func (o FileSystemSinkResponseOutput) SinkRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v FileSystemSinkResponse) interface{} { return v.SinkRetryCount }).(pulumi.AnyOutput)
}

// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o FileSystemSinkResponseOutput) SinkRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v FileSystemSinkResponse) interface{} { return v.SinkRetryWait }).(pulumi.AnyOutput)
}

// Copy sink type.
// Expected value is 'FileSystemSink'.
func (o FileSystemSinkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FileSystemSinkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
func (o FileSystemSinkResponseOutput) WriteBatchSize() pulumi.AnyOutput {
	return o.ApplyT(func(v FileSystemSinkResponse) interface{} { return v.WriteBatchSize }).(pulumi.AnyOutput)
}

// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o FileSystemSinkResponseOutput) WriteBatchTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v FileSystemSinkResponse) interface{} { return v.WriteBatchTimeout }).(pulumi.AnyOutput)
}

// A copy activity file system source.
type FileSystemSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'FileSystemSource'.
	Type string `pulumi:"type"`
}

// FileSystemSourceInput is an input type that accepts FileSystemSourceArgs and FileSystemSourceOutput values.
// You can construct a concrete instance of `FileSystemSourceInput` via:
//
//	FileSystemSourceArgs{...}
type FileSystemSourceInput interface {
	pulumi.Input

	ToFileSystemSourceOutput() FileSystemSourceOutput
	ToFileSystemSourceOutputWithContext(context.Context) FileSystemSourceOutput
}

// A copy activity file system source.
type FileSystemSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive pulumi.Input `pulumi:"recursive"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'FileSystemSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FileSystemSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemSource)(nil)).Elem()
}

func (i FileSystemSourceArgs) ToFileSystemSourceOutput() FileSystemSourceOutput {
	return i.ToFileSystemSourceOutputWithContext(context.Background())
}

func (i FileSystemSourceArgs) ToFileSystemSourceOutputWithContext(ctx context.Context) FileSystemSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemSourceOutput)
}

// A copy activity file system source.
type FileSystemSourceOutput struct{ *pulumi.OutputState }

func (FileSystemSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemSource)(nil)).Elem()
}

func (o FileSystemSourceOutput) ToFileSystemSourceOutput() FileSystemSourceOutput {
	return o
}

func (o FileSystemSourceOutput) ToFileSystemSourceOutputWithContext(ctx context.Context) FileSystemSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o FileSystemSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v FileSystemSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o FileSystemSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v FileSystemSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o FileSystemSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v FileSystemSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o FileSystemSourceOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v FileSystemSource) interface{} { return v.Recursive }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o FileSystemSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v FileSystemSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o FileSystemSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v FileSystemSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'FileSystemSource'.
func (o FileSystemSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FileSystemSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity file system source.
type FileSystemSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'FileSystemSource'.
	Type string `pulumi:"type"`
}

// A copy activity file system source.
type FileSystemSourceResponseOutput struct{ *pulumi.OutputState }

func (FileSystemSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemSourceResponse)(nil)).Elem()
}

func (o FileSystemSourceResponseOutput) ToFileSystemSourceResponseOutput() FileSystemSourceResponseOutput {
	return o
}

func (o FileSystemSourceResponseOutput) ToFileSystemSourceResponseOutputWithContext(ctx context.Context) FileSystemSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o FileSystemSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v FileSystemSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o FileSystemSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v FileSystemSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o FileSystemSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v FileSystemSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o FileSystemSourceResponseOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v FileSystemSourceResponse) interface{} { return v.Recursive }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o FileSystemSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v FileSystemSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o FileSystemSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v FileSystemSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'FileSystemSource'.
func (o FileSystemSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FileSystemSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Filter and return results from input array based on the conditions.
type FilterActivity struct {
	// Condition to be used for filtering the input.
	Condition Expression `pulumi:"condition"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Input array on which filter should be applied.
	Items Expression `pulumi:"items"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'Filter'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// FilterActivityInput is an input type that accepts FilterActivityArgs and FilterActivityOutput values.
// You can construct a concrete instance of `FilterActivityInput` via:
//
//	FilterActivityArgs{...}
type FilterActivityInput interface {
	pulumi.Input

	ToFilterActivityOutput() FilterActivityOutput
	ToFilterActivityOutputWithContext(context.Context) FilterActivityOutput
}

// Filter and return results from input array based on the conditions.
type FilterActivityArgs struct {
	// Condition to be used for filtering the input.
	Condition ExpressionInput `pulumi:"condition"`
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Input array on which filter should be applied.
	Items ExpressionInput `pulumi:"items"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs pulumi.StringPtrInput `pulumi:"onInactiveMarkAs"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Type of activity.
	// Expected value is 'Filter'.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
}

func (FilterActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FilterActivity)(nil)).Elem()
}

func (i FilterActivityArgs) ToFilterActivityOutput() FilterActivityOutput {
	return i.ToFilterActivityOutputWithContext(context.Background())
}

func (i FilterActivityArgs) ToFilterActivityOutputWithContext(ctx context.Context) FilterActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilterActivityOutput)
}

// Filter and return results from input array based on the conditions.
type FilterActivityOutput struct{ *pulumi.OutputState }

func (FilterActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FilterActivity)(nil)).Elem()
}

func (o FilterActivityOutput) ToFilterActivityOutput() FilterActivityOutput {
	return o
}

func (o FilterActivityOutput) ToFilterActivityOutputWithContext(ctx context.Context) FilterActivityOutput {
	return o
}

// Condition to be used for filtering the input.
func (o FilterActivityOutput) Condition() ExpressionOutput {
	return o.ApplyT(func(v FilterActivity) Expression { return v.Condition }).(ExpressionOutput)
}

// Activity depends on condition.
func (o FilterActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v FilterActivity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o FilterActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FilterActivity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Input array on which filter should be applied.
func (o FilterActivityOutput) Items() ExpressionOutput {
	return o.ApplyT(func(v FilterActivity) Expression { return v.Items }).(ExpressionOutput)
}

// Activity name.
func (o FilterActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v FilterActivity) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o FilterActivityOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FilterActivity) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o FilterActivityOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FilterActivity) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'Filter'.
func (o FilterActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FilterActivity) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o FilterActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v FilterActivity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

// Filter and return results from input array based on the conditions.
type FilterActivityResponse struct {
	// Condition to be used for filtering the input.
	Condition ExpressionResponse `pulumi:"condition"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Input array on which filter should be applied.
	Items ExpressionResponse `pulumi:"items"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'Filter'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Filter and return results from input array based on the conditions.
type FilterActivityResponseOutput struct{ *pulumi.OutputState }

func (FilterActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FilterActivityResponse)(nil)).Elem()
}

func (o FilterActivityResponseOutput) ToFilterActivityResponseOutput() FilterActivityResponseOutput {
	return o
}

func (o FilterActivityResponseOutput) ToFilterActivityResponseOutputWithContext(ctx context.Context) FilterActivityResponseOutput {
	return o
}

// Condition to be used for filtering the input.
func (o FilterActivityResponseOutput) Condition() ExpressionResponseOutput {
	return o.ApplyT(func(v FilterActivityResponse) ExpressionResponse { return v.Condition }).(ExpressionResponseOutput)
}

// Activity depends on condition.
func (o FilterActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v FilterActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o FilterActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FilterActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Input array on which filter should be applied.
func (o FilterActivityResponseOutput) Items() ExpressionResponseOutput {
	return o.ApplyT(func(v FilterActivityResponse) ExpressionResponse { return v.Items }).(ExpressionResponseOutput)
}

// Activity name.
func (o FilterActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v FilterActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o FilterActivityResponseOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FilterActivityResponse) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o FilterActivityResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FilterActivityResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'Filter'.
func (o FilterActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FilterActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o FilterActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v FilterActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

// Data flow flowlet
type Flowlet struct {
	// List of tags that can be used for describing the data flow.
	Annotations []interface{} `pulumi:"annotations"`
	// The description of the data flow.
	Description *string `pulumi:"description"`
	// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
	Folder *DataFlowFolder `pulumi:"folder"`
	// Flowlet script.
	Script *string `pulumi:"script"`
	// Flowlet script lines.
	ScriptLines []string `pulumi:"scriptLines"`
	// List of sinks in Flowlet.
	Sinks []DataFlowSink `pulumi:"sinks"`
	// List of sources in Flowlet.
	Sources []DataFlowSource `pulumi:"sources"`
	// List of transformations in Flowlet.
	Transformations []Transformation `pulumi:"transformations"`
	// Type of data flow.
	// Expected value is 'Flowlet'.
	Type string `pulumi:"type"`
}

// FlowletInput is an input type that accepts FlowletArgs and FlowletOutput values.
// You can construct a concrete instance of `FlowletInput` via:
//
//	FlowletArgs{...}
type FlowletInput interface {
	pulumi.Input

	ToFlowletOutput() FlowletOutput
	ToFlowletOutputWithContext(context.Context) FlowletOutput
}

// Data flow flowlet
type FlowletArgs struct {
	// List of tags that can be used for describing the data flow.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The description of the data flow.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
	Folder DataFlowFolderPtrInput `pulumi:"folder"`
	// Flowlet script.
	Script pulumi.StringPtrInput `pulumi:"script"`
	// Flowlet script lines.
	ScriptLines pulumi.StringArrayInput `pulumi:"scriptLines"`
	// List of sinks in Flowlet.
	Sinks DataFlowSinkArrayInput `pulumi:"sinks"`
	// List of sources in Flowlet.
	Sources DataFlowSourceArrayInput `pulumi:"sources"`
	// List of transformations in Flowlet.
	Transformations TransformationArrayInput `pulumi:"transformations"`
	// Type of data flow.
	// Expected value is 'Flowlet'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FlowletArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Flowlet)(nil)).Elem()
}

func (i FlowletArgs) ToFlowletOutput() FlowletOutput {
	return i.ToFlowletOutputWithContext(context.Background())
}

func (i FlowletArgs) ToFlowletOutputWithContext(ctx context.Context) FlowletOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowletOutput)
}

// Data flow flowlet
type FlowletOutput struct{ *pulumi.OutputState }

func (FlowletOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Flowlet)(nil)).Elem()
}

func (o FlowletOutput) ToFlowletOutput() FlowletOutput {
	return o
}

func (o FlowletOutput) ToFlowletOutputWithContext(ctx context.Context) FlowletOutput {
	return o
}

// List of tags that can be used for describing the data flow.
func (o FlowletOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v Flowlet) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The description of the data flow.
func (o FlowletOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Flowlet) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
func (o FlowletOutput) Folder() DataFlowFolderPtrOutput {
	return o.ApplyT(func(v Flowlet) *DataFlowFolder { return v.Folder }).(DataFlowFolderPtrOutput)
}

// Flowlet script.
func (o FlowletOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Flowlet) *string { return v.Script }).(pulumi.StringPtrOutput)
}

// Flowlet script lines.
func (o FlowletOutput) ScriptLines() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Flowlet) []string { return v.ScriptLines }).(pulumi.StringArrayOutput)
}

// List of sinks in Flowlet.
func (o FlowletOutput) Sinks() DataFlowSinkArrayOutput {
	return o.ApplyT(func(v Flowlet) []DataFlowSink { return v.Sinks }).(DataFlowSinkArrayOutput)
}

// List of sources in Flowlet.
func (o FlowletOutput) Sources() DataFlowSourceArrayOutput {
	return o.ApplyT(func(v Flowlet) []DataFlowSource { return v.Sources }).(DataFlowSourceArrayOutput)
}

// List of transformations in Flowlet.
func (o FlowletOutput) Transformations() TransformationArrayOutput {
	return o.ApplyT(func(v Flowlet) []Transformation { return v.Transformations }).(TransformationArrayOutput)
}

// Type of data flow.
// Expected value is 'Flowlet'.
func (o FlowletOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Flowlet) string { return v.Type }).(pulumi.StringOutput)
}

// Data flow flowlet
type FlowletResponse struct {
	// List of tags that can be used for describing the data flow.
	Annotations []interface{} `pulumi:"annotations"`
	// The description of the data flow.
	Description *string `pulumi:"description"`
	// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
	Folder *DataFlowResponseFolder `pulumi:"folder"`
	// Flowlet script.
	Script *string `pulumi:"script"`
	// Flowlet script lines.
	ScriptLines []string `pulumi:"scriptLines"`
	// List of sinks in Flowlet.
	Sinks []DataFlowSinkResponse `pulumi:"sinks"`
	// List of sources in Flowlet.
	Sources []DataFlowSourceResponse `pulumi:"sources"`
	// List of transformations in Flowlet.
	Transformations []TransformationResponse `pulumi:"transformations"`
	// Type of data flow.
	// Expected value is 'Flowlet'.
	Type string `pulumi:"type"`
}

// Data flow flowlet
type FlowletResponseOutput struct{ *pulumi.OutputState }

func (FlowletResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowletResponse)(nil)).Elem()
}

func (o FlowletResponseOutput) ToFlowletResponseOutput() FlowletResponseOutput {
	return o
}

func (o FlowletResponseOutput) ToFlowletResponseOutputWithContext(ctx context.Context) FlowletResponseOutput {
	return o
}

// List of tags that can be used for describing the data flow.
func (o FlowletResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v FlowletResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The description of the data flow.
func (o FlowletResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowletResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
func (o FlowletResponseOutput) Folder() DataFlowResponseFolderPtrOutput {
	return o.ApplyT(func(v FlowletResponse) *DataFlowResponseFolder { return v.Folder }).(DataFlowResponseFolderPtrOutput)
}

// Flowlet script.
func (o FlowletResponseOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowletResponse) *string { return v.Script }).(pulumi.StringPtrOutput)
}

// Flowlet script lines.
func (o FlowletResponseOutput) ScriptLines() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FlowletResponse) []string { return v.ScriptLines }).(pulumi.StringArrayOutput)
}

// List of sinks in Flowlet.
func (o FlowletResponseOutput) Sinks() DataFlowSinkResponseArrayOutput {
	return o.ApplyT(func(v FlowletResponse) []DataFlowSinkResponse { return v.Sinks }).(DataFlowSinkResponseArrayOutput)
}

// List of sources in Flowlet.
func (o FlowletResponseOutput) Sources() DataFlowSourceResponseArrayOutput {
	return o.ApplyT(func(v FlowletResponse) []DataFlowSourceResponse { return v.Sources }).(DataFlowSourceResponseArrayOutput)
}

// List of transformations in Flowlet.
func (o FlowletResponseOutput) Transformations() TransformationResponseArrayOutput {
	return o.ApplyT(func(v FlowletResponse) []TransformationResponse { return v.Transformations }).(TransformationResponseArrayOutput)
}

// Type of data flow.
// Expected value is 'Flowlet'.
func (o FlowletResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FlowletResponse) string { return v.Type }).(pulumi.StringOutput)
}

// This activity is used for iterating over a collection and execute given activities.
type ForEachActivity struct {
	// List of activities to execute .
	Activities []interface{} `pulumi:"activities"`
	// Batch count to be used for controlling the number of parallel execution (when isSequential is set to false).
	BatchCount *int `pulumi:"batchCount"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Should the loop be executed in sequence or in parallel (max 50)
	IsSequential *bool `pulumi:"isSequential"`
	// Collection to iterate.
	Items Expression `pulumi:"items"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'ForEach'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// ForEachActivityInput is an input type that accepts ForEachActivityArgs and ForEachActivityOutput values.
// You can construct a concrete instance of `ForEachActivityInput` via:
//
//	ForEachActivityArgs{...}
type ForEachActivityInput interface {
	pulumi.Input

	ToForEachActivityOutput() ForEachActivityOutput
	ToForEachActivityOutputWithContext(context.Context) ForEachActivityOutput
}

// This activity is used for iterating over a collection and execute given activities.
type ForEachActivityArgs struct {
	// List of activities to execute .
	Activities pulumi.ArrayInput `pulumi:"activities"`
	// Batch count to be used for controlling the number of parallel execution (when isSequential is set to false).
	BatchCount pulumi.IntPtrInput `pulumi:"batchCount"`
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Should the loop be executed in sequence or in parallel (max 50)
	IsSequential pulumi.BoolPtrInput `pulumi:"isSequential"`
	// Collection to iterate.
	Items ExpressionInput `pulumi:"items"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs pulumi.StringPtrInput `pulumi:"onInactiveMarkAs"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Type of activity.
	// Expected value is 'ForEach'.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
}

func (ForEachActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ForEachActivity)(nil)).Elem()
}

func (i ForEachActivityArgs) ToForEachActivityOutput() ForEachActivityOutput {
	return i.ToForEachActivityOutputWithContext(context.Background())
}

func (i ForEachActivityArgs) ToForEachActivityOutputWithContext(ctx context.Context) ForEachActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForEachActivityOutput)
}

// This activity is used for iterating over a collection and execute given activities.
type ForEachActivityOutput struct{ *pulumi.OutputState }

func (ForEachActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ForEachActivity)(nil)).Elem()
}

func (o ForEachActivityOutput) ToForEachActivityOutput() ForEachActivityOutput {
	return o
}

func (o ForEachActivityOutput) ToForEachActivityOutputWithContext(ctx context.Context) ForEachActivityOutput {
	return o
}

// List of activities to execute .
func (o ForEachActivityOutput) Activities() pulumi.ArrayOutput {
	return o.ApplyT(func(v ForEachActivity) []interface{} { return v.Activities }).(pulumi.ArrayOutput)
}

// Batch count to be used for controlling the number of parallel execution (when isSequential is set to false).
func (o ForEachActivityOutput) BatchCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ForEachActivity) *int { return v.BatchCount }).(pulumi.IntPtrOutput)
}

// Activity depends on condition.
func (o ForEachActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v ForEachActivity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o ForEachActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForEachActivity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Should the loop be executed in sequence or in parallel (max 50)
func (o ForEachActivityOutput) IsSequential() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ForEachActivity) *bool { return v.IsSequential }).(pulumi.BoolPtrOutput)
}

// Collection to iterate.
func (o ForEachActivityOutput) Items() ExpressionOutput {
	return o.ApplyT(func(v ForEachActivity) Expression { return v.Items }).(ExpressionOutput)
}

// Activity name.
func (o ForEachActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ForEachActivity) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o ForEachActivityOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForEachActivity) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o ForEachActivityOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForEachActivity) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'ForEach'.
func (o ForEachActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ForEachActivity) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o ForEachActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v ForEachActivity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

// This activity is used for iterating over a collection and execute given activities.
type ForEachActivityResponse struct {
	// List of activities to execute .
	Activities []interface{} `pulumi:"activities"`
	// Batch count to be used for controlling the number of parallel execution (when isSequential is set to false).
	BatchCount *int `pulumi:"batchCount"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Should the loop be executed in sequence or in parallel (max 50)
	IsSequential *bool `pulumi:"isSequential"`
	// Collection to iterate.
	Items ExpressionResponse `pulumi:"items"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// Type of activity.
	// Expected value is 'ForEach'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// This activity is used for iterating over a collection and execute given activities.
type ForEachActivityResponseOutput struct{ *pulumi.OutputState }

func (ForEachActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ForEachActivityResponse)(nil)).Elem()
}

func (o ForEachActivityResponseOutput) ToForEachActivityResponseOutput() ForEachActivityResponseOutput {
	return o
}

func (o ForEachActivityResponseOutput) ToForEachActivityResponseOutputWithContext(ctx context.Context) ForEachActivityResponseOutput {
	return o
}

// List of activities to execute .
func (o ForEachActivityResponseOutput) Activities() pulumi.ArrayOutput {
	return o.ApplyT(func(v ForEachActivityResponse) []interface{} { return v.Activities }).(pulumi.ArrayOutput)
}

// Batch count to be used for controlling the number of parallel execution (when isSequential is set to false).
func (o ForEachActivityResponseOutput) BatchCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ForEachActivityResponse) *int { return v.BatchCount }).(pulumi.IntPtrOutput)
}

// Activity depends on condition.
func (o ForEachActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v ForEachActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o ForEachActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForEachActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Should the loop be executed in sequence or in parallel (max 50)
func (o ForEachActivityResponseOutput) IsSequential() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ForEachActivityResponse) *bool { return v.IsSequential }).(pulumi.BoolPtrOutput)
}

// Collection to iterate.
func (o ForEachActivityResponseOutput) Items() ExpressionResponseOutput {
	return o.ApplyT(func(v ForEachActivityResponse) ExpressionResponse { return v.Items }).(ExpressionResponseOutput)
}

// Activity name.
func (o ForEachActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ForEachActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o ForEachActivityResponseOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForEachActivityResponse) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o ForEachActivityResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForEachActivityResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Type of activity.
// Expected value is 'ForEach'.
func (o ForEachActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ForEachActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o ForEachActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v ForEachActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

// Ftp read settings.
type FtpReadSettings struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable parallel reading within each file. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableChunking interface{} `pulumi:"disableChunking"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery interface{} `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'FtpReadSettings'.
	Type string `pulumi:"type"`
	// Specify whether to use binary transfer mode for FTP stores. Type: boolean (or Expression with resultType boolean).
	UseBinaryTransfer interface{} `pulumi:"useBinaryTransfer"`
	// Ftp wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Ftp wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// FtpReadSettingsInput is an input type that accepts FtpReadSettingsArgs and FtpReadSettingsOutput values.
// You can construct a concrete instance of `FtpReadSettingsInput` via:
//
//	FtpReadSettingsArgs{...}
type FtpReadSettingsInput interface {
	pulumi.Input

	ToFtpReadSettingsOutput() FtpReadSettingsOutput
	ToFtpReadSettingsOutputWithContext(context.Context) FtpReadSettingsOutput
}

// Ftp read settings.
type FtpReadSettingsArgs struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion pulumi.Input `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable parallel reading within each file. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableChunking pulumi.Input `pulumi:"disableChunking"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery pulumi.Input `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath pulumi.Input `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath pulumi.Input `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive pulumi.Input `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'FtpReadSettings'.
	Type pulumi.StringInput `pulumi:"type"`
	// Specify whether to use binary transfer mode for FTP stores. Type: boolean (or Expression with resultType boolean).
	UseBinaryTransfer pulumi.Input `pulumi:"useBinaryTransfer"`
	// Ftp wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName pulumi.Input `pulumi:"wildcardFileName"`
	// Ftp wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath pulumi.Input `pulumi:"wildcardFolderPath"`
}

func (FtpReadSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FtpReadSettings)(nil)).Elem()
}

func (i FtpReadSettingsArgs) ToFtpReadSettingsOutput() FtpReadSettingsOutput {
	return i.ToFtpReadSettingsOutputWithContext(context.Background())
}

func (i FtpReadSettingsArgs) ToFtpReadSettingsOutputWithContext(ctx context.Context) FtpReadSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FtpReadSettingsOutput)
}

func (i FtpReadSettingsArgs) ToFtpReadSettingsPtrOutput() FtpReadSettingsPtrOutput {
	return i.ToFtpReadSettingsPtrOutputWithContext(context.Background())
}

func (i FtpReadSettingsArgs) ToFtpReadSettingsPtrOutputWithContext(ctx context.Context) FtpReadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FtpReadSettingsOutput).ToFtpReadSettingsPtrOutputWithContext(ctx)
}

// FtpReadSettingsPtrInput is an input type that accepts FtpReadSettingsArgs, FtpReadSettingsPtr and FtpReadSettingsPtrOutput values.
// You can construct a concrete instance of `FtpReadSettingsPtrInput` via:
//
//	        FtpReadSettingsArgs{...}
//
//	or:
//
//	        nil
type FtpReadSettingsPtrInput interface {
	pulumi.Input

	ToFtpReadSettingsPtrOutput() FtpReadSettingsPtrOutput
	ToFtpReadSettingsPtrOutputWithContext(context.Context) FtpReadSettingsPtrOutput
}

type ftpReadSettingsPtrType FtpReadSettingsArgs

func FtpReadSettingsPtr(v *FtpReadSettingsArgs) FtpReadSettingsPtrInput {
	return (*ftpReadSettingsPtrType)(v)
}

func (*ftpReadSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FtpReadSettings)(nil)).Elem()
}

func (i *ftpReadSettingsPtrType) ToFtpReadSettingsPtrOutput() FtpReadSettingsPtrOutput {
	return i.ToFtpReadSettingsPtrOutputWithContext(context.Background())
}

func (i *ftpReadSettingsPtrType) ToFtpReadSettingsPtrOutputWithContext(ctx context.Context) FtpReadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FtpReadSettingsPtrOutput)
}

// Ftp read settings.
type FtpReadSettingsOutput struct{ *pulumi.OutputState }

func (FtpReadSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FtpReadSettings)(nil)).Elem()
}

func (o FtpReadSettingsOutput) ToFtpReadSettingsOutput() FtpReadSettingsOutput {
	return o
}

func (o FtpReadSettingsOutput) ToFtpReadSettingsOutputWithContext(ctx context.Context) FtpReadSettingsOutput {
	return o
}

func (o FtpReadSettingsOutput) ToFtpReadSettingsPtrOutput() FtpReadSettingsPtrOutput {
	return o.ToFtpReadSettingsPtrOutputWithContext(context.Background())
}

func (o FtpReadSettingsOutput) ToFtpReadSettingsPtrOutputWithContext(ctx context.Context) FtpReadSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FtpReadSettings) *FtpReadSettings {
		return &v
	}).(FtpReadSettingsPtrOutput)
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o FtpReadSettingsOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpReadSettings) interface{} { return v.DeleteFilesAfterCompletion }).(pulumi.AnyOutput)
}

// If true, disable parallel reading within each file. Default is false. Type: boolean (or Expression with resultType boolean).
func (o FtpReadSettingsOutput) DisableChunking() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpReadSettings) interface{} { return v.DisableChunking }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o FtpReadSettingsOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpReadSettings) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o FtpReadSettingsOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpReadSettings) interface{} { return v.EnablePartitionDiscovery }).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o FtpReadSettingsOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpReadSettings) interface{} { return v.FileListPath }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o FtpReadSettingsOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpReadSettings) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o FtpReadSettingsOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpReadSettings) interface{} { return v.PartitionRootPath }).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o FtpReadSettingsOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpReadSettings) interface{} { return v.Recursive }).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'FtpReadSettings'.
func (o FtpReadSettingsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FtpReadSettings) string { return v.Type }).(pulumi.StringOutput)
}

// Specify whether to use binary transfer mode for FTP stores. Type: boolean (or Expression with resultType boolean).
func (o FtpReadSettingsOutput) UseBinaryTransfer() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpReadSettings) interface{} { return v.UseBinaryTransfer }).(pulumi.AnyOutput)
}

// Ftp wildcardFileName. Type: string (or Expression with resultType string).
func (o FtpReadSettingsOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpReadSettings) interface{} { return v.WildcardFileName }).(pulumi.AnyOutput)
}

// Ftp wildcardFolderPath. Type: string (or Expression with resultType string).
func (o FtpReadSettingsOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpReadSettings) interface{} { return v.WildcardFolderPath }).(pulumi.AnyOutput)
}

type FtpReadSettingsPtrOutput struct{ *pulumi.OutputState }

func (FtpReadSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FtpReadSettings)(nil)).Elem()
}

func (o FtpReadSettingsPtrOutput) ToFtpReadSettingsPtrOutput() FtpReadSettingsPtrOutput {
	return o
}

func (o FtpReadSettingsPtrOutput) ToFtpReadSettingsPtrOutputWithContext(ctx context.Context) FtpReadSettingsPtrOutput {
	return o
}

func (o FtpReadSettingsPtrOutput) Elem() FtpReadSettingsOutput {
	return o.ApplyT(func(v *FtpReadSettings) FtpReadSettings {
		if v != nil {
			return *v
		}
		var ret FtpReadSettings
		return ret
	}).(FtpReadSettingsOutput)
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o FtpReadSettingsPtrOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v *FtpReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.DeleteFilesAfterCompletion
	}).(pulumi.AnyOutput)
}

// If true, disable parallel reading within each file. Default is false. Type: boolean (or Expression with resultType boolean).
func (o FtpReadSettingsPtrOutput) DisableChunking() pulumi.AnyOutput {
	return o.ApplyT(func(v *FtpReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableChunking
	}).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o FtpReadSettingsPtrOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v *FtpReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableMetricsCollection
	}).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o FtpReadSettingsPtrOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v *FtpReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.EnablePartitionDiscovery
	}).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o FtpReadSettingsPtrOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *FtpReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.FileListPath
	}).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o FtpReadSettingsPtrOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v *FtpReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentConnections
	}).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o FtpReadSettingsPtrOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *FtpReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionRootPath
	}).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o FtpReadSettingsPtrOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v *FtpReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.Recursive
	}).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'FtpReadSettings'.
func (o FtpReadSettingsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FtpReadSettings) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Specify whether to use binary transfer mode for FTP stores. Type: boolean (or Expression with resultType boolean).
func (o FtpReadSettingsPtrOutput) UseBinaryTransfer() pulumi.AnyOutput {
	return o.ApplyT(func(v *FtpReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.UseBinaryTransfer
	}).(pulumi.AnyOutput)
}

// Ftp wildcardFileName. Type: string (or Expression with resultType string).
func (o FtpReadSettingsPtrOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v *FtpReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFileName
	}).(pulumi.AnyOutput)
}

// Ftp wildcardFolderPath. Type: string (or Expression with resultType string).
func (o FtpReadSettingsPtrOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *FtpReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFolderPath
	}).(pulumi.AnyOutput)
}

// Ftp read settings.
type FtpReadSettingsResponse struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable parallel reading within each file. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableChunking interface{} `pulumi:"disableChunking"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery interface{} `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'FtpReadSettings'.
	Type string `pulumi:"type"`
	// Specify whether to use binary transfer mode for FTP stores. Type: boolean (or Expression with resultType boolean).
	UseBinaryTransfer interface{} `pulumi:"useBinaryTransfer"`
	// Ftp wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Ftp wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// Ftp read settings.
type FtpReadSettingsResponseOutput struct{ *pulumi.OutputState }

func (FtpReadSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FtpReadSettingsResponse)(nil)).Elem()
}

func (o FtpReadSettingsResponseOutput) ToFtpReadSettingsResponseOutput() FtpReadSettingsResponseOutput {
	return o
}

func (o FtpReadSettingsResponseOutput) ToFtpReadSettingsResponseOutputWithContext(ctx context.Context) FtpReadSettingsResponseOutput {
	return o
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o FtpReadSettingsResponseOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpReadSettingsResponse) interface{} { return v.DeleteFilesAfterCompletion }).(pulumi.AnyOutput)
}

// If true, disable parallel reading within each file. Default is false. Type: boolean (or Expression with resultType boolean).
func (o FtpReadSettingsResponseOutput) DisableChunking() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpReadSettingsResponse) interface{} { return v.DisableChunking }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o FtpReadSettingsResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpReadSettingsResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o FtpReadSettingsResponseOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpReadSettingsResponse) interface{} { return v.EnablePartitionDiscovery }).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o FtpReadSettingsResponseOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpReadSettingsResponse) interface{} { return v.FileListPath }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o FtpReadSettingsResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpReadSettingsResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o FtpReadSettingsResponseOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpReadSettingsResponse) interface{} { return v.PartitionRootPath }).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o FtpReadSettingsResponseOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpReadSettingsResponse) interface{} { return v.Recursive }).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'FtpReadSettings'.
func (o FtpReadSettingsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FtpReadSettingsResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specify whether to use binary transfer mode for FTP stores. Type: boolean (or Expression with resultType boolean).
func (o FtpReadSettingsResponseOutput) UseBinaryTransfer() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpReadSettingsResponse) interface{} { return v.UseBinaryTransfer }).(pulumi.AnyOutput)
}

// Ftp wildcardFileName. Type: string (or Expression with resultType string).
func (o FtpReadSettingsResponseOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpReadSettingsResponse) interface{} { return v.WildcardFileName }).(pulumi.AnyOutput)
}

// Ftp wildcardFolderPath. Type: string (or Expression with resultType string).
func (o FtpReadSettingsResponseOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpReadSettingsResponse) interface{} { return v.WildcardFolderPath }).(pulumi.AnyOutput)
}

type FtpReadSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (FtpReadSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FtpReadSettingsResponse)(nil)).Elem()
}

func (o FtpReadSettingsResponsePtrOutput) ToFtpReadSettingsResponsePtrOutput() FtpReadSettingsResponsePtrOutput {
	return o
}

func (o FtpReadSettingsResponsePtrOutput) ToFtpReadSettingsResponsePtrOutputWithContext(ctx context.Context) FtpReadSettingsResponsePtrOutput {
	return o
}

func (o FtpReadSettingsResponsePtrOutput) Elem() FtpReadSettingsResponseOutput {
	return o.ApplyT(func(v *FtpReadSettingsResponse) FtpReadSettingsResponse {
		if v != nil {
			return *v
		}
		var ret FtpReadSettingsResponse
		return ret
	}).(FtpReadSettingsResponseOutput)
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o FtpReadSettingsResponsePtrOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v *FtpReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.DeleteFilesAfterCompletion
	}).(pulumi.AnyOutput)
}

// If true, disable parallel reading within each file. Default is false. Type: boolean (or Expression with resultType boolean).
func (o FtpReadSettingsResponsePtrOutput) DisableChunking() pulumi.AnyOutput {
	return o.ApplyT(func(v *FtpReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableChunking
	}).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o FtpReadSettingsResponsePtrOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v *FtpReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableMetricsCollection
	}).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o FtpReadSettingsResponsePtrOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v *FtpReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.EnablePartitionDiscovery
	}).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o FtpReadSettingsResponsePtrOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *FtpReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.FileListPath
	}).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o FtpReadSettingsResponsePtrOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v *FtpReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentConnections
	}).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o FtpReadSettingsResponsePtrOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *FtpReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionRootPath
	}).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o FtpReadSettingsResponsePtrOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v *FtpReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Recursive
	}).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'FtpReadSettings'.
func (o FtpReadSettingsResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FtpReadSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Specify whether to use binary transfer mode for FTP stores. Type: boolean (or Expression with resultType boolean).
func (o FtpReadSettingsResponsePtrOutput) UseBinaryTransfer() pulumi.AnyOutput {
	return o.ApplyT(func(v *FtpReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.UseBinaryTransfer
	}).(pulumi.AnyOutput)
}

// Ftp wildcardFileName. Type: string (or Expression with resultType string).
func (o FtpReadSettingsResponsePtrOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v *FtpReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFileName
	}).(pulumi.AnyOutput)
}

// Ftp wildcardFolderPath. Type: string (or Expression with resultType string).
func (o FtpReadSettingsResponsePtrOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *FtpReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFolderPath
	}).(pulumi.AnyOutput)
}

// A FTP server Linked Service.
type FtpServerLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to be used to connect to the FTP server.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// If true, validate the FTP server SSL certificate when connect over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean).
	EnableServerCertificateValidation interface{} `pulumi:"enableServerCertificateValidation"`
	// If true, connect to the FTP server over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean).
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Host name of the FTP server. Type: string (or Expression with resultType string).
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Password to logon the FTP server.
	Password interface{} `pulumi:"password"`
	// The TCP port number that the FTP server uses to listen for client connections. Default value is 21. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// Type of linked service.
	// Expected value is 'FtpServer'.
	Type string `pulumi:"type"`
	// Username to logon the FTP server. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// FtpServerLinkedServiceInput is an input type that accepts FtpServerLinkedServiceArgs and FtpServerLinkedServiceOutput values.
// You can construct a concrete instance of `FtpServerLinkedServiceInput` via:
//
//	FtpServerLinkedServiceArgs{...}
type FtpServerLinkedServiceInput interface {
	pulumi.Input

	ToFtpServerLinkedServiceOutput() FtpServerLinkedServiceOutput
	ToFtpServerLinkedServiceOutputWithContext(context.Context) FtpServerLinkedServiceOutput
}

// A FTP server Linked Service.
type FtpServerLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication type to be used to connect to the FTP server.
	AuthenticationType pulumi.StringPtrInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// If true, validate the FTP server SSL certificate when connect over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean).
	EnableServerCertificateValidation pulumi.Input `pulumi:"enableServerCertificateValidation"`
	// If true, connect to the FTP server over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean).
	EnableSsl pulumi.Input `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Host name of the FTP server. Type: string (or Expression with resultType string).
	Host pulumi.Input `pulumi:"host"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Password to logon the FTP server.
	Password pulumi.Input `pulumi:"password"`
	// The TCP port number that the FTP server uses to listen for client connections. Default value is 21. Type: integer (or Expression with resultType integer), minimum: 0.
	Port pulumi.Input `pulumi:"port"`
	// Type of linked service.
	// Expected value is 'FtpServer'.
	Type pulumi.StringInput `pulumi:"type"`
	// Username to logon the FTP server. Type: string (or Expression with resultType string).
	UserName pulumi.Input `pulumi:"userName"`
}

func (FtpServerLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FtpServerLinkedService)(nil)).Elem()
}

func (i FtpServerLinkedServiceArgs) ToFtpServerLinkedServiceOutput() FtpServerLinkedServiceOutput {
	return i.ToFtpServerLinkedServiceOutputWithContext(context.Background())
}

func (i FtpServerLinkedServiceArgs) ToFtpServerLinkedServiceOutputWithContext(ctx context.Context) FtpServerLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FtpServerLinkedServiceOutput)
}

// A FTP server Linked Service.
type FtpServerLinkedServiceOutput struct{ *pulumi.OutputState }

func (FtpServerLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FtpServerLinkedService)(nil)).Elem()
}

func (o FtpServerLinkedServiceOutput) ToFtpServerLinkedServiceOutput() FtpServerLinkedServiceOutput {
	return o
}

func (o FtpServerLinkedServiceOutput) ToFtpServerLinkedServiceOutputWithContext(ctx context.Context) FtpServerLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o FtpServerLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v FtpServerLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication type to be used to connect to the FTP server.
func (o FtpServerLinkedServiceOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FtpServerLinkedService) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// The integration runtime reference.
func (o FtpServerLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v FtpServerLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o FtpServerLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FtpServerLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If true, validate the FTP server SSL certificate when connect over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean).
func (o FtpServerLinkedServiceOutput) EnableServerCertificateValidation() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpServerLinkedService) interface{} { return v.EnableServerCertificateValidation }).(pulumi.AnyOutput)
}

// If true, connect to the FTP server over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean).
func (o FtpServerLinkedServiceOutput) EnableSsl() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpServerLinkedService) interface{} { return v.EnableSsl }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o FtpServerLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FtpServerLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Host name of the FTP server. Type: string (or Expression with resultType string).
func (o FtpServerLinkedServiceOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpServerLinkedService) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o FtpServerLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v FtpServerLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Password to logon the FTP server.
func (o FtpServerLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpServerLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port number that the FTP server uses to listen for client connections. Default value is 21. Type: integer (or Expression with resultType integer), minimum: 0.
func (o FtpServerLinkedServiceOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpServerLinkedService) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'FtpServer'.
func (o FtpServerLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FtpServerLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Username to logon the FTP server. Type: string (or Expression with resultType string).
func (o FtpServerLinkedServiceOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpServerLinkedService) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// A FTP server Linked Service.
type FtpServerLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication type to be used to connect to the FTP server.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// If true, validate the FTP server SSL certificate when connect over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean).
	EnableServerCertificateValidation interface{} `pulumi:"enableServerCertificateValidation"`
	// If true, connect to the FTP server over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean).
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Host name of the FTP server. Type: string (or Expression with resultType string).
	Host interface{} `pulumi:"host"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Password to logon the FTP server.
	Password interface{} `pulumi:"password"`
	// The TCP port number that the FTP server uses to listen for client connections. Default value is 21. Type: integer (or Expression with resultType integer), minimum: 0.
	Port interface{} `pulumi:"port"`
	// Type of linked service.
	// Expected value is 'FtpServer'.
	Type string `pulumi:"type"`
	// Username to logon the FTP server. Type: string (or Expression with resultType string).
	UserName interface{} `pulumi:"userName"`
}

// A FTP server Linked Service.
type FtpServerLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (FtpServerLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FtpServerLinkedServiceResponse)(nil)).Elem()
}

func (o FtpServerLinkedServiceResponseOutput) ToFtpServerLinkedServiceResponseOutput() FtpServerLinkedServiceResponseOutput {
	return o
}

func (o FtpServerLinkedServiceResponseOutput) ToFtpServerLinkedServiceResponseOutputWithContext(ctx context.Context) FtpServerLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o FtpServerLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v FtpServerLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication type to be used to connect to the FTP server.
func (o FtpServerLinkedServiceResponseOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FtpServerLinkedServiceResponse) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// The integration runtime reference.
func (o FtpServerLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v FtpServerLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o FtpServerLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FtpServerLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If true, validate the FTP server SSL certificate when connect over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean).
func (o FtpServerLinkedServiceResponseOutput) EnableServerCertificateValidation() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpServerLinkedServiceResponse) interface{} { return v.EnableServerCertificateValidation }).(pulumi.AnyOutput)
}

// If true, connect to the FTP server over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean).
func (o FtpServerLinkedServiceResponseOutput) EnableSsl() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpServerLinkedServiceResponse) interface{} { return v.EnableSsl }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o FtpServerLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FtpServerLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Host name of the FTP server. Type: string (or Expression with resultType string).
func (o FtpServerLinkedServiceResponseOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpServerLinkedServiceResponse) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o FtpServerLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v FtpServerLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Password to logon the FTP server.
func (o FtpServerLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpServerLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port number that the FTP server uses to listen for client connections. Default value is 21. Type: integer (or Expression with resultType integer), minimum: 0.
func (o FtpServerLinkedServiceResponseOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpServerLinkedServiceResponse) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'FtpServer'.
func (o FtpServerLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FtpServerLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Username to logon the FTP server. Type: string (or Expression with resultType string).
func (o FtpServerLinkedServiceResponseOutput) UserName() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpServerLinkedServiceResponse) interface{} { return v.UserName }).(pulumi.AnyOutput)
}

// The location of ftp server dataset.
type FtpServerLocation struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'FtpServerLocation'.
	Type string `pulumi:"type"`
}

// FtpServerLocationInput is an input type that accepts FtpServerLocationArgs and FtpServerLocationOutput values.
// You can construct a concrete instance of `FtpServerLocationInput` via:
//
//	FtpServerLocationArgs{...}
type FtpServerLocationInput interface {
	pulumi.Input

	ToFtpServerLocationOutput() FtpServerLocationOutput
	ToFtpServerLocationOutputWithContext(context.Context) FtpServerLocationOutput
}

// The location of ftp server dataset.
type FtpServerLocationArgs struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'FtpServerLocation'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FtpServerLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FtpServerLocation)(nil)).Elem()
}

func (i FtpServerLocationArgs) ToFtpServerLocationOutput() FtpServerLocationOutput {
	return i.ToFtpServerLocationOutputWithContext(context.Background())
}

func (i FtpServerLocationArgs) ToFtpServerLocationOutputWithContext(ctx context.Context) FtpServerLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FtpServerLocationOutput)
}

// The location of ftp server dataset.
type FtpServerLocationOutput struct{ *pulumi.OutputState }

func (FtpServerLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FtpServerLocation)(nil)).Elem()
}

func (o FtpServerLocationOutput) ToFtpServerLocationOutput() FtpServerLocationOutput {
	return o
}

func (o FtpServerLocationOutput) ToFtpServerLocationOutputWithContext(ctx context.Context) FtpServerLocationOutput {
	return o
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o FtpServerLocationOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpServerLocation) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o FtpServerLocationOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpServerLocation) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
// Expected value is 'FtpServerLocation'.
func (o FtpServerLocationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FtpServerLocation) string { return v.Type }).(pulumi.StringOutput)
}

// The location of ftp server dataset.
type FtpServerLocationResponse struct {
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'FtpServerLocation'.
	Type string `pulumi:"type"`
}

// The location of ftp server dataset.
type FtpServerLocationResponseOutput struct{ *pulumi.OutputState }

func (FtpServerLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FtpServerLocationResponse)(nil)).Elem()
}

func (o FtpServerLocationResponseOutput) ToFtpServerLocationResponseOutput() FtpServerLocationResponseOutput {
	return o
}

func (o FtpServerLocationResponseOutput) ToFtpServerLocationResponseOutputWithContext(ctx context.Context) FtpServerLocationResponseOutput {
	return o
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o FtpServerLocationResponseOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpServerLocationResponse) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o FtpServerLocationResponseOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v FtpServerLocationResponse) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
// Expected value is 'FtpServerLocation'.
func (o FtpServerLocationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FtpServerLocationResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Activity to get metadata of dataset
type GetMetadataActivity struct {
	// GetMetadata activity dataset reference.
	Dataset DatasetReference `pulumi:"dataset"`
	// Activity depends on condition.
	DependsOn []ActivityDependency `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Fields of metadata to get from dataset.
	FieldList []interface{} `pulumi:"fieldList"`
	// GetMetadata activity format settings.
	FormatSettings interface{} `pulumi:"formatSettings"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReference `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicy `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// GetMetadata activity store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Type of activity.
	// Expected value is 'GetMetadata'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserProperty `pulumi:"userProperties"`
}

// GetMetadataActivityInput is an input type that accepts GetMetadataActivityArgs and GetMetadataActivityOutput values.
// You can construct a concrete instance of `GetMetadataActivityInput` via:
//
//	GetMetadataActivityArgs{...}
type GetMetadataActivityInput interface {
	pulumi.Input

	ToGetMetadataActivityOutput() GetMetadataActivityOutput
	ToGetMetadataActivityOutputWithContext(context.Context) GetMetadataActivityOutput
}

// Activity to get metadata of dataset
type GetMetadataActivityArgs struct {
	// GetMetadata activity dataset reference.
	Dataset DatasetReferenceInput `pulumi:"dataset"`
	// Activity depends on condition.
	DependsOn ActivityDependencyArrayInput `pulumi:"dependsOn"`
	// Activity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Fields of metadata to get from dataset.
	FieldList pulumi.ArrayInput `pulumi:"fieldList"`
	// GetMetadata activity format settings.
	FormatSettings pulumi.Input `pulumi:"formatSettings"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferencePtrInput `pulumi:"linkedServiceName"`
	// Activity name.
	Name pulumi.StringInput `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs pulumi.StringPtrInput `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy ActivityPolicyPtrInput `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State pulumi.StringPtrInput `pulumi:"state"`
	// GetMetadata activity store settings.
	StoreSettings pulumi.Input `pulumi:"storeSettings"`
	// Type of activity.
	// Expected value is 'GetMetadata'.
	Type pulumi.StringInput `pulumi:"type"`
	// Activity user properties.
	UserProperties UserPropertyArrayInput `pulumi:"userProperties"`
}

func (GetMetadataActivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetadataActivity)(nil)).Elem()
}

func (i GetMetadataActivityArgs) ToGetMetadataActivityOutput() GetMetadataActivityOutput {
	return i.ToGetMetadataActivityOutputWithContext(context.Background())
}

func (i GetMetadataActivityArgs) ToGetMetadataActivityOutputWithContext(ctx context.Context) GetMetadataActivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMetadataActivityOutput)
}

// Activity to get metadata of dataset
type GetMetadataActivityOutput struct{ *pulumi.OutputState }

func (GetMetadataActivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetadataActivity)(nil)).Elem()
}

func (o GetMetadataActivityOutput) ToGetMetadataActivityOutput() GetMetadataActivityOutput {
	return o
}

func (o GetMetadataActivityOutput) ToGetMetadataActivityOutputWithContext(ctx context.Context) GetMetadataActivityOutput {
	return o
}

// GetMetadata activity dataset reference.
func (o GetMetadataActivityOutput) Dataset() DatasetReferenceOutput {
	return o.ApplyT(func(v GetMetadataActivity) DatasetReference { return v.Dataset }).(DatasetReferenceOutput)
}

// Activity depends on condition.
func (o GetMetadataActivityOutput) DependsOn() ActivityDependencyArrayOutput {
	return o.ApplyT(func(v GetMetadataActivity) []ActivityDependency { return v.DependsOn }).(ActivityDependencyArrayOutput)
}

// Activity description.
func (o GetMetadataActivityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMetadataActivity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Fields of metadata to get from dataset.
func (o GetMetadataActivityOutput) FieldList() pulumi.ArrayOutput {
	return o.ApplyT(func(v GetMetadataActivity) []interface{} { return v.FieldList }).(pulumi.ArrayOutput)
}

// GetMetadata activity format settings.
func (o GetMetadataActivityOutput) FormatSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v GetMetadataActivity) interface{} { return v.FormatSettings }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o GetMetadataActivityOutput) LinkedServiceName() LinkedServiceReferencePtrOutput {
	return o.ApplyT(func(v GetMetadataActivity) *LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferencePtrOutput)
}

// Activity name.
func (o GetMetadataActivityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetadataActivity) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o GetMetadataActivityOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMetadataActivity) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o GetMetadataActivityOutput) Policy() ActivityPolicyPtrOutput {
	return o.ApplyT(func(v GetMetadataActivity) *ActivityPolicy { return v.Policy }).(ActivityPolicyPtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o GetMetadataActivityOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMetadataActivity) *string { return v.State }).(pulumi.StringPtrOutput)
}

// GetMetadata activity store settings.
func (o GetMetadataActivityOutput) StoreSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v GetMetadataActivity) interface{} { return v.StoreSettings }).(pulumi.AnyOutput)
}

// Type of activity.
// Expected value is 'GetMetadata'.
func (o GetMetadataActivityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetadataActivity) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o GetMetadataActivityOutput) UserProperties() UserPropertyArrayOutput {
	return o.ApplyT(func(v GetMetadataActivity) []UserProperty { return v.UserProperties }).(UserPropertyArrayOutput)
}

// Activity to get metadata of dataset
type GetMetadataActivityResponse struct {
	// GetMetadata activity dataset reference.
	Dataset DatasetReferenceResponse `pulumi:"dataset"`
	// Activity depends on condition.
	DependsOn []ActivityDependencyResponse `pulumi:"dependsOn"`
	// Activity description.
	Description *string `pulumi:"description"`
	// Fields of metadata to get from dataset.
	FieldList []interface{} `pulumi:"fieldList"`
	// GetMetadata activity format settings.
	FormatSettings interface{} `pulumi:"formatSettings"`
	// Linked service reference.
	LinkedServiceName *LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Activity name.
	Name string `pulumi:"name"`
	// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
	OnInactiveMarkAs *string `pulumi:"onInactiveMarkAs"`
	// Activity policy.
	Policy *ActivityPolicyResponse `pulumi:"policy"`
	// Activity state. This is an optional property and if not provided, the state will be Active by default.
	State *string `pulumi:"state"`
	// GetMetadata activity store settings.
	StoreSettings interface{} `pulumi:"storeSettings"`
	// Type of activity.
	// Expected value is 'GetMetadata'.
	Type string `pulumi:"type"`
	// Activity user properties.
	UserProperties []UserPropertyResponse `pulumi:"userProperties"`
}

// Activity to get metadata of dataset
type GetMetadataActivityResponseOutput struct{ *pulumi.OutputState }

func (GetMetadataActivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetadataActivityResponse)(nil)).Elem()
}

func (o GetMetadataActivityResponseOutput) ToGetMetadataActivityResponseOutput() GetMetadataActivityResponseOutput {
	return o
}

func (o GetMetadataActivityResponseOutput) ToGetMetadataActivityResponseOutputWithContext(ctx context.Context) GetMetadataActivityResponseOutput {
	return o
}

// GetMetadata activity dataset reference.
func (o GetMetadataActivityResponseOutput) Dataset() DatasetReferenceResponseOutput {
	return o.ApplyT(func(v GetMetadataActivityResponse) DatasetReferenceResponse { return v.Dataset }).(DatasetReferenceResponseOutput)
}

// Activity depends on condition.
func (o GetMetadataActivityResponseOutput) DependsOn() ActivityDependencyResponseArrayOutput {
	return o.ApplyT(func(v GetMetadataActivityResponse) []ActivityDependencyResponse { return v.DependsOn }).(ActivityDependencyResponseArrayOutput)
}

// Activity description.
func (o GetMetadataActivityResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMetadataActivityResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Fields of metadata to get from dataset.
func (o GetMetadataActivityResponseOutput) FieldList() pulumi.ArrayOutput {
	return o.ApplyT(func(v GetMetadataActivityResponse) []interface{} { return v.FieldList }).(pulumi.ArrayOutput)
}

// GetMetadata activity format settings.
func (o GetMetadataActivityResponseOutput) FormatSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v GetMetadataActivityResponse) interface{} { return v.FormatSettings }).(pulumi.AnyOutput)
}

// Linked service reference.
func (o GetMetadataActivityResponseOutput) LinkedServiceName() LinkedServiceReferenceResponsePtrOutput {
	return o.ApplyT(func(v GetMetadataActivityResponse) *LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponsePtrOutput)
}

// Activity name.
func (o GetMetadataActivityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetadataActivityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Status result of the activity when the state is set to Inactive. This is an optional property and if not provided when the activity is inactive, the status will be Succeeded by default.
func (o GetMetadataActivityResponseOutput) OnInactiveMarkAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMetadataActivityResponse) *string { return v.OnInactiveMarkAs }).(pulumi.StringPtrOutput)
}

// Activity policy.
func (o GetMetadataActivityResponseOutput) Policy() ActivityPolicyResponsePtrOutput {
	return o.ApplyT(func(v GetMetadataActivityResponse) *ActivityPolicyResponse { return v.Policy }).(ActivityPolicyResponsePtrOutput)
}

// Activity state. This is an optional property and if not provided, the state will be Active by default.
func (o GetMetadataActivityResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMetadataActivityResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// GetMetadata activity store settings.
func (o GetMetadataActivityResponseOutput) StoreSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v GetMetadataActivityResponse) interface{} { return v.StoreSettings }).(pulumi.AnyOutput)
}

// Type of activity.
// Expected value is 'GetMetadata'.
func (o GetMetadataActivityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetadataActivityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Activity user properties.
func (o GetMetadataActivityResponseOutput) UserProperties() UserPropertyResponseArrayOutput {
	return o.ApplyT(func(v GetMetadataActivityResponse) []UserPropertyResponse { return v.UserProperties }).(UserPropertyResponseArrayOutput)
}

// Client secret information for factory's bring your own app repository configuration.
type GitHubClientSecret struct {
	// Bring your own app client secret AKV URL.
	ByoaSecretAkvUrl *string `pulumi:"byoaSecretAkvUrl"`
	// Bring your own app client secret name in AKV.
	ByoaSecretName *string `pulumi:"byoaSecretName"`
}

// GitHubClientSecretInput is an input type that accepts GitHubClientSecretArgs and GitHubClientSecretOutput values.
// You can construct a concrete instance of `GitHubClientSecretInput` via:
//
//	GitHubClientSecretArgs{...}
type GitHubClientSecretInput interface {
	pulumi.Input

	ToGitHubClientSecretOutput() GitHubClientSecretOutput
	ToGitHubClientSecretOutputWithContext(context.Context) GitHubClientSecretOutput
}

// Client secret information for factory's bring your own app repository configuration.
type GitHubClientSecretArgs struct {
	// Bring your own app client secret AKV URL.
	ByoaSecretAkvUrl pulumi.StringPtrInput `pulumi:"byoaSecretAkvUrl"`
	// Bring your own app client secret name in AKV.
	ByoaSecretName pulumi.StringPtrInput `pulumi:"byoaSecretName"`
}

func (GitHubClientSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitHubClientSecret)(nil)).Elem()
}

func (i GitHubClientSecretArgs) ToGitHubClientSecretOutput() GitHubClientSecretOutput {
	return i.ToGitHubClientSecretOutputWithContext(context.Background())
}

func (i GitHubClientSecretArgs) ToGitHubClientSecretOutputWithContext(ctx context.Context) GitHubClientSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubClientSecretOutput)
}

func (i GitHubClientSecretArgs) ToGitHubClientSecretPtrOutput() GitHubClientSecretPtrOutput {
	return i.ToGitHubClientSecretPtrOutputWithContext(context.Background())
}

func (i GitHubClientSecretArgs) ToGitHubClientSecretPtrOutputWithContext(ctx context.Context) GitHubClientSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubClientSecretOutput).ToGitHubClientSecretPtrOutputWithContext(ctx)
}

// GitHubClientSecretPtrInput is an input type that accepts GitHubClientSecretArgs, GitHubClientSecretPtr and GitHubClientSecretPtrOutput values.
// You can construct a concrete instance of `GitHubClientSecretPtrInput` via:
//
//	        GitHubClientSecretArgs{...}
//
//	or:
//
//	        nil
type GitHubClientSecretPtrInput interface {
	pulumi.Input

	ToGitHubClientSecretPtrOutput() GitHubClientSecretPtrOutput
	ToGitHubClientSecretPtrOutputWithContext(context.Context) GitHubClientSecretPtrOutput
}

type gitHubClientSecretPtrType GitHubClientSecretArgs

func GitHubClientSecretPtr(v *GitHubClientSecretArgs) GitHubClientSecretPtrInput {
	return (*gitHubClientSecretPtrType)(v)
}

func (*gitHubClientSecretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHubClientSecret)(nil)).Elem()
}

func (i *gitHubClientSecretPtrType) ToGitHubClientSecretPtrOutput() GitHubClientSecretPtrOutput {
	return i.ToGitHubClientSecretPtrOutputWithContext(context.Background())
}

func (i *gitHubClientSecretPtrType) ToGitHubClientSecretPtrOutputWithContext(ctx context.Context) GitHubClientSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubClientSecretPtrOutput)
}

// Client secret information for factory's bring your own app repository configuration.
type GitHubClientSecretOutput struct{ *pulumi.OutputState }

func (GitHubClientSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitHubClientSecret)(nil)).Elem()
}

func (o GitHubClientSecretOutput) ToGitHubClientSecretOutput() GitHubClientSecretOutput {
	return o
}

func (o GitHubClientSecretOutput) ToGitHubClientSecretOutputWithContext(ctx context.Context) GitHubClientSecretOutput {
	return o
}

func (o GitHubClientSecretOutput) ToGitHubClientSecretPtrOutput() GitHubClientSecretPtrOutput {
	return o.ToGitHubClientSecretPtrOutputWithContext(context.Background())
}

func (o GitHubClientSecretOutput) ToGitHubClientSecretPtrOutputWithContext(ctx context.Context) GitHubClientSecretPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitHubClientSecret) *GitHubClientSecret {
		return &v
	}).(GitHubClientSecretPtrOutput)
}

// Bring your own app client secret AKV URL.
func (o GitHubClientSecretOutput) ByoaSecretAkvUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubClientSecret) *string { return v.ByoaSecretAkvUrl }).(pulumi.StringPtrOutput)
}

// Bring your own app client secret name in AKV.
func (o GitHubClientSecretOutput) ByoaSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubClientSecret) *string { return v.ByoaSecretName }).(pulumi.StringPtrOutput)
}

type GitHubClientSecretPtrOutput struct{ *pulumi.OutputState }

func (GitHubClientSecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHubClientSecret)(nil)).Elem()
}

func (o GitHubClientSecretPtrOutput) ToGitHubClientSecretPtrOutput() GitHubClientSecretPtrOutput {
	return o
}

func (o GitHubClientSecretPtrOutput) ToGitHubClientSecretPtrOutputWithContext(ctx context.Context) GitHubClientSecretPtrOutput {
	return o
}

func (o GitHubClientSecretPtrOutput) Elem() GitHubClientSecretOutput {
	return o.ApplyT(func(v *GitHubClientSecret) GitHubClientSecret {
		if v != nil {
			return *v
		}
		var ret GitHubClientSecret
		return ret
	}).(GitHubClientSecretOutput)
}

// Bring your own app client secret AKV URL.
func (o GitHubClientSecretPtrOutput) ByoaSecretAkvUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubClientSecret) *string {
		if v == nil {
			return nil
		}
		return v.ByoaSecretAkvUrl
	}).(pulumi.StringPtrOutput)
}

// Bring your own app client secret name in AKV.
func (o GitHubClientSecretPtrOutput) ByoaSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubClientSecret) *string {
		if v == nil {
			return nil
		}
		return v.ByoaSecretName
	}).(pulumi.StringPtrOutput)
}

// Client secret information for factory's bring your own app repository configuration.
type GitHubClientSecretResponse struct {
	// Bring your own app client secret AKV URL.
	ByoaSecretAkvUrl *string `pulumi:"byoaSecretAkvUrl"`
	// Bring your own app client secret name in AKV.
	ByoaSecretName *string `pulumi:"byoaSecretName"`
}

// Client secret information for factory's bring your own app repository configuration.
type GitHubClientSecretResponseOutput struct{ *pulumi.OutputState }

func (GitHubClientSecretResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitHubClientSecretResponse)(nil)).Elem()
}

func (o GitHubClientSecretResponseOutput) ToGitHubClientSecretResponseOutput() GitHubClientSecretResponseOutput {
	return o
}

func (o GitHubClientSecretResponseOutput) ToGitHubClientSecretResponseOutputWithContext(ctx context.Context) GitHubClientSecretResponseOutput {
	return o
}

// Bring your own app client secret AKV URL.
func (o GitHubClientSecretResponseOutput) ByoaSecretAkvUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubClientSecretResponse) *string { return v.ByoaSecretAkvUrl }).(pulumi.StringPtrOutput)
}

// Bring your own app client secret name in AKV.
func (o GitHubClientSecretResponseOutput) ByoaSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubClientSecretResponse) *string { return v.ByoaSecretName }).(pulumi.StringPtrOutput)
}

type GitHubClientSecretResponsePtrOutput struct{ *pulumi.OutputState }

func (GitHubClientSecretResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHubClientSecretResponse)(nil)).Elem()
}

func (o GitHubClientSecretResponsePtrOutput) ToGitHubClientSecretResponsePtrOutput() GitHubClientSecretResponsePtrOutput {
	return o
}

func (o GitHubClientSecretResponsePtrOutput) ToGitHubClientSecretResponsePtrOutputWithContext(ctx context.Context) GitHubClientSecretResponsePtrOutput {
	return o
}

func (o GitHubClientSecretResponsePtrOutput) Elem() GitHubClientSecretResponseOutput {
	return o.ApplyT(func(v *GitHubClientSecretResponse) GitHubClientSecretResponse {
		if v != nil {
			return *v
		}
		var ret GitHubClientSecretResponse
		return ret
	}).(GitHubClientSecretResponseOutput)
}

// Bring your own app client secret AKV URL.
func (o GitHubClientSecretResponsePtrOutput) ByoaSecretAkvUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubClientSecretResponse) *string {
		if v == nil {
			return nil
		}
		return v.ByoaSecretAkvUrl
	}).(pulumi.StringPtrOutput)
}

// Bring your own app client secret name in AKV.
func (o GitHubClientSecretResponsePtrOutput) ByoaSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubClientSecretResponse) *string {
		if v == nil {
			return nil
		}
		return v.ByoaSecretName
	}).(pulumi.StringPtrOutput)
}

// Definition of a single parameter for an entity.
type GlobalParameterSpecification struct {
	// Global Parameter type.
	Type string `pulumi:"type"`
	// Value of parameter.
	Value interface{} `pulumi:"value"`
}

// GlobalParameterSpecificationInput is an input type that accepts GlobalParameterSpecificationArgs and GlobalParameterSpecificationOutput values.
// You can construct a concrete instance of `GlobalParameterSpecificationInput` via:
//
//	GlobalParameterSpecificationArgs{...}
type GlobalParameterSpecificationInput interface {
	pulumi.Input

	ToGlobalParameterSpecificationOutput() GlobalParameterSpecificationOutput
	ToGlobalParameterSpecificationOutputWithContext(context.Context) GlobalParameterSpecificationOutput
}

// Definition of a single parameter for an entity.
type GlobalParameterSpecificationArgs struct {
	// Global Parameter type.
	Type pulumi.StringInput `pulumi:"type"`
	// Value of parameter.
	Value pulumi.Input `pulumi:"value"`
}

func (GlobalParameterSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalParameterSpecification)(nil)).Elem()
}

func (i GlobalParameterSpecificationArgs) ToGlobalParameterSpecificationOutput() GlobalParameterSpecificationOutput {
	return i.ToGlobalParameterSpecificationOutputWithContext(context.Background())
}

func (i GlobalParameterSpecificationArgs) ToGlobalParameterSpecificationOutputWithContext(ctx context.Context) GlobalParameterSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalParameterSpecificationOutput)
}

// GlobalParameterSpecificationMapInput is an input type that accepts GlobalParameterSpecificationMap and GlobalParameterSpecificationMapOutput values.
// You can construct a concrete instance of `GlobalParameterSpecificationMapInput` via:
//
//	GlobalParameterSpecificationMap{ "key": GlobalParameterSpecificationArgs{...} }
type GlobalParameterSpecificationMapInput interface {
	pulumi.Input

	ToGlobalParameterSpecificationMapOutput() GlobalParameterSpecificationMapOutput
	ToGlobalParameterSpecificationMapOutputWithContext(context.Context) GlobalParameterSpecificationMapOutput
}

type GlobalParameterSpecificationMap map[string]GlobalParameterSpecificationInput

func (GlobalParameterSpecificationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GlobalParameterSpecification)(nil)).Elem()
}

func (i GlobalParameterSpecificationMap) ToGlobalParameterSpecificationMapOutput() GlobalParameterSpecificationMapOutput {
	return i.ToGlobalParameterSpecificationMapOutputWithContext(context.Background())
}

func (i GlobalParameterSpecificationMap) ToGlobalParameterSpecificationMapOutputWithContext(ctx context.Context) GlobalParameterSpecificationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalParameterSpecificationMapOutput)
}

// Definition of a single parameter for an entity.
type GlobalParameterSpecificationOutput struct{ *pulumi.OutputState }

func (GlobalParameterSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalParameterSpecification)(nil)).Elem()
}

func (o GlobalParameterSpecificationOutput) ToGlobalParameterSpecificationOutput() GlobalParameterSpecificationOutput {
	return o
}

func (o GlobalParameterSpecificationOutput) ToGlobalParameterSpecificationOutputWithContext(ctx context.Context) GlobalParameterSpecificationOutput {
	return o
}

// Global Parameter type.
func (o GlobalParameterSpecificationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalParameterSpecification) string { return v.Type }).(pulumi.StringOutput)
}

// Value of parameter.
func (o GlobalParameterSpecificationOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v GlobalParameterSpecification) interface{} { return v.Value }).(pulumi.AnyOutput)
}

type GlobalParameterSpecificationMapOutput struct{ *pulumi.OutputState }

func (GlobalParameterSpecificationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GlobalParameterSpecification)(nil)).Elem()
}

func (o GlobalParameterSpecificationMapOutput) ToGlobalParameterSpecificationMapOutput() GlobalParameterSpecificationMapOutput {
	return o
}

func (o GlobalParameterSpecificationMapOutput) ToGlobalParameterSpecificationMapOutputWithContext(ctx context.Context) GlobalParameterSpecificationMapOutput {
	return o
}

func (o GlobalParameterSpecificationMapOutput) MapIndex(k pulumi.StringInput) GlobalParameterSpecificationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GlobalParameterSpecification {
		return vs[0].(map[string]GlobalParameterSpecification)[vs[1].(string)]
	}).(GlobalParameterSpecificationOutput)
}

// Definition of a single parameter for an entity.
type GlobalParameterSpecificationResponse struct {
	// Global Parameter type.
	Type string `pulumi:"type"`
	// Value of parameter.
	Value interface{} `pulumi:"value"`
}

// Definition of a single parameter for an entity.
type GlobalParameterSpecificationResponseOutput struct{ *pulumi.OutputState }

func (GlobalParameterSpecificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalParameterSpecificationResponse)(nil)).Elem()
}

func (o GlobalParameterSpecificationResponseOutput) ToGlobalParameterSpecificationResponseOutput() GlobalParameterSpecificationResponseOutput {
	return o
}

func (o GlobalParameterSpecificationResponseOutput) ToGlobalParameterSpecificationResponseOutputWithContext(ctx context.Context) GlobalParameterSpecificationResponseOutput {
	return o
}

// Global Parameter type.
func (o GlobalParameterSpecificationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalParameterSpecificationResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Value of parameter.
func (o GlobalParameterSpecificationResponseOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v GlobalParameterSpecificationResponse) interface{} { return v.Value }).(pulumi.AnyOutput)
}

type GlobalParameterSpecificationResponseMapOutput struct{ *pulumi.OutputState }

func (GlobalParameterSpecificationResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GlobalParameterSpecificationResponse)(nil)).Elem()
}

func (o GlobalParameterSpecificationResponseMapOutput) ToGlobalParameterSpecificationResponseMapOutput() GlobalParameterSpecificationResponseMapOutput {
	return o
}

func (o GlobalParameterSpecificationResponseMapOutput) ToGlobalParameterSpecificationResponseMapOutputWithContext(ctx context.Context) GlobalParameterSpecificationResponseMapOutput {
	return o
}

func (o GlobalParameterSpecificationResponseMapOutput) MapIndex(k pulumi.StringInput) GlobalParameterSpecificationResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GlobalParameterSpecificationResponse {
		return vs[0].(map[string]GlobalParameterSpecificationResponse)[vs[1].(string)]
	}).(GlobalParameterSpecificationResponseOutput)
}

// Google AdWords service linked service.
type GoogleAdWordsLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The Client customer ID of the AdWords account that you want to fetch report data for. Type: string (or Expression with resultType string).
	ClientCustomerID interface{} `pulumi:"clientCustomerID"`
	// The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The client secret of the google application used to acquire the refresh token.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// (Deprecated) Properties used to connect to GoogleAds. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The developer token associated with the manager account that you use to grant access to the AdWords API.
	DeveloperToken interface{} `pulumi:"developerToken"`
	// The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR. Type: string (or Expression with resultType string).
	Email interface{} `pulumi:"email"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The Google Ads API major version such as v14. The supported major versions could be found on https://developers.google.com/google-ads/api/docs/release-notes. Type: string (or Expression with resultType string).
	GoogleAdsApiVersion interface{} `pulumi:"googleAdsApiVersion"`
	// (Deprecated) The full path to the .p12 key file that is used to authenticate the service account email address and can only be used on self-hosted IR. Type: string (or Expression with resultType string).
	KeyFilePath interface{} `pulumi:"keyFilePath"`
	// The customer ID of the Google Ads Manager account through which you want to fetch report data of specific Customer. Type: string (or Expression with resultType string).
	LoginCustomerID interface{} `pulumi:"loginCustomerID"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The private key that is used to authenticate the service account email address and can only be used on self-hosted IR.
	PrivateKey interface{} `pulumi:"privateKey"`
	// The refresh token obtained from Google for authorizing access to AdWords for UserAuthentication.
	RefreshToken interface{} `pulumi:"refreshToken"`
	// Specifies whether to use the legacy data type mappings, which maps float, int32 and int64 from Google to string. Do not set this to true unless you want to keep backward compatibility with legacy driver's data type mappings. Type: boolean (or Expression with resultType boolean).
	SupportLegacyDataTypes interface{} `pulumi:"supportLegacyDataTypes"`
	// (Deprecated) The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR. Type: string (or Expression with resultType string).
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'GoogleAdWords'.
	Type string `pulumi:"type"`
	// (Deprecated) Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false. Type: boolean (or Expression with resultType boolean).
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
}

// GoogleAdWordsLinkedServiceInput is an input type that accepts GoogleAdWordsLinkedServiceArgs and GoogleAdWordsLinkedServiceOutput values.
// You can construct a concrete instance of `GoogleAdWordsLinkedServiceInput` via:
//
//	GoogleAdWordsLinkedServiceArgs{...}
type GoogleAdWordsLinkedServiceInput interface {
	pulumi.Input

	ToGoogleAdWordsLinkedServiceOutput() GoogleAdWordsLinkedServiceOutput
	ToGoogleAdWordsLinkedServiceOutputWithContext(context.Context) GoogleAdWordsLinkedServiceOutput
}

// Google AdWords service linked service.
type GoogleAdWordsLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR.
	AuthenticationType pulumi.StringPtrInput `pulumi:"authenticationType"`
	// The Client customer ID of the AdWords account that you want to fetch report data for. Type: string (or Expression with resultType string).
	ClientCustomerID pulumi.Input `pulumi:"clientCustomerID"`
	// The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType string).
	ClientId pulumi.Input `pulumi:"clientId"`
	// The client secret of the google application used to acquire the refresh token.
	ClientSecret pulumi.Input `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// (Deprecated) Properties used to connect to GoogleAds. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties pulumi.Input `pulumi:"connectionProperties"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The developer token associated with the manager account that you use to grant access to the AdWords API.
	DeveloperToken pulumi.Input `pulumi:"developerToken"`
	// The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR. Type: string (or Expression with resultType string).
	Email pulumi.Input `pulumi:"email"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// The Google Ads API major version such as v14. The supported major versions could be found on https://developers.google.com/google-ads/api/docs/release-notes. Type: string (or Expression with resultType string).
	GoogleAdsApiVersion pulumi.Input `pulumi:"googleAdsApiVersion"`
	// (Deprecated) The full path to the .p12 key file that is used to authenticate the service account email address and can only be used on self-hosted IR. Type: string (or Expression with resultType string).
	KeyFilePath pulumi.Input `pulumi:"keyFilePath"`
	// The customer ID of the Google Ads Manager account through which you want to fetch report data of specific Customer. Type: string (or Expression with resultType string).
	LoginCustomerID pulumi.Input `pulumi:"loginCustomerID"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The private key that is used to authenticate the service account email address and can only be used on self-hosted IR.
	PrivateKey pulumi.Input `pulumi:"privateKey"`
	// The refresh token obtained from Google for authorizing access to AdWords for UserAuthentication.
	RefreshToken pulumi.Input `pulumi:"refreshToken"`
	// Specifies whether to use the legacy data type mappings, which maps float, int32 and int64 from Google to string. Do not set this to true unless you want to keep backward compatibility with legacy driver's data type mappings. Type: boolean (or Expression with resultType boolean).
	SupportLegacyDataTypes pulumi.Input `pulumi:"supportLegacyDataTypes"`
	// (Deprecated) The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR. Type: string (or Expression with resultType string).
	TrustedCertPath pulumi.Input `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'GoogleAdWords'.
	Type pulumi.StringInput `pulumi:"type"`
	// (Deprecated) Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false. Type: boolean (or Expression with resultType boolean).
	UseSystemTrustStore pulumi.Input `pulumi:"useSystemTrustStore"`
}

func (GoogleAdWordsLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleAdWordsLinkedService)(nil)).Elem()
}

func (i GoogleAdWordsLinkedServiceArgs) ToGoogleAdWordsLinkedServiceOutput() GoogleAdWordsLinkedServiceOutput {
	return i.ToGoogleAdWordsLinkedServiceOutputWithContext(context.Background())
}

func (i GoogleAdWordsLinkedServiceArgs) ToGoogleAdWordsLinkedServiceOutputWithContext(ctx context.Context) GoogleAdWordsLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleAdWordsLinkedServiceOutput)
}

// Google AdWords service linked service.
type GoogleAdWordsLinkedServiceOutput struct{ *pulumi.OutputState }

func (GoogleAdWordsLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleAdWordsLinkedService)(nil)).Elem()
}

func (o GoogleAdWordsLinkedServiceOutput) ToGoogleAdWordsLinkedServiceOutput() GoogleAdWordsLinkedServiceOutput {
	return o
}

func (o GoogleAdWordsLinkedServiceOutput) ToGoogleAdWordsLinkedServiceOutputWithContext(ctx context.Context) GoogleAdWordsLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o GoogleAdWordsLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR.
func (o GoogleAdWordsLinkedServiceOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedService) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// The Client customer ID of the AdWords account that you want to fetch report data for. Type: string (or Expression with resultType string).
func (o GoogleAdWordsLinkedServiceOutput) ClientCustomerID() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedService) interface{} { return v.ClientCustomerID }).(pulumi.AnyOutput)
}

// The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType string).
func (o GoogleAdWordsLinkedServiceOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedService) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret of the google application used to acquire the refresh token.
func (o GoogleAdWordsLinkedServiceOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedService) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o GoogleAdWordsLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// (Deprecated) Properties used to connect to GoogleAds. It is mutually exclusive with any other properties in the linked service. Type: object.
func (o GoogleAdWordsLinkedServiceOutput) ConnectionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedService) interface{} { return v.ConnectionProperties }).(pulumi.AnyOutput)
}

// Linked service description.
func (o GoogleAdWordsLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The developer token associated with the manager account that you use to grant access to the AdWords API.
func (o GoogleAdWordsLinkedServiceOutput) DeveloperToken() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedService) interface{} { return v.DeveloperToken }).(pulumi.AnyOutput)
}

// The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR. Type: string (or Expression with resultType string).
func (o GoogleAdWordsLinkedServiceOutput) Email() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedService) interface{} { return v.Email }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o GoogleAdWordsLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The Google Ads API major version such as v14. The supported major versions could be found on https://developers.google.com/google-ads/api/docs/release-notes. Type: string (or Expression with resultType string).
func (o GoogleAdWordsLinkedServiceOutput) GoogleAdsApiVersion() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedService) interface{} { return v.GoogleAdsApiVersion }).(pulumi.AnyOutput)
}

// (Deprecated) The full path to the .p12 key file that is used to authenticate the service account email address and can only be used on self-hosted IR. Type: string (or Expression with resultType string).
func (o GoogleAdWordsLinkedServiceOutput) KeyFilePath() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedService) interface{} { return v.KeyFilePath }).(pulumi.AnyOutput)
}

// The customer ID of the Google Ads Manager account through which you want to fetch report data of specific Customer. Type: string (or Expression with resultType string).
func (o GoogleAdWordsLinkedServiceOutput) LoginCustomerID() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedService) interface{} { return v.LoginCustomerID }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o GoogleAdWordsLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The private key that is used to authenticate the service account email address and can only be used on self-hosted IR.
func (o GoogleAdWordsLinkedServiceOutput) PrivateKey() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedService) interface{} { return v.PrivateKey }).(pulumi.AnyOutput)
}

// The refresh token obtained from Google for authorizing access to AdWords for UserAuthentication.
func (o GoogleAdWordsLinkedServiceOutput) RefreshToken() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedService) interface{} { return v.RefreshToken }).(pulumi.AnyOutput)
}

// Specifies whether to use the legacy data type mappings, which maps float, int32 and int64 from Google to string. Do not set this to true unless you want to keep backward compatibility with legacy driver's data type mappings. Type: boolean (or Expression with resultType boolean).
func (o GoogleAdWordsLinkedServiceOutput) SupportLegacyDataTypes() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedService) interface{} { return v.SupportLegacyDataTypes }).(pulumi.AnyOutput)
}

// (Deprecated) The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR. Type: string (or Expression with resultType string).
func (o GoogleAdWordsLinkedServiceOutput) TrustedCertPath() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedService) interface{} { return v.TrustedCertPath }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'GoogleAdWords'.
func (o GoogleAdWordsLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// (Deprecated) Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false. Type: boolean (or Expression with resultType boolean).
func (o GoogleAdWordsLinkedServiceOutput) UseSystemTrustStore() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedService) interface{} { return v.UseSystemTrustStore }).(pulumi.AnyOutput)
}

// Google AdWords service linked service.
type GoogleAdWordsLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The Client customer ID of the AdWords account that you want to fetch report data for. Type: string (or Expression with resultType string).
	ClientCustomerID interface{} `pulumi:"clientCustomerID"`
	// The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The client secret of the google application used to acquire the refresh token.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// (Deprecated) Properties used to connect to GoogleAds. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties interface{} `pulumi:"connectionProperties"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The developer token associated with the manager account that you use to grant access to the AdWords API.
	DeveloperToken interface{} `pulumi:"developerToken"`
	// The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR. Type: string (or Expression with resultType string).
	Email interface{} `pulumi:"email"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The Google Ads API major version such as v14. The supported major versions could be found on https://developers.google.com/google-ads/api/docs/release-notes. Type: string (or Expression with resultType string).
	GoogleAdsApiVersion interface{} `pulumi:"googleAdsApiVersion"`
	// (Deprecated) The full path to the .p12 key file that is used to authenticate the service account email address and can only be used on self-hosted IR. Type: string (or Expression with resultType string).
	KeyFilePath interface{} `pulumi:"keyFilePath"`
	// The customer ID of the Google Ads Manager account through which you want to fetch report data of specific Customer. Type: string (or Expression with resultType string).
	LoginCustomerID interface{} `pulumi:"loginCustomerID"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The private key that is used to authenticate the service account email address and can only be used on self-hosted IR.
	PrivateKey interface{} `pulumi:"privateKey"`
	// The refresh token obtained from Google for authorizing access to AdWords for UserAuthentication.
	RefreshToken interface{} `pulumi:"refreshToken"`
	// Specifies whether to use the legacy data type mappings, which maps float, int32 and int64 from Google to string. Do not set this to true unless you want to keep backward compatibility with legacy driver's data type mappings. Type: boolean (or Expression with resultType boolean).
	SupportLegacyDataTypes interface{} `pulumi:"supportLegacyDataTypes"`
	// (Deprecated) The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR. Type: string (or Expression with resultType string).
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'GoogleAdWords'.
	Type string `pulumi:"type"`
	// (Deprecated) Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false. Type: boolean (or Expression with resultType boolean).
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
}

// Google AdWords service linked service.
type GoogleAdWordsLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (GoogleAdWordsLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleAdWordsLinkedServiceResponse)(nil)).Elem()
}

func (o GoogleAdWordsLinkedServiceResponseOutput) ToGoogleAdWordsLinkedServiceResponseOutput() GoogleAdWordsLinkedServiceResponseOutput {
	return o
}

func (o GoogleAdWordsLinkedServiceResponseOutput) ToGoogleAdWordsLinkedServiceResponseOutputWithContext(ctx context.Context) GoogleAdWordsLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o GoogleAdWordsLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR.
func (o GoogleAdWordsLinkedServiceResponseOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedServiceResponse) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// The Client customer ID of the AdWords account that you want to fetch report data for. Type: string (or Expression with resultType string).
func (o GoogleAdWordsLinkedServiceResponseOutput) ClientCustomerID() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedServiceResponse) interface{} { return v.ClientCustomerID }).(pulumi.AnyOutput)
}

// The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType string).
func (o GoogleAdWordsLinkedServiceResponseOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedServiceResponse) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret of the google application used to acquire the refresh token.
func (o GoogleAdWordsLinkedServiceResponseOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedServiceResponse) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o GoogleAdWordsLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// (Deprecated) Properties used to connect to GoogleAds. It is mutually exclusive with any other properties in the linked service. Type: object.
func (o GoogleAdWordsLinkedServiceResponseOutput) ConnectionProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedServiceResponse) interface{} { return v.ConnectionProperties }).(pulumi.AnyOutput)
}

// Linked service description.
func (o GoogleAdWordsLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The developer token associated with the manager account that you use to grant access to the AdWords API.
func (o GoogleAdWordsLinkedServiceResponseOutput) DeveloperToken() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedServiceResponse) interface{} { return v.DeveloperToken }).(pulumi.AnyOutput)
}

// The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR. Type: string (or Expression with resultType string).
func (o GoogleAdWordsLinkedServiceResponseOutput) Email() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedServiceResponse) interface{} { return v.Email }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o GoogleAdWordsLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The Google Ads API major version such as v14. The supported major versions could be found on https://developers.google.com/google-ads/api/docs/release-notes. Type: string (or Expression with resultType string).
func (o GoogleAdWordsLinkedServiceResponseOutput) GoogleAdsApiVersion() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedServiceResponse) interface{} { return v.GoogleAdsApiVersion }).(pulumi.AnyOutput)
}

// (Deprecated) The full path to the .p12 key file that is used to authenticate the service account email address and can only be used on self-hosted IR. Type: string (or Expression with resultType string).
func (o GoogleAdWordsLinkedServiceResponseOutput) KeyFilePath() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedServiceResponse) interface{} { return v.KeyFilePath }).(pulumi.AnyOutput)
}

// The customer ID of the Google Ads Manager account through which you want to fetch report data of specific Customer. Type: string (or Expression with resultType string).
func (o GoogleAdWordsLinkedServiceResponseOutput) LoginCustomerID() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedServiceResponse) interface{} { return v.LoginCustomerID }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o GoogleAdWordsLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The private key that is used to authenticate the service account email address and can only be used on self-hosted IR.
func (o GoogleAdWordsLinkedServiceResponseOutput) PrivateKey() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedServiceResponse) interface{} { return v.PrivateKey }).(pulumi.AnyOutput)
}

// The refresh token obtained from Google for authorizing access to AdWords for UserAuthentication.
func (o GoogleAdWordsLinkedServiceResponseOutput) RefreshToken() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedServiceResponse) interface{} { return v.RefreshToken }).(pulumi.AnyOutput)
}

// Specifies whether to use the legacy data type mappings, which maps float, int32 and int64 from Google to string. Do not set this to true unless you want to keep backward compatibility with legacy driver's data type mappings. Type: boolean (or Expression with resultType boolean).
func (o GoogleAdWordsLinkedServiceResponseOutput) SupportLegacyDataTypes() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedServiceResponse) interface{} { return v.SupportLegacyDataTypes }).(pulumi.AnyOutput)
}

// (Deprecated) The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR. Type: string (or Expression with resultType string).
func (o GoogleAdWordsLinkedServiceResponseOutput) TrustedCertPath() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedServiceResponse) interface{} { return v.TrustedCertPath }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'GoogleAdWords'.
func (o GoogleAdWordsLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// (Deprecated) Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false. Type: boolean (or Expression with resultType boolean).
func (o GoogleAdWordsLinkedServiceResponseOutput) UseSystemTrustStore() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsLinkedServiceResponse) interface{} { return v.UseSystemTrustStore }).(pulumi.AnyOutput)
}

// Google AdWords service dataset.
type GoogleAdWordsObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'GoogleAdWordsObject'.
	Type string `pulumi:"type"`
}

// GoogleAdWordsObjectDatasetInput is an input type that accepts GoogleAdWordsObjectDatasetArgs and GoogleAdWordsObjectDatasetOutput values.
// You can construct a concrete instance of `GoogleAdWordsObjectDatasetInput` via:
//
//	GoogleAdWordsObjectDatasetArgs{...}
type GoogleAdWordsObjectDatasetInput interface {
	pulumi.Input

	ToGoogleAdWordsObjectDatasetOutput() GoogleAdWordsObjectDatasetOutput
	ToGoogleAdWordsObjectDatasetOutputWithContext(context.Context) GoogleAdWordsObjectDatasetOutput
}

// Google AdWords service dataset.
type GoogleAdWordsObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'GoogleAdWordsObject'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GoogleAdWordsObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleAdWordsObjectDataset)(nil)).Elem()
}

func (i GoogleAdWordsObjectDatasetArgs) ToGoogleAdWordsObjectDatasetOutput() GoogleAdWordsObjectDatasetOutput {
	return i.ToGoogleAdWordsObjectDatasetOutputWithContext(context.Background())
}

func (i GoogleAdWordsObjectDatasetArgs) ToGoogleAdWordsObjectDatasetOutputWithContext(ctx context.Context) GoogleAdWordsObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleAdWordsObjectDatasetOutput)
}

// Google AdWords service dataset.
type GoogleAdWordsObjectDatasetOutput struct{ *pulumi.OutputState }

func (GoogleAdWordsObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleAdWordsObjectDataset)(nil)).Elem()
}

func (o GoogleAdWordsObjectDatasetOutput) ToGoogleAdWordsObjectDatasetOutput() GoogleAdWordsObjectDatasetOutput {
	return o
}

func (o GoogleAdWordsObjectDatasetOutput) ToGoogleAdWordsObjectDatasetOutputWithContext(ctx context.Context) GoogleAdWordsObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o GoogleAdWordsObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v GoogleAdWordsObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o GoogleAdWordsObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleAdWordsObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o GoogleAdWordsObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v GoogleAdWordsObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o GoogleAdWordsObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v GoogleAdWordsObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o GoogleAdWordsObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v GoogleAdWordsObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o GoogleAdWordsObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o GoogleAdWordsObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o GoogleAdWordsObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'GoogleAdWordsObject'.
func (o GoogleAdWordsObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleAdWordsObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Google AdWords service dataset.
type GoogleAdWordsObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name. Type: string (or Expression with resultType string).
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'GoogleAdWordsObject'.
	Type string `pulumi:"type"`
}

// Google AdWords service dataset.
type GoogleAdWordsObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (GoogleAdWordsObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleAdWordsObjectDatasetResponse)(nil)).Elem()
}

func (o GoogleAdWordsObjectDatasetResponseOutput) ToGoogleAdWordsObjectDatasetResponseOutput() GoogleAdWordsObjectDatasetResponseOutput {
	return o
}

func (o GoogleAdWordsObjectDatasetResponseOutput) ToGoogleAdWordsObjectDatasetResponseOutputWithContext(ctx context.Context) GoogleAdWordsObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o GoogleAdWordsObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v GoogleAdWordsObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o GoogleAdWordsObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleAdWordsObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o GoogleAdWordsObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v GoogleAdWordsObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o GoogleAdWordsObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v GoogleAdWordsObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o GoogleAdWordsObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v GoogleAdWordsObjectDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o GoogleAdWordsObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o GoogleAdWordsObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name. Type: string (or Expression with resultType string).
func (o GoogleAdWordsObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'GoogleAdWordsObject'.
func (o GoogleAdWordsObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleAdWordsObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Google AdWords service source.
type GoogleAdWordsSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'GoogleAdWordsSource'.
	Type string `pulumi:"type"`
}

// GoogleAdWordsSourceInput is an input type that accepts GoogleAdWordsSourceArgs and GoogleAdWordsSourceOutput values.
// You can construct a concrete instance of `GoogleAdWordsSourceInput` via:
//
//	GoogleAdWordsSourceArgs{...}
type GoogleAdWordsSourceInput interface {
	pulumi.Input

	ToGoogleAdWordsSourceOutput() GoogleAdWordsSourceOutput
	ToGoogleAdWordsSourceOutputWithContext(context.Context) GoogleAdWordsSourceOutput
}

// A copy activity Google AdWords service source.
type GoogleAdWordsSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'GoogleAdWordsSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GoogleAdWordsSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleAdWordsSource)(nil)).Elem()
}

func (i GoogleAdWordsSourceArgs) ToGoogleAdWordsSourceOutput() GoogleAdWordsSourceOutput {
	return i.ToGoogleAdWordsSourceOutputWithContext(context.Background())
}

func (i GoogleAdWordsSourceArgs) ToGoogleAdWordsSourceOutputWithContext(ctx context.Context) GoogleAdWordsSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleAdWordsSourceOutput)
}

// A copy activity Google AdWords service source.
type GoogleAdWordsSourceOutput struct{ *pulumi.OutputState }

func (GoogleAdWordsSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleAdWordsSource)(nil)).Elem()
}

func (o GoogleAdWordsSourceOutput) ToGoogleAdWordsSourceOutput() GoogleAdWordsSourceOutput {
	return o
}

func (o GoogleAdWordsSourceOutput) ToGoogleAdWordsSourceOutputWithContext(ctx context.Context) GoogleAdWordsSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o GoogleAdWordsSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o GoogleAdWordsSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o GoogleAdWordsSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o GoogleAdWordsSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o GoogleAdWordsSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o GoogleAdWordsSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o GoogleAdWordsSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'GoogleAdWordsSource'.
func (o GoogleAdWordsSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleAdWordsSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Google AdWords service source.
type GoogleAdWordsSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'GoogleAdWordsSource'.
	Type string `pulumi:"type"`
}

// A copy activity Google AdWords service source.
type GoogleAdWordsSourceResponseOutput struct{ *pulumi.OutputState }

func (GoogleAdWordsSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleAdWordsSourceResponse)(nil)).Elem()
}

func (o GoogleAdWordsSourceResponseOutput) ToGoogleAdWordsSourceResponseOutput() GoogleAdWordsSourceResponseOutput {
	return o
}

func (o GoogleAdWordsSourceResponseOutput) ToGoogleAdWordsSourceResponseOutputWithContext(ctx context.Context) GoogleAdWordsSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o GoogleAdWordsSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o GoogleAdWordsSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o GoogleAdWordsSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o GoogleAdWordsSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o GoogleAdWordsSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o GoogleAdWordsSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o GoogleAdWordsSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleAdWordsSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'GoogleAdWordsSource'.
func (o GoogleAdWordsSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleAdWordsSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Google BigQuery service linked service.
type GoogleBigQueryLinkedService struct {
	// A comma-separated list of public BigQuery projects to access. Type: string (or Expression with resultType string).
	AdditionalProjects interface{} `pulumi:"additionalProjects"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR.
	AuthenticationType string `pulumi:"authenticationType"`
	// The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The client secret of the google application used to acquire the refresh token.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR. Type: string (or Expression with resultType string).
	Email interface{} `pulumi:"email"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The full path to the .p12 key file that is used to authenticate the service account email address and can only be used on self-hosted IR. Type: string (or Expression with resultType string).
	KeyFilePath interface{} `pulumi:"keyFilePath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The default BigQuery project to query against. Type: string (or Expression with resultType string).
	Project interface{} `pulumi:"project"`
	// The refresh token obtained from Google for authorizing access to BigQuery for UserAuthentication.
	RefreshToken interface{} `pulumi:"refreshToken"`
	// Whether to request access to Google Drive. Allowing Google Drive access enables support for federated tables that combine BigQuery data with data from Google Drive. The default value is false. Type: string (or Expression with resultType string).
	RequestGoogleDriveScope interface{} `pulumi:"requestGoogleDriveScope"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR. Type: string (or Expression with resultType string).
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'GoogleBigQuery'.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.Type: boolean (or Expression with resultType boolean).
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
}

// GoogleBigQueryLinkedServiceInput is an input type that accepts GoogleBigQueryLinkedServiceArgs and GoogleBigQueryLinkedServiceOutput values.
// You can construct a concrete instance of `GoogleBigQueryLinkedServiceInput` via:
//
//	GoogleBigQueryLinkedServiceArgs{...}
type GoogleBigQueryLinkedServiceInput interface {
	pulumi.Input

	ToGoogleBigQueryLinkedServiceOutput() GoogleBigQueryLinkedServiceOutput
	ToGoogleBigQueryLinkedServiceOutputWithContext(context.Context) GoogleBigQueryLinkedServiceOutput
}

// Google BigQuery service linked service.
type GoogleBigQueryLinkedServiceArgs struct {
	// A comma-separated list of public BigQuery projects to access. Type: string (or Expression with resultType string).
	AdditionalProjects pulumi.Input `pulumi:"additionalProjects"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType string).
	ClientId pulumi.Input `pulumi:"clientId"`
	// The client secret of the google application used to acquire the refresh token.
	ClientSecret pulumi.Input `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR. Type: string (or Expression with resultType string).
	Email pulumi.Input `pulumi:"email"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// The full path to the .p12 key file that is used to authenticate the service account email address and can only be used on self-hosted IR. Type: string (or Expression with resultType string).
	KeyFilePath pulumi.Input `pulumi:"keyFilePath"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The default BigQuery project to query against. Type: string (or Expression with resultType string).
	Project pulumi.Input `pulumi:"project"`
	// The refresh token obtained from Google for authorizing access to BigQuery for UserAuthentication.
	RefreshToken pulumi.Input `pulumi:"refreshToken"`
	// Whether to request access to Google Drive. Allowing Google Drive access enables support for federated tables that combine BigQuery data with data from Google Drive. The default value is false. Type: string (or Expression with resultType string).
	RequestGoogleDriveScope pulumi.Input `pulumi:"requestGoogleDriveScope"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR. Type: string (or Expression with resultType string).
	TrustedCertPath pulumi.Input `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'GoogleBigQuery'.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.Type: boolean (or Expression with resultType boolean).
	UseSystemTrustStore pulumi.Input `pulumi:"useSystemTrustStore"`
}

func (GoogleBigQueryLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleBigQueryLinkedService)(nil)).Elem()
}

func (i GoogleBigQueryLinkedServiceArgs) ToGoogleBigQueryLinkedServiceOutput() GoogleBigQueryLinkedServiceOutput {
	return i.ToGoogleBigQueryLinkedServiceOutputWithContext(context.Background())
}

func (i GoogleBigQueryLinkedServiceArgs) ToGoogleBigQueryLinkedServiceOutputWithContext(ctx context.Context) GoogleBigQueryLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleBigQueryLinkedServiceOutput)
}

// Google BigQuery service linked service.
type GoogleBigQueryLinkedServiceOutput struct{ *pulumi.OutputState }

func (GoogleBigQueryLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleBigQueryLinkedService)(nil)).Elem()
}

func (o GoogleBigQueryLinkedServiceOutput) ToGoogleBigQueryLinkedServiceOutput() GoogleBigQueryLinkedServiceOutput {
	return o
}

func (o GoogleBigQueryLinkedServiceOutput) ToGoogleBigQueryLinkedServiceOutputWithContext(ctx context.Context) GoogleBigQueryLinkedServiceOutput {
	return o
}

// A comma-separated list of public BigQuery projects to access. Type: string (or Expression with resultType string).
func (o GoogleBigQueryLinkedServiceOutput) AdditionalProjects() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedService) interface{} { return v.AdditionalProjects }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o GoogleBigQueryLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR.
func (o GoogleBigQueryLinkedServiceOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedService) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType string).
func (o GoogleBigQueryLinkedServiceOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedService) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret of the google application used to acquire the refresh token.
func (o GoogleBigQueryLinkedServiceOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedService) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o GoogleBigQueryLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o GoogleBigQueryLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR. Type: string (or Expression with resultType string).
func (o GoogleBigQueryLinkedServiceOutput) Email() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedService) interface{} { return v.Email }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o GoogleBigQueryLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The full path to the .p12 key file that is used to authenticate the service account email address and can only be used on self-hosted IR. Type: string (or Expression with resultType string).
func (o GoogleBigQueryLinkedServiceOutput) KeyFilePath() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedService) interface{} { return v.KeyFilePath }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o GoogleBigQueryLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The default BigQuery project to query against. Type: string (or Expression with resultType string).
func (o GoogleBigQueryLinkedServiceOutput) Project() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedService) interface{} { return v.Project }).(pulumi.AnyOutput)
}

// The refresh token obtained from Google for authorizing access to BigQuery for UserAuthentication.
func (o GoogleBigQueryLinkedServiceOutput) RefreshToken() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedService) interface{} { return v.RefreshToken }).(pulumi.AnyOutput)
}

// Whether to request access to Google Drive. Allowing Google Drive access enables support for federated tables that combine BigQuery data with data from Google Drive. The default value is false. Type: string (or Expression with resultType string).
func (o GoogleBigQueryLinkedServiceOutput) RequestGoogleDriveScope() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedService) interface{} { return v.RequestGoogleDriveScope }).(pulumi.AnyOutput)
}

// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR. Type: string (or Expression with resultType string).
func (o GoogleBigQueryLinkedServiceOutput) TrustedCertPath() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedService) interface{} { return v.TrustedCertPath }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'GoogleBigQuery'.
func (o GoogleBigQueryLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.Type: boolean (or Expression with resultType boolean).
func (o GoogleBigQueryLinkedServiceOutput) UseSystemTrustStore() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedService) interface{} { return v.UseSystemTrustStore }).(pulumi.AnyOutput)
}

// Google BigQuery service linked service.
type GoogleBigQueryLinkedServiceResponse struct {
	// A comma-separated list of public BigQuery projects to access. Type: string (or Expression with resultType string).
	AdditionalProjects interface{} `pulumi:"additionalProjects"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR.
	AuthenticationType string `pulumi:"authenticationType"`
	// The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The client secret of the google application used to acquire the refresh token.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR. Type: string (or Expression with resultType string).
	Email interface{} `pulumi:"email"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The full path to the .p12 key file that is used to authenticate the service account email address and can only be used on self-hosted IR. Type: string (or Expression with resultType string).
	KeyFilePath interface{} `pulumi:"keyFilePath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The default BigQuery project to query against. Type: string (or Expression with resultType string).
	Project interface{} `pulumi:"project"`
	// The refresh token obtained from Google for authorizing access to BigQuery for UserAuthentication.
	RefreshToken interface{} `pulumi:"refreshToken"`
	// Whether to request access to Google Drive. Allowing Google Drive access enables support for federated tables that combine BigQuery data with data from Google Drive. The default value is false. Type: string (or Expression with resultType string).
	RequestGoogleDriveScope interface{} `pulumi:"requestGoogleDriveScope"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR. Type: string (or Expression with resultType string).
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'GoogleBigQuery'.
	Type string `pulumi:"type"`
	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.Type: boolean (or Expression with resultType boolean).
	UseSystemTrustStore interface{} `pulumi:"useSystemTrustStore"`
}

// Google BigQuery service linked service.
type GoogleBigQueryLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (GoogleBigQueryLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleBigQueryLinkedServiceResponse)(nil)).Elem()
}

func (o GoogleBigQueryLinkedServiceResponseOutput) ToGoogleBigQueryLinkedServiceResponseOutput() GoogleBigQueryLinkedServiceResponseOutput {
	return o
}

func (o GoogleBigQueryLinkedServiceResponseOutput) ToGoogleBigQueryLinkedServiceResponseOutputWithContext(ctx context.Context) GoogleBigQueryLinkedServiceResponseOutput {
	return o
}

// A comma-separated list of public BigQuery projects to access. Type: string (or Expression with resultType string).
func (o GoogleBigQueryLinkedServiceResponseOutput) AdditionalProjects() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) interface{} { return v.AdditionalProjects }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o GoogleBigQueryLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR.
func (o GoogleBigQueryLinkedServiceResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType string).
func (o GoogleBigQueryLinkedServiceResponseOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret of the google application used to acquire the refresh token.
func (o GoogleBigQueryLinkedServiceResponseOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o GoogleBigQueryLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o GoogleBigQueryLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR. Type: string (or Expression with resultType string).
func (o GoogleBigQueryLinkedServiceResponseOutput) Email() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) interface{} { return v.Email }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o GoogleBigQueryLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The full path to the .p12 key file that is used to authenticate the service account email address and can only be used on self-hosted IR. Type: string (or Expression with resultType string).
func (o GoogleBigQueryLinkedServiceResponseOutput) KeyFilePath() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) interface{} { return v.KeyFilePath }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o GoogleBigQueryLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The default BigQuery project to query against. Type: string (or Expression with resultType string).
func (o GoogleBigQueryLinkedServiceResponseOutput) Project() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) interface{} { return v.Project }).(pulumi.AnyOutput)
}

// The refresh token obtained from Google for authorizing access to BigQuery for UserAuthentication.
func (o GoogleBigQueryLinkedServiceResponseOutput) RefreshToken() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) interface{} { return v.RefreshToken }).(pulumi.AnyOutput)
}

// Whether to request access to Google Drive. Allowing Google Drive access enables support for federated tables that combine BigQuery data with data from Google Drive. The default value is false. Type: string (or Expression with resultType string).
func (o GoogleBigQueryLinkedServiceResponseOutput) RequestGoogleDriveScope() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) interface{} { return v.RequestGoogleDriveScope }).(pulumi.AnyOutput)
}

// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR. Type: string (or Expression with resultType string).
func (o GoogleBigQueryLinkedServiceResponseOutput) TrustedCertPath() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) interface{} { return v.TrustedCertPath }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'GoogleBigQuery'.
func (o GoogleBigQueryLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false.Type: boolean (or Expression with resultType boolean).
func (o GoogleBigQueryLinkedServiceResponseOutput) UseSystemTrustStore() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryLinkedServiceResponse) interface{} { return v.UseSystemTrustStore }).(pulumi.AnyOutput)
}

// Google BigQuery service dataset.
type GoogleBigQueryObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The database name of the Google BigQuery. Type: string (or Expression with resultType string).
	Dataset interface{} `pulumi:"dataset"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Google BigQuery. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using database + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'GoogleBigQueryObject'.
	Type string `pulumi:"type"`
}

// GoogleBigQueryObjectDatasetInput is an input type that accepts GoogleBigQueryObjectDatasetArgs and GoogleBigQueryObjectDatasetOutput values.
// You can construct a concrete instance of `GoogleBigQueryObjectDatasetInput` via:
//
//	GoogleBigQueryObjectDatasetArgs{...}
type GoogleBigQueryObjectDatasetInput interface {
	pulumi.Input

	ToGoogleBigQueryObjectDatasetOutput() GoogleBigQueryObjectDatasetOutput
	ToGoogleBigQueryObjectDatasetOutputWithContext(context.Context) GoogleBigQueryObjectDatasetOutput
}

// Google BigQuery service dataset.
type GoogleBigQueryObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The database name of the Google BigQuery. Type: string (or Expression with resultType string).
	Dataset pulumi.Input `pulumi:"dataset"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Google BigQuery. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using database + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'GoogleBigQueryObject'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GoogleBigQueryObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleBigQueryObjectDataset)(nil)).Elem()
}

func (i GoogleBigQueryObjectDatasetArgs) ToGoogleBigQueryObjectDatasetOutput() GoogleBigQueryObjectDatasetOutput {
	return i.ToGoogleBigQueryObjectDatasetOutputWithContext(context.Background())
}

func (i GoogleBigQueryObjectDatasetArgs) ToGoogleBigQueryObjectDatasetOutputWithContext(ctx context.Context) GoogleBigQueryObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleBigQueryObjectDatasetOutput)
}

// Google BigQuery service dataset.
type GoogleBigQueryObjectDatasetOutput struct{ *pulumi.OutputState }

func (GoogleBigQueryObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleBigQueryObjectDataset)(nil)).Elem()
}

func (o GoogleBigQueryObjectDatasetOutput) ToGoogleBigQueryObjectDatasetOutput() GoogleBigQueryObjectDatasetOutput {
	return o
}

func (o GoogleBigQueryObjectDatasetOutput) ToGoogleBigQueryObjectDatasetOutputWithContext(ctx context.Context) GoogleBigQueryObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o GoogleBigQueryObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The database name of the Google BigQuery. Type: string (or Expression with resultType string).
func (o GoogleBigQueryObjectDatasetOutput) Dataset() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDataset) interface{} { return v.Dataset }).(pulumi.AnyOutput)
}

// Dataset description.
func (o GoogleBigQueryObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o GoogleBigQueryObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o GoogleBigQueryObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o GoogleBigQueryObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o GoogleBigQueryObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o GoogleBigQueryObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Google BigQuery. Type: string (or Expression with resultType string).
func (o GoogleBigQueryObjectDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using database + table properties instead.
func (o GoogleBigQueryObjectDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'GoogleBigQueryObject'.
func (o GoogleBigQueryObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Google BigQuery service dataset.
type GoogleBigQueryObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The database name of the Google BigQuery. Type: string (or Expression with resultType string).
	Dataset interface{} `pulumi:"dataset"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Google BigQuery. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using database + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'GoogleBigQueryObject'.
	Type string `pulumi:"type"`
}

// Google BigQuery service dataset.
type GoogleBigQueryObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (GoogleBigQueryObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleBigQueryObjectDatasetResponse)(nil)).Elem()
}

func (o GoogleBigQueryObjectDatasetResponseOutput) ToGoogleBigQueryObjectDatasetResponseOutput() GoogleBigQueryObjectDatasetResponseOutput {
	return o
}

func (o GoogleBigQueryObjectDatasetResponseOutput) ToGoogleBigQueryObjectDatasetResponseOutputWithContext(ctx context.Context) GoogleBigQueryObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o GoogleBigQueryObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The database name of the Google BigQuery. Type: string (or Expression with resultType string).
func (o GoogleBigQueryObjectDatasetResponseOutput) Dataset() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDatasetResponse) interface{} { return v.Dataset }).(pulumi.AnyOutput)
}

// Dataset description.
func (o GoogleBigQueryObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o GoogleBigQueryObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o GoogleBigQueryObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o GoogleBigQueryObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o GoogleBigQueryObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o GoogleBigQueryObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Google BigQuery. Type: string (or Expression with resultType string).
func (o GoogleBigQueryObjectDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using database + table properties instead.
func (o GoogleBigQueryObjectDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'GoogleBigQueryObject'.
func (o GoogleBigQueryObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleBigQueryObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Google BigQuery service source.
type GoogleBigQuerySource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'GoogleBigQuerySource'.
	Type string `pulumi:"type"`
}

// GoogleBigQuerySourceInput is an input type that accepts GoogleBigQuerySourceArgs and GoogleBigQuerySourceOutput values.
// You can construct a concrete instance of `GoogleBigQuerySourceInput` via:
//
//	GoogleBigQuerySourceArgs{...}
type GoogleBigQuerySourceInput interface {
	pulumi.Input

	ToGoogleBigQuerySourceOutput() GoogleBigQuerySourceOutput
	ToGoogleBigQuerySourceOutputWithContext(context.Context) GoogleBigQuerySourceOutput
}

// A copy activity Google BigQuery service source.
type GoogleBigQuerySourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'GoogleBigQuerySource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GoogleBigQuerySourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleBigQuerySource)(nil)).Elem()
}

func (i GoogleBigQuerySourceArgs) ToGoogleBigQuerySourceOutput() GoogleBigQuerySourceOutput {
	return i.ToGoogleBigQuerySourceOutputWithContext(context.Background())
}

func (i GoogleBigQuerySourceArgs) ToGoogleBigQuerySourceOutputWithContext(ctx context.Context) GoogleBigQuerySourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleBigQuerySourceOutput)
}

// A copy activity Google BigQuery service source.
type GoogleBigQuerySourceOutput struct{ *pulumi.OutputState }

func (GoogleBigQuerySourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleBigQuerySource)(nil)).Elem()
}

func (o GoogleBigQuerySourceOutput) ToGoogleBigQuerySourceOutput() GoogleBigQuerySourceOutput {
	return o
}

func (o GoogleBigQuerySourceOutput) ToGoogleBigQuerySourceOutputWithContext(ctx context.Context) GoogleBigQuerySourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o GoogleBigQuerySourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQuerySource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o GoogleBigQuerySourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQuerySource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o GoogleBigQuerySourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQuerySource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o GoogleBigQuerySourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQuerySource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o GoogleBigQuerySourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQuerySource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o GoogleBigQuerySourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQuerySource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o GoogleBigQuerySourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQuerySource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'GoogleBigQuerySource'.
func (o GoogleBigQuerySourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleBigQuerySource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Google BigQuery service source.
type GoogleBigQuerySourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'GoogleBigQuerySource'.
	Type string `pulumi:"type"`
}

// A copy activity Google BigQuery service source.
type GoogleBigQuerySourceResponseOutput struct{ *pulumi.OutputState }

func (GoogleBigQuerySourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleBigQuerySourceResponse)(nil)).Elem()
}

func (o GoogleBigQuerySourceResponseOutput) ToGoogleBigQuerySourceResponseOutput() GoogleBigQuerySourceResponseOutput {
	return o
}

func (o GoogleBigQuerySourceResponseOutput) ToGoogleBigQuerySourceResponseOutputWithContext(ctx context.Context) GoogleBigQuerySourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o GoogleBigQuerySourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQuerySourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o GoogleBigQuerySourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQuerySourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o GoogleBigQuerySourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQuerySourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o GoogleBigQuerySourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQuerySourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o GoogleBigQuerySourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQuerySourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o GoogleBigQuerySourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQuerySourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o GoogleBigQuerySourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQuerySourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'GoogleBigQuerySource'.
func (o GoogleBigQuerySourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleBigQuerySourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Google BigQuery service linked service.
type GoogleBigQueryV2LinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The OAuth 2.0 authentication mechanism used for authentication.
	AuthenticationType string `pulumi:"authenticationType"`
	// The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The client secret of the google application used to acquire the refresh token.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The content of the .json key file that is used to authenticate the service account. Type: string (or Expression with resultType string).
	KeyFileContent interface{} `pulumi:"keyFileContent"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The default BigQuery project id to query against. Type: string (or Expression with resultType string).
	ProjectId interface{} `pulumi:"projectId"`
	// The refresh token obtained from Google for authorizing access to BigQuery for UserAuthentication.
	RefreshToken interface{} `pulumi:"refreshToken"`
	// Type of linked service.
	// Expected value is 'GoogleBigQueryV2'.
	Type string `pulumi:"type"`
}

// GoogleBigQueryV2LinkedServiceInput is an input type that accepts GoogleBigQueryV2LinkedServiceArgs and GoogleBigQueryV2LinkedServiceOutput values.
// You can construct a concrete instance of `GoogleBigQueryV2LinkedServiceInput` via:
//
//	GoogleBigQueryV2LinkedServiceArgs{...}
type GoogleBigQueryV2LinkedServiceInput interface {
	pulumi.Input

	ToGoogleBigQueryV2LinkedServiceOutput() GoogleBigQueryV2LinkedServiceOutput
	ToGoogleBigQueryV2LinkedServiceOutputWithContext(context.Context) GoogleBigQueryV2LinkedServiceOutput
}

// Google BigQuery service linked service.
type GoogleBigQueryV2LinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The OAuth 2.0 authentication mechanism used for authentication.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType string).
	ClientId pulumi.Input `pulumi:"clientId"`
	// The client secret of the google application used to acquire the refresh token.
	ClientSecret pulumi.Input `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// The content of the .json key file that is used to authenticate the service account. Type: string (or Expression with resultType string).
	KeyFileContent pulumi.Input `pulumi:"keyFileContent"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The default BigQuery project id to query against. Type: string (or Expression with resultType string).
	ProjectId pulumi.Input `pulumi:"projectId"`
	// The refresh token obtained from Google for authorizing access to BigQuery for UserAuthentication.
	RefreshToken pulumi.Input `pulumi:"refreshToken"`
	// Type of linked service.
	// Expected value is 'GoogleBigQueryV2'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GoogleBigQueryV2LinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleBigQueryV2LinkedService)(nil)).Elem()
}

func (i GoogleBigQueryV2LinkedServiceArgs) ToGoogleBigQueryV2LinkedServiceOutput() GoogleBigQueryV2LinkedServiceOutput {
	return i.ToGoogleBigQueryV2LinkedServiceOutputWithContext(context.Background())
}

func (i GoogleBigQueryV2LinkedServiceArgs) ToGoogleBigQueryV2LinkedServiceOutputWithContext(ctx context.Context) GoogleBigQueryV2LinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleBigQueryV2LinkedServiceOutput)
}

// Google BigQuery service linked service.
type GoogleBigQueryV2LinkedServiceOutput struct{ *pulumi.OutputState }

func (GoogleBigQueryV2LinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleBigQueryV2LinkedService)(nil)).Elem()
}

func (o GoogleBigQueryV2LinkedServiceOutput) ToGoogleBigQueryV2LinkedServiceOutput() GoogleBigQueryV2LinkedServiceOutput {
	return o
}

func (o GoogleBigQueryV2LinkedServiceOutput) ToGoogleBigQueryV2LinkedServiceOutputWithContext(ctx context.Context) GoogleBigQueryV2LinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o GoogleBigQueryV2LinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v GoogleBigQueryV2LinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The OAuth 2.0 authentication mechanism used for authentication.
func (o GoogleBigQueryV2LinkedServiceOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleBigQueryV2LinkedService) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType string).
func (o GoogleBigQueryV2LinkedServiceOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryV2LinkedService) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret of the google application used to acquire the refresh token.
func (o GoogleBigQueryV2LinkedServiceOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryV2LinkedService) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o GoogleBigQueryV2LinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v GoogleBigQueryV2LinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o GoogleBigQueryV2LinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleBigQueryV2LinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o GoogleBigQueryV2LinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleBigQueryV2LinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The content of the .json key file that is used to authenticate the service account. Type: string (or Expression with resultType string).
func (o GoogleBigQueryV2LinkedServiceOutput) KeyFileContent() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryV2LinkedService) interface{} { return v.KeyFileContent }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o GoogleBigQueryV2LinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v GoogleBigQueryV2LinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The default BigQuery project id to query against. Type: string (or Expression with resultType string).
func (o GoogleBigQueryV2LinkedServiceOutput) ProjectId() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryV2LinkedService) interface{} { return v.ProjectId }).(pulumi.AnyOutput)
}

// The refresh token obtained from Google for authorizing access to BigQuery for UserAuthentication.
func (o GoogleBigQueryV2LinkedServiceOutput) RefreshToken() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryV2LinkedService) interface{} { return v.RefreshToken }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'GoogleBigQueryV2'.
func (o GoogleBigQueryV2LinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleBigQueryV2LinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Google BigQuery service linked service.
type GoogleBigQueryV2LinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The OAuth 2.0 authentication mechanism used for authentication.
	AuthenticationType string `pulumi:"authenticationType"`
	// The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType string).
	ClientId interface{} `pulumi:"clientId"`
	// The client secret of the google application used to acquire the refresh token.
	ClientSecret interface{} `pulumi:"clientSecret"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The content of the .json key file that is used to authenticate the service account. Type: string (or Expression with resultType string).
	KeyFileContent interface{} `pulumi:"keyFileContent"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The default BigQuery project id to query against. Type: string (or Expression with resultType string).
	ProjectId interface{} `pulumi:"projectId"`
	// The refresh token obtained from Google for authorizing access to BigQuery for UserAuthentication.
	RefreshToken interface{} `pulumi:"refreshToken"`
	// Type of linked service.
	// Expected value is 'GoogleBigQueryV2'.
	Type string `pulumi:"type"`
}

// Google BigQuery service linked service.
type GoogleBigQueryV2LinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (GoogleBigQueryV2LinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleBigQueryV2LinkedServiceResponse)(nil)).Elem()
}

func (o GoogleBigQueryV2LinkedServiceResponseOutput) ToGoogleBigQueryV2LinkedServiceResponseOutput() GoogleBigQueryV2LinkedServiceResponseOutput {
	return o
}

func (o GoogleBigQueryV2LinkedServiceResponseOutput) ToGoogleBigQueryV2LinkedServiceResponseOutputWithContext(ctx context.Context) GoogleBigQueryV2LinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o GoogleBigQueryV2LinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v GoogleBigQueryV2LinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The OAuth 2.0 authentication mechanism used for authentication.
func (o GoogleBigQueryV2LinkedServiceResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleBigQueryV2LinkedServiceResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType string).
func (o GoogleBigQueryV2LinkedServiceResponseOutput) ClientId() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryV2LinkedServiceResponse) interface{} { return v.ClientId }).(pulumi.AnyOutput)
}

// The client secret of the google application used to acquire the refresh token.
func (o GoogleBigQueryV2LinkedServiceResponseOutput) ClientSecret() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryV2LinkedServiceResponse) interface{} { return v.ClientSecret }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o GoogleBigQueryV2LinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v GoogleBigQueryV2LinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o GoogleBigQueryV2LinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleBigQueryV2LinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o GoogleBigQueryV2LinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleBigQueryV2LinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The content of the .json key file that is used to authenticate the service account. Type: string (or Expression with resultType string).
func (o GoogleBigQueryV2LinkedServiceResponseOutput) KeyFileContent() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryV2LinkedServiceResponse) interface{} { return v.KeyFileContent }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o GoogleBigQueryV2LinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v GoogleBigQueryV2LinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The default BigQuery project id to query against. Type: string (or Expression with resultType string).
func (o GoogleBigQueryV2LinkedServiceResponseOutput) ProjectId() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryV2LinkedServiceResponse) interface{} { return v.ProjectId }).(pulumi.AnyOutput)
}

// The refresh token obtained from Google for authorizing access to BigQuery for UserAuthentication.
func (o GoogleBigQueryV2LinkedServiceResponseOutput) RefreshToken() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryV2LinkedServiceResponse) interface{} { return v.RefreshToken }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'GoogleBigQueryV2'.
func (o GoogleBigQueryV2LinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleBigQueryV2LinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Google BigQuery service dataset.
type GoogleBigQueryV2ObjectDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The database name of the Google BigQuery. Type: string (or Expression with resultType string).
	Dataset interface{} `pulumi:"dataset"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Google BigQuery. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'GoogleBigQueryV2Object'.
	Type string `pulumi:"type"`
}

// GoogleBigQueryV2ObjectDatasetInput is an input type that accepts GoogleBigQueryV2ObjectDatasetArgs and GoogleBigQueryV2ObjectDatasetOutput values.
// You can construct a concrete instance of `GoogleBigQueryV2ObjectDatasetInput` via:
//
//	GoogleBigQueryV2ObjectDatasetArgs{...}
type GoogleBigQueryV2ObjectDatasetInput interface {
	pulumi.Input

	ToGoogleBigQueryV2ObjectDatasetOutput() GoogleBigQueryV2ObjectDatasetOutput
	ToGoogleBigQueryV2ObjectDatasetOutputWithContext(context.Context) GoogleBigQueryV2ObjectDatasetOutput
}

// Google BigQuery service dataset.
type GoogleBigQueryV2ObjectDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The database name of the Google BigQuery. Type: string (or Expression with resultType string).
	Dataset pulumi.Input `pulumi:"dataset"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of the Google BigQuery. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'GoogleBigQueryV2Object'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GoogleBigQueryV2ObjectDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleBigQueryV2ObjectDataset)(nil)).Elem()
}

func (i GoogleBigQueryV2ObjectDatasetArgs) ToGoogleBigQueryV2ObjectDatasetOutput() GoogleBigQueryV2ObjectDatasetOutput {
	return i.ToGoogleBigQueryV2ObjectDatasetOutputWithContext(context.Background())
}

func (i GoogleBigQueryV2ObjectDatasetArgs) ToGoogleBigQueryV2ObjectDatasetOutputWithContext(ctx context.Context) GoogleBigQueryV2ObjectDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleBigQueryV2ObjectDatasetOutput)
}

// Google BigQuery service dataset.
type GoogleBigQueryV2ObjectDatasetOutput struct{ *pulumi.OutputState }

func (GoogleBigQueryV2ObjectDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleBigQueryV2ObjectDataset)(nil)).Elem()
}

func (o GoogleBigQueryV2ObjectDatasetOutput) ToGoogleBigQueryV2ObjectDatasetOutput() GoogleBigQueryV2ObjectDatasetOutput {
	return o
}

func (o GoogleBigQueryV2ObjectDatasetOutput) ToGoogleBigQueryV2ObjectDatasetOutputWithContext(ctx context.Context) GoogleBigQueryV2ObjectDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o GoogleBigQueryV2ObjectDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v GoogleBigQueryV2ObjectDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The database name of the Google BigQuery. Type: string (or Expression with resultType string).
func (o GoogleBigQueryV2ObjectDatasetOutput) Dataset() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryV2ObjectDataset) interface{} { return v.Dataset }).(pulumi.AnyOutput)
}

// Dataset description.
func (o GoogleBigQueryV2ObjectDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleBigQueryV2ObjectDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o GoogleBigQueryV2ObjectDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v GoogleBigQueryV2ObjectDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o GoogleBigQueryV2ObjectDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v GoogleBigQueryV2ObjectDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o GoogleBigQueryV2ObjectDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v GoogleBigQueryV2ObjectDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o GoogleBigQueryV2ObjectDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryV2ObjectDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o GoogleBigQueryV2ObjectDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryV2ObjectDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Google BigQuery. Type: string (or Expression with resultType string).
func (o GoogleBigQueryV2ObjectDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryV2ObjectDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'GoogleBigQueryV2Object'.
func (o GoogleBigQueryV2ObjectDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleBigQueryV2ObjectDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Google BigQuery service dataset.
type GoogleBigQueryV2ObjectDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// The database name of the Google BigQuery. Type: string (or Expression with resultType string).
	Dataset interface{} `pulumi:"dataset"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of the Google BigQuery. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// Type of dataset.
	// Expected value is 'GoogleBigQueryV2Object'.
	Type string `pulumi:"type"`
}

// Google BigQuery service dataset.
type GoogleBigQueryV2ObjectDatasetResponseOutput struct{ *pulumi.OutputState }

func (GoogleBigQueryV2ObjectDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleBigQueryV2ObjectDatasetResponse)(nil)).Elem()
}

func (o GoogleBigQueryV2ObjectDatasetResponseOutput) ToGoogleBigQueryV2ObjectDatasetResponseOutput() GoogleBigQueryV2ObjectDatasetResponseOutput {
	return o
}

func (o GoogleBigQueryV2ObjectDatasetResponseOutput) ToGoogleBigQueryV2ObjectDatasetResponseOutputWithContext(ctx context.Context) GoogleBigQueryV2ObjectDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o GoogleBigQueryV2ObjectDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v GoogleBigQueryV2ObjectDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The database name of the Google BigQuery. Type: string (or Expression with resultType string).
func (o GoogleBigQueryV2ObjectDatasetResponseOutput) Dataset() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryV2ObjectDatasetResponse) interface{} { return v.Dataset }).(pulumi.AnyOutput)
}

// Dataset description.
func (o GoogleBigQueryV2ObjectDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleBigQueryV2ObjectDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o GoogleBigQueryV2ObjectDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v GoogleBigQueryV2ObjectDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o GoogleBigQueryV2ObjectDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v GoogleBigQueryV2ObjectDatasetResponse) LinkedServiceReferenceResponse {
		return v.LinkedServiceName
	}).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o GoogleBigQueryV2ObjectDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v GoogleBigQueryV2ObjectDatasetResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o GoogleBigQueryV2ObjectDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryV2ObjectDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o GoogleBigQueryV2ObjectDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryV2ObjectDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of the Google BigQuery. Type: string (or Expression with resultType string).
func (o GoogleBigQueryV2ObjectDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryV2ObjectDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'GoogleBigQueryV2Object'.
func (o GoogleBigQueryV2ObjectDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleBigQueryV2ObjectDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Google BigQuery service source.
type GoogleBigQueryV2Source struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'GoogleBigQueryV2Source'.
	Type string `pulumi:"type"`
}

// GoogleBigQueryV2SourceInput is an input type that accepts GoogleBigQueryV2SourceArgs and GoogleBigQueryV2SourceOutput values.
// You can construct a concrete instance of `GoogleBigQueryV2SourceInput` via:
//
//	GoogleBigQueryV2SourceArgs{...}
type GoogleBigQueryV2SourceInput interface {
	pulumi.Input

	ToGoogleBigQueryV2SourceOutput() GoogleBigQueryV2SourceOutput
	ToGoogleBigQueryV2SourceOutputWithContext(context.Context) GoogleBigQueryV2SourceOutput
}

// A copy activity Google BigQuery service source.
type GoogleBigQueryV2SourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'GoogleBigQueryV2Source'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GoogleBigQueryV2SourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleBigQueryV2Source)(nil)).Elem()
}

func (i GoogleBigQueryV2SourceArgs) ToGoogleBigQueryV2SourceOutput() GoogleBigQueryV2SourceOutput {
	return i.ToGoogleBigQueryV2SourceOutputWithContext(context.Background())
}

func (i GoogleBigQueryV2SourceArgs) ToGoogleBigQueryV2SourceOutputWithContext(ctx context.Context) GoogleBigQueryV2SourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleBigQueryV2SourceOutput)
}

// A copy activity Google BigQuery service source.
type GoogleBigQueryV2SourceOutput struct{ *pulumi.OutputState }

func (GoogleBigQueryV2SourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleBigQueryV2Source)(nil)).Elem()
}

func (o GoogleBigQueryV2SourceOutput) ToGoogleBigQueryV2SourceOutput() GoogleBigQueryV2SourceOutput {
	return o
}

func (o GoogleBigQueryV2SourceOutput) ToGoogleBigQueryV2SourceOutputWithContext(ctx context.Context) GoogleBigQueryV2SourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o GoogleBigQueryV2SourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryV2Source) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o GoogleBigQueryV2SourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryV2Source) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o GoogleBigQueryV2SourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryV2Source) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o GoogleBigQueryV2SourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryV2Source) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o GoogleBigQueryV2SourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryV2Source) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o GoogleBigQueryV2SourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryV2Source) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o GoogleBigQueryV2SourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryV2Source) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'GoogleBigQueryV2Source'.
func (o GoogleBigQueryV2SourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleBigQueryV2Source) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Google BigQuery service source.
type GoogleBigQueryV2SourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'GoogleBigQueryV2Source'.
	Type string `pulumi:"type"`
}

// A copy activity Google BigQuery service source.
type GoogleBigQueryV2SourceResponseOutput struct{ *pulumi.OutputState }

func (GoogleBigQueryV2SourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleBigQueryV2SourceResponse)(nil)).Elem()
}

func (o GoogleBigQueryV2SourceResponseOutput) ToGoogleBigQueryV2SourceResponseOutput() GoogleBigQueryV2SourceResponseOutput {
	return o
}

func (o GoogleBigQueryV2SourceResponseOutput) ToGoogleBigQueryV2SourceResponseOutputWithContext(ctx context.Context) GoogleBigQueryV2SourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o GoogleBigQueryV2SourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryV2SourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o GoogleBigQueryV2SourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryV2SourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o GoogleBigQueryV2SourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryV2SourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o GoogleBigQueryV2SourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryV2SourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o GoogleBigQueryV2SourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryV2SourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o GoogleBigQueryV2SourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryV2SourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o GoogleBigQueryV2SourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleBigQueryV2SourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'GoogleBigQueryV2Source'.
func (o GoogleBigQueryV2SourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleBigQueryV2SourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for Google Cloud Storage.
type GoogleCloudStorageLinkedService struct {
	// The access key identifier of the Google Cloud Storage Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
	AccessKeyId interface{} `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The secret access key of the Google Cloud Storage Identity and Access Management (IAM) user.
	SecretAccessKey interface{} `pulumi:"secretAccessKey"`
	// This value specifies the endpoint to access with the Google Cloud Storage Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
	ServiceUrl interface{} `pulumi:"serviceUrl"`
	// Type of linked service.
	// Expected value is 'GoogleCloudStorage'.
	Type string `pulumi:"type"`
}

// GoogleCloudStorageLinkedServiceInput is an input type that accepts GoogleCloudStorageLinkedServiceArgs and GoogleCloudStorageLinkedServiceOutput values.
// You can construct a concrete instance of `GoogleCloudStorageLinkedServiceInput` via:
//
//	GoogleCloudStorageLinkedServiceArgs{...}
type GoogleCloudStorageLinkedServiceInput interface {
	pulumi.Input

	ToGoogleCloudStorageLinkedServiceOutput() GoogleCloudStorageLinkedServiceOutput
	ToGoogleCloudStorageLinkedServiceOutputWithContext(context.Context) GoogleCloudStorageLinkedServiceOutput
}

// Linked service for Google Cloud Storage.
type GoogleCloudStorageLinkedServiceArgs struct {
	// The access key identifier of the Google Cloud Storage Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
	AccessKeyId pulumi.Input `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The secret access key of the Google Cloud Storage Identity and Access Management (IAM) user.
	SecretAccessKey pulumi.Input `pulumi:"secretAccessKey"`
	// This value specifies the endpoint to access with the Google Cloud Storage Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
	ServiceUrl pulumi.Input `pulumi:"serviceUrl"`
	// Type of linked service.
	// Expected value is 'GoogleCloudStorage'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GoogleCloudStorageLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudStorageLinkedService)(nil)).Elem()
}

func (i GoogleCloudStorageLinkedServiceArgs) ToGoogleCloudStorageLinkedServiceOutput() GoogleCloudStorageLinkedServiceOutput {
	return i.ToGoogleCloudStorageLinkedServiceOutputWithContext(context.Background())
}

func (i GoogleCloudStorageLinkedServiceArgs) ToGoogleCloudStorageLinkedServiceOutputWithContext(ctx context.Context) GoogleCloudStorageLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudStorageLinkedServiceOutput)
}

// Linked service for Google Cloud Storage.
type GoogleCloudStorageLinkedServiceOutput struct{ *pulumi.OutputState }

func (GoogleCloudStorageLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudStorageLinkedService)(nil)).Elem()
}

func (o GoogleCloudStorageLinkedServiceOutput) ToGoogleCloudStorageLinkedServiceOutput() GoogleCloudStorageLinkedServiceOutput {
	return o
}

func (o GoogleCloudStorageLinkedServiceOutput) ToGoogleCloudStorageLinkedServiceOutputWithContext(ctx context.Context) GoogleCloudStorageLinkedServiceOutput {
	return o
}

// The access key identifier of the Google Cloud Storage Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageLinkedServiceOutput) AccessKeyId() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageLinkedService) interface{} { return v.AccessKeyId }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o GoogleCloudStorageLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v GoogleCloudStorageLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o GoogleCloudStorageLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v GoogleCloudStorageLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o GoogleCloudStorageLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudStorageLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o GoogleCloudStorageLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudStorageLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o GoogleCloudStorageLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v GoogleCloudStorageLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The secret access key of the Google Cloud Storage Identity and Access Management (IAM) user.
func (o GoogleCloudStorageLinkedServiceOutput) SecretAccessKey() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageLinkedService) interface{} { return v.SecretAccessKey }).(pulumi.AnyOutput)
}

// This value specifies the endpoint to access with the Google Cloud Storage Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageLinkedServiceOutput) ServiceUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageLinkedService) interface{} { return v.ServiceUrl }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'GoogleCloudStorage'.
func (o GoogleCloudStorageLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudStorageLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for Google Cloud Storage.
type GoogleCloudStorageLinkedServiceResponse struct {
	// The access key identifier of the Google Cloud Storage Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
	AccessKeyId interface{} `pulumi:"accessKeyId"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The secret access key of the Google Cloud Storage Identity and Access Management (IAM) user.
	SecretAccessKey interface{} `pulumi:"secretAccessKey"`
	// This value specifies the endpoint to access with the Google Cloud Storage Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
	ServiceUrl interface{} `pulumi:"serviceUrl"`
	// Type of linked service.
	// Expected value is 'GoogleCloudStorage'.
	Type string `pulumi:"type"`
}

// Linked service for Google Cloud Storage.
type GoogleCloudStorageLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudStorageLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudStorageLinkedServiceResponse)(nil)).Elem()
}

func (o GoogleCloudStorageLinkedServiceResponseOutput) ToGoogleCloudStorageLinkedServiceResponseOutput() GoogleCloudStorageLinkedServiceResponseOutput {
	return o
}

func (o GoogleCloudStorageLinkedServiceResponseOutput) ToGoogleCloudStorageLinkedServiceResponseOutputWithContext(ctx context.Context) GoogleCloudStorageLinkedServiceResponseOutput {
	return o
}

// The access key identifier of the Google Cloud Storage Identity and Access Management (IAM) user. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageLinkedServiceResponseOutput) AccessKeyId() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageLinkedServiceResponse) interface{} { return v.AccessKeyId }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o GoogleCloudStorageLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v GoogleCloudStorageLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o GoogleCloudStorageLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v GoogleCloudStorageLinkedServiceResponse) *IntegrationRuntimeReferenceResponse {
		return v.ConnectVia
	}).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o GoogleCloudStorageLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudStorageLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o GoogleCloudStorageLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudStorageLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o GoogleCloudStorageLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v GoogleCloudStorageLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// The secret access key of the Google Cloud Storage Identity and Access Management (IAM) user.
func (o GoogleCloudStorageLinkedServiceResponseOutput) SecretAccessKey() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageLinkedServiceResponse) interface{} { return v.SecretAccessKey }).(pulumi.AnyOutput)
}

// This value specifies the endpoint to access with the Google Cloud Storage Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageLinkedServiceResponseOutput) ServiceUrl() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageLinkedServiceResponse) interface{} { return v.ServiceUrl }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'GoogleCloudStorage'.
func (o GoogleCloudStorageLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudStorageLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The location of Google Cloud Storage dataset.
type GoogleCloudStorageLocation struct {
	// Specify the bucketName of Google Cloud Storage. Type: string (or Expression with resultType string)
	BucketName interface{} `pulumi:"bucketName"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'GoogleCloudStorageLocation'.
	Type string `pulumi:"type"`
	// Specify the version of Google Cloud Storage. Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
}

// GoogleCloudStorageLocationInput is an input type that accepts GoogleCloudStorageLocationArgs and GoogleCloudStorageLocationOutput values.
// You can construct a concrete instance of `GoogleCloudStorageLocationInput` via:
//
//	GoogleCloudStorageLocationArgs{...}
type GoogleCloudStorageLocationInput interface {
	pulumi.Input

	ToGoogleCloudStorageLocationOutput() GoogleCloudStorageLocationOutput
	ToGoogleCloudStorageLocationOutputWithContext(context.Context) GoogleCloudStorageLocationOutput
}

// The location of Google Cloud Storage dataset.
type GoogleCloudStorageLocationArgs struct {
	// Specify the bucketName of Google Cloud Storage. Type: string (or Expression with resultType string)
	BucketName pulumi.Input `pulumi:"bucketName"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName pulumi.Input `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath pulumi.Input `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'GoogleCloudStorageLocation'.
	Type pulumi.StringInput `pulumi:"type"`
	// Specify the version of Google Cloud Storage. Type: string (or Expression with resultType string).
	Version pulumi.Input `pulumi:"version"`
}

func (GoogleCloudStorageLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudStorageLocation)(nil)).Elem()
}

func (i GoogleCloudStorageLocationArgs) ToGoogleCloudStorageLocationOutput() GoogleCloudStorageLocationOutput {
	return i.ToGoogleCloudStorageLocationOutputWithContext(context.Background())
}

func (i GoogleCloudStorageLocationArgs) ToGoogleCloudStorageLocationOutputWithContext(ctx context.Context) GoogleCloudStorageLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudStorageLocationOutput)
}

// The location of Google Cloud Storage dataset.
type GoogleCloudStorageLocationOutput struct{ *pulumi.OutputState }

func (GoogleCloudStorageLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudStorageLocation)(nil)).Elem()
}

func (o GoogleCloudStorageLocationOutput) ToGoogleCloudStorageLocationOutput() GoogleCloudStorageLocationOutput {
	return o
}

func (o GoogleCloudStorageLocationOutput) ToGoogleCloudStorageLocationOutputWithContext(ctx context.Context) GoogleCloudStorageLocationOutput {
	return o
}

// Specify the bucketName of Google Cloud Storage. Type: string (or Expression with resultType string)
func (o GoogleCloudStorageLocationOutput) BucketName() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageLocation) interface{} { return v.BucketName }).(pulumi.AnyOutput)
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageLocationOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageLocation) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o GoogleCloudStorageLocationOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageLocation) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
// Expected value is 'GoogleCloudStorageLocation'.
func (o GoogleCloudStorageLocationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudStorageLocation) string { return v.Type }).(pulumi.StringOutput)
}

// Specify the version of Google Cloud Storage. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageLocationOutput) Version() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageLocation) interface{} { return v.Version }).(pulumi.AnyOutput)
}

// The location of Google Cloud Storage dataset.
type GoogleCloudStorageLocationResponse struct {
	// Specify the bucketName of Google Cloud Storage. Type: string (or Expression with resultType string)
	BucketName interface{} `pulumi:"bucketName"`
	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName interface{} `pulumi:"fileName"`
	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath interface{} `pulumi:"folderPath"`
	// Type of dataset storage location.
	// Expected value is 'GoogleCloudStorageLocation'.
	Type string `pulumi:"type"`
	// Specify the version of Google Cloud Storage. Type: string (or Expression with resultType string).
	Version interface{} `pulumi:"version"`
}

// The location of Google Cloud Storage dataset.
type GoogleCloudStorageLocationResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudStorageLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudStorageLocationResponse)(nil)).Elem()
}

func (o GoogleCloudStorageLocationResponseOutput) ToGoogleCloudStorageLocationResponseOutput() GoogleCloudStorageLocationResponseOutput {
	return o
}

func (o GoogleCloudStorageLocationResponseOutput) ToGoogleCloudStorageLocationResponseOutputWithContext(ctx context.Context) GoogleCloudStorageLocationResponseOutput {
	return o
}

// Specify the bucketName of Google Cloud Storage. Type: string (or Expression with resultType string)
func (o GoogleCloudStorageLocationResponseOutput) BucketName() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageLocationResponse) interface{} { return v.BucketName }).(pulumi.AnyOutput)
}

// Specify the file name of dataset. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageLocationResponseOutput) FileName() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageLocationResponse) interface{} { return v.FileName }).(pulumi.AnyOutput)
}

// Specify the folder path of dataset. Type: string (or Expression with resultType string)
func (o GoogleCloudStorageLocationResponseOutput) FolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageLocationResponse) interface{} { return v.FolderPath }).(pulumi.AnyOutput)
}

// Type of dataset storage location.
// Expected value is 'GoogleCloudStorageLocation'.
func (o GoogleCloudStorageLocationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudStorageLocationResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specify the version of Google Cloud Storage. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageLocationResponseOutput) Version() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageLocationResponse) interface{} { return v.Version }).(pulumi.AnyOutput)
}

// Google Cloud Storage read settings.
type GoogleCloudStorageReadSettings struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery interface{} `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// The prefix filter for the Google Cloud Storage object name. Type: string (or Expression with resultType string).
	Prefix interface{} `pulumi:"prefix"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'GoogleCloudStorageReadSettings'.
	Type string `pulumi:"type"`
	// Google Cloud Storage wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Google Cloud Storage wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// GoogleCloudStorageReadSettingsInput is an input type that accepts GoogleCloudStorageReadSettingsArgs and GoogleCloudStorageReadSettingsOutput values.
// You can construct a concrete instance of `GoogleCloudStorageReadSettingsInput` via:
//
//	GoogleCloudStorageReadSettingsArgs{...}
type GoogleCloudStorageReadSettingsInput interface {
	pulumi.Input

	ToGoogleCloudStorageReadSettingsOutput() GoogleCloudStorageReadSettingsOutput
	ToGoogleCloudStorageReadSettingsOutputWithContext(context.Context) GoogleCloudStorageReadSettingsOutput
}

// Google Cloud Storage read settings.
type GoogleCloudStorageReadSettingsArgs struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion pulumi.Input `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery pulumi.Input `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath pulumi.Input `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd pulumi.Input `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart pulumi.Input `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath pulumi.Input `pulumi:"partitionRootPath"`
	// The prefix filter for the Google Cloud Storage object name. Type: string (or Expression with resultType string).
	Prefix pulumi.Input `pulumi:"prefix"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive pulumi.Input `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'GoogleCloudStorageReadSettings'.
	Type pulumi.StringInput `pulumi:"type"`
	// Google Cloud Storage wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName pulumi.Input `pulumi:"wildcardFileName"`
	// Google Cloud Storage wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath pulumi.Input `pulumi:"wildcardFolderPath"`
}

func (GoogleCloudStorageReadSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudStorageReadSettings)(nil)).Elem()
}

func (i GoogleCloudStorageReadSettingsArgs) ToGoogleCloudStorageReadSettingsOutput() GoogleCloudStorageReadSettingsOutput {
	return i.ToGoogleCloudStorageReadSettingsOutputWithContext(context.Background())
}

func (i GoogleCloudStorageReadSettingsArgs) ToGoogleCloudStorageReadSettingsOutputWithContext(ctx context.Context) GoogleCloudStorageReadSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudStorageReadSettingsOutput)
}

func (i GoogleCloudStorageReadSettingsArgs) ToGoogleCloudStorageReadSettingsPtrOutput() GoogleCloudStorageReadSettingsPtrOutput {
	return i.ToGoogleCloudStorageReadSettingsPtrOutputWithContext(context.Background())
}

func (i GoogleCloudStorageReadSettingsArgs) ToGoogleCloudStorageReadSettingsPtrOutputWithContext(ctx context.Context) GoogleCloudStorageReadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudStorageReadSettingsOutput).ToGoogleCloudStorageReadSettingsPtrOutputWithContext(ctx)
}

// GoogleCloudStorageReadSettingsPtrInput is an input type that accepts GoogleCloudStorageReadSettingsArgs, GoogleCloudStorageReadSettingsPtr and GoogleCloudStorageReadSettingsPtrOutput values.
// You can construct a concrete instance of `GoogleCloudStorageReadSettingsPtrInput` via:
//
//	        GoogleCloudStorageReadSettingsArgs{...}
//
//	or:
//
//	        nil
type GoogleCloudStorageReadSettingsPtrInput interface {
	pulumi.Input

	ToGoogleCloudStorageReadSettingsPtrOutput() GoogleCloudStorageReadSettingsPtrOutput
	ToGoogleCloudStorageReadSettingsPtrOutputWithContext(context.Context) GoogleCloudStorageReadSettingsPtrOutput
}

type googleCloudStorageReadSettingsPtrType GoogleCloudStorageReadSettingsArgs

func GoogleCloudStorageReadSettingsPtr(v *GoogleCloudStorageReadSettingsArgs) GoogleCloudStorageReadSettingsPtrInput {
	return (*googleCloudStorageReadSettingsPtrType)(v)
}

func (*googleCloudStorageReadSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudStorageReadSettings)(nil)).Elem()
}

func (i *googleCloudStorageReadSettingsPtrType) ToGoogleCloudStorageReadSettingsPtrOutput() GoogleCloudStorageReadSettingsPtrOutput {
	return i.ToGoogleCloudStorageReadSettingsPtrOutputWithContext(context.Background())
}

func (i *googleCloudStorageReadSettingsPtrType) ToGoogleCloudStorageReadSettingsPtrOutputWithContext(ctx context.Context) GoogleCloudStorageReadSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudStorageReadSettingsPtrOutput)
}

// Google Cloud Storage read settings.
type GoogleCloudStorageReadSettingsOutput struct{ *pulumi.OutputState }

func (GoogleCloudStorageReadSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudStorageReadSettings)(nil)).Elem()
}

func (o GoogleCloudStorageReadSettingsOutput) ToGoogleCloudStorageReadSettingsOutput() GoogleCloudStorageReadSettingsOutput {
	return o
}

func (o GoogleCloudStorageReadSettingsOutput) ToGoogleCloudStorageReadSettingsOutputWithContext(ctx context.Context) GoogleCloudStorageReadSettingsOutput {
	return o
}

func (o GoogleCloudStorageReadSettingsOutput) ToGoogleCloudStorageReadSettingsPtrOutput() GoogleCloudStorageReadSettingsPtrOutput {
	return o.ToGoogleCloudStorageReadSettingsPtrOutputWithContext(context.Background())
}

func (o GoogleCloudStorageReadSettingsOutput) ToGoogleCloudStorageReadSettingsPtrOutputWithContext(ctx context.Context) GoogleCloudStorageReadSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudStorageReadSettings) *GoogleCloudStorageReadSettings {
		return &v
	}).(GoogleCloudStorageReadSettingsPtrOutput)
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o GoogleCloudStorageReadSettingsOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageReadSettings) interface{} { return v.DeleteFilesAfterCompletion }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o GoogleCloudStorageReadSettingsOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageReadSettings) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o GoogleCloudStorageReadSettingsOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageReadSettings) interface{} { return v.EnablePartitionDiscovery }).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageReadSettingsOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageReadSettings) interface{} { return v.FileListPath }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o GoogleCloudStorageReadSettingsOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageReadSettings) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageReadSettingsOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageReadSettings) interface{} { return v.ModifiedDatetimeEnd }).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageReadSettingsOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageReadSettings) interface{} { return v.ModifiedDatetimeStart }).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageReadSettingsOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageReadSettings) interface{} { return v.PartitionRootPath }).(pulumi.AnyOutput)
}

// The prefix filter for the Google Cloud Storage object name. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageReadSettingsOutput) Prefix() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageReadSettings) interface{} { return v.Prefix }).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o GoogleCloudStorageReadSettingsOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageReadSettings) interface{} { return v.Recursive }).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'GoogleCloudStorageReadSettings'.
func (o GoogleCloudStorageReadSettingsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudStorageReadSettings) string { return v.Type }).(pulumi.StringOutput)
}

// Google Cloud Storage wildcardFileName. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageReadSettingsOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageReadSettings) interface{} { return v.WildcardFileName }).(pulumi.AnyOutput)
}

// Google Cloud Storage wildcardFolderPath. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageReadSettingsOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageReadSettings) interface{} { return v.WildcardFolderPath }).(pulumi.AnyOutput)
}

type GoogleCloudStorageReadSettingsPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudStorageReadSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudStorageReadSettings)(nil)).Elem()
}

func (o GoogleCloudStorageReadSettingsPtrOutput) ToGoogleCloudStorageReadSettingsPtrOutput() GoogleCloudStorageReadSettingsPtrOutput {
	return o
}

func (o GoogleCloudStorageReadSettingsPtrOutput) ToGoogleCloudStorageReadSettingsPtrOutputWithContext(ctx context.Context) GoogleCloudStorageReadSettingsPtrOutput {
	return o
}

func (o GoogleCloudStorageReadSettingsPtrOutput) Elem() GoogleCloudStorageReadSettingsOutput {
	return o.ApplyT(func(v *GoogleCloudStorageReadSettings) GoogleCloudStorageReadSettings {
		if v != nil {
			return *v
		}
		var ret GoogleCloudStorageReadSettings
		return ret
	}).(GoogleCloudStorageReadSettingsOutput)
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o GoogleCloudStorageReadSettingsPtrOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v *GoogleCloudStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.DeleteFilesAfterCompletion
	}).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o GoogleCloudStorageReadSettingsPtrOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v *GoogleCloudStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableMetricsCollection
	}).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o GoogleCloudStorageReadSettingsPtrOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v *GoogleCloudStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.EnablePartitionDiscovery
	}).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageReadSettingsPtrOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *GoogleCloudStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.FileListPath
	}).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o GoogleCloudStorageReadSettingsPtrOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v *GoogleCloudStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentConnections
	}).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageReadSettingsPtrOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v *GoogleCloudStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeEnd
	}).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageReadSettingsPtrOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v *GoogleCloudStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeStart
	}).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageReadSettingsPtrOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *GoogleCloudStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionRootPath
	}).(pulumi.AnyOutput)
}

// The prefix filter for the Google Cloud Storage object name. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageReadSettingsPtrOutput) Prefix() pulumi.AnyOutput {
	return o.ApplyT(func(v *GoogleCloudStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.Prefix
	}).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o GoogleCloudStorageReadSettingsPtrOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v *GoogleCloudStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.Recursive
	}).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'GoogleCloudStorageReadSettings'.
func (o GoogleCloudStorageReadSettingsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudStorageReadSettings) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Google Cloud Storage wildcardFileName. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageReadSettingsPtrOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v *GoogleCloudStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFileName
	}).(pulumi.AnyOutput)
}

// Google Cloud Storage wildcardFolderPath. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageReadSettingsPtrOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *GoogleCloudStorageReadSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFolderPath
	}).(pulumi.AnyOutput)
}

// Google Cloud Storage read settings.
type GoogleCloudStorageReadSettingsResponse struct {
	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
	DeleteFilesAfterCompletion interface{} `pulumi:"deleteFilesAfterCompletion"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery interface{} `pulumi:"enablePartitionDiscovery"`
	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
	FileListPath interface{} `pulumi:"fileListPath"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd interface{} `pulumi:"modifiedDatetimeEnd"`
	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart interface{} `pulumi:"modifiedDatetimeStart"`
	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath interface{} `pulumi:"partitionRootPath"`
	// The prefix filter for the Google Cloud Storage object name. Type: string (or Expression with resultType string).
	Prefix interface{} `pulumi:"prefix"`
	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
	Recursive interface{} `pulumi:"recursive"`
	// The read setting type.
	// Expected value is 'GoogleCloudStorageReadSettings'.
	Type string `pulumi:"type"`
	// Google Cloud Storage wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName interface{} `pulumi:"wildcardFileName"`
	// Google Cloud Storage wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath interface{} `pulumi:"wildcardFolderPath"`
}

// Google Cloud Storage read settings.
type GoogleCloudStorageReadSettingsResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudStorageReadSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudStorageReadSettingsResponse)(nil)).Elem()
}

func (o GoogleCloudStorageReadSettingsResponseOutput) ToGoogleCloudStorageReadSettingsResponseOutput() GoogleCloudStorageReadSettingsResponseOutput {
	return o
}

func (o GoogleCloudStorageReadSettingsResponseOutput) ToGoogleCloudStorageReadSettingsResponseOutputWithContext(ctx context.Context) GoogleCloudStorageReadSettingsResponseOutput {
	return o
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o GoogleCloudStorageReadSettingsResponseOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageReadSettingsResponse) interface{} { return v.DeleteFilesAfterCompletion }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o GoogleCloudStorageReadSettingsResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageReadSettingsResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o GoogleCloudStorageReadSettingsResponseOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageReadSettingsResponse) interface{} { return v.EnablePartitionDiscovery }).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageReadSettingsResponseOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageReadSettingsResponse) interface{} { return v.FileListPath }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o GoogleCloudStorageReadSettingsResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageReadSettingsResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageReadSettingsResponseOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageReadSettingsResponse) interface{} { return v.ModifiedDatetimeEnd }).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageReadSettingsResponseOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageReadSettingsResponse) interface{} { return v.ModifiedDatetimeStart }).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageReadSettingsResponseOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageReadSettingsResponse) interface{} { return v.PartitionRootPath }).(pulumi.AnyOutput)
}

// The prefix filter for the Google Cloud Storage object name. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageReadSettingsResponseOutput) Prefix() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageReadSettingsResponse) interface{} { return v.Prefix }).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o GoogleCloudStorageReadSettingsResponseOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageReadSettingsResponse) interface{} { return v.Recursive }).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'GoogleCloudStorageReadSettings'.
func (o GoogleCloudStorageReadSettingsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudStorageReadSettingsResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Google Cloud Storage wildcardFileName. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageReadSettingsResponseOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageReadSettingsResponse) interface{} { return v.WildcardFileName }).(pulumi.AnyOutput)
}

// Google Cloud Storage wildcardFolderPath. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageReadSettingsResponseOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleCloudStorageReadSettingsResponse) interface{} { return v.WildcardFolderPath }).(pulumi.AnyOutput)
}

type GoogleCloudStorageReadSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudStorageReadSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudStorageReadSettingsResponse)(nil)).Elem()
}

func (o GoogleCloudStorageReadSettingsResponsePtrOutput) ToGoogleCloudStorageReadSettingsResponsePtrOutput() GoogleCloudStorageReadSettingsResponsePtrOutput {
	return o
}

func (o GoogleCloudStorageReadSettingsResponsePtrOutput) ToGoogleCloudStorageReadSettingsResponsePtrOutputWithContext(ctx context.Context) GoogleCloudStorageReadSettingsResponsePtrOutput {
	return o
}

func (o GoogleCloudStorageReadSettingsResponsePtrOutput) Elem() GoogleCloudStorageReadSettingsResponseOutput {
	return o.ApplyT(func(v *GoogleCloudStorageReadSettingsResponse) GoogleCloudStorageReadSettingsResponse {
		if v != nil {
			return *v
		}
		var ret GoogleCloudStorageReadSettingsResponse
		return ret
	}).(GoogleCloudStorageReadSettingsResponseOutput)
}

// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
func (o GoogleCloudStorageReadSettingsResponsePtrOutput) DeleteFilesAfterCompletion() pulumi.AnyOutput {
	return o.ApplyT(func(v *GoogleCloudStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.DeleteFilesAfterCompletion
	}).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o GoogleCloudStorageReadSettingsResponsePtrOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v *GoogleCloudStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.DisableMetricsCollection
	}).(pulumi.AnyOutput)
}

// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
func (o GoogleCloudStorageReadSettingsResponsePtrOutput) EnablePartitionDiscovery() pulumi.AnyOutput {
	return o.ApplyT(func(v *GoogleCloudStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.EnablePartitionDiscovery
	}).(pulumi.AnyOutput)
}

// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageReadSettingsResponsePtrOutput) FileListPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *GoogleCloudStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.FileListPath
	}).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o GoogleCloudStorageReadSettingsResponsePtrOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v *GoogleCloudStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentConnections
	}).(pulumi.AnyOutput)
}

// The end of file's modified datetime. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageReadSettingsResponsePtrOutput) ModifiedDatetimeEnd() pulumi.AnyOutput {
	return o.ApplyT(func(v *GoogleCloudStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeEnd
	}).(pulumi.AnyOutput)
}

// The start of file's modified datetime. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageReadSettingsResponsePtrOutput) ModifiedDatetimeStart() pulumi.AnyOutput {
	return o.ApplyT(func(v *GoogleCloudStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.ModifiedDatetimeStart
	}).(pulumi.AnyOutput)
}

// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageReadSettingsResponsePtrOutput) PartitionRootPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *GoogleCloudStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.PartitionRootPath
	}).(pulumi.AnyOutput)
}

// The prefix filter for the Google Cloud Storage object name. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageReadSettingsResponsePtrOutput) Prefix() pulumi.AnyOutput {
	return o.ApplyT(func(v *GoogleCloudStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Prefix
	}).(pulumi.AnyOutput)
}

// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
func (o GoogleCloudStorageReadSettingsResponsePtrOutput) Recursive() pulumi.AnyOutput {
	return o.ApplyT(func(v *GoogleCloudStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Recursive
	}).(pulumi.AnyOutput)
}

// The read setting type.
// Expected value is 'GoogleCloudStorageReadSettings'.
func (o GoogleCloudStorageReadSettingsResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudStorageReadSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Google Cloud Storage wildcardFileName. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageReadSettingsResponsePtrOutput) WildcardFileName() pulumi.AnyOutput {
	return o.ApplyT(func(v *GoogleCloudStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFileName
	}).(pulumi.AnyOutput)
}

// Google Cloud Storage wildcardFolderPath. Type: string (or Expression with resultType string).
func (o GoogleCloudStorageReadSettingsResponsePtrOutput) WildcardFolderPath() pulumi.AnyOutput {
	return o.ApplyT(func(v *GoogleCloudStorageReadSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.WildcardFolderPath
	}).(pulumi.AnyOutput)
}

// Linked service for GoogleSheets.
type GoogleSheetsLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The api token for the GoogleSheets source.
	ApiToken interface{} `pulumi:"apiToken"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'GoogleSheets'.
	Type string `pulumi:"type"`
}

// GoogleSheetsLinkedServiceInput is an input type that accepts GoogleSheetsLinkedServiceArgs and GoogleSheetsLinkedServiceOutput values.
// You can construct a concrete instance of `GoogleSheetsLinkedServiceInput` via:
//
//	GoogleSheetsLinkedServiceArgs{...}
type GoogleSheetsLinkedServiceInput interface {
	pulumi.Input

	ToGoogleSheetsLinkedServiceOutput() GoogleSheetsLinkedServiceOutput
	ToGoogleSheetsLinkedServiceOutputWithContext(context.Context) GoogleSheetsLinkedServiceOutput
}

// Linked service for GoogleSheets.
type GoogleSheetsLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The api token for the GoogleSheets source.
	ApiToken pulumi.Input `pulumi:"apiToken"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'GoogleSheets'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GoogleSheetsLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleSheetsLinkedService)(nil)).Elem()
}

func (i GoogleSheetsLinkedServiceArgs) ToGoogleSheetsLinkedServiceOutput() GoogleSheetsLinkedServiceOutput {
	return i.ToGoogleSheetsLinkedServiceOutputWithContext(context.Background())
}

func (i GoogleSheetsLinkedServiceArgs) ToGoogleSheetsLinkedServiceOutputWithContext(ctx context.Context) GoogleSheetsLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleSheetsLinkedServiceOutput)
}

// Linked service for GoogleSheets.
type GoogleSheetsLinkedServiceOutput struct{ *pulumi.OutputState }

func (GoogleSheetsLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleSheetsLinkedService)(nil)).Elem()
}

func (o GoogleSheetsLinkedServiceOutput) ToGoogleSheetsLinkedServiceOutput() GoogleSheetsLinkedServiceOutput {
	return o
}

func (o GoogleSheetsLinkedServiceOutput) ToGoogleSheetsLinkedServiceOutputWithContext(ctx context.Context) GoogleSheetsLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o GoogleSheetsLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v GoogleSheetsLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The api token for the GoogleSheets source.
func (o GoogleSheetsLinkedServiceOutput) ApiToken() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleSheetsLinkedService) interface{} { return v.ApiToken }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o GoogleSheetsLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v GoogleSheetsLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o GoogleSheetsLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleSheetsLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o GoogleSheetsLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleSheetsLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o GoogleSheetsLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v GoogleSheetsLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Type of linked service.
// Expected value is 'GoogleSheets'.
func (o GoogleSheetsLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleSheetsLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Linked service for GoogleSheets.
type GoogleSheetsLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The api token for the GoogleSheets source.
	ApiToken interface{} `pulumi:"apiToken"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Type of linked service.
	// Expected value is 'GoogleSheets'.
	Type string `pulumi:"type"`
}

// Linked service for GoogleSheets.
type GoogleSheetsLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (GoogleSheetsLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleSheetsLinkedServiceResponse)(nil)).Elem()
}

func (o GoogleSheetsLinkedServiceResponseOutput) ToGoogleSheetsLinkedServiceResponseOutput() GoogleSheetsLinkedServiceResponseOutput {
	return o
}

func (o GoogleSheetsLinkedServiceResponseOutput) ToGoogleSheetsLinkedServiceResponseOutputWithContext(ctx context.Context) GoogleSheetsLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o GoogleSheetsLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v GoogleSheetsLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The api token for the GoogleSheets source.
func (o GoogleSheetsLinkedServiceResponseOutput) ApiToken() pulumi.AnyOutput {
	return o.ApplyT(func(v GoogleSheetsLinkedServiceResponse) interface{} { return v.ApiToken }).(pulumi.AnyOutput)
}

// The integration runtime reference.
func (o GoogleSheetsLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v GoogleSheetsLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o GoogleSheetsLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleSheetsLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o GoogleSheetsLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleSheetsLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o GoogleSheetsLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v GoogleSheetsLinkedServiceResponse) map[string]ParameterSpecificationResponse {
		return v.Parameters
	}).(ParameterSpecificationResponseMapOutput)
}

// Type of linked service.
// Expected value is 'GoogleSheets'.
func (o GoogleSheetsLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleSheetsLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Greenplum Database linked service.
type GreenplumLinkedService struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReference `pulumi:"pwd"`
	// Type of linked service.
	// Expected value is 'Greenplum'.
	Type string `pulumi:"type"`
}

// GreenplumLinkedServiceInput is an input type that accepts GreenplumLinkedServiceArgs and GreenplumLinkedServiceOutput values.
// You can construct a concrete instance of `GreenplumLinkedServiceInput` via:
//
//	GreenplumLinkedServiceArgs{...}
type GreenplumLinkedServiceInput interface {
	pulumi.Input

	ToGreenplumLinkedServiceOutput() GreenplumLinkedServiceOutput
	ToGreenplumLinkedServiceOutputWithContext(context.Context) GreenplumLinkedServiceOutput
}

// Greenplum Database linked service.
type GreenplumLinkedServiceArgs struct {
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString pulumi.Input `pulumi:"connectionString"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd AzureKeyVaultSecretReferencePtrInput `pulumi:"pwd"`
	// Type of linked service.
	// Expected value is 'Greenplum'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GreenplumLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GreenplumLinkedService)(nil)).Elem()
}

func (i GreenplumLinkedServiceArgs) ToGreenplumLinkedServiceOutput() GreenplumLinkedServiceOutput {
	return i.ToGreenplumLinkedServiceOutputWithContext(context.Background())
}

func (i GreenplumLinkedServiceArgs) ToGreenplumLinkedServiceOutputWithContext(ctx context.Context) GreenplumLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GreenplumLinkedServiceOutput)
}

// Greenplum Database linked service.
type GreenplumLinkedServiceOutput struct{ *pulumi.OutputState }

func (GreenplumLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GreenplumLinkedService)(nil)).Elem()
}

func (o GreenplumLinkedServiceOutput) ToGreenplumLinkedServiceOutput() GreenplumLinkedServiceOutput {
	return o
}

func (o GreenplumLinkedServiceOutput) ToGreenplumLinkedServiceOutputWithContext(ctx context.Context) GreenplumLinkedServiceOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o GreenplumLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v GreenplumLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o GreenplumLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v GreenplumLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o GreenplumLinkedServiceOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v GreenplumLinkedService) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o GreenplumLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GreenplumLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o GreenplumLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GreenplumLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o GreenplumLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v GreenplumLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o GreenplumLinkedServiceOutput) Pwd() AzureKeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v GreenplumLinkedService) *AzureKeyVaultSecretReference { return v.Pwd }).(AzureKeyVaultSecretReferencePtrOutput)
}

// Type of linked service.
// Expected value is 'Greenplum'.
func (o GreenplumLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GreenplumLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// Greenplum Database linked service.
type GreenplumLinkedServiceResponse struct {
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString interface{} `pulumi:"connectionString"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReferenceResponse `pulumi:"pwd"`
	// Type of linked service.
	// Expected value is 'Greenplum'.
	Type string `pulumi:"type"`
}

// Greenplum Database linked service.
type GreenplumLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (GreenplumLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GreenplumLinkedServiceResponse)(nil)).Elem()
}

func (o GreenplumLinkedServiceResponseOutput) ToGreenplumLinkedServiceResponseOutput() GreenplumLinkedServiceResponseOutput {
	return o
}

func (o GreenplumLinkedServiceResponseOutput) ToGreenplumLinkedServiceResponseOutputWithContext(ctx context.Context) GreenplumLinkedServiceResponseOutput {
	return o
}

// List of tags that can be used for describing the linked service.
func (o GreenplumLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v GreenplumLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The integration runtime reference.
func (o GreenplumLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v GreenplumLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
func (o GreenplumLinkedServiceResponseOutput) ConnectionString() pulumi.AnyOutput {
	return o.ApplyT(func(v GreenplumLinkedServiceResponse) interface{} { return v.ConnectionString }).(pulumi.AnyOutput)
}

// Linked service description.
func (o GreenplumLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GreenplumLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o GreenplumLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GreenplumLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// Parameters for linked service.
func (o GreenplumLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v GreenplumLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The Azure key vault secret reference of password in connection string.
func (o GreenplumLinkedServiceResponseOutput) Pwd() AzureKeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v GreenplumLinkedServiceResponse) *AzureKeyVaultSecretReferenceResponse { return v.Pwd }).(AzureKeyVaultSecretReferenceResponsePtrOutput)
}

// Type of linked service.
// Expected value is 'Greenplum'.
func (o GreenplumLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GreenplumLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Greenplum Database source.
type GreenplumSource struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'GreenplumSource'.
	Type string `pulumi:"type"`
}

// GreenplumSourceInput is an input type that accepts GreenplumSourceArgs and GreenplumSourceOutput values.
// You can construct a concrete instance of `GreenplumSourceInput` via:
//
//	GreenplumSourceArgs{...}
type GreenplumSourceInput interface {
	pulumi.Input

	ToGreenplumSourceOutput() GreenplumSourceOutput
	ToGreenplumSourceOutputWithContext(context.Context) GreenplumSourceOutput
}

// A copy activity Greenplum Database source.
type GreenplumSourceArgs struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns pulumi.Input `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection pulumi.Input `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections pulumi.Input `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query pulumi.Input `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout pulumi.Input `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount pulumi.Input `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait pulumi.Input `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'GreenplumSource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GreenplumSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GreenplumSource)(nil)).Elem()
}

func (i GreenplumSourceArgs) ToGreenplumSourceOutput() GreenplumSourceOutput {
	return i.ToGreenplumSourceOutputWithContext(context.Background())
}

func (i GreenplumSourceArgs) ToGreenplumSourceOutputWithContext(ctx context.Context) GreenplumSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GreenplumSourceOutput)
}

// A copy activity Greenplum Database source.
type GreenplumSourceOutput struct{ *pulumi.OutputState }

func (GreenplumSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GreenplumSource)(nil)).Elem()
}

func (o GreenplumSourceOutput) ToGreenplumSourceOutput() GreenplumSourceOutput {
	return o
}

func (o GreenplumSourceOutput) ToGreenplumSourceOutputWithContext(ctx context.Context) GreenplumSourceOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o GreenplumSourceOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v GreenplumSource) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o GreenplumSourceOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v GreenplumSource) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o GreenplumSourceOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v GreenplumSource) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o GreenplumSourceOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v GreenplumSource) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o GreenplumSourceOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v GreenplumSource) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o GreenplumSourceOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v GreenplumSource) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o GreenplumSourceOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v GreenplumSource) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'GreenplumSource'.
func (o GreenplumSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GreenplumSource) string { return v.Type }).(pulumi.StringOutput)
}

// A copy activity Greenplum Database source.
type GreenplumSourceResponse struct {
	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
	AdditionalColumns interface{} `pulumi:"additionalColumns"`
	// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableMetricsCollection interface{} `pulumi:"disableMetricsCollection"`
	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections interface{} `pulumi:"maxConcurrentConnections"`
	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query interface{} `pulumi:"query"`
	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout interface{} `pulumi:"queryTimeout"`
	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount interface{} `pulumi:"sourceRetryCount"`
	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait interface{} `pulumi:"sourceRetryWait"`
	// Copy source type.
	// Expected value is 'GreenplumSource'.
	Type string `pulumi:"type"`
}

// A copy activity Greenplum Database source.
type GreenplumSourceResponseOutput struct{ *pulumi.OutputState }

func (GreenplumSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GreenplumSourceResponse)(nil)).Elem()
}

func (o GreenplumSourceResponseOutput) ToGreenplumSourceResponseOutput() GreenplumSourceResponseOutput {
	return o
}

func (o GreenplumSourceResponseOutput) ToGreenplumSourceResponseOutputWithContext(ctx context.Context) GreenplumSourceResponseOutput {
	return o
}

// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
func (o GreenplumSourceResponseOutput) AdditionalColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v GreenplumSourceResponse) interface{} { return v.AdditionalColumns }).(pulumi.AnyOutput)
}

// If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
func (o GreenplumSourceResponseOutput) DisableMetricsCollection() pulumi.AnyOutput {
	return o.ApplyT(func(v GreenplumSourceResponse) interface{} { return v.DisableMetricsCollection }).(pulumi.AnyOutput)
}

// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
func (o GreenplumSourceResponseOutput) MaxConcurrentConnections() pulumi.AnyOutput {
	return o.ApplyT(func(v GreenplumSourceResponse) interface{} { return v.MaxConcurrentConnections }).(pulumi.AnyOutput)
}

// A query to retrieve data from source. Type: string (or Expression with resultType string).
func (o GreenplumSourceResponseOutput) Query() pulumi.AnyOutput {
	return o.ApplyT(func(v GreenplumSourceResponse) interface{} { return v.Query }).(pulumi.AnyOutput)
}

// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o GreenplumSourceResponseOutput) QueryTimeout() pulumi.AnyOutput {
	return o.ApplyT(func(v GreenplumSourceResponse) interface{} { return v.QueryTimeout }).(pulumi.AnyOutput)
}

// Source retry count. Type: integer (or Expression with resultType integer).
func (o GreenplumSourceResponseOutput) SourceRetryCount() pulumi.AnyOutput {
	return o.ApplyT(func(v GreenplumSourceResponse) interface{} { return v.SourceRetryCount }).(pulumi.AnyOutput)
}

// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
func (o GreenplumSourceResponseOutput) SourceRetryWait() pulumi.AnyOutput {
	return o.ApplyT(func(v GreenplumSourceResponse) interface{} { return v.SourceRetryWait }).(pulumi.AnyOutput)
}

// Copy source type.
// Expected value is 'GreenplumSource'.
func (o GreenplumSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GreenplumSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Greenplum Database dataset.
type GreenplumTableDataset struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReference `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of Greenplum. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'GreenplumTable'.
	Type string `pulumi:"type"`
}

// GreenplumTableDatasetInput is an input type that accepts GreenplumTableDatasetArgs and GreenplumTableDatasetOutput values.
// You can construct a concrete instance of `GreenplumTableDatasetInput` via:
//
//	GreenplumTableDatasetArgs{...}
type GreenplumTableDatasetInput interface {
	pulumi.Input

	ToGreenplumTableDatasetOutput() GreenplumTableDatasetOutput
	ToGreenplumTableDatasetOutputWithContext(context.Context) GreenplumTableDatasetOutput
}

// Greenplum Database dataset.
type GreenplumTableDatasetArgs struct {
	// List of tags that can be used for describing the Dataset.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// Dataset description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder DatasetFolderPtrInput `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceInput `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema pulumi.Input `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure pulumi.Input `pulumi:"structure"`
	// The table name of Greenplum. Type: string (or Expression with resultType string).
	Table pulumi.Input `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName pulumi.Input `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'GreenplumTable'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GreenplumTableDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GreenplumTableDataset)(nil)).Elem()
}

func (i GreenplumTableDatasetArgs) ToGreenplumTableDatasetOutput() GreenplumTableDatasetOutput {
	return i.ToGreenplumTableDatasetOutputWithContext(context.Background())
}

func (i GreenplumTableDatasetArgs) ToGreenplumTableDatasetOutputWithContext(ctx context.Context) GreenplumTableDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GreenplumTableDatasetOutput)
}

// Greenplum Database dataset.
type GreenplumTableDatasetOutput struct{ *pulumi.OutputState }

func (GreenplumTableDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GreenplumTableDataset)(nil)).Elem()
}

func (o GreenplumTableDatasetOutput) ToGreenplumTableDatasetOutput() GreenplumTableDatasetOutput {
	return o
}

func (o GreenplumTableDatasetOutput) ToGreenplumTableDatasetOutputWithContext(ctx context.Context) GreenplumTableDatasetOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o GreenplumTableDatasetOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v GreenplumTableDataset) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o GreenplumTableDatasetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GreenplumTableDataset) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o GreenplumTableDatasetOutput) Folder() DatasetFolderPtrOutput {
	return o.ApplyT(func(v GreenplumTableDataset) *DatasetFolder { return v.Folder }).(DatasetFolderPtrOutput)
}

// Linked service reference.
func (o GreenplumTableDatasetOutput) LinkedServiceName() LinkedServiceReferenceOutput {
	return o.ApplyT(func(v GreenplumTableDataset) LinkedServiceReference { return v.LinkedServiceName }).(LinkedServiceReferenceOutput)
}

// Parameters for dataset.
func (o GreenplumTableDatasetOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v GreenplumTableDataset) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o GreenplumTableDatasetOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v GreenplumTableDataset) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o GreenplumTableDatasetOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v GreenplumTableDataset) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of Greenplum. Type: string (or Expression with resultType string).
func (o GreenplumTableDatasetOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v GreenplumTableDataset) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o GreenplumTableDatasetOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v GreenplumTableDataset) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'GreenplumTable'.
func (o GreenplumTableDatasetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GreenplumTableDataset) string { return v.Type }).(pulumi.StringOutput)
}

// Greenplum Database dataset.
type GreenplumTableDatasetResponse struct {
	// List of tags that can be used for describing the Dataset.
	Annotations []interface{} `pulumi:"annotations"`
	// Dataset description.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetResponseFolder `pulumi:"folder"`
	// Linked service reference.
	LinkedServiceName LinkedServiceReferenceResponse `pulumi:"linkedServiceName"`
	// Parameters for dataset.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
	Schema interface{} `pulumi:"schema"`
	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure interface{} `pulumi:"structure"`
	// The table name of Greenplum. Type: string (or Expression with resultType string).
	Table interface{} `pulumi:"table"`
	// This property will be retired. Please consider using schema + table properties instead.
	TableName interface{} `pulumi:"tableName"`
	// Type of dataset.
	// Expected value is 'GreenplumTable'.
	Type string `pulumi:"type"`
}

// Greenplum Database dataset.
type GreenplumTableDatasetResponseOutput struct{ *pulumi.OutputState }

func (GreenplumTableDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GreenplumTableDatasetResponse)(nil)).Elem()
}

func (o GreenplumTableDatasetResponseOutput) ToGreenplumTableDatasetResponseOutput() GreenplumTableDatasetResponseOutput {
	return o
}

func (o GreenplumTableDatasetResponseOutput) ToGreenplumTableDatasetResponseOutputWithContext(ctx context.Context) GreenplumTableDatasetResponseOutput {
	return o
}

// List of tags that can be used for describing the Dataset.
func (o GreenplumTableDatasetResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v GreenplumTableDatasetResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// Dataset description.
func (o GreenplumTableDatasetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GreenplumTableDatasetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
func (o GreenplumTableDatasetResponseOutput) Folder() DatasetResponseFolderPtrOutput {
	return o.ApplyT(func(v GreenplumTableDatasetResponse) *DatasetResponseFolder { return v.Folder }).(DatasetResponseFolderPtrOutput)
}

// Linked service reference.
func (o GreenplumTableDatasetResponseOutput) LinkedServiceName() LinkedServiceReferenceResponseOutput {
	return o.ApplyT(func(v GreenplumTableDatasetResponse) LinkedServiceReferenceResponse { return v.LinkedServiceName }).(LinkedServiceReferenceResponseOutput)
}

// Parameters for dataset.
func (o GreenplumTableDatasetResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v GreenplumTableDatasetResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
func (o GreenplumTableDatasetResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v GreenplumTableDatasetResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
func (o GreenplumTableDatasetResponseOutput) Structure() pulumi.AnyOutput {
	return o.ApplyT(func(v GreenplumTableDatasetResponse) interface{} { return v.Structure }).(pulumi.AnyOutput)
}

// The table name of Greenplum. Type: string (or Expression with resultType string).
func (o GreenplumTableDatasetResponseOutput) Table() pulumi.AnyOutput {
	return o.ApplyT(func(v GreenplumTableDatasetResponse) interface{} { return v.Table }).(pulumi.AnyOutput)
}

// This property will be retired. Please consider using schema + table properties instead.
func (o GreenplumTableDatasetResponseOutput) TableName() pulumi.AnyOutput {
	return o.ApplyT(func(v GreenplumTableDatasetResponse) interface{} { return v.TableName }).(pulumi.AnyOutput)
}

// Type of dataset.
// Expected value is 'GreenplumTable'.
func (o GreenplumTableDatasetResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GreenplumTableDatasetResponse) string { return v.Type }).(pulumi.StringOutput)
}

// HBase server linked service.
type HBaseLinkedService struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication mechanism to use to connect to the HBase server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The IP address or host name of the HBase server. (i.e. 192.168.222.160)
	Host interface{} `pulumi:"host"`
	// The partial URL corresponding to the HBase server. (i.e. /gateway/sandbox/hbase/version)
	HttpPath interface{} `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecification `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password interface{} `pulumi:"password"`
	// The TCP port that the HBase instance uses to listen for client connections. The default value is 9090.
	Port interface{} `pulumi:"port"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'HBase'.
	Type string `pulumi:"type"`
	// The user name used to connect to the HBase instance.
	Username interface{} `pulumi:"username"`
}

// HBaseLinkedServiceInput is an input type that accepts HBaseLinkedServiceArgs and HBaseLinkedServiceOutput values.
// You can construct a concrete instance of `HBaseLinkedServiceInput` via:
//
//	HBaseLinkedServiceArgs{...}
type HBaseLinkedServiceInput interface {
	pulumi.Input

	ToHBaseLinkedServiceOutput() HBaseLinkedServiceOutput
	ToHBaseLinkedServiceOutputWithContext(context.Context) HBaseLinkedServiceOutput
}

// HBase server linked service.
type HBaseLinkedServiceArgs struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch pulumi.Input `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert pulumi.Input `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations pulumi.ArrayInput `pulumi:"annotations"`
	// The authentication mechanism to use to connect to the HBase server.
	AuthenticationType pulumi.StringInput `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia IntegrationRuntimeReferencePtrInput `pulumi:"connectVia"`
	// Linked service description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl pulumi.Input `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential pulumi.StringPtrInput `pulumi:"encryptedCredential"`
	// The IP address or host name of the HBase server. (i.e. 192.168.222.160)
	Host pulumi.Input `pulumi:"host"`
	// The partial URL corresponding to the HBase server. (i.e. /gateway/sandbox/hbase/version)
	HttpPath pulumi.Input `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters ParameterSpecificationMapInput `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password pulumi.Input `pulumi:"password"`
	// The TCP port that the HBase instance uses to listen for client connections. The default value is 9090.
	Port pulumi.Input `pulumi:"port"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath pulumi.Input `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'HBase'.
	Type pulumi.StringInput `pulumi:"type"`
	// The user name used to connect to the HBase instance.
	Username pulumi.Input `pulumi:"username"`
}

func (HBaseLinkedServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HBaseLinkedService)(nil)).Elem()
}

func (i HBaseLinkedServiceArgs) ToHBaseLinkedServiceOutput() HBaseLinkedServiceOutput {
	return i.ToHBaseLinkedServiceOutputWithContext(context.Background())
}

func (i HBaseLinkedServiceArgs) ToHBaseLinkedServiceOutputWithContext(ctx context.Context) HBaseLinkedServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HBaseLinkedServiceOutput)
}

// HBase server linked service.
type HBaseLinkedServiceOutput struct{ *pulumi.OutputState }

func (HBaseLinkedServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HBaseLinkedService)(nil)).Elem()
}

func (o HBaseLinkedServiceOutput) ToHBaseLinkedServiceOutput() HBaseLinkedServiceOutput {
	return o
}

func (o HBaseLinkedServiceOutput) ToHBaseLinkedServiceOutputWithContext(ctx context.Context) HBaseLinkedServiceOutput {
	return o
}

// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
func (o HBaseLinkedServiceOutput) AllowHostNameCNMismatch() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseLinkedService) interface{} { return v.AllowHostNameCNMismatch }).(pulumi.AnyOutput)
}

// Specifies whether to allow self-signed certificates from the server. The default value is false.
func (o HBaseLinkedServiceOutput) AllowSelfSignedServerCert() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseLinkedService) interface{} { return v.AllowSelfSignedServerCert }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o HBaseLinkedServiceOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v HBaseLinkedService) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication mechanism to use to connect to the HBase server.
func (o HBaseLinkedServiceOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v HBaseLinkedService) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The integration runtime reference.
func (o HBaseLinkedServiceOutput) ConnectVia() IntegrationRuntimeReferencePtrOutput {
	return o.ApplyT(func(v HBaseLinkedService) *IntegrationRuntimeReference { return v.ConnectVia }).(IntegrationRuntimeReferencePtrOutput)
}

// Linked service description.
func (o HBaseLinkedServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HBaseLinkedService) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
func (o HBaseLinkedServiceOutput) EnableSsl() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseLinkedService) interface{} { return v.EnableSsl }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o HBaseLinkedServiceOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HBaseLinkedService) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The IP address or host name of the HBase server. (i.e. 192.168.222.160)
func (o HBaseLinkedServiceOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseLinkedService) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// The partial URL corresponding to the HBase server. (i.e. /gateway/sandbox/hbase/version)
func (o HBaseLinkedServiceOutput) HttpPath() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseLinkedService) interface{} { return v.HttpPath }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o HBaseLinkedServiceOutput) Parameters() ParameterSpecificationMapOutput {
	return o.ApplyT(func(v HBaseLinkedService) map[string]ParameterSpecification { return v.Parameters }).(ParameterSpecificationMapOutput)
}

// The password corresponding to the user name.
func (o HBaseLinkedServiceOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseLinkedService) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port that the HBase instance uses to listen for client connections. The default value is 9090.
func (o HBaseLinkedServiceOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseLinkedService) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
func (o HBaseLinkedServiceOutput) TrustedCertPath() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseLinkedService) interface{} { return v.TrustedCertPath }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'HBase'.
func (o HBaseLinkedServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HBaseLinkedService) string { return v.Type }).(pulumi.StringOutput)
}

// The user name used to connect to the HBase instance.
func (o HBaseLinkedServiceOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseLinkedService) interface{} { return v.Username }).(pulumi.AnyOutput)
}

// HBase server linked service.
type HBaseLinkedServiceResponse struct {
	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
	AllowHostNameCNMismatch interface{} `pulumi:"allowHostNameCNMismatch"`
	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert interface{} `pulumi:"allowSelfSignedServerCert"`
	// List of tags that can be used for describing the linked service.
	Annotations []interface{} `pulumi:"annotations"`
	// The authentication mechanism to use to connect to the HBase server.
	AuthenticationType string `pulumi:"authenticationType"`
	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReferenceResponse `pulumi:"connectVia"`
	// Linked service description.
	Description *string `pulumi:"description"`
	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSsl interface{} `pulumi:"enableSsl"`
	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The IP address or host name of the HBase server. (i.e. 192.168.222.160)
	Host interface{} `pulumi:"host"`
	// The partial URL corresponding to the HBase server. (i.e. /gateway/sandbox/hbase/version)
	HttpPath interface{} `pulumi:"httpPath"`
	// Parameters for linked service.
	Parameters map[string]ParameterSpecificationResponse `pulumi:"parameters"`
	// The password corresponding to the user name.
	Password interface{} `pulumi:"password"`
	// The TCP port that the HBase instance uses to listen for client connections. The default value is 9090.
	Port interface{} `pulumi:"port"`
	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
	TrustedCertPath interface{} `pulumi:"trustedCertPath"`
	// Type of linked service.
	// Expected value is 'HBase'.
	Type string `pulumi:"type"`
	// The user name used to connect to the HBase instance.
	Username interface{} `pulumi:"username"`
}

// HBase server linked service.
type HBaseLinkedServiceResponseOutput struct{ *pulumi.OutputState }

func (HBaseLinkedServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HBaseLinkedServiceResponse)(nil)).Elem()
}

func (o HBaseLinkedServiceResponseOutput) ToHBaseLinkedServiceResponseOutput() HBaseLinkedServiceResponseOutput {
	return o
}

func (o HBaseLinkedServiceResponseOutput) ToHBaseLinkedServiceResponseOutputWithContext(ctx context.Context) HBaseLinkedServiceResponseOutput {
	return o
}

// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false.
func (o HBaseLinkedServiceResponseOutput) AllowHostNameCNMismatch() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) interface{} { return v.AllowHostNameCNMismatch }).(pulumi.AnyOutput)
}

// Specifies whether to allow self-signed certificates from the server. The default value is false.
func (o HBaseLinkedServiceResponseOutput) AllowSelfSignedServerCert() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) interface{} { return v.AllowSelfSignedServerCert }).(pulumi.AnyOutput)
}

// List of tags that can be used for describing the linked service.
func (o HBaseLinkedServiceResponseOutput) Annotations() pulumi.ArrayOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) []interface{} { return v.Annotations }).(pulumi.ArrayOutput)
}

// The authentication mechanism to use to connect to the HBase server.
func (o HBaseLinkedServiceResponseOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) string { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The integration runtime reference.
func (o HBaseLinkedServiceResponseOutput) ConnectVia() IntegrationRuntimeReferenceResponsePtrOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) *IntegrationRuntimeReferenceResponse { return v.ConnectVia }).(IntegrationRuntimeReferenceResponsePtrOutput)
}

// Linked service description.
func (o HBaseLinkedServiceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
func (o HBaseLinkedServiceResponseOutput) EnableSsl() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) interface{} { return v.EnableSsl }).(pulumi.AnyOutput)
}

// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string.
func (o HBaseLinkedServiceResponseOutput) EncryptedCredential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) *string { return v.EncryptedCredential }).(pulumi.StringPtrOutput)
}

// The IP address or host name of the HBase server. (i.e. 192.168.222.160)
func (o HBaseLinkedServiceResponseOutput) Host() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) interface{} { return v.Host }).(pulumi.AnyOutput)
}

// The partial URL corresponding to the HBase server. (i.e. /gateway/sandbox/hbase/version)
func (o HBaseLinkedServiceResponseOutput) HttpPath() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) interface{} { return v.HttpPath }).(pulumi.AnyOutput)
}

// Parameters for linked service.
func (o HBaseLinkedServiceResponseOutput) Parameters() ParameterSpecificationResponseMapOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) map[string]ParameterSpecificationResponse { return v.Parameters }).(ParameterSpecificationResponseMapOutput)
}

// The password corresponding to the user name.
func (o HBaseLinkedServiceResponseOutput) Password() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) interface{} { return v.Password }).(pulumi.AnyOutput)
}

// The TCP port that the HBase instance uses to listen for client connections. The default value is 9090.
func (o HBaseLinkedServiceResponseOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR.
func (o HBaseLinkedServiceResponseOutput) TrustedCertPath() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) interface{} { return v.TrustedCertPath }).(pulumi.AnyOutput)
}

// Type of linked service.
// Expected value is 'HBase'.
func (o HBaseLinkedServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The user name used to connect to the HBase instance.
func (o HBaseLinkedServiceResponseOutput) Username() pulumi.AnyOutput {
	return o.ApplyT(func(v HBaseLinkedServiceResponse) interface{} { return v.Username }).(pulumi.AnyOutput)
}

type SSISExecutionParameterMapMap map[string]SSISExecutionParameterMapInput

func (SSISExecutionParameterMapMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]map[string]SSISExecutionParameter)(nil)).Elem()
}

func (i SSISExecutionParameterMapMap) ToSSISExecutionParameterMapMapOutput() SSISExecutionParameterMapMapOutput {
	return i.ToSSISExecutionParameterMapMapOutputWithContext(context.Background())
}

func (i SSISExecutionParameterMapMap) ToSSISExecutionParameterMapMapOutputWithContext(ctx context.Context) SSISExecutionParameterMapMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SSISExecutionParameterMapMapOutput)
}

// SSISExecutionParameterMapMapInput is an input type that accepts SSISExecutionParameterMapMap and SSISExecutionParameterMapMapOutput values.
// You can construct a concrete instance of `SSISExecutionParameterMapMapInput` via:
//
//	SSISExecutionParameterMapMap{ "key": SSISExecutionParameterMap{ "key": SSISExecutionParameterArgs{...} } }
type SSISExecutionParameterMapMapInput interface {
	pulumi.Input

	ToSSISExecutionParameterMapMapOutput() SSISExecutionParameterMapMapOutput
	ToSSISExecutionParameterMapMapOutputWithContext(context.Context) SSISExecutionParameterMapMapOutput
}

type SSISExecutionParameterMapMapOutput struct{ *pulumi.OutputState }

func (SSISExecutionParameterMapMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]map[string]SSISExecutionParameter)(nil)).Elem()
}

func (o SSISExecutionParameterMapMapOutput) ToSSISExecutionParameterMapMapOutput() SSISExecutionParameterMapMapOutput {
	return o
}

func (o SSISExecutionParameterMapMapOutput) ToSSISExecutionParameterMapMapOutputWithContext(ctx context.Context) SSISExecutionParameterMapMapOutput {
	return o
}

func (o SSISExecutionParameterMapMapOutput) MapIndex(k pulumi.StringInput) SSISExecutionParameterMapOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) map[string]SSISExecutionParameter {
		return vs[0].(map[string]map[string]SSISExecutionParameter)[vs[1].(string)]
	}).(SSISExecutionParameterMapOutput)
}

type SSISExecutionParameterResponseMapMapOutput struct{ *pulumi.OutputState }

func (SSISExecutionParameterResponseMapMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]map[string]SSISExecutionParameterResponse)(nil)).Elem()
}

func (o SSISExecutionParameterResponseMapMapOutput) ToSSISExecutionParameterResponseMapMapOutput() SSISExecutionParameterResponseMapMapOutput {
	return o
}

func (o SSISExecutionParameterResponseMapMapOutput) ToSSISExecutionParameterResponseMapMapOutputWithContext(ctx context.Context) SSISExecutionParameterResponseMapMapOutput {
	return o
}

func (o SSISExecutionParameterResponseMapMapOutput) MapIndex(k pulumi.StringInput) SSISExecutionParameterResponseMapOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) map[string]SSISExecutionParameterResponse {
		return vs[0].(map[string]map[string]SSISExecutionParameterResponse)[vs[1].(string)]
	}).(SSISExecutionParameterResponseMapOutput)
}

func init() {
	pulumi.RegisterOutputType(ActivityDependencyOutput{})
	pulumi.RegisterOutputType(ActivityDependencyArrayOutput{})
	pulumi.RegisterOutputType(ActivityDependencyResponseOutput{})
	pulumi.RegisterOutputType(ActivityDependencyResponseArrayOutput{})
	pulumi.RegisterOutputType(ActivityPolicyOutput{})
	pulumi.RegisterOutputType(ActivityPolicyPtrOutput{})
	pulumi.RegisterOutputType(ActivityPolicyResponseOutput{})
	pulumi.RegisterOutputType(ActivityPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(AmazonMWSLinkedServiceOutput{})
	pulumi.RegisterOutputType(AmazonMWSLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AmazonMWSObjectDatasetOutput{})
	pulumi.RegisterOutputType(AmazonMWSObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(AmazonMWSSourceOutput{})
	pulumi.RegisterOutputType(AmazonMWSSourceResponseOutput{})
	pulumi.RegisterOutputType(AmazonRdsForOracleLinkedServiceOutput{})
	pulumi.RegisterOutputType(AmazonRdsForOracleLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AmazonRdsForOraclePartitionSettingsOutput{})
	pulumi.RegisterOutputType(AmazonRdsForOraclePartitionSettingsPtrOutput{})
	pulumi.RegisterOutputType(AmazonRdsForOraclePartitionSettingsResponseOutput{})
	pulumi.RegisterOutputType(AmazonRdsForOraclePartitionSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(AmazonRdsForOracleSourceOutput{})
	pulumi.RegisterOutputType(AmazonRdsForOracleSourceResponseOutput{})
	pulumi.RegisterOutputType(AmazonRdsForOracleTableDatasetOutput{})
	pulumi.RegisterOutputType(AmazonRdsForOracleTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(AmazonRdsForSqlServerLinkedServiceOutput{})
	pulumi.RegisterOutputType(AmazonRdsForSqlServerLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AmazonRdsForSqlServerSourceOutput{})
	pulumi.RegisterOutputType(AmazonRdsForSqlServerSourceResponseOutput{})
	pulumi.RegisterOutputType(AmazonRdsForSqlServerTableDatasetOutput{})
	pulumi.RegisterOutputType(AmazonRdsForSqlServerTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(AmazonRedshiftLinkedServiceOutput{})
	pulumi.RegisterOutputType(AmazonRedshiftLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AmazonRedshiftSourceOutput{})
	pulumi.RegisterOutputType(AmazonRedshiftSourceResponseOutput{})
	pulumi.RegisterOutputType(AmazonRedshiftTableDatasetOutput{})
	pulumi.RegisterOutputType(AmazonRedshiftTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(AmazonS3CompatibleLinkedServiceOutput{})
	pulumi.RegisterOutputType(AmazonS3CompatibleLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AmazonS3CompatibleLocationOutput{})
	pulumi.RegisterOutputType(AmazonS3CompatibleLocationResponseOutput{})
	pulumi.RegisterOutputType(AmazonS3CompatibleReadSettingsOutput{})
	pulumi.RegisterOutputType(AmazonS3CompatibleReadSettingsPtrOutput{})
	pulumi.RegisterOutputType(AmazonS3CompatibleReadSettingsResponseOutput{})
	pulumi.RegisterOutputType(AmazonS3CompatibleReadSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(AmazonS3DatasetOutput{})
	pulumi.RegisterOutputType(AmazonS3DatasetResponseOutput{})
	pulumi.RegisterOutputType(AmazonS3LinkedServiceOutput{})
	pulumi.RegisterOutputType(AmazonS3LinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AmazonS3LocationOutput{})
	pulumi.RegisterOutputType(AmazonS3LocationResponseOutput{})
	pulumi.RegisterOutputType(AmazonS3ReadSettingsOutput{})
	pulumi.RegisterOutputType(AmazonS3ReadSettingsPtrOutput{})
	pulumi.RegisterOutputType(AmazonS3ReadSettingsResponseOutput{})
	pulumi.RegisterOutputType(AmazonS3ReadSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(AppFiguresLinkedServiceOutput{})
	pulumi.RegisterOutputType(AppFiguresLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AppendVariableActivityOutput{})
	pulumi.RegisterOutputType(AppendVariableActivityResponseOutput{})
	pulumi.RegisterOutputType(ArmIdWrapperResponseOutput{})
	pulumi.RegisterOutputType(ArmIdWrapperResponsePtrOutput{})
	pulumi.RegisterOutputType(AsanaLinkedServiceOutput{})
	pulumi.RegisterOutputType(AsanaLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AvroDatasetOutput{})
	pulumi.RegisterOutputType(AvroDatasetResponseOutput{})
	pulumi.RegisterOutputType(AvroFormatOutput{})
	pulumi.RegisterOutputType(AvroFormatPtrOutput{})
	pulumi.RegisterOutputType(AvroFormatResponseOutput{})
	pulumi.RegisterOutputType(AvroFormatResponsePtrOutput{})
	pulumi.RegisterOutputType(AvroSinkOutput{})
	pulumi.RegisterOutputType(AvroSinkResponseOutput{})
	pulumi.RegisterOutputType(AvroSourceOutput{})
	pulumi.RegisterOutputType(AvroSourceResponseOutput{})
	pulumi.RegisterOutputType(AvroWriteSettingsOutput{})
	pulumi.RegisterOutputType(AvroWriteSettingsPtrOutput{})
	pulumi.RegisterOutputType(AvroWriteSettingsResponseOutput{})
	pulumi.RegisterOutputType(AvroWriteSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(AzPowerShellSetupOutput{})
	pulumi.RegisterOutputType(AzPowerShellSetupResponseOutput{})
	pulumi.RegisterOutputType(AzureBatchLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureBatchLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureBlobDatasetOutput{})
	pulumi.RegisterOutputType(AzureBlobDatasetResponseOutput{})
	pulumi.RegisterOutputType(AzureBlobFSDatasetOutput{})
	pulumi.RegisterOutputType(AzureBlobFSDatasetResponseOutput{})
	pulumi.RegisterOutputType(AzureBlobFSLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureBlobFSLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureBlobFSLocationOutput{})
	pulumi.RegisterOutputType(AzureBlobFSLocationResponseOutput{})
	pulumi.RegisterOutputType(AzureBlobFSReadSettingsOutput{})
	pulumi.RegisterOutputType(AzureBlobFSReadSettingsPtrOutput{})
	pulumi.RegisterOutputType(AzureBlobFSReadSettingsResponseOutput{})
	pulumi.RegisterOutputType(AzureBlobFSReadSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureBlobFSSinkOutput{})
	pulumi.RegisterOutputType(AzureBlobFSSinkResponseOutput{})
	pulumi.RegisterOutputType(AzureBlobFSSourceOutput{})
	pulumi.RegisterOutputType(AzureBlobFSSourceResponseOutput{})
	pulumi.RegisterOutputType(AzureBlobFSWriteSettingsOutput{})
	pulumi.RegisterOutputType(AzureBlobFSWriteSettingsPtrOutput{})
	pulumi.RegisterOutputType(AzureBlobFSWriteSettingsResponseOutput{})
	pulumi.RegisterOutputType(AzureBlobFSWriteSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureBlobStorageLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureBlobStorageLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureBlobStorageLocationOutput{})
	pulumi.RegisterOutputType(AzureBlobStorageLocationResponseOutput{})
	pulumi.RegisterOutputType(AzureBlobStorageReadSettingsOutput{})
	pulumi.RegisterOutputType(AzureBlobStorageReadSettingsPtrOutput{})
	pulumi.RegisterOutputType(AzureBlobStorageReadSettingsResponseOutput{})
	pulumi.RegisterOutputType(AzureBlobStorageReadSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureBlobStorageWriteSettingsOutput{})
	pulumi.RegisterOutputType(AzureBlobStorageWriteSettingsPtrOutput{})
	pulumi.RegisterOutputType(AzureBlobStorageWriteSettingsResponseOutput{})
	pulumi.RegisterOutputType(AzureBlobStorageWriteSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureDataExplorerCommandActivityOutput{})
	pulumi.RegisterOutputType(AzureDataExplorerCommandActivityResponseOutput{})
	pulumi.RegisterOutputType(AzureDataExplorerLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureDataExplorerLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureDataExplorerSinkOutput{})
	pulumi.RegisterOutputType(AzureDataExplorerSinkResponseOutput{})
	pulumi.RegisterOutputType(AzureDataExplorerSourceOutput{})
	pulumi.RegisterOutputType(AzureDataExplorerSourceResponseOutput{})
	pulumi.RegisterOutputType(AzureDataExplorerTableDatasetOutput{})
	pulumi.RegisterOutputType(AzureDataExplorerTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(AzureDataLakeAnalyticsLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureDataLakeAnalyticsLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureDataLakeStoreDatasetOutput{})
	pulumi.RegisterOutputType(AzureDataLakeStoreDatasetResponseOutput{})
	pulumi.RegisterOutputType(AzureDataLakeStoreLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureDataLakeStoreLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureDataLakeStoreLocationOutput{})
	pulumi.RegisterOutputType(AzureDataLakeStoreLocationResponseOutput{})
	pulumi.RegisterOutputType(AzureDataLakeStoreReadSettingsOutput{})
	pulumi.RegisterOutputType(AzureDataLakeStoreReadSettingsPtrOutput{})
	pulumi.RegisterOutputType(AzureDataLakeStoreReadSettingsResponseOutput{})
	pulumi.RegisterOutputType(AzureDataLakeStoreReadSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureDataLakeStoreSinkOutput{})
	pulumi.RegisterOutputType(AzureDataLakeStoreSinkResponseOutput{})
	pulumi.RegisterOutputType(AzureDataLakeStoreSourceOutput{})
	pulumi.RegisterOutputType(AzureDataLakeStoreSourceResponseOutput{})
	pulumi.RegisterOutputType(AzureDataLakeStoreWriteSettingsOutput{})
	pulumi.RegisterOutputType(AzureDataLakeStoreWriteSettingsPtrOutput{})
	pulumi.RegisterOutputType(AzureDataLakeStoreWriteSettingsResponseOutput{})
	pulumi.RegisterOutputType(AzureDataLakeStoreWriteSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureDatabricksDeltaLakeDatasetOutput{})
	pulumi.RegisterOutputType(AzureDatabricksDeltaLakeDatasetResponseOutput{})
	pulumi.RegisterOutputType(AzureDatabricksDeltaLakeExportCommandOutput{})
	pulumi.RegisterOutputType(AzureDatabricksDeltaLakeExportCommandPtrOutput{})
	pulumi.RegisterOutputType(AzureDatabricksDeltaLakeExportCommandResponseOutput{})
	pulumi.RegisterOutputType(AzureDatabricksDeltaLakeExportCommandResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureDatabricksDeltaLakeImportCommandOutput{})
	pulumi.RegisterOutputType(AzureDatabricksDeltaLakeImportCommandPtrOutput{})
	pulumi.RegisterOutputType(AzureDatabricksDeltaLakeImportCommandResponseOutput{})
	pulumi.RegisterOutputType(AzureDatabricksDeltaLakeImportCommandResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureDatabricksDeltaLakeLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureDatabricksDeltaLakeLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureDatabricksDeltaLakeSinkOutput{})
	pulumi.RegisterOutputType(AzureDatabricksDeltaLakeSinkResponseOutput{})
	pulumi.RegisterOutputType(AzureDatabricksDeltaLakeSourceOutput{})
	pulumi.RegisterOutputType(AzureDatabricksDeltaLakeSourceResponseOutput{})
	pulumi.RegisterOutputType(AzureDatabricksLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureDatabricksLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureFileStorageLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureFileStorageLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureFileStorageLocationOutput{})
	pulumi.RegisterOutputType(AzureFileStorageLocationResponseOutput{})
	pulumi.RegisterOutputType(AzureFileStorageReadSettingsOutput{})
	pulumi.RegisterOutputType(AzureFileStorageReadSettingsPtrOutput{})
	pulumi.RegisterOutputType(AzureFileStorageReadSettingsResponseOutput{})
	pulumi.RegisterOutputType(AzureFileStorageReadSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureFileStorageWriteSettingsOutput{})
	pulumi.RegisterOutputType(AzureFileStorageWriteSettingsPtrOutput{})
	pulumi.RegisterOutputType(AzureFileStorageWriteSettingsResponseOutput{})
	pulumi.RegisterOutputType(AzureFileStorageWriteSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureFunctionActivityOutput{})
	pulumi.RegisterOutputType(AzureFunctionActivityResponseOutput{})
	pulumi.RegisterOutputType(AzureFunctionLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureFunctionLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureKeyVaultLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureKeyVaultLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureKeyVaultSecretReferenceOutput{})
	pulumi.RegisterOutputType(AzureKeyVaultSecretReferencePtrOutput{})
	pulumi.RegisterOutputType(AzureKeyVaultSecretReferenceResponseOutput{})
	pulumi.RegisterOutputType(AzureKeyVaultSecretReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureMLBatchExecutionActivityOutput{})
	pulumi.RegisterOutputType(AzureMLBatchExecutionActivityResponseOutput{})
	pulumi.RegisterOutputType(AzureMLExecutePipelineActivityOutput{})
	pulumi.RegisterOutputType(AzureMLExecutePipelineActivityResponseOutput{})
	pulumi.RegisterOutputType(AzureMLLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureMLLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureMLServiceLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureMLServiceLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureMLUpdateResourceActivityOutput{})
	pulumi.RegisterOutputType(AzureMLUpdateResourceActivityResponseOutput{})
	pulumi.RegisterOutputType(AzureMLWebServiceFileOutput{})
	pulumi.RegisterOutputType(AzureMLWebServiceFileMapOutput{})
	pulumi.RegisterOutputType(AzureMLWebServiceFileResponseOutput{})
	pulumi.RegisterOutputType(AzureMLWebServiceFileResponseMapOutput{})
	pulumi.RegisterOutputType(AzureMariaDBLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureMariaDBLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureMariaDBSourceOutput{})
	pulumi.RegisterOutputType(AzureMariaDBSourceResponseOutput{})
	pulumi.RegisterOutputType(AzureMariaDBTableDatasetOutput{})
	pulumi.RegisterOutputType(AzureMariaDBTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(AzureMySqlLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureMySqlLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureMySqlSinkOutput{})
	pulumi.RegisterOutputType(AzureMySqlSinkResponseOutput{})
	pulumi.RegisterOutputType(AzureMySqlSourceOutput{})
	pulumi.RegisterOutputType(AzureMySqlSourceResponseOutput{})
	pulumi.RegisterOutputType(AzureMySqlTableDatasetOutput{})
	pulumi.RegisterOutputType(AzureMySqlTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(AzurePostgreSqlLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzurePostgreSqlLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzurePostgreSqlSinkOutput{})
	pulumi.RegisterOutputType(AzurePostgreSqlSinkResponseOutput{})
	pulumi.RegisterOutputType(AzurePostgreSqlSourceOutput{})
	pulumi.RegisterOutputType(AzurePostgreSqlSourceResponseOutput{})
	pulumi.RegisterOutputType(AzurePostgreSqlTableDatasetOutput{})
	pulumi.RegisterOutputType(AzurePostgreSqlTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(AzureQueueSinkOutput{})
	pulumi.RegisterOutputType(AzureQueueSinkResponseOutput{})
	pulumi.RegisterOutputType(AzureSearchIndexDatasetOutput{})
	pulumi.RegisterOutputType(AzureSearchIndexDatasetResponseOutput{})
	pulumi.RegisterOutputType(AzureSearchIndexSinkOutput{})
	pulumi.RegisterOutputType(AzureSearchIndexSinkResponseOutput{})
	pulumi.RegisterOutputType(AzureSearchLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureSearchLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureSqlDWLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureSqlDWLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureSqlDWTableDatasetOutput{})
	pulumi.RegisterOutputType(AzureSqlDWTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(AzureSqlDatabaseLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureSqlDatabaseLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureSqlMILinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureSqlMILinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureSqlMITableDatasetOutput{})
	pulumi.RegisterOutputType(AzureSqlMITableDatasetResponseOutput{})
	pulumi.RegisterOutputType(AzureSqlSinkOutput{})
	pulumi.RegisterOutputType(AzureSqlSinkResponseOutput{})
	pulumi.RegisterOutputType(AzureSqlSourceOutput{})
	pulumi.RegisterOutputType(AzureSqlSourceResponseOutput{})
	pulumi.RegisterOutputType(AzureSqlTableDatasetOutput{})
	pulumi.RegisterOutputType(AzureSqlTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(AzureStorageLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureStorageLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureSynapseArtifactsLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureSynapseArtifactsLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(AzureTableDatasetOutput{})
	pulumi.RegisterOutputType(AzureTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(AzureTableSinkOutput{})
	pulumi.RegisterOutputType(AzureTableSinkResponseOutput{})
	pulumi.RegisterOutputType(AzureTableSourceOutput{})
	pulumi.RegisterOutputType(AzureTableSourceResponseOutput{})
	pulumi.RegisterOutputType(AzureTableStorageLinkedServiceOutput{})
	pulumi.RegisterOutputType(AzureTableStorageLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(BigDataPoolParametrizationReferenceOutput{})
	pulumi.RegisterOutputType(BigDataPoolParametrizationReferencePtrOutput{})
	pulumi.RegisterOutputType(BigDataPoolParametrizationReferenceResponseOutput{})
	pulumi.RegisterOutputType(BigDataPoolParametrizationReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(BinaryDatasetOutput{})
	pulumi.RegisterOutputType(BinaryDatasetResponseOutput{})
	pulumi.RegisterOutputType(BinaryReadSettingsOutput{})
	pulumi.RegisterOutputType(BinaryReadSettingsPtrOutput{})
	pulumi.RegisterOutputType(BinaryReadSettingsResponseOutput{})
	pulumi.RegisterOutputType(BinaryReadSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(BinarySinkOutput{})
	pulumi.RegisterOutputType(BinarySinkResponseOutput{})
	pulumi.RegisterOutputType(BinarySourceOutput{})
	pulumi.RegisterOutputType(BinarySourceResponseOutput{})
	pulumi.RegisterOutputType(BlobEventsTriggerOutput{})
	pulumi.RegisterOutputType(BlobEventsTriggerResponseOutput{})
	pulumi.RegisterOutputType(BlobSinkOutput{})
	pulumi.RegisterOutputType(BlobSinkResponseOutput{})
	pulumi.RegisterOutputType(BlobSourceOutput{})
	pulumi.RegisterOutputType(BlobSourceResponseOutput{})
	pulumi.RegisterOutputType(BlobTriggerOutput{})
	pulumi.RegisterOutputType(BlobTriggerResponseOutput{})
	pulumi.RegisterOutputType(CMKIdentityDefinitionOutput{})
	pulumi.RegisterOutputType(CMKIdentityDefinitionPtrOutput{})
	pulumi.RegisterOutputType(CMKIdentityDefinitionResponseOutput{})
	pulumi.RegisterOutputType(CMKIdentityDefinitionResponsePtrOutput{})
	pulumi.RegisterOutputType(CassandraLinkedServiceOutput{})
	pulumi.RegisterOutputType(CassandraLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(CassandraSourceOutput{})
	pulumi.RegisterOutputType(CassandraSourceResponseOutput{})
	pulumi.RegisterOutputType(CassandraTableDatasetOutput{})
	pulumi.RegisterOutputType(CassandraTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(ChainingTriggerOutput{})
	pulumi.RegisterOutputType(ChainingTriggerResponseOutput{})
	pulumi.RegisterOutputType(ChangeDataCaptureFolderOutput{})
	pulumi.RegisterOutputType(ChangeDataCaptureFolderPtrOutput{})
	pulumi.RegisterOutputType(ChangeDataCaptureResponseFolderOutput{})
	pulumi.RegisterOutputType(ChangeDataCaptureResponseFolderPtrOutput{})
	pulumi.RegisterOutputType(CmdkeySetupOutput{})
	pulumi.RegisterOutputType(CmdkeySetupResponseOutput{})
	pulumi.RegisterOutputType(CommonDataServiceForAppsEntityDatasetOutput{})
	pulumi.RegisterOutputType(CommonDataServiceForAppsEntityDatasetResponseOutput{})
	pulumi.RegisterOutputType(CommonDataServiceForAppsLinkedServiceOutput{})
	pulumi.RegisterOutputType(CommonDataServiceForAppsLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(CommonDataServiceForAppsSinkOutput{})
	pulumi.RegisterOutputType(CommonDataServiceForAppsSinkResponseOutput{})
	pulumi.RegisterOutputType(CommonDataServiceForAppsSourceOutput{})
	pulumi.RegisterOutputType(CommonDataServiceForAppsSourceResponseOutput{})
	pulumi.RegisterOutputType(ComponentSetupOutput{})
	pulumi.RegisterOutputType(ComponentSetupResponseOutput{})
	pulumi.RegisterOutputType(ConcurLinkedServiceOutput{})
	pulumi.RegisterOutputType(ConcurLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(ConcurObjectDatasetOutput{})
	pulumi.RegisterOutputType(ConcurObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(ConcurSourceOutput{})
	pulumi.RegisterOutputType(ConcurSourceResponseOutput{})
	pulumi.RegisterOutputType(ConnectionStatePropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectionStatePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ControlActivityOutput{})
	pulumi.RegisterOutputType(ControlActivityResponseOutput{})
	pulumi.RegisterOutputType(CopyActivityOutput{})
	pulumi.RegisterOutputType(CopyActivityLogSettingsOutput{})
	pulumi.RegisterOutputType(CopyActivityLogSettingsPtrOutput{})
	pulumi.RegisterOutputType(CopyActivityLogSettingsResponseOutput{})
	pulumi.RegisterOutputType(CopyActivityLogSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(CopyActivityResponseOutput{})
	pulumi.RegisterOutputType(CopyComputeScalePropertiesOutput{})
	pulumi.RegisterOutputType(CopyComputeScalePropertiesPtrOutput{})
	pulumi.RegisterOutputType(CopyComputeScalePropertiesResponseOutput{})
	pulumi.RegisterOutputType(CopyComputeScalePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(CosmosDbLinkedServiceOutput{})
	pulumi.RegisterOutputType(CosmosDbLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(CosmosDbMongoDbApiCollectionDatasetOutput{})
	pulumi.RegisterOutputType(CosmosDbMongoDbApiCollectionDatasetResponseOutput{})
	pulumi.RegisterOutputType(CosmosDbMongoDbApiLinkedServiceOutput{})
	pulumi.RegisterOutputType(CosmosDbMongoDbApiLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(CosmosDbMongoDbApiSinkOutput{})
	pulumi.RegisterOutputType(CosmosDbMongoDbApiSinkResponseOutput{})
	pulumi.RegisterOutputType(CosmosDbMongoDbApiSourceOutput{})
	pulumi.RegisterOutputType(CosmosDbMongoDbApiSourceResponseOutput{})
	pulumi.RegisterOutputType(CosmosDbSqlApiCollectionDatasetOutput{})
	pulumi.RegisterOutputType(CosmosDbSqlApiCollectionDatasetResponseOutput{})
	pulumi.RegisterOutputType(CosmosDbSqlApiSinkOutput{})
	pulumi.RegisterOutputType(CosmosDbSqlApiSinkResponseOutput{})
	pulumi.RegisterOutputType(CosmosDbSqlApiSourceOutput{})
	pulumi.RegisterOutputType(CosmosDbSqlApiSourceResponseOutput{})
	pulumi.RegisterOutputType(CouchbaseLinkedServiceOutput{})
	pulumi.RegisterOutputType(CouchbaseLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(CouchbaseSourceOutput{})
	pulumi.RegisterOutputType(CouchbaseSourceResponseOutput{})
	pulumi.RegisterOutputType(CouchbaseTableDatasetOutput{})
	pulumi.RegisterOutputType(CouchbaseTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(CredentialReferenceOutput{})
	pulumi.RegisterOutputType(CredentialReferencePtrOutput{})
	pulumi.RegisterOutputType(CredentialReferenceResponseOutput{})
	pulumi.RegisterOutputType(CredentialReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(CustomActivityOutput{})
	pulumi.RegisterOutputType(CustomActivityReferenceObjectOutput{})
	pulumi.RegisterOutputType(CustomActivityReferenceObjectPtrOutput{})
	pulumi.RegisterOutputType(CustomActivityReferenceObjectResponseOutput{})
	pulumi.RegisterOutputType(CustomActivityReferenceObjectResponsePtrOutput{})
	pulumi.RegisterOutputType(CustomActivityResponseOutput{})
	pulumi.RegisterOutputType(CustomDataSourceLinkedServiceOutput{})
	pulumi.RegisterOutputType(CustomDataSourceLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(CustomDatasetOutput{})
	pulumi.RegisterOutputType(CustomDatasetResponseOutput{})
	pulumi.RegisterOutputType(CustomEventsTriggerOutput{})
	pulumi.RegisterOutputType(CustomEventsTriggerResponseOutput{})
	pulumi.RegisterOutputType(DWCopyCommandDefaultValueOutput{})
	pulumi.RegisterOutputType(DWCopyCommandDefaultValueArrayOutput{})
	pulumi.RegisterOutputType(DWCopyCommandDefaultValueResponseOutput{})
	pulumi.RegisterOutputType(DWCopyCommandDefaultValueResponseArrayOutput{})
	pulumi.RegisterOutputType(DWCopyCommandSettingsOutput{})
	pulumi.RegisterOutputType(DWCopyCommandSettingsPtrOutput{})
	pulumi.RegisterOutputType(DWCopyCommandSettingsResponseOutput{})
	pulumi.RegisterOutputType(DWCopyCommandSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(DataFlowFolderOutput{})
	pulumi.RegisterOutputType(DataFlowFolderPtrOutput{})
	pulumi.RegisterOutputType(DataFlowReferenceOutput{})
	pulumi.RegisterOutputType(DataFlowReferencePtrOutput{})
	pulumi.RegisterOutputType(DataFlowReferenceResponseOutput{})
	pulumi.RegisterOutputType(DataFlowReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(DataFlowResponseFolderOutput{})
	pulumi.RegisterOutputType(DataFlowResponseFolderPtrOutput{})
	pulumi.RegisterOutputType(DataFlowSinkOutput{})
	pulumi.RegisterOutputType(DataFlowSinkArrayOutput{})
	pulumi.RegisterOutputType(DataFlowSinkResponseOutput{})
	pulumi.RegisterOutputType(DataFlowSinkResponseArrayOutput{})
	pulumi.RegisterOutputType(DataFlowSourceOutput{})
	pulumi.RegisterOutputType(DataFlowSourceArrayOutput{})
	pulumi.RegisterOutputType(DataFlowSourceResponseOutput{})
	pulumi.RegisterOutputType(DataFlowSourceResponseArrayOutput{})
	pulumi.RegisterOutputType(DataFlowStagingInfoOutput{})
	pulumi.RegisterOutputType(DataFlowStagingInfoPtrOutput{})
	pulumi.RegisterOutputType(DataFlowStagingInfoResponseOutput{})
	pulumi.RegisterOutputType(DataFlowStagingInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(DataLakeAnalyticsUSQLActivityOutput{})
	pulumi.RegisterOutputType(DataLakeAnalyticsUSQLActivityResponseOutput{})
	pulumi.RegisterOutputType(DataMapperMappingOutput{})
	pulumi.RegisterOutputType(DataMapperMappingArrayOutput{})
	pulumi.RegisterOutputType(DataMapperMappingResponseOutput{})
	pulumi.RegisterOutputType(DataMapperMappingResponseArrayOutput{})
	pulumi.RegisterOutputType(DatabricksNotebookActivityOutput{})
	pulumi.RegisterOutputType(DatabricksNotebookActivityResponseOutput{})
	pulumi.RegisterOutputType(DatabricksSparkJarActivityOutput{})
	pulumi.RegisterOutputType(DatabricksSparkJarActivityResponseOutput{})
	pulumi.RegisterOutputType(DatabricksSparkPythonActivityOutput{})
	pulumi.RegisterOutputType(DatabricksSparkPythonActivityResponseOutput{})
	pulumi.RegisterOutputType(DatasetCompressionOutput{})
	pulumi.RegisterOutputType(DatasetCompressionPtrOutput{})
	pulumi.RegisterOutputType(DatasetCompressionResponseOutput{})
	pulumi.RegisterOutputType(DatasetCompressionResponsePtrOutput{})
	pulumi.RegisterOutputType(DatasetFolderOutput{})
	pulumi.RegisterOutputType(DatasetFolderPtrOutput{})
	pulumi.RegisterOutputType(DatasetReferenceOutput{})
	pulumi.RegisterOutputType(DatasetReferencePtrOutput{})
	pulumi.RegisterOutputType(DatasetReferenceArrayOutput{})
	pulumi.RegisterOutputType(DatasetReferenceResponseOutput{})
	pulumi.RegisterOutputType(DatasetReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(DatasetReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(DatasetResponseFolderOutput{})
	pulumi.RegisterOutputType(DatasetResponseFolderPtrOutput{})
	pulumi.RegisterOutputType(DataworldLinkedServiceOutput{})
	pulumi.RegisterOutputType(DataworldLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(Db2LinkedServiceOutput{})
	pulumi.RegisterOutputType(Db2LinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(Db2SourceOutput{})
	pulumi.RegisterOutputType(Db2SourceResponseOutput{})
	pulumi.RegisterOutputType(Db2TableDatasetOutput{})
	pulumi.RegisterOutputType(Db2TableDatasetResponseOutput{})
	pulumi.RegisterOutputType(DeleteActivityOutput{})
	pulumi.RegisterOutputType(DeleteActivityResponseOutput{})
	pulumi.RegisterOutputType(DelimitedTextDatasetOutput{})
	pulumi.RegisterOutputType(DelimitedTextDatasetResponseOutput{})
	pulumi.RegisterOutputType(DelimitedTextReadSettingsOutput{})
	pulumi.RegisterOutputType(DelimitedTextReadSettingsPtrOutput{})
	pulumi.RegisterOutputType(DelimitedTextReadSettingsResponseOutput{})
	pulumi.RegisterOutputType(DelimitedTextReadSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(DelimitedTextSinkOutput{})
	pulumi.RegisterOutputType(DelimitedTextSinkResponseOutput{})
	pulumi.RegisterOutputType(DelimitedTextSourceOutput{})
	pulumi.RegisterOutputType(DelimitedTextSourceResponseOutput{})
	pulumi.RegisterOutputType(DelimitedTextWriteSettingsOutput{})
	pulumi.RegisterOutputType(DelimitedTextWriteSettingsPtrOutput{})
	pulumi.RegisterOutputType(DelimitedTextWriteSettingsResponseOutput{})
	pulumi.RegisterOutputType(DelimitedTextWriteSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(DistcpSettingsOutput{})
	pulumi.RegisterOutputType(DistcpSettingsPtrOutput{})
	pulumi.RegisterOutputType(DistcpSettingsResponseOutput{})
	pulumi.RegisterOutputType(DistcpSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(DocumentDbCollectionDatasetOutput{})
	pulumi.RegisterOutputType(DocumentDbCollectionDatasetResponseOutput{})
	pulumi.RegisterOutputType(DocumentDbCollectionSinkOutput{})
	pulumi.RegisterOutputType(DocumentDbCollectionSinkResponseOutput{})
	pulumi.RegisterOutputType(DocumentDbCollectionSourceOutput{})
	pulumi.RegisterOutputType(DocumentDbCollectionSourceResponseOutput{})
	pulumi.RegisterOutputType(DrillLinkedServiceOutput{})
	pulumi.RegisterOutputType(DrillLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(DrillSourceOutput{})
	pulumi.RegisterOutputType(DrillSourceResponseOutput{})
	pulumi.RegisterOutputType(DrillTableDatasetOutput{})
	pulumi.RegisterOutputType(DrillTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(DynamicsAXLinkedServiceOutput{})
	pulumi.RegisterOutputType(DynamicsAXLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(DynamicsAXResourceDatasetOutput{})
	pulumi.RegisterOutputType(DynamicsAXResourceDatasetResponseOutput{})
	pulumi.RegisterOutputType(DynamicsAXSourceOutput{})
	pulumi.RegisterOutputType(DynamicsAXSourceResponseOutput{})
	pulumi.RegisterOutputType(DynamicsCrmEntityDatasetOutput{})
	pulumi.RegisterOutputType(DynamicsCrmEntityDatasetResponseOutput{})
	pulumi.RegisterOutputType(DynamicsCrmLinkedServiceOutput{})
	pulumi.RegisterOutputType(DynamicsCrmLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(DynamicsCrmSinkOutput{})
	pulumi.RegisterOutputType(DynamicsCrmSinkResponseOutput{})
	pulumi.RegisterOutputType(DynamicsCrmSourceOutput{})
	pulumi.RegisterOutputType(DynamicsCrmSourceResponseOutput{})
	pulumi.RegisterOutputType(DynamicsEntityDatasetOutput{})
	pulumi.RegisterOutputType(DynamicsEntityDatasetResponseOutput{})
	pulumi.RegisterOutputType(DynamicsLinkedServiceOutput{})
	pulumi.RegisterOutputType(DynamicsLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(DynamicsSinkOutput{})
	pulumi.RegisterOutputType(DynamicsSinkResponseOutput{})
	pulumi.RegisterOutputType(DynamicsSourceOutput{})
	pulumi.RegisterOutputType(DynamicsSourceResponseOutput{})
	pulumi.RegisterOutputType(EloquaLinkedServiceOutput{})
	pulumi.RegisterOutputType(EloquaLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(EloquaObjectDatasetOutput{})
	pulumi.RegisterOutputType(EloquaObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(EloquaSourceOutput{})
	pulumi.RegisterOutputType(EloquaSourceResponseOutput{})
	pulumi.RegisterOutputType(EncryptionConfigurationOutput{})
	pulumi.RegisterOutputType(EncryptionConfigurationPtrOutput{})
	pulumi.RegisterOutputType(EncryptionConfigurationResponseOutput{})
	pulumi.RegisterOutputType(EncryptionConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(EntityReferenceOutput{})
	pulumi.RegisterOutputType(EntityReferencePtrOutput{})
	pulumi.RegisterOutputType(EntityReferenceResponseOutput{})
	pulumi.RegisterOutputType(EntityReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableSetupOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableSetupResponseOutput{})
	pulumi.RegisterOutputType(ExcelDatasetOutput{})
	pulumi.RegisterOutputType(ExcelDatasetResponseOutput{})
	pulumi.RegisterOutputType(ExcelSourceOutput{})
	pulumi.RegisterOutputType(ExcelSourceResponseOutput{})
	pulumi.RegisterOutputType(ExecuteDataFlowActivityOutput{})
	pulumi.RegisterOutputType(ExecuteDataFlowActivityResponseOutput{})
	pulumi.RegisterOutputType(ExecuteDataFlowActivityTypePropertiesComputeOutput{})
	pulumi.RegisterOutputType(ExecuteDataFlowActivityTypePropertiesComputePtrOutput{})
	pulumi.RegisterOutputType(ExecuteDataFlowActivityTypePropertiesResponseComputeOutput{})
	pulumi.RegisterOutputType(ExecuteDataFlowActivityTypePropertiesResponseComputePtrOutput{})
	pulumi.RegisterOutputType(ExecutePipelineActivityOutput{})
	pulumi.RegisterOutputType(ExecutePipelineActivityPolicyOutput{})
	pulumi.RegisterOutputType(ExecutePipelineActivityPolicyPtrOutput{})
	pulumi.RegisterOutputType(ExecutePipelineActivityPolicyResponseOutput{})
	pulumi.RegisterOutputType(ExecutePipelineActivityPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(ExecutePipelineActivityResponseOutput{})
	pulumi.RegisterOutputType(ExecuteSSISPackageActivityOutput{})
	pulumi.RegisterOutputType(ExecuteSSISPackageActivityResponseOutput{})
	pulumi.RegisterOutputType(ExecuteWranglingDataflowActivityOutput{})
	pulumi.RegisterOutputType(ExecuteWranglingDataflowActivityResponseOutput{})
	pulumi.RegisterOutputType(ExecutionActivityOutput{})
	pulumi.RegisterOutputType(ExecutionActivityResponseOutput{})
	pulumi.RegisterOutputType(ExpressionOutput{})
	pulumi.RegisterOutputType(ExpressionResponseOutput{})
	pulumi.RegisterOutputType(ExpressionV2Output{})
	pulumi.RegisterOutputType(ExpressionV2PtrOutput{})
	pulumi.RegisterOutputType(ExpressionV2ArrayOutput{})
	pulumi.RegisterOutputType(ExpressionV2ResponseOutput{})
	pulumi.RegisterOutputType(ExpressionV2ResponsePtrOutput{})
	pulumi.RegisterOutputType(ExpressionV2ResponseArrayOutput{})
	pulumi.RegisterOutputType(FactoryGitHubConfigurationOutput{})
	pulumi.RegisterOutputType(FactoryGitHubConfigurationPtrOutput{})
	pulumi.RegisterOutputType(FactoryGitHubConfigurationResponseOutput{})
	pulumi.RegisterOutputType(FactoryGitHubConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(FactoryIdentityOutput{})
	pulumi.RegisterOutputType(FactoryIdentityPtrOutput{})
	pulumi.RegisterOutputType(FactoryIdentityResponseOutput{})
	pulumi.RegisterOutputType(FactoryIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(FactoryVSTSConfigurationOutput{})
	pulumi.RegisterOutputType(FactoryVSTSConfigurationPtrOutput{})
	pulumi.RegisterOutputType(FactoryVSTSConfigurationResponseOutput{})
	pulumi.RegisterOutputType(FactoryVSTSConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(FailActivityOutput{})
	pulumi.RegisterOutputType(FailActivityResponseOutput{})
	pulumi.RegisterOutputType(FileServerLinkedServiceOutput{})
	pulumi.RegisterOutputType(FileServerLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(FileServerLocationOutput{})
	pulumi.RegisterOutputType(FileServerLocationResponseOutput{})
	pulumi.RegisterOutputType(FileServerReadSettingsOutput{})
	pulumi.RegisterOutputType(FileServerReadSettingsPtrOutput{})
	pulumi.RegisterOutputType(FileServerReadSettingsResponseOutput{})
	pulumi.RegisterOutputType(FileServerReadSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(FileServerWriteSettingsOutput{})
	pulumi.RegisterOutputType(FileServerWriteSettingsPtrOutput{})
	pulumi.RegisterOutputType(FileServerWriteSettingsResponseOutput{})
	pulumi.RegisterOutputType(FileServerWriteSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(FileShareDatasetOutput{})
	pulumi.RegisterOutputType(FileShareDatasetResponseOutput{})
	pulumi.RegisterOutputType(FileSystemSinkOutput{})
	pulumi.RegisterOutputType(FileSystemSinkResponseOutput{})
	pulumi.RegisterOutputType(FileSystemSourceOutput{})
	pulumi.RegisterOutputType(FileSystemSourceResponseOutput{})
	pulumi.RegisterOutputType(FilterActivityOutput{})
	pulumi.RegisterOutputType(FilterActivityResponseOutput{})
	pulumi.RegisterOutputType(FlowletOutput{})
	pulumi.RegisterOutputType(FlowletResponseOutput{})
	pulumi.RegisterOutputType(ForEachActivityOutput{})
	pulumi.RegisterOutputType(ForEachActivityResponseOutput{})
	pulumi.RegisterOutputType(FtpReadSettingsOutput{})
	pulumi.RegisterOutputType(FtpReadSettingsPtrOutput{})
	pulumi.RegisterOutputType(FtpReadSettingsResponseOutput{})
	pulumi.RegisterOutputType(FtpReadSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(FtpServerLinkedServiceOutput{})
	pulumi.RegisterOutputType(FtpServerLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(FtpServerLocationOutput{})
	pulumi.RegisterOutputType(FtpServerLocationResponseOutput{})
	pulumi.RegisterOutputType(GetMetadataActivityOutput{})
	pulumi.RegisterOutputType(GetMetadataActivityResponseOutput{})
	pulumi.RegisterOutputType(GitHubClientSecretOutput{})
	pulumi.RegisterOutputType(GitHubClientSecretPtrOutput{})
	pulumi.RegisterOutputType(GitHubClientSecretResponseOutput{})
	pulumi.RegisterOutputType(GitHubClientSecretResponsePtrOutput{})
	pulumi.RegisterOutputType(GlobalParameterSpecificationOutput{})
	pulumi.RegisterOutputType(GlobalParameterSpecificationMapOutput{})
	pulumi.RegisterOutputType(GlobalParameterSpecificationResponseOutput{})
	pulumi.RegisterOutputType(GlobalParameterSpecificationResponseMapOutput{})
	pulumi.RegisterOutputType(GoogleAdWordsLinkedServiceOutput{})
	pulumi.RegisterOutputType(GoogleAdWordsLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(GoogleAdWordsObjectDatasetOutput{})
	pulumi.RegisterOutputType(GoogleAdWordsObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(GoogleAdWordsSourceOutput{})
	pulumi.RegisterOutputType(GoogleAdWordsSourceResponseOutput{})
	pulumi.RegisterOutputType(GoogleBigQueryLinkedServiceOutput{})
	pulumi.RegisterOutputType(GoogleBigQueryLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(GoogleBigQueryObjectDatasetOutput{})
	pulumi.RegisterOutputType(GoogleBigQueryObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(GoogleBigQuerySourceOutput{})
	pulumi.RegisterOutputType(GoogleBigQuerySourceResponseOutput{})
	pulumi.RegisterOutputType(GoogleBigQueryV2LinkedServiceOutput{})
	pulumi.RegisterOutputType(GoogleBigQueryV2LinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(GoogleBigQueryV2ObjectDatasetOutput{})
	pulumi.RegisterOutputType(GoogleBigQueryV2ObjectDatasetResponseOutput{})
	pulumi.RegisterOutputType(GoogleBigQueryV2SourceOutput{})
	pulumi.RegisterOutputType(GoogleBigQueryV2SourceResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudStorageLinkedServiceOutput{})
	pulumi.RegisterOutputType(GoogleCloudStorageLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudStorageLocationOutput{})
	pulumi.RegisterOutputType(GoogleCloudStorageLocationResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudStorageReadSettingsOutput{})
	pulumi.RegisterOutputType(GoogleCloudStorageReadSettingsPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudStorageReadSettingsResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudStorageReadSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(GoogleSheetsLinkedServiceOutput{})
	pulumi.RegisterOutputType(GoogleSheetsLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(GreenplumLinkedServiceOutput{})
	pulumi.RegisterOutputType(GreenplumLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(GreenplumSourceOutput{})
	pulumi.RegisterOutputType(GreenplumSourceResponseOutput{})
	pulumi.RegisterOutputType(GreenplumTableDatasetOutput{})
	pulumi.RegisterOutputType(GreenplumTableDatasetResponseOutput{})
	pulumi.RegisterOutputType(HBaseLinkedServiceOutput{})
	pulumi.RegisterOutputType(HBaseLinkedServiceResponseOutput{})
	pulumi.RegisterOutputType(SSISExecutionParameterMapMapOutput{})
	pulumi.RegisterOutputType(SSISExecutionParameterResponseMapMapOutput{})
}
