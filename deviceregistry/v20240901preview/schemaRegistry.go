// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20240901preview

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Schema registry definition.
type SchemaRegistry struct {
	pulumi.CustomResourceState

	// Human-readable description of the schema registry.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Human-readable display name.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// The managed service identities assigned to this resource.
	Identity SystemAssignedServiceIdentityResponsePtrOutput `pulumi:"identity"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Schema registry namespace. Uniquely identifies a schema registry within a tenant.
	Namespace pulumi.StringOutput `pulumi:"namespace"`
	// Provisioning state of the resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The Storage Account's Container URL where schemas will be stored.
	StorageAccountContainerUrl pulumi.StringOutput `pulumi:"storageAccountContainerUrl"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
	// Globally unique, immutable, non-reusable id.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
}

// NewSchemaRegistry registers a new resource with the given unique name, arguments, and options.
func NewSchemaRegistry(ctx *pulumi.Context,
	name string, args *SchemaRegistryArgs, opts ...pulumi.ResourceOption) (*SchemaRegistry, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Namespace == nil {
		return nil, errors.New("invalid value for required argument 'Namespace'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.StorageAccountContainerUrl == nil {
		return nil, errors.New("invalid value for required argument 'StorageAccountContainerUrl'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:deviceregistry:SchemaRegistry"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource SchemaRegistry
	err := ctx.RegisterResource("azure-native:deviceregistry/v20240901preview:SchemaRegistry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSchemaRegistry gets an existing SchemaRegistry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSchemaRegistry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SchemaRegistryState, opts ...pulumi.ResourceOption) (*SchemaRegistry, error) {
	var resource SchemaRegistry
	err := ctx.ReadResource("azure-native:deviceregistry/v20240901preview:SchemaRegistry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SchemaRegistry resources.
type schemaRegistryState struct {
}

type SchemaRegistryState struct {
}

func (SchemaRegistryState) ElementType() reflect.Type {
	return reflect.TypeOf((*schemaRegistryState)(nil)).Elem()
}

type schemaRegistryArgs struct {
	// Human-readable description of the schema registry.
	Description *string `pulumi:"description"`
	// Human-readable display name.
	DisplayName *string `pulumi:"displayName"`
	// The managed service identities assigned to this resource.
	Identity *SystemAssignedServiceIdentity `pulumi:"identity"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// Schema registry namespace. Uniquely identifies a schema registry within a tenant.
	Namespace string `pulumi:"namespace"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Schema registry name parameter.
	SchemaRegistryName *string `pulumi:"schemaRegistryName"`
	// The Storage Account's Container URL where schemas will be stored.
	StorageAccountContainerUrl string `pulumi:"storageAccountContainerUrl"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a SchemaRegistry resource.
type SchemaRegistryArgs struct {
	// Human-readable description of the schema registry.
	Description pulumi.StringPtrInput
	// Human-readable display name.
	DisplayName pulumi.StringPtrInput
	// The managed service identities assigned to this resource.
	Identity SystemAssignedServiceIdentityPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// Schema registry namespace. Uniquely identifies a schema registry within a tenant.
	Namespace pulumi.StringInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Schema registry name parameter.
	SchemaRegistryName pulumi.StringPtrInput
	// The Storage Account's Container URL where schemas will be stored.
	StorageAccountContainerUrl pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (SchemaRegistryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*schemaRegistryArgs)(nil)).Elem()
}

type SchemaRegistryInput interface {
	pulumi.Input

	ToSchemaRegistryOutput() SchemaRegistryOutput
	ToSchemaRegistryOutputWithContext(ctx context.Context) SchemaRegistryOutput
}

func (*SchemaRegistry) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaRegistry)(nil)).Elem()
}

func (i *SchemaRegistry) ToSchemaRegistryOutput() SchemaRegistryOutput {
	return i.ToSchemaRegistryOutputWithContext(context.Background())
}

func (i *SchemaRegistry) ToSchemaRegistryOutputWithContext(ctx context.Context) SchemaRegistryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryOutput)
}

type SchemaRegistryOutput struct{ *pulumi.OutputState }

func (SchemaRegistryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaRegistry)(nil)).Elem()
}

func (o SchemaRegistryOutput) ToSchemaRegistryOutput() SchemaRegistryOutput {
	return o
}

func (o SchemaRegistryOutput) ToSchemaRegistryOutputWithContext(ctx context.Context) SchemaRegistryOutput {
	return o
}

// Human-readable description of the schema registry.
func (o SchemaRegistryOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaRegistry) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Human-readable display name.
func (o SchemaRegistryOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaRegistry) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The managed service identities assigned to this resource.
func (o SchemaRegistryOutput) Identity() SystemAssignedServiceIdentityResponsePtrOutput {
	return o.ApplyT(func(v *SchemaRegistry) SystemAssignedServiceIdentityResponsePtrOutput { return v.Identity }).(SystemAssignedServiceIdentityResponsePtrOutput)
}

// The geo-location where the resource lives
func (o SchemaRegistryOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaRegistry) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o SchemaRegistryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaRegistry) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Schema registry namespace. Uniquely identifies a schema registry within a tenant.
func (o SchemaRegistryOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaRegistry) pulumi.StringOutput { return v.Namespace }).(pulumi.StringOutput)
}

// Provisioning state of the resource.
func (o SchemaRegistryOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaRegistry) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The Storage Account's Container URL where schemas will be stored.
func (o SchemaRegistryOutput) StorageAccountContainerUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaRegistry) pulumi.StringOutput { return v.StorageAccountContainerUrl }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o SchemaRegistryOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *SchemaRegistry) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o SchemaRegistryOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SchemaRegistry) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o SchemaRegistryOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaRegistry) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Globally unique, immutable, non-reusable id.
func (o SchemaRegistryOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaRegistry) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(SchemaRegistryOutput{})
}
