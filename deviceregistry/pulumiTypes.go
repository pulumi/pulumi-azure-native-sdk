// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package deviceregistry

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Defines the asset endpoint profile status error properties.
type AssetEndpointProfileStatusErrorResponse struct {
	// Error code for classification of errors (ex: 400, 404, 500, etc.).
	Code int `pulumi:"code"`
	// Human readable helpful error message to provide additional context for error (ex: “targetAddress 'foo' is not a valid url”).
	Message string `pulumi:"message"`
}

// Defines the asset endpoint profile status error properties.
type AssetEndpointProfileStatusErrorResponseOutput struct{ *pulumi.OutputState }

func (AssetEndpointProfileStatusErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssetEndpointProfileStatusErrorResponse)(nil)).Elem()
}

func (o AssetEndpointProfileStatusErrorResponseOutput) ToAssetEndpointProfileStatusErrorResponseOutput() AssetEndpointProfileStatusErrorResponseOutput {
	return o
}

func (o AssetEndpointProfileStatusErrorResponseOutput) ToAssetEndpointProfileStatusErrorResponseOutputWithContext(ctx context.Context) AssetEndpointProfileStatusErrorResponseOutput {
	return o
}

// Error code for classification of errors (ex: 400, 404, 500, etc.).
func (o AssetEndpointProfileStatusErrorResponseOutput) Code() pulumi.IntOutput {
	return o.ApplyT(func(v AssetEndpointProfileStatusErrorResponse) int { return v.Code }).(pulumi.IntOutput)
}

// Human readable helpful error message to provide additional context for error (ex: “targetAddress 'foo' is not a valid url”).
func (o AssetEndpointProfileStatusErrorResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v AssetEndpointProfileStatusErrorResponse) string { return v.Message }).(pulumi.StringOutput)
}

type AssetEndpointProfileStatusErrorResponseArrayOutput struct{ *pulumi.OutputState }

func (AssetEndpointProfileStatusErrorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssetEndpointProfileStatusErrorResponse)(nil)).Elem()
}

func (o AssetEndpointProfileStatusErrorResponseArrayOutput) ToAssetEndpointProfileStatusErrorResponseArrayOutput() AssetEndpointProfileStatusErrorResponseArrayOutput {
	return o
}

func (o AssetEndpointProfileStatusErrorResponseArrayOutput) ToAssetEndpointProfileStatusErrorResponseArrayOutputWithContext(ctx context.Context) AssetEndpointProfileStatusErrorResponseArrayOutput {
	return o
}

func (o AssetEndpointProfileStatusErrorResponseArrayOutput) Index(i pulumi.IntInput) AssetEndpointProfileStatusErrorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AssetEndpointProfileStatusErrorResponse {
		return vs[0].([]AssetEndpointProfileStatusErrorResponse)[vs[1].(int)]
	}).(AssetEndpointProfileStatusErrorResponseOutput)
}

// Defines the asset endpoint profile status properties.
type AssetEndpointProfileStatusResponse struct {
	// Array object to transfer and persist errors that originate from the Edge.
	Errors []AssetEndpointProfileStatusErrorResponse `pulumi:"errors"`
}

// Defines the asset endpoint profile status properties.
type AssetEndpointProfileStatusResponseOutput struct{ *pulumi.OutputState }

func (AssetEndpointProfileStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssetEndpointProfileStatusResponse)(nil)).Elem()
}

func (o AssetEndpointProfileStatusResponseOutput) ToAssetEndpointProfileStatusResponseOutput() AssetEndpointProfileStatusResponseOutput {
	return o
}

func (o AssetEndpointProfileStatusResponseOutput) ToAssetEndpointProfileStatusResponseOutputWithContext(ctx context.Context) AssetEndpointProfileStatusResponseOutput {
	return o
}

// Array object to transfer and persist errors that originate from the Edge.
func (o AssetEndpointProfileStatusResponseOutput) Errors() AssetEndpointProfileStatusErrorResponseArrayOutput {
	return o.ApplyT(func(v AssetEndpointProfileStatusResponse) []AssetEndpointProfileStatusErrorResponse { return v.Errors }).(AssetEndpointProfileStatusErrorResponseArrayOutput)
}

// Defines the asset status dataset properties.
type AssetStatusDatasetResponse struct {
	// The message schema reference object.
	MessageSchemaReference MessageSchemaReferenceResponse `pulumi:"messageSchemaReference"`
	// The name of the dataset. Must be unique within the status.datasets array. This name is used to correlate between the spec and status dataset information.
	Name string `pulumi:"name"`
}

// Defines the asset status dataset properties.
type AssetStatusDatasetResponseOutput struct{ *pulumi.OutputState }

func (AssetStatusDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssetStatusDatasetResponse)(nil)).Elem()
}

func (o AssetStatusDatasetResponseOutput) ToAssetStatusDatasetResponseOutput() AssetStatusDatasetResponseOutput {
	return o
}

func (o AssetStatusDatasetResponseOutput) ToAssetStatusDatasetResponseOutputWithContext(ctx context.Context) AssetStatusDatasetResponseOutput {
	return o
}

// The message schema reference object.
func (o AssetStatusDatasetResponseOutput) MessageSchemaReference() MessageSchemaReferenceResponseOutput {
	return o.ApplyT(func(v AssetStatusDatasetResponse) MessageSchemaReferenceResponse { return v.MessageSchemaReference }).(MessageSchemaReferenceResponseOutput)
}

// The name of the dataset. Must be unique within the status.datasets array. This name is used to correlate between the spec and status dataset information.
func (o AssetStatusDatasetResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AssetStatusDatasetResponse) string { return v.Name }).(pulumi.StringOutput)
}

type AssetStatusDatasetResponseArrayOutput struct{ *pulumi.OutputState }

func (AssetStatusDatasetResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssetStatusDatasetResponse)(nil)).Elem()
}

func (o AssetStatusDatasetResponseArrayOutput) ToAssetStatusDatasetResponseArrayOutput() AssetStatusDatasetResponseArrayOutput {
	return o
}

func (o AssetStatusDatasetResponseArrayOutput) ToAssetStatusDatasetResponseArrayOutputWithContext(ctx context.Context) AssetStatusDatasetResponseArrayOutput {
	return o
}

func (o AssetStatusDatasetResponseArrayOutput) Index(i pulumi.IntInput) AssetStatusDatasetResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AssetStatusDatasetResponse {
		return vs[0].([]AssetStatusDatasetResponse)[vs[1].(int)]
	}).(AssetStatusDatasetResponseOutput)
}

// Defines the asset status error properties.
type AssetStatusErrorResponse struct {
	// Error code for classification of errors (ex: 400, 404, 500, etc.).
	Code int `pulumi:"code"`
	// Human readable helpful error message to provide additional context for error (ex: “capability Id 'foo' does not exist”).
	Message string `pulumi:"message"`
}

// Defines the asset status error properties.
type AssetStatusErrorResponseOutput struct{ *pulumi.OutputState }

func (AssetStatusErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssetStatusErrorResponse)(nil)).Elem()
}

func (o AssetStatusErrorResponseOutput) ToAssetStatusErrorResponseOutput() AssetStatusErrorResponseOutput {
	return o
}

func (o AssetStatusErrorResponseOutput) ToAssetStatusErrorResponseOutputWithContext(ctx context.Context) AssetStatusErrorResponseOutput {
	return o
}

// Error code for classification of errors (ex: 400, 404, 500, etc.).
func (o AssetStatusErrorResponseOutput) Code() pulumi.IntOutput {
	return o.ApplyT(func(v AssetStatusErrorResponse) int { return v.Code }).(pulumi.IntOutput)
}

// Human readable helpful error message to provide additional context for error (ex: “capability Id 'foo' does not exist”).
func (o AssetStatusErrorResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v AssetStatusErrorResponse) string { return v.Message }).(pulumi.StringOutput)
}

type AssetStatusErrorResponseArrayOutput struct{ *pulumi.OutputState }

func (AssetStatusErrorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssetStatusErrorResponse)(nil)).Elem()
}

func (o AssetStatusErrorResponseArrayOutput) ToAssetStatusErrorResponseArrayOutput() AssetStatusErrorResponseArrayOutput {
	return o
}

func (o AssetStatusErrorResponseArrayOutput) ToAssetStatusErrorResponseArrayOutputWithContext(ctx context.Context) AssetStatusErrorResponseArrayOutput {
	return o
}

func (o AssetStatusErrorResponseArrayOutput) Index(i pulumi.IntInput) AssetStatusErrorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AssetStatusErrorResponse {
		return vs[0].([]AssetStatusErrorResponse)[vs[1].(int)]
	}).(AssetStatusErrorResponseOutput)
}

// Defines the asset status event properties.
type AssetStatusEventResponse struct {
	// The message schema reference object.
	MessageSchemaReference MessageSchemaReferenceResponse `pulumi:"messageSchemaReference"`
	// The name of the event. Must be unique within the status.events array. This name is used to correlate between the spec and status event information.
	Name string `pulumi:"name"`
}

// Defines the asset status event properties.
type AssetStatusEventResponseOutput struct{ *pulumi.OutputState }

func (AssetStatusEventResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssetStatusEventResponse)(nil)).Elem()
}

func (o AssetStatusEventResponseOutput) ToAssetStatusEventResponseOutput() AssetStatusEventResponseOutput {
	return o
}

func (o AssetStatusEventResponseOutput) ToAssetStatusEventResponseOutputWithContext(ctx context.Context) AssetStatusEventResponseOutput {
	return o
}

// The message schema reference object.
func (o AssetStatusEventResponseOutput) MessageSchemaReference() MessageSchemaReferenceResponseOutput {
	return o.ApplyT(func(v AssetStatusEventResponse) MessageSchemaReferenceResponse { return v.MessageSchemaReference }).(MessageSchemaReferenceResponseOutput)
}

// The name of the event. Must be unique within the status.events array. This name is used to correlate between the spec and status event information.
func (o AssetStatusEventResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AssetStatusEventResponse) string { return v.Name }).(pulumi.StringOutput)
}

type AssetStatusEventResponseArrayOutput struct{ *pulumi.OutputState }

func (AssetStatusEventResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssetStatusEventResponse)(nil)).Elem()
}

func (o AssetStatusEventResponseArrayOutput) ToAssetStatusEventResponseArrayOutput() AssetStatusEventResponseArrayOutput {
	return o
}

func (o AssetStatusEventResponseArrayOutput) ToAssetStatusEventResponseArrayOutputWithContext(ctx context.Context) AssetStatusEventResponseArrayOutput {
	return o
}

func (o AssetStatusEventResponseArrayOutput) Index(i pulumi.IntInput) AssetStatusEventResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AssetStatusEventResponse {
		return vs[0].([]AssetStatusEventResponse)[vs[1].(int)]
	}).(AssetStatusEventResponseOutput)
}

// Defines the asset status properties.
type AssetStatusResponse struct {
	// Array of dataset statuses that describe the status of each dataset.
	Datasets []AssetStatusDatasetResponse `pulumi:"datasets"`
	// Array object to transfer and persist errors that originate from the Edge.
	Errors []AssetStatusErrorResponse `pulumi:"errors"`
	// Array of event statuses that describe the status of each event.
	Events []AssetStatusEventResponse `pulumi:"events"`
	// A read only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (Edge) state of the Asset. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version.
	Version float64 `pulumi:"version"`
}

// Defines the asset status properties.
type AssetStatusResponseOutput struct{ *pulumi.OutputState }

func (AssetStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssetStatusResponse)(nil)).Elem()
}

func (o AssetStatusResponseOutput) ToAssetStatusResponseOutput() AssetStatusResponseOutput {
	return o
}

func (o AssetStatusResponseOutput) ToAssetStatusResponseOutputWithContext(ctx context.Context) AssetStatusResponseOutput {
	return o
}

// Array of dataset statuses that describe the status of each dataset.
func (o AssetStatusResponseOutput) Datasets() AssetStatusDatasetResponseArrayOutput {
	return o.ApplyT(func(v AssetStatusResponse) []AssetStatusDatasetResponse { return v.Datasets }).(AssetStatusDatasetResponseArrayOutput)
}

// Array object to transfer and persist errors that originate from the Edge.
func (o AssetStatusResponseOutput) Errors() AssetStatusErrorResponseArrayOutput {
	return o.ApplyT(func(v AssetStatusResponse) []AssetStatusErrorResponse { return v.Errors }).(AssetStatusErrorResponseArrayOutput)
}

// Array of event statuses that describe the status of each event.
func (o AssetStatusResponseOutput) Events() AssetStatusEventResponseArrayOutput {
	return o.ApplyT(func(v AssetStatusResponse) []AssetStatusEventResponse { return v.Events }).(AssetStatusEventResponseArrayOutput)
}

// A read only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (Edge) state of the Asset. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version.
func (o AssetStatusResponseOutput) Version() pulumi.Float64Output {
	return o.ApplyT(func(v AssetStatusResponse) float64 { return v.Version }).(pulumi.Float64Output)
}

// Definition of the client authentication mechanism to the server.
type Authentication struct {
	// Defines the method to authenticate the user of the client at the server.
	Method string `pulumi:"method"`
	// Defines the username and password references when UsernamePassword user authentication mode is selected.
	UsernamePasswordCredentials *UsernamePasswordCredentials `pulumi:"usernamePasswordCredentials"`
	// Defines the certificate reference when Certificate user authentication mode is selected.
	X509Credentials *X509Credentials `pulumi:"x509Credentials"`
}

// Defaults sets the appropriate defaults for Authentication
func (val *Authentication) Defaults() *Authentication {
	if val == nil {
		return nil
	}
	tmp := *val
	if utilities.IsZero(tmp.Method) {
		tmp.Method = "Certificate"
	}
	return &tmp
}

// AuthenticationInput is an input type that accepts AuthenticationArgs and AuthenticationOutput values.
// You can construct a concrete instance of `AuthenticationInput` via:
//
//	AuthenticationArgs{...}
type AuthenticationInput interface {
	pulumi.Input

	ToAuthenticationOutput() AuthenticationOutput
	ToAuthenticationOutputWithContext(context.Context) AuthenticationOutput
}

// Definition of the client authentication mechanism to the server.
type AuthenticationArgs struct {
	// Defines the method to authenticate the user of the client at the server.
	Method pulumi.StringInput `pulumi:"method"`
	// Defines the username and password references when UsernamePassword user authentication mode is selected.
	UsernamePasswordCredentials UsernamePasswordCredentialsPtrInput `pulumi:"usernamePasswordCredentials"`
	// Defines the certificate reference when Certificate user authentication mode is selected.
	X509Credentials X509CredentialsPtrInput `pulumi:"x509Credentials"`
}

// Defaults sets the appropriate defaults for AuthenticationArgs
func (val *AuthenticationArgs) Defaults() *AuthenticationArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Method == nil {
		tmp.Method = pulumi.String("Certificate")
	}
	return &tmp
}
func (AuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Authentication)(nil)).Elem()
}

func (i AuthenticationArgs) ToAuthenticationOutput() AuthenticationOutput {
	return i.ToAuthenticationOutputWithContext(context.Background())
}

func (i AuthenticationArgs) ToAuthenticationOutputWithContext(ctx context.Context) AuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticationOutput)
}

func (i AuthenticationArgs) ToAuthenticationPtrOutput() AuthenticationPtrOutput {
	return i.ToAuthenticationPtrOutputWithContext(context.Background())
}

func (i AuthenticationArgs) ToAuthenticationPtrOutputWithContext(ctx context.Context) AuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticationOutput).ToAuthenticationPtrOutputWithContext(ctx)
}

// AuthenticationPtrInput is an input type that accepts AuthenticationArgs, AuthenticationPtr and AuthenticationPtrOutput values.
// You can construct a concrete instance of `AuthenticationPtrInput` via:
//
//	        AuthenticationArgs{...}
//
//	or:
//
//	        nil
type AuthenticationPtrInput interface {
	pulumi.Input

	ToAuthenticationPtrOutput() AuthenticationPtrOutput
	ToAuthenticationPtrOutputWithContext(context.Context) AuthenticationPtrOutput
}

type authenticationPtrType AuthenticationArgs

func AuthenticationPtr(v *AuthenticationArgs) AuthenticationPtrInput {
	return (*authenticationPtrType)(v)
}

func (*authenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Authentication)(nil)).Elem()
}

func (i *authenticationPtrType) ToAuthenticationPtrOutput() AuthenticationPtrOutput {
	return i.ToAuthenticationPtrOutputWithContext(context.Background())
}

func (i *authenticationPtrType) ToAuthenticationPtrOutputWithContext(ctx context.Context) AuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticationPtrOutput)
}

// Definition of the client authentication mechanism to the server.
type AuthenticationOutput struct{ *pulumi.OutputState }

func (AuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Authentication)(nil)).Elem()
}

func (o AuthenticationOutput) ToAuthenticationOutput() AuthenticationOutput {
	return o
}

func (o AuthenticationOutput) ToAuthenticationOutputWithContext(ctx context.Context) AuthenticationOutput {
	return o
}

func (o AuthenticationOutput) ToAuthenticationPtrOutput() AuthenticationPtrOutput {
	return o.ToAuthenticationPtrOutputWithContext(context.Background())
}

func (o AuthenticationOutput) ToAuthenticationPtrOutputWithContext(ctx context.Context) AuthenticationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Authentication) *Authentication {
		return &v
	}).(AuthenticationPtrOutput)
}

// Defines the method to authenticate the user of the client at the server.
func (o AuthenticationOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v Authentication) string { return v.Method }).(pulumi.StringOutput)
}

// Defines the username and password references when UsernamePassword user authentication mode is selected.
func (o AuthenticationOutput) UsernamePasswordCredentials() UsernamePasswordCredentialsPtrOutput {
	return o.ApplyT(func(v Authentication) *UsernamePasswordCredentials { return v.UsernamePasswordCredentials }).(UsernamePasswordCredentialsPtrOutput)
}

// Defines the certificate reference when Certificate user authentication mode is selected.
func (o AuthenticationOutput) X509Credentials() X509CredentialsPtrOutput {
	return o.ApplyT(func(v Authentication) *X509Credentials { return v.X509Credentials }).(X509CredentialsPtrOutput)
}

type AuthenticationPtrOutput struct{ *pulumi.OutputState }

func (AuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Authentication)(nil)).Elem()
}

func (o AuthenticationPtrOutput) ToAuthenticationPtrOutput() AuthenticationPtrOutput {
	return o
}

func (o AuthenticationPtrOutput) ToAuthenticationPtrOutputWithContext(ctx context.Context) AuthenticationPtrOutput {
	return o
}

func (o AuthenticationPtrOutput) Elem() AuthenticationOutput {
	return o.ApplyT(func(v *Authentication) Authentication {
		if v != nil {
			return *v
		}
		var ret Authentication
		return ret
	}).(AuthenticationOutput)
}

// Defines the method to authenticate the user of the client at the server.
func (o AuthenticationPtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Authentication) *string {
		if v == nil {
			return nil
		}
		return &v.Method
	}).(pulumi.StringPtrOutput)
}

// Defines the username and password references when UsernamePassword user authentication mode is selected.
func (o AuthenticationPtrOutput) UsernamePasswordCredentials() UsernamePasswordCredentialsPtrOutput {
	return o.ApplyT(func(v *Authentication) *UsernamePasswordCredentials {
		if v == nil {
			return nil
		}
		return v.UsernamePasswordCredentials
	}).(UsernamePasswordCredentialsPtrOutput)
}

// Defines the certificate reference when Certificate user authentication mode is selected.
func (o AuthenticationPtrOutput) X509Credentials() X509CredentialsPtrOutput {
	return o.ApplyT(func(v *Authentication) *X509Credentials {
		if v == nil {
			return nil
		}
		return v.X509Credentials
	}).(X509CredentialsPtrOutput)
}

// Definition of the client authentication mechanism to the server.
type AuthenticationResponse struct {
	// Defines the method to authenticate the user of the client at the server.
	Method string `pulumi:"method"`
	// Defines the username and password references when UsernamePassword user authentication mode is selected.
	UsernamePasswordCredentials *UsernamePasswordCredentialsResponse `pulumi:"usernamePasswordCredentials"`
	// Defines the certificate reference when Certificate user authentication mode is selected.
	X509Credentials *X509CredentialsResponse `pulumi:"x509Credentials"`
}

// Defaults sets the appropriate defaults for AuthenticationResponse
func (val *AuthenticationResponse) Defaults() *AuthenticationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if utilities.IsZero(tmp.Method) {
		tmp.Method = "Certificate"
	}
	return &tmp
}

// Definition of the client authentication mechanism to the server.
type AuthenticationResponseOutput struct{ *pulumi.OutputState }

func (AuthenticationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthenticationResponse)(nil)).Elem()
}

func (o AuthenticationResponseOutput) ToAuthenticationResponseOutput() AuthenticationResponseOutput {
	return o
}

func (o AuthenticationResponseOutput) ToAuthenticationResponseOutputWithContext(ctx context.Context) AuthenticationResponseOutput {
	return o
}

// Defines the method to authenticate the user of the client at the server.
func (o AuthenticationResponseOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v AuthenticationResponse) string { return v.Method }).(pulumi.StringOutput)
}

// Defines the username and password references when UsernamePassword user authentication mode is selected.
func (o AuthenticationResponseOutput) UsernamePasswordCredentials() UsernamePasswordCredentialsResponsePtrOutput {
	return o.ApplyT(func(v AuthenticationResponse) *UsernamePasswordCredentialsResponse {
		return v.UsernamePasswordCredentials
	}).(UsernamePasswordCredentialsResponsePtrOutput)
}

// Defines the certificate reference when Certificate user authentication mode is selected.
func (o AuthenticationResponseOutput) X509Credentials() X509CredentialsResponsePtrOutput {
	return o.ApplyT(func(v AuthenticationResponse) *X509CredentialsResponse { return v.X509Credentials }).(X509CredentialsResponsePtrOutput)
}

type AuthenticationResponsePtrOutput struct{ *pulumi.OutputState }

func (AuthenticationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthenticationResponse)(nil)).Elem()
}

func (o AuthenticationResponsePtrOutput) ToAuthenticationResponsePtrOutput() AuthenticationResponsePtrOutput {
	return o
}

func (o AuthenticationResponsePtrOutput) ToAuthenticationResponsePtrOutputWithContext(ctx context.Context) AuthenticationResponsePtrOutput {
	return o
}

func (o AuthenticationResponsePtrOutput) Elem() AuthenticationResponseOutput {
	return o.ApplyT(func(v *AuthenticationResponse) AuthenticationResponse {
		if v != nil {
			return *v
		}
		var ret AuthenticationResponse
		return ret
	}).(AuthenticationResponseOutput)
}

// Defines the method to authenticate the user of the client at the server.
func (o AuthenticationResponsePtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthenticationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Method
	}).(pulumi.StringPtrOutput)
}

// Defines the username and password references when UsernamePassword user authentication mode is selected.
func (o AuthenticationResponsePtrOutput) UsernamePasswordCredentials() UsernamePasswordCredentialsResponsePtrOutput {
	return o.ApplyT(func(v *AuthenticationResponse) *UsernamePasswordCredentialsResponse {
		if v == nil {
			return nil
		}
		return v.UsernamePasswordCredentials
	}).(UsernamePasswordCredentialsResponsePtrOutput)
}

// Defines the certificate reference when Certificate user authentication mode is selected.
func (o AuthenticationResponsePtrOutput) X509Credentials() X509CredentialsResponsePtrOutput {
	return o.ApplyT(func(v *AuthenticationResponse) *X509CredentialsResponse {
		if v == nil {
			return nil
		}
		return v.X509Credentials
	}).(X509CredentialsResponsePtrOutput)
}

// Defines the data point properties.
type DataPoint struct {
	// Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
	DataPointConfiguration *string `pulumi:"dataPointConfiguration"`
	// The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset.
	DataSource string `pulumi:"dataSource"`
	// The name of the data point.
	Name string `pulumi:"name"`
	// An indication of how the data point should be mapped to OpenTelemetry.
	ObservabilityMode *string `pulumi:"observabilityMode"`
}

// Defaults sets the appropriate defaults for DataPoint
func (val *DataPoint) Defaults() *DataPoint {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ObservabilityMode == nil {
		observabilityMode_ := "None"
		tmp.ObservabilityMode = &observabilityMode_
	}
	return &tmp
}

// DataPointInput is an input type that accepts DataPointArgs and DataPointOutput values.
// You can construct a concrete instance of `DataPointInput` via:
//
//	DataPointArgs{...}
type DataPointInput interface {
	pulumi.Input

	ToDataPointOutput() DataPointOutput
	ToDataPointOutputWithContext(context.Context) DataPointOutput
}

// Defines the data point properties.
type DataPointArgs struct {
	// Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
	DataPointConfiguration pulumi.StringPtrInput `pulumi:"dataPointConfiguration"`
	// The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset.
	DataSource pulumi.StringInput `pulumi:"dataSource"`
	// The name of the data point.
	Name pulumi.StringInput `pulumi:"name"`
	// An indication of how the data point should be mapped to OpenTelemetry.
	ObservabilityMode pulumi.StringPtrInput `pulumi:"observabilityMode"`
}

// Defaults sets the appropriate defaults for DataPointArgs
func (val *DataPointArgs) Defaults() *DataPointArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ObservabilityMode == nil {
		tmp.ObservabilityMode = pulumi.StringPtr("None")
	}
	return &tmp
}
func (DataPointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataPoint)(nil)).Elem()
}

func (i DataPointArgs) ToDataPointOutput() DataPointOutput {
	return i.ToDataPointOutputWithContext(context.Background())
}

func (i DataPointArgs) ToDataPointOutputWithContext(ctx context.Context) DataPointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataPointOutput)
}

// DataPointArrayInput is an input type that accepts DataPointArray and DataPointArrayOutput values.
// You can construct a concrete instance of `DataPointArrayInput` via:
//
//	DataPointArray{ DataPointArgs{...} }
type DataPointArrayInput interface {
	pulumi.Input

	ToDataPointArrayOutput() DataPointArrayOutput
	ToDataPointArrayOutputWithContext(context.Context) DataPointArrayOutput
}

type DataPointArray []DataPointInput

func (DataPointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataPoint)(nil)).Elem()
}

func (i DataPointArray) ToDataPointArrayOutput() DataPointArrayOutput {
	return i.ToDataPointArrayOutputWithContext(context.Background())
}

func (i DataPointArray) ToDataPointArrayOutputWithContext(ctx context.Context) DataPointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataPointArrayOutput)
}

// Defines the data point properties.
type DataPointOutput struct{ *pulumi.OutputState }

func (DataPointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataPoint)(nil)).Elem()
}

func (o DataPointOutput) ToDataPointOutput() DataPointOutput {
	return o
}

func (o DataPointOutput) ToDataPointOutputWithContext(ctx context.Context) DataPointOutput {
	return o
}

// Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
func (o DataPointOutput) DataPointConfiguration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataPoint) *string { return v.DataPointConfiguration }).(pulumi.StringPtrOutput)
}

// The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset.
func (o DataPointOutput) DataSource() pulumi.StringOutput {
	return o.ApplyT(func(v DataPoint) string { return v.DataSource }).(pulumi.StringOutput)
}

// The name of the data point.
func (o DataPointOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataPoint) string { return v.Name }).(pulumi.StringOutput)
}

// An indication of how the data point should be mapped to OpenTelemetry.
func (o DataPointOutput) ObservabilityMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataPoint) *string { return v.ObservabilityMode }).(pulumi.StringPtrOutput)
}

type DataPointArrayOutput struct{ *pulumi.OutputState }

func (DataPointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataPoint)(nil)).Elem()
}

func (o DataPointArrayOutput) ToDataPointArrayOutput() DataPointArrayOutput {
	return o
}

func (o DataPointArrayOutput) ToDataPointArrayOutputWithContext(ctx context.Context) DataPointArrayOutput {
	return o
}

func (o DataPointArrayOutput) Index(i pulumi.IntInput) DataPointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataPoint {
		return vs[0].([]DataPoint)[vs[1].(int)]
	}).(DataPointOutput)
}

// Defines the data point properties.
type DataPointResponse struct {
	// Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
	DataPointConfiguration *string `pulumi:"dataPointConfiguration"`
	// The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset.
	DataSource string `pulumi:"dataSource"`
	// The name of the data point.
	Name string `pulumi:"name"`
	// An indication of how the data point should be mapped to OpenTelemetry.
	ObservabilityMode *string `pulumi:"observabilityMode"`
}

// Defaults sets the appropriate defaults for DataPointResponse
func (val *DataPointResponse) Defaults() *DataPointResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ObservabilityMode == nil {
		observabilityMode_ := "None"
		tmp.ObservabilityMode = &observabilityMode_
	}
	return &tmp
}

// Defines the data point properties.
type DataPointResponseOutput struct{ *pulumi.OutputState }

func (DataPointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataPointResponse)(nil)).Elem()
}

func (o DataPointResponseOutput) ToDataPointResponseOutput() DataPointResponseOutput {
	return o
}

func (o DataPointResponseOutput) ToDataPointResponseOutputWithContext(ctx context.Context) DataPointResponseOutput {
	return o
}

// Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
func (o DataPointResponseOutput) DataPointConfiguration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataPointResponse) *string { return v.DataPointConfiguration }).(pulumi.StringPtrOutput)
}

// The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset.
func (o DataPointResponseOutput) DataSource() pulumi.StringOutput {
	return o.ApplyT(func(v DataPointResponse) string { return v.DataSource }).(pulumi.StringOutput)
}

// The name of the data point.
func (o DataPointResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataPointResponse) string { return v.Name }).(pulumi.StringOutput)
}

// An indication of how the data point should be mapped to OpenTelemetry.
func (o DataPointResponseOutput) ObservabilityMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataPointResponse) *string { return v.ObservabilityMode }).(pulumi.StringPtrOutput)
}

type DataPointResponseArrayOutput struct{ *pulumi.OutputState }

func (DataPointResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataPointResponse)(nil)).Elem()
}

func (o DataPointResponseArrayOutput) ToDataPointResponseArrayOutput() DataPointResponseArrayOutput {
	return o
}

func (o DataPointResponseArrayOutput) ToDataPointResponseArrayOutputWithContext(ctx context.Context) DataPointResponseArrayOutput {
	return o
}

func (o DataPointResponseArrayOutput) Index(i pulumi.IntInput) DataPointResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataPointResponse {
		return vs[0].([]DataPointResponse)[vs[1].(int)]
	}).(DataPointResponseOutput)
}

// Defines the dataset properties.
type Dataset struct {
	// Array of data points that are part of the dataset. Each data point can have per-data point configuration.
	DataPoints []DataPoint `pulumi:"dataPoints"`
	// Stringified JSON that contains connector-specific JSON string that describes configuration for the specific dataset.
	DatasetConfiguration *string `pulumi:"datasetConfiguration"`
	// Name of the dataset.
	Name string `pulumi:"name"`
	// Object that describes the topic information for the specific dataset.
	Topic *Topic `pulumi:"topic"`
}

// Defaults sets the appropriate defaults for Dataset
func (val *Dataset) Defaults() *Dataset {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Topic = tmp.Topic.Defaults()

	return &tmp
}

// DatasetInput is an input type that accepts DatasetArgs and DatasetOutput values.
// You can construct a concrete instance of `DatasetInput` via:
//
//	DatasetArgs{...}
type DatasetInput interface {
	pulumi.Input

	ToDatasetOutput() DatasetOutput
	ToDatasetOutputWithContext(context.Context) DatasetOutput
}

// Defines the dataset properties.
type DatasetArgs struct {
	// Array of data points that are part of the dataset. Each data point can have per-data point configuration.
	DataPoints DataPointArrayInput `pulumi:"dataPoints"`
	// Stringified JSON that contains connector-specific JSON string that describes configuration for the specific dataset.
	DatasetConfiguration pulumi.StringPtrInput `pulumi:"datasetConfiguration"`
	// Name of the dataset.
	Name pulumi.StringInput `pulumi:"name"`
	// Object that describes the topic information for the specific dataset.
	Topic TopicPtrInput `pulumi:"topic"`
}

// Defaults sets the appropriate defaults for DatasetArgs
func (val *DatasetArgs) Defaults() *DatasetArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (DatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Dataset)(nil)).Elem()
}

func (i DatasetArgs) ToDatasetOutput() DatasetOutput {
	return i.ToDatasetOutputWithContext(context.Background())
}

func (i DatasetArgs) ToDatasetOutputWithContext(ctx context.Context) DatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetOutput)
}

// DatasetArrayInput is an input type that accepts DatasetArray and DatasetArrayOutput values.
// You can construct a concrete instance of `DatasetArrayInput` via:
//
//	DatasetArray{ DatasetArgs{...} }
type DatasetArrayInput interface {
	pulumi.Input

	ToDatasetArrayOutput() DatasetArrayOutput
	ToDatasetArrayOutputWithContext(context.Context) DatasetArrayOutput
}

type DatasetArray []DatasetInput

func (DatasetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Dataset)(nil)).Elem()
}

func (i DatasetArray) ToDatasetArrayOutput() DatasetArrayOutput {
	return i.ToDatasetArrayOutputWithContext(context.Background())
}

func (i DatasetArray) ToDatasetArrayOutputWithContext(ctx context.Context) DatasetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetArrayOutput)
}

// Defines the dataset properties.
type DatasetOutput struct{ *pulumi.OutputState }

func (DatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Dataset)(nil)).Elem()
}

func (o DatasetOutput) ToDatasetOutput() DatasetOutput {
	return o
}

func (o DatasetOutput) ToDatasetOutputWithContext(ctx context.Context) DatasetOutput {
	return o
}

// Array of data points that are part of the dataset. Each data point can have per-data point configuration.
func (o DatasetOutput) DataPoints() DataPointArrayOutput {
	return o.ApplyT(func(v Dataset) []DataPoint { return v.DataPoints }).(DataPointArrayOutput)
}

// Stringified JSON that contains connector-specific JSON string that describes configuration for the specific dataset.
func (o DatasetOutput) DatasetConfiguration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Dataset) *string { return v.DatasetConfiguration }).(pulumi.StringPtrOutput)
}

// Name of the dataset.
func (o DatasetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Dataset) string { return v.Name }).(pulumi.StringOutput)
}

// Object that describes the topic information for the specific dataset.
func (o DatasetOutput) Topic() TopicPtrOutput {
	return o.ApplyT(func(v Dataset) *Topic { return v.Topic }).(TopicPtrOutput)
}

type DatasetArrayOutput struct{ *pulumi.OutputState }

func (DatasetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Dataset)(nil)).Elem()
}

func (o DatasetArrayOutput) ToDatasetArrayOutput() DatasetArrayOutput {
	return o
}

func (o DatasetArrayOutput) ToDatasetArrayOutputWithContext(ctx context.Context) DatasetArrayOutput {
	return o
}

func (o DatasetArrayOutput) Index(i pulumi.IntInput) DatasetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Dataset {
		return vs[0].([]Dataset)[vs[1].(int)]
	}).(DatasetOutput)
}

// Defines the dataset properties.
type DatasetResponse struct {
	// Array of data points that are part of the dataset. Each data point can have per-data point configuration.
	DataPoints []DataPointResponse `pulumi:"dataPoints"`
	// Stringified JSON that contains connector-specific JSON string that describes configuration for the specific dataset.
	DatasetConfiguration *string `pulumi:"datasetConfiguration"`
	// Name of the dataset.
	Name string `pulumi:"name"`
	// Object that describes the topic information for the specific dataset.
	Topic *TopicResponse `pulumi:"topic"`
}

// Defaults sets the appropriate defaults for DatasetResponse
func (val *DatasetResponse) Defaults() *DatasetResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Topic = tmp.Topic.Defaults()

	return &tmp
}

// Defines the dataset properties.
type DatasetResponseOutput struct{ *pulumi.OutputState }

func (DatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetResponse)(nil)).Elem()
}

func (o DatasetResponseOutput) ToDatasetResponseOutput() DatasetResponseOutput {
	return o
}

func (o DatasetResponseOutput) ToDatasetResponseOutputWithContext(ctx context.Context) DatasetResponseOutput {
	return o
}

// Array of data points that are part of the dataset. Each data point can have per-data point configuration.
func (o DatasetResponseOutput) DataPoints() DataPointResponseArrayOutput {
	return o.ApplyT(func(v DatasetResponse) []DataPointResponse { return v.DataPoints }).(DataPointResponseArrayOutput)
}

// Stringified JSON that contains connector-specific JSON string that describes configuration for the specific dataset.
func (o DatasetResponseOutput) DatasetConfiguration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetResponse) *string { return v.DatasetConfiguration }).(pulumi.StringPtrOutput)
}

// Name of the dataset.
func (o DatasetResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Object that describes the topic information for the specific dataset.
func (o DatasetResponseOutput) Topic() TopicResponsePtrOutput {
	return o.ApplyT(func(v DatasetResponse) *TopicResponse { return v.Topic }).(TopicResponsePtrOutput)
}

type DatasetResponseArrayOutput struct{ *pulumi.OutputState }

func (DatasetResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetResponse)(nil)).Elem()
}

func (o DatasetResponseArrayOutput) ToDatasetResponseArrayOutput() DatasetResponseArrayOutput {
	return o
}

func (o DatasetResponseArrayOutput) ToDatasetResponseArrayOutputWithContext(ctx context.Context) DatasetResponseArrayOutput {
	return o
}

func (o DatasetResponseArrayOutput) Index(i pulumi.IntInput) DatasetResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatasetResponse {
		return vs[0].([]DatasetResponse)[vs[1].(int)]
	}).(DatasetResponseOutput)
}

// Defines the data point properties.
type DiscoveredDataPoint struct {
	// Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
	DataPointConfiguration *string `pulumi:"dataPointConfiguration"`
	// The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset.
	DataSource string `pulumi:"dataSource"`
	// UTC timestamp indicating when the data point was added or modified.
	LastUpdatedOn *string `pulumi:"lastUpdatedOn"`
	// The name of the data point.
	Name string `pulumi:"name"`
}

// DiscoveredDataPointInput is an input type that accepts DiscoveredDataPointArgs and DiscoveredDataPointOutput values.
// You can construct a concrete instance of `DiscoveredDataPointInput` via:
//
//	DiscoveredDataPointArgs{...}
type DiscoveredDataPointInput interface {
	pulumi.Input

	ToDiscoveredDataPointOutput() DiscoveredDataPointOutput
	ToDiscoveredDataPointOutputWithContext(context.Context) DiscoveredDataPointOutput
}

// Defines the data point properties.
type DiscoveredDataPointArgs struct {
	// Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
	DataPointConfiguration pulumi.StringPtrInput `pulumi:"dataPointConfiguration"`
	// The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset.
	DataSource pulumi.StringInput `pulumi:"dataSource"`
	// UTC timestamp indicating when the data point was added or modified.
	LastUpdatedOn pulumi.StringPtrInput `pulumi:"lastUpdatedOn"`
	// The name of the data point.
	Name pulumi.StringInput `pulumi:"name"`
}

func (DiscoveredDataPointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiscoveredDataPoint)(nil)).Elem()
}

func (i DiscoveredDataPointArgs) ToDiscoveredDataPointOutput() DiscoveredDataPointOutput {
	return i.ToDiscoveredDataPointOutputWithContext(context.Background())
}

func (i DiscoveredDataPointArgs) ToDiscoveredDataPointOutputWithContext(ctx context.Context) DiscoveredDataPointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscoveredDataPointOutput)
}

// DiscoveredDataPointArrayInput is an input type that accepts DiscoveredDataPointArray and DiscoveredDataPointArrayOutput values.
// You can construct a concrete instance of `DiscoveredDataPointArrayInput` via:
//
//	DiscoveredDataPointArray{ DiscoveredDataPointArgs{...} }
type DiscoveredDataPointArrayInput interface {
	pulumi.Input

	ToDiscoveredDataPointArrayOutput() DiscoveredDataPointArrayOutput
	ToDiscoveredDataPointArrayOutputWithContext(context.Context) DiscoveredDataPointArrayOutput
}

type DiscoveredDataPointArray []DiscoveredDataPointInput

func (DiscoveredDataPointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiscoveredDataPoint)(nil)).Elem()
}

func (i DiscoveredDataPointArray) ToDiscoveredDataPointArrayOutput() DiscoveredDataPointArrayOutput {
	return i.ToDiscoveredDataPointArrayOutputWithContext(context.Background())
}

func (i DiscoveredDataPointArray) ToDiscoveredDataPointArrayOutputWithContext(ctx context.Context) DiscoveredDataPointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscoveredDataPointArrayOutput)
}

// Defines the data point properties.
type DiscoveredDataPointOutput struct{ *pulumi.OutputState }

func (DiscoveredDataPointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiscoveredDataPoint)(nil)).Elem()
}

func (o DiscoveredDataPointOutput) ToDiscoveredDataPointOutput() DiscoveredDataPointOutput {
	return o
}

func (o DiscoveredDataPointOutput) ToDiscoveredDataPointOutputWithContext(ctx context.Context) DiscoveredDataPointOutput {
	return o
}

// Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
func (o DiscoveredDataPointOutput) DataPointConfiguration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiscoveredDataPoint) *string { return v.DataPointConfiguration }).(pulumi.StringPtrOutput)
}

// The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset.
func (o DiscoveredDataPointOutput) DataSource() pulumi.StringOutput {
	return o.ApplyT(func(v DiscoveredDataPoint) string { return v.DataSource }).(pulumi.StringOutput)
}

// UTC timestamp indicating when the data point was added or modified.
func (o DiscoveredDataPointOutput) LastUpdatedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiscoveredDataPoint) *string { return v.LastUpdatedOn }).(pulumi.StringPtrOutput)
}

// The name of the data point.
func (o DiscoveredDataPointOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DiscoveredDataPoint) string { return v.Name }).(pulumi.StringOutput)
}

type DiscoveredDataPointArrayOutput struct{ *pulumi.OutputState }

func (DiscoveredDataPointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiscoveredDataPoint)(nil)).Elem()
}

func (o DiscoveredDataPointArrayOutput) ToDiscoveredDataPointArrayOutput() DiscoveredDataPointArrayOutput {
	return o
}

func (o DiscoveredDataPointArrayOutput) ToDiscoveredDataPointArrayOutputWithContext(ctx context.Context) DiscoveredDataPointArrayOutput {
	return o
}

func (o DiscoveredDataPointArrayOutput) Index(i pulumi.IntInput) DiscoveredDataPointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DiscoveredDataPoint {
		return vs[0].([]DiscoveredDataPoint)[vs[1].(int)]
	}).(DiscoveredDataPointOutput)
}

// Defines the data point properties.
type DiscoveredDataPointResponse struct {
	// Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
	DataPointConfiguration *string `pulumi:"dataPointConfiguration"`
	// The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset.
	DataSource string `pulumi:"dataSource"`
	// UTC timestamp indicating when the data point was added or modified.
	LastUpdatedOn *string `pulumi:"lastUpdatedOn"`
	// The name of the data point.
	Name string `pulumi:"name"`
}

// Defines the data point properties.
type DiscoveredDataPointResponseOutput struct{ *pulumi.OutputState }

func (DiscoveredDataPointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiscoveredDataPointResponse)(nil)).Elem()
}

func (o DiscoveredDataPointResponseOutput) ToDiscoveredDataPointResponseOutput() DiscoveredDataPointResponseOutput {
	return o
}

func (o DiscoveredDataPointResponseOutput) ToDiscoveredDataPointResponseOutputWithContext(ctx context.Context) DiscoveredDataPointResponseOutput {
	return o
}

// Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
func (o DiscoveredDataPointResponseOutput) DataPointConfiguration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiscoveredDataPointResponse) *string { return v.DataPointConfiguration }).(pulumi.StringPtrOutput)
}

// The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset.
func (o DiscoveredDataPointResponseOutput) DataSource() pulumi.StringOutput {
	return o.ApplyT(func(v DiscoveredDataPointResponse) string { return v.DataSource }).(pulumi.StringOutput)
}

// UTC timestamp indicating when the data point was added or modified.
func (o DiscoveredDataPointResponseOutput) LastUpdatedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiscoveredDataPointResponse) *string { return v.LastUpdatedOn }).(pulumi.StringPtrOutput)
}

// The name of the data point.
func (o DiscoveredDataPointResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DiscoveredDataPointResponse) string { return v.Name }).(pulumi.StringOutput)
}

type DiscoveredDataPointResponseArrayOutput struct{ *pulumi.OutputState }

func (DiscoveredDataPointResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiscoveredDataPointResponse)(nil)).Elem()
}

func (o DiscoveredDataPointResponseArrayOutput) ToDiscoveredDataPointResponseArrayOutput() DiscoveredDataPointResponseArrayOutput {
	return o
}

func (o DiscoveredDataPointResponseArrayOutput) ToDiscoveredDataPointResponseArrayOutputWithContext(ctx context.Context) DiscoveredDataPointResponseArrayOutput {
	return o
}

func (o DiscoveredDataPointResponseArrayOutput) Index(i pulumi.IntInput) DiscoveredDataPointResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DiscoveredDataPointResponse {
		return vs[0].([]DiscoveredDataPointResponse)[vs[1].(int)]
	}).(DiscoveredDataPointResponseOutput)
}

// Defines the dataset properties.
type DiscoveredDataset struct {
	// Array of data points that are part of the dataset. Each data point can have per-data point configuration.
	DataPoints []DiscoveredDataPoint `pulumi:"dataPoints"`
	// Stringified JSON that contains connector-specific properties that describes configuration for the specific dataset.
	DatasetConfiguration *string `pulumi:"datasetConfiguration"`
	// Name of the dataset.
	Name string `pulumi:"name"`
	// Object that describes the topic information for the specific dataset.
	Topic *Topic `pulumi:"topic"`
}

// Defaults sets the appropriate defaults for DiscoveredDataset
func (val *DiscoveredDataset) Defaults() *DiscoveredDataset {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Topic = tmp.Topic.Defaults()

	return &tmp
}

// DiscoveredDatasetInput is an input type that accepts DiscoveredDatasetArgs and DiscoveredDatasetOutput values.
// You can construct a concrete instance of `DiscoveredDatasetInput` via:
//
//	DiscoveredDatasetArgs{...}
type DiscoveredDatasetInput interface {
	pulumi.Input

	ToDiscoveredDatasetOutput() DiscoveredDatasetOutput
	ToDiscoveredDatasetOutputWithContext(context.Context) DiscoveredDatasetOutput
}

// Defines the dataset properties.
type DiscoveredDatasetArgs struct {
	// Array of data points that are part of the dataset. Each data point can have per-data point configuration.
	DataPoints DiscoveredDataPointArrayInput `pulumi:"dataPoints"`
	// Stringified JSON that contains connector-specific properties that describes configuration for the specific dataset.
	DatasetConfiguration pulumi.StringPtrInput `pulumi:"datasetConfiguration"`
	// Name of the dataset.
	Name pulumi.StringInput `pulumi:"name"`
	// Object that describes the topic information for the specific dataset.
	Topic TopicPtrInput `pulumi:"topic"`
}

// Defaults sets the appropriate defaults for DiscoveredDatasetArgs
func (val *DiscoveredDatasetArgs) Defaults() *DiscoveredDatasetArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (DiscoveredDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiscoveredDataset)(nil)).Elem()
}

func (i DiscoveredDatasetArgs) ToDiscoveredDatasetOutput() DiscoveredDatasetOutput {
	return i.ToDiscoveredDatasetOutputWithContext(context.Background())
}

func (i DiscoveredDatasetArgs) ToDiscoveredDatasetOutputWithContext(ctx context.Context) DiscoveredDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscoveredDatasetOutput)
}

// DiscoveredDatasetArrayInput is an input type that accepts DiscoveredDatasetArray and DiscoveredDatasetArrayOutput values.
// You can construct a concrete instance of `DiscoveredDatasetArrayInput` via:
//
//	DiscoveredDatasetArray{ DiscoveredDatasetArgs{...} }
type DiscoveredDatasetArrayInput interface {
	pulumi.Input

	ToDiscoveredDatasetArrayOutput() DiscoveredDatasetArrayOutput
	ToDiscoveredDatasetArrayOutputWithContext(context.Context) DiscoveredDatasetArrayOutput
}

type DiscoveredDatasetArray []DiscoveredDatasetInput

func (DiscoveredDatasetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiscoveredDataset)(nil)).Elem()
}

func (i DiscoveredDatasetArray) ToDiscoveredDatasetArrayOutput() DiscoveredDatasetArrayOutput {
	return i.ToDiscoveredDatasetArrayOutputWithContext(context.Background())
}

func (i DiscoveredDatasetArray) ToDiscoveredDatasetArrayOutputWithContext(ctx context.Context) DiscoveredDatasetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscoveredDatasetArrayOutput)
}

// Defines the dataset properties.
type DiscoveredDatasetOutput struct{ *pulumi.OutputState }

func (DiscoveredDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiscoveredDataset)(nil)).Elem()
}

func (o DiscoveredDatasetOutput) ToDiscoveredDatasetOutput() DiscoveredDatasetOutput {
	return o
}

func (o DiscoveredDatasetOutput) ToDiscoveredDatasetOutputWithContext(ctx context.Context) DiscoveredDatasetOutput {
	return o
}

// Array of data points that are part of the dataset. Each data point can have per-data point configuration.
func (o DiscoveredDatasetOutput) DataPoints() DiscoveredDataPointArrayOutput {
	return o.ApplyT(func(v DiscoveredDataset) []DiscoveredDataPoint { return v.DataPoints }).(DiscoveredDataPointArrayOutput)
}

// Stringified JSON that contains connector-specific properties that describes configuration for the specific dataset.
func (o DiscoveredDatasetOutput) DatasetConfiguration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiscoveredDataset) *string { return v.DatasetConfiguration }).(pulumi.StringPtrOutput)
}

// Name of the dataset.
func (o DiscoveredDatasetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DiscoveredDataset) string { return v.Name }).(pulumi.StringOutput)
}

// Object that describes the topic information for the specific dataset.
func (o DiscoveredDatasetOutput) Topic() TopicPtrOutput {
	return o.ApplyT(func(v DiscoveredDataset) *Topic { return v.Topic }).(TopicPtrOutput)
}

type DiscoveredDatasetArrayOutput struct{ *pulumi.OutputState }

func (DiscoveredDatasetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiscoveredDataset)(nil)).Elem()
}

func (o DiscoveredDatasetArrayOutput) ToDiscoveredDatasetArrayOutput() DiscoveredDatasetArrayOutput {
	return o
}

func (o DiscoveredDatasetArrayOutput) ToDiscoveredDatasetArrayOutputWithContext(ctx context.Context) DiscoveredDatasetArrayOutput {
	return o
}

func (o DiscoveredDatasetArrayOutput) Index(i pulumi.IntInput) DiscoveredDatasetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DiscoveredDataset {
		return vs[0].([]DiscoveredDataset)[vs[1].(int)]
	}).(DiscoveredDatasetOutput)
}

// Defines the dataset properties.
type DiscoveredDatasetResponse struct {
	// Array of data points that are part of the dataset. Each data point can have per-data point configuration.
	DataPoints []DiscoveredDataPointResponse `pulumi:"dataPoints"`
	// Stringified JSON that contains connector-specific properties that describes configuration for the specific dataset.
	DatasetConfiguration *string `pulumi:"datasetConfiguration"`
	// Name of the dataset.
	Name string `pulumi:"name"`
	// Object that describes the topic information for the specific dataset.
	Topic *TopicResponse `pulumi:"topic"`
}

// Defaults sets the appropriate defaults for DiscoveredDatasetResponse
func (val *DiscoveredDatasetResponse) Defaults() *DiscoveredDatasetResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Topic = tmp.Topic.Defaults()

	return &tmp
}

// Defines the dataset properties.
type DiscoveredDatasetResponseOutput struct{ *pulumi.OutputState }

func (DiscoveredDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiscoveredDatasetResponse)(nil)).Elem()
}

func (o DiscoveredDatasetResponseOutput) ToDiscoveredDatasetResponseOutput() DiscoveredDatasetResponseOutput {
	return o
}

func (o DiscoveredDatasetResponseOutput) ToDiscoveredDatasetResponseOutputWithContext(ctx context.Context) DiscoveredDatasetResponseOutput {
	return o
}

// Array of data points that are part of the dataset. Each data point can have per-data point configuration.
func (o DiscoveredDatasetResponseOutput) DataPoints() DiscoveredDataPointResponseArrayOutput {
	return o.ApplyT(func(v DiscoveredDatasetResponse) []DiscoveredDataPointResponse { return v.DataPoints }).(DiscoveredDataPointResponseArrayOutput)
}

// Stringified JSON that contains connector-specific properties that describes configuration for the specific dataset.
func (o DiscoveredDatasetResponseOutput) DatasetConfiguration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiscoveredDatasetResponse) *string { return v.DatasetConfiguration }).(pulumi.StringPtrOutput)
}

// Name of the dataset.
func (o DiscoveredDatasetResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DiscoveredDatasetResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Object that describes the topic information for the specific dataset.
func (o DiscoveredDatasetResponseOutput) Topic() TopicResponsePtrOutput {
	return o.ApplyT(func(v DiscoveredDatasetResponse) *TopicResponse { return v.Topic }).(TopicResponsePtrOutput)
}

type DiscoveredDatasetResponseArrayOutput struct{ *pulumi.OutputState }

func (DiscoveredDatasetResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiscoveredDatasetResponse)(nil)).Elem()
}

func (o DiscoveredDatasetResponseArrayOutput) ToDiscoveredDatasetResponseArrayOutput() DiscoveredDatasetResponseArrayOutput {
	return o
}

func (o DiscoveredDatasetResponseArrayOutput) ToDiscoveredDatasetResponseArrayOutputWithContext(ctx context.Context) DiscoveredDatasetResponseArrayOutput {
	return o
}

func (o DiscoveredDatasetResponseArrayOutput) Index(i pulumi.IntInput) DiscoveredDatasetResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DiscoveredDatasetResponse {
		return vs[0].([]DiscoveredDatasetResponse)[vs[1].(int)]
	}).(DiscoveredDatasetResponseOutput)
}

// Defines the event properties.
type DiscoveredEvent struct {
	// Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
	EventConfiguration *string `pulumi:"eventConfiguration"`
	// The address of the notifier of the event in the asset (e.g. URL) so that a client can access the event on the asset.
	EventNotifier string `pulumi:"eventNotifier"`
	// UTC timestamp indicating when the event was added or modified.
	LastUpdatedOn *string `pulumi:"lastUpdatedOn"`
	// The name of the event.
	Name string `pulumi:"name"`
	// Object that describes the topic information for the specific event.
	Topic *Topic `pulumi:"topic"`
}

// Defaults sets the appropriate defaults for DiscoveredEvent
func (val *DiscoveredEvent) Defaults() *DiscoveredEvent {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Topic = tmp.Topic.Defaults()

	return &tmp
}

// DiscoveredEventInput is an input type that accepts DiscoveredEventArgs and DiscoveredEventOutput values.
// You can construct a concrete instance of `DiscoveredEventInput` via:
//
//	DiscoveredEventArgs{...}
type DiscoveredEventInput interface {
	pulumi.Input

	ToDiscoveredEventOutput() DiscoveredEventOutput
	ToDiscoveredEventOutputWithContext(context.Context) DiscoveredEventOutput
}

// Defines the event properties.
type DiscoveredEventArgs struct {
	// Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
	EventConfiguration pulumi.StringPtrInput `pulumi:"eventConfiguration"`
	// The address of the notifier of the event in the asset (e.g. URL) so that a client can access the event on the asset.
	EventNotifier pulumi.StringInput `pulumi:"eventNotifier"`
	// UTC timestamp indicating when the event was added or modified.
	LastUpdatedOn pulumi.StringPtrInput `pulumi:"lastUpdatedOn"`
	// The name of the event.
	Name pulumi.StringInput `pulumi:"name"`
	// Object that describes the topic information for the specific event.
	Topic TopicPtrInput `pulumi:"topic"`
}

// Defaults sets the appropriate defaults for DiscoveredEventArgs
func (val *DiscoveredEventArgs) Defaults() *DiscoveredEventArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (DiscoveredEventArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiscoveredEvent)(nil)).Elem()
}

func (i DiscoveredEventArgs) ToDiscoveredEventOutput() DiscoveredEventOutput {
	return i.ToDiscoveredEventOutputWithContext(context.Background())
}

func (i DiscoveredEventArgs) ToDiscoveredEventOutputWithContext(ctx context.Context) DiscoveredEventOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscoveredEventOutput)
}

// DiscoveredEventArrayInput is an input type that accepts DiscoveredEventArray and DiscoveredEventArrayOutput values.
// You can construct a concrete instance of `DiscoveredEventArrayInput` via:
//
//	DiscoveredEventArray{ DiscoveredEventArgs{...} }
type DiscoveredEventArrayInput interface {
	pulumi.Input

	ToDiscoveredEventArrayOutput() DiscoveredEventArrayOutput
	ToDiscoveredEventArrayOutputWithContext(context.Context) DiscoveredEventArrayOutput
}

type DiscoveredEventArray []DiscoveredEventInput

func (DiscoveredEventArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiscoveredEvent)(nil)).Elem()
}

func (i DiscoveredEventArray) ToDiscoveredEventArrayOutput() DiscoveredEventArrayOutput {
	return i.ToDiscoveredEventArrayOutputWithContext(context.Background())
}

func (i DiscoveredEventArray) ToDiscoveredEventArrayOutputWithContext(ctx context.Context) DiscoveredEventArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscoveredEventArrayOutput)
}

// Defines the event properties.
type DiscoveredEventOutput struct{ *pulumi.OutputState }

func (DiscoveredEventOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiscoveredEvent)(nil)).Elem()
}

func (o DiscoveredEventOutput) ToDiscoveredEventOutput() DiscoveredEventOutput {
	return o
}

func (o DiscoveredEventOutput) ToDiscoveredEventOutputWithContext(ctx context.Context) DiscoveredEventOutput {
	return o
}

// Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
func (o DiscoveredEventOutput) EventConfiguration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiscoveredEvent) *string { return v.EventConfiguration }).(pulumi.StringPtrOutput)
}

// The address of the notifier of the event in the asset (e.g. URL) so that a client can access the event on the asset.
func (o DiscoveredEventOutput) EventNotifier() pulumi.StringOutput {
	return o.ApplyT(func(v DiscoveredEvent) string { return v.EventNotifier }).(pulumi.StringOutput)
}

// UTC timestamp indicating when the event was added or modified.
func (o DiscoveredEventOutput) LastUpdatedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiscoveredEvent) *string { return v.LastUpdatedOn }).(pulumi.StringPtrOutput)
}

// The name of the event.
func (o DiscoveredEventOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DiscoveredEvent) string { return v.Name }).(pulumi.StringOutput)
}

// Object that describes the topic information for the specific event.
func (o DiscoveredEventOutput) Topic() TopicPtrOutput {
	return o.ApplyT(func(v DiscoveredEvent) *Topic { return v.Topic }).(TopicPtrOutput)
}

type DiscoveredEventArrayOutput struct{ *pulumi.OutputState }

func (DiscoveredEventArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiscoveredEvent)(nil)).Elem()
}

func (o DiscoveredEventArrayOutput) ToDiscoveredEventArrayOutput() DiscoveredEventArrayOutput {
	return o
}

func (o DiscoveredEventArrayOutput) ToDiscoveredEventArrayOutputWithContext(ctx context.Context) DiscoveredEventArrayOutput {
	return o
}

func (o DiscoveredEventArrayOutput) Index(i pulumi.IntInput) DiscoveredEventOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DiscoveredEvent {
		return vs[0].([]DiscoveredEvent)[vs[1].(int)]
	}).(DiscoveredEventOutput)
}

// Defines the event properties.
type DiscoveredEventResponse struct {
	// Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
	EventConfiguration *string `pulumi:"eventConfiguration"`
	// The address of the notifier of the event in the asset (e.g. URL) so that a client can access the event on the asset.
	EventNotifier string `pulumi:"eventNotifier"`
	// UTC timestamp indicating when the event was added or modified.
	LastUpdatedOn *string `pulumi:"lastUpdatedOn"`
	// The name of the event.
	Name string `pulumi:"name"`
	// Object that describes the topic information for the specific event.
	Topic *TopicResponse `pulumi:"topic"`
}

// Defaults sets the appropriate defaults for DiscoveredEventResponse
func (val *DiscoveredEventResponse) Defaults() *DiscoveredEventResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Topic = tmp.Topic.Defaults()

	return &tmp
}

// Defines the event properties.
type DiscoveredEventResponseOutput struct{ *pulumi.OutputState }

func (DiscoveredEventResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiscoveredEventResponse)(nil)).Elem()
}

func (o DiscoveredEventResponseOutput) ToDiscoveredEventResponseOutput() DiscoveredEventResponseOutput {
	return o
}

func (o DiscoveredEventResponseOutput) ToDiscoveredEventResponseOutputWithContext(ctx context.Context) DiscoveredEventResponseOutput {
	return o
}

// Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
func (o DiscoveredEventResponseOutput) EventConfiguration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiscoveredEventResponse) *string { return v.EventConfiguration }).(pulumi.StringPtrOutput)
}

// The address of the notifier of the event in the asset (e.g. URL) so that a client can access the event on the asset.
func (o DiscoveredEventResponseOutput) EventNotifier() pulumi.StringOutput {
	return o.ApplyT(func(v DiscoveredEventResponse) string { return v.EventNotifier }).(pulumi.StringOutput)
}

// UTC timestamp indicating when the event was added or modified.
func (o DiscoveredEventResponseOutput) LastUpdatedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiscoveredEventResponse) *string { return v.LastUpdatedOn }).(pulumi.StringPtrOutput)
}

// The name of the event.
func (o DiscoveredEventResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DiscoveredEventResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Object that describes the topic information for the specific event.
func (o DiscoveredEventResponseOutput) Topic() TopicResponsePtrOutput {
	return o.ApplyT(func(v DiscoveredEventResponse) *TopicResponse { return v.Topic }).(TopicResponsePtrOutput)
}

type DiscoveredEventResponseArrayOutput struct{ *pulumi.OutputState }

func (DiscoveredEventResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiscoveredEventResponse)(nil)).Elem()
}

func (o DiscoveredEventResponseArrayOutput) ToDiscoveredEventResponseArrayOutput() DiscoveredEventResponseArrayOutput {
	return o
}

func (o DiscoveredEventResponseArrayOutput) ToDiscoveredEventResponseArrayOutputWithContext(ctx context.Context) DiscoveredEventResponseArrayOutput {
	return o
}

func (o DiscoveredEventResponseArrayOutput) Index(i pulumi.IntInput) DiscoveredEventResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DiscoveredEventResponse {
		return vs[0].([]DiscoveredEventResponse)[vs[1].(int)]
	}).(DiscoveredEventResponseOutput)
}

// Defines the event properties.
type Event struct {
	// Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
	EventConfiguration *string `pulumi:"eventConfiguration"`
	// The address of the notifier of the event in the asset (e.g. URL) so that a client can access the event on the asset.
	EventNotifier string `pulumi:"eventNotifier"`
	// The name of the event.
	Name string `pulumi:"name"`
	// An indication of how the event should be mapped to OpenTelemetry.
	ObservabilityMode *string `pulumi:"observabilityMode"`
	// Object that describes the topic information for the specific event.
	Topic *Topic `pulumi:"topic"`
}

// Defaults sets the appropriate defaults for Event
func (val *Event) Defaults() *Event {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ObservabilityMode == nil {
		observabilityMode_ := "None"
		tmp.ObservabilityMode = &observabilityMode_
	}
	tmp.Topic = tmp.Topic.Defaults()

	return &tmp
}

// EventInput is an input type that accepts EventArgs and EventOutput values.
// You can construct a concrete instance of `EventInput` via:
//
//	EventArgs{...}
type EventInput interface {
	pulumi.Input

	ToEventOutput() EventOutput
	ToEventOutputWithContext(context.Context) EventOutput
}

// Defines the event properties.
type EventArgs struct {
	// Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
	EventConfiguration pulumi.StringPtrInput `pulumi:"eventConfiguration"`
	// The address of the notifier of the event in the asset (e.g. URL) so that a client can access the event on the asset.
	EventNotifier pulumi.StringInput `pulumi:"eventNotifier"`
	// The name of the event.
	Name pulumi.StringInput `pulumi:"name"`
	// An indication of how the event should be mapped to OpenTelemetry.
	ObservabilityMode pulumi.StringPtrInput `pulumi:"observabilityMode"`
	// Object that describes the topic information for the specific event.
	Topic TopicPtrInput `pulumi:"topic"`
}

// Defaults sets the appropriate defaults for EventArgs
func (val *EventArgs) Defaults() *EventArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ObservabilityMode == nil {
		tmp.ObservabilityMode = pulumi.StringPtr("None")
	}

	return &tmp
}
func (EventArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Event)(nil)).Elem()
}

func (i EventArgs) ToEventOutput() EventOutput {
	return i.ToEventOutputWithContext(context.Background())
}

func (i EventArgs) ToEventOutputWithContext(ctx context.Context) EventOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOutput)
}

// EventArrayInput is an input type that accepts EventArray and EventArrayOutput values.
// You can construct a concrete instance of `EventArrayInput` via:
//
//	EventArray{ EventArgs{...} }
type EventArrayInput interface {
	pulumi.Input

	ToEventArrayOutput() EventArrayOutput
	ToEventArrayOutputWithContext(context.Context) EventArrayOutput
}

type EventArray []EventInput

func (EventArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Event)(nil)).Elem()
}

func (i EventArray) ToEventArrayOutput() EventArrayOutput {
	return i.ToEventArrayOutputWithContext(context.Background())
}

func (i EventArray) ToEventArrayOutputWithContext(ctx context.Context) EventArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventArrayOutput)
}

// Defines the event properties.
type EventOutput struct{ *pulumi.OutputState }

func (EventOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Event)(nil)).Elem()
}

func (o EventOutput) ToEventOutput() EventOutput {
	return o
}

func (o EventOutput) ToEventOutputWithContext(ctx context.Context) EventOutput {
	return o
}

// Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
func (o EventOutput) EventConfiguration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Event) *string { return v.EventConfiguration }).(pulumi.StringPtrOutput)
}

// The address of the notifier of the event in the asset (e.g. URL) so that a client can access the event on the asset.
func (o EventOutput) EventNotifier() pulumi.StringOutput {
	return o.ApplyT(func(v Event) string { return v.EventNotifier }).(pulumi.StringOutput)
}

// The name of the event.
func (o EventOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Event) string { return v.Name }).(pulumi.StringOutput)
}

// An indication of how the event should be mapped to OpenTelemetry.
func (o EventOutput) ObservabilityMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Event) *string { return v.ObservabilityMode }).(pulumi.StringPtrOutput)
}

// Object that describes the topic information for the specific event.
func (o EventOutput) Topic() TopicPtrOutput {
	return o.ApplyT(func(v Event) *Topic { return v.Topic }).(TopicPtrOutput)
}

type EventArrayOutput struct{ *pulumi.OutputState }

func (EventArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Event)(nil)).Elem()
}

func (o EventArrayOutput) ToEventArrayOutput() EventArrayOutput {
	return o
}

func (o EventArrayOutput) ToEventArrayOutputWithContext(ctx context.Context) EventArrayOutput {
	return o
}

func (o EventArrayOutput) Index(i pulumi.IntInput) EventOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Event {
		return vs[0].([]Event)[vs[1].(int)]
	}).(EventOutput)
}

// Defines the event properties.
type EventResponse struct {
	// Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
	EventConfiguration *string `pulumi:"eventConfiguration"`
	// The address of the notifier of the event in the asset (e.g. URL) so that a client can access the event on the asset.
	EventNotifier string `pulumi:"eventNotifier"`
	// The name of the event.
	Name string `pulumi:"name"`
	// An indication of how the event should be mapped to OpenTelemetry.
	ObservabilityMode *string `pulumi:"observabilityMode"`
	// Object that describes the topic information for the specific event.
	Topic *TopicResponse `pulumi:"topic"`
}

// Defaults sets the appropriate defaults for EventResponse
func (val *EventResponse) Defaults() *EventResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ObservabilityMode == nil {
		observabilityMode_ := "None"
		tmp.ObservabilityMode = &observabilityMode_
	}
	tmp.Topic = tmp.Topic.Defaults()

	return &tmp
}

// Defines the event properties.
type EventResponseOutput struct{ *pulumi.OutputState }

func (EventResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventResponse)(nil)).Elem()
}

func (o EventResponseOutput) ToEventResponseOutput() EventResponseOutput {
	return o
}

func (o EventResponseOutput) ToEventResponseOutputWithContext(ctx context.Context) EventResponseOutput {
	return o
}

// Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
func (o EventResponseOutput) EventConfiguration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventResponse) *string { return v.EventConfiguration }).(pulumi.StringPtrOutput)
}

// The address of the notifier of the event in the asset (e.g. URL) so that a client can access the event on the asset.
func (o EventResponseOutput) EventNotifier() pulumi.StringOutput {
	return o.ApplyT(func(v EventResponse) string { return v.EventNotifier }).(pulumi.StringOutput)
}

// The name of the event.
func (o EventResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EventResponse) string { return v.Name }).(pulumi.StringOutput)
}

// An indication of how the event should be mapped to OpenTelemetry.
func (o EventResponseOutput) ObservabilityMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventResponse) *string { return v.ObservabilityMode }).(pulumi.StringPtrOutput)
}

// Object that describes the topic information for the specific event.
func (o EventResponseOutput) Topic() TopicResponsePtrOutput {
	return o.ApplyT(func(v EventResponse) *TopicResponse { return v.Topic }).(TopicResponsePtrOutput)
}

type EventResponseArrayOutput struct{ *pulumi.OutputState }

func (EventResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventResponse)(nil)).Elem()
}

func (o EventResponseArrayOutput) ToEventResponseArrayOutput() EventResponseArrayOutput {
	return o
}

func (o EventResponseArrayOutput) ToEventResponseArrayOutputWithContext(ctx context.Context) EventResponseArrayOutput {
	return o
}

func (o EventResponseArrayOutput) Index(i pulumi.IntInput) EventResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventResponse {
		return vs[0].([]EventResponse)[vs[1].(int)]
	}).(EventResponseOutput)
}

// The extended location.
type ExtendedLocation struct {
	// The extended location name.
	Name string `pulumi:"name"`
	// The extended location type.
	Type string `pulumi:"type"`
}

// ExtendedLocationInput is an input type that accepts ExtendedLocationArgs and ExtendedLocationOutput values.
// You can construct a concrete instance of `ExtendedLocationInput` via:
//
//	ExtendedLocationArgs{...}
type ExtendedLocationInput interface {
	pulumi.Input

	ToExtendedLocationOutput() ExtendedLocationOutput
	ToExtendedLocationOutputWithContext(context.Context) ExtendedLocationOutput
}

// The extended location.
type ExtendedLocationArgs struct {
	// The extended location name.
	Name pulumi.StringInput `pulumi:"name"`
	// The extended location type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ExtendedLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocation)(nil)).Elem()
}

func (i ExtendedLocationArgs) ToExtendedLocationOutput() ExtendedLocationOutput {
	return i.ToExtendedLocationOutputWithContext(context.Background())
}

func (i ExtendedLocationArgs) ToExtendedLocationOutputWithContext(ctx context.Context) ExtendedLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedLocationOutput)
}

// The extended location.
type ExtendedLocationOutput struct{ *pulumi.OutputState }

func (ExtendedLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocation)(nil)).Elem()
}

func (o ExtendedLocationOutput) ToExtendedLocationOutput() ExtendedLocationOutput {
	return o
}

func (o ExtendedLocationOutput) ToExtendedLocationOutputWithContext(ctx context.Context) ExtendedLocationOutput {
	return o
}

// The extended location name.
func (o ExtendedLocationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExtendedLocation) string { return v.Name }).(pulumi.StringOutput)
}

// The extended location type.
func (o ExtendedLocationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExtendedLocation) string { return v.Type }).(pulumi.StringOutput)
}

// The extended location.
type ExtendedLocationResponse struct {
	// The extended location name.
	Name string `pulumi:"name"`
	// The extended location type.
	Type string `pulumi:"type"`
}

// The extended location.
type ExtendedLocationResponseOutput struct{ *pulumi.OutputState }

func (ExtendedLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocationResponse)(nil)).Elem()
}

func (o ExtendedLocationResponseOutput) ToExtendedLocationResponseOutput() ExtendedLocationResponseOutput {
	return o
}

func (o ExtendedLocationResponseOutput) ToExtendedLocationResponseOutputWithContext(ctx context.Context) ExtendedLocationResponseOutput {
	return o
}

// The extended location name.
func (o ExtendedLocationResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExtendedLocationResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The extended location type.
func (o ExtendedLocationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExtendedLocationResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Defines the message schema reference properties.
type MessageSchemaReferenceResponse struct {
	// The message schema name.
	SchemaName string `pulumi:"schemaName"`
	// The message schema registry namespace.
	SchemaRegistryNamespace string `pulumi:"schemaRegistryNamespace"`
	// The message schema version.
	SchemaVersion string `pulumi:"schemaVersion"`
}

// Defines the message schema reference properties.
type MessageSchemaReferenceResponseOutput struct{ *pulumi.OutputState }

func (MessageSchemaReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MessageSchemaReferenceResponse)(nil)).Elem()
}

func (o MessageSchemaReferenceResponseOutput) ToMessageSchemaReferenceResponseOutput() MessageSchemaReferenceResponseOutput {
	return o
}

func (o MessageSchemaReferenceResponseOutput) ToMessageSchemaReferenceResponseOutputWithContext(ctx context.Context) MessageSchemaReferenceResponseOutput {
	return o
}

// The message schema name.
func (o MessageSchemaReferenceResponseOutput) SchemaName() pulumi.StringOutput {
	return o.ApplyT(func(v MessageSchemaReferenceResponse) string { return v.SchemaName }).(pulumi.StringOutput)
}

// The message schema registry namespace.
func (o MessageSchemaReferenceResponseOutput) SchemaRegistryNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v MessageSchemaReferenceResponse) string { return v.SchemaRegistryNamespace }).(pulumi.StringOutput)
}

// The message schema version.
func (o MessageSchemaReferenceResponseOutput) SchemaVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MessageSchemaReferenceResponse) string { return v.SchemaVersion }).(pulumi.StringOutput)
}

// Managed service identity (either system assigned, or none)
type SystemAssignedServiceIdentity struct {
	// Type of managed service identity (either system assigned, or none).
	Type string `pulumi:"type"`
}

// SystemAssignedServiceIdentityInput is an input type that accepts SystemAssignedServiceIdentityArgs and SystemAssignedServiceIdentityOutput values.
// You can construct a concrete instance of `SystemAssignedServiceIdentityInput` via:
//
//	SystemAssignedServiceIdentityArgs{...}
type SystemAssignedServiceIdentityInput interface {
	pulumi.Input

	ToSystemAssignedServiceIdentityOutput() SystemAssignedServiceIdentityOutput
	ToSystemAssignedServiceIdentityOutputWithContext(context.Context) SystemAssignedServiceIdentityOutput
}

// Managed service identity (either system assigned, or none)
type SystemAssignedServiceIdentityArgs struct {
	// Type of managed service identity (either system assigned, or none).
	Type pulumi.StringInput `pulumi:"type"`
}

func (SystemAssignedServiceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemAssignedServiceIdentity)(nil)).Elem()
}

func (i SystemAssignedServiceIdentityArgs) ToSystemAssignedServiceIdentityOutput() SystemAssignedServiceIdentityOutput {
	return i.ToSystemAssignedServiceIdentityOutputWithContext(context.Background())
}

func (i SystemAssignedServiceIdentityArgs) ToSystemAssignedServiceIdentityOutputWithContext(ctx context.Context) SystemAssignedServiceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemAssignedServiceIdentityOutput)
}

func (i SystemAssignedServiceIdentityArgs) ToSystemAssignedServiceIdentityPtrOutput() SystemAssignedServiceIdentityPtrOutput {
	return i.ToSystemAssignedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i SystemAssignedServiceIdentityArgs) ToSystemAssignedServiceIdentityPtrOutputWithContext(ctx context.Context) SystemAssignedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemAssignedServiceIdentityOutput).ToSystemAssignedServiceIdentityPtrOutputWithContext(ctx)
}

// SystemAssignedServiceIdentityPtrInput is an input type that accepts SystemAssignedServiceIdentityArgs, SystemAssignedServiceIdentityPtr and SystemAssignedServiceIdentityPtrOutput values.
// You can construct a concrete instance of `SystemAssignedServiceIdentityPtrInput` via:
//
//	        SystemAssignedServiceIdentityArgs{...}
//
//	or:
//
//	        nil
type SystemAssignedServiceIdentityPtrInput interface {
	pulumi.Input

	ToSystemAssignedServiceIdentityPtrOutput() SystemAssignedServiceIdentityPtrOutput
	ToSystemAssignedServiceIdentityPtrOutputWithContext(context.Context) SystemAssignedServiceIdentityPtrOutput
}

type systemAssignedServiceIdentityPtrType SystemAssignedServiceIdentityArgs

func SystemAssignedServiceIdentityPtr(v *SystemAssignedServiceIdentityArgs) SystemAssignedServiceIdentityPtrInput {
	return (*systemAssignedServiceIdentityPtrType)(v)
}

func (*systemAssignedServiceIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemAssignedServiceIdentity)(nil)).Elem()
}

func (i *systemAssignedServiceIdentityPtrType) ToSystemAssignedServiceIdentityPtrOutput() SystemAssignedServiceIdentityPtrOutput {
	return i.ToSystemAssignedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i *systemAssignedServiceIdentityPtrType) ToSystemAssignedServiceIdentityPtrOutputWithContext(ctx context.Context) SystemAssignedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemAssignedServiceIdentityPtrOutput)
}

// Managed service identity (either system assigned, or none)
type SystemAssignedServiceIdentityOutput struct{ *pulumi.OutputState }

func (SystemAssignedServiceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemAssignedServiceIdentity)(nil)).Elem()
}

func (o SystemAssignedServiceIdentityOutput) ToSystemAssignedServiceIdentityOutput() SystemAssignedServiceIdentityOutput {
	return o
}

func (o SystemAssignedServiceIdentityOutput) ToSystemAssignedServiceIdentityOutputWithContext(ctx context.Context) SystemAssignedServiceIdentityOutput {
	return o
}

func (o SystemAssignedServiceIdentityOutput) ToSystemAssignedServiceIdentityPtrOutput() SystemAssignedServiceIdentityPtrOutput {
	return o.ToSystemAssignedServiceIdentityPtrOutputWithContext(context.Background())
}

func (o SystemAssignedServiceIdentityOutput) ToSystemAssignedServiceIdentityPtrOutputWithContext(ctx context.Context) SystemAssignedServiceIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SystemAssignedServiceIdentity) *SystemAssignedServiceIdentity {
		return &v
	}).(SystemAssignedServiceIdentityPtrOutput)
}

// Type of managed service identity (either system assigned, or none).
func (o SystemAssignedServiceIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SystemAssignedServiceIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type SystemAssignedServiceIdentityPtrOutput struct{ *pulumi.OutputState }

func (SystemAssignedServiceIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemAssignedServiceIdentity)(nil)).Elem()
}

func (o SystemAssignedServiceIdentityPtrOutput) ToSystemAssignedServiceIdentityPtrOutput() SystemAssignedServiceIdentityPtrOutput {
	return o
}

func (o SystemAssignedServiceIdentityPtrOutput) ToSystemAssignedServiceIdentityPtrOutputWithContext(ctx context.Context) SystemAssignedServiceIdentityPtrOutput {
	return o
}

func (o SystemAssignedServiceIdentityPtrOutput) Elem() SystemAssignedServiceIdentityOutput {
	return o.ApplyT(func(v *SystemAssignedServiceIdentity) SystemAssignedServiceIdentity {
		if v != nil {
			return *v
		}
		var ret SystemAssignedServiceIdentity
		return ret
	}).(SystemAssignedServiceIdentityOutput)
}

// Type of managed service identity (either system assigned, or none).
func (o SystemAssignedServiceIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemAssignedServiceIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Managed service identity (either system assigned, or none)
type SystemAssignedServiceIdentityResponse struct {
	// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
	TenantId string `pulumi:"tenantId"`
	// Type of managed service identity (either system assigned, or none).
	Type string `pulumi:"type"`
}

// Managed service identity (either system assigned, or none)
type SystemAssignedServiceIdentityResponseOutput struct{ *pulumi.OutputState }

func (SystemAssignedServiceIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemAssignedServiceIdentityResponse)(nil)).Elem()
}

func (o SystemAssignedServiceIdentityResponseOutput) ToSystemAssignedServiceIdentityResponseOutput() SystemAssignedServiceIdentityResponseOutput {
	return o
}

func (o SystemAssignedServiceIdentityResponseOutput) ToSystemAssignedServiceIdentityResponseOutputWithContext(ctx context.Context) SystemAssignedServiceIdentityResponseOutput {
	return o
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o SystemAssignedServiceIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v SystemAssignedServiceIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o SystemAssignedServiceIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v SystemAssignedServiceIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// Type of managed service identity (either system assigned, or none).
func (o SystemAssignedServiceIdentityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SystemAssignedServiceIdentityResponse) string { return v.Type }).(pulumi.StringOutput)
}

type SystemAssignedServiceIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (SystemAssignedServiceIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemAssignedServiceIdentityResponse)(nil)).Elem()
}

func (o SystemAssignedServiceIdentityResponsePtrOutput) ToSystemAssignedServiceIdentityResponsePtrOutput() SystemAssignedServiceIdentityResponsePtrOutput {
	return o
}

func (o SystemAssignedServiceIdentityResponsePtrOutput) ToSystemAssignedServiceIdentityResponsePtrOutputWithContext(ctx context.Context) SystemAssignedServiceIdentityResponsePtrOutput {
	return o
}

func (o SystemAssignedServiceIdentityResponsePtrOutput) Elem() SystemAssignedServiceIdentityResponseOutput {
	return o.ApplyT(func(v *SystemAssignedServiceIdentityResponse) SystemAssignedServiceIdentityResponse {
		if v != nil {
			return *v
		}
		var ret SystemAssignedServiceIdentityResponse
		return ret
	}).(SystemAssignedServiceIdentityResponseOutput)
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o SystemAssignedServiceIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemAssignedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o SystemAssignedServiceIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemAssignedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Type of managed service identity (either system assigned, or none).
func (o SystemAssignedServiceIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemAssignedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// Object that describes the topic information.
type Topic struct {
	// The topic path for messages published to an MQTT broker.
	Path string `pulumi:"path"`
	// When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.
	Retain *string `pulumi:"retain"`
}

// Defaults sets the appropriate defaults for Topic
func (val *Topic) Defaults() *Topic {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Retain == nil {
		retain_ := "Never"
		tmp.Retain = &retain_
	}
	return &tmp
}

// TopicInput is an input type that accepts TopicArgs and TopicOutput values.
// You can construct a concrete instance of `TopicInput` via:
//
//	TopicArgs{...}
type TopicInput interface {
	pulumi.Input

	ToTopicOutput() TopicOutput
	ToTopicOutputWithContext(context.Context) TopicOutput
}

// Object that describes the topic information.
type TopicArgs struct {
	// The topic path for messages published to an MQTT broker.
	Path pulumi.StringInput `pulumi:"path"`
	// When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.
	Retain pulumi.StringPtrInput `pulumi:"retain"`
}

// Defaults sets the appropriate defaults for TopicArgs
func (val *TopicArgs) Defaults() *TopicArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Retain == nil {
		tmp.Retain = pulumi.StringPtr("Never")
	}
	return &tmp
}
func (TopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Topic)(nil)).Elem()
}

func (i TopicArgs) ToTopicOutput() TopicOutput {
	return i.ToTopicOutputWithContext(context.Background())
}

func (i TopicArgs) ToTopicOutputWithContext(ctx context.Context) TopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicOutput)
}

func (i TopicArgs) ToTopicPtrOutput() TopicPtrOutput {
	return i.ToTopicPtrOutputWithContext(context.Background())
}

func (i TopicArgs) ToTopicPtrOutputWithContext(ctx context.Context) TopicPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicOutput).ToTopicPtrOutputWithContext(ctx)
}

// TopicPtrInput is an input type that accepts TopicArgs, TopicPtr and TopicPtrOutput values.
// You can construct a concrete instance of `TopicPtrInput` via:
//
//	        TopicArgs{...}
//
//	or:
//
//	        nil
type TopicPtrInput interface {
	pulumi.Input

	ToTopicPtrOutput() TopicPtrOutput
	ToTopicPtrOutputWithContext(context.Context) TopicPtrOutput
}

type topicPtrType TopicArgs

func TopicPtr(v *TopicArgs) TopicPtrInput {
	return (*topicPtrType)(v)
}

func (*topicPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Topic)(nil)).Elem()
}

func (i *topicPtrType) ToTopicPtrOutput() TopicPtrOutput {
	return i.ToTopicPtrOutputWithContext(context.Background())
}

func (i *topicPtrType) ToTopicPtrOutputWithContext(ctx context.Context) TopicPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicPtrOutput)
}

// Object that describes the topic information.
type TopicOutput struct{ *pulumi.OutputState }

func (TopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Topic)(nil)).Elem()
}

func (o TopicOutput) ToTopicOutput() TopicOutput {
	return o
}

func (o TopicOutput) ToTopicOutputWithContext(ctx context.Context) TopicOutput {
	return o
}

func (o TopicOutput) ToTopicPtrOutput() TopicPtrOutput {
	return o.ToTopicPtrOutputWithContext(context.Background())
}

func (o TopicOutput) ToTopicPtrOutputWithContext(ctx context.Context) TopicPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Topic) *Topic {
		return &v
	}).(TopicPtrOutput)
}

// The topic path for messages published to an MQTT broker.
func (o TopicOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v Topic) string { return v.Path }).(pulumi.StringOutput)
}

// When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.
func (o TopicOutput) Retain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Topic) *string { return v.Retain }).(pulumi.StringPtrOutput)
}

type TopicPtrOutput struct{ *pulumi.OutputState }

func (TopicPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Topic)(nil)).Elem()
}

func (o TopicPtrOutput) ToTopicPtrOutput() TopicPtrOutput {
	return o
}

func (o TopicPtrOutput) ToTopicPtrOutputWithContext(ctx context.Context) TopicPtrOutput {
	return o
}

func (o TopicPtrOutput) Elem() TopicOutput {
	return o.ApplyT(func(v *Topic) Topic {
		if v != nil {
			return *v
		}
		var ret Topic
		return ret
	}).(TopicOutput)
}

// The topic path for messages published to an MQTT broker.
func (o TopicPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Topic) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.
func (o TopicPtrOutput) Retain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Topic) *string {
		if v == nil {
			return nil
		}
		return v.Retain
	}).(pulumi.StringPtrOutput)
}

// Object that describes the topic information.
type TopicResponse struct {
	// The topic path for messages published to an MQTT broker.
	Path string `pulumi:"path"`
	// When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.
	Retain *string `pulumi:"retain"`
}

// Defaults sets the appropriate defaults for TopicResponse
func (val *TopicResponse) Defaults() *TopicResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Retain == nil {
		retain_ := "Never"
		tmp.Retain = &retain_
	}
	return &tmp
}

// Object that describes the topic information.
type TopicResponseOutput struct{ *pulumi.OutputState }

func (TopicResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicResponse)(nil)).Elem()
}

func (o TopicResponseOutput) ToTopicResponseOutput() TopicResponseOutput {
	return o
}

func (o TopicResponseOutput) ToTopicResponseOutputWithContext(ctx context.Context) TopicResponseOutput {
	return o
}

// The topic path for messages published to an MQTT broker.
func (o TopicResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v TopicResponse) string { return v.Path }).(pulumi.StringOutput)
}

// When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.
func (o TopicResponseOutput) Retain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicResponse) *string { return v.Retain }).(pulumi.StringPtrOutput)
}

type TopicResponsePtrOutput struct{ *pulumi.OutputState }

func (TopicResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicResponse)(nil)).Elem()
}

func (o TopicResponsePtrOutput) ToTopicResponsePtrOutput() TopicResponsePtrOutput {
	return o
}

func (o TopicResponsePtrOutput) ToTopicResponsePtrOutputWithContext(ctx context.Context) TopicResponsePtrOutput {
	return o
}

func (o TopicResponsePtrOutput) Elem() TopicResponseOutput {
	return o.ApplyT(func(v *TopicResponse) TopicResponse {
		if v != nil {
			return *v
		}
		var ret TopicResponse
		return ret
	}).(TopicResponseOutput)
}

// The topic path for messages published to an MQTT broker.
func (o TopicResponsePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.
func (o TopicResponsePtrOutput) Retain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicResponse) *string {
		if v == nil {
			return nil
		}
		return v.Retain
	}).(pulumi.StringPtrOutput)
}

// The credentials for authentication mode UsernamePassword.
type UsernamePasswordCredentials struct {
	// The name of the secret containing the password.
	PasswordSecretName string `pulumi:"passwordSecretName"`
	// The name of the secret containing the username.
	UsernameSecretName string `pulumi:"usernameSecretName"`
}

// UsernamePasswordCredentialsInput is an input type that accepts UsernamePasswordCredentialsArgs and UsernamePasswordCredentialsOutput values.
// You can construct a concrete instance of `UsernamePasswordCredentialsInput` via:
//
//	UsernamePasswordCredentialsArgs{...}
type UsernamePasswordCredentialsInput interface {
	pulumi.Input

	ToUsernamePasswordCredentialsOutput() UsernamePasswordCredentialsOutput
	ToUsernamePasswordCredentialsOutputWithContext(context.Context) UsernamePasswordCredentialsOutput
}

// The credentials for authentication mode UsernamePassword.
type UsernamePasswordCredentialsArgs struct {
	// The name of the secret containing the password.
	PasswordSecretName pulumi.StringInput `pulumi:"passwordSecretName"`
	// The name of the secret containing the username.
	UsernameSecretName pulumi.StringInput `pulumi:"usernameSecretName"`
}

func (UsernamePasswordCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UsernamePasswordCredentials)(nil)).Elem()
}

func (i UsernamePasswordCredentialsArgs) ToUsernamePasswordCredentialsOutput() UsernamePasswordCredentialsOutput {
	return i.ToUsernamePasswordCredentialsOutputWithContext(context.Background())
}

func (i UsernamePasswordCredentialsArgs) ToUsernamePasswordCredentialsOutputWithContext(ctx context.Context) UsernamePasswordCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsernamePasswordCredentialsOutput)
}

func (i UsernamePasswordCredentialsArgs) ToUsernamePasswordCredentialsPtrOutput() UsernamePasswordCredentialsPtrOutput {
	return i.ToUsernamePasswordCredentialsPtrOutputWithContext(context.Background())
}

func (i UsernamePasswordCredentialsArgs) ToUsernamePasswordCredentialsPtrOutputWithContext(ctx context.Context) UsernamePasswordCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsernamePasswordCredentialsOutput).ToUsernamePasswordCredentialsPtrOutputWithContext(ctx)
}

// UsernamePasswordCredentialsPtrInput is an input type that accepts UsernamePasswordCredentialsArgs, UsernamePasswordCredentialsPtr and UsernamePasswordCredentialsPtrOutput values.
// You can construct a concrete instance of `UsernamePasswordCredentialsPtrInput` via:
//
//	        UsernamePasswordCredentialsArgs{...}
//
//	or:
//
//	        nil
type UsernamePasswordCredentialsPtrInput interface {
	pulumi.Input

	ToUsernamePasswordCredentialsPtrOutput() UsernamePasswordCredentialsPtrOutput
	ToUsernamePasswordCredentialsPtrOutputWithContext(context.Context) UsernamePasswordCredentialsPtrOutput
}

type usernamePasswordCredentialsPtrType UsernamePasswordCredentialsArgs

func UsernamePasswordCredentialsPtr(v *UsernamePasswordCredentialsArgs) UsernamePasswordCredentialsPtrInput {
	return (*usernamePasswordCredentialsPtrType)(v)
}

func (*usernamePasswordCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UsernamePasswordCredentials)(nil)).Elem()
}

func (i *usernamePasswordCredentialsPtrType) ToUsernamePasswordCredentialsPtrOutput() UsernamePasswordCredentialsPtrOutput {
	return i.ToUsernamePasswordCredentialsPtrOutputWithContext(context.Background())
}

func (i *usernamePasswordCredentialsPtrType) ToUsernamePasswordCredentialsPtrOutputWithContext(ctx context.Context) UsernamePasswordCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsernamePasswordCredentialsPtrOutput)
}

// The credentials for authentication mode UsernamePassword.
type UsernamePasswordCredentialsOutput struct{ *pulumi.OutputState }

func (UsernamePasswordCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UsernamePasswordCredentials)(nil)).Elem()
}

func (o UsernamePasswordCredentialsOutput) ToUsernamePasswordCredentialsOutput() UsernamePasswordCredentialsOutput {
	return o
}

func (o UsernamePasswordCredentialsOutput) ToUsernamePasswordCredentialsOutputWithContext(ctx context.Context) UsernamePasswordCredentialsOutput {
	return o
}

func (o UsernamePasswordCredentialsOutput) ToUsernamePasswordCredentialsPtrOutput() UsernamePasswordCredentialsPtrOutput {
	return o.ToUsernamePasswordCredentialsPtrOutputWithContext(context.Background())
}

func (o UsernamePasswordCredentialsOutput) ToUsernamePasswordCredentialsPtrOutputWithContext(ctx context.Context) UsernamePasswordCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UsernamePasswordCredentials) *UsernamePasswordCredentials {
		return &v
	}).(UsernamePasswordCredentialsPtrOutput)
}

// The name of the secret containing the password.
func (o UsernamePasswordCredentialsOutput) PasswordSecretName() pulumi.StringOutput {
	return o.ApplyT(func(v UsernamePasswordCredentials) string { return v.PasswordSecretName }).(pulumi.StringOutput)
}

// The name of the secret containing the username.
func (o UsernamePasswordCredentialsOutput) UsernameSecretName() pulumi.StringOutput {
	return o.ApplyT(func(v UsernamePasswordCredentials) string { return v.UsernameSecretName }).(pulumi.StringOutput)
}

type UsernamePasswordCredentialsPtrOutput struct{ *pulumi.OutputState }

func (UsernamePasswordCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UsernamePasswordCredentials)(nil)).Elem()
}

func (o UsernamePasswordCredentialsPtrOutput) ToUsernamePasswordCredentialsPtrOutput() UsernamePasswordCredentialsPtrOutput {
	return o
}

func (o UsernamePasswordCredentialsPtrOutput) ToUsernamePasswordCredentialsPtrOutputWithContext(ctx context.Context) UsernamePasswordCredentialsPtrOutput {
	return o
}

func (o UsernamePasswordCredentialsPtrOutput) Elem() UsernamePasswordCredentialsOutput {
	return o.ApplyT(func(v *UsernamePasswordCredentials) UsernamePasswordCredentials {
		if v != nil {
			return *v
		}
		var ret UsernamePasswordCredentials
		return ret
	}).(UsernamePasswordCredentialsOutput)
}

// The name of the secret containing the password.
func (o UsernamePasswordCredentialsPtrOutput) PasswordSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UsernamePasswordCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.PasswordSecretName
	}).(pulumi.StringPtrOutput)
}

// The name of the secret containing the username.
func (o UsernamePasswordCredentialsPtrOutput) UsernameSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UsernamePasswordCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.UsernameSecretName
	}).(pulumi.StringPtrOutput)
}

// The credentials for authentication mode UsernamePassword.
type UsernamePasswordCredentialsResponse struct {
	// The name of the secret containing the password.
	PasswordSecretName string `pulumi:"passwordSecretName"`
	// The name of the secret containing the username.
	UsernameSecretName string `pulumi:"usernameSecretName"`
}

// The credentials for authentication mode UsernamePassword.
type UsernamePasswordCredentialsResponseOutput struct{ *pulumi.OutputState }

func (UsernamePasswordCredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UsernamePasswordCredentialsResponse)(nil)).Elem()
}

func (o UsernamePasswordCredentialsResponseOutput) ToUsernamePasswordCredentialsResponseOutput() UsernamePasswordCredentialsResponseOutput {
	return o
}

func (o UsernamePasswordCredentialsResponseOutput) ToUsernamePasswordCredentialsResponseOutputWithContext(ctx context.Context) UsernamePasswordCredentialsResponseOutput {
	return o
}

// The name of the secret containing the password.
func (o UsernamePasswordCredentialsResponseOutput) PasswordSecretName() pulumi.StringOutput {
	return o.ApplyT(func(v UsernamePasswordCredentialsResponse) string { return v.PasswordSecretName }).(pulumi.StringOutput)
}

// The name of the secret containing the username.
func (o UsernamePasswordCredentialsResponseOutput) UsernameSecretName() pulumi.StringOutput {
	return o.ApplyT(func(v UsernamePasswordCredentialsResponse) string { return v.UsernameSecretName }).(pulumi.StringOutput)
}

type UsernamePasswordCredentialsResponsePtrOutput struct{ *pulumi.OutputState }

func (UsernamePasswordCredentialsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UsernamePasswordCredentialsResponse)(nil)).Elem()
}

func (o UsernamePasswordCredentialsResponsePtrOutput) ToUsernamePasswordCredentialsResponsePtrOutput() UsernamePasswordCredentialsResponsePtrOutput {
	return o
}

func (o UsernamePasswordCredentialsResponsePtrOutput) ToUsernamePasswordCredentialsResponsePtrOutputWithContext(ctx context.Context) UsernamePasswordCredentialsResponsePtrOutput {
	return o
}

func (o UsernamePasswordCredentialsResponsePtrOutput) Elem() UsernamePasswordCredentialsResponseOutput {
	return o.ApplyT(func(v *UsernamePasswordCredentialsResponse) UsernamePasswordCredentialsResponse {
		if v != nil {
			return *v
		}
		var ret UsernamePasswordCredentialsResponse
		return ret
	}).(UsernamePasswordCredentialsResponseOutput)
}

// The name of the secret containing the password.
func (o UsernamePasswordCredentialsResponsePtrOutput) PasswordSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UsernamePasswordCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PasswordSecretName
	}).(pulumi.StringPtrOutput)
}

// The name of the secret containing the username.
func (o UsernamePasswordCredentialsResponsePtrOutput) UsernameSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UsernamePasswordCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UsernameSecretName
	}).(pulumi.StringPtrOutput)
}

// The x509 certificate for authentication mode Certificate.
type X509Credentials struct {
	// The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx).
	CertificateSecretName string `pulumi:"certificateSecretName"`
}

// X509CredentialsInput is an input type that accepts X509CredentialsArgs and X509CredentialsOutput values.
// You can construct a concrete instance of `X509CredentialsInput` via:
//
//	X509CredentialsArgs{...}
type X509CredentialsInput interface {
	pulumi.Input

	ToX509CredentialsOutput() X509CredentialsOutput
	ToX509CredentialsOutputWithContext(context.Context) X509CredentialsOutput
}

// The x509 certificate for authentication mode Certificate.
type X509CredentialsArgs struct {
	// The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx).
	CertificateSecretName pulumi.StringInput `pulumi:"certificateSecretName"`
}

func (X509CredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X509Credentials)(nil)).Elem()
}

func (i X509CredentialsArgs) ToX509CredentialsOutput() X509CredentialsOutput {
	return i.ToX509CredentialsOutputWithContext(context.Background())
}

func (i X509CredentialsArgs) ToX509CredentialsOutputWithContext(ctx context.Context) X509CredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X509CredentialsOutput)
}

func (i X509CredentialsArgs) ToX509CredentialsPtrOutput() X509CredentialsPtrOutput {
	return i.ToX509CredentialsPtrOutputWithContext(context.Background())
}

func (i X509CredentialsArgs) ToX509CredentialsPtrOutputWithContext(ctx context.Context) X509CredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X509CredentialsOutput).ToX509CredentialsPtrOutputWithContext(ctx)
}

// X509CredentialsPtrInput is an input type that accepts X509CredentialsArgs, X509CredentialsPtr and X509CredentialsPtrOutput values.
// You can construct a concrete instance of `X509CredentialsPtrInput` via:
//
//	        X509CredentialsArgs{...}
//
//	or:
//
//	        nil
type X509CredentialsPtrInput interface {
	pulumi.Input

	ToX509CredentialsPtrOutput() X509CredentialsPtrOutput
	ToX509CredentialsPtrOutputWithContext(context.Context) X509CredentialsPtrOutput
}

type x509credentialsPtrType X509CredentialsArgs

func X509CredentialsPtr(v *X509CredentialsArgs) X509CredentialsPtrInput {
	return (*x509credentialsPtrType)(v)
}

func (*x509credentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**X509Credentials)(nil)).Elem()
}

func (i *x509credentialsPtrType) ToX509CredentialsPtrOutput() X509CredentialsPtrOutput {
	return i.ToX509CredentialsPtrOutputWithContext(context.Background())
}

func (i *x509credentialsPtrType) ToX509CredentialsPtrOutputWithContext(ctx context.Context) X509CredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X509CredentialsPtrOutput)
}

// The x509 certificate for authentication mode Certificate.
type X509CredentialsOutput struct{ *pulumi.OutputState }

func (X509CredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X509Credentials)(nil)).Elem()
}

func (o X509CredentialsOutput) ToX509CredentialsOutput() X509CredentialsOutput {
	return o
}

func (o X509CredentialsOutput) ToX509CredentialsOutputWithContext(ctx context.Context) X509CredentialsOutput {
	return o
}

func (o X509CredentialsOutput) ToX509CredentialsPtrOutput() X509CredentialsPtrOutput {
	return o.ToX509CredentialsPtrOutputWithContext(context.Background())
}

func (o X509CredentialsOutput) ToX509CredentialsPtrOutputWithContext(ctx context.Context) X509CredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v X509Credentials) *X509Credentials {
		return &v
	}).(X509CredentialsPtrOutput)
}

// The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx).
func (o X509CredentialsOutput) CertificateSecretName() pulumi.StringOutput {
	return o.ApplyT(func(v X509Credentials) string { return v.CertificateSecretName }).(pulumi.StringOutput)
}

type X509CredentialsPtrOutput struct{ *pulumi.OutputState }

func (X509CredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**X509Credentials)(nil)).Elem()
}

func (o X509CredentialsPtrOutput) ToX509CredentialsPtrOutput() X509CredentialsPtrOutput {
	return o
}

func (o X509CredentialsPtrOutput) ToX509CredentialsPtrOutputWithContext(ctx context.Context) X509CredentialsPtrOutput {
	return o
}

func (o X509CredentialsPtrOutput) Elem() X509CredentialsOutput {
	return o.ApplyT(func(v *X509Credentials) X509Credentials {
		if v != nil {
			return *v
		}
		var ret X509Credentials
		return ret
	}).(X509CredentialsOutput)
}

// The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx).
func (o X509CredentialsPtrOutput) CertificateSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X509Credentials) *string {
		if v == nil {
			return nil
		}
		return &v.CertificateSecretName
	}).(pulumi.StringPtrOutput)
}

// The x509 certificate for authentication mode Certificate.
type X509CredentialsResponse struct {
	// The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx).
	CertificateSecretName string `pulumi:"certificateSecretName"`
}

// The x509 certificate for authentication mode Certificate.
type X509CredentialsResponseOutput struct{ *pulumi.OutputState }

func (X509CredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X509CredentialsResponse)(nil)).Elem()
}

func (o X509CredentialsResponseOutput) ToX509CredentialsResponseOutput() X509CredentialsResponseOutput {
	return o
}

func (o X509CredentialsResponseOutput) ToX509CredentialsResponseOutputWithContext(ctx context.Context) X509CredentialsResponseOutput {
	return o
}

// The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx).
func (o X509CredentialsResponseOutput) CertificateSecretName() pulumi.StringOutput {
	return o.ApplyT(func(v X509CredentialsResponse) string { return v.CertificateSecretName }).(pulumi.StringOutput)
}

type X509CredentialsResponsePtrOutput struct{ *pulumi.OutputState }

func (X509CredentialsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**X509CredentialsResponse)(nil)).Elem()
}

func (o X509CredentialsResponsePtrOutput) ToX509CredentialsResponsePtrOutput() X509CredentialsResponsePtrOutput {
	return o
}

func (o X509CredentialsResponsePtrOutput) ToX509CredentialsResponsePtrOutputWithContext(ctx context.Context) X509CredentialsResponsePtrOutput {
	return o
}

func (o X509CredentialsResponsePtrOutput) Elem() X509CredentialsResponseOutput {
	return o.ApplyT(func(v *X509CredentialsResponse) X509CredentialsResponse {
		if v != nil {
			return *v
		}
		var ret X509CredentialsResponse
		return ret
	}).(X509CredentialsResponseOutput)
}

// The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx).
func (o X509CredentialsResponsePtrOutput) CertificateSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X509CredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CertificateSecretName
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AssetEndpointProfileStatusErrorResponseOutput{})
	pulumi.RegisterOutputType(AssetEndpointProfileStatusErrorResponseArrayOutput{})
	pulumi.RegisterOutputType(AssetEndpointProfileStatusResponseOutput{})
	pulumi.RegisterOutputType(AssetStatusDatasetResponseOutput{})
	pulumi.RegisterOutputType(AssetStatusDatasetResponseArrayOutput{})
	pulumi.RegisterOutputType(AssetStatusErrorResponseOutput{})
	pulumi.RegisterOutputType(AssetStatusErrorResponseArrayOutput{})
	pulumi.RegisterOutputType(AssetStatusEventResponseOutput{})
	pulumi.RegisterOutputType(AssetStatusEventResponseArrayOutput{})
	pulumi.RegisterOutputType(AssetStatusResponseOutput{})
	pulumi.RegisterOutputType(AuthenticationOutput{})
	pulumi.RegisterOutputType(AuthenticationPtrOutput{})
	pulumi.RegisterOutputType(AuthenticationResponseOutput{})
	pulumi.RegisterOutputType(AuthenticationResponsePtrOutput{})
	pulumi.RegisterOutputType(DataPointOutput{})
	pulumi.RegisterOutputType(DataPointArrayOutput{})
	pulumi.RegisterOutputType(DataPointResponseOutput{})
	pulumi.RegisterOutputType(DataPointResponseArrayOutput{})
	pulumi.RegisterOutputType(DatasetOutput{})
	pulumi.RegisterOutputType(DatasetArrayOutput{})
	pulumi.RegisterOutputType(DatasetResponseOutput{})
	pulumi.RegisterOutputType(DatasetResponseArrayOutput{})
	pulumi.RegisterOutputType(DiscoveredDataPointOutput{})
	pulumi.RegisterOutputType(DiscoveredDataPointArrayOutput{})
	pulumi.RegisterOutputType(DiscoveredDataPointResponseOutput{})
	pulumi.RegisterOutputType(DiscoveredDataPointResponseArrayOutput{})
	pulumi.RegisterOutputType(DiscoveredDatasetOutput{})
	pulumi.RegisterOutputType(DiscoveredDatasetArrayOutput{})
	pulumi.RegisterOutputType(DiscoveredDatasetResponseOutput{})
	pulumi.RegisterOutputType(DiscoveredDatasetResponseArrayOutput{})
	pulumi.RegisterOutputType(DiscoveredEventOutput{})
	pulumi.RegisterOutputType(DiscoveredEventArrayOutput{})
	pulumi.RegisterOutputType(DiscoveredEventResponseOutput{})
	pulumi.RegisterOutputType(DiscoveredEventResponseArrayOutput{})
	pulumi.RegisterOutputType(EventOutput{})
	pulumi.RegisterOutputType(EventArrayOutput{})
	pulumi.RegisterOutputType(EventResponseOutput{})
	pulumi.RegisterOutputType(EventResponseArrayOutput{})
	pulumi.RegisterOutputType(ExtendedLocationOutput{})
	pulumi.RegisterOutputType(ExtendedLocationResponseOutput{})
	pulumi.RegisterOutputType(MessageSchemaReferenceResponseOutput{})
	pulumi.RegisterOutputType(SystemAssignedServiceIdentityOutput{})
	pulumi.RegisterOutputType(SystemAssignedServiceIdentityPtrOutput{})
	pulumi.RegisterOutputType(SystemAssignedServiceIdentityResponseOutput{})
	pulumi.RegisterOutputType(SystemAssignedServiceIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(TopicOutput{})
	pulumi.RegisterOutputType(TopicPtrOutput{})
	pulumi.RegisterOutputType(TopicResponseOutput{})
	pulumi.RegisterOutputType(TopicResponsePtrOutput{})
	pulumi.RegisterOutputType(UsernamePasswordCredentialsOutput{})
	pulumi.RegisterOutputType(UsernamePasswordCredentialsPtrOutput{})
	pulumi.RegisterOutputType(UsernamePasswordCredentialsResponseOutput{})
	pulumi.RegisterOutputType(UsernamePasswordCredentialsResponsePtrOutput{})
	pulumi.RegisterOutputType(X509CredentialsOutput{})
	pulumi.RegisterOutputType(X509CredentialsPtrOutput{})
	pulumi.RegisterOutputType(X509CredentialsResponseOutput{})
	pulumi.RegisterOutputType(X509CredentialsResponsePtrOutput{})
}
