// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20231101preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Defines the asset status error properties.
type AssetStatusErrorResponse struct {
	// Error code for classification of errors (ex: 400, 404, 500, etc.).
	Code *int `pulumi:"code"`
	// Human readable helpful error message to provide additional context for error (ex: “capability Id 'foo' does not exist”).
	Message *string `pulumi:"message"`
}

// Defines the asset status error properties.
type AssetStatusErrorResponseOutput struct{ *pulumi.OutputState }

func (AssetStatusErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssetStatusErrorResponse)(nil)).Elem()
}

func (o AssetStatusErrorResponseOutput) ToAssetStatusErrorResponseOutput() AssetStatusErrorResponseOutput {
	return o
}

func (o AssetStatusErrorResponseOutput) ToAssetStatusErrorResponseOutputWithContext(ctx context.Context) AssetStatusErrorResponseOutput {
	return o
}

// Error code for classification of errors (ex: 400, 404, 500, etc.).
func (o AssetStatusErrorResponseOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AssetStatusErrorResponse) *int { return v.Code }).(pulumi.IntPtrOutput)
}

// Human readable helpful error message to provide additional context for error (ex: “capability Id 'foo' does not exist”).
func (o AssetStatusErrorResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssetStatusErrorResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

type AssetStatusErrorResponseArrayOutput struct{ *pulumi.OutputState }

func (AssetStatusErrorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssetStatusErrorResponse)(nil)).Elem()
}

func (o AssetStatusErrorResponseArrayOutput) ToAssetStatusErrorResponseArrayOutput() AssetStatusErrorResponseArrayOutput {
	return o
}

func (o AssetStatusErrorResponseArrayOutput) ToAssetStatusErrorResponseArrayOutputWithContext(ctx context.Context) AssetStatusErrorResponseArrayOutput {
	return o
}

func (o AssetStatusErrorResponseArrayOutput) Index(i pulumi.IntInput) AssetStatusErrorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AssetStatusErrorResponse {
		return vs[0].([]AssetStatusErrorResponse)[vs[1].(int)]
	}).(AssetStatusErrorResponseOutput)
}

// Defines the asset status properties.
type AssetStatusResponse struct {
	// Array object to transfer and persist errors that originate from the Edge.
	Errors []AssetStatusErrorResponse `pulumi:"errors"`
	// A read only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (Edge) state of the Asset. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version.
	Version *int `pulumi:"version"`
}

// Defines the asset status properties.
type AssetStatusResponseOutput struct{ *pulumi.OutputState }

func (AssetStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssetStatusResponse)(nil)).Elem()
}

func (o AssetStatusResponseOutput) ToAssetStatusResponseOutput() AssetStatusResponseOutput {
	return o
}

func (o AssetStatusResponseOutput) ToAssetStatusResponseOutputWithContext(ctx context.Context) AssetStatusResponseOutput {
	return o
}

// Array object to transfer and persist errors that originate from the Edge.
func (o AssetStatusResponseOutput) Errors() AssetStatusErrorResponseArrayOutput {
	return o.ApplyT(func(v AssetStatusResponse) []AssetStatusErrorResponse { return v.Errors }).(AssetStatusErrorResponseArrayOutput)
}

// A read only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (Edge) state of the Asset. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version.
func (o AssetStatusResponseOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AssetStatusResponse) *int { return v.Version }).(pulumi.IntPtrOutput)
}

// Defines the data point properties.
type DataPoint struct {
	// The path to the type definition of the capability (e.g. DTMI, OPC UA information model node id, etc.), for example dtmi:com:example:Robot:_contents:__prop1;1.
	CapabilityId *string `pulumi:"capabilityId"`
	// Protocol-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
	DataPointConfiguration *string `pulumi:"dataPointConfiguration"`
	// The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset.
	DataSource string `pulumi:"dataSource"`
	// The name of the data point.
	Name *string `pulumi:"name"`
	// An indication of how the data point should be mapped to OpenTelemetry.
	ObservabilityMode *string `pulumi:"observabilityMode"`
}

// Defaults sets the appropriate defaults for DataPoint
func (val *DataPoint) Defaults() *DataPoint {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ObservabilityMode == nil {
		observabilityMode_ := "none"
		tmp.ObservabilityMode = &observabilityMode_
	}
	return &tmp
}

// DataPointInput is an input type that accepts DataPointArgs and DataPointOutput values.
// You can construct a concrete instance of `DataPointInput` via:
//
//	DataPointArgs{...}
type DataPointInput interface {
	pulumi.Input

	ToDataPointOutput() DataPointOutput
	ToDataPointOutputWithContext(context.Context) DataPointOutput
}

// Defines the data point properties.
type DataPointArgs struct {
	// The path to the type definition of the capability (e.g. DTMI, OPC UA information model node id, etc.), for example dtmi:com:example:Robot:_contents:__prop1;1.
	CapabilityId pulumi.StringPtrInput `pulumi:"capabilityId"`
	// Protocol-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
	DataPointConfiguration pulumi.StringPtrInput `pulumi:"dataPointConfiguration"`
	// The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset.
	DataSource pulumi.StringInput `pulumi:"dataSource"`
	// The name of the data point.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// An indication of how the data point should be mapped to OpenTelemetry.
	ObservabilityMode pulumi.StringPtrInput `pulumi:"observabilityMode"`
}

// Defaults sets the appropriate defaults for DataPointArgs
func (val *DataPointArgs) Defaults() *DataPointArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ObservabilityMode == nil {
		tmp.ObservabilityMode = pulumi.StringPtr("none")
	}
	return &tmp
}
func (DataPointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataPoint)(nil)).Elem()
}

func (i DataPointArgs) ToDataPointOutput() DataPointOutput {
	return i.ToDataPointOutputWithContext(context.Background())
}

func (i DataPointArgs) ToDataPointOutputWithContext(ctx context.Context) DataPointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataPointOutput)
}

// DataPointArrayInput is an input type that accepts DataPointArray and DataPointArrayOutput values.
// You can construct a concrete instance of `DataPointArrayInput` via:
//
//	DataPointArray{ DataPointArgs{...} }
type DataPointArrayInput interface {
	pulumi.Input

	ToDataPointArrayOutput() DataPointArrayOutput
	ToDataPointArrayOutputWithContext(context.Context) DataPointArrayOutput
}

type DataPointArray []DataPointInput

func (DataPointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataPoint)(nil)).Elem()
}

func (i DataPointArray) ToDataPointArrayOutput() DataPointArrayOutput {
	return i.ToDataPointArrayOutputWithContext(context.Background())
}

func (i DataPointArray) ToDataPointArrayOutputWithContext(ctx context.Context) DataPointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataPointArrayOutput)
}

// Defines the data point properties.
type DataPointOutput struct{ *pulumi.OutputState }

func (DataPointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataPoint)(nil)).Elem()
}

func (o DataPointOutput) ToDataPointOutput() DataPointOutput {
	return o
}

func (o DataPointOutput) ToDataPointOutputWithContext(ctx context.Context) DataPointOutput {
	return o
}

// The path to the type definition of the capability (e.g. DTMI, OPC UA information model node id, etc.), for example dtmi:com:example:Robot:_contents:__prop1;1.
func (o DataPointOutput) CapabilityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataPoint) *string { return v.CapabilityId }).(pulumi.StringPtrOutput)
}

// Protocol-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
func (o DataPointOutput) DataPointConfiguration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataPoint) *string { return v.DataPointConfiguration }).(pulumi.StringPtrOutput)
}

// The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset.
func (o DataPointOutput) DataSource() pulumi.StringOutput {
	return o.ApplyT(func(v DataPoint) string { return v.DataSource }).(pulumi.StringOutput)
}

// The name of the data point.
func (o DataPointOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataPoint) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// An indication of how the data point should be mapped to OpenTelemetry.
func (o DataPointOutput) ObservabilityMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataPoint) *string { return v.ObservabilityMode }).(pulumi.StringPtrOutput)
}

type DataPointArrayOutput struct{ *pulumi.OutputState }

func (DataPointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataPoint)(nil)).Elem()
}

func (o DataPointArrayOutput) ToDataPointArrayOutput() DataPointArrayOutput {
	return o
}

func (o DataPointArrayOutput) ToDataPointArrayOutputWithContext(ctx context.Context) DataPointArrayOutput {
	return o
}

func (o DataPointArrayOutput) Index(i pulumi.IntInput) DataPointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataPoint {
		return vs[0].([]DataPoint)[vs[1].(int)]
	}).(DataPointOutput)
}

// Defines the data point properties.
type DataPointResponse struct {
	// The path to the type definition of the capability (e.g. DTMI, OPC UA information model node id, etc.), for example dtmi:com:example:Robot:_contents:__prop1;1.
	CapabilityId *string `pulumi:"capabilityId"`
	// Protocol-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
	DataPointConfiguration *string `pulumi:"dataPointConfiguration"`
	// The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset.
	DataSource string `pulumi:"dataSource"`
	// The name of the data point.
	Name *string `pulumi:"name"`
	// An indication of how the data point should be mapped to OpenTelemetry.
	ObservabilityMode *string `pulumi:"observabilityMode"`
}

// Defaults sets the appropriate defaults for DataPointResponse
func (val *DataPointResponse) Defaults() *DataPointResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ObservabilityMode == nil {
		observabilityMode_ := "none"
		tmp.ObservabilityMode = &observabilityMode_
	}
	return &tmp
}

// Defines the data point properties.
type DataPointResponseOutput struct{ *pulumi.OutputState }

func (DataPointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataPointResponse)(nil)).Elem()
}

func (o DataPointResponseOutput) ToDataPointResponseOutput() DataPointResponseOutput {
	return o
}

func (o DataPointResponseOutput) ToDataPointResponseOutputWithContext(ctx context.Context) DataPointResponseOutput {
	return o
}

// The path to the type definition of the capability (e.g. DTMI, OPC UA information model node id, etc.), for example dtmi:com:example:Robot:_contents:__prop1;1.
func (o DataPointResponseOutput) CapabilityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataPointResponse) *string { return v.CapabilityId }).(pulumi.StringPtrOutput)
}

// Protocol-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
func (o DataPointResponseOutput) DataPointConfiguration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataPointResponse) *string { return v.DataPointConfiguration }).(pulumi.StringPtrOutput)
}

// The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset.
func (o DataPointResponseOutput) DataSource() pulumi.StringOutput {
	return o.ApplyT(func(v DataPointResponse) string { return v.DataSource }).(pulumi.StringOutput)
}

// The name of the data point.
func (o DataPointResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataPointResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// An indication of how the data point should be mapped to OpenTelemetry.
func (o DataPointResponseOutput) ObservabilityMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataPointResponse) *string { return v.ObservabilityMode }).(pulumi.StringPtrOutput)
}

type DataPointResponseArrayOutput struct{ *pulumi.OutputState }

func (DataPointResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataPointResponse)(nil)).Elem()
}

func (o DataPointResponseArrayOutput) ToDataPointResponseArrayOutput() DataPointResponseArrayOutput {
	return o
}

func (o DataPointResponseArrayOutput) ToDataPointResponseArrayOutputWithContext(ctx context.Context) DataPointResponseArrayOutput {
	return o
}

func (o DataPointResponseArrayOutput) Index(i pulumi.IntInput) DataPointResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataPointResponse {
		return vs[0].([]DataPointResponse)[vs[1].(int)]
	}).(DataPointResponseOutput)
}

// Defines the event properties.
type Event struct {
	// The path to the type definition of the capability (e.g. DTMI, OPC UA information model node id, etc.), for example dtmi:com:example:Robot:_contents:__prop1;1.
	CapabilityId *string `pulumi:"capabilityId"`
	// Protocol-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
	EventConfiguration *string `pulumi:"eventConfiguration"`
	// The address of the notifier of the event in the asset (e.g. URL) so that a client can access the event on the asset.
	EventNotifier string `pulumi:"eventNotifier"`
	// The name of the event.
	Name *string `pulumi:"name"`
	// An indication of how the event should be mapped to OpenTelemetry.
	ObservabilityMode *string `pulumi:"observabilityMode"`
}

// Defaults sets the appropriate defaults for Event
func (val *Event) Defaults() *Event {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ObservabilityMode == nil {
		observabilityMode_ := "none"
		tmp.ObservabilityMode = &observabilityMode_
	}
	return &tmp
}

// EventInput is an input type that accepts EventArgs and EventOutput values.
// You can construct a concrete instance of `EventInput` via:
//
//	EventArgs{...}
type EventInput interface {
	pulumi.Input

	ToEventOutput() EventOutput
	ToEventOutputWithContext(context.Context) EventOutput
}

// Defines the event properties.
type EventArgs struct {
	// The path to the type definition of the capability (e.g. DTMI, OPC UA information model node id, etc.), for example dtmi:com:example:Robot:_contents:__prop1;1.
	CapabilityId pulumi.StringPtrInput `pulumi:"capabilityId"`
	// Protocol-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
	EventConfiguration pulumi.StringPtrInput `pulumi:"eventConfiguration"`
	// The address of the notifier of the event in the asset (e.g. URL) so that a client can access the event on the asset.
	EventNotifier pulumi.StringInput `pulumi:"eventNotifier"`
	// The name of the event.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// An indication of how the event should be mapped to OpenTelemetry.
	ObservabilityMode pulumi.StringPtrInput `pulumi:"observabilityMode"`
}

// Defaults sets the appropriate defaults for EventArgs
func (val *EventArgs) Defaults() *EventArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ObservabilityMode == nil {
		tmp.ObservabilityMode = pulumi.StringPtr("none")
	}
	return &tmp
}
func (EventArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Event)(nil)).Elem()
}

func (i EventArgs) ToEventOutput() EventOutput {
	return i.ToEventOutputWithContext(context.Background())
}

func (i EventArgs) ToEventOutputWithContext(ctx context.Context) EventOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventOutput)
}

// EventArrayInput is an input type that accepts EventArray and EventArrayOutput values.
// You can construct a concrete instance of `EventArrayInput` via:
//
//	EventArray{ EventArgs{...} }
type EventArrayInput interface {
	pulumi.Input

	ToEventArrayOutput() EventArrayOutput
	ToEventArrayOutputWithContext(context.Context) EventArrayOutput
}

type EventArray []EventInput

func (EventArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Event)(nil)).Elem()
}

func (i EventArray) ToEventArrayOutput() EventArrayOutput {
	return i.ToEventArrayOutputWithContext(context.Background())
}

func (i EventArray) ToEventArrayOutputWithContext(ctx context.Context) EventArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventArrayOutput)
}

// Defines the event properties.
type EventOutput struct{ *pulumi.OutputState }

func (EventOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Event)(nil)).Elem()
}

func (o EventOutput) ToEventOutput() EventOutput {
	return o
}

func (o EventOutput) ToEventOutputWithContext(ctx context.Context) EventOutput {
	return o
}

// The path to the type definition of the capability (e.g. DTMI, OPC UA information model node id, etc.), for example dtmi:com:example:Robot:_contents:__prop1;1.
func (o EventOutput) CapabilityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Event) *string { return v.CapabilityId }).(pulumi.StringPtrOutput)
}

// Protocol-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
func (o EventOutput) EventConfiguration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Event) *string { return v.EventConfiguration }).(pulumi.StringPtrOutput)
}

// The address of the notifier of the event in the asset (e.g. URL) so that a client can access the event on the asset.
func (o EventOutput) EventNotifier() pulumi.StringOutput {
	return o.ApplyT(func(v Event) string { return v.EventNotifier }).(pulumi.StringOutput)
}

// The name of the event.
func (o EventOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Event) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// An indication of how the event should be mapped to OpenTelemetry.
func (o EventOutput) ObservabilityMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Event) *string { return v.ObservabilityMode }).(pulumi.StringPtrOutput)
}

type EventArrayOutput struct{ *pulumi.OutputState }

func (EventArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Event)(nil)).Elem()
}

func (o EventArrayOutput) ToEventArrayOutput() EventArrayOutput {
	return o
}

func (o EventArrayOutput) ToEventArrayOutputWithContext(ctx context.Context) EventArrayOutput {
	return o
}

func (o EventArrayOutput) Index(i pulumi.IntInput) EventOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Event {
		return vs[0].([]Event)[vs[1].(int)]
	}).(EventOutput)
}

// Defines the event properties.
type EventResponse struct {
	// The path to the type definition of the capability (e.g. DTMI, OPC UA information model node id, etc.), for example dtmi:com:example:Robot:_contents:__prop1;1.
	CapabilityId *string `pulumi:"capabilityId"`
	// Protocol-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
	EventConfiguration *string `pulumi:"eventConfiguration"`
	// The address of the notifier of the event in the asset (e.g. URL) so that a client can access the event on the asset.
	EventNotifier string `pulumi:"eventNotifier"`
	// The name of the event.
	Name *string `pulumi:"name"`
	// An indication of how the event should be mapped to OpenTelemetry.
	ObservabilityMode *string `pulumi:"observabilityMode"`
}

// Defaults sets the appropriate defaults for EventResponse
func (val *EventResponse) Defaults() *EventResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ObservabilityMode == nil {
		observabilityMode_ := "none"
		tmp.ObservabilityMode = &observabilityMode_
	}
	return &tmp
}

// Defines the event properties.
type EventResponseOutput struct{ *pulumi.OutputState }

func (EventResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventResponse)(nil)).Elem()
}

func (o EventResponseOutput) ToEventResponseOutput() EventResponseOutput {
	return o
}

func (o EventResponseOutput) ToEventResponseOutputWithContext(ctx context.Context) EventResponseOutput {
	return o
}

// The path to the type definition of the capability (e.g. DTMI, OPC UA information model node id, etc.), for example dtmi:com:example:Robot:_contents:__prop1;1.
func (o EventResponseOutput) CapabilityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventResponse) *string { return v.CapabilityId }).(pulumi.StringPtrOutput)
}

// Protocol-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
func (o EventResponseOutput) EventConfiguration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventResponse) *string { return v.EventConfiguration }).(pulumi.StringPtrOutput)
}

// The address of the notifier of the event in the asset (e.g. URL) so that a client can access the event on the asset.
func (o EventResponseOutput) EventNotifier() pulumi.StringOutput {
	return o.ApplyT(func(v EventResponse) string { return v.EventNotifier }).(pulumi.StringOutput)
}

// The name of the event.
func (o EventResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// An indication of how the event should be mapped to OpenTelemetry.
func (o EventResponseOutput) ObservabilityMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventResponse) *string { return v.ObservabilityMode }).(pulumi.StringPtrOutput)
}

type EventResponseArrayOutput struct{ *pulumi.OutputState }

func (EventResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventResponse)(nil)).Elem()
}

func (o EventResponseArrayOutput) ToEventResponseArrayOutput() EventResponseArrayOutput {
	return o
}

func (o EventResponseArrayOutput) ToEventResponseArrayOutputWithContext(ctx context.Context) EventResponseArrayOutput {
	return o
}

func (o EventResponseArrayOutput) Index(i pulumi.IntInput) EventResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventResponse {
		return vs[0].([]EventResponse)[vs[1].(int)]
	}).(EventResponseOutput)
}

// The extended location.
type ExtendedLocation struct {
	// The extended location name.
	Name string `pulumi:"name"`
	// The extended location type.
	Type string `pulumi:"type"`
}

// ExtendedLocationInput is an input type that accepts ExtendedLocationArgs and ExtendedLocationOutput values.
// You can construct a concrete instance of `ExtendedLocationInput` via:
//
//	ExtendedLocationArgs{...}
type ExtendedLocationInput interface {
	pulumi.Input

	ToExtendedLocationOutput() ExtendedLocationOutput
	ToExtendedLocationOutputWithContext(context.Context) ExtendedLocationOutput
}

// The extended location.
type ExtendedLocationArgs struct {
	// The extended location name.
	Name pulumi.StringInput `pulumi:"name"`
	// The extended location type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ExtendedLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocation)(nil)).Elem()
}

func (i ExtendedLocationArgs) ToExtendedLocationOutput() ExtendedLocationOutput {
	return i.ToExtendedLocationOutputWithContext(context.Background())
}

func (i ExtendedLocationArgs) ToExtendedLocationOutputWithContext(ctx context.Context) ExtendedLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedLocationOutput)
}

// The extended location.
type ExtendedLocationOutput struct{ *pulumi.OutputState }

func (ExtendedLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocation)(nil)).Elem()
}

func (o ExtendedLocationOutput) ToExtendedLocationOutput() ExtendedLocationOutput {
	return o
}

func (o ExtendedLocationOutput) ToExtendedLocationOutputWithContext(ctx context.Context) ExtendedLocationOutput {
	return o
}

// The extended location name.
func (o ExtendedLocationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExtendedLocation) string { return v.Name }).(pulumi.StringOutput)
}

// The extended location type.
func (o ExtendedLocationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExtendedLocation) string { return v.Type }).(pulumi.StringOutput)
}

// The extended location.
type ExtendedLocationResponse struct {
	// The extended location name.
	Name string `pulumi:"name"`
	// The extended location type.
	Type string `pulumi:"type"`
}

// The extended location.
type ExtendedLocationResponseOutput struct{ *pulumi.OutputState }

func (ExtendedLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocationResponse)(nil)).Elem()
}

func (o ExtendedLocationResponseOutput) ToExtendedLocationResponseOutput() ExtendedLocationResponseOutput {
	return o
}

func (o ExtendedLocationResponseOutput) ToExtendedLocationResponseOutputWithContext(ctx context.Context) ExtendedLocationResponseOutput {
	return o
}

// The extended location name.
func (o ExtendedLocationResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExtendedLocationResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The extended location type.
func (o ExtendedLocationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExtendedLocationResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Certificate or private key that can be used by the southbound connector connecting to the shop floor/OT device. The accepted extensions are .der for certificates and .pfx/.pem for private keys.
type OwnCertificate struct {
	// Secret Reference Name (Pfx or Pem password).
	CertPasswordReference *string `pulumi:"certPasswordReference"`
	// Secret Reference name (cert and private key).
	CertSecretReference *string `pulumi:"certSecretReference"`
	// Certificate thumbprint.
	CertThumbprint *string `pulumi:"certThumbprint"`
}

// OwnCertificateInput is an input type that accepts OwnCertificateArgs and OwnCertificateOutput values.
// You can construct a concrete instance of `OwnCertificateInput` via:
//
//	OwnCertificateArgs{...}
type OwnCertificateInput interface {
	pulumi.Input

	ToOwnCertificateOutput() OwnCertificateOutput
	ToOwnCertificateOutputWithContext(context.Context) OwnCertificateOutput
}

// Certificate or private key that can be used by the southbound connector connecting to the shop floor/OT device. The accepted extensions are .der for certificates and .pfx/.pem for private keys.
type OwnCertificateArgs struct {
	// Secret Reference Name (Pfx or Pem password).
	CertPasswordReference pulumi.StringPtrInput `pulumi:"certPasswordReference"`
	// Secret Reference name (cert and private key).
	CertSecretReference pulumi.StringPtrInput `pulumi:"certSecretReference"`
	// Certificate thumbprint.
	CertThumbprint pulumi.StringPtrInput `pulumi:"certThumbprint"`
}

func (OwnCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OwnCertificate)(nil)).Elem()
}

func (i OwnCertificateArgs) ToOwnCertificateOutput() OwnCertificateOutput {
	return i.ToOwnCertificateOutputWithContext(context.Background())
}

func (i OwnCertificateArgs) ToOwnCertificateOutputWithContext(ctx context.Context) OwnCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OwnCertificateOutput)
}

// OwnCertificateArrayInput is an input type that accepts OwnCertificateArray and OwnCertificateArrayOutput values.
// You can construct a concrete instance of `OwnCertificateArrayInput` via:
//
//	OwnCertificateArray{ OwnCertificateArgs{...} }
type OwnCertificateArrayInput interface {
	pulumi.Input

	ToOwnCertificateArrayOutput() OwnCertificateArrayOutput
	ToOwnCertificateArrayOutputWithContext(context.Context) OwnCertificateArrayOutput
}

type OwnCertificateArray []OwnCertificateInput

func (OwnCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OwnCertificate)(nil)).Elem()
}

func (i OwnCertificateArray) ToOwnCertificateArrayOutput() OwnCertificateArrayOutput {
	return i.ToOwnCertificateArrayOutputWithContext(context.Background())
}

func (i OwnCertificateArray) ToOwnCertificateArrayOutputWithContext(ctx context.Context) OwnCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OwnCertificateArrayOutput)
}

// Certificate or private key that can be used by the southbound connector connecting to the shop floor/OT device. The accepted extensions are .der for certificates and .pfx/.pem for private keys.
type OwnCertificateOutput struct{ *pulumi.OutputState }

func (OwnCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OwnCertificate)(nil)).Elem()
}

func (o OwnCertificateOutput) ToOwnCertificateOutput() OwnCertificateOutput {
	return o
}

func (o OwnCertificateOutput) ToOwnCertificateOutputWithContext(ctx context.Context) OwnCertificateOutput {
	return o
}

// Secret Reference Name (Pfx or Pem password).
func (o OwnCertificateOutput) CertPasswordReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OwnCertificate) *string { return v.CertPasswordReference }).(pulumi.StringPtrOutput)
}

// Secret Reference name (cert and private key).
func (o OwnCertificateOutput) CertSecretReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OwnCertificate) *string { return v.CertSecretReference }).(pulumi.StringPtrOutput)
}

// Certificate thumbprint.
func (o OwnCertificateOutput) CertThumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OwnCertificate) *string { return v.CertThumbprint }).(pulumi.StringPtrOutput)
}

type OwnCertificateArrayOutput struct{ *pulumi.OutputState }

func (OwnCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OwnCertificate)(nil)).Elem()
}

func (o OwnCertificateArrayOutput) ToOwnCertificateArrayOutput() OwnCertificateArrayOutput {
	return o
}

func (o OwnCertificateArrayOutput) ToOwnCertificateArrayOutputWithContext(ctx context.Context) OwnCertificateArrayOutput {
	return o
}

func (o OwnCertificateArrayOutput) Index(i pulumi.IntInput) OwnCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OwnCertificate {
		return vs[0].([]OwnCertificate)[vs[1].(int)]
	}).(OwnCertificateOutput)
}

// Certificate or private key that can be used by the southbound connector connecting to the shop floor/OT device. The accepted extensions are .der for certificates and .pfx/.pem for private keys.
type OwnCertificateResponse struct {
	// Secret Reference Name (Pfx or Pem password).
	CertPasswordReference *string `pulumi:"certPasswordReference"`
	// Secret Reference name (cert and private key).
	CertSecretReference *string `pulumi:"certSecretReference"`
	// Certificate thumbprint.
	CertThumbprint *string `pulumi:"certThumbprint"`
}

// Certificate or private key that can be used by the southbound connector connecting to the shop floor/OT device. The accepted extensions are .der for certificates and .pfx/.pem for private keys.
type OwnCertificateResponseOutput struct{ *pulumi.OutputState }

func (OwnCertificateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OwnCertificateResponse)(nil)).Elem()
}

func (o OwnCertificateResponseOutput) ToOwnCertificateResponseOutput() OwnCertificateResponseOutput {
	return o
}

func (o OwnCertificateResponseOutput) ToOwnCertificateResponseOutputWithContext(ctx context.Context) OwnCertificateResponseOutput {
	return o
}

// Secret Reference Name (Pfx or Pem password).
func (o OwnCertificateResponseOutput) CertPasswordReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OwnCertificateResponse) *string { return v.CertPasswordReference }).(pulumi.StringPtrOutput)
}

// Secret Reference name (cert and private key).
func (o OwnCertificateResponseOutput) CertSecretReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OwnCertificateResponse) *string { return v.CertSecretReference }).(pulumi.StringPtrOutput)
}

// Certificate thumbprint.
func (o OwnCertificateResponseOutput) CertThumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OwnCertificateResponse) *string { return v.CertThumbprint }).(pulumi.StringPtrOutput)
}

type OwnCertificateResponseArrayOutput struct{ *pulumi.OutputState }

func (OwnCertificateResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OwnCertificateResponse)(nil)).Elem()
}

func (o OwnCertificateResponseArrayOutput) ToOwnCertificateResponseArrayOutput() OwnCertificateResponseArrayOutput {
	return o
}

func (o OwnCertificateResponseArrayOutput) ToOwnCertificateResponseArrayOutputWithContext(ctx context.Context) OwnCertificateResponseArrayOutput {
	return o
}

func (o OwnCertificateResponseArrayOutput) Index(i pulumi.IntInput) OwnCertificateResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OwnCertificateResponse {
		return vs[0].([]OwnCertificateResponse)[vs[1].(int)]
	}).(OwnCertificateResponseOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// Definition of the authentication mechanism for the southbound connector.
type TransportAuthentication struct {
	// Defines a reference to a secret which contains all certificates and private keys that can be used by the southbound connector connecting to the shop floor/OT device. The accepted extensions are .der for certificates and .pfx/.pem for private keys.
	OwnCertificates []OwnCertificate `pulumi:"ownCertificates"`
}

// TransportAuthenticationInput is an input type that accepts TransportAuthenticationArgs and TransportAuthenticationOutput values.
// You can construct a concrete instance of `TransportAuthenticationInput` via:
//
//	TransportAuthenticationArgs{...}
type TransportAuthenticationInput interface {
	pulumi.Input

	ToTransportAuthenticationOutput() TransportAuthenticationOutput
	ToTransportAuthenticationOutputWithContext(context.Context) TransportAuthenticationOutput
}

// Definition of the authentication mechanism for the southbound connector.
type TransportAuthenticationArgs struct {
	// Defines a reference to a secret which contains all certificates and private keys that can be used by the southbound connector connecting to the shop floor/OT device. The accepted extensions are .der for certificates and .pfx/.pem for private keys.
	OwnCertificates OwnCertificateArrayInput `pulumi:"ownCertificates"`
}

func (TransportAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransportAuthentication)(nil)).Elem()
}

func (i TransportAuthenticationArgs) ToTransportAuthenticationOutput() TransportAuthenticationOutput {
	return i.ToTransportAuthenticationOutputWithContext(context.Background())
}

func (i TransportAuthenticationArgs) ToTransportAuthenticationOutputWithContext(ctx context.Context) TransportAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransportAuthenticationOutput)
}

func (i TransportAuthenticationArgs) ToTransportAuthenticationPtrOutput() TransportAuthenticationPtrOutput {
	return i.ToTransportAuthenticationPtrOutputWithContext(context.Background())
}

func (i TransportAuthenticationArgs) ToTransportAuthenticationPtrOutputWithContext(ctx context.Context) TransportAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransportAuthenticationOutput).ToTransportAuthenticationPtrOutputWithContext(ctx)
}

// TransportAuthenticationPtrInput is an input type that accepts TransportAuthenticationArgs, TransportAuthenticationPtr and TransportAuthenticationPtrOutput values.
// You can construct a concrete instance of `TransportAuthenticationPtrInput` via:
//
//	        TransportAuthenticationArgs{...}
//
//	or:
//
//	        nil
type TransportAuthenticationPtrInput interface {
	pulumi.Input

	ToTransportAuthenticationPtrOutput() TransportAuthenticationPtrOutput
	ToTransportAuthenticationPtrOutputWithContext(context.Context) TransportAuthenticationPtrOutput
}

type transportAuthenticationPtrType TransportAuthenticationArgs

func TransportAuthenticationPtr(v *TransportAuthenticationArgs) TransportAuthenticationPtrInput {
	return (*transportAuthenticationPtrType)(v)
}

func (*transportAuthenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TransportAuthentication)(nil)).Elem()
}

func (i *transportAuthenticationPtrType) ToTransportAuthenticationPtrOutput() TransportAuthenticationPtrOutput {
	return i.ToTransportAuthenticationPtrOutputWithContext(context.Background())
}

func (i *transportAuthenticationPtrType) ToTransportAuthenticationPtrOutputWithContext(ctx context.Context) TransportAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransportAuthenticationPtrOutput)
}

// Definition of the authentication mechanism for the southbound connector.
type TransportAuthenticationOutput struct{ *pulumi.OutputState }

func (TransportAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransportAuthentication)(nil)).Elem()
}

func (o TransportAuthenticationOutput) ToTransportAuthenticationOutput() TransportAuthenticationOutput {
	return o
}

func (o TransportAuthenticationOutput) ToTransportAuthenticationOutputWithContext(ctx context.Context) TransportAuthenticationOutput {
	return o
}

func (o TransportAuthenticationOutput) ToTransportAuthenticationPtrOutput() TransportAuthenticationPtrOutput {
	return o.ToTransportAuthenticationPtrOutputWithContext(context.Background())
}

func (o TransportAuthenticationOutput) ToTransportAuthenticationPtrOutputWithContext(ctx context.Context) TransportAuthenticationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransportAuthentication) *TransportAuthentication {
		return &v
	}).(TransportAuthenticationPtrOutput)
}

// Defines a reference to a secret which contains all certificates and private keys that can be used by the southbound connector connecting to the shop floor/OT device. The accepted extensions are .der for certificates and .pfx/.pem for private keys.
func (o TransportAuthenticationOutput) OwnCertificates() OwnCertificateArrayOutput {
	return o.ApplyT(func(v TransportAuthentication) []OwnCertificate { return v.OwnCertificates }).(OwnCertificateArrayOutput)
}

type TransportAuthenticationPtrOutput struct{ *pulumi.OutputState }

func (TransportAuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransportAuthentication)(nil)).Elem()
}

func (o TransportAuthenticationPtrOutput) ToTransportAuthenticationPtrOutput() TransportAuthenticationPtrOutput {
	return o
}

func (o TransportAuthenticationPtrOutput) ToTransportAuthenticationPtrOutputWithContext(ctx context.Context) TransportAuthenticationPtrOutput {
	return o
}

func (o TransportAuthenticationPtrOutput) Elem() TransportAuthenticationOutput {
	return o.ApplyT(func(v *TransportAuthentication) TransportAuthentication {
		if v != nil {
			return *v
		}
		var ret TransportAuthentication
		return ret
	}).(TransportAuthenticationOutput)
}

// Defines a reference to a secret which contains all certificates and private keys that can be used by the southbound connector connecting to the shop floor/OT device. The accepted extensions are .der for certificates and .pfx/.pem for private keys.
func (o TransportAuthenticationPtrOutput) OwnCertificates() OwnCertificateArrayOutput {
	return o.ApplyT(func(v *TransportAuthentication) []OwnCertificate {
		if v == nil {
			return nil
		}
		return v.OwnCertificates
	}).(OwnCertificateArrayOutput)
}

// Definition of the authentication mechanism for the southbound connector.
type TransportAuthenticationResponse struct {
	// Defines a reference to a secret which contains all certificates and private keys that can be used by the southbound connector connecting to the shop floor/OT device. The accepted extensions are .der for certificates and .pfx/.pem for private keys.
	OwnCertificates []OwnCertificateResponse `pulumi:"ownCertificates"`
}

// Definition of the authentication mechanism for the southbound connector.
type TransportAuthenticationResponseOutput struct{ *pulumi.OutputState }

func (TransportAuthenticationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransportAuthenticationResponse)(nil)).Elem()
}

func (o TransportAuthenticationResponseOutput) ToTransportAuthenticationResponseOutput() TransportAuthenticationResponseOutput {
	return o
}

func (o TransportAuthenticationResponseOutput) ToTransportAuthenticationResponseOutputWithContext(ctx context.Context) TransportAuthenticationResponseOutput {
	return o
}

// Defines a reference to a secret which contains all certificates and private keys that can be used by the southbound connector connecting to the shop floor/OT device. The accepted extensions are .der for certificates and .pfx/.pem for private keys.
func (o TransportAuthenticationResponseOutput) OwnCertificates() OwnCertificateResponseArrayOutput {
	return o.ApplyT(func(v TransportAuthenticationResponse) []OwnCertificateResponse { return v.OwnCertificates }).(OwnCertificateResponseArrayOutput)
}

type TransportAuthenticationResponsePtrOutput struct{ *pulumi.OutputState }

func (TransportAuthenticationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransportAuthenticationResponse)(nil)).Elem()
}

func (o TransportAuthenticationResponsePtrOutput) ToTransportAuthenticationResponsePtrOutput() TransportAuthenticationResponsePtrOutput {
	return o
}

func (o TransportAuthenticationResponsePtrOutput) ToTransportAuthenticationResponsePtrOutputWithContext(ctx context.Context) TransportAuthenticationResponsePtrOutput {
	return o
}

func (o TransportAuthenticationResponsePtrOutput) Elem() TransportAuthenticationResponseOutput {
	return o.ApplyT(func(v *TransportAuthenticationResponse) TransportAuthenticationResponse {
		if v != nil {
			return *v
		}
		var ret TransportAuthenticationResponse
		return ret
	}).(TransportAuthenticationResponseOutput)
}

// Defines a reference to a secret which contains all certificates and private keys that can be used by the southbound connector connecting to the shop floor/OT device. The accepted extensions are .der for certificates and .pfx/.pem for private keys.
func (o TransportAuthenticationResponsePtrOutput) OwnCertificates() OwnCertificateResponseArrayOutput {
	return o.ApplyT(func(v *TransportAuthenticationResponse) []OwnCertificateResponse {
		if v == nil {
			return nil
		}
		return v.OwnCertificates
	}).(OwnCertificateResponseArrayOutput)
}

// Definition of the client authentication mechanism to the server.
type UserAuthentication struct {
	// Defines the mode to authenticate the user of the client at the server.
	Mode string `pulumi:"mode"`
	// Defines the username and password references when UsernamePassword user authentication mode is selected.
	UsernamePasswordCredentials *UsernamePasswordCredentials `pulumi:"usernamePasswordCredentials"`
	// Defines the certificate reference when Certificate user authentication mode is selected.
	X509Credentials *X509Credentials `pulumi:"x509Credentials"`
}

// Defaults sets the appropriate defaults for UserAuthentication
func (val *UserAuthentication) Defaults() *UserAuthentication {
	if val == nil {
		return nil
	}
	tmp := *val
	if utilities.IsZero(tmp.Mode) {
		tmp.Mode = "Certificate"
	}
	return &tmp
}

// UserAuthenticationInput is an input type that accepts UserAuthenticationArgs and UserAuthenticationOutput values.
// You can construct a concrete instance of `UserAuthenticationInput` via:
//
//	UserAuthenticationArgs{...}
type UserAuthenticationInput interface {
	pulumi.Input

	ToUserAuthenticationOutput() UserAuthenticationOutput
	ToUserAuthenticationOutputWithContext(context.Context) UserAuthenticationOutput
}

// Definition of the client authentication mechanism to the server.
type UserAuthenticationArgs struct {
	// Defines the mode to authenticate the user of the client at the server.
	Mode pulumi.StringInput `pulumi:"mode"`
	// Defines the username and password references when UsernamePassword user authentication mode is selected.
	UsernamePasswordCredentials UsernamePasswordCredentialsPtrInput `pulumi:"usernamePasswordCredentials"`
	// Defines the certificate reference when Certificate user authentication mode is selected.
	X509Credentials X509CredentialsPtrInput `pulumi:"x509Credentials"`
}

// Defaults sets the appropriate defaults for UserAuthenticationArgs
func (val *UserAuthenticationArgs) Defaults() *UserAuthenticationArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		tmp.Mode = pulumi.String("Certificate")
	}
	return &tmp
}
func (UserAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAuthentication)(nil)).Elem()
}

func (i UserAuthenticationArgs) ToUserAuthenticationOutput() UserAuthenticationOutput {
	return i.ToUserAuthenticationOutputWithContext(context.Background())
}

func (i UserAuthenticationArgs) ToUserAuthenticationOutputWithContext(ctx context.Context) UserAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAuthenticationOutput)
}

func (i UserAuthenticationArgs) ToUserAuthenticationPtrOutput() UserAuthenticationPtrOutput {
	return i.ToUserAuthenticationPtrOutputWithContext(context.Background())
}

func (i UserAuthenticationArgs) ToUserAuthenticationPtrOutputWithContext(ctx context.Context) UserAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAuthenticationOutput).ToUserAuthenticationPtrOutputWithContext(ctx)
}

// UserAuthenticationPtrInput is an input type that accepts UserAuthenticationArgs, UserAuthenticationPtr and UserAuthenticationPtrOutput values.
// You can construct a concrete instance of `UserAuthenticationPtrInput` via:
//
//	        UserAuthenticationArgs{...}
//
//	or:
//
//	        nil
type UserAuthenticationPtrInput interface {
	pulumi.Input

	ToUserAuthenticationPtrOutput() UserAuthenticationPtrOutput
	ToUserAuthenticationPtrOutputWithContext(context.Context) UserAuthenticationPtrOutput
}

type userAuthenticationPtrType UserAuthenticationArgs

func UserAuthenticationPtr(v *UserAuthenticationArgs) UserAuthenticationPtrInput {
	return (*userAuthenticationPtrType)(v)
}

func (*userAuthenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAuthentication)(nil)).Elem()
}

func (i *userAuthenticationPtrType) ToUserAuthenticationPtrOutput() UserAuthenticationPtrOutput {
	return i.ToUserAuthenticationPtrOutputWithContext(context.Background())
}

func (i *userAuthenticationPtrType) ToUserAuthenticationPtrOutputWithContext(ctx context.Context) UserAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAuthenticationPtrOutput)
}

// Definition of the client authentication mechanism to the server.
type UserAuthenticationOutput struct{ *pulumi.OutputState }

func (UserAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAuthentication)(nil)).Elem()
}

func (o UserAuthenticationOutput) ToUserAuthenticationOutput() UserAuthenticationOutput {
	return o
}

func (o UserAuthenticationOutput) ToUserAuthenticationOutputWithContext(ctx context.Context) UserAuthenticationOutput {
	return o
}

func (o UserAuthenticationOutput) ToUserAuthenticationPtrOutput() UserAuthenticationPtrOutput {
	return o.ToUserAuthenticationPtrOutputWithContext(context.Background())
}

func (o UserAuthenticationOutput) ToUserAuthenticationPtrOutputWithContext(ctx context.Context) UserAuthenticationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserAuthentication) *UserAuthentication {
		return &v
	}).(UserAuthenticationPtrOutput)
}

// Defines the mode to authenticate the user of the client at the server.
func (o UserAuthenticationOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v UserAuthentication) string { return v.Mode }).(pulumi.StringOutput)
}

// Defines the username and password references when UsernamePassword user authentication mode is selected.
func (o UserAuthenticationOutput) UsernamePasswordCredentials() UsernamePasswordCredentialsPtrOutput {
	return o.ApplyT(func(v UserAuthentication) *UsernamePasswordCredentials { return v.UsernamePasswordCredentials }).(UsernamePasswordCredentialsPtrOutput)
}

// Defines the certificate reference when Certificate user authentication mode is selected.
func (o UserAuthenticationOutput) X509Credentials() X509CredentialsPtrOutput {
	return o.ApplyT(func(v UserAuthentication) *X509Credentials { return v.X509Credentials }).(X509CredentialsPtrOutput)
}

type UserAuthenticationPtrOutput struct{ *pulumi.OutputState }

func (UserAuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAuthentication)(nil)).Elem()
}

func (o UserAuthenticationPtrOutput) ToUserAuthenticationPtrOutput() UserAuthenticationPtrOutput {
	return o
}

func (o UserAuthenticationPtrOutput) ToUserAuthenticationPtrOutputWithContext(ctx context.Context) UserAuthenticationPtrOutput {
	return o
}

func (o UserAuthenticationPtrOutput) Elem() UserAuthenticationOutput {
	return o.ApplyT(func(v *UserAuthentication) UserAuthentication {
		if v != nil {
			return *v
		}
		var ret UserAuthentication
		return ret
	}).(UserAuthenticationOutput)
}

// Defines the mode to authenticate the user of the client at the server.
func (o UserAuthenticationPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAuthentication) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// Defines the username and password references when UsernamePassword user authentication mode is selected.
func (o UserAuthenticationPtrOutput) UsernamePasswordCredentials() UsernamePasswordCredentialsPtrOutput {
	return o.ApplyT(func(v *UserAuthentication) *UsernamePasswordCredentials {
		if v == nil {
			return nil
		}
		return v.UsernamePasswordCredentials
	}).(UsernamePasswordCredentialsPtrOutput)
}

// Defines the certificate reference when Certificate user authentication mode is selected.
func (o UserAuthenticationPtrOutput) X509Credentials() X509CredentialsPtrOutput {
	return o.ApplyT(func(v *UserAuthentication) *X509Credentials {
		if v == nil {
			return nil
		}
		return v.X509Credentials
	}).(X509CredentialsPtrOutput)
}

// Definition of the client authentication mechanism to the server.
type UserAuthenticationResponse struct {
	// Defines the mode to authenticate the user of the client at the server.
	Mode string `pulumi:"mode"`
	// Defines the username and password references when UsernamePassword user authentication mode is selected.
	UsernamePasswordCredentials *UsernamePasswordCredentialsResponse `pulumi:"usernamePasswordCredentials"`
	// Defines the certificate reference when Certificate user authentication mode is selected.
	X509Credentials *X509CredentialsResponse `pulumi:"x509Credentials"`
}

// Defaults sets the appropriate defaults for UserAuthenticationResponse
func (val *UserAuthenticationResponse) Defaults() *UserAuthenticationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if utilities.IsZero(tmp.Mode) {
		tmp.Mode = "Certificate"
	}
	return &tmp
}

// Definition of the client authentication mechanism to the server.
type UserAuthenticationResponseOutput struct{ *pulumi.OutputState }

func (UserAuthenticationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAuthenticationResponse)(nil)).Elem()
}

func (o UserAuthenticationResponseOutput) ToUserAuthenticationResponseOutput() UserAuthenticationResponseOutput {
	return o
}

func (o UserAuthenticationResponseOutput) ToUserAuthenticationResponseOutputWithContext(ctx context.Context) UserAuthenticationResponseOutput {
	return o
}

// Defines the mode to authenticate the user of the client at the server.
func (o UserAuthenticationResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v UserAuthenticationResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// Defines the username and password references when UsernamePassword user authentication mode is selected.
func (o UserAuthenticationResponseOutput) UsernamePasswordCredentials() UsernamePasswordCredentialsResponsePtrOutput {
	return o.ApplyT(func(v UserAuthenticationResponse) *UsernamePasswordCredentialsResponse {
		return v.UsernamePasswordCredentials
	}).(UsernamePasswordCredentialsResponsePtrOutput)
}

// Defines the certificate reference when Certificate user authentication mode is selected.
func (o UserAuthenticationResponseOutput) X509Credentials() X509CredentialsResponsePtrOutput {
	return o.ApplyT(func(v UserAuthenticationResponse) *X509CredentialsResponse { return v.X509Credentials }).(X509CredentialsResponsePtrOutput)
}

type UserAuthenticationResponsePtrOutput struct{ *pulumi.OutputState }

func (UserAuthenticationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAuthenticationResponse)(nil)).Elem()
}

func (o UserAuthenticationResponsePtrOutput) ToUserAuthenticationResponsePtrOutput() UserAuthenticationResponsePtrOutput {
	return o
}

func (o UserAuthenticationResponsePtrOutput) ToUserAuthenticationResponsePtrOutputWithContext(ctx context.Context) UserAuthenticationResponsePtrOutput {
	return o
}

func (o UserAuthenticationResponsePtrOutput) Elem() UserAuthenticationResponseOutput {
	return o.ApplyT(func(v *UserAuthenticationResponse) UserAuthenticationResponse {
		if v != nil {
			return *v
		}
		var ret UserAuthenticationResponse
		return ret
	}).(UserAuthenticationResponseOutput)
}

// Defines the mode to authenticate the user of the client at the server.
func (o UserAuthenticationResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAuthenticationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// Defines the username and password references when UsernamePassword user authentication mode is selected.
func (o UserAuthenticationResponsePtrOutput) UsernamePasswordCredentials() UsernamePasswordCredentialsResponsePtrOutput {
	return o.ApplyT(func(v *UserAuthenticationResponse) *UsernamePasswordCredentialsResponse {
		if v == nil {
			return nil
		}
		return v.UsernamePasswordCredentials
	}).(UsernamePasswordCredentialsResponsePtrOutput)
}

// Defines the certificate reference when Certificate user authentication mode is selected.
func (o UserAuthenticationResponsePtrOutput) X509Credentials() X509CredentialsResponsePtrOutput {
	return o.ApplyT(func(v *UserAuthenticationResponse) *X509CredentialsResponse {
		if v == nil {
			return nil
		}
		return v.X509Credentials
	}).(X509CredentialsResponsePtrOutput)
}

// The credentials for authentication mode UsernamePassword.
type UsernamePasswordCredentials struct {
	// A reference to secret containing the password.
	PasswordReference string `pulumi:"passwordReference"`
	// A reference to secret containing the username.
	UsernameReference string `pulumi:"usernameReference"`
}

// UsernamePasswordCredentialsInput is an input type that accepts UsernamePasswordCredentialsArgs and UsernamePasswordCredentialsOutput values.
// You can construct a concrete instance of `UsernamePasswordCredentialsInput` via:
//
//	UsernamePasswordCredentialsArgs{...}
type UsernamePasswordCredentialsInput interface {
	pulumi.Input

	ToUsernamePasswordCredentialsOutput() UsernamePasswordCredentialsOutput
	ToUsernamePasswordCredentialsOutputWithContext(context.Context) UsernamePasswordCredentialsOutput
}

// The credentials for authentication mode UsernamePassword.
type UsernamePasswordCredentialsArgs struct {
	// A reference to secret containing the password.
	PasswordReference pulumi.StringInput `pulumi:"passwordReference"`
	// A reference to secret containing the username.
	UsernameReference pulumi.StringInput `pulumi:"usernameReference"`
}

func (UsernamePasswordCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UsernamePasswordCredentials)(nil)).Elem()
}

func (i UsernamePasswordCredentialsArgs) ToUsernamePasswordCredentialsOutput() UsernamePasswordCredentialsOutput {
	return i.ToUsernamePasswordCredentialsOutputWithContext(context.Background())
}

func (i UsernamePasswordCredentialsArgs) ToUsernamePasswordCredentialsOutputWithContext(ctx context.Context) UsernamePasswordCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsernamePasswordCredentialsOutput)
}

func (i UsernamePasswordCredentialsArgs) ToUsernamePasswordCredentialsPtrOutput() UsernamePasswordCredentialsPtrOutput {
	return i.ToUsernamePasswordCredentialsPtrOutputWithContext(context.Background())
}

func (i UsernamePasswordCredentialsArgs) ToUsernamePasswordCredentialsPtrOutputWithContext(ctx context.Context) UsernamePasswordCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsernamePasswordCredentialsOutput).ToUsernamePasswordCredentialsPtrOutputWithContext(ctx)
}

// UsernamePasswordCredentialsPtrInput is an input type that accepts UsernamePasswordCredentialsArgs, UsernamePasswordCredentialsPtr and UsernamePasswordCredentialsPtrOutput values.
// You can construct a concrete instance of `UsernamePasswordCredentialsPtrInput` via:
//
//	        UsernamePasswordCredentialsArgs{...}
//
//	or:
//
//	        nil
type UsernamePasswordCredentialsPtrInput interface {
	pulumi.Input

	ToUsernamePasswordCredentialsPtrOutput() UsernamePasswordCredentialsPtrOutput
	ToUsernamePasswordCredentialsPtrOutputWithContext(context.Context) UsernamePasswordCredentialsPtrOutput
}

type usernamePasswordCredentialsPtrType UsernamePasswordCredentialsArgs

func UsernamePasswordCredentialsPtr(v *UsernamePasswordCredentialsArgs) UsernamePasswordCredentialsPtrInput {
	return (*usernamePasswordCredentialsPtrType)(v)
}

func (*usernamePasswordCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UsernamePasswordCredentials)(nil)).Elem()
}

func (i *usernamePasswordCredentialsPtrType) ToUsernamePasswordCredentialsPtrOutput() UsernamePasswordCredentialsPtrOutput {
	return i.ToUsernamePasswordCredentialsPtrOutputWithContext(context.Background())
}

func (i *usernamePasswordCredentialsPtrType) ToUsernamePasswordCredentialsPtrOutputWithContext(ctx context.Context) UsernamePasswordCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsernamePasswordCredentialsPtrOutput)
}

// The credentials for authentication mode UsernamePassword.
type UsernamePasswordCredentialsOutput struct{ *pulumi.OutputState }

func (UsernamePasswordCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UsernamePasswordCredentials)(nil)).Elem()
}

func (o UsernamePasswordCredentialsOutput) ToUsernamePasswordCredentialsOutput() UsernamePasswordCredentialsOutput {
	return o
}

func (o UsernamePasswordCredentialsOutput) ToUsernamePasswordCredentialsOutputWithContext(ctx context.Context) UsernamePasswordCredentialsOutput {
	return o
}

func (o UsernamePasswordCredentialsOutput) ToUsernamePasswordCredentialsPtrOutput() UsernamePasswordCredentialsPtrOutput {
	return o.ToUsernamePasswordCredentialsPtrOutputWithContext(context.Background())
}

func (o UsernamePasswordCredentialsOutput) ToUsernamePasswordCredentialsPtrOutputWithContext(ctx context.Context) UsernamePasswordCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UsernamePasswordCredentials) *UsernamePasswordCredentials {
		return &v
	}).(UsernamePasswordCredentialsPtrOutput)
}

// A reference to secret containing the password.
func (o UsernamePasswordCredentialsOutput) PasswordReference() pulumi.StringOutput {
	return o.ApplyT(func(v UsernamePasswordCredentials) string { return v.PasswordReference }).(pulumi.StringOutput)
}

// A reference to secret containing the username.
func (o UsernamePasswordCredentialsOutput) UsernameReference() pulumi.StringOutput {
	return o.ApplyT(func(v UsernamePasswordCredentials) string { return v.UsernameReference }).(pulumi.StringOutput)
}

type UsernamePasswordCredentialsPtrOutput struct{ *pulumi.OutputState }

func (UsernamePasswordCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UsernamePasswordCredentials)(nil)).Elem()
}

func (o UsernamePasswordCredentialsPtrOutput) ToUsernamePasswordCredentialsPtrOutput() UsernamePasswordCredentialsPtrOutput {
	return o
}

func (o UsernamePasswordCredentialsPtrOutput) ToUsernamePasswordCredentialsPtrOutputWithContext(ctx context.Context) UsernamePasswordCredentialsPtrOutput {
	return o
}

func (o UsernamePasswordCredentialsPtrOutput) Elem() UsernamePasswordCredentialsOutput {
	return o.ApplyT(func(v *UsernamePasswordCredentials) UsernamePasswordCredentials {
		if v != nil {
			return *v
		}
		var ret UsernamePasswordCredentials
		return ret
	}).(UsernamePasswordCredentialsOutput)
}

// A reference to secret containing the password.
func (o UsernamePasswordCredentialsPtrOutput) PasswordReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UsernamePasswordCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.PasswordReference
	}).(pulumi.StringPtrOutput)
}

// A reference to secret containing the username.
func (o UsernamePasswordCredentialsPtrOutput) UsernameReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UsernamePasswordCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.UsernameReference
	}).(pulumi.StringPtrOutput)
}

// The credentials for authentication mode UsernamePassword.
type UsernamePasswordCredentialsResponse struct {
	// A reference to secret containing the password.
	PasswordReference string `pulumi:"passwordReference"`
	// A reference to secret containing the username.
	UsernameReference string `pulumi:"usernameReference"`
}

// The credentials for authentication mode UsernamePassword.
type UsernamePasswordCredentialsResponseOutput struct{ *pulumi.OutputState }

func (UsernamePasswordCredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UsernamePasswordCredentialsResponse)(nil)).Elem()
}

func (o UsernamePasswordCredentialsResponseOutput) ToUsernamePasswordCredentialsResponseOutput() UsernamePasswordCredentialsResponseOutput {
	return o
}

func (o UsernamePasswordCredentialsResponseOutput) ToUsernamePasswordCredentialsResponseOutputWithContext(ctx context.Context) UsernamePasswordCredentialsResponseOutput {
	return o
}

// A reference to secret containing the password.
func (o UsernamePasswordCredentialsResponseOutput) PasswordReference() pulumi.StringOutput {
	return o.ApplyT(func(v UsernamePasswordCredentialsResponse) string { return v.PasswordReference }).(pulumi.StringOutput)
}

// A reference to secret containing the username.
func (o UsernamePasswordCredentialsResponseOutput) UsernameReference() pulumi.StringOutput {
	return o.ApplyT(func(v UsernamePasswordCredentialsResponse) string { return v.UsernameReference }).(pulumi.StringOutput)
}

type UsernamePasswordCredentialsResponsePtrOutput struct{ *pulumi.OutputState }

func (UsernamePasswordCredentialsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UsernamePasswordCredentialsResponse)(nil)).Elem()
}

func (o UsernamePasswordCredentialsResponsePtrOutput) ToUsernamePasswordCredentialsResponsePtrOutput() UsernamePasswordCredentialsResponsePtrOutput {
	return o
}

func (o UsernamePasswordCredentialsResponsePtrOutput) ToUsernamePasswordCredentialsResponsePtrOutputWithContext(ctx context.Context) UsernamePasswordCredentialsResponsePtrOutput {
	return o
}

func (o UsernamePasswordCredentialsResponsePtrOutput) Elem() UsernamePasswordCredentialsResponseOutput {
	return o.ApplyT(func(v *UsernamePasswordCredentialsResponse) UsernamePasswordCredentialsResponse {
		if v != nil {
			return *v
		}
		var ret UsernamePasswordCredentialsResponse
		return ret
	}).(UsernamePasswordCredentialsResponseOutput)
}

// A reference to secret containing the password.
func (o UsernamePasswordCredentialsResponsePtrOutput) PasswordReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UsernamePasswordCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PasswordReference
	}).(pulumi.StringPtrOutput)
}

// A reference to secret containing the username.
func (o UsernamePasswordCredentialsResponsePtrOutput) UsernameReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UsernamePasswordCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UsernameReference
	}).(pulumi.StringPtrOutput)
}

// The x509 certificate for authentication mode Certificate.
type X509Credentials struct {
	// A reference to secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx).
	CertificateReference string `pulumi:"certificateReference"`
}

// X509CredentialsInput is an input type that accepts X509CredentialsArgs and X509CredentialsOutput values.
// You can construct a concrete instance of `X509CredentialsInput` via:
//
//	X509CredentialsArgs{...}
type X509CredentialsInput interface {
	pulumi.Input

	ToX509CredentialsOutput() X509CredentialsOutput
	ToX509CredentialsOutputWithContext(context.Context) X509CredentialsOutput
}

// The x509 certificate for authentication mode Certificate.
type X509CredentialsArgs struct {
	// A reference to secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx).
	CertificateReference pulumi.StringInput `pulumi:"certificateReference"`
}

func (X509CredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X509Credentials)(nil)).Elem()
}

func (i X509CredentialsArgs) ToX509CredentialsOutput() X509CredentialsOutput {
	return i.ToX509CredentialsOutputWithContext(context.Background())
}

func (i X509CredentialsArgs) ToX509CredentialsOutputWithContext(ctx context.Context) X509CredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X509CredentialsOutput)
}

func (i X509CredentialsArgs) ToX509CredentialsPtrOutput() X509CredentialsPtrOutput {
	return i.ToX509CredentialsPtrOutputWithContext(context.Background())
}

func (i X509CredentialsArgs) ToX509CredentialsPtrOutputWithContext(ctx context.Context) X509CredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X509CredentialsOutput).ToX509CredentialsPtrOutputWithContext(ctx)
}

// X509CredentialsPtrInput is an input type that accepts X509CredentialsArgs, X509CredentialsPtr and X509CredentialsPtrOutput values.
// You can construct a concrete instance of `X509CredentialsPtrInput` via:
//
//	        X509CredentialsArgs{...}
//
//	or:
//
//	        nil
type X509CredentialsPtrInput interface {
	pulumi.Input

	ToX509CredentialsPtrOutput() X509CredentialsPtrOutput
	ToX509CredentialsPtrOutputWithContext(context.Context) X509CredentialsPtrOutput
}

type x509credentialsPtrType X509CredentialsArgs

func X509CredentialsPtr(v *X509CredentialsArgs) X509CredentialsPtrInput {
	return (*x509credentialsPtrType)(v)
}

func (*x509credentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**X509Credentials)(nil)).Elem()
}

func (i *x509credentialsPtrType) ToX509CredentialsPtrOutput() X509CredentialsPtrOutput {
	return i.ToX509CredentialsPtrOutputWithContext(context.Background())
}

func (i *x509credentialsPtrType) ToX509CredentialsPtrOutputWithContext(ctx context.Context) X509CredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X509CredentialsPtrOutput)
}

// The x509 certificate for authentication mode Certificate.
type X509CredentialsOutput struct{ *pulumi.OutputState }

func (X509CredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X509Credentials)(nil)).Elem()
}

func (o X509CredentialsOutput) ToX509CredentialsOutput() X509CredentialsOutput {
	return o
}

func (o X509CredentialsOutput) ToX509CredentialsOutputWithContext(ctx context.Context) X509CredentialsOutput {
	return o
}

func (o X509CredentialsOutput) ToX509CredentialsPtrOutput() X509CredentialsPtrOutput {
	return o.ToX509CredentialsPtrOutputWithContext(context.Background())
}

func (o X509CredentialsOutput) ToX509CredentialsPtrOutputWithContext(ctx context.Context) X509CredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v X509Credentials) *X509Credentials {
		return &v
	}).(X509CredentialsPtrOutput)
}

// A reference to secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx).
func (o X509CredentialsOutput) CertificateReference() pulumi.StringOutput {
	return o.ApplyT(func(v X509Credentials) string { return v.CertificateReference }).(pulumi.StringOutput)
}

type X509CredentialsPtrOutput struct{ *pulumi.OutputState }

func (X509CredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**X509Credentials)(nil)).Elem()
}

func (o X509CredentialsPtrOutput) ToX509CredentialsPtrOutput() X509CredentialsPtrOutput {
	return o
}

func (o X509CredentialsPtrOutput) ToX509CredentialsPtrOutputWithContext(ctx context.Context) X509CredentialsPtrOutput {
	return o
}

func (o X509CredentialsPtrOutput) Elem() X509CredentialsOutput {
	return o.ApplyT(func(v *X509Credentials) X509Credentials {
		if v != nil {
			return *v
		}
		var ret X509Credentials
		return ret
	}).(X509CredentialsOutput)
}

// A reference to secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx).
func (o X509CredentialsPtrOutput) CertificateReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X509Credentials) *string {
		if v == nil {
			return nil
		}
		return &v.CertificateReference
	}).(pulumi.StringPtrOutput)
}

// The x509 certificate for authentication mode Certificate.
type X509CredentialsResponse struct {
	// A reference to secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx).
	CertificateReference string `pulumi:"certificateReference"`
}

// The x509 certificate for authentication mode Certificate.
type X509CredentialsResponseOutput struct{ *pulumi.OutputState }

func (X509CredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X509CredentialsResponse)(nil)).Elem()
}

func (o X509CredentialsResponseOutput) ToX509CredentialsResponseOutput() X509CredentialsResponseOutput {
	return o
}

func (o X509CredentialsResponseOutput) ToX509CredentialsResponseOutputWithContext(ctx context.Context) X509CredentialsResponseOutput {
	return o
}

// A reference to secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx).
func (o X509CredentialsResponseOutput) CertificateReference() pulumi.StringOutput {
	return o.ApplyT(func(v X509CredentialsResponse) string { return v.CertificateReference }).(pulumi.StringOutput)
}

type X509CredentialsResponsePtrOutput struct{ *pulumi.OutputState }

func (X509CredentialsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**X509CredentialsResponse)(nil)).Elem()
}

func (o X509CredentialsResponsePtrOutput) ToX509CredentialsResponsePtrOutput() X509CredentialsResponsePtrOutput {
	return o
}

func (o X509CredentialsResponsePtrOutput) ToX509CredentialsResponsePtrOutputWithContext(ctx context.Context) X509CredentialsResponsePtrOutput {
	return o
}

func (o X509CredentialsResponsePtrOutput) Elem() X509CredentialsResponseOutput {
	return o.ApplyT(func(v *X509CredentialsResponse) X509CredentialsResponse {
		if v != nil {
			return *v
		}
		var ret X509CredentialsResponse
		return ret
	}).(X509CredentialsResponseOutput)
}

// A reference to secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx).
func (o X509CredentialsResponsePtrOutput) CertificateReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *X509CredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CertificateReference
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AssetStatusErrorResponseOutput{})
	pulumi.RegisterOutputType(AssetStatusErrorResponseArrayOutput{})
	pulumi.RegisterOutputType(AssetStatusResponseOutput{})
	pulumi.RegisterOutputType(DataPointOutput{})
	pulumi.RegisterOutputType(DataPointArrayOutput{})
	pulumi.RegisterOutputType(DataPointResponseOutput{})
	pulumi.RegisterOutputType(DataPointResponseArrayOutput{})
	pulumi.RegisterOutputType(EventOutput{})
	pulumi.RegisterOutputType(EventArrayOutput{})
	pulumi.RegisterOutputType(EventResponseOutput{})
	pulumi.RegisterOutputType(EventResponseArrayOutput{})
	pulumi.RegisterOutputType(ExtendedLocationOutput{})
	pulumi.RegisterOutputType(ExtendedLocationResponseOutput{})
	pulumi.RegisterOutputType(OwnCertificateOutput{})
	pulumi.RegisterOutputType(OwnCertificateArrayOutput{})
	pulumi.RegisterOutputType(OwnCertificateResponseOutput{})
	pulumi.RegisterOutputType(OwnCertificateResponseArrayOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(TransportAuthenticationOutput{})
	pulumi.RegisterOutputType(TransportAuthenticationPtrOutput{})
	pulumi.RegisterOutputType(TransportAuthenticationResponseOutput{})
	pulumi.RegisterOutputType(TransportAuthenticationResponsePtrOutput{})
	pulumi.RegisterOutputType(UserAuthenticationOutput{})
	pulumi.RegisterOutputType(UserAuthenticationPtrOutput{})
	pulumi.RegisterOutputType(UserAuthenticationResponseOutput{})
	pulumi.RegisterOutputType(UserAuthenticationResponsePtrOutput{})
	pulumi.RegisterOutputType(UsernamePasswordCredentialsOutput{})
	pulumi.RegisterOutputType(UsernamePasswordCredentialsPtrOutput{})
	pulumi.RegisterOutputType(UsernamePasswordCredentialsResponseOutput{})
	pulumi.RegisterOutputType(UsernamePasswordCredentialsResponsePtrOutput{})
	pulumi.RegisterOutputType(X509CredentialsOutput{})
	pulumi.RegisterOutputType(X509CredentialsPtrOutput{})
	pulumi.RegisterOutputType(X509CredentialsResponseOutput{})
	pulumi.RegisterOutputType(X509CredentialsResponsePtrOutput{})
}
