// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20231101preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An indication of how the data point should be mapped to OpenTelemetry.
type DataPointsObservabilityMode string

const (
	// No mapping to OpenTelemetry.
	DataPointsObservabilityModeNone = DataPointsObservabilityMode("none")
	// Map as counter to OpenTelemetry.
	DataPointsObservabilityModeCounter = DataPointsObservabilityMode("counter")
	// Map as gauge to OpenTelemetry.
	DataPointsObservabilityModeGauge = DataPointsObservabilityMode("gauge")
	// Map as histogram to OpenTelemetry.
	DataPointsObservabilityModeHistogram = DataPointsObservabilityMode("histogram")
	// Map as log to OpenTelemetry.
	DataPointsObservabilityModeLog = DataPointsObservabilityMode("log")
)

func (DataPointsObservabilityMode) ElementType() reflect.Type {
	return reflect.TypeOf((*DataPointsObservabilityMode)(nil)).Elem()
}

func (e DataPointsObservabilityMode) ToDataPointsObservabilityModeOutput() DataPointsObservabilityModeOutput {
	return pulumi.ToOutput(e).(DataPointsObservabilityModeOutput)
}

func (e DataPointsObservabilityMode) ToDataPointsObservabilityModeOutputWithContext(ctx context.Context) DataPointsObservabilityModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DataPointsObservabilityModeOutput)
}

func (e DataPointsObservabilityMode) ToDataPointsObservabilityModePtrOutput() DataPointsObservabilityModePtrOutput {
	return e.ToDataPointsObservabilityModePtrOutputWithContext(context.Background())
}

func (e DataPointsObservabilityMode) ToDataPointsObservabilityModePtrOutputWithContext(ctx context.Context) DataPointsObservabilityModePtrOutput {
	return DataPointsObservabilityMode(e).ToDataPointsObservabilityModeOutputWithContext(ctx).ToDataPointsObservabilityModePtrOutputWithContext(ctx)
}

func (e DataPointsObservabilityMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DataPointsObservabilityMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DataPointsObservabilityMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DataPointsObservabilityMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DataPointsObservabilityModeOutput struct{ *pulumi.OutputState }

func (DataPointsObservabilityModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataPointsObservabilityMode)(nil)).Elem()
}

func (o DataPointsObservabilityModeOutput) ToDataPointsObservabilityModeOutput() DataPointsObservabilityModeOutput {
	return o
}

func (o DataPointsObservabilityModeOutput) ToDataPointsObservabilityModeOutputWithContext(ctx context.Context) DataPointsObservabilityModeOutput {
	return o
}

func (o DataPointsObservabilityModeOutput) ToDataPointsObservabilityModePtrOutput() DataPointsObservabilityModePtrOutput {
	return o.ToDataPointsObservabilityModePtrOutputWithContext(context.Background())
}

func (o DataPointsObservabilityModeOutput) ToDataPointsObservabilityModePtrOutputWithContext(ctx context.Context) DataPointsObservabilityModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataPointsObservabilityMode) *DataPointsObservabilityMode {
		return &v
	}).(DataPointsObservabilityModePtrOutput)
}

func (o DataPointsObservabilityModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DataPointsObservabilityModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DataPointsObservabilityMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DataPointsObservabilityModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DataPointsObservabilityModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DataPointsObservabilityMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DataPointsObservabilityModePtrOutput struct{ *pulumi.OutputState }

func (DataPointsObservabilityModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataPointsObservabilityMode)(nil)).Elem()
}

func (o DataPointsObservabilityModePtrOutput) ToDataPointsObservabilityModePtrOutput() DataPointsObservabilityModePtrOutput {
	return o
}

func (o DataPointsObservabilityModePtrOutput) ToDataPointsObservabilityModePtrOutputWithContext(ctx context.Context) DataPointsObservabilityModePtrOutput {
	return o
}

func (o DataPointsObservabilityModePtrOutput) Elem() DataPointsObservabilityModeOutput {
	return o.ApplyT(func(v *DataPointsObservabilityMode) DataPointsObservabilityMode {
		if v != nil {
			return *v
		}
		var ret DataPointsObservabilityMode
		return ret
	}).(DataPointsObservabilityModeOutput)
}

func (o DataPointsObservabilityModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DataPointsObservabilityModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DataPointsObservabilityMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DataPointsObservabilityModeInput is an input type that accepts values of the DataPointsObservabilityMode enum
// A concrete instance of `DataPointsObservabilityModeInput` can be one of the following:
//
//	DataPointsObservabilityModeNone
//	DataPointsObservabilityModeCounter
//	DataPointsObservabilityModeGauge
//	DataPointsObservabilityModeHistogram
//	DataPointsObservabilityModeLog
type DataPointsObservabilityModeInput interface {
	pulumi.Input

	ToDataPointsObservabilityModeOutput() DataPointsObservabilityModeOutput
	ToDataPointsObservabilityModeOutputWithContext(context.Context) DataPointsObservabilityModeOutput
}

var dataPointsObservabilityModePtrType = reflect.TypeOf((**DataPointsObservabilityMode)(nil)).Elem()

type DataPointsObservabilityModePtrInput interface {
	pulumi.Input

	ToDataPointsObservabilityModePtrOutput() DataPointsObservabilityModePtrOutput
	ToDataPointsObservabilityModePtrOutputWithContext(context.Context) DataPointsObservabilityModePtrOutput
}

type dataPointsObservabilityModePtr string

func DataPointsObservabilityModePtr(v string) DataPointsObservabilityModePtrInput {
	return (*dataPointsObservabilityModePtr)(&v)
}

func (*dataPointsObservabilityModePtr) ElementType() reflect.Type {
	return dataPointsObservabilityModePtrType
}

func (in *dataPointsObservabilityModePtr) ToDataPointsObservabilityModePtrOutput() DataPointsObservabilityModePtrOutput {
	return pulumi.ToOutput(in).(DataPointsObservabilityModePtrOutput)
}

func (in *dataPointsObservabilityModePtr) ToDataPointsObservabilityModePtrOutputWithContext(ctx context.Context) DataPointsObservabilityModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DataPointsObservabilityModePtrOutput)
}

// An indication of how the event should be mapped to OpenTelemetry.
type EventsObservabilityMode string

const (
	// No mapping to OpenTelemetry.
	EventsObservabilityModeNone = EventsObservabilityMode("none")
	// Map as log to OpenTelemetry.
	EventsObservabilityModeLog = EventsObservabilityMode("log")
)

func (EventsObservabilityMode) ElementType() reflect.Type {
	return reflect.TypeOf((*EventsObservabilityMode)(nil)).Elem()
}

func (e EventsObservabilityMode) ToEventsObservabilityModeOutput() EventsObservabilityModeOutput {
	return pulumi.ToOutput(e).(EventsObservabilityModeOutput)
}

func (e EventsObservabilityMode) ToEventsObservabilityModeOutputWithContext(ctx context.Context) EventsObservabilityModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(EventsObservabilityModeOutput)
}

func (e EventsObservabilityMode) ToEventsObservabilityModePtrOutput() EventsObservabilityModePtrOutput {
	return e.ToEventsObservabilityModePtrOutputWithContext(context.Background())
}

func (e EventsObservabilityMode) ToEventsObservabilityModePtrOutputWithContext(ctx context.Context) EventsObservabilityModePtrOutput {
	return EventsObservabilityMode(e).ToEventsObservabilityModeOutputWithContext(ctx).ToEventsObservabilityModePtrOutputWithContext(ctx)
}

func (e EventsObservabilityMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e EventsObservabilityMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e EventsObservabilityMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e EventsObservabilityMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type EventsObservabilityModeOutput struct{ *pulumi.OutputState }

func (EventsObservabilityModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventsObservabilityMode)(nil)).Elem()
}

func (o EventsObservabilityModeOutput) ToEventsObservabilityModeOutput() EventsObservabilityModeOutput {
	return o
}

func (o EventsObservabilityModeOutput) ToEventsObservabilityModeOutputWithContext(ctx context.Context) EventsObservabilityModeOutput {
	return o
}

func (o EventsObservabilityModeOutput) ToEventsObservabilityModePtrOutput() EventsObservabilityModePtrOutput {
	return o.ToEventsObservabilityModePtrOutputWithContext(context.Background())
}

func (o EventsObservabilityModeOutput) ToEventsObservabilityModePtrOutputWithContext(ctx context.Context) EventsObservabilityModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventsObservabilityMode) *EventsObservabilityMode {
		return &v
	}).(EventsObservabilityModePtrOutput)
}

func (o EventsObservabilityModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o EventsObservabilityModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EventsObservabilityMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o EventsObservabilityModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EventsObservabilityModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EventsObservabilityMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type EventsObservabilityModePtrOutput struct{ *pulumi.OutputState }

func (EventsObservabilityModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventsObservabilityMode)(nil)).Elem()
}

func (o EventsObservabilityModePtrOutput) ToEventsObservabilityModePtrOutput() EventsObservabilityModePtrOutput {
	return o
}

func (o EventsObservabilityModePtrOutput) ToEventsObservabilityModePtrOutputWithContext(ctx context.Context) EventsObservabilityModePtrOutput {
	return o
}

func (o EventsObservabilityModePtrOutput) Elem() EventsObservabilityModeOutput {
	return o.ApplyT(func(v *EventsObservabilityMode) EventsObservabilityMode {
		if v != nil {
			return *v
		}
		var ret EventsObservabilityMode
		return ret
	}).(EventsObservabilityModeOutput)
}

func (o EventsObservabilityModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EventsObservabilityModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *EventsObservabilityMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// EventsObservabilityModeInput is an input type that accepts values of the EventsObservabilityMode enum
// A concrete instance of `EventsObservabilityModeInput` can be one of the following:
//
//	EventsObservabilityModeNone
//	EventsObservabilityModeLog
type EventsObservabilityModeInput interface {
	pulumi.Input

	ToEventsObservabilityModeOutput() EventsObservabilityModeOutput
	ToEventsObservabilityModeOutputWithContext(context.Context) EventsObservabilityModeOutput
}

var eventsObservabilityModePtrType = reflect.TypeOf((**EventsObservabilityMode)(nil)).Elem()

type EventsObservabilityModePtrInput interface {
	pulumi.Input

	ToEventsObservabilityModePtrOutput() EventsObservabilityModePtrOutput
	ToEventsObservabilityModePtrOutputWithContext(context.Context) EventsObservabilityModePtrOutput
}

type eventsObservabilityModePtr string

func EventsObservabilityModePtr(v string) EventsObservabilityModePtrInput {
	return (*eventsObservabilityModePtr)(&v)
}

func (*eventsObservabilityModePtr) ElementType() reflect.Type {
	return eventsObservabilityModePtrType
}

func (in *eventsObservabilityModePtr) ToEventsObservabilityModePtrOutput() EventsObservabilityModePtrOutput {
	return pulumi.ToOutput(in).(EventsObservabilityModePtrOutput)
}

func (in *eventsObservabilityModePtr) ToEventsObservabilityModePtrOutputWithContext(ctx context.Context) EventsObservabilityModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(EventsObservabilityModePtrOutput)
}

// Defines the mode to authenticate the user of the client at the server.
type UserAuthenticationMode string

const (
	// The user authentication mode is anonymous.
	UserAuthenticationModeAnonymous = UserAuthenticationMode("Anonymous")
	// The user authentication mode is an x509 certificate.
	UserAuthenticationModeCertificate = UserAuthenticationMode("Certificate")
	// The user authentication mode is a username and password.
	UserAuthenticationModeUsernamePassword = UserAuthenticationMode("UsernamePassword")
)

func (UserAuthenticationMode) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAuthenticationMode)(nil)).Elem()
}

func (e UserAuthenticationMode) ToUserAuthenticationModeOutput() UserAuthenticationModeOutput {
	return pulumi.ToOutput(e).(UserAuthenticationModeOutput)
}

func (e UserAuthenticationMode) ToUserAuthenticationModeOutputWithContext(ctx context.Context) UserAuthenticationModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(UserAuthenticationModeOutput)
}

func (e UserAuthenticationMode) ToUserAuthenticationModePtrOutput() UserAuthenticationModePtrOutput {
	return e.ToUserAuthenticationModePtrOutputWithContext(context.Background())
}

func (e UserAuthenticationMode) ToUserAuthenticationModePtrOutputWithContext(ctx context.Context) UserAuthenticationModePtrOutput {
	return UserAuthenticationMode(e).ToUserAuthenticationModeOutputWithContext(ctx).ToUserAuthenticationModePtrOutputWithContext(ctx)
}

func (e UserAuthenticationMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e UserAuthenticationMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e UserAuthenticationMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e UserAuthenticationMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type UserAuthenticationModeOutput struct{ *pulumi.OutputState }

func (UserAuthenticationModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAuthenticationMode)(nil)).Elem()
}

func (o UserAuthenticationModeOutput) ToUserAuthenticationModeOutput() UserAuthenticationModeOutput {
	return o
}

func (o UserAuthenticationModeOutput) ToUserAuthenticationModeOutputWithContext(ctx context.Context) UserAuthenticationModeOutput {
	return o
}

func (o UserAuthenticationModeOutput) ToUserAuthenticationModePtrOutput() UserAuthenticationModePtrOutput {
	return o.ToUserAuthenticationModePtrOutputWithContext(context.Background())
}

func (o UserAuthenticationModeOutput) ToUserAuthenticationModePtrOutputWithContext(ctx context.Context) UserAuthenticationModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserAuthenticationMode) *UserAuthenticationMode {
		return &v
	}).(UserAuthenticationModePtrOutput)
}

func (o UserAuthenticationModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o UserAuthenticationModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e UserAuthenticationMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o UserAuthenticationModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o UserAuthenticationModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e UserAuthenticationMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type UserAuthenticationModePtrOutput struct{ *pulumi.OutputState }

func (UserAuthenticationModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAuthenticationMode)(nil)).Elem()
}

func (o UserAuthenticationModePtrOutput) ToUserAuthenticationModePtrOutput() UserAuthenticationModePtrOutput {
	return o
}

func (o UserAuthenticationModePtrOutput) ToUserAuthenticationModePtrOutputWithContext(ctx context.Context) UserAuthenticationModePtrOutput {
	return o
}

func (o UserAuthenticationModePtrOutput) Elem() UserAuthenticationModeOutput {
	return o.ApplyT(func(v *UserAuthenticationMode) UserAuthenticationMode {
		if v != nil {
			return *v
		}
		var ret UserAuthenticationMode
		return ret
	}).(UserAuthenticationModeOutput)
}

func (o UserAuthenticationModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o UserAuthenticationModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *UserAuthenticationMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// UserAuthenticationModeInput is an input type that accepts values of the UserAuthenticationMode enum
// A concrete instance of `UserAuthenticationModeInput` can be one of the following:
//
//	UserAuthenticationModeAnonymous
//	UserAuthenticationModeCertificate
//	UserAuthenticationModeUsernamePassword
type UserAuthenticationModeInput interface {
	pulumi.Input

	ToUserAuthenticationModeOutput() UserAuthenticationModeOutput
	ToUserAuthenticationModeOutputWithContext(context.Context) UserAuthenticationModeOutput
}

var userAuthenticationModePtrType = reflect.TypeOf((**UserAuthenticationMode)(nil)).Elem()

type UserAuthenticationModePtrInput interface {
	pulumi.Input

	ToUserAuthenticationModePtrOutput() UserAuthenticationModePtrOutput
	ToUserAuthenticationModePtrOutputWithContext(context.Context) UserAuthenticationModePtrOutput
}

type userAuthenticationModePtr string

func UserAuthenticationModePtr(v string) UserAuthenticationModePtrInput {
	return (*userAuthenticationModePtr)(&v)
}

func (*userAuthenticationModePtr) ElementType() reflect.Type {
	return userAuthenticationModePtrType
}

func (in *userAuthenticationModePtr) ToUserAuthenticationModePtrOutput() UserAuthenticationModePtrOutput {
	return pulumi.ToOutput(in).(UserAuthenticationModePtrOutput)
}

func (in *userAuthenticationModePtr) ToUserAuthenticationModePtrOutputWithContext(ctx context.Context) UserAuthenticationModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(UserAuthenticationModePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(DataPointsObservabilityModeOutput{})
	pulumi.RegisterOutputType(DataPointsObservabilityModePtrOutput{})
	pulumi.RegisterOutputType(EventsObservabilityModeOutput{})
	pulumi.RegisterOutputType(EventsObservabilityModePtrOutput{})
	pulumi.RegisterOutputType(UserAuthenticationModeOutput{})
	pulumi.RegisterOutputType(UserAuthenticationModePtrOutput{})
}
