// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package deviceregistry

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get a Schema
// Azure REST API version: 2024-09-01-preview.
func LookupSchema(ctx *pulumi.Context, args *LookupSchemaArgs, opts ...pulumi.InvokeOption) (*LookupSchemaResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupSchemaResult
	err := ctx.Invoke("azure-native:deviceregistry:getSchema", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupSchemaArgs struct {
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Schema name parameter.
	SchemaName string `pulumi:"schemaName"`
	// Schema registry name parameter.
	SchemaRegistryName string `pulumi:"schemaRegistryName"`
}

// Schema definition.
type LookupSchemaResult struct {
	// Human-readable description of the schema.
	Description *string `pulumi:"description"`
	// Human-readable display name.
	DisplayName *string `pulumi:"displayName"`
	// Format of the schema.
	Format string `pulumi:"format"`
	// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	Id string `pulumi:"id"`
	// The name of the resource
	Name string `pulumi:"name"`
	// Provisioning state of the resource.
	ProvisioningState string `pulumi:"provisioningState"`
	// Type of the schema.
	SchemaType string `pulumi:"schemaType"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Schema tags.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
	// Globally unique, immutable, non-reusable id.
	Uuid string `pulumi:"uuid"`
}

func LookupSchemaOutput(ctx *pulumi.Context, args LookupSchemaOutputArgs, opts ...pulumi.InvokeOption) LookupSchemaResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSchemaResultOutput, error) {
			args := v.(LookupSchemaArgs)
			opts = utilities.PkgInvokeDefaultOpts(opts)
			var rv LookupSchemaResult
			secret, err := ctx.InvokePackageRaw("azure-native:deviceregistry:getSchema", args, &rv, "", opts...)
			if err != nil {
				return LookupSchemaResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupSchemaResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupSchemaResultOutput), nil
			}
			return output, nil
		}).(LookupSchemaResultOutput)
}

type LookupSchemaOutputArgs struct {
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// Schema name parameter.
	SchemaName pulumi.StringInput `pulumi:"schemaName"`
	// Schema registry name parameter.
	SchemaRegistryName pulumi.StringInput `pulumi:"schemaRegistryName"`
}

func (LookupSchemaOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSchemaArgs)(nil)).Elem()
}

// Schema definition.
type LookupSchemaResultOutput struct{ *pulumi.OutputState }

func (LookupSchemaResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSchemaResult)(nil)).Elem()
}

func (o LookupSchemaResultOutput) ToLookupSchemaResultOutput() LookupSchemaResultOutput {
	return o
}

func (o LookupSchemaResultOutput) ToLookupSchemaResultOutputWithContext(ctx context.Context) LookupSchemaResultOutput {
	return o
}

// Human-readable description of the schema.
func (o LookupSchemaResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSchemaResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Human-readable display name.
func (o LookupSchemaResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSchemaResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Format of the schema.
func (o LookupSchemaResultOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchemaResult) string { return v.Format }).(pulumi.StringOutput)
}

// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
func (o LookupSchemaResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchemaResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupSchemaResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchemaResult) string { return v.Name }).(pulumi.StringOutput)
}

// Provisioning state of the resource.
func (o LookupSchemaResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchemaResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Type of the schema.
func (o LookupSchemaResultOutput) SchemaType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchemaResult) string { return v.SchemaType }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupSchemaResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupSchemaResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Schema tags.
func (o LookupSchemaResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupSchemaResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupSchemaResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchemaResult) string { return v.Type }).(pulumi.StringOutput)
}

// Globally unique, immutable, non-reusable id.
func (o LookupSchemaResultOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchemaResult) string { return v.Uuid }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSchemaResultOutput{})
}
