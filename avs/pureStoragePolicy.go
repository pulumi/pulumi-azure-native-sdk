// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package avs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An instance describing a Pure Storage Policy Based Management policy
//
// Uses Azure REST API version 2024-09-01.
type PureStoragePolicy struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The state of the Pure Storage Policy Based Management policy provisioning
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Definition of a Pure Storage Policy Based Management policy
	StoragePolicyDefinition pulumi.StringOutput `pulumi:"storagePolicyDefinition"`
	// Azure resource ID of the Pure Storage Pool associated with the storage policy
	StoragePoolId pulumi.StringOutput `pulumi:"storagePoolId"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewPureStoragePolicy registers a new resource with the given unique name, arguments, and options.
func NewPureStoragePolicy(ctx *pulumi.Context,
	name string, args *PureStoragePolicyArgs, opts ...pulumi.ResourceOption) (*PureStoragePolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PrivateCloudName == nil {
		return nil, errors.New("invalid value for required argument 'PrivateCloudName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.StoragePolicyDefinition == nil {
		return nil, errors.New("invalid value for required argument 'StoragePolicyDefinition'")
	}
	if args.StoragePoolId == nil {
		return nil, errors.New("invalid value for required argument 'StoragePoolId'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:avs/v20240901:PureStoragePolicy"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PureStoragePolicy
	err := ctx.RegisterResource("azure-native:avs:PureStoragePolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPureStoragePolicy gets an existing PureStoragePolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPureStoragePolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PureStoragePolicyState, opts ...pulumi.ResourceOption) (*PureStoragePolicy, error) {
	var resource PureStoragePolicy
	err := ctx.ReadResource("azure-native:avs:PureStoragePolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PureStoragePolicy resources.
type pureStoragePolicyState struct {
}

type PureStoragePolicyState struct {
}

func (PureStoragePolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*pureStoragePolicyState)(nil)).Elem()
}

type pureStoragePolicyArgs struct {
	// Name of the private cloud
	PrivateCloudName string `pulumi:"privateCloudName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Definition of a Pure Storage Policy Based Management policy
	StoragePolicyDefinition string `pulumi:"storagePolicyDefinition"`
	// Name of the storage policy.
	StoragePolicyName *string `pulumi:"storagePolicyName"`
	// Azure resource ID of the Pure Storage Pool associated with the storage policy
	StoragePoolId string `pulumi:"storagePoolId"`
}

// The set of arguments for constructing a PureStoragePolicy resource.
type PureStoragePolicyArgs struct {
	// Name of the private cloud
	PrivateCloudName pulumi.StringInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Definition of a Pure Storage Policy Based Management policy
	StoragePolicyDefinition pulumi.StringInput
	// Name of the storage policy.
	StoragePolicyName pulumi.StringPtrInput
	// Azure resource ID of the Pure Storage Pool associated with the storage policy
	StoragePoolId pulumi.StringInput
}

func (PureStoragePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pureStoragePolicyArgs)(nil)).Elem()
}

type PureStoragePolicyInput interface {
	pulumi.Input

	ToPureStoragePolicyOutput() PureStoragePolicyOutput
	ToPureStoragePolicyOutputWithContext(ctx context.Context) PureStoragePolicyOutput
}

func (*PureStoragePolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**PureStoragePolicy)(nil)).Elem()
}

func (i *PureStoragePolicy) ToPureStoragePolicyOutput() PureStoragePolicyOutput {
	return i.ToPureStoragePolicyOutputWithContext(context.Background())
}

func (i *PureStoragePolicy) ToPureStoragePolicyOutputWithContext(ctx context.Context) PureStoragePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PureStoragePolicyOutput)
}

type PureStoragePolicyOutput struct{ *pulumi.OutputState }

func (PureStoragePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PureStoragePolicy)(nil)).Elem()
}

func (o PureStoragePolicyOutput) ToPureStoragePolicyOutput() PureStoragePolicyOutput {
	return o
}

func (o PureStoragePolicyOutput) ToPureStoragePolicyOutputWithContext(ctx context.Context) PureStoragePolicyOutput {
	return o
}

// The Azure API version of the resource.
func (o PureStoragePolicyOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *PureStoragePolicy) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// The name of the resource
func (o PureStoragePolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PureStoragePolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The state of the Pure Storage Policy Based Management policy provisioning
func (o PureStoragePolicyOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *PureStoragePolicy) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Definition of a Pure Storage Policy Based Management policy
func (o PureStoragePolicyOutput) StoragePolicyDefinition() pulumi.StringOutput {
	return o.ApplyT(func(v *PureStoragePolicy) pulumi.StringOutput { return v.StoragePolicyDefinition }).(pulumi.StringOutput)
}

// Azure resource ID of the Pure Storage Pool associated with the storage policy
func (o PureStoragePolicyOutput) StoragePoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *PureStoragePolicy) pulumi.StringOutput { return v.StoragePoolId }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o PureStoragePolicyOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *PureStoragePolicy) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o PureStoragePolicyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *PureStoragePolicy) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(PureStoragePolicyOutput{})
}
