// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230901

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get a PlacementPolicy
func LookupPlacementPolicy(ctx *pulumi.Context, args *LookupPlacementPolicyArgs, opts ...pulumi.InvokeOption) (*LookupPlacementPolicyResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupPlacementPolicyResult
	err := ctx.Invoke("azure-native:avs/v20230901:getPlacementPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupPlacementPolicyArgs struct {
	// Name of the cluster
	ClusterName string `pulumi:"clusterName"`
	// Name of the placement policy.
	PlacementPolicyName string `pulumi:"placementPolicyName"`
	// Name of the private cloud
	PrivateCloudName string `pulumi:"privateCloudName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A vSphere Distributed Resource Scheduler (DRS) placement policy
type LookupPlacementPolicyResult struct {
	// Display name of the placement policy
	DisplayName *string `pulumi:"displayName"`
	// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	Id string `pulumi:"id"`
	// The name of the resource
	Name string `pulumi:"name"`
	// The provisioning state
	ProvisioningState string `pulumi:"provisioningState"`
	// Whether the placement policy is enabled or disabled
	State *string `pulumi:"state"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

func LookupPlacementPolicyOutput(ctx *pulumi.Context, args LookupPlacementPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupPlacementPolicyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPlacementPolicyResult, error) {
			args := v.(LookupPlacementPolicyArgs)
			r, err := LookupPlacementPolicy(ctx, &args, opts...)
			var s LookupPlacementPolicyResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupPlacementPolicyResultOutput)
}

type LookupPlacementPolicyOutputArgs struct {
	// Name of the cluster
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	// Name of the placement policy.
	PlacementPolicyName pulumi.StringInput `pulumi:"placementPolicyName"`
	// Name of the private cloud
	PrivateCloudName pulumi.StringInput `pulumi:"privateCloudName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupPlacementPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPlacementPolicyArgs)(nil)).Elem()
}

// A vSphere Distributed Resource Scheduler (DRS) placement policy
type LookupPlacementPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupPlacementPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPlacementPolicyResult)(nil)).Elem()
}

func (o LookupPlacementPolicyResultOutput) ToLookupPlacementPolicyResultOutput() LookupPlacementPolicyResultOutput {
	return o
}

func (o LookupPlacementPolicyResultOutput) ToLookupPlacementPolicyResultOutputWithContext(ctx context.Context) LookupPlacementPolicyResultOutput {
	return o
}

// Display name of the placement policy
func (o LookupPlacementPolicyResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPlacementPolicyResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
func (o LookupPlacementPolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPlacementPolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupPlacementPolicyResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPlacementPolicyResult) string { return v.Name }).(pulumi.StringOutput)
}

// The provisioning state
func (o LookupPlacementPolicyResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPlacementPolicyResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Whether the placement policy is enabled or disabled
func (o LookupPlacementPolicyResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPlacementPolicyResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupPlacementPolicyResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupPlacementPolicyResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupPlacementPolicyResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPlacementPolicyResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPlacementPolicyResultOutput{})
}
