// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230901

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An iSCSI path resource
type IscsiPath struct {
	pulumi.CustomResourceState

	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// CIDR Block for iSCSI path.
	NetworkBlock pulumi.StringOutput `pulumi:"networkBlock"`
	// The state of the iSCSI path provisioning
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewIscsiPath registers a new resource with the given unique name, arguments, and options.
func NewIscsiPath(ctx *pulumi.Context,
	name string, args *IscsiPathArgs, opts ...pulumi.ResourceOption) (*IscsiPath, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkBlock == nil {
		return nil, errors.New("invalid value for required argument 'NetworkBlock'")
	}
	if args.PrivateCloudName == nil {
		return nil, errors.New("invalid value for required argument 'PrivateCloudName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:avs:IscsiPath"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource IscsiPath
	err := ctx.RegisterResource("azure-native:avs/v20230901:IscsiPath", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIscsiPath gets an existing IscsiPath resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIscsiPath(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IscsiPathState, opts ...pulumi.ResourceOption) (*IscsiPath, error) {
	var resource IscsiPath
	err := ctx.ReadResource("azure-native:avs/v20230901:IscsiPath", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IscsiPath resources.
type iscsiPathState struct {
}

type IscsiPathState struct {
}

func (IscsiPathState) ElementType() reflect.Type {
	return reflect.TypeOf((*iscsiPathState)(nil)).Elem()
}

type iscsiPathArgs struct {
	// CIDR Block for iSCSI path.
	NetworkBlock string `pulumi:"networkBlock"`
	// Name of the private cloud
	PrivateCloudName string `pulumi:"privateCloudName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a IscsiPath resource.
type IscsiPathArgs struct {
	// CIDR Block for iSCSI path.
	NetworkBlock pulumi.StringInput
	// Name of the private cloud
	PrivateCloudName pulumi.StringInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
}

func (IscsiPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iscsiPathArgs)(nil)).Elem()
}

type IscsiPathInput interface {
	pulumi.Input

	ToIscsiPathOutput() IscsiPathOutput
	ToIscsiPathOutputWithContext(ctx context.Context) IscsiPathOutput
}

func (*IscsiPath) ElementType() reflect.Type {
	return reflect.TypeOf((**IscsiPath)(nil)).Elem()
}

func (i *IscsiPath) ToIscsiPathOutput() IscsiPathOutput {
	return i.ToIscsiPathOutputWithContext(context.Background())
}

func (i *IscsiPath) ToIscsiPathOutputWithContext(ctx context.Context) IscsiPathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IscsiPathOutput)
}

type IscsiPathOutput struct{ *pulumi.OutputState }

func (IscsiPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IscsiPath)(nil)).Elem()
}

func (o IscsiPathOutput) ToIscsiPathOutput() IscsiPathOutput {
	return o
}

func (o IscsiPathOutput) ToIscsiPathOutputWithContext(ctx context.Context) IscsiPathOutput {
	return o
}

// The name of the resource
func (o IscsiPathOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IscsiPath) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// CIDR Block for iSCSI path.
func (o IscsiPathOutput) NetworkBlock() pulumi.StringOutput {
	return o.ApplyT(func(v *IscsiPath) pulumi.StringOutput { return v.NetworkBlock }).(pulumi.StringOutput)
}

// The state of the iSCSI path provisioning
func (o IscsiPathOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *IscsiPath) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o IscsiPathOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *IscsiPath) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o IscsiPathOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *IscsiPath) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(IscsiPathOutput{})
}
