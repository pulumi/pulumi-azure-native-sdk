// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230901

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Artifact store properties.
type ArtifactStore struct {
	pulumi.CustomResourceState

	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// ArtifactStores properties.
	Properties ArtifactStorePropertiesFormatResponseOutput `pulumi:"properties"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewArtifactStore registers a new resource with the given unique name, arguments, and options.
func NewArtifactStore(ctx *pulumi.Context,
	name string, args *ArtifactStoreArgs, opts ...pulumi.ResourceOption) (*ArtifactStore, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PublisherName == nil {
		return nil, errors.New("invalid value for required argument 'PublisherName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:hybridnetwork:ArtifactStore"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ArtifactStore
	err := ctx.RegisterResource("azure-native:hybridnetwork/v20230901:ArtifactStore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetArtifactStore gets an existing ArtifactStore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetArtifactStore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ArtifactStoreState, opts ...pulumi.ResourceOption) (*ArtifactStore, error) {
	var resource ArtifactStore
	err := ctx.ReadResource("azure-native:hybridnetwork/v20230901:ArtifactStore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ArtifactStore resources.
type artifactStoreState struct {
}

type ArtifactStoreState struct {
}

func (ArtifactStoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*artifactStoreState)(nil)).Elem()
}

type artifactStoreArgs struct {
	// The name of the artifact store.
	ArtifactStoreName *string `pulumi:"artifactStoreName"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// ArtifactStores properties.
	Properties *ArtifactStorePropertiesFormat `pulumi:"properties"`
	// The name of the publisher.
	PublisherName string `pulumi:"publisherName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ArtifactStore resource.
type ArtifactStoreArgs struct {
	// The name of the artifact store.
	ArtifactStoreName pulumi.StringPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// ArtifactStores properties.
	Properties ArtifactStorePropertiesFormatPtrInput
	// The name of the publisher.
	PublisherName pulumi.StringInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (ArtifactStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*artifactStoreArgs)(nil)).Elem()
}

type ArtifactStoreInput interface {
	pulumi.Input

	ToArtifactStoreOutput() ArtifactStoreOutput
	ToArtifactStoreOutputWithContext(ctx context.Context) ArtifactStoreOutput
}

func (*ArtifactStore) ElementType() reflect.Type {
	return reflect.TypeOf((**ArtifactStore)(nil)).Elem()
}

func (i *ArtifactStore) ToArtifactStoreOutput() ArtifactStoreOutput {
	return i.ToArtifactStoreOutputWithContext(context.Background())
}

func (i *ArtifactStore) ToArtifactStoreOutputWithContext(ctx context.Context) ArtifactStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactStoreOutput)
}

type ArtifactStoreOutput struct{ *pulumi.OutputState }

func (ArtifactStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArtifactStore)(nil)).Elem()
}

func (o ArtifactStoreOutput) ToArtifactStoreOutput() ArtifactStoreOutput {
	return o
}

func (o ArtifactStoreOutput) ToArtifactStoreOutputWithContext(ctx context.Context) ArtifactStoreOutput {
	return o
}

// The geo-location where the resource lives
func (o ArtifactStoreOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ArtifactStore) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o ArtifactStoreOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ArtifactStore) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// ArtifactStores properties.
func (o ArtifactStoreOutput) Properties() ArtifactStorePropertiesFormatResponseOutput {
	return o.ApplyT(func(v *ArtifactStore) ArtifactStorePropertiesFormatResponseOutput { return v.Properties }).(ArtifactStorePropertiesFormatResponseOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o ArtifactStoreOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *ArtifactStore) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o ArtifactStoreOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ArtifactStore) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o ArtifactStoreOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ArtifactStore) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ArtifactStoreOutput{})
}
