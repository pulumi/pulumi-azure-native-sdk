// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package hybridnetwork

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// List credential for publishing artifacts defined in artifact manifest.
// Azure REST API version: 2023-09-01.
func ListArtifactManifestCredential(ctx *pulumi.Context, args *ListArtifactManifestCredentialArgs, opts ...pulumi.InvokeOption) (*ListArtifactManifestCredentialResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv ListArtifactManifestCredentialResult
	err := ctx.Invoke("azure-native:hybridnetwork:listArtifactManifestCredential", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type ListArtifactManifestCredentialArgs struct {
	// The name of the artifact manifest.
	ArtifactManifestName string `pulumi:"artifactManifestName"`
	// The name of the artifact store.
	ArtifactStoreName string `pulumi:"artifactStoreName"`
	// The name of the publisher.
	PublisherName string `pulumi:"publisherName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The artifact manifest credential definition.
type ListArtifactManifestCredentialResult struct {
	// The credential type.
	CredentialType string `pulumi:"credentialType"`
}

func ListArtifactManifestCredentialOutput(ctx *pulumi.Context, args ListArtifactManifestCredentialOutputArgs, opts ...pulumi.InvokeOption) ListArtifactManifestCredentialResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ListArtifactManifestCredentialResult, error) {
			args := v.(ListArtifactManifestCredentialArgs)
			r, err := ListArtifactManifestCredential(ctx, &args, opts...)
			var s ListArtifactManifestCredentialResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(ListArtifactManifestCredentialResultOutput)
}

type ListArtifactManifestCredentialOutputArgs struct {
	// The name of the artifact manifest.
	ArtifactManifestName pulumi.StringInput `pulumi:"artifactManifestName"`
	// The name of the artifact store.
	ArtifactStoreName pulumi.StringInput `pulumi:"artifactStoreName"`
	// The name of the publisher.
	PublisherName pulumi.StringInput `pulumi:"publisherName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (ListArtifactManifestCredentialOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListArtifactManifestCredentialArgs)(nil)).Elem()
}

// The artifact manifest credential definition.
type ListArtifactManifestCredentialResultOutput struct{ *pulumi.OutputState }

func (ListArtifactManifestCredentialResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListArtifactManifestCredentialResult)(nil)).Elem()
}

func (o ListArtifactManifestCredentialResultOutput) ToListArtifactManifestCredentialResultOutput() ListArtifactManifestCredentialResultOutput {
	return o
}

func (o ListArtifactManifestCredentialResultOutput) ToListArtifactManifestCredentialResultOutputWithContext(ctx context.Context) ListArtifactManifestCredentialResultOutput {
	return o
}

// The credential type.
func (o ListArtifactManifestCredentialResultOutput) CredentialType() pulumi.StringOutput {
	return o.ApplyT(func(v ListArtifactManifestCredentialResult) string { return v.CredentialType }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ListArtifactManifestCredentialResultOutput{})
}
