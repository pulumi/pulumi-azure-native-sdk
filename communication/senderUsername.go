// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package communication

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// A class representing a SenderUsername resource.
// Azure REST API version: 2023-03-31.
//
// Other available API versions: 2023-04-01-preview, 2023-06-01-preview.
type SenderUsername struct {
	pulumi.CustomResourceState

	// The location where the SenderUsername resource data is stored at rest.
	DataLocation pulumi.StringOutput `pulumi:"dataLocation"`
	// The display name for the senderUsername.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Provisioning state of the resource. Unknown is the default state for Communication Services.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
	// A sender senderUsername to be used when sending emails.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewSenderUsername registers a new resource with the given unique name, arguments, and options.
func NewSenderUsername(ctx *pulumi.Context,
	name string, args *SenderUsernameArgs, opts ...pulumi.ResourceOption) (*SenderUsername, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	if args.EmailServiceName == nil {
		return nil, errors.New("invalid value for required argument 'EmailServiceName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:communication/v20230301preview:SenderUsername"),
		},
		{
			Type: pulumi.String("azure-native:communication/v20230331:SenderUsername"),
		},
		{
			Type: pulumi.String("azure-native:communication/v20230401preview:SenderUsername"),
		},
		{
			Type: pulumi.String("azure-native:communication/v20230601preview:SenderUsername"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource SenderUsername
	err := ctx.RegisterResource("azure-native:communication:SenderUsername", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSenderUsername gets an existing SenderUsername resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSenderUsername(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SenderUsernameState, opts ...pulumi.ResourceOption) (*SenderUsername, error) {
	var resource SenderUsername
	err := ctx.ReadResource("azure-native:communication:SenderUsername", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SenderUsername resources.
type senderUsernameState struct {
}

type SenderUsernameState struct {
}

func (SenderUsernameState) ElementType() reflect.Type {
	return reflect.TypeOf((*senderUsernameState)(nil)).Elem()
}

type senderUsernameArgs struct {
	// The display name for the senderUsername.
	DisplayName *string `pulumi:"displayName"`
	// The name of the Domains resource.
	DomainName string `pulumi:"domainName"`
	// The name of the EmailService resource.
	EmailServiceName string `pulumi:"emailServiceName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The valid sender Username.
	SenderUsername *string `pulumi:"senderUsername"`
	// A sender senderUsername to be used when sending emails.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a SenderUsername resource.
type SenderUsernameArgs struct {
	// The display name for the senderUsername.
	DisplayName pulumi.StringPtrInput
	// The name of the Domains resource.
	DomainName pulumi.StringInput
	// The name of the EmailService resource.
	EmailServiceName pulumi.StringInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The valid sender Username.
	SenderUsername pulumi.StringPtrInput
	// A sender senderUsername to be used when sending emails.
	Username pulumi.StringInput
}

func (SenderUsernameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*senderUsernameArgs)(nil)).Elem()
}

type SenderUsernameInput interface {
	pulumi.Input

	ToSenderUsernameOutput() SenderUsernameOutput
	ToSenderUsernameOutputWithContext(ctx context.Context) SenderUsernameOutput
}

func (*SenderUsername) ElementType() reflect.Type {
	return reflect.TypeOf((**SenderUsername)(nil)).Elem()
}

func (i *SenderUsername) ToSenderUsernameOutput() SenderUsernameOutput {
	return i.ToSenderUsernameOutputWithContext(context.Background())
}

func (i *SenderUsername) ToSenderUsernameOutputWithContext(ctx context.Context) SenderUsernameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SenderUsernameOutput)
}

func (i *SenderUsername) ToOutput(ctx context.Context) pulumix.Output[*SenderUsername] {
	return pulumix.Output[*SenderUsername]{
		OutputState: i.ToSenderUsernameOutputWithContext(ctx).OutputState,
	}
}

type SenderUsernameOutput struct{ *pulumi.OutputState }

func (SenderUsernameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SenderUsername)(nil)).Elem()
}

func (o SenderUsernameOutput) ToSenderUsernameOutput() SenderUsernameOutput {
	return o
}

func (o SenderUsernameOutput) ToSenderUsernameOutputWithContext(ctx context.Context) SenderUsernameOutput {
	return o
}

func (o SenderUsernameOutput) ToOutput(ctx context.Context) pulumix.Output[*SenderUsername] {
	return pulumix.Output[*SenderUsername]{
		OutputState: o.OutputState,
	}
}

// The location where the SenderUsername resource data is stored at rest.
func (o SenderUsernameOutput) DataLocation() pulumi.StringOutput {
	return o.ApplyT(func(v *SenderUsername) pulumi.StringOutput { return v.DataLocation }).(pulumi.StringOutput)
}

// The display name for the senderUsername.
func (o SenderUsernameOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SenderUsername) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The name of the resource
func (o SenderUsernameOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SenderUsername) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Provisioning state of the resource. Unknown is the default state for Communication Services.
func (o SenderUsernameOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *SenderUsername) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o SenderUsernameOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *SenderUsername) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o SenderUsernameOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SenderUsername) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// A sender senderUsername to be used when sending emails.
func (o SenderUsernameOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *SenderUsername) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(SenderUsernameOutput{})
}
