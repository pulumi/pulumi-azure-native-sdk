// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20231101preview

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Test Base Package resource.
type Package struct {
	pulumi.CustomResourceState

	// Application name
	ApplicationName pulumi.StringOutput `pulumi:"applicationName"`
	// The file path of the package.
	BlobPath pulumi.StringPtrOutput `pulumi:"blobPath"`
	// The id of draft package. Used to create or update this package from a draft package.
	DraftPackageId pulumi.StringPtrOutput `pulumi:"draftPackageId"`
	// The list of first party applications to test along with user application.
	FirstPartyApps FirstPartyAppDefinitionResponseArrayOutput `pulumi:"firstPartyApps"`
	// The flighting ring for feature update.
	FlightingRing pulumi.StringPtrOutput `pulumi:"flightingRing"`
	// The list of gallery apps to test along with user application.
	GalleryApps GalleryAppDefinitionResponseArrayOutput `pulumi:"galleryApps"`
	// Specifies the baseline os and target os for inplace upgrade.
	InplaceUpgradeOSPair InplaceUpgradeOSInfoResponsePtrOutput `pulumi:"inplaceUpgradeOSPair"`
	// The metadata of Intune enrollment.
	IntuneEnrollmentMetadata IntuneEnrollmentMetadataResponsePtrOutput `pulumi:"intuneEnrollmentMetadata"`
	// Flag showing that whether the package is enabled. It doesn't schedule test for package which is not enabled.
	IsEnabled pulumi.BoolOutput `pulumi:"isEnabled"`
	// The UTC timestamp when the package was last modified.
	LastModifiedTime pulumi.StringOutput `pulumi:"lastModifiedTime"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The status of the package.
	PackageStatus pulumi.StringOutput `pulumi:"packageStatus"`
	// The provisioning state of the resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Specifies the target OSs of specific OS Update types.
	TargetOSList TargetOSInfoResponseArrayOutput `pulumi:"targetOSList"`
	// OOB, functional or flow driven. Mapped to the data in 'tests' property.
	TestTypes pulumi.StringArrayOutput `pulumi:"testTypes"`
	// The detailed test information.
	Tests TestResponseArrayOutput `pulumi:"tests"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
	// The validation results. There's validation on package when it's created or updated.
	ValidationResults PackageValidationResultResponseArrayOutput `pulumi:"validationResults"`
	// Application version
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewPackage registers a new resource with the given unique name, arguments, and options.
func NewPackage(ctx *pulumi.Context,
	name string, args *PackageArgs, opts ...pulumi.ResourceOption) (*Package, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationName == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.TestBaseAccountName == nil {
		return nil, errors.New("invalid value for required argument 'TestBaseAccountName'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:testbase:Package"),
		},
		{
			Type: pulumi.String("azure-native:testbase/v20201216preview:Package"),
		},
		{
			Type: pulumi.String("azure-native:testbase/v20220401preview:Package"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Package
	err := ctx.RegisterResource("azure-native:testbase/v20231101preview:Package", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPackage gets an existing Package resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPackage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PackageState, opts ...pulumi.ResourceOption) (*Package, error) {
	var resource Package
	err := ctx.ReadResource("azure-native:testbase/v20231101preview:Package", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Package resources.
type packageState struct {
}

type PackageState struct {
}

func (PackageState) ElementType() reflect.Type {
	return reflect.TypeOf((*packageState)(nil)).Elem()
}

type packageArgs struct {
	// Application name
	ApplicationName string `pulumi:"applicationName"`
	// The file path of the package.
	BlobPath *string `pulumi:"blobPath"`
	// The id of draft package. Used to create or update this package from a draft package.
	DraftPackageId *string `pulumi:"draftPackageId"`
	// The list of first party applications to test along with user application.
	FirstPartyApps []FirstPartyAppDefinition `pulumi:"firstPartyApps"`
	// The flighting ring for feature update.
	FlightingRing *string `pulumi:"flightingRing"`
	// Specifies the baseline os and target os for inplace upgrade.
	InplaceUpgradeOSPair *InplaceUpgradeOSInfo `pulumi:"inplaceUpgradeOSPair"`
	// The metadata of Intune enrollment.
	IntuneEnrollmentMetadata *IntuneEnrollmentMetadata `pulumi:"intuneEnrollmentMetadata"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The resource name of the Test Base Package.
	PackageName *string `pulumi:"packageName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the target OSs of specific OS Update types.
	TargetOSList []TargetOSInfo `pulumi:"targetOSList"`
	// The resource name of the Test Base Account.
	TestBaseAccountName string `pulumi:"testBaseAccountName"`
	// The detailed test information.
	Tests []Test `pulumi:"tests"`
	// Application version
	Version string `pulumi:"version"`
}

// The set of arguments for constructing a Package resource.
type PackageArgs struct {
	// Application name
	ApplicationName pulumi.StringInput
	// The file path of the package.
	BlobPath pulumi.StringPtrInput
	// The id of draft package. Used to create or update this package from a draft package.
	DraftPackageId pulumi.StringPtrInput
	// The list of first party applications to test along with user application.
	FirstPartyApps FirstPartyAppDefinitionArrayInput
	// The flighting ring for feature update.
	FlightingRing pulumi.StringPtrInput
	// Specifies the baseline os and target os for inplace upgrade.
	InplaceUpgradeOSPair InplaceUpgradeOSInfoPtrInput
	// The metadata of Intune enrollment.
	IntuneEnrollmentMetadata IntuneEnrollmentMetadataPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The resource name of the Test Base Package.
	PackageName pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// Specifies the target OSs of specific OS Update types.
	TargetOSList TargetOSInfoArrayInput
	// The resource name of the Test Base Account.
	TestBaseAccountName pulumi.StringInput
	// The detailed test information.
	Tests TestArrayInput
	// Application version
	Version pulumi.StringInput
}

func (PackageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*packageArgs)(nil)).Elem()
}

type PackageInput interface {
	pulumi.Input

	ToPackageOutput() PackageOutput
	ToPackageOutputWithContext(ctx context.Context) PackageOutput
}

func (*Package) ElementType() reflect.Type {
	return reflect.TypeOf((**Package)(nil)).Elem()
}

func (i *Package) ToPackageOutput() PackageOutput {
	return i.ToPackageOutputWithContext(context.Background())
}

func (i *Package) ToPackageOutputWithContext(ctx context.Context) PackageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageOutput)
}

type PackageOutput struct{ *pulumi.OutputState }

func (PackageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Package)(nil)).Elem()
}

func (o PackageOutput) ToPackageOutput() PackageOutput {
	return o
}

func (o PackageOutput) ToPackageOutputWithContext(ctx context.Context) PackageOutput {
	return o
}

// Application name
func (o PackageOutput) ApplicationName() pulumi.StringOutput {
	return o.ApplyT(func(v *Package) pulumi.StringOutput { return v.ApplicationName }).(pulumi.StringOutput)
}

// The file path of the package.
func (o PackageOutput) BlobPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Package) pulumi.StringPtrOutput { return v.BlobPath }).(pulumi.StringPtrOutput)
}

// The id of draft package. Used to create or update this package from a draft package.
func (o PackageOutput) DraftPackageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Package) pulumi.StringPtrOutput { return v.DraftPackageId }).(pulumi.StringPtrOutput)
}

// The list of first party applications to test along with user application.
func (o PackageOutput) FirstPartyApps() FirstPartyAppDefinitionResponseArrayOutput {
	return o.ApplyT(func(v *Package) FirstPartyAppDefinitionResponseArrayOutput { return v.FirstPartyApps }).(FirstPartyAppDefinitionResponseArrayOutput)
}

// The flighting ring for feature update.
func (o PackageOutput) FlightingRing() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Package) pulumi.StringPtrOutput { return v.FlightingRing }).(pulumi.StringPtrOutput)
}

// The list of gallery apps to test along with user application.
func (o PackageOutput) GalleryApps() GalleryAppDefinitionResponseArrayOutput {
	return o.ApplyT(func(v *Package) GalleryAppDefinitionResponseArrayOutput { return v.GalleryApps }).(GalleryAppDefinitionResponseArrayOutput)
}

// Specifies the baseline os and target os for inplace upgrade.
func (o PackageOutput) InplaceUpgradeOSPair() InplaceUpgradeOSInfoResponsePtrOutput {
	return o.ApplyT(func(v *Package) InplaceUpgradeOSInfoResponsePtrOutput { return v.InplaceUpgradeOSPair }).(InplaceUpgradeOSInfoResponsePtrOutput)
}

// The metadata of Intune enrollment.
func (o PackageOutput) IntuneEnrollmentMetadata() IntuneEnrollmentMetadataResponsePtrOutput {
	return o.ApplyT(func(v *Package) IntuneEnrollmentMetadataResponsePtrOutput { return v.IntuneEnrollmentMetadata }).(IntuneEnrollmentMetadataResponsePtrOutput)
}

// Flag showing that whether the package is enabled. It doesn't schedule test for package which is not enabled.
func (o PackageOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Package) pulumi.BoolOutput { return v.IsEnabled }).(pulumi.BoolOutput)
}

// The UTC timestamp when the package was last modified.
func (o PackageOutput) LastModifiedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Package) pulumi.StringOutput { return v.LastModifiedTime }).(pulumi.StringOutput)
}

// The geo-location where the resource lives
func (o PackageOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Package) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o PackageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Package) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The status of the package.
func (o PackageOutput) PackageStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Package) pulumi.StringOutput { return v.PackageStatus }).(pulumi.StringOutput)
}

// The provisioning state of the resource.
func (o PackageOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *Package) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o PackageOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *Package) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o PackageOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Package) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Specifies the target OSs of specific OS Update types.
func (o PackageOutput) TargetOSList() TargetOSInfoResponseArrayOutput {
	return o.ApplyT(func(v *Package) TargetOSInfoResponseArrayOutput { return v.TargetOSList }).(TargetOSInfoResponseArrayOutput)
}

// OOB, functional or flow driven. Mapped to the data in 'tests' property.
func (o PackageOutput) TestTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Package) pulumi.StringArrayOutput { return v.TestTypes }).(pulumi.StringArrayOutput)
}

// The detailed test information.
func (o PackageOutput) Tests() TestResponseArrayOutput {
	return o.ApplyT(func(v *Package) TestResponseArrayOutput { return v.Tests }).(TestResponseArrayOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o PackageOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Package) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The validation results. There's validation on package when it's created or updated.
func (o PackageOutput) ValidationResults() PackageValidationResultResponseArrayOutput {
	return o.ApplyT(func(v *Package) PackageValidationResultResponseArrayOutput { return v.ValidationResults }).(PackageValidationResultResponseArrayOutput)
}

// Application version
func (o PackageOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Package) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(PackageOutput{})
}
