// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20231101preview

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Test Base Draft Package resource.
type DraftPackage struct {
	pulumi.CustomResourceState

	// The name of the app file.
	AppFileName pulumi.StringPtrOutput `pulumi:"appFileName"`
	// Application name
	ApplicationName pulumi.StringPtrOutput `pulumi:"applicationName"`
	// Comments added by user.
	Comments pulumi.StringPtrOutput `pulumi:"comments"`
	// The relative path of the folder hosting package files.
	DraftPackagePath pulumi.StringOutput `pulumi:"draftPackagePath"`
	// Specifies whether this draft package is used to edit a package.
	EditPackage pulumi.BoolPtrOutput `pulumi:"editPackage"`
	// The executable launch command for script auto-fill. Will be used to run the application.
	ExecutableLaunchCommand pulumi.StringPtrOutput `pulumi:"executableLaunchCommand"`
	// The list of first party applications to test along with user application.
	FirstPartyApps FirstPartyAppDefinitionResponseArrayOutput `pulumi:"firstPartyApps"`
	// The flighting ring for feature update.
	FlightingRing pulumi.StringPtrOutput `pulumi:"flightingRing"`
	// The list of gallery apps to test along with user application.
	GalleryApps GalleryAppDefinitionResponseArrayOutput `pulumi:"galleryApps"`
	// The highlight files in the package.
	HighlightedFiles HighlightedFileResponseArrayOutput `pulumi:"highlightedFiles"`
	// Specifies the baseline os and target os for inplace upgrade.
	InplaceUpgradeOSPair InplaceUpgradeOSInfoResponsePtrOutput `pulumi:"inplaceUpgradeOSPair"`
	// The metadata of Intune enrollment.
	IntuneEnrollmentMetadata IntuneEnrollmentMetadataResponsePtrOutput `pulumi:"intuneEnrollmentMetadata"`
	// Metadata used to generate draft package folder and scripts.
	IntuneMetadata DraftPackageIntuneAppMetadataResponsePtrOutput `pulumi:"intuneMetadata"`
	// The UTC timestamp when the package was last modified.
	LastModifiedTime pulumi.StringOutput `pulumi:"lastModifiedTime"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the package id from which the draft package copied.
	PackageId pulumi.StringPtrOutput `pulumi:"packageId"`
	// Tags of the package to be created.
	PackageTags pulumi.StringMapOutput `pulumi:"packageTags"`
	// The process name for script auto-fill. Will be used to identify the application process.
	ProcessName pulumi.StringPtrOutput `pulumi:"processName"`
	// The provisioning state of the resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The source type.
	SourceType pulumi.StringPtrOutput `pulumi:"sourceType"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Tab state.
	TabState TabStateResponsePtrOutput `pulumi:"tabState"`
	// Specifies the target OSs of specific OS Update types.
	TargetOSList TargetOSInfoResponseArrayOutput `pulumi:"targetOSList"`
	// OOB, functional or flow driven. Mapped to the data in 'tests' property.
	TestTypes pulumi.StringArrayOutput `pulumi:"testTypes"`
	// The detailed test information.
	Tests TestResponseArrayOutput `pulumi:"tests"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
	// Indicates whether user choose to enable script auto-fill.
	UseAutofill pulumi.BoolPtrOutput `pulumi:"useAutofill"`
	// Specifies whether a sample package should be used instead of the one uploaded by the user.
	UseSample pulumi.BoolPtrOutput `pulumi:"useSample"`
	// Application version
	Version pulumi.StringPtrOutput `pulumi:"version"`
	// The relative path for a temporarily folder for package creation work.
	WorkingPath pulumi.StringOutput `pulumi:"workingPath"`
}

// NewDraftPackage registers a new resource with the given unique name, arguments, and options.
func NewDraftPackage(ctx *pulumi.Context,
	name string, args *DraftPackageArgs, opts ...pulumi.ResourceOption) (*DraftPackage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.TestBaseAccountName == nil {
		return nil, errors.New("invalid value for required argument 'TestBaseAccountName'")
	}
	if args.EditPackage == nil {
		args.EditPackage = pulumi.BoolPtr(false)
	}
	if args.SourceType == nil {
		args.SourceType = pulumi.StringPtr("Native")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:testbase:DraftPackage"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource DraftPackage
	err := ctx.RegisterResource("azure-native:testbase/v20231101preview:DraftPackage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDraftPackage gets an existing DraftPackage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDraftPackage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DraftPackageState, opts ...pulumi.ResourceOption) (*DraftPackage, error) {
	var resource DraftPackage
	err := ctx.ReadResource("azure-native:testbase/v20231101preview:DraftPackage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DraftPackage resources.
type draftPackageState struct {
}

type DraftPackageState struct {
}

func (DraftPackageState) ElementType() reflect.Type {
	return reflect.TypeOf((*draftPackageState)(nil)).Elem()
}

type draftPackageArgs struct {
	// The name of the app file.
	AppFileName *string `pulumi:"appFileName"`
	// Application name
	ApplicationName *string `pulumi:"applicationName"`
	// Comments added by user.
	Comments *string `pulumi:"comments"`
	// The resource name of the Test Base Draft Package.
	DraftPackageName *string `pulumi:"draftPackageName"`
	// Specifies whether this draft package is used to edit a package.
	EditPackage *bool `pulumi:"editPackage"`
	// The executable launch command for script auto-fill. Will be used to run the application.
	ExecutableLaunchCommand *string `pulumi:"executableLaunchCommand"`
	// The list of first party applications to test along with user application.
	FirstPartyApps []FirstPartyAppDefinition `pulumi:"firstPartyApps"`
	// The flighting ring for feature update.
	FlightingRing *string `pulumi:"flightingRing"`
	// The list of gallery apps to test along with user application.
	GalleryApps []GalleryAppDefinition `pulumi:"galleryApps"`
	// The highlight files in the package.
	HighlightedFiles []HighlightedFile `pulumi:"highlightedFiles"`
	// Specifies the baseline os and target os for inplace upgrade.
	InplaceUpgradeOSPair *InplaceUpgradeOSInfo `pulumi:"inplaceUpgradeOSPair"`
	// The metadata of Intune enrollment.
	IntuneEnrollmentMetadata *IntuneEnrollmentMetadata `pulumi:"intuneEnrollmentMetadata"`
	// Metadata used to generate draft package folder and scripts.
	IntuneMetadata *DraftPackageIntuneAppMetadata `pulumi:"intuneMetadata"`
	// Specifies the package id from which the draft package copied.
	PackageId *string `pulumi:"packageId"`
	// Tags of the package to be created.
	PackageTags map[string]string `pulumi:"packageTags"`
	// The process name for script auto-fill. Will be used to identify the application process.
	ProcessName *string `pulumi:"processName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The source type.
	SourceType *string `pulumi:"sourceType"`
	// Tab state.
	TabState *TabState `pulumi:"tabState"`
	// Specifies the target OSs of specific OS Update types.
	TargetOSList []TargetOSInfo `pulumi:"targetOSList"`
	// The resource name of the Test Base Account.
	TestBaseAccountName string `pulumi:"testBaseAccountName"`
	// OOB, functional or flow driven. Mapped to the data in 'tests' property.
	TestTypes []string `pulumi:"testTypes"`
	// The detailed test information.
	Tests []Test `pulumi:"tests"`
	// Indicates whether user choose to enable script auto-fill.
	UseAutofill *bool `pulumi:"useAutofill"`
	// Specifies whether a sample package should be used instead of the one uploaded by the user.
	UseSample *bool `pulumi:"useSample"`
	// Application version
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a DraftPackage resource.
type DraftPackageArgs struct {
	// The name of the app file.
	AppFileName pulumi.StringPtrInput
	// Application name
	ApplicationName pulumi.StringPtrInput
	// Comments added by user.
	Comments pulumi.StringPtrInput
	// The resource name of the Test Base Draft Package.
	DraftPackageName pulumi.StringPtrInput
	// Specifies whether this draft package is used to edit a package.
	EditPackage pulumi.BoolPtrInput
	// The executable launch command for script auto-fill. Will be used to run the application.
	ExecutableLaunchCommand pulumi.StringPtrInput
	// The list of first party applications to test along with user application.
	FirstPartyApps FirstPartyAppDefinitionArrayInput
	// The flighting ring for feature update.
	FlightingRing pulumi.StringPtrInput
	// The list of gallery apps to test along with user application.
	GalleryApps GalleryAppDefinitionArrayInput
	// The highlight files in the package.
	HighlightedFiles HighlightedFileArrayInput
	// Specifies the baseline os and target os for inplace upgrade.
	InplaceUpgradeOSPair InplaceUpgradeOSInfoPtrInput
	// The metadata of Intune enrollment.
	IntuneEnrollmentMetadata IntuneEnrollmentMetadataPtrInput
	// Metadata used to generate draft package folder and scripts.
	IntuneMetadata DraftPackageIntuneAppMetadataPtrInput
	// Specifies the package id from which the draft package copied.
	PackageId pulumi.StringPtrInput
	// Tags of the package to be created.
	PackageTags pulumi.StringMapInput
	// The process name for script auto-fill. Will be used to identify the application process.
	ProcessName pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The source type.
	SourceType pulumi.StringPtrInput
	// Tab state.
	TabState TabStatePtrInput
	// Specifies the target OSs of specific OS Update types.
	TargetOSList TargetOSInfoArrayInput
	// The resource name of the Test Base Account.
	TestBaseAccountName pulumi.StringInput
	// OOB, functional or flow driven. Mapped to the data in 'tests' property.
	TestTypes pulumi.StringArrayInput
	// The detailed test information.
	Tests TestArrayInput
	// Indicates whether user choose to enable script auto-fill.
	UseAutofill pulumi.BoolPtrInput
	// Specifies whether a sample package should be used instead of the one uploaded by the user.
	UseSample pulumi.BoolPtrInput
	// Application version
	Version pulumi.StringPtrInput
}

func (DraftPackageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*draftPackageArgs)(nil)).Elem()
}

type DraftPackageInput interface {
	pulumi.Input

	ToDraftPackageOutput() DraftPackageOutput
	ToDraftPackageOutputWithContext(ctx context.Context) DraftPackageOutput
}

func (*DraftPackage) ElementType() reflect.Type {
	return reflect.TypeOf((**DraftPackage)(nil)).Elem()
}

func (i *DraftPackage) ToDraftPackageOutput() DraftPackageOutput {
	return i.ToDraftPackageOutputWithContext(context.Background())
}

func (i *DraftPackage) ToDraftPackageOutputWithContext(ctx context.Context) DraftPackageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DraftPackageOutput)
}

type DraftPackageOutput struct{ *pulumi.OutputState }

func (DraftPackageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DraftPackage)(nil)).Elem()
}

func (o DraftPackageOutput) ToDraftPackageOutput() DraftPackageOutput {
	return o
}

func (o DraftPackageOutput) ToDraftPackageOutputWithContext(ctx context.Context) DraftPackageOutput {
	return o
}

// The name of the app file.
func (o DraftPackageOutput) AppFileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DraftPackage) pulumi.StringPtrOutput { return v.AppFileName }).(pulumi.StringPtrOutput)
}

// Application name
func (o DraftPackageOutput) ApplicationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DraftPackage) pulumi.StringPtrOutput { return v.ApplicationName }).(pulumi.StringPtrOutput)
}

// Comments added by user.
func (o DraftPackageOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DraftPackage) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

// The relative path of the folder hosting package files.
func (o DraftPackageOutput) DraftPackagePath() pulumi.StringOutput {
	return o.ApplyT(func(v *DraftPackage) pulumi.StringOutput { return v.DraftPackagePath }).(pulumi.StringOutput)
}

// Specifies whether this draft package is used to edit a package.
func (o DraftPackageOutput) EditPackage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DraftPackage) pulumi.BoolPtrOutput { return v.EditPackage }).(pulumi.BoolPtrOutput)
}

// The executable launch command for script auto-fill. Will be used to run the application.
func (o DraftPackageOutput) ExecutableLaunchCommand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DraftPackage) pulumi.StringPtrOutput { return v.ExecutableLaunchCommand }).(pulumi.StringPtrOutput)
}

// The list of first party applications to test along with user application.
func (o DraftPackageOutput) FirstPartyApps() FirstPartyAppDefinitionResponseArrayOutput {
	return o.ApplyT(func(v *DraftPackage) FirstPartyAppDefinitionResponseArrayOutput { return v.FirstPartyApps }).(FirstPartyAppDefinitionResponseArrayOutput)
}

// The flighting ring for feature update.
func (o DraftPackageOutput) FlightingRing() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DraftPackage) pulumi.StringPtrOutput { return v.FlightingRing }).(pulumi.StringPtrOutput)
}

// The list of gallery apps to test along with user application.
func (o DraftPackageOutput) GalleryApps() GalleryAppDefinitionResponseArrayOutput {
	return o.ApplyT(func(v *DraftPackage) GalleryAppDefinitionResponseArrayOutput { return v.GalleryApps }).(GalleryAppDefinitionResponseArrayOutput)
}

// The highlight files in the package.
func (o DraftPackageOutput) HighlightedFiles() HighlightedFileResponseArrayOutput {
	return o.ApplyT(func(v *DraftPackage) HighlightedFileResponseArrayOutput { return v.HighlightedFiles }).(HighlightedFileResponseArrayOutput)
}

// Specifies the baseline os and target os for inplace upgrade.
func (o DraftPackageOutput) InplaceUpgradeOSPair() InplaceUpgradeOSInfoResponsePtrOutput {
	return o.ApplyT(func(v *DraftPackage) InplaceUpgradeOSInfoResponsePtrOutput { return v.InplaceUpgradeOSPair }).(InplaceUpgradeOSInfoResponsePtrOutput)
}

// The metadata of Intune enrollment.
func (o DraftPackageOutput) IntuneEnrollmentMetadata() IntuneEnrollmentMetadataResponsePtrOutput {
	return o.ApplyT(func(v *DraftPackage) IntuneEnrollmentMetadataResponsePtrOutput { return v.IntuneEnrollmentMetadata }).(IntuneEnrollmentMetadataResponsePtrOutput)
}

// Metadata used to generate draft package folder and scripts.
func (o DraftPackageOutput) IntuneMetadata() DraftPackageIntuneAppMetadataResponsePtrOutput {
	return o.ApplyT(func(v *DraftPackage) DraftPackageIntuneAppMetadataResponsePtrOutput { return v.IntuneMetadata }).(DraftPackageIntuneAppMetadataResponsePtrOutput)
}

// The UTC timestamp when the package was last modified.
func (o DraftPackageOutput) LastModifiedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DraftPackage) pulumi.StringOutput { return v.LastModifiedTime }).(pulumi.StringOutput)
}

// The name of the resource
func (o DraftPackageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DraftPackage) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the package id from which the draft package copied.
func (o DraftPackageOutput) PackageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DraftPackage) pulumi.StringPtrOutput { return v.PackageId }).(pulumi.StringPtrOutput)
}

// Tags of the package to be created.
func (o DraftPackageOutput) PackageTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DraftPackage) pulumi.StringMapOutput { return v.PackageTags }).(pulumi.StringMapOutput)
}

// The process name for script auto-fill. Will be used to identify the application process.
func (o DraftPackageOutput) ProcessName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DraftPackage) pulumi.StringPtrOutput { return v.ProcessName }).(pulumi.StringPtrOutput)
}

// The provisioning state of the resource.
func (o DraftPackageOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *DraftPackage) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The source type.
func (o DraftPackageOutput) SourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DraftPackage) pulumi.StringPtrOutput { return v.SourceType }).(pulumi.StringPtrOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o DraftPackageOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *DraftPackage) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Tab state.
func (o DraftPackageOutput) TabState() TabStateResponsePtrOutput {
	return o.ApplyT(func(v *DraftPackage) TabStateResponsePtrOutput { return v.TabState }).(TabStateResponsePtrOutput)
}

// Specifies the target OSs of specific OS Update types.
func (o DraftPackageOutput) TargetOSList() TargetOSInfoResponseArrayOutput {
	return o.ApplyT(func(v *DraftPackage) TargetOSInfoResponseArrayOutput { return v.TargetOSList }).(TargetOSInfoResponseArrayOutput)
}

// OOB, functional or flow driven. Mapped to the data in 'tests' property.
func (o DraftPackageOutput) TestTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DraftPackage) pulumi.StringArrayOutput { return v.TestTypes }).(pulumi.StringArrayOutput)
}

// The detailed test information.
func (o DraftPackageOutput) Tests() TestResponseArrayOutput {
	return o.ApplyT(func(v *DraftPackage) TestResponseArrayOutput { return v.Tests }).(TestResponseArrayOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o DraftPackageOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DraftPackage) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Indicates whether user choose to enable script auto-fill.
func (o DraftPackageOutput) UseAutofill() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DraftPackage) pulumi.BoolPtrOutput { return v.UseAutofill }).(pulumi.BoolPtrOutput)
}

// Specifies whether a sample package should be used instead of the one uploaded by the user.
func (o DraftPackageOutput) UseSample() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DraftPackage) pulumi.BoolPtrOutput { return v.UseSample }).(pulumi.BoolPtrOutput)
}

// Application version
func (o DraftPackageOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DraftPackage) pulumi.StringPtrOutput { return v.Version }).(pulumi.StringPtrOutput)
}

// The relative path for a temporarily folder for package creation work.
func (o DraftPackageOutput) WorkingPath() pulumi.StringOutput {
	return o.ApplyT(func(v *DraftPackage) pulumi.StringOutput { return v.WorkingPath }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(DraftPackageOutput{})
}
