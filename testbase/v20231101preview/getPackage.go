// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20231101preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets a Test Base Package.
func LookupPackage(ctx *pulumi.Context, args *LookupPackageArgs, opts ...pulumi.InvokeOption) (*LookupPackageResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupPackageResult
	err := ctx.Invoke("azure-native:testbase/v20231101preview:getPackage", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupPackageArgs struct {
	// The resource name of the Test Base Package.
	PackageName string `pulumi:"packageName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The resource name of the Test Base Account.
	TestBaseAccountName string `pulumi:"testBaseAccountName"`
}

// The Test Base Package resource.
type LookupPackageResult struct {
	// Application name
	ApplicationName string `pulumi:"applicationName"`
	// The file path of the package.
	BlobPath *string `pulumi:"blobPath"`
	// The id of draft package. Used to create or update this package from a draft package.
	DraftPackageId *string `pulumi:"draftPackageId"`
	// The list of first party applications to test along with user application.
	FirstPartyApps []FirstPartyAppDefinitionResponse `pulumi:"firstPartyApps"`
	// The flighting ring for feature update.
	FlightingRing *string `pulumi:"flightingRing"`
	// The list of gallery apps to test along with user application.
	GalleryApps []GalleryAppDefinitionResponse `pulumi:"galleryApps"`
	// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	Id string `pulumi:"id"`
	// Specifies the baseline os and target os for inplace upgrade.
	InplaceUpgradeOSPair *InplaceUpgradeOSInfoResponse `pulumi:"inplaceUpgradeOSPair"`
	// The metadata of Intune enrollment.
	IntuneEnrollmentMetadata *IntuneEnrollmentMetadataResponse `pulumi:"intuneEnrollmentMetadata"`
	// Flag showing that whether the package is enabled. It doesn't schedule test for package which is not enabled.
	IsEnabled bool `pulumi:"isEnabled"`
	// The UTC timestamp when the package was last modified.
	LastModifiedTime string `pulumi:"lastModifiedTime"`
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// The name of the resource
	Name string `pulumi:"name"`
	// The status of the package.
	PackageStatus string `pulumi:"packageStatus"`
	// The provisioning state of the resource.
	ProvisioningState string `pulumi:"provisioningState"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the target OSs of specific OS Update types.
	TargetOSList []TargetOSInfoResponse `pulumi:"targetOSList"`
	// OOB, functional or flow driven. Mapped to the data in 'tests' property.
	TestTypes []string `pulumi:"testTypes"`
	// The detailed test information.
	Tests []TestResponse `pulumi:"tests"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
	// The validation results. There's validation on package when it's created or updated.
	ValidationResults []PackageValidationResultResponse `pulumi:"validationResults"`
	// Application version
	Version string `pulumi:"version"`
}

func LookupPackageOutput(ctx *pulumi.Context, args LookupPackageOutputArgs, opts ...pulumi.InvokeOption) LookupPackageResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPackageResult, error) {
			args := v.(LookupPackageArgs)
			r, err := LookupPackage(ctx, &args, opts...)
			var s LookupPackageResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupPackageResultOutput)
}

type LookupPackageOutputArgs struct {
	// The resource name of the Test Base Package.
	PackageName pulumi.StringInput `pulumi:"packageName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The resource name of the Test Base Account.
	TestBaseAccountName pulumi.StringInput `pulumi:"testBaseAccountName"`
}

func (LookupPackageOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPackageArgs)(nil)).Elem()
}

// The Test Base Package resource.
type LookupPackageResultOutput struct{ *pulumi.OutputState }

func (LookupPackageResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPackageResult)(nil)).Elem()
}

func (o LookupPackageResultOutput) ToLookupPackageResultOutput() LookupPackageResultOutput {
	return o
}

func (o LookupPackageResultOutput) ToLookupPackageResultOutputWithContext(ctx context.Context) LookupPackageResultOutput {
	return o
}

// Application name
func (o LookupPackageResultOutput) ApplicationName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPackageResult) string { return v.ApplicationName }).(pulumi.StringOutput)
}

// The file path of the package.
func (o LookupPackageResultOutput) BlobPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPackageResult) *string { return v.BlobPath }).(pulumi.StringPtrOutput)
}

// The id of draft package. Used to create or update this package from a draft package.
func (o LookupPackageResultOutput) DraftPackageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPackageResult) *string { return v.DraftPackageId }).(pulumi.StringPtrOutput)
}

// The list of first party applications to test along with user application.
func (o LookupPackageResultOutput) FirstPartyApps() FirstPartyAppDefinitionResponseArrayOutput {
	return o.ApplyT(func(v LookupPackageResult) []FirstPartyAppDefinitionResponse { return v.FirstPartyApps }).(FirstPartyAppDefinitionResponseArrayOutput)
}

// The flighting ring for feature update.
func (o LookupPackageResultOutput) FlightingRing() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPackageResult) *string { return v.FlightingRing }).(pulumi.StringPtrOutput)
}

// The list of gallery apps to test along with user application.
func (o LookupPackageResultOutput) GalleryApps() GalleryAppDefinitionResponseArrayOutput {
	return o.ApplyT(func(v LookupPackageResult) []GalleryAppDefinitionResponse { return v.GalleryApps }).(GalleryAppDefinitionResponseArrayOutput)
}

// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
func (o LookupPackageResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPackageResult) string { return v.Id }).(pulumi.StringOutput)
}

// Specifies the baseline os and target os for inplace upgrade.
func (o LookupPackageResultOutput) InplaceUpgradeOSPair() InplaceUpgradeOSInfoResponsePtrOutput {
	return o.ApplyT(func(v LookupPackageResult) *InplaceUpgradeOSInfoResponse { return v.InplaceUpgradeOSPair }).(InplaceUpgradeOSInfoResponsePtrOutput)
}

// The metadata of Intune enrollment.
func (o LookupPackageResultOutput) IntuneEnrollmentMetadata() IntuneEnrollmentMetadataResponsePtrOutput {
	return o.ApplyT(func(v LookupPackageResult) *IntuneEnrollmentMetadataResponse { return v.IntuneEnrollmentMetadata }).(IntuneEnrollmentMetadataResponsePtrOutput)
}

// Flag showing that whether the package is enabled. It doesn't schedule test for package which is not enabled.
func (o LookupPackageResultOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupPackageResult) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// The UTC timestamp when the package was last modified.
func (o LookupPackageResultOutput) LastModifiedTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPackageResult) string { return v.LastModifiedTime }).(pulumi.StringOutput)
}

// The geo-location where the resource lives
func (o LookupPackageResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPackageResult) string { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupPackageResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPackageResult) string { return v.Name }).(pulumi.StringOutput)
}

// The status of the package.
func (o LookupPackageResultOutput) PackageStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPackageResult) string { return v.PackageStatus }).(pulumi.StringOutput)
}

// The provisioning state of the resource.
func (o LookupPackageResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPackageResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupPackageResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupPackageResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o LookupPackageResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupPackageResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Specifies the target OSs of specific OS Update types.
func (o LookupPackageResultOutput) TargetOSList() TargetOSInfoResponseArrayOutput {
	return o.ApplyT(func(v LookupPackageResult) []TargetOSInfoResponse { return v.TargetOSList }).(TargetOSInfoResponseArrayOutput)
}

// OOB, functional or flow driven. Mapped to the data in 'tests' property.
func (o LookupPackageResultOutput) TestTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupPackageResult) []string { return v.TestTypes }).(pulumi.StringArrayOutput)
}

// The detailed test information.
func (o LookupPackageResultOutput) Tests() TestResponseArrayOutput {
	return o.ApplyT(func(v LookupPackageResult) []TestResponse { return v.Tests }).(TestResponseArrayOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupPackageResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPackageResult) string { return v.Type }).(pulumi.StringOutput)
}

// The validation results. There's validation on package when it's created or updated.
func (o LookupPackageResultOutput) ValidationResults() PackageValidationResultResponseArrayOutput {
	return o.ApplyT(func(v LookupPackageResult) []PackageValidationResultResponse { return v.ValidationResults }).(PackageValidationResultResponseArrayOutput)
}

// Application version
func (o LookupPackageResultOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPackageResult) string { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPackageResultOutput{})
}
