// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package testbase

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets a Test Base Draft Package.
// Azure REST API version: 2023-11-01-preview.
func LookupDraftPackage(ctx *pulumi.Context, args *LookupDraftPackageArgs, opts ...pulumi.InvokeOption) (*LookupDraftPackageResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupDraftPackageResult
	err := ctx.Invoke("azure-native:testbase:getDraftPackage", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return rv.Defaults(), nil
}

type LookupDraftPackageArgs struct {
	// The resource name of the Test Base Draft Package.
	DraftPackageName string `pulumi:"draftPackageName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The resource name of the Test Base Account.
	TestBaseAccountName string `pulumi:"testBaseAccountName"`
}

// The Test Base Draft Package resource.
type LookupDraftPackageResult struct {
	// The name of the app file.
	AppFileName *string `pulumi:"appFileName"`
	// Application name
	ApplicationName *string `pulumi:"applicationName"`
	// Comments added by user.
	Comments *string `pulumi:"comments"`
	// The relative path of the folder hosting package files.
	DraftPackagePath string `pulumi:"draftPackagePath"`
	// Specifies whether this draft package is used to edit a package.
	EditPackage *bool `pulumi:"editPackage"`
	// The executable launch command for script auto-fill. Will be used to run the application.
	ExecutableLaunchCommand *string `pulumi:"executableLaunchCommand"`
	// The list of first party applications to test along with user application.
	FirstPartyApps []FirstPartyAppDefinitionResponse `pulumi:"firstPartyApps"`
	// The flighting ring for feature update.
	FlightingRing *string `pulumi:"flightingRing"`
	// The list of gallery apps to test along with user application.
	GalleryApps []GalleryAppDefinitionResponse `pulumi:"galleryApps"`
	// The highlight files in the package.
	HighlightedFiles []HighlightedFileResponse `pulumi:"highlightedFiles"`
	// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	Id string `pulumi:"id"`
	// Specifies the baseline os and target os for inplace upgrade.
	InplaceUpgradeOSPair *InplaceUpgradeOSInfoResponse `pulumi:"inplaceUpgradeOSPair"`
	// The metadata of Intune enrollment.
	IntuneEnrollmentMetadata *IntuneEnrollmentMetadataResponse `pulumi:"intuneEnrollmentMetadata"`
	// Metadata used to generate draft package folder and scripts.
	IntuneMetadata *DraftPackageIntuneAppMetadataResponse `pulumi:"intuneMetadata"`
	// The UTC timestamp when the package was last modified.
	LastModifiedTime string `pulumi:"lastModifiedTime"`
	// The name of the resource
	Name string `pulumi:"name"`
	// Specifies the package id from which the draft package copied.
	PackageId *string `pulumi:"packageId"`
	// Tags of the package to be created.
	PackageTags map[string]string `pulumi:"packageTags"`
	// The process name for script auto-fill. Will be used to identify the application process.
	ProcessName *string `pulumi:"processName"`
	// The provisioning state of the resource.
	ProvisioningState string `pulumi:"provisioningState"`
	// The source type.
	SourceType *string `pulumi:"sourceType"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Tab state.
	TabState *TabStateResponse `pulumi:"tabState"`
	// Specifies the target OSs of specific OS Update types.
	TargetOSList []TargetOSInfoResponse `pulumi:"targetOSList"`
	// OOB, functional or flow driven. Mapped to the data in 'tests' property.
	TestTypes []string `pulumi:"testTypes"`
	// The detailed test information.
	Tests []TestResponse `pulumi:"tests"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
	// Indicates whether user choose to enable script auto-fill.
	UseAutofill *bool `pulumi:"useAutofill"`
	// Specifies whether a sample package should be used instead of the one uploaded by the user.
	UseSample *bool `pulumi:"useSample"`
	// Application version
	Version *string `pulumi:"version"`
	// The relative path for a temporarily folder for package creation work.
	WorkingPath string `pulumi:"workingPath"`
}

// Defaults sets the appropriate defaults for LookupDraftPackageResult
func (val *LookupDraftPackageResult) Defaults() *LookupDraftPackageResult {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EditPackage == nil {
		editPackage_ := false
		tmp.EditPackage = &editPackage_
	}
	if tmp.SourceType == nil {
		sourceType_ := "Native"
		tmp.SourceType = &sourceType_
	}
	return &tmp
}

func LookupDraftPackageOutput(ctx *pulumi.Context, args LookupDraftPackageOutputArgs, opts ...pulumi.InvokeOption) LookupDraftPackageResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDraftPackageResult, error) {
			args := v.(LookupDraftPackageArgs)
			r, err := LookupDraftPackage(ctx, &args, opts...)
			var s LookupDraftPackageResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDraftPackageResultOutput)
}

type LookupDraftPackageOutputArgs struct {
	// The resource name of the Test Base Draft Package.
	DraftPackageName pulumi.StringInput `pulumi:"draftPackageName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The resource name of the Test Base Account.
	TestBaseAccountName pulumi.StringInput `pulumi:"testBaseAccountName"`
}

func (LookupDraftPackageOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDraftPackageArgs)(nil)).Elem()
}

// The Test Base Draft Package resource.
type LookupDraftPackageResultOutput struct{ *pulumi.OutputState }

func (LookupDraftPackageResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDraftPackageResult)(nil)).Elem()
}

func (o LookupDraftPackageResultOutput) ToLookupDraftPackageResultOutput() LookupDraftPackageResultOutput {
	return o
}

func (o LookupDraftPackageResultOutput) ToLookupDraftPackageResultOutputWithContext(ctx context.Context) LookupDraftPackageResultOutput {
	return o
}

// The name of the app file.
func (o LookupDraftPackageResultOutput) AppFileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDraftPackageResult) *string { return v.AppFileName }).(pulumi.StringPtrOutput)
}

// Application name
func (o LookupDraftPackageResultOutput) ApplicationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDraftPackageResult) *string { return v.ApplicationName }).(pulumi.StringPtrOutput)
}

// Comments added by user.
func (o LookupDraftPackageResultOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDraftPackageResult) *string { return v.Comments }).(pulumi.StringPtrOutput)
}

// The relative path of the folder hosting package files.
func (o LookupDraftPackageResultOutput) DraftPackagePath() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDraftPackageResult) string { return v.DraftPackagePath }).(pulumi.StringOutput)
}

// Specifies whether this draft package is used to edit a package.
func (o LookupDraftPackageResultOutput) EditPackage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupDraftPackageResult) *bool { return v.EditPackage }).(pulumi.BoolPtrOutput)
}

// The executable launch command for script auto-fill. Will be used to run the application.
func (o LookupDraftPackageResultOutput) ExecutableLaunchCommand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDraftPackageResult) *string { return v.ExecutableLaunchCommand }).(pulumi.StringPtrOutput)
}

// The list of first party applications to test along with user application.
func (o LookupDraftPackageResultOutput) FirstPartyApps() FirstPartyAppDefinitionResponseArrayOutput {
	return o.ApplyT(func(v LookupDraftPackageResult) []FirstPartyAppDefinitionResponse { return v.FirstPartyApps }).(FirstPartyAppDefinitionResponseArrayOutput)
}

// The flighting ring for feature update.
func (o LookupDraftPackageResultOutput) FlightingRing() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDraftPackageResult) *string { return v.FlightingRing }).(pulumi.StringPtrOutput)
}

// The list of gallery apps to test along with user application.
func (o LookupDraftPackageResultOutput) GalleryApps() GalleryAppDefinitionResponseArrayOutput {
	return o.ApplyT(func(v LookupDraftPackageResult) []GalleryAppDefinitionResponse { return v.GalleryApps }).(GalleryAppDefinitionResponseArrayOutput)
}

// The highlight files in the package.
func (o LookupDraftPackageResultOutput) HighlightedFiles() HighlightedFileResponseArrayOutput {
	return o.ApplyT(func(v LookupDraftPackageResult) []HighlightedFileResponse { return v.HighlightedFiles }).(HighlightedFileResponseArrayOutput)
}

// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
func (o LookupDraftPackageResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDraftPackageResult) string { return v.Id }).(pulumi.StringOutput)
}

// Specifies the baseline os and target os for inplace upgrade.
func (o LookupDraftPackageResultOutput) InplaceUpgradeOSPair() InplaceUpgradeOSInfoResponsePtrOutput {
	return o.ApplyT(func(v LookupDraftPackageResult) *InplaceUpgradeOSInfoResponse { return v.InplaceUpgradeOSPair }).(InplaceUpgradeOSInfoResponsePtrOutput)
}

// The metadata of Intune enrollment.
func (o LookupDraftPackageResultOutput) IntuneEnrollmentMetadata() IntuneEnrollmentMetadataResponsePtrOutput {
	return o.ApplyT(func(v LookupDraftPackageResult) *IntuneEnrollmentMetadataResponse { return v.IntuneEnrollmentMetadata }).(IntuneEnrollmentMetadataResponsePtrOutput)
}

// Metadata used to generate draft package folder and scripts.
func (o LookupDraftPackageResultOutput) IntuneMetadata() DraftPackageIntuneAppMetadataResponsePtrOutput {
	return o.ApplyT(func(v LookupDraftPackageResult) *DraftPackageIntuneAppMetadataResponse { return v.IntuneMetadata }).(DraftPackageIntuneAppMetadataResponsePtrOutput)
}

// The UTC timestamp when the package was last modified.
func (o LookupDraftPackageResultOutput) LastModifiedTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDraftPackageResult) string { return v.LastModifiedTime }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupDraftPackageResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDraftPackageResult) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies the package id from which the draft package copied.
func (o LookupDraftPackageResultOutput) PackageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDraftPackageResult) *string { return v.PackageId }).(pulumi.StringPtrOutput)
}

// Tags of the package to be created.
func (o LookupDraftPackageResultOutput) PackageTags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupDraftPackageResult) map[string]string { return v.PackageTags }).(pulumi.StringMapOutput)
}

// The process name for script auto-fill. Will be used to identify the application process.
func (o LookupDraftPackageResultOutput) ProcessName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDraftPackageResult) *string { return v.ProcessName }).(pulumi.StringPtrOutput)
}

// The provisioning state of the resource.
func (o LookupDraftPackageResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDraftPackageResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The source type.
func (o LookupDraftPackageResultOutput) SourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDraftPackageResult) *string { return v.SourceType }).(pulumi.StringPtrOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupDraftPackageResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupDraftPackageResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Tab state.
func (o LookupDraftPackageResultOutput) TabState() TabStateResponsePtrOutput {
	return o.ApplyT(func(v LookupDraftPackageResult) *TabStateResponse { return v.TabState }).(TabStateResponsePtrOutput)
}

// Specifies the target OSs of specific OS Update types.
func (o LookupDraftPackageResultOutput) TargetOSList() TargetOSInfoResponseArrayOutput {
	return o.ApplyT(func(v LookupDraftPackageResult) []TargetOSInfoResponse { return v.TargetOSList }).(TargetOSInfoResponseArrayOutput)
}

// OOB, functional or flow driven. Mapped to the data in 'tests' property.
func (o LookupDraftPackageResultOutput) TestTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDraftPackageResult) []string { return v.TestTypes }).(pulumi.StringArrayOutput)
}

// The detailed test information.
func (o LookupDraftPackageResultOutput) Tests() TestResponseArrayOutput {
	return o.ApplyT(func(v LookupDraftPackageResult) []TestResponse { return v.Tests }).(TestResponseArrayOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupDraftPackageResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDraftPackageResult) string { return v.Type }).(pulumi.StringOutput)
}

// Indicates whether user choose to enable script auto-fill.
func (o LookupDraftPackageResultOutput) UseAutofill() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupDraftPackageResult) *bool { return v.UseAutofill }).(pulumi.BoolPtrOutput)
}

// Specifies whether a sample package should be used instead of the one uploaded by the user.
func (o LookupDraftPackageResultOutput) UseSample() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupDraftPackageResult) *bool { return v.UseSample }).(pulumi.BoolPtrOutput)
}

// Application version
func (o LookupDraftPackageResultOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDraftPackageResult) *string { return v.Version }).(pulumi.StringPtrOutput)
}

// The relative path for a temporarily folder for package creation work.
func (o LookupDraftPackageResultOutput) WorkingPath() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDraftPackageResult) string { return v.WorkingPath }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDraftPackageResultOutput{})
}
