// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package testbase

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets draft package path and temp working path with SAS.
// Azure REST API version: 2023-11-01-preview.
func GetDraftPackagePath(ctx *pulumi.Context, args *GetDraftPackagePathArgs, opts ...pulumi.InvokeOption) (*GetDraftPackagePathResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv GetDraftPackagePathResult
	err := ctx.Invoke("azure-native:testbase:getDraftPackagePath", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type GetDraftPackagePathArgs struct {
	// The resource name of the Test Base Draft Package.
	DraftPackageName string `pulumi:"draftPackageName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The resource name of the Test Base Account.
	TestBaseAccountName string `pulumi:"testBaseAccountName"`
}

// The response of getting a download URL.
type GetDraftPackagePathResult struct {
	// The base URL of the storage account.
	BaseUrl string `pulumi:"baseUrl"`
	// The relative path of the folder hosting package files.
	DraftPackagePath string `pulumi:"draftPackagePath"`
	// Expiry date of the SAS token.
	ExpirationTime string `pulumi:"expirationTime"`
	// A SAS token for the storage account to access workspace.
	SasToken string `pulumi:"sasToken"`
	// The relative path for a temporary folder for package creation work.
	WorkingPath string `pulumi:"workingPath"`
}

func GetDraftPackagePathOutput(ctx *pulumi.Context, args GetDraftPackagePathOutputArgs, opts ...pulumi.InvokeOption) GetDraftPackagePathResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetDraftPackagePathResult, error) {
			args := v.(GetDraftPackagePathArgs)
			r, err := GetDraftPackagePath(ctx, &args, opts...)
			var s GetDraftPackagePathResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetDraftPackagePathResultOutput)
}

type GetDraftPackagePathOutputArgs struct {
	// The resource name of the Test Base Draft Package.
	DraftPackageName pulumi.StringInput `pulumi:"draftPackageName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The resource name of the Test Base Account.
	TestBaseAccountName pulumi.StringInput `pulumi:"testBaseAccountName"`
}

func (GetDraftPackagePathOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDraftPackagePathArgs)(nil)).Elem()
}

// The response of getting a download URL.
type GetDraftPackagePathResultOutput struct{ *pulumi.OutputState }

func (GetDraftPackagePathResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDraftPackagePathResult)(nil)).Elem()
}

func (o GetDraftPackagePathResultOutput) ToGetDraftPackagePathResultOutput() GetDraftPackagePathResultOutput {
	return o
}

func (o GetDraftPackagePathResultOutput) ToGetDraftPackagePathResultOutputWithContext(ctx context.Context) GetDraftPackagePathResultOutput {
	return o
}

// The base URL of the storage account.
func (o GetDraftPackagePathResultOutput) BaseUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetDraftPackagePathResult) string { return v.BaseUrl }).(pulumi.StringOutput)
}

// The relative path of the folder hosting package files.
func (o GetDraftPackagePathResultOutput) DraftPackagePath() pulumi.StringOutput {
	return o.ApplyT(func(v GetDraftPackagePathResult) string { return v.DraftPackagePath }).(pulumi.StringOutput)
}

// Expiry date of the SAS token.
func (o GetDraftPackagePathResultOutput) ExpirationTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetDraftPackagePathResult) string { return v.ExpirationTime }).(pulumi.StringOutput)
}

// A SAS token for the storage account to access workspace.
func (o GetDraftPackagePathResultOutput) SasToken() pulumi.StringOutput {
	return o.ApplyT(func(v GetDraftPackagePathResult) string { return v.SasToken }).(pulumi.StringOutput)
}

// The relative path for a temporary folder for package creation work.
func (o GetDraftPackagePathResultOutput) WorkingPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetDraftPackagePathResult) string { return v.WorkingPath }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDraftPackagePathResultOutput{})
}
